{"version":3,"file":"customgpt-widget.js","mappings":"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","sources":["webpack://CustomGPTWidget/webpack/universalModuleDefinition","webpack://CustomGPTWidget/webpack/runtime/chunk loaded","webpack://CustomGPTWidget/webpack/runtime/create fake namespace object","webpack://CustomGPTWidget/webpack/runtime/load script","webpack://CustomGPTWidget/./src/store/conversations.ts","webpack://CustomGPTWidget/./src/lib/utils.ts","webpack://CustomGPTWidget/./src/lib/voice/utils/math.ts","webpack://CustomGPTWidget/./src/lib/constants/demo-limits.ts","webpack://CustomGPTWidget/./src/lib/analytics/usage-tracker.ts","webpack://CustomGPTWidget/./src/lib/constants/error-messages.ts","webpack://CustomGPTWidget/./src/lib/api/proxy-client.ts","webpack://CustomGPTWidget/./src/lib/api/client.ts","webpack://CustomGPTWidget/./src/lib/logger.ts","webpack://CustomGPTWidget/./src/components/ui/button.tsx","webpack://CustomGPTWidget/./src/components/ui/avatar.tsx","webpack://CustomGPTWidget/./src/components/chat/CitationList.tsx","webpack://CustomGPTWidget/./src/components/chat/MessageDetails.tsx","webpack://CustomGPTWidget/./src/components/chat/Message.tsx","webpack://CustomGPTWidget/./src/contexts/DemoModeContext.tsx","webpack://CustomGPTWidget/./src/components/ui/loading.tsx","webpack://CustomGPTWidget/./src/components/ui/tooltip.tsx","webpack://CustomGPTWidget/./src/components/voice/SpeechToTextButton.tsx","webpack://CustomGPTWidget/./src/components/voice/AnimatedVoiceIcon.tsx","webpack://CustomGPTWidget/./src/components/ui/dropdown-menu.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatInput.tsx","webpack://CustomGPTWidget/./src/components/chat/TypingIndicator.tsx","webpack://CustomGPTWidget/./src/components/chat/AgentSelector.tsx","webpack://CustomGPTWidget/./src/hooks/useMediaQuery.ts","webpack://CustomGPTWidget/./src/components/chat/CitationDetailsModal.tsx","webpack://CustomGPTWidget/./src/components/chat/CitationFilePreview.tsx","webpack://CustomGPTWidget/./src/components/chat/ConversationManager.tsx","webpack://CustomGPTWidget/./src/components/chat/MessageErrorDisplay.tsx","webpack://CustomGPTWidget/./src/widget/WidgetContext.tsx","webpack://CustomGPTWidget/./src/store/widget-stores/messages.ts","webpack://CustomGPTWidget/./src/store/widget-stores/conversations.ts","webpack://CustomGPTWidget/./src/store/widget-stores/agents.ts","webpack://CustomGPTWidget/./src/widget/WidgetStoreContext.tsx","webpack://CustomGPTWidget/./src/hooks/useWidgetStore.ts","webpack://CustomGPTWidget/./src/lib/voice/themes/ThemeManager.ts","webpack://CustomGPTWidget/./src/components/voice/Canvas.tsx","webpack://CustomGPTWidget/./src/lib/utils/throttle.ts","webpack://CustomGPTWidget/./src/store/voice-settings.ts","webpack://CustomGPTWidget/./src/components/voice/VoiceSettings.tsx","webpack://CustomGPTWidget/./src/lib/voice/streaming-tts.ts","webpack://CustomGPTWidget/./src/lib/voice/speech-manager.ts","webpack://CustomGPTWidget/./src/lib/voice/utils.ts","webpack://CustomGPTWidget/./src/lib/crypto.ts","webpack://CustomGPTWidget/./src/store/demo.ts","webpack://CustomGPTWidget/./src/components/voice/VoiceModal.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatContainer.tsx","webpack://CustomGPTWidget/./src/components/chat/ConversationDetailsModal.tsx","webpack://CustomGPTWidget/./src/components/chat/DeleteConversationDialog.tsx","webpack://CustomGPTWidget/./src/components/chat/ConversationSidebar.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatLayout.tsx","webpack://CustomGPTWidget/./src/widget/index.tsx","webpack://CustomGPTWidget/./src/lib/voice/themes/DefaultTheme.ts","webpack://CustomGPTWidget/./src/store/agents.ts","webpack://CustomGPTWidget/./src/lib/voice/utils/performance.ts","webpack://CustomGPTWidget/./src/lib/streaming/handler.ts","webpack://CustomGPTWidget/./src/lib/voice/themes/IVoiceTheme.ts","webpack://CustomGPTWidget/./src/lib/theme.ts","webpack://CustomGPTWidget/./src/store/config.ts","webpack://CustomGPTWidget/./src/store/ui.ts","webpack://CustomGPTWidget/./src/store/analytics.ts","webpack://CustomGPTWidget/./src/store/pages.ts","webpack://CustomGPTWidget/./src/store/sources.ts","webpack://CustomGPTWidget/./src/store/profile.ts","webpack://CustomGPTWidget/./src/store/project-settings.ts","webpack://CustomGPTWidget/./src/store/licenses.ts","webpack://CustomGPTWidget/./src/store/index.ts","webpack://CustomGPTWidget/./src/lib/voice/themes/PerformanceOptimizations.ts","webpack://CustomGPTWidget/./src/lib/voice/themes/BaseTheme.ts","webpack://CustomGPTWidget/./node_modules/.pnpm/onnxruntime-web@1.22.0/node_modules/onnxruntime-web/dist/ sync","webpack://CustomGPTWidget/./src/store/chat-settings.ts","webpack://CustomGPTWidget/./src/store/messages.ts","webpack://CustomGPTWidget/webpack/bootstrap","webpack://CustomGPTWidget/webpack/runtime/compat get default export","webpack://CustomGPTWidget/webpack/runtime/define property getters","webpack://CustomGPTWidget/webpack/runtime/ensure chunk","webpack://CustomGPTWidget/webpack/runtime/get javascript chunk filename","webpack://CustomGPTWidget/webpack/runtime/get mini-css chunk filename","webpack://CustomGPTWidget/webpack/runtime/global","webpack://CustomGPTWidget/webpack/runtime/hasOwnProperty shorthand","webpack://CustomGPTWidget/webpack/runtime/make namespace object","webpack://CustomGPTWidget/webpack/runtime/publicPath","webpack://CustomGPTWidget/webpack/runtime/jsonp chunk loading","webpack://CustomGPTWidget/webpack/runtime/nonce","webpack://CustomGPTWidget/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"CustomGPTWidget\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CustomGPTWidget\"] = factory();\n\telse\n\t\troot[\"CustomGPTWidget\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; (typeof current == 'object' || typeof current == 'function') && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"CustomGPTWidget:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConversationStore, Conversation } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateConversationName } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n// Session-based conversation isolation\nconst getSessionId = (): string => {\n  // Check if we're running on the server\n  if (typeof window === 'undefined') {\n    return 'server-session';\n  }\n  \n  // Use the current widget session if available\n  if ((window as any).__customgpt_current_session) {\n    return (window as any).__customgpt_current_session;\n  }\n  \n  // Check if we're in widget mode with session configuration\n  if ((window as any).__customgpt_session) {\n    return (window as any).__customgpt_session.sessionId;\n  }\n  \n  // Check for instance-specific sessions (for isolated widgets)\n  if ((window as any).__customgpt_sessions) {\n    // For isolated widgets, we need to determine which session to use\n    // This is tricky since stores are global - we'll use the most recent session\n    const sessions = (window as any).__customgpt_sessions;\n    const sessionIds = Object.keys(sessions);\n    if (sessionIds.length > 0) {\n      // Return the most recently created session\n      return sessionIds[sessionIds.length - 1];\n    }\n  }\n  \n  // Fallback to browser-based session ID\n  try {\n    let sessionId = sessionStorage.getItem('customgpt_session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      sessionStorage.setItem('customgpt_session_id', sessionId);\n    }\n    return sessionId;\n  } catch (e) {\n    // Fallback if sessionStorage is not available\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n};\n\nexport const useConversationStore = create<ConversationStore>()(\n  persist(\n    (set, get) => ({\n      conversations: [],\n      currentConversation: null,\n      loading: false,\n      error: null,\n      // Pagination state\n      currentPage: 1,\n      totalPages: 1,\n      totalConversations: 0,\n      perPage: 20,\n      // Sorting and filtering state\n      sortOrder: 'desc' as const,\n      sortBy: 'id',\n      userFilter: 'all' as const,\n\n      fetchConversations: async (projectId: number, params?: {\n        page?: number;\n        per_page?: number;\n        order?: 'asc' | 'desc';\n        orderBy?: string;\n        userFilter?: 'all' | string;\n        searchQuery?: string;\n        searchMode?: 'name' | 'id' | 'session';\n        dateFilter?: 'today' | 'week' | 'month';\n      }) => {\n        logger.info('CONVERSATIONS', 'Fetching conversations', { projectId, params });\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          // Merge params with current state\n          const queryParams = {\n            page: params?.page ?? get().currentPage,\n            per_page: params?.per_page ?? get().perPage,\n            order: params?.order ?? get().sortOrder,\n            orderBy: params?.orderBy ?? get().sortBy,\n            userFilter: params?.userFilter ?? get().userFilter,\n            searchQuery: params?.searchQuery,\n            searchMode: params?.searchMode,\n            dateFilter: params?.dateFilter,\n          };\n          \n          const response = await client.getConversations(projectId, queryParams);\n          logger.info('CONVERSATIONS', 'API response received', { \n            projectId,\n            responseType: typeof response,\n            hasData: !!(response as any)?.data,\n            dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n          });\n          \n          // Handle different response formats\n          let conversations = [];\n          let paginationData = null;\n          \n          if (response && typeof response === 'object') {\n            // Standard paginated response format\n            if ((response as any).data && (response as any).data.data) {\n              conversations = (response as any).data.data;\n              paginationData = (response as any).data;\n            } else if (Array.isArray((response as any).data)) {\n              conversations = (response as any).data;\n            } else if (Array.isArray(response)) {\n              conversations = response;\n            }\n          }\n          \n          logger.info('CONVERSATIONS', 'Processed conversations', {\n            count: conversations.length,\n            paginationData,\n            conversations: conversations.map((c: any) => ({ \n              id: c.id, \n              name: c.name,\n              messagesCount: c.messages?.length || 0 \n            }))\n          });\n          \n          // Update state with conversations and pagination data\n          set({ \n            conversations, \n            loading: false,\n            // Update pagination state if available\n            currentPage: paginationData?.current_page ?? 1,\n            totalPages: paginationData?.last_page ?? 1,\n            totalConversations: paginationData?.total ?? conversations.length,\n            // Update sorting/filtering if params were provided\n            ...(params?.order && { sortOrder: params.order }),\n            ...(params?.orderBy && { sortBy: params.orderBy }),\n            ...(params?.userFilter && { userFilter: params.userFilter }),\n          });\n        } catch (error) {\n          logger.error('CONVERSATIONS', 'Failed to fetch conversations', error, {\n            projectId,\n            errorType: error instanceof Error ? error.constructor.name : typeof error,\n            status: (error as any)?.status,\n            message: (error as any)?.message\n          });\n          // Don't clear existing conversations on error - preserve local state\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to fetch conversations',\n            loading: false,\n            // Keep existing conversations instead of clearing them\n          });\n        }\n      },\n\n      createConversation: async (projectId: number, name?: string) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createConversation(projectId, name ? { name } : undefined);\n          const newConversation = response.data;\n          \n          set(state => ({ \n            conversations: [newConversation, ...state.conversations],\n            currentConversation: newConversation,\n            loading: false,\n          }));\n        } catch (error) {\n          console.error('Failed to create conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      selectConversation: (conversation: Conversation | null) => {\n        set({ currentConversation: conversation });\n      },\n\n      deleteConversation: async (conversationId: string | number) => {\n        const { conversations, currentConversation } = get();\n        const conversation = conversations.find(c => c.id.toString() === conversationId.toString());\n        \n        if (!conversation) return;\n\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteConversation(conversation.project_id, conversation.session_id);\n          \n          const updatedConversations = conversations.filter(c => c.id.toString() !== conversationId.toString());\n          \n          set({ \n            conversations: updatedConversations,\n            currentConversation: currentConversation?.id.toString() === conversationId.toString() \n              ? (updatedConversations.length > 0 ? updatedConversations[0] : null)\n              : currentConversation,\n            loading: false,\n          });\n        } catch (error) {\n          console.error('Failed to delete conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      updateConversation: async (conversationId: number, sessionId: string, data: { name: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateConversation(conversationId, sessionId, data);\n          const updatedConversation = response.data;\n          \n          set(state => ({ \n            conversations: state.conversations.map(c => \n              c.id === conversationId ? updatedConversation : c\n            ),\n            currentConversation: state.currentConversation?.id === conversationId \n              ? updatedConversation \n              : state.currentConversation,\n            loading: false,\n          }));\n        } catch (error) {\n          console.error('Failed to update conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      // Auto-create conversation if none exists\n      ensureConversation: async (projectId: number, firstMessage?: string) => {\n        const { currentConversation } = get();\n        \n        // If we have a current conversation for this project, use it\n        if (currentConversation && currentConversation.project_id === projectId) {\n          return currentConversation;\n        }\n        \n        // If no current conversation, always create a new one\n        // This ensures that seeing the welcome screen (currentConversation = null) \n        // always results in starting a fresh conversation\n        const name = firstMessage \n          ? generateConversationName(firstMessage)\n          : `Chat ${new Date().toLocaleDateString()}`;\n          \n        await get().createConversation(projectId, name);\n        return get().currentConversation!;\n      },\n    }),\n    {\n      name: `customgpt-conversations-${getSessionId()}`,\n      partialize: (state) => ({\n        conversations: state.conversations,\n        // Don't persist currentConversation to always start fresh\n      }),\n      onRehydrateStorage: () => (state) => {\n        if (state) {\n          // Ensure conversations is an array\n          if (!Array.isArray(state.conversations)) {\n            state.conversations = [];\n          }\n          \n          // Clear current conversation on fresh app load to start with welcome screen\n          state.currentConversation = null;\n        }\n      },\n    }\n  )\n);","/**\n * Utility Functions Library\n * \n * Common utility functions used throughout the application.\n * These utilities handle:\n * - CSS class merging for Tailwind\n * - ID generation\n * - File operations\n * - Date/time formatting\n * - Clipboard operations\n * - HTML sanitization\n * - API helpers\n * \n * Features:\n * - Pure, reusable utility functions with full TypeScript support\n * - Comprehensive JSDoc documentation with usage examples\n * - Robust edge case handling and error recovery\n * - Optimized performance with configurable options\n * - Production-ready implementations for common operations\n */\n\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\nimport DOMPurify from 'dompurify';\n\n/**\n * Utility function for combining Tailwind CSS classes\n * \n * This function combines clsx and tailwind-merge to:\n * 1. Support conditional classes (clsx)\n * 2. Properly merge Tailwind classes (tailwind-merge)\n * \n * @example\n * cn('px-2 py-1', 'px-4') // Returns: 'py-1 px-4'\n * cn('text-red-500', condition && 'text-blue-500')\n * cn(['text-sm', 'font-bold'], { 'opacity-50': isDisabled })\n * \n * @param inputs - Class strings, conditionals, arrays, or objects\n * @returns Merged class string\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Generate a unique ID\n * \n * Creates a unique identifier using random string and timestamp.\n * Not cryptographically secure - use for UI elements only.\n * \n * @example\n * generateId() // Returns: 'a1b2c3d41234567890'\n * \n * @returns Unique string ID\n */\nexport function generateId(): string {\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\n}\n\n/**\n * Format file size in bytes to human readable format\n * \n * Converts byte values to appropriate units (KB, MB, GB).\n * Always shows 2 decimal places except for bytes.\n * \n * @example\n * formatFileSize(0) // Returns: '0 Bytes'\n * formatFileSize(1024) // Returns: '1 KB'\n * formatFileSize(1536) // Returns: '1.5 KB'\n * formatFileSize(1048576) // Returns: '1 MB'\n * \n * @param bytes - File size in bytes\n * @returns Formatted string with appropriate unit\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * Get file icon based on file type\n * \n * Returns an emoji icon based on the MIME type or file extension.\n * Used in file upload UI components.\n * \n * @example\n * getFileIcon('application/pdf') // Returns: '📄'\n * getFileIcon('image/png') // Returns: '🖼️'\n * getFileIcon('text/plain') // Returns: '📝'\n * getFileIcon('unknown/type') // Returns: '📎' (default)\n * \n * @param fileType - MIME type or file extension\n * @returns Emoji icon representing the file type\n */\nexport function getFileIcon(fileType: string): string {\n  const type = fileType.toLowerCase();\n  \n  // Document types\n  if (type.includes('pdf')) return '📄';\n  if (type.includes('word') || type.includes('doc')) return '📄';\n  if (type.includes('text') || type.includes('txt')) return '📝';\n  \n  // Media types\n  if (type.includes('image')) return '🖼️';\n  if (type.includes('video')) return '🎥';\n  if (type.includes('audio')) return '🎵';\n  \n  // Data types\n  if (type.includes('excel') || type.includes('sheet')) return '📊';\n  if (type.includes('powerpoint') || type.includes('presentation')) return '📈';\n  if (type.includes('json')) return '📋';\n  if (type.includes('csv')) return '📊';\n  \n  // Archive types\n  if (type.includes('zip') || type.includes('rar')) return '🗜️';\n  \n  // Default icon\n  return '📎';\n}\n\n/**\n * Validate file type against allowed types\n * \n * Checks if a file type is in the allowed list.\n * Case-insensitive partial matching.\n * \n * @example\n * const allowed = ['image/', 'application/pdf'];\n * isFileTypeAllowed('image/png', allowed) // Returns: true\n * isFileTypeAllowed('IMAGE/JPEG', allowed) // Returns: true (case-insensitive)\n * isFileTypeAllowed('text/plain', allowed) // Returns: false\n * \n * @param fileType - MIME type to check\n * @param allowedTypes - List of allowed MIME types or patterns\n * @returns Whether the file type is allowed\n */\nexport function isFileTypeAllowed(fileType: string, allowedTypes: readonly string[]): boolean {\n  return allowedTypes.some(type => fileType.toLowerCase().includes(type.toLowerCase()));\n}\n\n/**\n * Format timestamp to human readable format\n * \n * Converts ISO timestamps to relative time strings.\n * Shows relative time for recent dates, absolute date for older.\n * \n * @example\n * // Assuming current time is 2024-01-01 12:00:00\n * formatTimestamp('2024-01-01T11:59:30Z') // Returns: 'Just now'\n * formatTimestamp('2024-01-01T11:30:00Z') // Returns: '30m ago'\n * formatTimestamp('2024-01-01T08:00:00Z') // Returns: '4h ago'\n * formatTimestamp('2023-12-25T12:00:00Z') // Returns: '7d ago'\n * formatTimestamp('2023-11-01T12:00:00Z') // Returns: '11/1/2023'\n * \n * @param timestamp - ISO date string\n * @returns Human-readable time difference or date\n */\nexport function formatTimestamp(timestamp: string): string {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diffInMs = now.getTime() - date.getTime();\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n  \n  // Recent times shown as relative\n  if (diffInMinutes < 1) return 'Just now';\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n  if (diffInHours < 24) return `${diffInHours}h ago`;\n  if (diffInDays < 7) return `${diffInDays}d ago`;\n  \n  // Older times shown as absolute date\n  return date.toLocaleDateString();\n}\n\n/**\n * Copy text to clipboard\n * \n * Uses the modern Clipboard API with fallback error handling.\n * Returns success/failure for UI feedback.\n * \n * @example\n * const success = await copyToClipboard('Hello, world!');\n * if (success) {\n *   toast.success('Copied to clipboard');\n * } else {\n *   toast.error('Failed to copy');\n * }\n * \n * @param text - Text to copy to clipboard\n * @returns Promise resolving to success boolean\n */\nexport async function copyToClipboard(text: string): Promise<boolean> {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch (error) {\n    // Copy failed, return false status\n    console.error('Failed to copy to clipboard:', error);\n    return false;\n  }\n}\n\n/**\n * Sanitize HTML content\n * \n * Removes dangerous HTML/JS to prevent XSS attacks.\n * Safe for rendering user-generated content.\n * Skips sanitization on server-side (SSR).\n * \n * @example\n * const dirty = '<script>alert(\"XSS\")</script><p>Hello</p>';\n * sanitizeHtml(dirty) // Returns: '<p>Hello</p>'\n * \n * const safe = '<p>Hello <strong>world</strong></p>';\n * sanitizeHtml(safe) // Returns: '<p>Hello <strong>world</strong></p>'\n * \n * @param html - Raw HTML string\n * @returns Sanitized HTML safe for rendering\n */\nexport function sanitizeHtml(html: string): string {\n  if (typeof window === 'undefined') {\n    return html; // Skip sanitization on server side (no DOM)\n  }\n  \n  return DOMPurify.sanitize(html, {\n    ALLOWED_TAGS: ['p', 'br', 'strong', 'em', 'code', 'pre', 'a', 'ul', 'ol', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n    ALLOWED_ATTR: ['href', 'target', 'rel', 'class'],\n  });\n}\n\n/**\n * Debounce function\n * \n * Delays function execution until after wait milliseconds have\n * elapsed since the last time it was invoked. Useful for search\n * inputs, window resize handlers, etc.\n * \n * @example\n * const debouncedSearch = debounce((query: string) => {\n *   console.log('Searching for:', query);\n * }, 300);\n * \n * // Rapid calls...\n * debouncedSearch('a');    // Won't execute\n * debouncedSearch('ab');   // Won't execute\n * debouncedSearch('abc');  // Will execute after 300ms\n * \n * @param func - Function to debounce\n * @param wait - Milliseconds to delay\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(null, args), wait);\n  };\n}\n\n/**\n * Throttle function\n * \n * Ensures function is called at most once per specified time period.\n * First call executes immediately, subsequent calls are ignored until\n * the time period expires.\n * \n * @example\n * const throttledScroll = throttle(() => {\n *   console.log('Scroll position:', window.scrollY);\n * }, 100);\n * \n * // During rapid scrolling:\n * // t=0ms: executes immediately\n * // t=50ms: ignored (still in throttle period)\n * // t=100ms: executes (throttle period expired)\n * \n * @param func - Function to throttle\n * @param limit - Minimum milliseconds between calls\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  \n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func.apply(null, args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n/**\n * Truncate text to specified length\n * \n * Cuts text at the specified length and adds ellipsis.\n * Trims whitespace from the cut point.\n * \n * @example\n * truncateText('Hello, world!', 5) // Returns: 'Hello...'\n * truncateText('Short', 10) // Returns: 'Short'\n * truncateText('Hello   ', 5) // Returns: 'Hello...' (trimmed)\n * \n * @param text - Text to truncate\n * @param maxLength - Maximum length before truncation\n * @returns Truncated text with ellipsis if needed\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength).trim() + '...';\n}\n\n/**\n * Validate CustomGPT API key format\n * \n * Checks if the provided string matches the CustomGPT API key format.\n * Format: {digits}|{alphanumeric_string}\n * - At least 3 digits before the pipe\n * - At least 20 alphanumeric characters after the pipe\n * \n * @example\n * isValidApiKey('123|abcdefghijklmnopqrst') // Returns: true\n * isValidApiKey('7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x') // Returns: true\n * isValidApiKey('12|short') // Returns: false (too few digits/chars)\n * isValidApiKey('no-pipe') // Returns: false (wrong format)\n * isValidApiKey('') // Returns: false (empty)\n * \n * @param apiKey - API key string to validate\n * @returns Whether the API key is valid\n */\nexport function isValidApiKey(apiKey: string): boolean {\n  if (!apiKey || typeof apiKey !== 'string') {\n    return false;\n  }\n  \n  // Trim whitespace\n  apiKey = apiKey.trim();\n  \n  // CustomGPT API key format: starts with digits followed by | then alphanumeric string\n  // Example: 7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x\n  // Must have at least 3 digits, pipe, and at least 20 characters after pipe\n  return /^\\d{3,}\\|[a-zA-Z0-9]{20,}$/.test(apiKey);\n}\n\n/**\n * Parse streaming response chunk\n * \n * Handles various SSE (Server-Sent Events) formats from the CustomGPT API.\n * Supports both standard SSE format and raw JSON lines.\n * \n * Formats handled:\n * - SSE events: \"event: progress\", \"event: finish\"\n * - SSE data: \"data: {json}\", \"data: [DONE]\"\n * - Raw JSON: {\"content\": \"...\", \"citations\": [...]}\n * - Plain text: \"data: plain text content\"\n * \n * @example\n * parseStreamChunk('data: {\"content\": \"Hello\"}') \n * // Returns: { type: 'content', content: 'Hello' }\n * \n * parseStreamChunk('data: [DONE]')\n * // Returns: { type: 'done' }\n * \n * parseStreamChunk('event: finish')\n * // Returns: { type: 'done' }\n * \n * @param chunk - Raw chunk from SSE stream\n * @returns Parsed chunk object or null if should be skipped\n */\nexport function parseStreamChunk(chunk: string): any | null {\n  try {\n    \n    // Skip event lines - CustomGPT sends \"event: progress\" etc.\n    if (chunk.startsWith('event: ')) {\n      const eventType = chunk.slice(7).trim();\n      \n      // Handle specific events if needed\n      if (eventType === 'finish') {\n        return { type: 'done' };\n      }\n      \n      // Skip other event types\n      return null;\n    }\n    \n    // Handle SSE format\n    if (chunk.startsWith('data: ')) {\n      const data = chunk.slice(6).trim();\n      \n      if (data === '[DONE]' || data === 'DONE') return { type: 'done' };\n      \n      // CustomGPT might send plain text data instead of JSON\n      // Try to parse as JSON first\n      try {\n        const parsed = JSON.parse(data);\n        \n        // Handle different response formats\n        if (typeof parsed === 'object') {\n          // If it already has a type, return as is\n          if (parsed.type) {\n            return parsed;\n          }\n          \n          // Handle CustomGPT format where content might be a direct property\n          if (parsed.content !== undefined) {\n            return { type: 'content', content: parsed.content, citations: parsed.citations };\n          }\n          \n          // Handle citation-only responses\n          if (parsed.citations && !parsed.content) {\n            return { type: 'citation', citations: parsed.citations };\n          }\n          \n          // Handle message field (some APIs use 'message' instead of 'content')\n          if (parsed.message !== undefined) {\n            return { type: 'content', content: parsed.message, citations: parsed.citations };\n          }\n          \n          // Handle delta format (some streaming APIs use delta.content)\n          if (parsed.delta && parsed.delta.content !== undefined) {\n            return { type: 'content', content: parsed.delta.content, citations: parsed.citations };\n          }\n          \n          // Handle choices format (OpenAI-style streaming)\n          if (parsed.choices && parsed.choices[0] && parsed.choices[0].delta) {\n            const delta = parsed.choices[0].delta;\n            if (delta.content !== undefined) {\n              return { type: 'content', content: delta.content, citations: parsed.citations };\n            }\n          }\n        }\n        \n        // Return the parsed data as is if we can't determine the format\n        return parsed;\n      } catch (jsonError) {\n        // If JSON parsing fails, treat it as plain text content\n        return { type: 'content', content: data };\n      }\n    }\n    \n    // Handle raw JSON lines (no \"data: \" prefix)\n    if (chunk.trim().startsWith('{')) {\n      try {\n        const parsed = JSON.parse(chunk.trim());\n        \n        if (parsed.content !== undefined || parsed.citations !== undefined) {\n          return { \n            type: parsed.content ? 'content' : 'citation', \n            content: parsed.content,\n            citations: parsed.citations \n          };\n        }\n        \n        // Handle message field\n        if (parsed.message !== undefined) {\n          return { type: 'content', content: parsed.message, citations: parsed.citations };\n        }\n        \n        return parsed;\n      } catch (parseError) {\n        console.warn('Failed to parse raw JSON chunk:', parseError);\n      }\n    }\n    \n    // Handle plain text responses (fallback)\n    if (chunk.trim() && !chunk.includes('data:') && !chunk.startsWith('{')) {\n      return { type: 'content', content: chunk.trim() };\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Failed to parse stream chunk:', chunk, error);\n    return null;\n  }\n}\n\n/**\n * Extract inline citations from text\n * \n * Finds all citation references in format [1], [2], etc.\n * Returns the original text and array of citation numbers.\n * \n * @example\n * extractInlineCitations('Hello [1] world [2]!')\n * // Returns: { text: 'Hello [1] world [2]!', citations: [1, 2] }\n * \n * extractInlineCitations('No citations here')\n * // Returns: { text: 'No citations here', citations: [] }\n * \n * @param text - Text potentially containing citations\n * @returns Object with text and citation numbers\n */\nexport function extractInlineCitations(text: string): { text: string; citations: number[] } {\n  const citationRegex = /\\[(\\d+)\\]/g;\n  const citations: number[] = [];\n  let match;\n  \n  while ((match = citationRegex.exec(text)) !== null) {\n    citations.push(parseInt(match[1]));\n  }\n  \n  return { text, citations };\n}\n\n/**\n * Create a delay promise\n * \n * Utility for adding delays in async functions.\n * Useful for retries, animations, or testing.\n * \n * @example\n * async function slowOperation() {\n *   console.log('Starting...');\n *   await delay(1000); // Wait 1 second\n *   console.log('Done!');\n * }\n * \n * @param ms - Milliseconds to delay\n * @returns Promise that resolves after delay\n */\nexport function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Retry a function with exponential backoff\n * \n * Retries a failing async function with increasing delays.\n * Delays: 1s, 2s, 4s, 8s, etc. (exponential)\n * \n * @example\n * // Retry API call up to 3 times\n * const data = await retryWithBackoff(\n *   () => fetch('/api/data').then(r => r.json()),\n *   3,    // max attempts\n *   1000  // base delay (1s)\n * );\n * \n * // Delays: attempt 1 = immediate, attempt 2 = 1s, attempt 3 = 2s\n * \n * @param fn - Async function to retry\n * @param maxAttempts - Maximum retry attempts (default: 3)\n * @param baseDelay - Base delay in ms (default: 1000)\n * @returns Result from successful function call\n * @throws Last error if all attempts fail\n */\nexport async function retryWithBackoff<T>(\n  fn: () => Promise<T>,\n  maxAttempts: number = 3,\n  baseDelay: number = 1000\n): Promise<T> {\n  let lastError: Error;\n  \n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n      \n      if (attempt === maxAttempts) {\n        throw lastError;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s, etc.\n      const delayTime = baseDelay * Math.pow(2, attempt - 1);\n      await delay(delayTime);\n    }\n  }\n  \n  throw lastError!;\n}\n\n/**\n * Check if device is mobile\n * \n * Based on viewport width (<768px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is mobile-sized\n */\nexport function isMobile(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth < 768;\n}\n\n/**\n * Check if device is tablet\n * \n * Based on viewport width (768px-1023px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is tablet-sized\n */\nexport function isTablet(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 768 && window.innerWidth < 1024;\n}\n\n/**\n * Check if device is desktop\n * \n * Based on viewport width (≥1024px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is desktop-sized\n */\nexport function isDesktop(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 1024;\n}\n\n/**\n * Get responsive container class\n * \n * Returns Tailwind classes for responsive container sizing.\n * - Mobile: Full width/height\n * - Tablet: Max 2xl width, centered\n * - Desktop: Max 4xl width, centered\n * \n * @returns Tailwind class string for container\n */\nexport function getResponsiveContainer(): string {\n  if (isMobile()) return 'w-full h-full';\n  if (isTablet()) return 'w-full max-w-2xl mx-auto';\n  return 'w-full max-w-4xl mx-auto';\n}\n\n/**\n * Format conversation name from first message\n * \n * Creates a conversation title from the first message.\n * Takes first 6 words, max 50 characters.\n * \n * @example\n * generateConversationName('Hello, can you help me with JavaScript?')\n * // Returns: 'Hello, can you help me with'\n * \n * generateConversationName('Short')\n * // Returns: 'Short'\n * \n * @param firstMessage - The first message in conversation\n * @returns Formatted conversation name\n */\nexport function generateConversationName(firstMessage: string): string {\n  // Remove common API/system prefixes\n  let cleanedMessage = firstMessage.trim();\n  \n  // Remove OpenAI- prefix or similar system prefixes\n  cleanedMessage = cleanedMessage.replace(/^(OpenAI-|System-|API-|Assistant:|User:)\\s*/i, '');\n  \n  const words = cleanedMessage.split(/\\s+/);\n  const title = words.slice(0, 6).join(' ');\n  return title.length > 50 ? title.substring(0, 50).trim() + '...' : title;\n}\n\n/**\n * Validate URL format\n * \n * Checks if string is a valid URL using URL constructor.\n * \n * @example\n * isValidUrl('https://example.com') // Returns: true\n * isValidUrl('http://localhost:3000/path') // Returns: true\n * isValidUrl('not a url') // Returns: false\n * isValidUrl('') // Returns: false\n * \n * @param url - String to validate\n * @returns Whether string is a valid URL\n */\nexport function isValidUrl(url: string): boolean {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get file extension from filename\n * \n * Extracts the file extension in lowercase.\n * \n * @example\n * getFileExtension('document.pdf') // Returns: 'pdf'\n * getFileExtension('image.PNG') // Returns: 'png'\n * getFileExtension('no-extension') // Returns: ''\n * getFileExtension('multi.part.name.txt') // Returns: 'txt'\n * \n * @param filename - Filename to extract extension from\n * @returns Lowercase extension or empty string\n */\nexport function getFileExtension(filename: string): string {\n  return filename.split('.').pop()?.toLowerCase() || '';\n}\n\n/**\n * Check if file is an image\n * \n * Checks MIME type for image/ prefix.\n * \n * @example\n * isImageFile('image/png') // Returns: true\n * isImageFile('image/jpeg') // Returns: true\n * isImageFile('application/pdf') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is an image\n */\nexport function isImageFile(fileType: string): boolean {\n  return fileType.startsWith('image/');\n}\n\n/**\n * Check if file is a document\n * \n * Checks against common document MIME types including:\n * - PDF files\n * - Microsoft Word documents\n * - Plain text files\n * - CSV spreadsheets\n * - JSON/XML data files\n * \n * @example\n * isDocumentFile('application/pdf') // Returns: true\n * isDocumentFile('text/plain') // Returns: true\n * isDocumentFile('image/png') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is a supported document type\n */\nexport function isDocumentFile(fileType: string): boolean {\n  const documentTypes = [\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n  ];\n  return documentTypes.includes(fileType);\n}\n\n/**\n * Create download link for file\n * \n * Programmatically downloads content as a file.\n * Creates a blob URL and triggers download.\n * \n * @example\n * // Download text file\n * downloadFile('Hello, world!', 'greeting.txt');\n * \n * // Download JSON file\n * const data = { name: 'John', age: 30 };\n * downloadFile(\n *   JSON.stringify(data, null, 2),\n *   'data.json',\n *   'application/json'\n * );\n * \n * @param content - File content as string\n * @param filename - Name for downloaded file\n * @param mimeType - MIME type (default: 'text/plain')\n */\nexport function downloadFile(content: string, filename: string, mimeType: string = 'text/plain'): void {\n  const blob = new Blob([content], { type: mimeType });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n}\n\n/**\n * Escape HTML entities\n * \n * Prevents XSS by escaping HTML special characters.\n * Use when displaying user input as HTML.\n * \n * @example\n * escapeHtml('<script>alert(\"XSS\")</script>')\n * // Returns: '&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;'\n * \n * escapeHtml('Hello & \"world\"')\n * // Returns: 'Hello &amp; &quot;world&quot;'\n * \n * @param unsafe - Raw string that may contain HTML\n * @returns HTML-escaped string\n */\nexport function escapeHtml(unsafe: string): string {\n  return unsafe\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\n/**\n * Handle API errors and extract error message\n * \n * Normalizes various error formats into consistent structure.\n * Handles:\n * - API response errors (4xx, 5xx)\n * - Network/connection errors\n * - Client-side errors\n * \n * @example\n * try {\n *   await apiCall();\n * } catch (error) {\n *   const { message, code } = handleApiError(error);\n *   toast.error(message);\n *   if (code === 401) {\n *     // Handle unauthorized\n *   }\n * }\n * \n * @param error - Error object from API call\n * @returns Normalized error with message and optional code\n */\nexport function handleApiError(error: any): { message: string; code?: number } {\n  console.error('API Error:', error);\n  \n  if (error.response) {\n    // API responded with an error\n    const data = error.response.data;\n    // Handle nested error formats\n    if (data && data.data && data.data.message) {\n      return {\n        message: data.data.message,\n        code: data.data.code || error.response.status\n      };\n    }\n    // Handle direct message format\n    if (data && data.message) {\n      return {\n        message: data.message,\n        code: error.response.status\n      };\n    }\n    // Fallback to status code\n    return {\n      message: `API Error: ${error.response.status}`,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    // Request was made but no response received\n    return {\n      message: 'No response from server. Please check your connection.',\n      code: 0\n    };\n  } else {\n    // Something else happened (e.g., request setup error)\n    return {\n      message: error.message || 'An unexpected error occurred',\n      code: 0\n    };\n  }\n}\n\n/**\n * Constants for file uploads and API\n * \n * Central configuration for limits and constraints.\n * Modify these values to customize behavior:\n * \n * - MAX_FILE_SIZE: Maximum upload size per file\n * - ACCEPTED_FILE_TYPES: MIME types allowed for upload\n * - MAX_MESSAGE_LENGTH: Character limit for messages\n * - API_TIMEOUT: Request timeout for regular API calls\n * - STREAM_TIMEOUT: Timeout for streaming responses\n * - RETRY_ATTEMPTS: Number of retries on failure\n * - RETRY_DELAY: Base delay between retries\n * \n * @example\n * // Check file size\n * if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n *   throw new Error('File too large');\n * }\n * \n * // Configure retry\n * await retryWithBackoff(\n *   apiCall,\n *   CONSTANTS.RETRY_ATTEMPTS,\n *   CONSTANTS.RETRY_DELAY\n * );\n */\nexport const CONSTANTS = {\n  /** Maximum file size in bytes (10MB) */\n  MAX_FILE_SIZE: 10 * 1024 * 1024,\n  \n  /** Accepted MIME types for file uploads */\n  ACCEPTED_FILE_TYPES: [\n    // Documents\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n    // Images\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n  ],\n  \n  /** Maximum characters per message */\n  MAX_MESSAGE_LENGTH: 4000,\n  \n  /** API request timeout in milliseconds (30s) */\n  API_TIMEOUT: 30000,\n  \n  /** Streaming request timeout in milliseconds (60s) */\n  STREAM_TIMEOUT: 60000,\n  \n  /** Number of retry attempts for failed requests */\n  RETRY_ATTEMPTS: 3,\n  \n  /** Base delay between retries in milliseconds (1s) */\n  RETRY_DELAY: 1000,\n} as const;","/**\n * Mathematical utilities for voice themes\n * \n * Common mathematical functions and helpers used across different voice themes\n */\n\n/**\n * Linear interpolation between two values\n */\nexport const lerp = (start: number, end: number, factor: number): number => {\n  return start + (end - start) * factor;\n};\n\n/**\n * Smooth step interpolation (ease in/out)\n */\nexport const smoothStep = (edge0: number, edge1: number, x: number): number => {\n  const t = Math.max(0, Math.min(1, (x - edge0) / (edge1 - edge0)));\n  return t * t * (3 - 2 * t);\n};\n\n/**\n * Clamp a value between min and max\n */\nexport const clamp = (value: number, min: number, max: number): number => {\n  return Math.max(min, Math.min(max, value));\n};\n\n/**\n * Map a value from one range to another\n */\nexport const map = (value: number, inMin: number, inMax: number, outMin: number, outMax: number): number => {\n  return ((value - inMin) / (inMax - inMin)) * (outMax - outMin) + outMin;\n};\n\n/**\n * Generate random number between min and max\n */\nexport const random = (min: number, max: number): number => {\n  return Math.random() * (max - min) + min;\n};\n\n/**\n * Generate random integer between min and max (inclusive)\n */\nexport const randomInt = (min: number, max: number): number => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Distance between two 2D points\n */\nexport const distance2D = (x1: number, y1: number, x2: number, y2: number): number => {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\n/**\n * Distance between two 3D points\n */\nexport const distance3D = (x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number => {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const dz = z2 - z1;\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n};\n\n/**\n * Normalize angle to 0-2π range\n */\nexport const normalizeAngle = (angle: number): number => {\n  while (angle < 0) angle += 2 * Math.PI;\n  while (angle >= 2 * Math.PI) angle -= 2 * Math.PI;\n  return angle;\n};\n\n/**\n * Convert degrees to radians\n */\nexport const degToRad = (degrees: number): number => {\n  return degrees * (Math.PI / 180);\n};\n\n/**\n * Convert radians to degrees\n */\nexport const radToDeg = (radians: number): number => {\n  return radians * (180 / Math.PI);\n};\n\n/**\n * Sine wave with customizable amplitude, frequency, and phase\n */\nexport const sineWave = (time: number, amplitude: number = 1, frequency: number = 1, phase: number = 0): number => {\n  return amplitude * Math.sin(frequency * time + phase);\n};\n\n/**\n * Cosine wave with customizable amplitude, frequency, and phase\n */\nexport const cosineWave = (time: number, amplitude: number = 1, frequency: number = 1, phase: number = 0): number => {\n  return amplitude * Math.cos(frequency * time + phase);\n};\n\n/**\n * 3D rotation around X axis\n */\nexport const rotateX = (x: number, y: number, z: number, angle: number): [number, number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return [\n    x,\n    y * cos - z * sin,\n    y * sin + z * cos\n  ];\n};\n\n/**\n * 3D rotation around Y axis\n */\nexport const rotateY = (x: number, y: number, z: number, angle: number): [number, number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return [\n    x * cos + z * sin,\n    y,\n    -x * sin + z * cos\n  ];\n};\n\n/**\n * 3D rotation around Z axis\n */\nexport const rotateZ = (x: number, y: number, z: number, angle: number): [number, number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return [\n    x * cos - y * sin,\n    x * sin + y * cos,\n    z\n  ];\n};\n\n/**\n * 3D to 2D projection\n */\nexport const project3D = (x: number, y: number, z: number, focalLength: number, centerX: number, centerY: number): [number, number] => {\n  const scale = focalLength / (focalLength - z);\n  return [\n    x * scale + centerX,\n    y * scale + centerY\n  ];\n};\n\n/**\n * Cubic bezier curve interpolation\n */\nexport const cubicBezier = (t: number, p0: number, p1: number, p2: number, p3: number): number => {\n  const oneMinusT = 1 - t;\n  return oneMinusT * oneMinusT * oneMinusT * p0 +\n         3 * oneMinusT * oneMinusT * t * p1 +\n         3 * oneMinusT * t * t * p2 +\n         t * t * t * p3;\n};\n\n/**\n * Noise function (simplified Perlin-like noise)\n */\nexport const noise = (x: number, y: number = 0): number => {\n  const n = Math.sin(x * 12.9898 + y * 78.233) * 43758.5453;\n  return (n - Math.floor(n)) * 2 - 1;\n};\n\n/**\n * HSL to RGB conversion\n */\nexport const hslToRgb = (h: number, s: number, l: number): [number, number, number] => {\n  h = h / 360;\n  s = s / 100;\n  l = l / 100;\n\n  const hue2rgb = (p: number, q: number, t: number): number => {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1/6) return p + (q - p) * 6 * t;\n    if (t < 1/2) return q;\n    if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n    return p;\n  };\n\n  if (s === 0) {\n    return [l * 255, l * 255, l * 255];\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    return [\n      Math.round(hue2rgb(p, q, h + 1/3) * 255),\n      Math.round(hue2rgb(p, q, h) * 255),\n      Math.round(hue2rgb(p, q, h - 1/3) * 255)\n    ];\n  }\n};\n\n/**\n * Easing functions - these are aliases for common easing patterns\n */\nexport const easeInOutQuart = (t: number): number => {\n  return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t;\n};\n\nexport const easeInOutCubic = (t: number): number => {\n  return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n};\n\nexport const easeOutBounce = (t: number): number => {\n  if (t < 1 / 2.75) {\n    return 7.5625 * t * t;\n  } else if (t < 2 / 2.75) {\n    return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;\n  } else if (t < 2.5 / 2.75) {\n    return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;\n  } else {\n    return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;\n  }\n};\n\nexport const easeInOutSine = (t: number): number => {\n  return -(Math.cos(Math.PI * t) - 1) / 2;\n};\n\nexport const easeInOutExpo = (t: number): number => {\n  if (t === 0) return 0;\n  if (t === 1) return 1;\n  return t < 0.5\n    ? Math.pow(2, 20 * t - 10) / 2\n    : (2 - Math.pow(2, -20 * t + 10)) / 2;\n};\n\n/**\n * 2D Perlin-like noise function\n */\nexport const noise2D = (x: number, y: number): number => {\n  const n = Math.sin(x * 12.9898 + y * 78.233) * 43758.5453;\n  return (n - Math.floor(n)) * 2 - 1;\n};\n\n/**\n * Alias for smoothStep to maintain compatibility\n */\nexport const smoothstep = smoothStep;","/**\n * Demo Mode Usage Limits Constants\n * \n * Central configuration for all demo mode restrictions and limits.\n * Modify these values to adjust demo mode behavior.\n */\n\n// Free Trial Mode Limits (No API Key)\nexport const FREE_TRIAL_LIMITS = {\n  // Resource Limits\n  MAX_PROJECTS: 1,\n  MAX_CONVERSATIONS: 2,\n  MAX_MESSAGES_PER_CONVERSATION: 2,\n  \n  // Time Limits (in milliseconds)\n  SESSION_DURATION: 1 * 60 * 1000, // 5 minutes\n  SESSION_WARNING_TIME: 5 * 60 * 1000, // Show warning 5 minutes before expiry\n  \n  // Rate Limits\n  MAX_REQUESTS_PER_MINUTE: 10,\n  COOLDOWN_BETWEEN_MESSAGES: 2000, // 2 seconds between messages\n  \n  // Feature Restrictions\n  ALLOW_FILE_UPLOAD: false,\n  ALLOW_SITEMAP_UPLOAD: false,\n  ALLOW_DELETE_OPERATIONS: false,\n  ALLOW_PROJECT_SETTINGS: false,\n  ALLOW_VOICE_MODE: false,\n  \n  // UI Messages\n  SESSION_EXPIRY_WARNING: \"Your free trial session will expire in 5 minutes\",\n  SESSION_EXPIRED_MESSAGE: \"Your free trial session has expired. Please refresh to start a new session.\",\n  LIMIT_REACHED_MESSAGE: {\n    projects: \"Free trial limit reached: Maximum 1 project allowed\",\n    conversations: \"Free trial limit reached: Maximum 2 conversations allowed\",\n    messages: \"Free trial limit reached: Maximum 2 messages per conversation\"\n  }\n} as const;\n\n// User API Key Demo Mode Limits\nexport const USER_DEMO_LIMITS = {\n  // Time Limits (in milliseconds)\n  SESSION_DURATION: 120 * 60 * 1000, // 120 minutes (2 hours)\n  SESSION_WARNING_TIME: 10 * 60 * 1000, // Show warning 10 minutes before expiry\n  \n  // No resource limits for user API key mode\n  MAX_PROJECTS: Infinity,\n  MAX_CONVERSATIONS: Infinity,\n  MAX_MESSAGES_PER_CONVERSATION: Infinity,\n  \n  // Features all enabled\n  ALLOW_FILE_UPLOAD: true,\n  ALLOW_SITEMAP_UPLOAD: true,\n  ALLOW_DELETE_OPERATIONS: true,\n  ALLOW_PROJECT_SETTINGS: true,\n  ALLOW_VOICE_MODE: true,\n  \n  // UI Messages\n  SESSION_EXPIRY_WARNING: \"Your demo session will expire in 10 minutes\",\n  SESSION_EXPIRED_MESSAGE: \"Your demo session has expired. Please refresh to start a new session.\"\n} as const;\n\n// Session Storage Keys\nexport const DEMO_STORAGE_KEYS = {\n  DEPLOYMENT_MODE: 'customgpt.deploymentMode',\n  FREE_TRIAL_MODE: 'customgpt.freeTrialMode',\n  FREE_TRIAL_SESSION: 'customgpt.freeTrialSession',\n  DEMO_SESSION: 'customgpt.demoSession',\n  API_KEY: 'customgpt.apiKey',\n  OPENAI_KEY: 'customgpt.openAIApiKey',\n  SESSION_START: 'customgpt.sessionStart',\n  AUTO_DETECTED: 'customgpt.autoDetected'\n} as const;\n\n// API Headers\nexport const DEMO_API_HEADERS = {\n  DEPLOYMENT_MODE: 'X-Deployment-Mode',\n  API_KEY: 'X-CustomGPT-API-Key',\n  SESSION_ID: 'X-Demo-Session-ID',\n  FREE_TRIAL: 'X-Free-Trial-Mode'\n} as const;\n\n// Type definitions for session data\nexport interface FreeTrialSession {\n  sessionId: string;\n  startTime: number;\n  projectCount: number;\n  conversationCount: number;\n  messageCount: number;\n  lastActivity: number;\n}\n\nexport interface DemoSession {\n  sessionId: string;\n  startTime: number;\n  lastActivity: number;\n}\n\n// Helper functions\nexport function isSessionExpired(startTime: number, duration: number): boolean {\n  return Date.now() - startTime > duration;\n}\n\nexport function getTimeRemaining(startTime: number, duration: number): number {\n  const elapsed = Date.now() - startTime;\n  const remaining = duration - elapsed;\n  return Math.max(0, remaining);\n}\n\nexport function shouldShowWarning(startTime: number, duration: number, warningTime: number): boolean {\n  const remaining = getTimeRemaining(startTime, duration);\n  return remaining > 0 && remaining <= warningTime;\n}","/**\n * Usage Analytics Tracker\n * \n * Tracks usage across different deployment modes and sends analytics\n * to your backend for monitoring and analysis.\n */\n\nimport { DEMO_STORAGE_KEYS } from '@/lib/constants/demo-limits';\n\nexport interface UsageEvent {\n  // Event identification\n  eventType: 'api_call' | 'session_start' | 'session_end' | 'limit_reached' | 'error';\n  eventName: string;\n  timestamp: number;\n  \n  // Deployment information\n  deploymentMode: 'production' | 'demo';\n  demoType?: 'free-trial' | 'user-api-key' | 'none';\n  \n  // Session information\n  sessionId?: string;\n  userId?: string; // If available from your auth system\n  \n  // Request details\n  endpoint?: string;\n  method?: string;\n  statusCode?: number;\n  \n  // Usage metrics\n  projectCount?: number;\n  conversationCount?: number;\n  messageCount?: number;\n  \n  // Client information\n  clientVersion?: string;\n  userAgent?: string;\n  referrer?: string;\n  \n  // Additional metadata\n  metadata?: Record<string, any>;\n}\n\nclass UsageTracker {\n  private static instance: UsageTracker;\n  private analyticsEndpoint: string = process.env.NEXT_PUBLIC_ANALYTICS_ENDPOINT || '/api/analytics';\n  private batchSize: number = 10;\n  private flushInterval: number = 30000; // 30 seconds\n  private eventQueue: UsageEvent[] = [];\n  private flushTimer: NodeJS.Timeout | null = null;\n\n  private constructor() {\n    // Start flush timer\n    this.startFlushTimer();\n  }\n\n  static getInstance(): UsageTracker {\n    if (!UsageTracker.instance) {\n      UsageTracker.instance = new UsageTracker();\n    }\n    return UsageTracker.instance;\n  }\n\n  /**\n   * Track a usage event\n   */\n  track(event: Partial<UsageEvent>): void {\n    const fullEvent: UsageEvent = {\n      eventType: event.eventType || 'api_call',\n      eventName: event.eventName || 'unknown',\n      timestamp: Date.now(),\n      deploymentMode: this.getDeploymentMode(),\n      demoType: this.getDemoType(),\n      sessionId: this.getSessionId(),\n      clientVersion: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',\n      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined,\n      referrer: typeof window !== 'undefined' ? document.referrer : undefined,\n      ...event\n    };\n\n    this.eventQueue.push(fullEvent);\n\n    // Flush if batch size reached\n    if (this.eventQueue.length >= this.batchSize) {\n      this.flush();\n    }\n  }\n\n  /**\n   * Track API call\n   */\n  trackApiCall(endpoint: string, method: string, statusCode?: number): void {\n    this.track({\n      eventType: 'api_call',\n      eventName: `${method} ${endpoint}`,\n      endpoint,\n      method,\n      statusCode\n    });\n  }\n\n  /**\n   * Track session start\n   */\n  trackSessionStart(): void {\n    this.track({\n      eventType: 'session_start',\n      eventName: 'session_started',\n      metadata: {\n        mode: this.getDemoType() || 'production'\n      }\n    });\n  }\n\n  /**\n   * Track session end\n   */\n  trackSessionEnd(reason?: string): void {\n    this.track({\n      eventType: 'session_end',\n      eventName: 'session_ended',\n      metadata: {\n        reason,\n        mode: this.getDemoType() || 'production'\n      }\n    });\n  }\n\n  /**\n   * Track limit reached\n   */\n  trackLimitReached(limitType: 'projects' | 'conversations' | 'messages'): void {\n    this.track({\n      eventType: 'limit_reached',\n      eventName: `${limitType}_limit_reached`,\n      metadata: {\n        limitType\n      }\n    });\n  }\n\n  /**\n   * Track error\n   */\n  trackError(error: string, context?: any): void {\n    this.track({\n      eventType: 'error',\n      eventName: 'error_occurred',\n      metadata: {\n        error,\n        context\n      }\n    });\n  }\n\n  /**\n   * Get deployment mode\n   */\n  private getDeploymentMode(): 'production' | 'demo' {\n    if (typeof window === 'undefined') return 'production';\n    \n    const mode = localStorage.getItem(DEMO_STORAGE_KEYS.DEPLOYMENT_MODE);\n    return mode === 'demo' ? 'demo' : 'production';\n  }\n\n  /**\n   * Get demo type\n   */\n  private getDemoType(): 'free-trial' | 'user-api-key' | 'none' {\n    if (typeof window === 'undefined') return 'none';\n    \n    const deploymentMode = localStorage.getItem(DEMO_STORAGE_KEYS.DEPLOYMENT_MODE);\n    if (deploymentMode !== 'demo') return 'none';\n    \n    const isFreeTrialMode = localStorage.getItem(DEMO_STORAGE_KEYS.FREE_TRIAL_MODE) === 'true';\n    return isFreeTrialMode ? 'free-trial' : 'user-api-key';\n  }\n\n  /**\n   * Get session ID\n   */\n  private getSessionId(): string | undefined {\n    if (typeof window === 'undefined') return undefined;\n    \n    // Try to get from session storage (for free trial)\n    const sessionData = sessionStorage.getItem(DEMO_STORAGE_KEYS.FREE_TRIAL_SESSION);\n    if (sessionData) {\n      try {\n        const session = JSON.parse(sessionData);\n        return session.sessionId;\n      } catch (e) {\n        // Ignore parse errors\n      }\n    }\n    \n    // Try to get from regular demo session\n    const demoSession = sessionStorage.getItem(DEMO_STORAGE_KEYS.DEMO_SESSION);\n    if (demoSession) {\n      try {\n        const session = JSON.parse(demoSession);\n        return session.sessionId;\n      } catch (e) {\n        // Ignore parse errors\n      }\n    }\n    \n    return undefined;\n  }\n\n  /**\n   * Start flush timer\n   */\n  private startFlushTimer(): void {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n    }\n    \n    this.flushTimer = setInterval(() => {\n      if (this.eventQueue.length > 0) {\n        this.flush();\n      }\n    }, this.flushInterval);\n  }\n\n  /**\n   * Flush events to backend\n   */\n  private async flush(): Promise<void> {\n    if (this.eventQueue.length === 0) return;\n    \n    const events = [...this.eventQueue];\n    this.eventQueue = [];\n    \n    try {\n      // If you have a custom analytics endpoint, send the data there\n      if (process.env.NEXT_PUBLIC_ANALYTICS_ENDPOINT) {\n        await fetch(this.analyticsEndpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ events }),\n        });\n      } else {\n        // Otherwise, just log to console for now\n        console.log('[UsageTracker] Analytics events:', events);\n      }\n    } catch (error) {\n      console.error('[UsageTracker] Failed to send analytics:', error);\n      // Re-queue events on failure\n      this.eventQueue.unshift(...events);\n    }\n  }\n\n  /**\n   * Force flush all pending events\n   */\n  async forceFlush(): Promise<void> {\n    await this.flush();\n  }\n}\n\n// Export singleton instance\nexport const usageTracker = UsageTracker.getInstance();\n\n// Add event listeners for automatic tracking\nif (typeof window !== 'undefined') {\n  // Track page visibility changes\n  document.addEventListener('visibilitychange', () => {\n    if (document.hidden) {\n      usageTracker.forceFlush();\n    }\n  });\n  \n  // Track before unload\n  window.addEventListener('beforeunload', () => {\n    usageTracker.forceFlush();\n  });\n}","/**\n * Error Messages for Demo Mode\n */\n\nexport const DEMO_ERROR_MESSAGES = {\n  RATE_LIMIT: {\n    title: 'Rate Limit Reached',\n    message: 'The free trial is experiencing high demand. Please wait a moment and try again.',\n    retryAfter: 60, // seconds\n  },\n  SESSION_EXPIRED: {\n    title: 'Session Expired',\n    message: 'Your free trial session has expired. Please refresh the page to start a new session.',\n  },\n  LIMIT_REACHED: {\n    title: 'Limit Reached',\n    message: 'You have reached the maximum allowed for this free trial session.',\n  },\n  API_ERROR: {\n    title: 'Service Error',\n    message: 'Unable to process your request. Please try again later.',\n  },\n};\n\nexport function getErrorMessage(status: number, isFreeTrialMode: boolean): { title: string; message: string } {\n  if (status === 429 && isFreeTrialMode) {\n    return DEMO_ERROR_MESSAGES.RATE_LIMIT;\n  }\n  \n  if (status === 403 && isFreeTrialMode) {\n    return DEMO_ERROR_MESSAGES.LIMIT_REACHED;\n  }\n  \n  if (status >= 500) {\n    return DEMO_ERROR_MESSAGES.API_ERROR;\n  }\n  \n  return {\n    title: 'Error',\n    message: 'An unexpected error occurred. Please try again.',\n  };\n}","/**\n * Proxy API Client\n * \n * This client communicates with our Next.js API routes which proxy\n * requests to CustomGPT. The API key is stored securely on the server.\n */\n\nimport type {\n  Agent,\n  AgentStats,\n  AgentSettings,\n  Conversation,\n  ChatMessage,\n  Citation,\n  APIResponse,\n  AgentsResponse,\n  ConversationsResponse,\n  MessagesResponse,\n  MessageResponse,\n  CitationResponse,\n  StreamChunk,\n  LimitsResponse,\n  UserProfile,\n  CustomerIntelligenceResponse,\n} from '@/types';\nimport type { APIMessageResponse } from '@/types/message.types';\nimport type { \n  PagesListResponse, \n  DeletePageResponse, \n  ReindexPageResponse, \n  PagesQueryParams,\n  PageMetadata,\n  PageMetadataResponse\n} from '@/types/pages.types';\nimport type { \n  TrafficReportResponse, \n  QueriesReportResponse, \n  ConversationsReportResponse, \n  AnalysisReportResponse,\n  AnalysisInterval\n} from '@/types/reports.types';\nimport type { \n  SourcesListResponse, \n  SourceResponse, \n  DeleteSourceResponse,\n  UpdateSourceSettingsRequest,\n  CreateSitemapSourceRequest\n} from '@/types/sources.types';\nimport { parseStreamChunk, retryWithBackoff } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\nimport { usageTracker } from '@/lib/analytics/usage-tracker';\nimport { getErrorMessage } from '@/lib/constants/error-messages';\n\ninterface UserProfileResponse {\n  status: 'success' | 'error';\n  data: UserProfile;\n}\n\n/**\n * ProxyCustomGPTClient\n * \n * Client that communicates with our server-side proxy endpoints.\n * No API key is needed client-side as it's stored on the server.\n */\nexport class ProxyCustomGPTClient {\n  private baseURL: string = '/api/proxy';\n  private timeout: number = 30000;\n  private abortControllers: Map<string, AbortController> = new Map();\n  private isDemoMode: boolean = false;\n  private demoApiKey: string | null = null;\n\n  constructor() {\n    // Demo mode is determined at runtime from localStorage\n    if (typeof window !== 'undefined') {\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode');\n      this.isDemoMode = deploymentMode === 'demo';\n    }\n    \n    logger.info('PROXY_CLIENT', 'Proxy API Client initialized', {\n      baseURL: this.baseURL,\n      timeout: this.timeout,\n      isDemoMode: this.isDemoMode,\n    });\n  }\n  \n  /**\n   * Set demo mode API key\n   */\n  public setDemoApiKey(apiKey: string | null) {\n    this.demoApiKey = apiKey;\n  }\n\n  /**\n   * Make a request to the proxy API\n   */\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    const requestId = `${options.method || 'GET'}-${endpoint}-${Date.now()}`;\n    \n    logger.apiRequest(endpoint, options.method || 'GET', options.body);\n\n    try {\n      const controller = new AbortController();\n      this.abortControllers.set(requestId, controller);\n\n      const timeoutId = setTimeout(() => {\n        controller.abort();\n      }, this.timeout);\n\n      // Don't set Content-Type for FormData - let browser set it with boundary\n      const isFormData = options.body instanceof FormData;\n      const baseHeaders: Record<string, string> = {\n        ...(options.headers as Record<string, string> || {})\n      };\n      \n      // Add deployment mode header\n      const deploymentMode = typeof window !== 'undefined' \n        ? localStorage.getItem('customgpt.deploymentMode') || 'production'\n        : 'production';\n      baseHeaders['X-Deployment-Mode'] = deploymentMode;\n      \n      // Check if free trial mode\n      const isFreeTrialMode = typeof window !== 'undefined' \n        ? localStorage.getItem('customgpt.freeTrialMode') === 'true'\n        : false;\n      \n      if (isFreeTrialMode) {\n        baseHeaders['X-Free-Trial-Mode'] = 'true';\n        \n        // Add session ID from session storage\n        const sessionData = sessionStorage.getItem('customgpt.freeTrialSession');\n        if (sessionData) {\n          try {\n            const session = JSON.parse(sessionData);\n            if (session.sessionId) {\n              baseHeaders['X-Demo-Session-ID'] = session.sessionId;\n            }\n          } catch (e) {\n            console.error('[ProxyClient] Failed to parse session data:', e);\n          }\n        }\n        \n        console.log('[ProxyClient] Free trial mode - using server-side demo key');\n      } else if (deploymentMode === 'demo' && this.demoApiKey) {\n        // Add demo mode API key if available\n        baseHeaders['X-CustomGPT-API-Key'] = this.demoApiKey;\n        console.log('[ProxyClient] Added demo API key to request headers');\n      } else if (deploymentMode === 'demo' && !this.demoApiKey) {\n        console.warn('[ProxyClient] Demo mode but no API key available for request');\n      }\n      \n      const headers: HeadersInit = isFormData \n        ? baseHeaders\n        : { \n            'Content-Type': 'application/json',\n            ...baseHeaders\n          };\n      \n      const response = await fetch(url, {\n        ...options,\n        headers,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n      this.abortControllers.delete(requestId);\n\n      const responseData = await response.json();\n\n      // Track API call\n      usageTracker.trackApiCall(endpoint, options.method || 'GET', response.status);\n\n      if (!response.ok) {\n        // Track error\n        usageTracker.trackError(`API Error: ${response.status}`, {\n          endpoint,\n          method: options.method || 'GET',\n          error: responseData.error\n        });\n        \n        // Get user-friendly error message for demo mode\n        const isFreeTrialMode = baseHeaders['X-Free-Trial-Mode'] === 'true';\n        const errorInfo = getErrorMessage(response.status, isFreeTrialMode);\n        \n        throw {\n          message: responseData.error || errorInfo.message,\n          status: response.status,\n          data: responseData,\n          title: errorInfo.title,\n          isFreeTrialError: isFreeTrialMode && response.status === 429,\n        };\n      }\n\n      logger.apiResponse(endpoint, response.status, responseData);\n      return responseData;\n    } catch (error: any) {\n      this.abortControllers.delete(requestId);\n      \n      if (error.name === 'AbortError') {\n        logger.apiError(endpoint, { message: 'Request timeout', code: 'TIMEOUT' });\n        throw new Error('Request timeout');\n      }\n\n      logger.apiError(endpoint, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Make a streaming request to the proxy API\n   */\n  private async streamRequest(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ReadableStream<Uint8Array>> {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    logger.apiRequest(endpoint, 'POST-STREAM', options.body);\n\n    // Build headers with demo mode support\n    const baseHeaders: Record<string, string> = {\n      'Content-Type': 'application/json',\n      'Accept': 'text/event-stream',\n      ...(options.headers as Record<string, string> || {})\n    };\n    \n    // Add deployment mode header\n    const deploymentMode = typeof window !== 'undefined' \n      ? localStorage.getItem('customgpt.deploymentMode') || 'production'\n      : 'production';\n    baseHeaders['X-Deployment-Mode'] = deploymentMode;\n    \n    // Check if free trial mode\n    const isFreeTrialMode = typeof window !== 'undefined' \n      ? localStorage.getItem('customgpt.freeTrialMode') === 'true'\n      : false;\n    \n    if (isFreeTrialMode) {\n      baseHeaders['X-Free-Trial-Mode'] = 'true';\n      \n      // Add session ID from session storage\n      const sessionData = sessionStorage.getItem('customgpt.freeTrialSession');\n      if (sessionData) {\n        try {\n          const session = JSON.parse(sessionData);\n          if (session.sessionId) {\n            baseHeaders['X-Demo-Session-ID'] = session.sessionId;\n          }\n        } catch (e) {\n          console.error('[ProxyClient] Failed to parse session data:', e);\n        }\n      }\n      \n      console.log('[ProxyClient] Free trial mode - using server-side demo key for streaming');\n    } else if (deploymentMode === 'demo' && this.demoApiKey) {\n      // Add demo mode API key if available\n      baseHeaders['X-CustomGPT-API-Key'] = this.demoApiKey;\n      console.log('[ProxyClient] Added demo API key to streaming request headers');\n    } else if (deploymentMode === 'demo' && !this.demoApiKey) {\n      console.warn('[ProxyClient] Demo mode but no API key available for streaming request');\n    }\n\n    const response = await fetch(url, {\n      ...options,\n      headers: baseHeaders,\n    });\n\n    if (!response.ok) {\n      let errorMessage = `Stream request failed: ${response.status}`;\n      try {\n        const errorText = await response.text();\n        const errorData = JSON.parse(errorText);\n        errorMessage = errorData.error || errorData.message || errorMessage;\n      } catch {\n        // If not JSON, use the status message\n      }\n      logger.apiError(endpoint, { message: errorMessage, status: response.status });\n      throw new Error(errorMessage);\n    }\n\n    logger.apiResponse(endpoint, response.status, 'Stream started');\n\n    return response.body!;\n  }\n\n  /**\n   * Cancel a specific request\n   */\n  cancelRequest(endpoint: string, method: string = 'GET'): void {\n    const controllers = Array.from(this.abortControllers.entries());\n    controllers.forEach(([key, controller]) => {\n      if (key.includes(`${method}-${endpoint}`)) {\n        controller.abort();\n        this.abortControllers.delete(key);\n      }\n    });\n  }\n\n  /**\n   * Cancel all pending requests\n   */\n  cancelAllRequests(): void {\n    this.abortControllers.forEach(controller => controller.abort());\n    this.abortControllers.clear();\n  }\n\n  // Agent Management\n  async getAgents(params?: {\n    page?: number;\n    per_page?: number;\n  }): Promise<AgentsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async createAgent(data: {\n    project_name: string;\n    sitemap_path?: string;\n    file_upload?: boolean;\n    webpage_url?: string;\n  }): Promise<APIResponse<Agent>> {\n    return this.request('/projects', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}`);\n  }\n\n  async updateAgent(id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }): Promise<APIResponse<Agent>> {\n    // Use FormData for multipart/form-data as specified in OpenAPI\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]) => {\n      if (value !== undefined) {\n        formData.append(key, String(value));\n      }\n    });\n\n    return this.request(`/projects/${id}`, {\n      method: 'POST', // Changed from PUT to POST as per OpenAPI spec\n      body: formData,\n    });\n  }\n\n  async deleteAgent(id: number): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async replicateAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}/replicate`, {\n      method: 'POST',\n    });\n  }\n\n  async getAgentStats(id: number): Promise<APIResponse<AgentStats>> {\n    return this.request(`/projects/${id}/stats`);\n  }\n\n  async getAgentSettings(id: number): Promise<APIResponse<AgentSettings>> {\n    return this.request(`/projects/${id}/settings`);\n  }\n\n  async updateAgentSettings(id: number, settings: Partial<AgentSettings> | FormData): Promise<APIResponse<AgentSettings>> {\n    const isFormData = settings instanceof FormData;\n    return this.request(`/projects/${id}/settings`, {\n      method: 'POST',\n      body: isFormData ? settings : JSON.stringify(settings),\n      headers: isFormData ? {} : { 'Content-Type': 'application/json' },\n    });\n  }\n\n  // Plugin Management\n  async getProjectPlugins(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request(`/projects/${projectId}/plugins`);\n  }\n\n  async updateProjectPlugin(\n    projectId: number,\n    pluginId: string,\n    data: { enabled: boolean }\n  ): Promise<APIResponse<{ updated: boolean }>> {\n    return this.request(`/projects/${projectId}/plugins/${pluginId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  // Conversation Management\n  async getConversations(projectId: number, params?: {\n    page?: number;\n    per_page?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: string;\n    userFilter?: 'all' | string;\n  }): Promise<ConversationsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.orderBy) queryParams.append('orderBy', params.orderBy);\n    if (params?.userFilter) queryParams.append('userFilter', params.userFilter);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async createConversation(projectId: number, data?: { name?: string }): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations`, {\n      method: 'POST',\n      body: JSON.stringify(data || {}),\n    });\n  }\n\n  async updateConversation(\n    projectId: number,\n    sessionId: string,\n    data: { name?: string }\n  ): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteConversation(projectId: number, sessionId: string): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Message Management\n  async getMessages(\n    projectId: number,\n    sessionId: string,\n    params?: {\n      page?: number;\n      per_page?: number;\n    }\n  ): Promise<MessagesResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async sendMessage(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      stream?: boolean;\n      source_ids?: string[];\n      response_source?: string;\n      chatbot_model?: string;\n      custom_persona?: string;\n      agent_capability?: string;\n    }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n\n  async sendMessageStream(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      source_ids?: string[];\n      response_source?: string;\n      chatbot_model?: string;\n      custom_persona?: string;\n      agent_capability?: string;\n    },\n    onChunk: (chunk: StreamChunk) => void,\n    onError?: (error: Error) => void,\n    onComplete?: () => void\n  ): Promise<void> {\n    try {\n      // Try the standard messages endpoint with stream=true parameter\n      const stream = await this.streamRequest(\n        `/projects/${projectId}/conversations/${sessionId}/messages`,\n        {\n          method: 'POST',\n          body: JSON.stringify({ ...data, stream: true }),\n        }\n      );\n\n      const reader = stream.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          onComplete?.();\n          break;\n        }\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const data = line.slice(6);\n              if (data === '[DONE]') {\n                onComplete?.();\n                return;\n              }\n              const chunk = parseStreamChunk(data);\n              if (chunk) {\n                onChunk(chunk);\n              }\n            } catch (e) {\n              console.error('Failed to parse chunk:', e);\n            }\n          }\n        }\n      }\n    } catch (error: any) {\n      onError?.(error);\n      throw error;\n    }\n  }\n\n  async getMessageById(\n    projectId: number,\n    sessionId: string,\n    messageId: number\n  ): Promise<APIMessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}`);\n  }\n\n  async updateMessageFeedback(\n    projectId: number,\n    sessionId: string,\n    messageId: number,\n    feedback: { feedback: 'thumbs_up' | 'thumbs_down' }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}/feedback`, {\n      method: 'PUT',\n      body: JSON.stringify(feedback),\n    });\n  }\n\n  // Citations\n  async getCitation(projectId: number, citationId: number): Promise<CitationResponse> {\n    return this.request(`/projects/${projectId}/citations/${citationId}`);\n  }\n\n  async previewCitationFile(id: string): Promise<any> {\n    return this.request(`/preview/${id}`);\n  }\n\n  // File Upload\n  async uploadFile(projectId: number, file: File, options?: {\n    onProgress?: (progress: number) => void;\n  }): Promise<SourceResponse> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // Use the correct /sources endpoint for file uploads\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  // Reports\n  async getTrafficReport(projectId: number): Promise<TrafficReportResponse> {\n    return this.request(`/projects/${projectId}/reports/traffic`);\n  }\n\n  async getQueriesReport(projectId: number): Promise<QueriesReportResponse> {\n    return this.request(`/projects/${projectId}/reports/queries`);\n  }\n\n  async getConversationsReport(projectId: number): Promise<ConversationsReportResponse> {\n    return this.request(`/projects/${projectId}/reports/conversations`);\n  }\n\n  async getAnalysisReport(projectId: number, interval?: AnalysisInterval): Promise<AnalysisReportResponse> {\n    const queryParams = new URLSearchParams();\n    if (interval) queryParams.append('interval', interval);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/reports/analysis${queryString ? `?${queryString}` : ''}`);\n  }\n\n  // Pages\n  async getPages(\n    projectId: number,\n    params?: PagesQueryParams\n  ): Promise<PagesListResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.crawl_status) queryParams.append('crawl_status', params.crawl_status);\n    if (params?.index_status) queryParams.append('index_status', params.index_status);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/pages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async deletePage(projectId: number, pageId: number): Promise<DeletePageResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async reindexPage(projectId: number, pageId: number): Promise<ReindexPageResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/reindex`, {\n      method: 'POST',\n    });\n  }\n\n  async getPageMetadata(projectId: number, pageId: number): Promise<PageMetadataResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/metadata`);\n  }\n\n  async updatePageMetadata(\n    projectId: number,\n    pageId: number,\n    metadata: Partial<PageMetadata>\n  ): Promise<PageMetadataResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/metadata`, {\n      method: 'PUT',\n      body: JSON.stringify(metadata),\n    });\n  }\n\n  // NOTE: This endpoint is not documented in the API\n  // Commenting out until we confirm it exists\n  // async previewFile(pageId: number): Promise<any> {\n  //   return this.request(`/page_file/${pageId}`);\n  // }\n\n  // Licenses\n  async getLicenses(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request(`/projects/${projectId}/license_keys`);\n  }\n\n  async createLicense(projectId: number, data: { name: string }): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`);\n  }\n\n  async updateLicense(\n    projectId: number,\n    licenseId: string,\n    data: { name?: string; is_active?: boolean }\n  ): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Sources\n  async getSources(projectId: number): Promise<SourcesListResponse> {\n    return this.request(`/projects/${projectId}/sources`);\n  }\n\n  async createSitemapSource(\n    projectId: number,\n    data: CreateSitemapSourceRequest\n  ): Promise<SourceResponse> {\n    // Convert JSON data to FormData as the API expects multipart/form-data\n    const formData = new FormData();\n    formData.append('sitemap_path', data.sitemap_path);\n    if (data.executive_js !== undefined) {\n      formData.append('executive_js', String(data.executive_js));\n    }\n    if (data.data_refresh_frequency !== undefined) {\n      formData.append('data_refresh_frequency', data.data_refresh_frequency);\n    }\n    if (data.create_new_pages !== undefined) {\n      formData.append('create_new_pages', String(data.create_new_pages));\n    }\n    if (data.remove_unexist_pages !== undefined) {\n      formData.append('remove_unexist_pages', String(data.remove_unexist_pages));\n    }\n    if (data.refresh_existing_pages !== undefined) {\n      formData.append('refresh_existing_pages', data.refresh_existing_pages);\n    }\n\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  async uploadFileSource(projectId: number, formData: FormData): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  /**\n   * Update source settings\n   * Updates the settings for an existing source.\n   * API endpoint: PUT /projects/{projectId}/sources/{sourceId}\n   */\n  async updateSourceSettings(\n    projectId: number,\n    sourceId: number,\n    settings: UpdateSourceSettingsRequest\n  ): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'PUT',\n      body: JSON.stringify(settings),\n    });\n  }\n\n  async deleteSource(projectId: number, sourceId: number): Promise<DeleteSourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async instantSyncSource(projectId: number, sourceId: number): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}/instant-sync`, {\n      method: 'PUT',\n    });\n  }\n\n  // Customer Intelligence\n  async getCustomerIntelligence(\n    projectId: number,\n    page: number = 1,\n    limit: number = 100\n  ): Promise<CustomerIntelligenceResponse> {\n    return this.request(`/projects/${projectId}/reports/intelligence?page=${page}&limit=${limit}`);\n  }\n\n  // User\n  async getUserLimits(): Promise<LimitsResponse> {\n    return this.request('/user/limits');\n  }\n\n  async getUserProfile(): Promise<UserProfileResponse> {\n    return this.request('/user');\n  }\n\n  async updateUserProfile(formData: FormData): Promise<UserProfileResponse> {\n    return this.request('/user', {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  // Demo Mode\n  async getDemoUsageStats(): Promise<{\n    status: string;\n    data: {\n      usage: {\n        projects: { used: number; limit: number; remaining: number };\n        conversations: { used: number; limit: number; remaining: number };\n        messages: { total: number; limitPerConversation: number; byConversation: Record<string, number> };\n      };\n      session: {\n        sessionId: string;\n        startTime: number;\n        expiresAt: number;\n        remainingTime: number;\n      };\n    };\n  }> {\n    // Add session start time header\n    const sessionData = sessionStorage.getItem('customgpt.freeTrialSession');\n    let startTime = Date.now();\n    \n    if (sessionData) {\n      try {\n        const session = JSON.parse(sessionData);\n        startTime = session.startTime || Date.now();\n      } catch (e) {\n        console.error('[ProxyClient] Failed to parse session data:', e);\n      }\n    }\n    \n    return this.request('/demo/usage', {\n      headers: {\n        'X-Session-Start-Time': startTime.toString()\n      }\n    });\n  }\n  \n  async cleanupDemoSession(): Promise<{\n    status: string;\n    data: {\n      sessionId: string;\n      totalResources: number;\n      successCount: number;\n      failureCount: number;\n      results: Array<{\n        success: boolean;\n        resourceId: string;\n        resourceType: string;\n        error?: string;\n      }>;\n    };\n  }> {\n    return this.request('/demo/cleanup', {\n      method: 'POST'\n    });\n  }\n}\n\n// Export singleton instance\nexport const proxyClient = new ProxyCustomGPTClient();","/**\n * CustomGPT API Client\n * \n * This file now uses the proxy client that communicates with our Next.js API routes.\n * The API key is stored securely on the server and never exposed to the client.\n * \n * Migration from direct API calls to proxy:\n * - All API calls now go through /api/proxy/* endpoints\n * - No API key is needed or stored client-side\n * - Server handles authentication with CustomGPT\n */\n\n// Re-export everything from the proxy client\nexport { proxyClient as apiClient } from './proxy-client';\nexport type { ProxyCustomGPTClient as CustomGPTClient } from './proxy-client';\n\n// Export a singleton instance getter\nimport { proxyClient } from './proxy-client';\n\nlet initialized = false;\n\n/**\n * Initialize the API client\n * No longer needs API key as it's handled server-side\n */\nexport function initializeClient(config?: any): void {\n  // Mark as initialized without needing API key\n  initialized = true;\n}\n\n/**\n * Get the API client instance\n */\nexport function getClient() {\n  return proxyClient;\n}\n\n/**\n * Check if client is initialized\n */\nexport function isClientInitialized(): boolean {\n  // Always return true since proxy client doesn't need initialization\n  return true;\n}","export type LogLevel = 'info' | 'warn' | 'error';\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  category: string;\n  message: string;\n  data?: any;\n  error?: any;\n  stack?: string;\n}\n\nclass Logger {\n  private static instance: Logger;\n  private isClient: boolean;\n  private logs: LogEntry[] = [];\n\n  private constructor() {\n    this.isClient = typeof window !== 'undefined';\n  }\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  private formatMessage(entry: LogEntry): string {\n    const { timestamp, level, category, message, data, error, stack } = entry;\n    let formatted = `[${timestamp}] [${level.toUpperCase()}] [${category}] ${message}`;\n    \n    if (data) {\n      formatted += `\\nData: ${JSON.stringify(data, null, 2)}`;\n    }\n    \n    if (error) {\n      formatted += `\\nError: ${error.message || error}`;\n      if (stack) {\n        formatted += `\\nStack: ${stack}`;\n      }\n    }\n    \n    return formatted;\n  }\n\n  private writeToFile(entry: LogEntry) {\n    // File writing is handled by the API route\n    // This method is kept for compatibility\n  }\n\n  private log(level: LogLevel, category: string, message: string, data?: any, error?: any) {\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      category,\n      message,\n      data,\n      error: error ? { message: error.message, code: error.code, status: error.status } : undefined,\n      stack: error?.stack,\n    };\n\n    // Store in memory for client access\n    this.logs.push(entry);\n    if (this.logs.length > 1000) {\n      this.logs = this.logs.slice(-500); // Keep last 500 entries\n    }\n\n    // Console output with styling\n    const styles = {\n      info: 'color: #3B82F6; font-weight: normal;',\n      warn: 'color: #F59E0B; font-weight: bold;',\n      error: 'color: #EF4444; font-weight: bold;',\n    };\n\n    const prefix = `[${entry.timestamp.split('T')[1].split('.')[0]}] [${category}]`;\n    \n    if (this.isClient) {\n      console.log(`%c${prefix} ${message}`, styles[level]);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    } else {\n      const colorCodes = {\n        info: '\\x1b[36m',\n        warn: '\\x1b[33m',\n        error: '\\x1b[31m',\n      };\n      const reset = '\\x1b[0m';\n      console.log(`${colorCodes[level]}${prefix}${reset} ${message}`);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    }\n\n    // Server logging removed - all logs go to console only\n  }\n\n\n  info(category: string, message: string, data?: any) {\n    this.log('info', category, message, data);\n  }\n\n  warn(category: string, message: string, data?: any) {\n    this.log('warn', category, message, data);\n  }\n\n  error(category: string, message: string, error?: any, data?: any) {\n    this.log('error', category, message, data, error);\n  }\n\n  getLogs(): LogEntry[] {\n    return this.logs;\n  }\n\n  clearLogs() {\n    this.logs = [];\n  }\n\n  // API-specific logging helpers\n  apiRequest(endpoint: string, method: string, data?: any) {\n    this.info('API_REQUEST', `${method} ${endpoint}`, data);\n  }\n\n  apiResponse(endpoint: string, status: number, data?: any) {\n    const level = status >= 400 ? 'error' : 'info';\n    this.log(level, 'API_RESPONSE', `${endpoint} - Status: ${status}`, data);\n  }\n\n  apiError(endpoint: string, error: any) {\n    this.error('API_ERROR', `Failed request to ${endpoint}`, error);\n  }\n\n  // Auth-specific logging\n  authCheck(message: string, data?: any) {\n    this.info('AUTH', message, data);\n  }\n\n  authError(message: string, error?: any) {\n    this.error('AUTH_ERROR', message, error);\n  }\n\n  // Navigation logging\n  navigation(route: string, params?: any) {\n    this.info('NAVIGATION', `Navigating to ${route}`, params);\n  }\n\n  // Store operation logging\n  storeAction(store: string, action: string, data?: any) {\n    this.info('STORE', `${store}.${action}`, data);\n  }\n}\n\nexport const logger = Logger.getInstance();","/**\n * Button Component\n * \n * Reusable button component with multiple variants and sizes.\n * Built with class-variance-authority for type-safe styling.\n * \n * Variants:\n * - default: Primary brand button with shadow\n * - destructive: Red danger button for destructive actions\n * - outline: Secondary button with border\n * - secondary: Gray background button\n * - ghost: Transparent button with hover state\n * - link: Text-only button styled as link\n * \n * Sizes:\n * - default: Standard size (h-10)\n * - sm: Small size (h-8)\n * - lg: Large size (h-12)\n * - icon: Square icon button (10x10)\n * \n * Features:\n * - Full keyboard accessibility\n * - Focus ring for keyboard navigation\n * - Disabled state handling\n * - Smooth transitions\n * - Responsive to all button HTML attributes\n * \n * Usage examples:\n * <Button>Click me</Button>\n * <Button variant=\"destructive\">Delete</Button>\n * <Button size=\"sm\" variant=\"outline\">Cancel</Button>\n * <Button size=\"icon\" variant=\"ghost\"><Icon /></Button>\n * \n * Features:\n * - Comprehensive variant system with brand-consistent styling\n * - Professional color schemes aligned with design guidelines\n * - Loading states with integrated spinner animations\n * - Button group functionality for complex interfaces\n * - Full icon support with flexible positioning options\n */\n\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\n/**\n * Button variant configuration using class-variance-authority\n * \n * Base classes apply to all buttons, then variant-specific\n * classes are added based on the variant and size props.\n */\nconst buttonVariants = cva(\n  // Enhanced base classes with premium feel\n  'relative inline-flex items-center justify-center font-medium transition-all duration-200 ease-out focus-visible:outline-none disabled:opacity-50 disabled:cursor-not-allowed disabled:pointer-events-none transform-gpu active:scale-[0.98]',\n  {\n    variants: {\n      variant: {\n        default: [\n          'bg-primary text-primary-foreground shadow-sm',\n          'hover:bg-primary-hover hover:shadow-md hover:scale-[1.02]',\n          'focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2',\n          'active:bg-primary-active',\n          'transition-all duration-200',\n        ].join(' '),\n        destructive: [\n          'bg-destructive text-destructive-foreground shadow-sm',\n          'hover:bg-destructive/90 hover:shadow-md hover:scale-[1.02]',\n          'focus-visible:ring-2 focus-visible:ring-destructive/50 focus-visible:ring-offset-2',\n          'active:bg-destructive/80',\n        ].join(' '),\n        outline: [\n          'border border-input bg-background/50 backdrop-blur-sm',\n          'hover:bg-accent hover:text-accent-foreground hover:border-accent',\n          'focus-visible:ring-2 focus-visible:ring-accent/50 focus-visible:ring-offset-2',\n          'transition-all duration-200',\n        ].join(' '),\n        secondary: [\n          'bg-secondary text-secondary-foreground',\n          'hover:bg-secondary/80 hover:shadow-sm',\n          'focus-visible:ring-2 focus-visible:ring-secondary/50 focus-visible:ring-offset-2',\n        ].join(' '),\n        ghost: [\n          'hover:bg-accent hover:text-accent-foreground',\n          'focus-visible:ring-2 focus-visible:ring-accent/50 focus-visible:ring-offset-2',\n          'data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n        ].join(' '),\n        link: [\n          'text-primary underline-offset-4 hover:underline',\n          'focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2',\n          'hover:text-primary-hover',\n        ].join(' '),\n        premium: [\n          'bg-gradient-to-r from-primary to-primary-hover text-primary-foreground',\n          'shadow-md hover:shadow-lg hover:scale-[1.02]',\n          'focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2',\n          'before:absolute before:inset-0 before:bg-white/20 before:opacity-0',\n          'hover:before:opacity-100 before:transition-opacity before:duration-200',\n          'overflow-hidden',\n        ].join(' '),\n      },\n      size: {\n        default: 'h-10 rounded-lg px-4 py-2 text-sm',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-12 rounded-lg px-8 text-base',\n        xl: 'h-14 rounded-xl px-10 text-lg',\n        icon: 'h-10 w-10 rounded-lg',\n        'icon-sm': 'h-8 w-8 rounded-md',\n        'icon-lg': 'h-12 w-12 rounded-lg',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\n/**\n * Button component props\n * \n * Extends standard HTML button attributes with variant props\n * @property variant - Visual style variant\n * @property size - Button size preset\n * @property asChild - Whether to render as child component (for composition)\n */\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  loading?: boolean;\n  loadingText?: string;\n}\n\n/**\n * Button Component\n * \n * Forward ref component for proper ref handling in forms\n * and other use cases requiring direct DOM access.\n */\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ \n    className, \n    variant, \n    size, \n    asChild = false, \n    loading = false,\n    loadingText,\n    children,\n    disabled,\n    onClick,\n    ...props \n  }, ref) => {\n    const [ripples, setRipples] = React.useState<Array<{ x: number; y: number; id: number }>>([]);\n    \n    const handleClick = React.useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      if (loading || disabled) return;\n      \n      // Add ripple effect\n      const button = e.currentTarget;\n      const rect = button.getBoundingClientRect();\n      const rippleX = e.clientX - rect.left;\n      const rippleY = e.clientY - rect.top;\n      const rippleId = Date.now();\n      \n      setRipples(prev => [...prev, { x: rippleX, y: rippleY, id: rippleId }]);\n      \n      // Remove ripple after animation\n      setTimeout(() => {\n        setRipples(prev => prev.filter(ripple => ripple.id !== rippleId));\n      }, 600);\n      \n      // Call original onClick\n      onClick?.(e);\n    }, [loading, disabled, onClick]);\n    \n    return (\n      <button\n        className={cn(\n          buttonVariants({ variant, size, className }),\n          'relative overflow-hidden',\n          loading && 'cursor-wait'\n        )}\n        ref={ref}\n        disabled={loading || disabled}\n        onClick={handleClick}\n        {...props}\n      >\n        {/* Ripple effects */}\n        {ripples.map(ripple => (\n          <span\n            key={ripple.id}\n            className=\"absolute pointer-events-none\"\n            style={{\n              left: ripple.x,\n              top: ripple.y,\n              transform: 'translate(-50%, -50%)',\n            }}\n          >\n            <span className=\"block animate-ripple rounded-full bg-white/30 dark:bg-white/20\" \n              style={{\n                width: 0,\n                height: 0,\n                animation: 'ripple-expand 0.6s ease-out forwards',\n              }}\n            />\n          </span>\n        ))}\n        \n        {/* Loading spinner */}\n        {loading && (\n          <span className=\"absolute inset-0 flex items-center justify-center bg-inherit\">\n            <svg\n              className=\"animate-spin h-4 w-4\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              />\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              />\n            </svg>\n          </span>\n        )}\n        \n        {/* Button content */}\n        <span className={cn(\n          'relative z-10 inline-flex items-center',\n          loading && 'opacity-0'\n        )}>\n          {children}\n        </span>\n        \n        {/* Loading text */}\n        {loading && loadingText && (\n          <span className=\"absolute inset-0 flex items-center justify-center\">\n            <span className=\"ml-6\">{loadingText}</span>\n          </span>\n        )}\n      </button>\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };","/**\n * Avatar Component\n * \n * Reusable avatar component that displays agent avatars with fallback to default icons.\n * Supports different sizes, shapes, and fallback icons for various use cases.\n * \n * Features:\n * - Image loading with error handling\n * - Multiple size variants\n * - Customizable fallback icons\n * - Consistent styling across the application\n * - Accessibility support\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot, User } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport type { Agent } from '@/types';\n\nexport interface AvatarProps {\n  /** Agent/project data containing avatar information */\n  agent?: Agent | null;\n  /** Avatar image URL (alternative to agent prop) */\n  src?: string;\n  /** Alt text for the image */\n  alt?: string;\n  /** Size variant */\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  /** Shape variant */\n  shape?: 'circle' | 'rounded' | 'square';\n  /** Fallback icon type */\n  fallback?: 'bot' | 'user' | 'none';\n  /** Whether this avatar represents a selected/active state */\n  isSelected?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Avatar size configurations\n */\nconst sizeVariants = {\n  xs: {\n    container: 'w-4 h-4',\n    icon: 'w-2 h-2'\n  },\n  sm: {\n    container: 'w-6 h-6', \n    icon: 'w-3 h-3'\n  },\n  md: {\n    container: 'w-8 h-8',\n    icon: 'w-4 h-4'\n  },\n  lg: {\n    container: 'w-10 h-10',\n    icon: 'w-5 h-5'\n  },\n  xl: {\n    container: 'w-12 h-12',\n    icon: 'w-6 h-6'\n  }\n};\n\n/**\n * Avatar shape configurations\n */\nconst shapeVariants = {\n  circle: 'rounded-full',\n  rounded: 'rounded-lg', \n  square: 'rounded-none'\n};\n\n/**\n * Avatar Component\n * \n * Displays agent avatar with proper fallbacks and error handling.\n * \n * @param agent - Agent object containing avatar settings\n * @param src - Direct image URL (overrides agent avatar)\n * @param alt - Alt text for accessibility\n * @param size - Size variant (xs, sm, md, lg, xl)\n * @param shape - Shape variant (circle, rounded, square)\n * @param fallback - Fallback icon type\n * @param isSelected - Whether avatar represents selected state\n * @param className - Additional CSS classes\n */\nexport const Avatar: React.FC<AvatarProps> = ({\n  agent,\n  src,\n  alt,\n  size = 'md',\n  shape = 'circle',\n  fallback = 'bot',\n  isSelected = false,\n  className\n}) => {\n  const [imageError, setImageError] = React.useState(false);\n  \n  // Determine the avatar URL from props or agent settings\n  const avatarUrl = src || agent?.settings?.chatbot_avatar;\n  \n  // Generate alt text if not provided\n  const altText = alt || (agent?.project_name ? `${agent.project_name} avatar` : 'Avatar');\n  \n  // Get size and shape classes\n  const sizeClasses = sizeVariants[size];\n  const shapeClass = shapeVariants[shape];\n  \n  // Determine background color based on state\n  const backgroundClass = isSelected \n    ? 'bg-primary shadow-md' \n    : 'bg-muted hover:bg-accent transition-all duration-200';\n  \n  // Handle image load error\n  const handleImageError = () => {\n    setImageError(true);\n  };\n  \n  // Reset error state when avatar URL changes\n  React.useEffect(() => {\n    setImageError(false);\n  }, [avatarUrl]);\n  \n  // Render fallback icon\n  const renderFallbackIcon = () => {\n    if (fallback === 'none') return null;\n    \n    const iconClass = cn(\n      sizeClasses.icon,\n      isSelected ? 'text-primary-foreground' : 'text-muted-foreground'\n    );\n    \n    switch (fallback) {\n      case 'user':\n        return <User className={iconClass} />;\n      case 'bot':\n      default:\n        return <Bot className={iconClass} />;\n    }\n  };\n  \n  return (\n    <div className={cn(\n      'relative flex items-center justify-center flex-shrink-0 overflow-hidden',\n      'ring-2 ring-transparent',\n      'hover:ring-primary/20 hover:scale-105',\n      'transition-all duration-200',\n      isSelected && 'ring-primary ring-offset-2 ring-offset-background',\n      sizeClasses.container,\n      shapeClass,\n      backgroundClass,\n      className\n    )}>\n      {avatarUrl && !imageError ? (\n        <img\n          src={avatarUrl}\n          alt={altText}\n          className=\"w-full h-full object-cover\"\n          onError={handleImageError}\n          loading=\"lazy\"\n        />\n      ) : (\n        renderFallbackIcon()\n      )}\n      {/* Online indicator (optional) */}\n      {isSelected && (\n        <div className=\"absolute -bottom-0.5 -right-0.5 h-3 w-3 rounded-full bg-success border-2 border-background\" />\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Avatar Component\n * \n * Specialized avatar component for agent/project displays.\n * Uses 'bot' fallback by default and extracts name for alt text.\n * \n * @param agent - Agent object\n * @param size - Size variant\n * @param isSelected - Selection state\n * @param className - Additional classes\n */\nexport const AgentAvatar: React.FC<{\n  agent?: Agent | null;\n  size?: AvatarProps['size'];\n  isSelected?: boolean;\n  className?: string;\n}> = ({ agent, size = 'md', isSelected = false, className }) => {\n  return (\n    <Avatar\n      agent={agent}\n      size={size}\n      shape=\"circle\"\n      fallback=\"bot\"\n      isSelected={isSelected}\n      alt={agent?.project_name ? `${agent.project_name} avatar` : 'Agent avatar'}\n      className={className}\n    />\n  );\n};\n\n/**\n * User Avatar Component\n * \n * Specialized avatar component for user displays.\n * Uses 'user' fallback by default.\n * \n * @param src - Avatar image URL\n * @param size - Size variant  \n * @param className - Additional classes\n */\nexport const UserAvatar: React.FC<{\n  src?: string;\n  size?: AvatarProps['size'];\n  className?: string;\n}> = ({ src, size = 'md', className }) => {\n  return (\n    <Avatar\n      src={src}\n      size={size}\n      shape=\"circle\"\n      fallback=\"user\"\n      alt=\"User avatar\"\n      className={className}\n    />\n  );\n};","/**\n * Citation List Component\n * \n * Displays a list of source citations from the AI's response.\n * Shows where the information came from with expandable details.\n * \n * Features:\n * - Expandable citation cards\n * - Confidence score visualization\n * - Direct source links\n * - Show more/less functionality\n * - Smooth expand/collapse animations\n * - Citation numbering\n * - View details modal integration\n * \n * UI/UX:\n * - Compact card design\n * - Progressive disclosure pattern\n * - Visual confidence indicators\n * - Hover states for interactivity\n * - Staggered animation on load\n * \n * Citation Display:\n * - Title and source URL\n * - Content preview\n * - Confidence percentage\n * - External link to source\n * - Details button for modal\n * \n * Features:\n * - Advanced citation filtering and intelligent search capabilities\n * - Professional export functionality for research workflows\n * - Enhanced confidence visualization with detailed analytics\n * - Smart citation grouping by domain and source type\n * - Interactive tooltips and one-click copy functionality\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  BookOpen, \n  ChevronDown, \n  ExternalLink,\n  FileText \n} from 'lucide-react';\n\nimport type { CitationProps, Citation } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\n/**\n * Props for individual citation card\n * \n * @property citation - Citation data object\n * @property index - Display index (1-based)\n * @property isExpanded - Whether card is expanded\n * @property onToggle - Toggle expansion callback\n * @property onClick - Optional click handler for details\n * @property onPreviewClick - Optional click handler for file preview\n */\ninterface CitationCardProps {\n  citation: Citation;\n  index: number;\n  isExpanded: boolean;\n  onToggle: () => void;\n  onClick?: (citation: Citation) => void;\n  onPreviewClick?: (citation: Citation) => void;\n}\n\n/**\n * Citation Card Component\n * \n * Individual citation with expandable details.\n * Shows title, source, content, and confidence score.\n */\nconst CitationCard: React.FC<CitationCardProps> = ({\n  citation,\n  index,\n  isExpanded,\n  onToggle,\n  onClick,\n  onPreviewClick,\n}) => {\n  return (\n    <div className=\"border border-border rounded-lg overflow-hidden transition-all hover:border-border/80\">\n      <button\n        onClick={onToggle}\n        className=\"w-full px-3 py-2 flex items-center gap-3 hover:bg-accent transition-colors text-left\"\n      >\n        {/* Citation Index */}\n        <div className=\"flex-shrink-0 w-6 h-6 rounded bg-brand-100 flex items-center justify-center\">\n          <span className=\"text-xs font-medium text-brand-700\">{index}</span>\n        </div>\n        \n        {/* Citation Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"font-medium text-sm text-foreground line-clamp-1\">\n            {citation.title}\n          </div>\n          <div className=\"text-xs text-muted-foreground line-clamp-1\">\n            {citation.source || citation.url}\n          </div>\n        </div>\n        \n        {/* Expand Icon */}\n        <ChevronDown\n          className={cn(\n            'w-4 h-4 text-muted-foreground transition-transform flex-shrink-0',\n            isExpanded && 'rotate-180'\n          )}\n        />\n      </button>\n      \n      {/* Expanded Content */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: 'auto', opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"px-3 py-2 border-t border-border bg-accent\">\n              <p className=\"text-sm text-foreground mb-2\">\n                {citation.content}\n              </p>\n              \n              \n              {/* Actions */}\n              <div className=\"flex items-center gap-2\">\n                {citation.url && (\n                  <a\n                    href={citation.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"inline-flex items-center gap-1 text-xs text-brand-600 hover:text-brand-700 transition-colors\"\n                  >\n                    View source\n                    <ExternalLink className=\"w-3 h-3\" />\n                  </a>\n                )}\n                \n                {onClick && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onClick(citation)}\n                    className=\"h-6 px-2 text-xs\"\n                  >\n                    View details\n                  </Button>\n                )}\n                \n                {onPreviewClick && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onPreviewClick(citation)}\n                    className=\"h-6 px-2 text-xs\"\n                  >\n                    <FileText className=\"w-3 h-3 mr-1\" />\n                    Preview file\n                  </Button>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\n/**\n * Citation List Component\n * \n * Main component that renders a list of citations with progressive disclosure.\n * Handles expansion state and show more/less functionality.\n * \n * @param citations - Array of citation objects to display\n * @param onCitationClick - Optional handler for citation detail clicks\n * @param maxVisible - Maximum citations to show initially (default: 5)\n * @param className - Additional CSS classes\n */\nexport const CitationList: React.FC<CitationProps & { onPreviewClick?: (citation: Citation) => void }> = ({ \n  citations, \n  onCitationClick,\n  onPreviewClick,\n  maxVisible = 5,\n  className \n}) => {\n  // Track which citations are expanded\n  const [expanded, setExpanded] = useState<Set<string>>(new Set());\n  // Track whether to show all citations or just maxVisible\n  const [showAll, setShowAll] = useState(false);\n  \n  const visibleCitations = showAll ? citations : citations.slice(0, maxVisible);\n  const hasMore = citations.length > maxVisible;\n\n  /**\n   * Toggle citation expansion state\n   * \n   * Uses Set for efficient lookup and update of expanded citations\n   */\n  const toggleExpanded = (citationId: string) => {\n    const newExpanded = new Set(expanded);\n    if (expanded.has(citationId)) {\n      newExpanded.delete(citationId);\n    } else {\n      newExpanded.add(citationId);\n    }\n    setExpanded(newExpanded);\n  };\n\n  if (citations.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={cn('mt-4 space-y-2', className)}>\n      {/* Header */}\n      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n        <BookOpen className=\"w-4 h-4\" />\n        <span className=\"font-medium\">Sources</span>\n        <span className=\"text-muted-foreground\">({citations.length})</span>\n        \n        {hasMore && (\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => setShowAll(!showAll)}\n            className=\"ml-auto h-6 px-2 text-xs\"\n          >\n            {showAll ? 'Show less' : `Show all ${citations.length}`}\n          </Button>\n        )}\n      </div>\n      \n      {/* Citations */}\n      <div className=\"space-y-2\">\n        <AnimatePresence>\n          {visibleCitations.map((citation, idx) => (\n            <motion.div\n              key={citation.id}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.2, delay: idx * 0.05 }}\n            >\n              <CitationCard\n                citation={citation}\n                index={idx + 1}\n                isExpanded={expanded.has(citation.id)}\n                onToggle={() => toggleExpanded(citation.id)}\n                onClick={onCitationClick}\n                onPreviewClick={onPreviewClick}\n              />\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n      \n      {/* Load More Button */}\n      {hasMore && !showAll && (\n        <div className=\"pt-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setShowAll(true)}\n            className=\"w-full\"\n          >\n            Show {citations.length - maxVisible} more sources\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Message Details Component\n * \n * Displays additional metadata and information about a message\n * that's not shown in the main UI. Includes user ID, conversation ID,\n * metadata, and timestamps.\n * \n * Features:\n * - Collapsible details section\n * - Formatted metadata display\n * - Copy functionality for technical details\n * - Responsive layout\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { ChevronDown, ChevronUp, Copy, Info } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { cn, copyToClipboard } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport type { MessageDetails as MessageDetailsType } from '@/types';\n\ninterface MessageDetailsProps {\n  /** The message details to display */\n  details?: MessageDetailsType;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Format a key name to be more readable\n */\nconst formatKey = (key: string): string => {\n  return key\n    .split('_')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n};\n\n/**\n * Format a value for display\n */\nconst formatValue = (value: any): string => {\n  if (value === null || value === undefined) {\n    return 'N/A';\n  }\n  if (typeof value === 'object') {\n    return JSON.stringify(value, null, 2);\n  }\n  return String(value);\n};\n\nexport const MessageDetails: React.FC<MessageDetailsProps> = ({ details, className }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  if (!details) {\n    return null;\n  }\n\n  const handleCopyAll = async () => {\n    const detailsText = JSON.stringify(details, null, 2);\n    const success = await copyToClipboard(detailsText);\n    if (success) {\n      toast.success('Details copied to clipboard');\n    }\n  };\n\n  const handleCopyValue = async (value: string) => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      toast.success('Value copied to clipboard');\n    }\n  };\n\n  return (\n    <div className={cn('mt-2', className)}>\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"flex items-center gap-1 text-xs text-muted-foreground hover:text-foreground transition-colors\"\n      >\n        <Info className=\"w-3 h-3\" />\n        <span>More Details</span>\n        {isExpanded ? (\n          <ChevronUp className=\"w-3 h-3\" />\n        ) : (\n          <ChevronDown className=\"w-3 h-3\" />\n        )}\n      </button>\n\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"mt-2 p-3 bg-accent rounded-lg border border-border\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className=\"text-xs font-semibold text-foreground\">Message Details</h4>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={handleCopyAll}\n                  className=\"h-6 px-2 text-xs\"\n                >\n                  <Copy className=\"w-3 h-3 mr-1\" />\n                  Copy All\n                </Button>\n              </div>\n\n              <div className=\"space-y-2\">\n                {/* Basic Details */}\n                {details.user_id !== undefined && (\n                  <DetailRow\n                    label=\"User ID\"\n                    value={String(details.user_id)}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n                \n                {details.conversation_id !== undefined && (\n                  <DetailRow\n                    label=\"Conversation ID\"\n                    value={String(details.conversation_id)}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n                \n                {details.updated_at && (\n                  <DetailRow\n                    label=\"Updated At\"\n                    value={new Date(details.updated_at).toLocaleString()}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n\n                {/* Metadata Section */}\n                {details.metadata && (\n                  <div className=\"mt-3 pt-2 border-t border-border\">\n                    <h5 className=\"text-xs font-semibold text-muted-foreground mb-2\">Metadata</h5>\n                    \n                    {details.metadata.user_ip && (\n                      <DetailRow\n                        label=\"User IP\"\n                        value={details.metadata.user_ip}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                    \n                    {details.metadata.user_agent && (\n                      <DetailRow\n                        label=\"User Agent\"\n                        value={details.metadata.user_agent}\n                        onCopy={handleCopyValue}\n                        truncate\n                      />\n                    )}\n                    \n                    {details.metadata.external_id && (\n                      <DetailRow\n                        label=\"External ID\"\n                        value={details.metadata.external_id}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                    \n                    {details.metadata.request_source && (\n                      <DetailRow\n                        label=\"Request Source\"\n                        value={details.metadata.request_source}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\ninterface DetailRowProps {\n  label: string;\n  value: string;\n  onCopy: (value: string) => void;\n  truncate?: boolean;\n}\n\nconst DetailRow: React.FC<DetailRowProps> = ({ label, value, onCopy, truncate }) => {\n  return (\n    <div className=\"flex items-start justify-between gap-2 text-xs\">\n      <span className=\"text-muted-foreground font-medium whitespace-nowrap\">{label}:</span>\n      <div className=\"flex items-center gap-1 flex-1 min-w-0\">\n        <span \n          className={cn(\n            \"text-foreground break-all\",\n            truncate && \"truncate\"\n          )}\n          title={truncate ? value : undefined}\n        >\n          {value}\n        </span>\n        <button\n          onClick={() => onCopy(value)}\n          className=\"p-1 text-muted-foreground hover:text-foreground transition-colors flex-shrink-0\"\n          title=\"Copy value\"\n        >\n          <Copy className=\"w-3 h-3\" />\n        </button>\n      </div>\n    </div>\n  );\n};","/**\n * Message Component\n * \n * Displays individual chat messages with rich formatting support.\n * \n * Features:\n * - Markdown rendering with GitHub Flavored Markdown\n * - Syntax highlighting for code blocks\n * - Copy functionality for code and messages\n * - User feedback (thumbs up/down)\n * - Citation display and interaction\n * - Animated entrance and streaming cursor\n * - Different layouts for user vs assistant messages\n * \n * Customization:\n * - Modify avatar styles in the component\n * - Adjust markdown prose styles\n * - Customize code block themes (currently using oneDark)\n * - Change animation settings\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { motion } from 'framer-motion';\nimport { \n  Bot, \n  User, \n  Copy, \n  ThumbsUp, \n  ThumbsDown, \n  RotateCw,\n  ExternalLink \n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { MessageProps, Citation, ChatMessage } from '@/types';\nimport { cn, copyToClipboard, formatTimestamp } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { AgentAvatar, UserAvatar } from '@/components/ui/avatar';\nimport { CitationList } from './CitationList';\nimport { MessageDetails } from './MessageDetails';\n\ninterface CodeBlockProps {\n  /** Programming language for syntax highlighting */\n  language: string;\n  /** Code content to display */\n  value: string;\n}\n\n/**\n * CodeBlock Component\n * \n * Renders code with syntax highlighting and a copy button.\n * Uses react-syntax-highlighter with the oneDark theme.\n * Copy button appears on hover.\n */\nconst CodeBlock: React.FC<CodeBlockProps> = ({ language, value }) => {\n  const [copied, setCopied] = useState(false);\n  \n  const handleCopy = async () => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      setCopied(true);\n      toast.success('Code copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    }\n  };\n\n  return (\n    <div className=\"relative group\">\n      <div className=\"absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          onClick={handleCopy}\n          className=\"h-6 px-2 text-xs bg-foreground text-background hover:bg-foreground/90\"\n        >\n          {copied ? 'Copied!' : 'Copy'}\n        </Button>\n      </div>\n      <SyntaxHighlighter\n        language={language}\n        style={oneDark}\n        customStyle={{\n          margin: 0,\n          borderRadius: '0.5rem',\n          fontSize: '0.875rem',\n        }}\n      >\n        {value}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\n/**\n * StreamingCursor Component\n * \n * Animated blinking cursor shown at the end of streaming messages\n * to indicate the AI is still generating content\n */\nconst StreamingCursor: React.FC = () => (\n  <span className=\"inline-block w-0.5 h-4 bg-foreground animate-blink ml-0.5 align-middle\" />\n);\n\ninterface MessageContentProps {\n  /** Markdown content to render */\n  content: string;\n  /** Whether the message is currently being streamed */\n  isStreaming?: boolean;\n}\n\n/**\n * MessageContent Component\n * \n * Renders message content with full markdown support including:\n * - Headers, lists, tables (via GFM)\n * - Inline and block code with syntax highlighting\n * - Links that open in new tabs\n * - Streaming cursor when content is being generated\n */\nconst MessageContent: React.FC<MessageContentProps> = ({ content, isStreaming }) => {\n  // Remove <CONTEXT> and </CONTEXT> tags from the content\n  const cleanedContent = content.replace(/<CONTEXT>|<\\/CONTEXT>/g, '').trim();\n  \n  return (\n    <div className=\"prose prose-sm max-w-none text-foreground\">\n      <ReactMarkdown\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || '');\n            const isInline = !match;\n            return !isInline && match ? (\n              <CodeBlock\n                language={match[1]}\n                value={String(children).replace(/\\n$/, '')}\n                {...props}\n              />\n            ) : (\n              <code className=\"px-1 py-0.5 rounded bg-muted text-sm font-medium\" {...props}>\n                {children}\n              </code>\n            );\n          },\n          a({ href, children }) {\n            return (\n              <a\n                href={href}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-brand-600 hover:text-brand-700 no-underline hover:underline inline-flex items-center gap-1\"\n              >\n                {children}\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            );\n          },\n        }}\n      >\n        {cleanedContent}\n      </ReactMarkdown>\n      {isStreaming && <StreamingCursor />}\n    </div>\n  );\n};\n\ninterface MessageActionsProps {\n  /** The message object containing content and metadata */\n  message: ChatMessage;\n  /** Handler for user feedback */\n  onFeedback?: (feedback: 'like' | 'dislike') => void;\n}\n\n/**\n * MessageActions Component\n * \n * Action buttons for assistant messages:\n * - Copy message content\n * - Thumbs up/down feedback\n * - Regenerate response (placeholder)\n * \n * Only visible on hover for cleaner UI\n */\nconst MessageActions: React.FC<MessageActionsProps> = ({ message, onFeedback }) => {\n  const [feedback, setFeedback] = useState<'like' | 'dislike' | null>(\n    message.feedback || null\n  );\n\n  const handleCopy = async () => {\n    const success = await copyToClipboard(message.content);\n    if (success) {\n      toast.success('Message copied to clipboard');\n    }\n  };\n\n  const handleFeedback = (type: 'like' | 'dislike') => {\n    setFeedback(type);\n    onFeedback?.(type);\n    toast.success('Thanks for your feedback!');\n  };\n\n  const handleRegenerate = () => {\n    // This would trigger message regeneration\n    toast.info('Regenerating response...');\n  };\n\n  return (\n    <div className=\"mt-3 flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleCopy}\n        className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n        title=\"Copy message\"\n      >\n        <Copy className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('like')}\n        className={cn(\n          'h-8 w-8 text-muted-foreground hover:text-foreground',\n          feedback === 'like' && 'text-success hover:text-success/90'\n        )}\n        title=\"Good response\"\n      >\n        <ThumbsUp className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('dislike')}\n        className={cn(\n          'h-8 w-8 text-muted-foreground hover:text-foreground',\n          feedback === 'dislike' && 'text-destructive hover:text-destructive/90'\n        )}\n        title=\"Bad response\"\n      >\n        <ThumbsDown className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleRegenerate}\n        className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n        title=\"Regenerate response\"\n      >\n        <RotateCw className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n};\n\n/**\n * Message Component - Main Export\n * \n * Renders a complete message with avatar, content, citations, and actions.\n * \n * Layout:\n * - User messages: White background, user avatar, plain text\n * - Assistant messages: Gray background, bot avatar, markdown content\n * \n * Features:\n * - Smooth entrance animation with Framer Motion\n * - Hover effects for action visibility\n * - Status indicators (sending, error)\n * - Timestamp display\n * - Citation list integration\n * \n * @param message - The message data to display\n * @param isStreaming - Whether this message is being streamed\n * @param isLast - Whether this is the last message (affects scrolling)\n * @param onCitationClick - Handler for citation interactions\n * @param onFeedback - Handler for user feedback\n * @param className - Additional CSS classes\n */\nexport const Message: React.FC<MessageProps> = ({ \n  message,\n  agent,\n  isStreaming = false, \n  isLast = false,\n  onCitationClick,\n  onPreviewClick,\n  onFeedback,\n  className \n}) => {\n  const isUser = message.role === 'user';\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n      className={cn(\n        'group relative px-4 py-6 transition-colors',\n        isUser ? 'bg-background' : 'bg-muted border-y border-border',\n        'hover:bg-opacity-80',\n        className\n      )}\n    >\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"flex-shrink-0\">\n          {isUser ? (\n            <UserAvatar \n              size=\"md\" \n              className=\"bg-secondary\"\n            />\n          ) : (\n            <AgentAvatar \n              agent={agent}\n              size=\"md\"\n              className=\"bg-background border border-border\"\n            />\n          )}\n        </div>\n        \n        {/* Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          {/* Message Status */}\n          {message.status && message.status !== 'sent' && (\n            <div className=\"mb-2 text-xs text-muted-foreground\">\n              {message.status === 'sending' && 'Sending...'}\n              {message.status === 'error' && (\n                <span className=\"text-red-500\">Failed to send</span>\n              )}\n            </div>\n          )}\n          \n          {/* Message Content */}\n          {isUser ? (\n            <p className=\"text-foreground whitespace-pre-wrap\">{message.content}</p>\n          ) : (\n            <MessageContent \n              content={message.content} \n              isStreaming={isStreaming}\n            />\n          )}\n          \n          {/* Citations */}\n          {message.citations && message.citations.length > 0 && (\n            <CitationList \n              citations={message.citations}\n              onCitationClick={onCitationClick}\n              onPreviewClick={onPreviewClick}\n            />\n          )}\n          \n          {/* Timestamp */}\n          <div className=\"mt-2 text-xs text-muted-foreground\">\n            {formatTimestamp(message.timestamp)}\n          </div>\n          \n          {/* Message Details (hidden by default) */}\n          <MessageDetails details={message.details} />\n          \n          {/* Actions */}\n          {!isUser && !isStreaming && (\n            <MessageActions \n              message={message}\n              onFeedback={onFeedback}\n            />\n          )}\n        </div>\n      </div>\n    </motion.div>\n  );\n};","/**\n * Demo Mode Context\n * \n * Provides runtime demo mode status throughout the app\n */\n\n'use client';\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\ninterface DemoModeContextType {\n  isRuntimeDemoMode: boolean;\n  deploymentMode: 'demo' | 'production' | null;\n  isInitialized: boolean;\n  isFreeTrialMode: boolean;\n}\n\nconst DemoModeContext = createContext<DemoModeContextType>({\n  isRuntimeDemoMode: false,\n  deploymentMode: null,\n  isInitialized: false,\n  isFreeTrialMode: false,\n});\n\nexport const useDemoModeContext = () => {\n  const context = useContext(DemoModeContext);\n  if (!context) {\n    throw new Error('useDemoModeContext must be used within DemoModeProvider');\n  }\n  return context;\n};\n\ninterface DemoModeContextProviderProps {\n  children: React.ReactNode;\n}\n\nexport function DemoModeContextProvider({ children }: DemoModeContextProviderProps) {\n  const [deploymentMode, setDeploymentMode] = useState<'demo' | 'production' | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isFreeTrialMode, setIsFreeTrialMode] = useState(false);\n\n  useEffect(() => {\n    // Get the runtime deployment mode from localStorage\n    const mode = localStorage.getItem('customgpt.deploymentMode') as 'demo' | 'production' | null;\n    const freeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n    setDeploymentMode(mode);\n    setIsFreeTrialMode(freeTrialFlag === 'true');\n    setIsInitialized(true);\n\n    // Listen for storage changes\n    const handleStorageChange = () => {\n      const newMode = localStorage.getItem('customgpt.deploymentMode') as 'demo' | 'production' | null;\n      const newFreeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n      setDeploymentMode(newMode);\n      setIsFreeTrialMode(newFreeTrialFlag === 'true');\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    \n    // Also listen for custom events for same-window updates\n    window.addEventListener('deploymentModeChanged', handleStorageChange);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('deploymentModeChanged', handleStorageChange);\n    };\n  }, []);\n\n  const value: DemoModeContextType = {\n    isRuntimeDemoMode: deploymentMode === 'demo',\n    deploymentMode,\n    isInitialized,\n    isFreeTrialMode,\n  };\n\n  return (\n    <DemoModeContext.Provider value={value}>\n      {children}\n    </DemoModeContext.Provider>\n  );\n}","/**\n * Loading Components\n * \n * Reusable loading indicators for consistent loading states across the app.\n * Includes spinner, skeleton loaders, and full-page loading states.\n */\n\nimport React from 'react';\nimport { cn } from '@/lib/utils';\nimport { Loader2 } from 'lucide-react';\n\ninterface SpinnerProps {\n  /** Size of the spinner */\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  /** Additional CSS classes */\n  className?: string;\n  /** Label for accessibility */\n  label?: string;\n}\n\n/**\n * Spinner Component\n * \n * Animated spinning loader for inline and overlay loading states\n */\nexport const Spinner: React.FC<SpinnerProps> = ({ \n  size = 'md', \n  className,\n  label = 'Loading...'\n}) => {\n  const sizeClasses = {\n    sm: 'h-4 w-4',\n    md: 'h-6 w-6',\n    lg: 'h-8 w-8',\n    xl: 'h-12 w-12'\n  };\n\n  return (\n    <div className=\"relative inline-flex\">\n      <Loader2 \n        className={cn(\n          'animate-spin text-primary transition-all duration-200',\n          sizeClasses[size],\n          className\n        )}\n        aria-label={label}\n      />\n      {/* Subtle glow effect */}\n      <div className={cn(\n        'absolute inset-0 animate-pulse rounded-full bg-primary/20 blur-xl',\n        sizeClasses[size]\n      )} />\n    </div>\n  );\n};\n\ninterface SkeletonProps {\n  /** Additional CSS classes */\n  className?: string;\n  /** Whether to animate the skeleton */\n  animate?: boolean;\n}\n\n/**\n * Skeleton Component\n * \n * Placeholder loading state for content\n */\nexport const Skeleton: React.FC<SkeletonProps> = ({ \n  className,\n  animate = true\n}) => {\n  return (\n    <div\n      className={cn(\n        'relative overflow-hidden rounded-lg bg-muted',\n        animate && 'shimmer',\n        className\n      )}\n    >\n      {animate && (\n        <div className=\"absolute inset-0 -translate-x-full animate-[shimmer_2s_infinite] bg-gradient-to-r from-transparent via-white/10 to-transparent\" />\n      )}\n    </div>\n  );\n};\n\ninterface LoadingDotsProps {\n  /** Size of the dots */\n  size?: 'sm' | 'md' | 'lg';\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * LoadingDots Component\n * \n * Three animated dots for typing/processing indicators\n */\nexport const LoadingDots: React.FC<LoadingDotsProps> = ({ \n  size = 'md',\n  className \n}) => {\n  const sizeClasses = {\n    sm: 'h-1.5 w-1.5',\n    md: 'h-2 w-2',\n    lg: 'h-2.5 w-2.5'\n  };\n\n  return (\n    <div className={cn('flex items-center space-x-1.5', className)}>\n      {[0, 1, 2].map((index) => (\n        <div\n          key={index}\n          className={cn(\n            'rounded-full bg-primary/60',\n            'animate-[pulse_1.4s_ease-in-out_infinite]',\n            sizeClasses[size]\n          )}\n          style={{\n            animationDelay: `${index * 0.15}s`,\n            animationFillMode: 'both',\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\ninterface LoadingOverlayProps {\n  /** Whether the overlay is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Whether to blur the background */\n  blur?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * LoadingOverlay Component\n * \n * Full-screen or container overlay with loading indicator\n */\nexport const LoadingOverlay: React.FC<LoadingOverlayProps> = ({ \n  visible,\n  message,\n  blur = true,\n  className\n}) => {\n  if (!visible) return null;\n\n  return (\n    <div className={cn(\n      'absolute inset-0 z-50 flex items-center justify-center',\n      'bg-background/60 transition-all duration-300',\n      blur && 'backdrop-blur-md',\n      'animate-in fade-in-0 duration-200',\n      className\n    )}>\n      <div className={cn(\n        'flex flex-col items-center space-y-4 p-6',\n        'bg-background/90 backdrop-blur-sm',\n        'rounded-xl border border-border/50',\n        'shadow-xl',\n        'animate-in zoom-in-95 duration-300'\n      )}>\n        <Spinner size=\"lg\" />\n        {message && (\n          <p className=\"text-sm text-muted-foreground font-medium\">{message}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface MessageSkeletonProps {\n  /** Whether this represents an assistant message */\n  isAssistant?: boolean;\n  /** Number of lines to show */\n  lines?: number;\n}\n\n/**\n * MessageSkeleton Component\n * \n * Skeleton loader specifically for chat messages\n */\nexport const MessageSkeleton: React.FC<MessageSkeletonProps> = ({ \n  isAssistant = false,\n  lines = 3\n}) => {\n  return (\n    <div className={cn(\n      'flex gap-3 p-4',\n      isAssistant ? 'bg-muted' : 'bg-background'\n    )}>\n      {/* Avatar */}\n      <Skeleton className=\"h-8 w-8 rounded-full flex-shrink-0\" />\n      \n      {/* Message content */}\n      <div className=\"flex-1 space-y-2\">\n        {Array.from({ length: lines }).map((_, i) => (\n          <Skeleton \n            key={i}\n            className={cn(\n              'h-4',\n              i === lines - 1 ? 'w-3/4' : 'w-full'\n            )}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\ninterface ConversationSkeletonProps {\n  /** Number of conversation items to show */\n  count?: number;\n}\n\n/**\n * ConversationSkeleton Component\n * \n * Skeleton loader for conversation list items\n */\nexport const ConversationSkeleton: React.FC<ConversationSkeletonProps> = ({ \n  count = 3 \n}) => {\n  return (\n    <div className=\"space-y-2 p-2\">\n      {Array.from({ length: count }).map((_, i) => (\n        <div key={i} className=\"p-3 rounded-lg\">\n          <Skeleton className=\"h-4 w-3/4 mb-2\" />\n          <Skeleton className=\"h-3 w-1/2\" />\n        </div>\n      ))}\n    </div>\n  );\n};\n\ninterface LoadingButtonProps {\n  /** Whether the button is in loading state */\n  loading: boolean;\n  /** Button content when not loading */\n  children: React.ReactNode;\n  /** Loading text to display */\n  loadingText?: string;\n  /** Additional CSS classes */\n  className?: string;\n  /** Other button props */\n  [key: string]: any;\n}\n\n/**\n * LoadingButton Component\n * \n * Button with integrated loading state\n */\nexport const LoadingButton: React.FC<LoadingButtonProps> = ({ \n  loading,\n  children,\n  loadingText = 'Loading...',\n  className,\n  disabled,\n  ...props\n}) => {\n  return (\n    <button\n      className={cn(\n        'relative',\n        loading && 'cursor-not-allowed opacity-70',\n        className\n      )}\n      disabled={disabled || loading}\n      {...props}\n    >\n      {loading ? (\n        <span className=\"flex items-center justify-center gap-2\">\n          <Spinner size=\"sm\" />\n          <span>{loadingText}</span>\n        </span>\n      ) : (\n        children\n      )}\n    </button>\n  );\n};\n\ninterface ScreenLoadingProps {\n  /** Whether the screen loading is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Optional icon to show with the loading message */\n  icon?: React.ReactNode;\n  /** Background opacity (0-100) */\n  opacity?: number;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * ScreenLoading Component\n * \n * Full-screen loading overlay for page/screen transitions\n * with customizable message and icon\n */\nexport const ScreenLoading: React.FC<ScreenLoadingProps> = ({\n  visible,\n  message = 'Loading...',\n  icon,\n  opacity = 95,\n  className\n}) => {\n  if (!visible) return null;\n\n  return (\n    <div className={cn(\n      'fixed inset-0 z-[100] flex items-center justify-center',\n      'bg-background/90 backdrop-blur-lg',\n      'transition-all duration-500',\n      'animate-in fade-in-0',\n      className\n    )}>\n      <div className={cn(\n        'flex flex-col items-center space-y-6 p-10',\n        'animate-in zoom-in-95 slide-in-from-bottom-4 duration-500'\n      )}>\n        <div className=\"relative\">\n          {icon ? (\n            <div className={cn(\n              'flex items-center justify-center w-20 h-20',\n              'bg-primary/10 rounded-2xl',\n              'shadow-lg shadow-primary/20',\n              'animate-pulse'\n            )}>\n              {icon}\n            </div>\n          ) : (\n            <Spinner size=\"xl\" />\n          )}\n        </div>\n        {message && (\n          <div className=\"text-center space-y-2\">\n            <p className=\"text-lg font-semibold text-foreground\">{message}</p>\n            <LoadingDots size=\"md\" />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface PageLoadingProps {\n  /** Whether the page loading is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Show skeleton content instead of spinner */\n  showSkeleton?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * PageLoading Component\n * \n * In-page loading state for content areas\n * with optional skeleton loading\n */\nexport const PageLoading: React.FC<PageLoadingProps> = ({\n  visible,\n  message = 'Loading page...',\n  showSkeleton = false,\n  className\n}) => {\n  if (!visible) return null;\n\n  if (showSkeleton) {\n    return (\n      <div className={cn('space-y-4 p-6', className)}>\n        <div className=\"space-y-3\">\n          <Skeleton className=\"h-8 w-1/3\" />\n          <Skeleton className=\"h-4 w-2/3\" />\n          <Skeleton className=\"h-4 w-1/2\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <div key={i} className=\"space-y-3\">\n              <Skeleton className=\"h-32 w-full rounded-lg\" />\n              <Skeleton className=\"h-4 w-3/4\" />\n              <Skeleton className=\"h-3 w-1/2\" />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\n      'flex flex-col items-center justify-center p-12',\n      className\n    )}>\n      <Spinner size=\"lg\" />\n      <p className=\"mt-4 text-gray-600\">{message}</p>\n    </div>\n  );\n};","\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 6, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden\",\n        \"rounded-lg px-3.5 py-2\",\n        \"bg-gray-900 dark:bg-gray-100 backdrop-blur-sm\",\n        \"text-xs font-medium text-white dark:text-gray-900\",\n        \"shadow-lg shadow-black/20\",\n        \"border border-gray-800 dark:border-gray-200\",\n        \"animate-in fade-in-0 zoom-in-95\",\n        \"data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95\",\n        \"data-[side=bottom]:slide-in-from-top-2\",\n        \"data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2\",\n        \"data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    >\n      {props.children}\n      <TooltipPrimitive.Arrow \n        className=\"fill-gray-900 dark:fill-gray-100\"\n        width={8}\n        height={4}\n      />\n    </TooltipPrimitive.Content>\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }","'use client';\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport { Mic, MicOff, Loader2 } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n\ninterface SpeechToTextButtonProps {\n  onTranscription: (text: string) => void;\n  onTranscriptionStart?: () => void;\n  onTranscriptionEnd?: () => void;\n  disabled?: boolean;\n  isMobile?: boolean;\n  className?: string;\n}\n\nexport function SpeechToTextButton({ \n  onTranscription, \n  onTranscriptionStart,\n  onTranscriptionEnd,\n  disabled = false, \n  isMobile = false,\n  className \n}: SpeechToTextButtonProps) {\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [recordingDuration, setRecordingDuration] = useState(0);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n  const recordingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const durationIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const stopRecording = useCallback(() => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      // Don't call onTranscriptionEnd here - let processAudio handle it\n      \n      if (recordingTimeoutRef.current) {\n        clearTimeout(recordingTimeoutRef.current);\n        recordingTimeoutRef.current = null;\n      }\n      \n      if (durationIntervalRef.current) {\n        clearInterval(durationIntervalRef.current);\n        durationIntervalRef.current = null;\n      }\n      \n      setRecordingDuration(0);\n    }\n  }, []);\n\n  const startRecording = useCallback(async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      \n      const mimeType = MediaRecorder.isTypeSupported('audio/webm') \n        ? 'audio/webm' \n        : 'audio/mp4';\n      \n      const mediaRecorder = new MediaRecorder(stream, { mimeType });\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = async () => {\n        const audioBlob = new Blob(audioChunksRef.current, { type: mimeType });\n        stream.getTracks().forEach(track => track.stop());\n        \n        // Process the audio\n        await processAudio(audioBlob);\n      };\n\n      mediaRecorder.start();\n      setIsRecording(true);\n      onTranscriptionStart?.();\n      \n      // Start duration timer\n      const startTime = Date.now();\n      durationIntervalRef.current = setInterval(() => {\n        const elapsed = Math.floor((Date.now() - startTime) / 1000);\n        setRecordingDuration(elapsed);\n      }, 100) as any;\n\n      // Auto-stop recording after 30 seconds\n      recordingTimeoutRef.current = setTimeout(() => {\n        stopRecording();\n        toast.info('Recording stopped after 30 seconds');\n      }, 30000);\n\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      toast.error('Unable to access microphone. Please check your permissions.');\n      onTranscriptionEnd?.();\n    }\n  }, [stopRecording, onTranscriptionStart, onTranscriptionEnd]);\n\n  const processAudio = async (audioBlob: Blob) => {\n    setIsProcessing(true);\n\n    try {\n      // Convert blob to base64 for sending\n      const reader = new FileReader();\n      reader.readAsDataURL(audioBlob);\n      \n      reader.onloadend = async () => {\n        const base64Audio = reader.result as string;\n        const base64Data = base64Audio.split(',')[1];\n\n        // Check for demo mode and add appropriate headers\n        const headers: Record<string, string> = {\n          'Content-Type': 'application/json',\n        };\n        \n        // Add deployment mode header\n        const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n        headers['X-Deployment-Mode'] = deploymentMode;\n        \n        // In demo mode, add OpenAI key from window object if available\n        if (deploymentMode === 'demo' && (window as any).__demoOpenAIKey) {\n          headers['X-OpenAI-API-Key'] = (window as any).__demoOpenAIKey;\n        }\n\n        const response = await fetch('/api/proxy/voice/transcribe', {\n          method: 'POST',\n          headers,\n          body: JSON.stringify({\n            audio: base64Data,\n            mimeType: audioBlob.type,\n          }),\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({ error: 'Transcription failed' }));\n          \n          // Check if it's an OpenAI API key error\n          if (response.status === 500 && errorData.error && errorData.error.includes('OpenAI API key')) {\n            toast.error(errorData.error);\n            throw new Error('OpenAI API key not configured');\n          }\n          \n          throw new Error(errorData.error || 'Transcription failed');\n        }\n\n        const data = await response.json();\n        \n        if (data.text) {\n          onTranscription(data.text);\n          toast.success('Speech transcribed successfully');\n        } else {\n          throw new Error('No transcription received');\n        }\n      };\n\n      reader.onerror = () => {\n        throw new Error('Failed to process audio');\n      };\n\n    } catch (error) {\n      console.error('Transcription error:', error);\n      \n      // Don't show duplicate toast for OpenAI API key error\n      if (error instanceof Error && error.message === 'OpenAI API key not configured') {\n        // Toast already shown above\n      } else if (error instanceof Error && error.message) {\n        toast.error(error.message);\n      } else {\n        toast.error('Failed to transcribe speech. Please try again.');\n      }\n    } finally {\n      setIsProcessing(false);\n      onTranscriptionEnd?.();\n    }\n  };\n\n  const handleClick = () => {\n    if (isRecording) {\n      stopRecording();\n    } else {\n      startRecording();\n    }\n  };\n\n  const isActive = isRecording || isProcessing;\n\n  // Format duration as MM:SS\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button\n            type=\"button\"\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={handleClick}\n            disabled={disabled || isProcessing}\n            className={cn(\n              \"relative text-muted-foreground hover:text-foreground transition-all\",\n              isActive && \"text-red-600 hover:text-red-700\",\n              isRecording && \"animate-pulse bg-red-50 hover:bg-red-100\",\n              className\n            )}\n          >\n            {isProcessing ? (\n              <div className=\"relative\">\n                <Loader2 className={cn(\n                  \"animate-spin\",\n                  isMobile ? \"h-5 w-5\" : \"h-5 w-5\"\n                )} />\n                <span className=\"absolute -bottom-5 left-1/2 -translate-x-1/2 text-[10px] text-muted-foreground whitespace-nowrap\">\n                  Processing...\n                </span>\n              </div>\n            ) : isRecording ? (\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 bg-red-500 rounded-full animate-ping opacity-25\" />\n                <MicOff className={cn(\n                  \"relative z-10\",\n                  isMobile ? \"h-5 w-5\" : \"h-5 w-5\"\n                )} />\n                {/* Recording duration */}\n                {recordingDuration > 0 && (\n                  <span className=\"absolute -bottom-5 left-1/2 -translate-x-1/2 text-[10px] text-red-600 font-medium whitespace-nowrap\">\n                    {formatDuration(recordingDuration)}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <Mic className={cn(isMobile ? \"h-5 w-5\" : \"h-5 w-5\")} />\n            )}\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p>\n            {isProcessing ? 'Processing your speech...' : isRecording ? `Recording... ${formatDuration(recordingDuration)}` : 'Click to start speech-to-text'}\n          </p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}","'use client';\n\nimport React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface AnimatedVoiceIconProps {\n  className?: string;\n  isActive?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nexport function AnimatedVoiceIcon({ \n  className, \n  isActive = false,\n  size = 'md' \n}: AnimatedVoiceIconProps) {\n  const sizeClasses = {\n    sm: 'w-5 h-5',\n    md: 'w-6 h-6',\n    lg: 'w-7 h-7'\n  };\n\n  const barHeights = {\n    sm: ['h-2', 'h-3', 'h-2.5', 'h-3', 'h-2'],\n    md: ['h-3', 'h-4', 'h-3.5', 'h-4', 'h-3'],\n    lg: ['h-3.5', 'h-5', 'h-4.5', 'h-5', 'h-3.5']\n  };\n\n  const bars = size === 'sm' ? barHeights.sm : size === 'md' ? barHeights.md : barHeights.lg;\n\n  return (\n    <div className={cn(\n      'flex items-center justify-center',\n      sizeClasses[size],\n      className\n    )}\n    style={{ gap: '2px' }}>\n      {bars.map((height, index) => (\n        <div\n          key={index}\n          className={cn(\n            'rounded-full transition-all duration-300',\n            height,\n            isActive && 'animate-voice-pulse'\n          )}\n          style={{\n            width: size === 'lg' ? '3px' : size === 'md' ? '2.5px' : '2px',\n            animationDelay: isActive ? `${index * 100}ms` : '0ms',\n            background: isActive \n              ? `linear-gradient(to top, \n                  hsl(${260 + index * 20}, 85%, 55%), \n                  hsl(${320 + index * 20}, 85%, 65%))` \n              : `linear-gradient(to top,\n                  hsl(${260 + index * 15}, 80%, 55%),\n                  hsl(${280 + index * 15}, 80%, 65%))`\n          }}\n        />\n      ))}\n    </div>\n  );\n}","\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-pointer select-none items-center\",\n      \"rounded-md px-3 py-2 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4 transition-transform duration-200 data-[state=open]:rotate-90\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden\",\n      \"rounded-lg border border-gray-200/50 dark:border-gray-800/30\",\n      \"bg-background/95 backdrop-blur-md\",\n      \"p-1.5 text-foreground\",\n      \"shadow-lg shadow-black/10\",\n      \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n      \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n      \"data-[side=bottom]:slide-in-from-top-2\",\n      \"data-[side=left]:slide-in-from-right-2\",\n      \"data-[side=right]:slide-in-from-left-2\",\n      \"data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 6, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden\",\n        \"rounded-lg border border-gray-200/50 dark:border-gray-800/30\",\n        \"bg-background/95 backdrop-blur-md\",\n        \"p-1.5 text-foreground\",\n        \"shadow-lg shadow-black/10\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n        \"data-[side=bottom]:slide-in-from-top-2\",\n        \"data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2\",\n        \"data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer select-none items-center\",\n      \"rounded-md px-3 py-2 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground hover:scale-[0.98]\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      \"active:scale-[0.96]\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer select-none items-center\",\n      \"rounded-md py-2 pl-8 pr-3 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-4 w-4 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-3.5 w-3.5 animate-in zoom-in-0 duration-200\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer select-none items-center\",\n      \"rounded-md py-2 pl-8 pr-3 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-4 w-4 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2.5 w-2.5 fill-current animate-in zoom-in-0 duration-200\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-3 py-2 text-xs font-semibold\",\n      \"text-muted-foreground uppercase tracking-wider\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\n      \"-mx-1.5 my-1.5 h-px\",\n      \"bg-gradient-to-r from-transparent via-gray-200/50 dark:via-gray-800/20 to-transparent\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-[10px] tracking-widest\",\n        \"text-muted-foreground/70\",\n        \"font-medium uppercase\",\n        \"px-1.5 py-0.5 rounded\",\n        \"bg-muted/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}","/**\n * ChatInput Component\n * \n * Rich input field for sending messages and uploading files.\n * \n * Features:\n * - Auto-expanding textarea (up to 200px height)\n * - File upload with drag-and-drop support\n * - Speech-to-text transcription using OpenAI Whisper\n * - File type and size validation\n * - Progress tracking for uploads\n * - Character count display\n * - Keyboard shortcuts (Enter to send, Shift+Enter for newline)\n * - Animated file chips and drag overlay\n * \n * Customization:\n * - Modify CONSTANTS in utils for file limits\n * - Adjust max textarea height (line 144)\n * - Customize accepted file types\n * - Style the drag overlay and file chips\n */\n\n'use client';\n\nimport React, { useState, useRef, useCallback, KeyboardEvent, FormEvent, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Send, \n  Paperclip, \n  X,\n  Upload,\n  AlertCircle,\n  ChevronDown,\n  Settings,\n  Sparkles,\n  Brain,\n  Zap,\n  MessageSquare,\n  User,\n  Bot,\n  SlidersHorizontal\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { InputProps, FileUpload, AgentSettings } from '@/types';\nimport { useDemoModeContext } from '@/contexts/DemoModeContext';\nimport { cn, formatFileSize, getFileIcon, isFileTypeAllowed, generateId, CONSTANTS } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Spinner } from '@/components/ui/loading';\nimport { SpeechToTextButton } from '@/components/voice/SpeechToTextButton';\nimport { AnimatedVoiceIcon } from '@/components/voice/AnimatedVoiceIcon';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n  DropdownMenuLabel,\n} from '@/components/ui/dropdown-menu';\nimport { useAgentStore } from '@/store/agents';\nimport { useChatSettingsStore } from '@/store/chat-settings';\nimport { getClient } from '@/lib/api/client';\n\ninterface FileChipProps {\n  /** File upload object with metadata */\n  file: FileUpload;\n  /** Handler to remove this file */\n  onRemove: () => void;\n}\n\n/**\n * FileChip Component\n * \n * Displays an uploaded or uploading file with:\n * - File icon based on type\n * - Name and size\n * - Upload progress bar\n * - Remove button\n * - Error state indication\n */\nconst FileChip: React.FC<FileChipProps> = ({ file, onRemove }) => {\n  const fileIcon = getFileIcon(file.type);\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"flex items-center gap-2 px-3 py-1.5 bg-muted hover:bg-accent rounded-lg transition-colors\"\n    >\n      <div className=\"text-muted-foreground\">{fileIcon}</div>\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"text-sm font-medium text-foreground truncate\">\n          {file.name}\n        </div>\n        <div className=\"text-xs text-muted-foreground flex items-center gap-2\">\n          <span>{formatFileSize(file.size)}</span>\n          {file.status === 'uploading' && (\n            <>\n              <span>•</span>\n              <span>{file.progress}%</span>\n            </>\n          )}\n          {file.status === 'error' && (\n            <>\n              <span>•</span>\n              <span className=\"text-destructive flex items-center gap-1\">\n                <AlertCircle className=\"w-3 h-3\" />\n                Error\n              </span>\n            </>\n          )}\n        </div>\n      </div>\n      \n      {/* Progress Bar */}\n      {file.status === 'uploading' && (\n        <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-muted rounded-b\">\n          <div \n            className=\"h-full bg-brand-500 rounded-b transition-all duration-300\"\n            style={{ width: `${file.progress}%` }}\n          />\n        </div>\n      )}\n      \n      <button\n        onClick={onRemove}\n        className=\"p-0.5 rounded hover:bg-accent-foreground/20 transition-colors\"\n        disabled={file.status === 'uploading'}\n      >\n        <X className=\"w-3 h-3 text-muted-foreground\" />\n      </button>\n    </motion.div>\n  );\n};\n\n\n/**\n * FileUploadButton Component\n * \n * Hidden file input with visible button trigger.\n * Accepts multiple files based on ACCEPTED_FILE_TYPES.\n */\ninterface FileUploadButtonProps {\n  /** Handler called when files are selected */\n  onUpload: (files: File[]) => void;\n  /** Whether the button is disabled */\n  disabled?: boolean;\n  /** Mobile optimization mode */\n  isMobile?: boolean;\n}\n\nconst FileUploadButton: React.FC<FileUploadButtonProps> = ({ onUpload, disabled, isMobile = false }) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    if (files.length > 0) {\n      onUpload(files);\n      e.target.value = '';\n    }\n  };\n  \n  return (\n    <>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept={CONSTANTS.ACCEPTED_FILE_TYPES.join(',')}\n        onChange={handleChange}\n        className=\"hidden\"\n      />\n      <Button\n        type=\"button\"\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleClick}\n        disabled={disabled}\n        className={cn(\n          \"text-muted-foreground hover:text-foreground relative z-10\",\n          isMobile ? \"h-10 w-10 min-w-[40px]\" : \"h-9 w-9\"\n        )}\n        title=\"Upload files\"\n      >\n        <Paperclip className={cn(isMobile ? \"h-5 w-5\" : \"h-4 w-4\")} />\n      </Button>\n    </>\n  );\n};\n\n// Configuration options\nconst RESPONSE_SOURCES = [\n  { value: 'own_content', label: 'Content', description: 'Uses only your uploaded content', icon: MessageSquare },\n  { value: 'openai_content', label: 'AI + Content', description: 'Combines AI knowledge with your content', icon: Brain },\n  { value: 'default', label: 'Default', description: 'Uses the default agent setting', icon: Settings },\n] as const;\n\nconst CHATBOT_MODELS = [\n  { value: 'gpt-4-o', label: 'GPT-4', description: 'Most capable model', icon: Brain, capabilities: ['optimal-choice', 'advanced-reasoning', 'complex-tasks'] },\n  { value: 'gpt-4-1', label: 'GPT-4.1', description: 'Latest GPT-4 version', icon: Sparkles, capabilities: ['optimal-choice', 'advanced-reasoning', 'complex-tasks'] },\n  { value: 'gpt-4o-mini', label: 'GPT-4 Mini', description: 'Faster, good for most tasks', icon: Zap, capabilities: ['fastest-responses', 'optimal-choice'] },\n  { value: 'gpt-4-1-mini', label: 'GPT-4.1 Mini', description: 'Fast and efficient', icon: Zap, capabilities: ['fastest-responses', 'optimal-choice'] },\n  { value: 'claude-3-sonnet', label: 'Claude 3', description: 'Balanced performance', icon: Brain, capabilities: ['optimal-choice', 'advanced-reasoning'] },\n  { value: 'claude-3.5-sonnet', label: 'Claude 3.5', description: 'Advanced reasoning', icon: Sparkles, capabilities: ['optimal-choice', 'advanced-reasoning', 'complex-tasks'] },\n] as const;\n\nconst COMMON_PERSONAS = [\n  { value: 'professional', label: 'Professional', description: 'Formal responses', icon: Bot },\n  { value: 'friendly', label: 'Friendly', description: 'Conversational tone', icon: User },\n  { value: 'technical', label: 'Technical', description: 'Technical explanations', icon: Brain },\n  { value: 'creative', label: 'Creative', description: 'Imaginative responses', icon: Sparkles },\n  { value: 'educator', label: 'Teacher', description: 'Step-by-step guidance', icon: Bot },\n  { value: 'custom', label: 'Custom', description: 'Your own instructions', icon: Settings },\n] as const;\n\nconst AGENT_CAPABILITIES = [\n  { value: 'fastest-responses', label: 'Fastest', description: 'Quick answers', icon: Zap, enterprise: true },\n  { value: 'optimal-choice', label: 'Optimal', description: 'Balanced', icon: Settings, enterprise: false },\n  { value: 'advanced-reasoning', label: 'Advanced', description: 'Complex tasks', icon: Brain, enterprise: true },\n  { value: 'complex-tasks', label: 'Complex Reasoning', description: 'Highest quality', icon: Sparkles, enterprise: true },\n] as const;\n\n/**\n * ChatInput Component - Main Export\n * \n * Complete chat input with message composition and file upload.\n * \n * Props:\n * @param onSend - Handler called with message content and files\n * @param disabled - Disables input during message sending\n * @param placeholder - Placeholder text for the textarea\n * @param maxLength - Maximum message length (default from CONSTANTS)\n * @param className - Additional CSS classes\n * @param onVoiceClick - Handler for voice mode button click\n * \n * State Management:\n * - input: Current message text\n * - files: Array of uploaded/uploading files\n * - isDragOver: Drag-and-drop state\n * \n * @example\n * <ChatInput \n *   onSend={(message, files) => handleSend(message, files)}\n *   disabled={isLoading}\n *   onVoiceClick={() => setVoiceModalOpen(true)}\n * />\n */\nexport const ChatInput: React.FC<InputProps> = ({ \n  onSend,\n  disabled = false,\n  placeholder = \"Send a message...\",\n  maxLength = CONSTANTS.MAX_MESSAGE_LENGTH,\n  className,\n  onVoiceClick,\n  isMobile = false\n}) => {\n  const [input, setInput] = useState('');\n  const [files, setFiles] = useState<FileUpload[]>([]);\n  const [isTranscribing, setIsTranscribing] = useState(false);\n  const [isLoadingSettings, setIsLoadingSettings] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \n  // Get free trial mode status\n  const { isFreeTrialMode } = useDemoModeContext();\n  \n  // Get stores\n  const { currentAgent } = useAgentStore();\n  const { getSettings, updateSettings: updateLocalSettings } = useChatSettingsStore();\n  \n  // Get settings for current agent\n  const settings = currentAgent?.id ? getSettings(currentAgent.id) : {\n    response_source: 'own_content',\n    chatbot_model: 'gpt-4-o',\n    custom_persona: 'professional',\n    agent_capability: 'optimal-choice',\n  };\n  \n  const loadAgentSettings = useCallback(async () => {\n    if (!currentAgent?.id) return;\n\n    try {\n      const client = getClient();\n      const response = await client.getAgentSettings(currentAgent.id);\n      \n      if (response?.data) {\n        const loadedSettings = {\n          response_source: response.data.response_source || 'own_content',\n          chatbot_model: response.data.chatbot_model || 'gpt-4-o',\n          custom_persona: response.data.custom_persona || 'professional',\n          agent_capability: response.data.agent_capability || 'optimal-choice',\n        };\n        updateLocalSettings(currentAgent.id, loadedSettings);\n      }\n    } catch (error) {\n      console.error('Failed to load agent settings:', error);\n    }\n  }, [currentAgent?.id, updateLocalSettings]);\n\n  // Load settings when agent changes\n  useEffect(() => {\n    if (currentAgent?.id) {\n      loadAgentSettings();\n    }\n  }, [currentAgent?.id, loadAgentSettings]);\n\n  const updateSetting = async (key: keyof AgentSettings, value: string) => {\n    if (!currentAgent?.id) return;\n\n    setIsLoadingSettings(true);\n    try {\n      const client = getClient();\n      let updates: Partial<AgentSettings> = { [key]: value };\n      \n      // If changing capability, check if current model is still valid\n      if (key === 'agent_capability') {\n        const validModels = CHATBOT_MODELS.filter(m => m.capabilities.includes(value as any));\n        const currentModelValid = validModels.some(m => m.value === settings.chatbot_model);\n        \n        if (!currentModelValid && validModels.length > 0) {\n          // Switch to first available model for new capability\n          updates.chatbot_model = validModels[0].value;\n          toast.info(`Model changed to ${validModels[0].label} for ${AGENT_CAPABILITIES.find(c => c.value === value)?.label} mode`);\n        }\n      }\n      \n      await client.updateAgentSettings(currentAgent.id, updates);\n      updateLocalSettings(currentAgent.id, updates);\n      toast.success('Setting updated successfully');\n    } catch (error) {\n      console.error('Failed to update setting:', error);\n      toast.error('Failed to update setting');\n    } finally {\n      setIsLoadingSettings(false);\n    }\n  };\n  \n  /**\n   * Auto-resize textarea based on content\n   * Grows up to maxHeight (200px) then scrolls\n   */\n  const adjustTextareaHeight = useCallback(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      const scrollHeight = textarea.scrollHeight;\n      const maxHeight = 200; // Max height in pixels - customize as needed\n      textarea.style.height = `${Math.min(scrollHeight, maxHeight)}px`;\n    }\n  }, []);\n  \n  // Handle text input changes\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    if (value.length <= maxLength) {\n      setInput(value);\n      adjustTextareaHeight();\n    }\n  };\n  \n  // Handle key presses\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e as any);\n    }\n  };\n  \n  // Handle form submission\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    \n    if (disabled) return;\n    if (!input.trim() && files.length === 0) return;\n    \n    // Convert FileUpload objects to File objects\n    const fileObjects = files\n      .filter(f => f.status === 'uploaded')\n      .map(f => f.file); // Use the actual File object\n    \n    onSend(input.trim(), fileObjects);\n    \n    // Reset form\n    setInput('');\n    setFiles([]);\n    \n    // Reset textarea height\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n    }\n    \n    // Focus textarea\n    setTimeout(() => {\n      textareaRef.current?.focus();\n    }, 0);\n  };\n  \n  /**\n   * Handle file uploads with validation\n   * Checks file size and type before accepting\n   * Shows toast notifications for validation errors\n   */\n  const handleFileUpload = useCallback((newFiles: File[]) => {\n    const validFiles = newFiles.filter(file => {\n      // Check file size against MAX_FILE_SIZE constant\n      if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n        toast.error(`File \"${file.name}\" is too large. Maximum size is ${formatFileSize(CONSTANTS.MAX_FILE_SIZE)}`);\n        return false;\n      }\n      \n      // Check file type against ACCEPTED_FILE_TYPES\n      if (!isFileTypeAllowed(file.type, CONSTANTS.ACCEPTED_FILE_TYPES)) {\n        toast.error(`File type \"${file.type}\" is not supported`);\n        return false;\n      }\n      \n      return true;\n    });\n    \n    const uploadFiles: FileUpload[] = validFiles.map(file => ({\n      id: generateId(),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      status: 'uploading',\n      progress: 0,\n      file: file, // Store the actual File object\n    }));\n    \n    setFiles(prev => [...prev, ...uploadFiles]);\n    \n    // Simulate file upload\n    uploadFiles.forEach(uploadFile => {\n      simulateUpload(uploadFile);\n    });\n    \n  }, []);\n  \n  /**\n   * Simulate file upload progress\n   * In production, replace with actual upload logic\n   * Updates progress in 100ms intervals\n   */\n  const simulateUpload = (uploadFile: FileUpload) => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 20;\n      \n      if (progress >= 100) {\n        progress = 100;\n        clearInterval(interval);\n        \n        // Mark file as uploaded\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, status: 'uploaded' as const, progress: 100 }\n            : f\n        ));\n      } else {\n        // Update progress\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, progress: Math.round(progress) }\n            : f\n        ));\n      }\n    }, 100);\n  };\n  \n  // Remove file\n  const removeFile = (fileId: string) => {\n    setFiles(prev => prev.filter(f => f.id !== fileId));\n  };\n  \n  /**\n   * Dropzone configuration for drag-and-drop\n   * - Accepts files based on ACCEPTED_FILE_TYPES\n   * - Validates file size\n   * - Shows overlay on drag\n   * - Disabled click/keyboard to use custom button\n   */\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: handleFileUpload,\n    noClick: true, // Use custom button instead\n    noKeyboard: true,\n    accept: CONSTANTS.ACCEPTED_FILE_TYPES.reduce((acc, type) => {\n      acc[type] = [];\n      return acc;\n    }, {} as Record<string, string[]>),\n    maxSize: CONSTANTS.MAX_FILE_SIZE,\n  });\n  \n  const canSend = !disabled && (input.trim() || files.some(f => f.status === 'uploaded'));\n  \n  // Handle speech-to-text transcription\n  const handleTranscription = useCallback((text: string) => {\n    setInput(prevInput => {\n      const newInput = prevInput ? `${prevInput} ${text}` : text;\n      return newInput.length <= maxLength ? newInput : prevInput;\n    });\n    \n    // Adjust textarea height after updating text\n    setTimeout(() => {\n      adjustTextareaHeight();\n    }, 0);\n  }, [maxLength, adjustTextareaHeight]);\n  \n  // Handle transcription start\n  const handleTranscriptionStart = useCallback(() => {\n    setIsTranscribing(true);\n  }, []);\n  \n  // Handle transcription end\n  const handleTranscriptionEnd = useCallback(() => {\n    setIsTranscribing(false);\n  }, []);\n  \n  return (\n    <div \n      {...getRootProps()}\n      className={cn(\n        'relative',\n        isDragActive && 'bg-brand-50',\n        className\n      )}\n    >\n      <input {...getInputProps()} />\n      \n      {/* Drag Overlay */}\n      <AnimatePresence>\n        {isDragActive && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-brand-50 border-2 border-dashed border-brand-300 rounded-lg flex items-center justify-center z-10\"\n          >\n            <div className=\"text-center\">\n              <Upload className=\"w-8 h-8 text-brand-600 mx-auto mb-2\" />\n              <p className=\"text-brand-700 font-medium\">Drop files here to upload</p>\n              <p className=\"text-brand-600 text-sm\">\n                Supports PDF, DOC, TXT, and more\n              </p>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* File Preview */}\n      <AnimatePresence>\n        {files.length > 0 && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"px-4 pt-3 pb-2 flex flex-wrap gap-2\"\n          >\n            {files.map((file) => (\n              <FileChip\n                key={file.id}\n                file={file}\n                onRemove={() => removeFile(file.id)}\n              />\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* Main Input Container */}\n      <div className={cn(\n        \"mx-4 my-3 bg-background border border-border rounded-2xl shadow-sm\",\n        \"focus-within:ring-2 focus-within:ring-brand-500 focus-within:border-transparent transition-all\"\n      )}>\n        {/* Text Input Area */}\n        <form onSubmit={handleSubmit} className=\"relative\">\n          <div className=\"flex items-center p-3 pb-1\">\n            {/* File Upload Button - Hidden in free trial mode */}\n            {!isFreeTrialMode && (\n              <FileUploadButton\n                onUpload={handleFileUpload}\n                disabled={disabled}\n                isMobile={isMobile}\n              />\n            )}\n            \n            {/* Speech to Text Button */}\n            <SpeechToTextButton\n              onTranscription={handleTranscription}\n              onTranscriptionStart={handleTranscriptionStart}\n              onTranscriptionEnd={handleTranscriptionEnd}\n              disabled={disabled}\n              isMobile={isMobile}\n              className={cn(\n                \"!h-8 !w-8 !min-w-0 mr-2\",\n                isMobile && \"!h-9 !w-9\"\n              )}\n            />\n            \n            {/* Textarea */}\n            <div className=\"flex-1 relative\">\n              <textarea\n                ref={textareaRef}\n                value={input}\n                onChange={handleInputChange}\n                onKeyDown={handleKeyDown}\n                placeholder={isTranscribing ? '' : placeholder}\n                disabled={disabled}\n                rows={1}\n                className={cn(\n                  'w-full resize-none bg-transparent border-0',\n                  'focus:outline-none focus:ring-0',\n                  'disabled:opacity-50 disabled:cursor-not-allowed',\n                  'placeholder:text-muted-foreground text-foreground',\n                  isMobile \n                    ? 'text-base min-h-[24px] max-h-[120px] placeholder:text-sm' \n                    : 'text-sm min-h-[20px] max-h-[200px]'\n                )}\n                style={{\n                  height: 'auto',\n                  overflowY: input.split('\\n').length > 5 ? 'auto' : 'hidden',\n                }}\n              />\n              \n              {/* Transcribing Animation */}\n              {isTranscribing && !input && (\n                <div className=\"absolute top-0 left-0 right-0 bottom-0 flex items-center pointer-events-none\">\n                  <span className={cn(\n                    \"text-muted-foreground animate-pulse\",\n                    isMobile ? \"text-base\" : \"text-sm\"\n                  )}>\n                    Transcribing\n                    <span className=\"inline-flex\">\n                      <span className=\"animate-bounce\" style={{ animationDelay: '0ms' }}>.</span>\n                      <span className=\"animate-bounce\" style={{ animationDelay: '150ms' }}>.</span>\n                      <span className=\"animate-bounce\" style={{ animationDelay: '300ms' }}>.</span>\n                    </span>\n                  </span>\n                </div>\n              )}\n            </div>\n            \n            {/* Character Count */}\n            {input.length > 0 && (\n              <div className={cn(\n                \"text-xs text-muted-foreground mr-2\",\n                isMobile ? \"text-xs\" : \"text-xs\"\n              )}>\n                {input.length}/{maxLength}\n              </div>\n            )}\n            \n            {/* Action Buttons */}\n            <div className=\"flex items-center gap-1\">\n              {/* Voice Button */}\n              {onVoiceClick && (\n                <Button\n                  type=\"button\"\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={onVoiceClick}\n                  disabled={disabled}\n                  className={cn(\n                    'relative group transition-all duration-200',\n                    'bg-gradient-to-br from-purple-500/10 to-pink-500/10',\n                    'hover:from-purple-500/20 hover:to-pink-500/20',\n                    'border border-purple-500/20 hover:border-purple-500/40',\n                    'shadow-sm hover:shadow-md',\n                    isMobile ? 'h-10 w-10' : 'h-9 w-9'\n                  )}\n                  title=\"Voice mode\"\n                >\n                  <div className=\"absolute inset-0 rounded-md bg-gradient-to-br from-purple-600/5 to-pink-600/5 opacity-0 group-hover:opacity-100 transition-opacity\" />\n                  <AnimatedVoiceIcon \n                    size={isMobile ? 'lg' : 'md'} \n                    isActive={false}\n                    className=\"relative z-10\"\n                  />\n                </Button>\n              )}\n              \n              {/* Send Button */}\n              <Button\n                type=\"submit\"\n                size=\"icon\"\n                disabled={!canSend}\n                className={cn(\n                  'transition-all duration-200 group',\n                  'bg-brand-500 hover:bg-brand-600 active:bg-brand-700',\n                  'text-white shadow-sm hover:shadow-md',\n                  'disabled:opacity-50 disabled:cursor-not-allowed',\n                  'disabled:hover:bg-brand-500 disabled:hover:shadow-sm',\n                  isMobile ? 'h-10 w-10' : 'h-9 w-9'\n                )}\n                title={disabled ? 'Sending message...' : 'Send message'}\n              >\n                {disabled ? (\n                  <Spinner size=\"sm\" className=\"text-white\" />\n                ) : (\n                  <Send className={cn(\n                    \"transition-transform duration-200 group-hover:translate-x-0.5 group-hover:-translate-y-0.5\",\n                    isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n                  )} />\n                )}\n              </Button>\n            </div>\n          </div>\n        </form>\n        \n        {/* Settings Toggle Button */}\n        <div className=\"border-t border-gray-200/50 dark:border-gray-800/30\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowSettings(!showSettings)}\n            className={cn(\n              \"flex items-center gap-2 text-xs\",\n              isMobile ? \"w-full justify-center h-9 px-3 py-2\" : \"w-auto justify-start h-8 px-3 py-1.5\",\n              \"hover:bg-accent/50 transition-all duration-200\",\n              showSettings && \"bg-accent/30\"\n            )}\n            title=\"Customize chat settings including response source, AI model, and persona\"\n          >\n            <SlidersHorizontal className={cn(\n              \"transition-colors\",\n              showSettings ? \"text-brand-500\" : \"text-muted-foreground\",\n              isMobile ? \"h-4 w-4\" : \"h-3.5 w-3.5\"\n            )} />\n            <span className={cn(\n              \"font-medium text-muted-foreground\",\n              showSettings && \"text-brand-600\"\n            )}>Customize Chat</span>\n            <ChevronDown className={cn(\n              \"h-3 w-3 opacity-50 transition-transform duration-200\",\n              showSettings && \"rotate-180\"\n            )} />\n          </Button>\n          \n          {/* Expandable Settings Panel */}\n          <AnimatePresence>\n            {showSettings && (\n              <motion.div\n                initial={{ height: 0, opacity: 0 }}\n                animate={{ height: \"auto\", opacity: 1 }}\n                exit={{ height: 0, opacity: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"overflow-hidden bg-accent/20\"\n              >\n                <div className={cn(\n                  \"flex items-center border-t border-gray-200/50 dark:border-gray-800/30\",\n                  isMobile \n                    ? \"justify-between px-2 pb-2 pt-2\" \n                    : \"gap-2 px-3 pb-2.5 pt-2.5\"\n                )}>\n                  {/* Response Source */}\n                  <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-4 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <MessageSquare className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Source</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"start\" className=\"w-64\">\n            <DropdownMenuLabel className=\"text-xs\">RESPONSE SOURCE</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {RESPONSE_SOURCES.map((source) => {\n              const Icon = source.icon;\n              return (\n                <DropdownMenuItem\n                  key={source.value}\n                  onClick={() => updateSetting('response_source', source.value)}\n                  className=\"flex flex-col items-start py-1.5\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Icon className=\"h-3.5 w-3.5\" />\n                    <span className=\"text-sm font-medium\">{source.label}</span>\n                    {settings.response_source === source.value && (\n                      <span className=\"text-xs text-brand-600\">✓</span>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-5\">{source.description}</span>\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Model Selection */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-2 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <Brain className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Model</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"center\" className=\"w-72\">\n            <DropdownMenuLabel className=\"text-xs\">AI MODEL</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {CHATBOT_MODELS\n              .filter((model) => settings.agent_capability && model.capabilities.includes(settings.agent_capability as any))\n              .map((model) => {\n                const Icon = model.icon;\n                return (\n                  <DropdownMenuItem\n                    key={model.value}\n                    onClick={() => updateSetting('chatbot_model', model.value)}\n                    className=\"flex flex-col items-start py-1.5\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <Icon className=\"h-3.5 w-3.5\" />\n                      <span className=\"text-sm font-medium\">{model.label}</span>\n                      {settings.chatbot_model === model.value && (\n                        <span className=\"text-xs text-brand-600\">✓</span>\n                      )}\n                    </div>\n                    <span className=\"text-xs text-muted-foreground ml-5\">{model.description}</span>\n                  </DropdownMenuItem>\n                );\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Persona Selection */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-2 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <User className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Persona</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"center\" className=\"w-64\">\n            <DropdownMenuLabel className=\"text-xs\">ASSISTANT PERSONA</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {COMMON_PERSONAS.map((persona) => {\n              const Icon = persona.icon;\n              return (\n                <DropdownMenuItem\n                  key={persona.value}\n                  onClick={() => updateSetting('custom_persona', persona.value)}\n                  className=\"flex flex-col items-start py-1.5\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Icon className=\"h-3.5 w-3.5\" />\n                    <span className=\"text-sm font-medium\">{persona.label}</span>\n                    {settings.custom_persona === persona.value && (\n                      <span className=\"text-xs text-brand-600\">✓</span>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-5\">{persona.description}</span>\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Agent Capability */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-2 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <Settings className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Mode</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-72\">\n            <DropdownMenuLabel className=\"text-xs\">RESPONSE MODE</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {AGENT_CAPABILITIES.map((capability) => {\n              const Icon = capability.icon;\n              return (\n                <DropdownMenuItem\n                  key={capability.value}\n                  onClick={() => updateSetting('agent_capability', capability.value)}\n                  className=\"flex flex-col items-start py-1.5\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Icon className=\"h-3.5 w-3.5\" />\n                    <span className=\"text-sm font-medium\">{capability.label}</span>\n                    {capability.enterprise && (\n                      <span className=\"text-[10px] bg-muted text-muted-foreground px-1 py-0.5 rounded\">Enterprise only</span>\n                    )}\n                    {settings.agent_capability === capability.value && (\n                      <span className=\"text-xs text-brand-600\">✓</span>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-5\">{capability.description}</span>\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n      \n      {/* Input Hints - Below configuration options */}\n      {!isMobile && (\n        <div className=\"px-4 pb-3 text-xs text-muted-foreground\">\n          <span>Press Enter to send, Shift+Enter for new line</span>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Typing Indicator Component\n * \n * Shows animated typing indicator when AI is generating a response.\n * Provides visual feedback that the system is processing.\n * \n * Features:\n * - Three-dot bouncing animation\n * - AI avatar display\n * - Staggered animation delays\n * - Consistent styling with messages\n * - Subtle bounce effect\n * \n * Animation:\n * - Uses CSS animations defined in globals.css\n * - animate-bounce-subtle class for smooth motion\n * - Staggered delays (0ms, 100ms, 200ms)\n * - Creates wave-like effect\n * \n * Design:\n * - Matches message component layout\n * - Gray background for distinction\n * - Centered in chat container\n * - Responsive max-width\n * \n * Features:\n * - Multiple animation styles for enhanced visual feedback\n * - Contextual status messages for different AI processing states\n * - Progress indicators with time estimation for long operations\n * - Professional avatar customization with brand consistency\n * - Advanced loading patterns including skeleton alternatives\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n/**\n * Props for TypingIndicator\n * \n * @property className - Additional CSS classes for styling\n */\ninterface TypingIndicatorProps {\n  className?: string;\n}\n\n/**\n * Typing Indicator Component\n * \n * Displays animated dots to indicate AI is typing/processing.\n * Maintains visual consistency with message components.\n */\nexport const TypingIndicator: React.FC<TypingIndicatorProps> = ({ className }) => {\n  return (\n    <div className={cn(\n      'px-4 py-6 bg-muted border-y border-border',\n      className\n    )}>\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"w-8 h-8 rounded-full bg-background border border-border flex items-center justify-center flex-shrink-0\">\n          <Bot className=\"w-4 h-4 text-brand-600\" />\n        </div>\n        \n        {/* Typing Animation */}\n        <div className=\"flex items-center gap-1 py-2\">\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle\" />\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle delay-100\" />\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle delay-200\" />\n        </div>\n      </div>\n    </div>\n  );\n};","/**\n * Agent Selector Component\n * \n * Dropdown selector for switching between different CustomGPT agents.\n * Displays the current agent and allows users to select from available agents.\n * \n * Features:\n * - Current agent display with avatar\n * - Dropdown list of all available agents\n * - Agent metadata display (model, status)\n * - Quick settings access per agent\n * - Refresh agents functionality\n * - Loading and error states\n * - Click-outside-to-close behavior\n * - Smooth animations\n * \n * State Management:\n * - Uses agentStore for agent data\n * - Local state for dropdown open/close\n * - Automatic agent fetching on dropdown open\n * \n * UI/UX:\n * - Visual selection indicator (checkmark)\n * - Hover states for better interactivity\n * - Loading skeleton for initial load\n * - Error state with retry option\n * - Empty state guidance\n * \n * Features:\n * - Comprehensive agent selection with real-time filtering\n * - Intelligent agent management with favorites and categories\n * - Quick agent creation workflow integration\n * - Professional avatar display with status indicators\n * - Full keyboard navigation and accessibility support\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Bot, \n  ChevronDown, \n  Settings, \n  RefreshCw,\n  AlertCircle,\n  Check,\n  BarChart3,\n  User\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { useAgentStore } from '@/store';\nimport { Spinner } from '@/components/ui/loading';\nimport { getClient } from '@/lib/api/client';\n\n/**\n * Props for AgentSelector component\n * \n * @property className - Additional CSS classes\n * @property showSettings - Whether to show settings button for each agent\n * @property onSettingsClick - Callback when settings button is clicked\n */\ninterface AgentSelectorProps {\n  className?: string;\n  showSettings?: boolean;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Props for agent avatar component\n */\ninterface AgentAvatarProps {\n  agent: Agent | null;\n  size?: 'sm' | 'md';\n  isSelected?: boolean;\n  className?: string;\n}\n\n/**\n * Props for individual agent item in dropdown\n * \n * @property agent - Agent data object\n * @property isSelected - Whether this agent is currently selected\n * @property onSelect - Callback when agent is selected\n * @property onSettingsClick - Optional callback for settings button\n */\ninterface AgentItemProps {\n  agent: Agent;\n  isSelected: boolean;\n  onSelect: (agent: Agent) => void;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Agent Avatar Component\n * \n * Displays agent avatar with fallback to default icon\n */\nconst AgentAvatar: React.FC<AgentAvatarProps> = ({ \n  agent, \n  size = 'md', \n  isSelected = false, \n  className \n}) => {\n  const sizeClasses = {\n    sm: 'w-6 h-6',\n    md: 'w-8 h-8'\n  };\n  \n  const iconSizeClasses = {\n    sm: 'w-3 h-3',\n    md: 'w-4 h-4'\n  };\n\n  const avatarUrl = agent?.settings?.chatbot_avatar;\n\n  return (\n    <div className={cn(\n      'rounded-full flex items-center justify-center flex-shrink-0 overflow-hidden',\n      sizeClasses[size],\n      isSelected ? 'bg-brand-600' : 'bg-accent',\n      className\n    )}>\n      {avatarUrl ? (\n        <img\n          src={avatarUrl}\n          alt={`${agent?.project_name} avatar`}\n          className=\"w-full h-full object-cover\"\n          onError={(e) => {\n            // Fallback to icon if image fails to load\n            const target = e.target as HTMLImageElement;\n            target.style.display = 'none';\n            const parent = target.parentElement;\n            if (parent) {\n              const icon = document.createElement('div');\n              icon.className = `w-full h-full flex items-center justify-center`;\n              icon.innerHTML = `<svg class=\"${iconSizeClasses[size]} ${isSelected ? 'text-white' : 'text-gray-600'}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"></path></svg>`;\n              parent.appendChild(icon);\n            }\n          }}\n        />\n      ) : (\n        <User className={cn(\n          iconSizeClasses[size],\n          isSelected ? 'text-white' : 'text-muted-foreground'\n        )} />\n      )}\n    </div>\n  );\n};\n\n/**\n * Individual Agent Item Component\n * \n * Renders a single agent in the dropdown list with:\n * - Agent avatar and name\n * - Selection indicator\n * - Metadata (model, status)\n * - Settings button (optional)\n */\nconst AgentItem: React.FC<AgentItemProps> = ({ \n  agent, \n  isSelected, \n  onSelect, \n  onSettingsClick \n}) => {\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-between p-3 rounded-lg cursor-pointer transition-colors group',\n        'hover:bg-accent',\n        isSelected && 'bg-brand-50 hover:bg-brand-100'\n      )}\n      onClick={() => onSelect(agent)}\n    >\n      <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n        {/* Avatar */}\n        <AgentAvatar \n          agent={agent}\n          size=\"md\"\n          isSelected={isSelected}\n        />\n        \n        {/* Agent Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"font-medium text-foreground truncate\">\n              {agent.project_name}\n            </h3>\n            {isSelected && (\n              <Check className=\"w-4 h-4 text-brand-600 flex-shrink-0\" />\n            )}\n          </div>\n          \n          {/* Status */}\n          <div className=\"mt-1 text-xs text-muted-foreground\">\n            <span>Status: {agent.is_chat_active ? 'Active' : 'Inactive'}</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Settings Button */}\n      {onSettingsClick && (\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onSettingsClick(agent);\n          }}\n          className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-muted-foreground hover:text-foreground\"\n          title=\"Agent Settings\"\n        >\n          <Settings className=\"h-3 w-3\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Selector Component\n * \n * Main component that provides agent switching functionality.\n * Manages dropdown state and handles agent selection.\n * \n * @param className - Additional CSS classes for styling\n * @param showSettings - Whether to show settings buttons (default: true)\n * @param onSettingsClick - Handler for agent settings clicks\n */\nexport const AgentSelector: React.FC<AgentSelectorProps> = ({ \n  className,\n  showSettings = true,\n  onSettingsClick\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isSelectingAgent, setIsSelectingAgent] = useState(false);\n  const [loadingSettings, setLoadingSettings] = useState<Set<number>>(new Set());\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  \n  const { \n    agents, \n    currentAgent, \n    loading, \n    error, \n    fetchAgents, \n    loadMoreAgents,\n    selectAgent,\n    setAgents,\n    paginationMeta\n  } = useAgentStore();\n\n  /**\n   * Fetch settings for agents that don't have them loaded\n   */\n  const fetchAgentSettings = async (agentsToLoad: Agent[]) => {\n    const agentsNeedingSettings = agentsToLoad.filter(agent => \n      !agent.settings && !loadingSettings.has(agent.id)\n    );\n\n    if (agentsNeedingSettings.length === 0) return;\n\n    // Mark agents as loading\n    setLoadingSettings(prev => {\n      const newSet = new Set(prev);\n      agentsNeedingSettings.forEach(agent => newSet.add(agent.id));\n      return newSet;\n    });\n\n    try {\n      const client = getClient();\n      const settingsPromises = agentsNeedingSettings.map(async (agent) => {\n        try {\n          const response = await client.getAgentSettings(agent.id);\n          return {\n            agentId: agent.id,\n            settings: response.data || response\n          };\n        } catch (error) {\n          console.warn(`Failed to load settings for agent ${agent.id}:`, error);\n          return {\n            agentId: agent.id,\n            settings: null\n          };\n        }\n      });\n\n      const results = await Promise.all(settingsPromises);\n      \n      // Update agents with their settings\n      const updatedAgents = agents.map(agent => {\n        const result = results.find(r => r.agentId === agent.id);\n        if (result && result.settings) {\n          return { ...agent, settings: result.settings };\n        }\n        return agent;\n      });\n\n      setAgents(updatedAgents);\n\n    } catch (error) {\n      console.error('Failed to fetch agent settings:', error);\n    } finally {\n      // Clear loading state\n      setLoadingSettings(prev => {\n        const newSet = new Set(prev);\n        agentsNeedingSettings.forEach(agent => newSet.delete(agent.id));\n        return newSet;\n      });\n    }\n  };\n\n  /**\n   * Close dropdown when clicking outside\n   * \n   * Uses mousedown event for better UX (closes before click completes)\n   */\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [isOpen]);\n\n  /**\n   * Refresh agents list\n   * \n   * Fetches latest agents from the API and shows toast feedback.\n   * This will temporarily cause avatars to flicker as settings are reloaded.\n   */\n  const handleRefresh = async () => {\n    try {\n      await fetchAgents();\n      toast.success('Agents refreshed');\n    } catch (error) {\n      toast.error('Failed to refresh agents');\n    }\n  };\n\n  /**\n   * Handle agent selection\n   * \n   * Updates the current agent, closes dropdown, and shows confirmation\n   */\n  const handleSelectAgent = async (agent: Agent) => {\n    if (isSelectingAgent) return; // Prevent multiple selections\n    \n    setIsSelectingAgent(true);\n    try {\n      await selectAgent(agent);\n      setIsOpen(false);\n      toast.success(`Switched to ${agent.project_name}`);\n    } catch (error) {\n      toast.error('Failed to switch agent');\n    } finally {\n      // Add a small delay to show the loading state briefly\n      setTimeout(() => {\n        setIsSelectingAgent(false);\n      }, 300);\n    }\n  };\n\n  /**\n   * Fetch settings when agents are loaded and dropdown is open\n   * Only runs when needed to prevent unnecessary API calls\n   */\n  useEffect(() => {\n    if (isOpen && agents.length > 0) {\n      // Only fetch if there are agents without settings\n      const agentsNeedingSettings = agents.some(agent => !agent.settings);\n      if (agentsNeedingSettings) {\n        fetchAgentSettings(agents);\n      }\n    }\n  }, [isOpen, agents.length, agents, fetchAgentSettings]);\n\n  /**\n   * Toggle dropdown and conditionally fetch agents\n   * \n   * Only fetches agents if the array is empty to prevent flickering.\n   * Settings are fetched via useEffect when agents are loaded.\n   */\n  const handleToggleDropdown = async () => {\n    const willOpen = !isOpen;\n    setIsOpen(willOpen);\n    \n    // Only fetch agents if we don't have any yet\n    // This prevents flickering caused by replacing agents that have settings\n    // with fresh agents that don't have settings loaded\n    if (willOpen && agents.length === 0) {\n      try {\n        await fetchAgents();\n      } catch (error) {\n        // Don't show error toast here as it might be annoying\n      }\n    }\n  };\n\n  if (loading && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-muted animate-pulse\" />\n          <div className=\"flex-1\">\n            <div className=\"h-4 bg-muted rounded animate-pulse mb-2\" />\n            <div className=\"h-3 bg-muted/50 rounded animate-pulse w-3/4\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-red-100 flex items-center justify-center flex-shrink-0\">\n            <AlertCircle className=\"w-4 h-4 text-red-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-red-600 font-medium\">Failed to load agents</p>\n            <p className=\"text-xs text-red-500\">{error}</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            className=\"text-red-600 hover:text-red-700\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentAgent && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-accent flex items-center justify-center flex-shrink-0\">\n            <Bot className=\"w-4 h-4 text-muted-foreground\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-muted-foreground font-medium\">No agents available</p>\n            <p className=\"text-xs text-muted-foreground\">Check your API configuration</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            disabled={loading}\n          >\n            <RefreshCw className={cn('w-4 h-4', loading && 'animate-spin')} />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('relative', className)} ref={dropdownRef}>\n      {/* Loading overlay when selecting agent */}\n      {isSelectingAgent && (\n        <div className=\"absolute inset-0 bg-background/80 backdrop-blur-sm rounded-lg flex items-center justify-center z-50\">\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Spinner size=\"sm\" />\n            <span className=\"text-foreground\">Switching agent...</span>\n          </div>\n        </div>\n      )}\n      {/* Selected Agent Display */}\n      <button\n        onClick={handleToggleDropdown}\n        className={cn(\n          'w-full p-3 bg-background border border-border rounded-lg text-left transition-colors',\n          'hover:bg-accent focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent',\n          isOpen && 'ring-2 ring-ring border-transparent'\n        )}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            {/* Avatar */}\n            <AgentAvatar \n              agent={currentAgent}\n              size=\"md\"\n              isSelected={true}\n            />\n            \n            {/* Agent Info */}\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-medium text-foreground truncate\">\n                {currentAgent?.project_name || 'Select Agent'}\n              </h3>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {/* Analytics Button */}\n            {currentAgent && (\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  // Navigate to projects page with analytics tab\n                  window.location.href = `/projects?id=${currentAgent.id}&tab=analytics`;\n                }}\n                title=\"View Analytics\"\n                className=\"text-muted-foreground hover:text-foreground\"\n              >\n                <BarChart3 className=\"w-4 h-4\" />\n              </Button>\n            )}\n            \n            {/* Refresh Button */}\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleRefresh();\n              }}\n              disabled={loading}\n              className=\"h-6 w-6 text-muted-foreground hover:text-foreground\"\n              title=\"Refresh Agents\"\n            >\n              <RefreshCw className={cn('h-3 w-3', loading && 'animate-spin')} />\n            </Button>\n            \n            {/* Dropdown Arrow */}\n            <ChevronDown className={cn(\n              'w-4 h-4 text-muted-foreground transition-transform',\n              isOpen && 'rotate-180'\n            )} />\n          </div>\n        </div>\n      </button>\n\n      {/* Dropdown */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-background border border-border rounded-lg shadow-lg z-50 max-h-80 overflow-y-auto\"\n          >\n            <div className=\"p-2\">\n              {/* Header */}\n              <div className=\"px-2 py-1 mb-2\">\n                <h4 className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n                  Available Agents ({Array.isArray(agents) ? agents.length : 0}\n                  {paginationMeta?.totalCount && paginationMeta.totalCount !== agents.length && (\n                    <span> of {paginationMeta.totalCount}</span>\n                  )})\n                </h4>\n              </div>\n              \n              {/* Agent List */}\n              <div className=\"space-y-1\">\n                {Array.isArray(agents) && agents.length > 0 ? (\n                  agents.map((agent) => (\n                    <AgentItem\n                      key={agent.id}\n                      agent={agent}\n                      isSelected={currentAgent?.id === agent.id}\n                      onSelect={handleSelectAgent}\n                      onSettingsClick={showSettings ? onSettingsClick : undefined}\n                    />\n                  ))\n                ) : (\n                  <div className=\"px-2 py-4 text-center\">\n                    <p className=\"text-sm text-muted-foreground\">No agents found</p>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={handleRefresh}\n                      className=\"mt-2\"\n                    >\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Refresh\n                    </Button>\n                  </div>\n                )}\n              </div>\n              \n              {/* Load More Button */}\n              {Array.isArray(agents) && agents.length > 0 && paginationMeta?.hasMore && (\n                <div className=\"px-2 py-2 border-t\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={async () => {\n                      try {\n                        await loadMoreAgents();\n                      } catch (error) {\n                        console.error('Failed to load more agents:', error);\n                      }\n                    }}\n                    disabled={loading}\n                    className=\"w-full\"\n                  >\n                    {loading ? (\n                      <>\n                        <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Loading...\n                      </>\n                    ) : (\n                      <>\n                        <ChevronDown className=\"w-4 h-4 mr-2\" />\n                        Load More Agents\n                      </>\n                    )}\n                  </Button>\n                </div>\n              )}\n              \n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","'use client';\n\nimport { useState, useEffect } from 'react';\n\n/**\n * Custom hook for responsive design based on media queries\n * Provides mobile-first breakpoint detection\n */\nexport const useMediaQuery = (query: string): boolean => {\n  const [matches, setMatches] = useState(false);\n\n  useEffect(() => {\n    // Handle server-side rendering\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const media = window.matchMedia(query);\n    \n    // Set initial value\n    setMatches(media.matches);\n\n    // Create event listener\n    const listener = (event: MediaQueryListEvent) => {\n      setMatches(event.matches);\n    };\n\n    // Add listener\n    media.addEventListener('change', listener);\n\n    // Cleanup\n    return () => media.removeEventListener('change', listener);\n  }, [query]);\n\n  return matches;\n};\n\n/**\n * Predefined breakpoint hooks for common use cases\n */\nexport const useBreakpoint = () => {\n  const isMobile = useMediaQuery('(max-width: 767px)');\n  const isTablet = useMediaQuery('(min-width: 768px) and (max-width: 1023px)');\n  const isDesktop = useMediaQuery('(min-width: 1024px)');\n  const isLargeScreen = useMediaQuery('(min-width: 1280px)');\n  \n  // Touch device detection\n  const isTouchDevice = useMediaQuery('(pointer: coarse)');\n  \n  return {\n    isMobile,\n    isTablet,\n    isDesktop,\n    isLargeScreen,\n    isTouchDevice,\n    // Helper computed values\n    isMobileOrTablet: isMobile || isTablet,\n    isTabletOrDesktop: isTablet || isDesktop\n  };\n};\n\n/**\n * Hook for getting current screen size category\n */\nexport const useScreenSize = () => {\n  const { isMobile, isTablet, isDesktop, isLargeScreen } = useBreakpoint();\n  \n  if (isMobile) return 'mobile';\n  if (isTablet) return 'tablet';\n  if (isLargeScreen) return 'large';\n  if (isDesktop) return 'desktop';\n  return 'desktop'; // fallback\n};","/**\n * Citation Details Modal Component\n * \n * Modal dialog that displays detailed information about a citation,\n * including Open Graph data fetched from the cited source.\n * \n * Features:\n * - Open Graph data display (title, description, image)\n * - Loading and error states\n * - Responsive modal design\n * - Image preview with error handling\n * - Direct link to source\n * - Citation metadata display\n * - Smooth animations\n * \n * API Integration:\n * - Fetches citation details via getCitation API\n * - Handles Open Graph data response\n * - Graceful error handling\n * - Automatic retry on prop changes\n * \n * UI/UX:\n * - Backdrop click to close\n * - Escape key support (via close button)\n * - Loading spinner during fetch\n * - Error message display\n * - Image fallback on load error\n * \n * Features:\n * - Advanced citation caching for improved performance\n * - Professional sharing and bookmarking functionality\n * - Enhanced image preview with zoom and gallery modes\n * - Citation analytics and usage tracking\n * - Comprehensive export options and related citation discovery\n */\n\n'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  ExternalLink,\n  Loader,\n  AlertCircle,\n  Globe,\n  Image as ImageIcon\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { useAgentStore } from '@/store/agents';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\n/**\n * Open Graph data structure for citations\n * \n * @property id - Citation ID\n * @property url - Source URL\n * @property title - Page title from Open Graph\n * @property description - Page description\n * @property image - Optional preview image URL\n */\ninterface CitationOpenGraphData {\n  id: number;\n  url: string;\n  title: string;\n  description: string;\n  image?: string;\n}\n\n/**\n * Props for CitationDetailsModal\n * \n * @property isOpen - Whether modal is visible\n * @property onClose - Callback to close modal\n * @property citationId - ID of citation to display\n * @property projectId - Optional project ID (uses current agent if not provided)\n */\ninterface CitationDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: number | string;\n  projectId?: number;\n}\n\n/**\n * Citation Details Modal Component\n * \n * Displays rich preview of citation with Open Graph data.\n * Fetches citation details from API when opened.\n */\nexport const CitationDetailsModal: React.FC<CitationDetailsModalProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  projectId\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [citationData, setCitationData] = useState<CitationOpenGraphData | null>(null);\n  const [imageError, setImageError] = useState(false);\n  \n  const { currentAgent } = useAgentStore();\n  const { isMobile } = useBreakpoint();\n  const effectiveProjectId = projectId || currentAgent?.id;\n\n  /**\n   * Fetch citation Open Graph data from API\n   * \n   * Handles:\n   * - Parameter validation\n   * - API call with proper typing\n   * - Error handling with user-friendly messages\n   * - Loading state management\n   * - Logging for debugging\n   */\n  const fetchCitationDetails = useCallback(async () => {\n    if (!effectiveProjectId || !citationId) {\n      setError('Missing project or citation information');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    setImageError(false);\n\n    try {\n      const client = getClient();\n      const response = await client.getCitation(\n        effectiveProjectId, \n        typeof citationId === 'string' ? parseInt(citationId, 10) : citationId\n      );\n      \n      if (response.data) {\n        setCitationData(response.data as unknown as CitationOpenGraphData);\n        logger.info('CITATION', 'Citation details fetched', {\n          citationId,\n          projectId: effectiveProjectId,\n          hasImage: !!response.data.image\n        });\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch citation details';\n      setError(errorMessage);\n      logger.error('CITATION', 'Failed to fetch citation details', {\n        error: err,\n        citationId,\n        projectId: effectiveProjectId\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [effectiveProjectId, citationId]);\n\n  /**\n   * Fetch citation details when modal opens\n   * \n   * Triggers API call when modal becomes visible and required data is available\n   */\n  useEffect(() => {\n    if (isOpen && effectiveProjectId && citationId) {\n      fetchCitationDetails();\n    }\n  }, [isOpen, effectiveProjectId, citationId, fetchCitationDetails]);\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            onClick={onClose}\n            className=\"fixed inset-0 bg-black/50 z-50\"\n          />\n\n          {/* Modal */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            className={cn(\n              \"fixed bg-background shadow-xl z-50\",\n              isMobile \n                ? \"inset-x-0 bottom-0 top-20 rounded-t-xl flex flex-col\" \n                : \"inset-x-0 top-[10%] mx-auto max-w-2xl rounded-lg max-h-[90vh] overflow-hidden\"\n            )}\n          >\n          {/* Header */}\n          <div className={cn(\n            \"flex items-center justify-between border-b border-border bg-background/95 backdrop-blur-sm flex-shrink-0\",\n            isMobile ? \"px-4 py-4\" : \"p-4\"\n          )}>\n            <h2 className={cn(\n              \"font-semibold text-foreground\",\n              isMobile ? \"text-lg\" : \"text-lg\"\n            )}>\n              Citation Details\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className={cn(\n                isMobile ? \"h-9 w-9 touch-target\" : \"h-8 w-8\"\n              )}\n            >\n              <X className={cn(\n                isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n              )} />\n            </Button>\n          </div>\n\n          {/* Content */}\n          <div className={cn(\n            \"overflow-y-auto\",\n            isMobile \n              ? \"flex-1 px-4 py-4 pb-6 safe-area-pb\" \n              : \"p-4 max-h-[calc(90vh-120px)]\"\n          )}>\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n              </div>\n            ) : error ? (\n              <div className={cn(\n                \"flex items-center gap-3 p-4 bg-red-50 dark:bg-red-950/20 rounded-lg\",\n                isMobile && \"mx-0\"\n              )}>\n                <AlertCircle className={cn(\n                  \"text-red-600 flex-shrink-0\",\n                  isMobile ? \"h-5 w-5\" : \"h-5 w-5\"\n                )} />\n                <div className=\"flex-1\">\n                  <p className={cn(\n                    \"font-medium text-red-900 dark:text-red-200\",\n                    isMobile ? \"text-sm\" : \"text-sm\"\n                  )}>Error loading citation</p>\n                  <p className={cn(\n                    \"text-red-700 dark:text-red-300 mt-1\",\n                    isMobile ? \"text-xs\" : \"text-sm\"\n                  )}>{error}</p>\n                </div>\n              </div>\n            ) : citationData ? (\n              <div className={cn(\n                \"space-y-4\",\n                isMobile && \"space-y-5\"\n              )}>\n                {/* Open Graph Image */}\n                {citationData.image && !imageError && (\n                  <div className={cn(\n                    \"relative rounded-lg overflow-hidden bg-muted\",\n                    isMobile && \"-mx-4 rounded-none\"\n                  )}>\n                    <img\n                      src={citationData.image}\n                      alt={citationData.title}\n                      className=\"w-full h-auto\"\n                      onError={() => setImageError(true)}\n                    />\n                    {isMobile && (\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent pointer-events-none\" />\n                    )}\n                  </div>\n                )}\n\n                {/* Title */}\n                <div>\n                  <h3 className={cn(\n                    \"font-semibold text-foreground\",\n                    isMobile ? \"text-lg leading-tight\" : \"text-xl\"\n                  )}>\n                    {citationData.title}\n                  </h3>\n                </div>\n\n                {/* URL */}\n                <div className={cn(\n                  \"flex items-center gap-2 text-muted-foreground\",\n                  isMobile ? \"text-sm\" : \"text-sm\"\n                )}>\n                  <Globe className={cn(\n                    \"flex-shrink-0\",\n                    isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                  )} />\n                  <a\n                    href={citationData.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className={cn(\n                      \"hover:text-brand-600 transition-colors\",\n                      isMobile ? \"break-all\" : \"truncate\"\n                    )}\n                  >\n                    {citationData.url}\n                  </a>\n                </div>\n\n                {/* Description */}\n                {citationData.description && (\n                  <div className=\"prose prose-gray dark:prose-invert max-w-none\">\n                    <p className={cn(\n                      \"text-foreground\",\n                      isMobile ? \"text-sm leading-relaxed\" : \"\"\n                    )}>{citationData.description}</p>\n                  </div>\n                )}\n\n                {/* Metadata */}\n                <div className={cn(\n                  \"pt-4 border-t border-border space-y-3\",\n                  isMobile && \"space-y-3\"\n                )}>\n                  <div className={cn(\n                    \"flex items-center justify-between\",\n                    isMobile ? \"text-sm\" : \"text-sm\"\n                  )}>\n                    <span className=\"text-muted-foreground\">Citation ID</span>\n                    <span className={cn(\n                      \"font-mono text-foreground\",\n                      isMobile ? \"text-base\" : \"\"\n                    )}>#{citationData.id}</span>\n                  </div>\n                  {citationData.image && (\n                    <div className={cn(\n                      \"flex items-center justify-between\",\n                      isMobile ? \"text-sm\" : \"text-sm\"\n                    )}>\n                      <span className=\"text-muted-foreground\">Has preview image</span>\n                      <ImageIcon className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                    </div>\n                  )}\n                </div>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className={cn(\n            \"border-t bg-muted flex-shrink-0\",\n            isMobile ? \"p-4 safe-area-pb\" : \"p-4\"\n          )}>\n            <div className={cn(\n              \"flex items-center\",\n              isMobile ? \"flex-col gap-3\" : \"justify-between\"\n            )}>\n              <div className={cn(\n                \"text-muted-foreground\",\n                isMobile ? \"text-xs text-center\" : \"text-xs\"\n              )}>\n                Open Graph data from cited source\n              </div>\n              {citationData && (\n                <a\n                  href={citationData.url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className={cn(\n                    \"inline-flex items-center gap-2 font-medium text-brand-600 hover:text-brand-700 transition-colors\",\n                    isMobile \n                      ? \"w-full justify-center bg-brand-600 text-white hover:bg-brand-700 hover:text-white rounded-lg px-4 py-3 text-base touch-target\" \n                      : \"px-3 py-1.5 text-sm\"\n                  )}\n                >\n                  Visit source\n                  <ExternalLink className={cn(\n                    isMobile ? \"h-4 w-4\" : \"h-3.5 w-3.5\"\n                  )} />\n                </a>\n              )}\n            </div>\n          </div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};","'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  FileText,\n  Download,\n  Loader,\n  AlertCircle,\n  Copy,\n  Check\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { toast } from 'sonner';\n\ninterface CitationFilePreviewProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: string;\n  fileName?: string;\n}\n\nexport const CitationFilePreview: React.FC<CitationFilePreviewProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  fileName = 'Citation File'\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [fileContent, setFileContent] = useState<string | null>(null);\n  const [contentType, setContentType] = useState<string>('text/plain');\n  const [copied, setCopied] = useState(false);\n\n  const fetchFilePreview = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const client = getClient();\n      const response = await client.previewCitationFile(citationId);\n      \n      // Handle different response formats\n      if (typeof response === 'string') {\n        setFileContent(response);\n        setContentType('text/plain');\n      } else if (response.data) {\n        setFileContent(response.data.content || response.data);\n        setContentType(response.data.content_type || 'text/plain');\n      } else {\n        setFileContent(JSON.stringify(response, null, 2));\n        setContentType('application/json');\n      }\n      \n      logger.info('CITATION_PREVIEW', 'File preview fetched', {\n        citationId,\n        contentLength: fileContent?.length\n      });\n    } catch (err: any) {\n      logger.error('CITATION_PREVIEW', 'Failed to fetch file preview', {\n        error: err,\n        citationId\n      });\n      \n      if (err.status === 400) {\n        setError('Invalid citation ID.');\n      } else if (err.status === 401) {\n        setError('Authentication failed. Please log in again.');\n      } else if (err.status === 403) {\n        setError('Access denied. You do not have permission to view this file.');\n      } else if (err.status === 404) {\n        setError('Citation file not found.');\n      } else if (err.status === 500) {\n        setError('Server error. Please try again later.');\n      } else {\n        setError('Failed to load file preview.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [citationId]);\n\n  useEffect(() => {\n    if (isOpen && citationId) {\n      fetchFilePreview();\n    }\n  }, [isOpen, citationId, fetchFilePreview]);\n\n  const handleCopy = async () => {\n    if (!fileContent) return;\n    \n    try {\n      await navigator.clipboard.writeText(fileContent);\n      setCopied(true);\n      toast.success('Content copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      toast.error('Failed to copy content');\n    }\n  };\n\n  const handleDownload = () => {\n    if (!fileContent) return;\n    \n    const blob = new Blob([fileContent], { type: contentType });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast.success('File downloaded');\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        {/* Backdrop */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onClick={onClose}\n          className=\"absolute inset-0 bg-black/50\"\n        />\n\n        {/* Modal */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.95 }}\n          className=\"relative bg-background rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden\"\n        >\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-border\">\n            <div className=\"flex items-center gap-3\">\n              <FileText className=\"h-5 w-5 text-muted-foreground\" />\n              <h2 className=\"text-lg font-semibold text-foreground\">\n                {fileName}\n              </h2>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleCopy}\n                disabled={!fileContent}\n              >\n                {copied ? (\n                  <>\n                    <Check className=\"h-4 w-4 mr-2\" />\n                    Copied\n                  </>\n                ) : (\n                  <>\n                    <Copy className=\"h-4 w-4 mr-2\" />\n                    Copy\n                  </>\n                )}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleDownload}\n                disabled={!fileContent}\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onClose}\n                className=\"h-8 w-8\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-4 overflow-y-auto max-h-[calc(90vh-120px)]\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n              </div>\n            ) : error ? (\n              <div className=\"flex items-center gap-3 p-4 bg-red-50 rounded-lg\">\n                <AlertCircle className=\"h-5 w-5 text-red-600 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-destructive\">Error loading file</p>\n                  <p className=\"text-sm text-destructive/90 mt-1\">{error}</p>\n                </div>\n              </div>\n            ) : fileContent ? (\n              <div className=\"font-mono text-sm bg-accent rounded-lg p-4 text-foreground\">\n                <pre className=\"whitespace-pre-wrap break-words\">\n                  {fileContent}\n                </pre>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t border-border bg-accent\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-xs text-muted-foreground\">\n                Citation ID: {citationId}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                {contentType}\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};","/**\n * Conversation Manager Component\n * \n * Provides conversation switching UI for widget and floating modes.\n * Shows a list of conversations with ability to create new ones and switch between them.\n * \n * Features:\n * - Conversation list with titles and timestamps\n * - Create new conversation button\n * - Switch between conversations\n * - Edit conversation titles inline\n * - Delete conversations\n * - Session-based isolation\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Plus, MessageCircle, Edit2, Trash2, Check, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils';\n\ninterface Conversation {\n  id: string;\n  title: string;\n  createdAt: string;\n  messages: any[];\n}\n\ninterface ConversationManagerProps {\n  sessionId: string;\n  maxConversations?: number;\n  currentConversationId?: string;\n  onConversationChange?: (conversation: Conversation) => void;\n  onCreateConversation?: () => void;\n  className?: string;\n  refreshKey?: number; // Add refresh key to force re-render\n}\n\nexport const ConversationManager: React.FC<ConversationManagerProps> = ({\n  sessionId,\n  maxConversations,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  className,\n  refreshKey,\n}) => {\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editTitle, setEditTitle] = useState('');\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Load conversations from localStorage\n  useEffect(() => {\n    const loadConversations = () => {\n      const stored = localStorage.getItem(`customgpt_conversations_${sessionId}`);\n      if (stored) {\n        try {\n          const parsed = JSON.parse(stored);\n          setConversations(parsed);\n        } catch (e) {\n          console.error('Failed to parse conversations:', e);\n        }\n      }\n    };\n\n    loadConversations();\n    // Listen for storage changes\n    window.addEventListener('storage', loadConversations);\n    return () => window.removeEventListener('storage', loadConversations);\n  }, [sessionId, refreshKey]); // Add refreshKey as dependency\n\n  const handleCreateConversation = () => {\n    if (maxConversations && conversations.length >= maxConversations) {\n      toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n      return;\n    }\n    onCreateConversation?.();\n  };\n\n  const handleSelectConversation = (conversation: Conversation) => {\n    onConversationChange?.(conversation);\n    setIsExpanded(false);\n  };\n\n  const handleEditStart = (conversation: Conversation) => {\n    setEditingId(conversation.id);\n    setEditTitle(conversation.title);\n  };\n\n  const handleEditSave = (conversationId: string) => {\n    const updated = conversations.map(c =>\n      c.id === conversationId ? { ...c, title: editTitle } : c\n    );\n    setConversations(updated);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(updated)\n    );\n    setEditingId(null);\n  };\n\n  const handleDelete = (conversationId: string) => {\n    if (conversations.length <= 1) {\n      toast.error('Cannot delete the last conversation');\n      return;\n    }\n    \n    const filtered = conversations.filter(c => c.id !== conversationId);\n    setConversations(filtered);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(filtered)\n    );\n    \n    // If deleting current conversation, switch to another\n    if (currentConversationId === conversationId && filtered.length > 0) {\n      onConversationChange?.(filtered[0]);\n    }\n  };\n\n  const currentConversation = conversations.find(c => c.id === currentConversationId);\n\n  return (\n    <div className={cn('relative', className)}>\n      {/* Collapsed View */}\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"flex items-center gap-2 px-3 py-2 text-sm font-medium text-foreground hover:bg-accent rounded-lg transition-colors w-full\"\n      >\n        <MessageCircle className=\"w-4 h-4\" />\n        <span className=\"truncate flex-1 text-left\">\n          {currentConversation?.title || 'Select Conversation'}\n        </span>\n        <svg\n          className={cn('w-4 h-4 transition-transform', isExpanded && 'rotate-180')}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n        </svg>\n      </button>\n\n      {/* Expanded View */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-background rounded-lg shadow-lg border border-border z-50 max-h-80 overflow-y-auto\"\n          >\n            {/* New Conversation Button */}\n            <button\n              onClick={handleCreateConversation}\n              disabled={maxConversations ? conversations.length >= maxConversations : false}\n              className=\"flex items-center gap-2 w-full px-4 py-3 text-sm font-medium text-brand-600 hover:bg-brand-50 disabled:opacity-50 disabled:cursor-not-allowed border-b\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              New Conversation\n            </button>\n\n            {/* Conversation List */}\n            <div className=\"py-2\">\n              {conversations.map((conversation) => (\n                <div\n                  key={conversation.id}\n                  className={cn(\n                    'group flex items-center px-4 py-2 hover:bg-accent',\n                    currentConversationId === conversation.id && 'bg-brand-50'\n                  )}\n                >\n                  {editingId === conversation.id ? (\n                    // Edit Mode\n                    <div className=\"flex items-center gap-2 flex-1\">\n                      <input\n                        type=\"text\"\n                        value={editTitle}\n                        onChange={(e) => setEditTitle(e.target.value)}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') handleEditSave(conversation.id);\n                          if (e.key === 'Escape') setEditingId(null);\n                        }}\n                        className=\"flex-1 px-2 py-1 text-sm border rounded focus:outline-none focus:ring-1 focus:ring-brand-500\"\n                        autoFocus\n                      />\n                      <button\n                        onClick={() => handleEditSave(conversation.id)}\n                        className=\"p-1 text-green-600 hover:bg-green-50 rounded\"\n                      >\n                        <Check className=\"w-4 h-4\" />\n                      </button>\n                      <button\n                        onClick={() => setEditingId(null)}\n                        className=\"p-1 text-muted-foreground hover:bg-accent rounded\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  ) : (\n                    // View Mode\n                    <>\n                      <button\n                        onClick={() => handleSelectConversation(conversation)}\n                        className=\"flex-1 text-left\"\n                      >\n                        <div className=\"text-sm font-medium text-foreground truncate\">\n                          {conversation.title}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {new Date(conversation.createdAt).toLocaleDateString()}\n                        </div>\n                      </button>\n                      <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <button\n                          onClick={() => handleEditStart(conversation)}\n                          className=\"p-1 text-muted-foreground hover:text-foreground hover:bg-accent rounded\"\n                        >\n                          <Edit2 className=\"w-3 h-3\" />\n                        </button>\n                        <button\n                          onClick={() => handleDelete(conversation.id)}\n                          className=\"p-1 text-muted-foreground hover:text-destructive hover:bg-destructive/10 rounded\"\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </button>\n                      </div>\n                    </>\n                  )}\n                </div>\n              ))}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","/**\n * Message Error Display Component\n * \n * Displays error messages with appropriate styling and context based on HTTP status codes.\n * Provides user-friendly error messages and actionable guidance.\n */\n\nimport React from 'react';\nimport { AlertCircle, XCircle, CreditCard, UserX, Search, ServerCrash } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface MessageErrorDisplayProps {\n  error: string | Error;\n  statusCode?: number;\n  onRetry?: () => void;\n  className?: string;\n}\n\n/**\n * Parse error to extract status code and message\n */\nconst parseError = (error: string | Error): { statusCode?: number; message: string } => {\n  if (typeof error === 'string') {\n    // Try to extract status code from error message\n    const statusMatch = error.match(/(\\d{3})/);\n    const statusCode = statusMatch ? parseInt(statusMatch[1]) : undefined;\n    return { statusCode, message: error };\n  }\n  \n  return { \n    statusCode: (error as any).status || (error as any).statusCode,\n    message: error.message \n  };\n};\n\n/**\n * Get error details based on status code\n */\nconst getErrorDetails = (statusCode?: number, message?: string) => {\n  switch (statusCode) {\n    case 400:\n      return {\n        icon: AlertCircle,\n        title: 'Invalid Request',\n        description: 'The request format is invalid. Please check your input and try again.',\n        className: 'border-orange-200 bg-orange-50',\n        iconClassName: 'text-orange-600',\n        textClassName: 'text-orange-800',\n      };\n      \n    case 401:\n      return {\n        icon: UserX,\n        title: 'Authentication Failed',\n        description: 'Your API key is either missing or invalid. Please check your API key configuration.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showSupport: true,\n      };\n      \n    case 403:\n      // Check if this is an inactive agent error\n      const isInactiveAgent = message && (\n        message.toLowerCase().includes('inactive') ||\n        message.toLowerCase().includes('no documents') ||\n        message.toLowerCase().includes('agent is not active') ||\n        message.toLowerCase().includes('project is not active') ||\n        message.toLowerCase().includes('no documents uploaded')\n      );\n      \n      if (isInactiveAgent) {\n        return {\n          icon: AlertCircle,\n          title: 'Agent Inactive',\n          description: 'This agent is inactive. Please add documents to activate it before starting a conversation.',\n          className: 'border-orange-200 bg-orange-50',\n          iconClassName: 'text-orange-600',\n          textClassName: 'text-orange-800',\n        };\n      }\n      \n      return {\n        icon: UserX,\n        title: 'Access Denied',\n        description: 'You don\\'t have permission to access this resource. Please check your API key permissions.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showSupport: true,\n      };\n      \n    case 404:\n      return {\n        icon: Search,\n        title: 'Not Found',\n        description: 'The requested agent or conversation was not found. It may have been deleted or you may not have access.',\n        className: 'border-border bg-accent',\n        iconClassName: 'text-muted-foreground',\n        textClassName: 'text-foreground',\n      };\n      \n    case 429:\n      return {\n        icon: CreditCard,\n        title: 'Query Credits Exhausted',\n        description: 'You have exhausted your current query credits. Please contact customer service for assistance.',\n        className: 'border-yellow-200 bg-yellow-50',\n        iconClassName: 'text-yellow-600',\n        textClassName: 'text-yellow-800',\n        showSupport: true,\n        supportUrl: 'https://customgpt.freshdesk.com/support/home',\n      };\n      \n    case 500:\n    case 502:\n    case 503:\n    case 504:\n      return {\n        icon: ServerCrash,\n        title: 'Server Error',\n        description: 'An internal server error occurred. Please try again later or contact support if the issue persists.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showRetry: true,\n      };\n      \n    default:\n      return {\n        icon: XCircle,\n        title: 'Error',\n        description: message || 'An unexpected error occurred. Please try again.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showRetry: true,\n      };\n  }\n};\n\nexport const MessageErrorDisplay: React.FC<MessageErrorDisplayProps> = ({\n  error,\n  statusCode: propStatusCode,\n  onRetry,\n  className,\n}) => {\n  const { statusCode: parsedStatusCode, message } = parseError(error);\n  const finalStatusCode = propStatusCode || parsedStatusCode;\n  \n  const errorDetails = getErrorDetails(finalStatusCode, message);\n  const Icon = errorDetails.icon;\n  \n  return (\n    <div\n      className={cn(\n        'p-4 rounded-lg border',\n        errorDetails.className,\n        className\n      )}\n    >\n      <div className=\"flex items-start gap-3\">\n        <Icon className={cn('w-5 h-5 mt-0.5 flex-shrink-0', errorDetails.iconClassName)} />\n        \n        <div className=\"flex-1 space-y-2\">\n          <div>\n            <h3 className={cn('font-medium', errorDetails.textClassName)}>\n              {errorDetails.title}\n              {finalStatusCode && ` (${finalStatusCode})`}\n            </h3>\n            <p className={cn('text-sm mt-1', errorDetails.textClassName, 'opacity-90')}>\n              {errorDetails.description}\n            </p>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"flex items-center gap-2 mt-3\">\n            {errorDetails.showRetry && onRetry && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={onRetry}\n                className=\"text-xs\"\n              >\n                Try Again\n              </Button>\n            )}\n            \n            {errorDetails.showSupport && (\n              <a\n                href={errorDetails.supportUrl || 'https://customgpt.freshdesk.com/support/home'}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-xs underline hover:no-underline\"\n              >\n                Contact Support\n              </a>\n            )}\n          </div>\n          \n          {/* Technical Details (collapsed by default) */}\n          {message && message !== errorDetails.description && (\n            <details className=\"mt-3\">\n              <summary className={cn('text-xs cursor-pointer', errorDetails.textClassName, 'opacity-70')}>\n                Technical Details\n              </summary>\n              <pre className={cn(\n                'mt-2 p-2 text-xs rounded bg-background bg-opacity-50 overflow-x-auto',\n                errorDetails.textClassName,\n                'opacity-80'\n              )}>\n                {message}\n              </pre>\n            </details>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","import React, { createContext, useContext } from 'react';\n\n// Widget instance type - we'll define the actual widget interface based on what we need\ninterface WidgetInstance {\n  sessionId: string;\n  createConversation: (title?: string) => any;\n  switchConversation: (conversationId: string) => void;\n  getConversations: () => any[];\n  updateConversationTitle: (conversationId: string, newTitle: string) => void;\n  deleteConversation: (conversationId: string) => void;\n  configuration?: any;\n}\n\n// Create the context with undefined default\nconst WidgetContext = createContext<WidgetInstance | undefined>(undefined);\n\n// Provider component props\ninterface WidgetProviderProps {\n  widgetInstance: WidgetInstance;\n  children: React.ReactNode;\n}\n\n// Provider component that will wrap the widget's React tree\nexport const WidgetProvider: React.FC<WidgetProviderProps> = ({ widgetInstance, children }) => {\n  return (\n    <WidgetContext.Provider value={widgetInstance}>\n      {children}\n    </WidgetContext.Provider>\n  );\n};\n\n// Custom hook to use the widget instance from any component\nexport const useWidget = (): WidgetInstance => {\n  const context = useContext(WidgetContext);\n  if (!context) {\n    throw new Error('useWidget must be used within a WidgetProvider');\n  }\n  return context;\n};\n\n// Optional: Hook that returns null instead of throwing if no widget context\nexport const useWidgetSafe = (): WidgetInstance | null => {\n  const context = useContext(WidgetContext);\n  return context || null;\n};","/**\n * Widget-specific Message Store Factory\n * \n * Creates an isolated message store instance for each widget.\n * This ensures messages are not shared between different widget instances.\n */\n\nimport { create, StoreApi } from 'zustand';\nimport type { ChatMessage, Citation, FeedbackType } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateId } from '@/lib/utils';\nimport { globalStreamManager } from '@/lib/streaming/handler';\nimport { logger } from '@/lib/logger';\nimport type { AgentStore } from './agents';\nimport type { ConversationStore } from './conversations';\n\n// Message Store interface - copied from original to maintain compatibility\nexport interface MessageStore {\n  messages: Map<string, ChatMessage[]>;\n  streamingMessage: ChatMessage | null;\n  isStreaming: boolean;\n  loading: boolean;\n  error: string | null;\n  \n  sendMessage: (content: string, files?: File[]) => Promise<void>;\n  loadMessages: (conversationId: string) => Promise<void>;\n  addMessage: (conversationId: string, message: ChatMessage) => void;\n  updateStreamingMessage: (content: string, citations?: Citation[]) => void;\n  clearMessages: (conversationId?: string) => void;\n  updateMessageFeedback: (messageId: string, feedback: FeedbackType) => void;\n  cancelStreaming: () => void;\n  getMessagesForConversation: (conversationId: string) => ChatMessage[];\n  reset: () => void;\n  clearError: () => void;\n  setMessagesForConversation: (conversationId: string, messages: ChatMessage[]) => void;\n}\n\n/**\n * Create a message store instance for a specific widget\n * @param sessionId - The widget's session ID for isolation\n * @param agentStore - Reference to the agent store\n * @param conversationStore - Reference to the conversation store\n */\nexport function createMessageStore(\n  sessionId: string,\n  agentStore?: StoreApi<AgentStore>,\n  conversationStore?: StoreApi<ConversationStore>\n): StoreApi<MessageStore> {\n  const MESSAGES_STORAGE_KEY = `customgpt-messages-cache-${sessionId}`;\n  \n  // Local storage helpers scoped to this instance\n  function saveMessagesToStorage(conversationId: string, messages: ChatMessage[]) {\n    try {\n      const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n      const cache = stored ? JSON.parse(stored) : {};\n      cache[conversationId] = messages;\n      localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n    } catch (error) {\n      console.error('Failed to save messages to local storage:', error);\n    }\n  }\n\n  function loadMessagesFromStorage(conversationId: string): ChatMessage[] | null {\n    try {\n      const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n      if (!stored) return null;\n      const cache = JSON.parse(stored);\n      return cache[conversationId] || null;\n    } catch (error) {\n      console.error('Failed to load messages from local storage:', error);\n      return null;\n    }\n  }\n\n  return create<MessageStore>((set, get) => ({\n    messages: new Map(),\n    streamingMessage: null,\n    isStreaming: false,\n    loading: false,\n    error: null,\n\n    sendMessage: async (content: string, files?: File[]) => {\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      // Use the passed store references\n      if (!agentStore || !conversationStore) {\n        logger.error('MESSAGES', 'Store references not provided');\n        throw new Error('Store references not provided');\n      }\n      \n      const currentAgent = agentStore.getState().currentAgent;\n      if (!currentAgent) {\n        logger.error('MESSAGES', 'No agent selected');\n        throw new Error('No agent selected');\n      }\n\n      logger.info('MESSAGES', 'Sending message from widget store', {\n        sessionId,\n        agentId: currentAgent.id,\n        agentName: currentAgent.project_name,\n        messageLength: content.length,\n        hasFiles: files && files.length > 0\n      });\n\n      // Ensure we have a conversation\n      const conversation = await conversationStore.getState().ensureConversation(\n        typeof currentAgent.id === 'string' ? parseInt(currentAgent.id) : currentAgent.id,\n        content\n      );\n\n      logger.info('MESSAGES', 'Conversation ensured', {\n        conversationId: conversation.id,\n        sessionId: conversation.session_id,\n        hasSessionId: !!conversation.session_id,\n        isNew: !conversation.message_count || conversation.message_count === 0\n      });\n\n      if (!conversation.session_id) {\n        logger.error('MESSAGES', 'Conversation missing session_id', { conversation });\n        throw new Error('Conversation missing session_id');\n      }\n\n      set({ loading: true, error: null });\n\n      const conversationId = conversation.id.toString();\n\n      // Create user message\n      const userMessage: ChatMessage = {\n        id: generateId(),\n        role: 'user',\n        content,\n        timestamp: new Date().toISOString(),\n        status: 'sending',\n      };\n\n      // Add user message to store\n      get().addMessage(conversationId, userMessage);\n\n      // Create assistant message placeholder\n      const assistantMessage: ChatMessage = {\n        id: generateId(),\n        role: 'assistant',\n        content: '',\n        timestamp: new Date().toISOString(),\n        citations: [],\n      };\n\n      set({ \n        streamingMessage: assistantMessage,\n        isStreaming: true,\n        loading: false,\n      });\n\n      try {\n        // Handle file uploads if present\n        if (files && files.length > 0) {\n          const client = getClient();\n          await Promise.all(\n            files.map(file => client.uploadFile(currentAgent.id, file))\n          );\n        }\n\n        // Update user message status\n        userMessage.status = 'sent';\n        get().addMessage(conversationId, userMessage);\n\n        // Start streaming with correct parameters\n        const client = getClient();\n        \n        logger.info('MESSAGES', 'Starting message stream', {\n          agentId: currentAgent.id,\n          sessionId: conversation.session_id,\n          messageContent: content.substring(0, 50)\n        });\n        \n        if (isDemoMode) {\n          // Demo mode - simulate streaming response\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          const demoResponse = `This is a demo response to: \"${content}\"`;\n          get().updateStreamingMessage(demoResponse);\n          \n          await new Promise(resolve => setTimeout(resolve, 500));\n          \n          const finalMessage = get().streamingMessage;\n          if (finalMessage) {\n            finalMessage.status = 'sent';\n            get().addMessage(conversationId, finalMessage);\n          }\n          \n          set({ \n            streamingMessage: null,\n            isStreaming: false,\n          });\n          return;\n        }\n        \n        // Real API streaming\n        try {\n          await client.sendMessageStream(\n            currentAgent.id,\n            conversation.session_id,\n            { \n              prompt: content\n            },\n            (chunk) => {\n                logger.info('MESSAGES', 'Received stream chunk', { \n                  type: chunk.type, \n                  hasContent: !!chunk.content,\n                  contentLength: chunk.content?.length,\n                  contentPreview: chunk.content?.substring(0, 50)\n                });\n                \n                if (chunk.type === 'content' && chunk.content) {\n                  get().updateStreamingMessage(chunk.content, chunk.citations);\n                } else if (chunk.type === 'citation' && chunk.citations) {\n                  // Handle citation-only chunks\n                  const current = get().streamingMessage;\n                  if (current) {\n                    set({\n                      streamingMessage: {\n                        ...current,\n                        citations: chunk.citations\n                      }\n                    });\n                  }\n                }\n              },\n            async (streamError) => {\n                logger.error('MESSAGES', 'Streaming failed, attempting fallback to non-streaming', streamError);\n                \n                // Try fallback to non-streaming API\n                try {\n                  const response = await client.sendMessage(\n                    currentAgent.id,\n                    conversation.session_id,\n                    { \n                      prompt: content,\n                      stream: false\n                    }\n                  );\n                  \n                  // Update streaming message with the complete response\n                  const finalMessage = get().streamingMessage;\n                  if (finalMessage && response) {\n                    let messageData: any;\n                    if (response.data) {\n                      messageData = response.data;\n                    } else {\n                      messageData = response as any;\n                    }\n                    \n                    finalMessage.content = messageData?.openai_response || messageData?.content || 'No response received';\n                    finalMessage.citations = messageData?.citations || [];\n                    finalMessage.status = 'sent';\n                    get().addMessage(conversationId, finalMessage);\n                  }\n                  \n                  set({ \n                    streamingMessage: null,\n                    isStreaming: false,\n                  });\n                  \n                } catch (fallbackError) {\n                  logger.error('MESSAGES', 'Both streaming and non-streaming failed', fallbackError);\n                  throw fallbackError;\n                }\n              },\n            () => {\n                // onComplete callback\n                const finalMessage = get().streamingMessage;\n                if (finalMessage) {\n                  finalMessage.status = 'sent';\n                  get().addMessage(conversationId, finalMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                // Update conversation message count\n                conversationStore.getState().updateConversation(\n                  conversation.id,\n                  conversation.session_id,\n                  { name: conversation.name }\n                );\n              }\n          );\n        } catch (error) {\n          logger.error('MESSAGES', 'Failed to send message', error);\n          \n          // Remove assistant message placeholder on error\n          set({ \n            streamingMessage: null,\n            isStreaming: false,\n            error: error instanceof Error ? error.message : 'Failed to send message'\n          });\n          \n          throw error;\n        }\n      } catch (error) {\n        logger.error('MESSAGES', 'Error in sendMessage', error);\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to send message',\n          streamingMessage: null,\n          isStreaming: false,\n          loading: false,\n        });\n        throw error;\n      }\n    },\n\n    loadMessages: async (conversationId: string) => {\n      set({ loading: true, error: null });\n\n      try {\n        // Try to load from storage first\n        const cachedMessages = loadMessagesFromStorage(conversationId);\n        if (cachedMessages) {\n          set(state => ({\n            messages: new Map(state.messages).set(conversationId, cachedMessages),\n            loading: false,\n          }));\n          return;\n        }\n\n        // In a real implementation, would load from API\n        set(state => ({\n          messages: new Map(state.messages).set(conversationId, []),\n          loading: false,\n        }));\n      } catch (error) {\n        logger.error('MESSAGES', 'Failed to load messages', error);\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to load messages',\n          loading: false \n        });\n      }\n    },\n\n    addMessage: (conversationId: string, message: ChatMessage) => {\n      set(state => {\n        const newMessages = new Map(state.messages);\n        const messages = newMessages.get(conversationId) || [];\n        \n        // Check if message already exists\n        const existingIndex = messages.findIndex(m => m.id === message.id);\n        if (existingIndex >= 0) {\n          messages[existingIndex] = message;\n        } else {\n          messages.push(message);\n        }\n        \n        newMessages.set(conversationId, messages);\n        \n        // Save to storage\n        saveMessagesToStorage(conversationId, messages);\n        \n        return { messages: newMessages };\n      });\n    },\n\n    updateStreamingMessage: (content: string, citations?: Citation[]) => {\n      set(state => {\n        if (!state.streamingMessage) return state;\n        \n        return {\n          streamingMessage: {\n            ...state.streamingMessage,\n            content: state.streamingMessage.content + content,\n            citations: citations || state.streamingMessage.citations,\n          },\n        };\n      });\n    },\n\n    clearMessages: (conversationId?: string) => {\n      if (conversationId) {\n        set(state => {\n          const newMessages = new Map(state.messages);\n          newMessages.delete(conversationId);\n          return { messages: newMessages };\n        });\n        \n        // Clear from storage\n        try {\n          const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n          if (stored) {\n            const cache = JSON.parse(stored);\n            delete cache[conversationId];\n            localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n          }\n        } catch (error) {\n          console.error('Failed to clear messages from storage:', error);\n        }\n      } else {\n        // Clear all messages\n        set({ messages: new Map() });\n        \n        // Clear all from storage\n        try {\n          localStorage.removeItem(MESSAGES_STORAGE_KEY);\n        } catch (error) {\n          console.error('Failed to clear all messages from storage:', error);\n        }\n      }\n    },\n\n    cancelStreaming: () => {\n      globalStreamManager.cancelAllStreams();\n      set({ isStreaming: false, streamingMessage: null });\n    },\n\n    getMessagesForConversation: (conversationId: string): ChatMessage[] => {\n      return get().messages.get(conversationId) || [];\n    },\n\n    updateMessageFeedback: (messageId: string, feedback: FeedbackType) => {\n      set(state => {\n        const newMessages = new Map(state.messages);\n        \n        for (const [convId, messages] of newMessages) {\n          const messageIndex = messages.findIndex(m => m.id === messageId);\n          if (messageIndex !== -1) {\n            const updatedMessages = [...messages];\n            updatedMessages[messageIndex] = {\n              ...updatedMessages[messageIndex],\n              feedback,\n            };\n            newMessages.set(convId, updatedMessages);\n            saveMessagesToStorage(convId, updatedMessages);\n            break;\n          }\n        }\n        \n        return { messages: newMessages };\n      });\n    },\n\n    reset: () => {\n      set({\n        messages: new Map(),\n        streamingMessage: null,\n        isStreaming: false,\n        loading: false,\n        error: null,\n      });\n    },\n    \n    clearError: () => {\n      set({ error: null });\n    },\n    \n    setMessagesForConversation: (conversationId: string, messages: ChatMessage[]) => {\n      set(state => {\n        const newMessages = new Map(state.messages);\n        newMessages.set(conversationId, messages);\n        return { messages: newMessages };\n      });\n    },\n  }));\n}","/**\n * Widget-specific Conversation Store Factory\n * \n * Creates an isolated conversation store instance for each widget.\n * This ensures conversations are not shared between different widget instances.\n */\n\nimport { create, StoreApi } from 'zustand';\nimport type { Conversation } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateId } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n// Conversation Store interface - widget-specific version\nexport interface ConversationStore {\n  conversations: Conversation[];\n  currentConversation: Conversation | null;\n  loading: boolean;\n  error: string | null;\n  lastConversationActivity: Record<string, string>;\n  \n  // Pagination state\n  currentPage: number;\n  totalPages: number;\n  totalConversations: number;\n  perPage: number;\n  \n  // Sorting and filtering state\n  sortOrder: 'asc' | 'desc';\n  sortBy: string;\n  userFilter: 'all' | string;\n  \n  fetchConversations: (projectId: number, params?: {\n    page?: number;\n    per_page?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: string;\n    userFilter?: 'all' | string;\n  }) => Promise<void>;\n  loadConversations: (agentId: string) => Promise<void>; // Keep for compatibility\n  createConversation: (projectId: number, name?: string) => Promise<void>;\n  updateConversation: (conversationId: number, sessionId: string, data: { name: string }) => Promise<void>;\n  deleteConversation: (conversationId: string | number) => Promise<void>;\n  selectConversation: (conversation: Conversation) => void;\n  ensureConversation: (projectId: number, firstMessage?: string) => Promise<Conversation>;\n  reset: () => void;\n}\n\n/**\n * Create a conversation store instance for a specific widget\n * @param sessionId - The widget's session ID for isolation\n */\nexport function createConversationStore(sessionId: string): StoreApi<ConversationStore> {\n  const CONVERSATIONS_STORAGE_KEY = `customgpt-conversations-cache-${sessionId}`;\n  const ACTIVITY_STORAGE_KEY = `customgpt-conversation-activity-${sessionId}`;\n  \n  // Local storage helpers scoped to this instance\n  function saveConversationsToStorage(agentId: string, conversations: Conversation[]) {\n    try {\n      const stored = localStorage.getItem(CONVERSATIONS_STORAGE_KEY);\n      const cache = stored ? JSON.parse(stored) : {};\n      cache[agentId] = conversations;\n      localStorage.setItem(CONVERSATIONS_STORAGE_KEY, JSON.stringify(cache));\n    } catch (error) {\n      console.error('Failed to save conversations to storage:', error);\n    }\n  }\n\n  function loadConversationsFromStorage(agentId: string): Conversation[] | null {\n    try {\n      const stored = localStorage.getItem(CONVERSATIONS_STORAGE_KEY);\n      if (!stored) return null;\n      const cache = JSON.parse(stored);\n      return cache[agentId] || null;\n    } catch (error) {\n      console.error('Failed to load conversations from storage:', error);\n      return null;\n    }\n  }\n\n  function saveActivityToStorage(activity: Record<string, string>) {\n    try {\n      localStorage.setItem(ACTIVITY_STORAGE_KEY, JSON.stringify(activity));\n    } catch (error) {\n      console.error('Failed to save activity to storage:', error);\n    }\n  }\n\n  function loadActivityFromStorage(): Record<string, string> {\n    try {\n      const stored = localStorage.getItem(ACTIVITY_STORAGE_KEY);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.error('Failed to load activity from storage:', error);\n      return {};\n    }\n  }\n\n  return create<ConversationStore>((set, get) => ({\n    conversations: [],\n    currentConversation: null,\n    loading: false,\n    error: null,\n    lastConversationActivity: loadActivityFromStorage(),\n    // Pagination state\n    currentPage: 1,\n    totalPages: 1,\n    totalConversations: 0,\n    perPage: 20,\n    // Sorting and filtering state\n    sortOrder: 'desc' as const,\n    sortBy: 'id',\n    userFilter: 'all' as const,\n\n    fetchConversations: async (projectId: number, params?: {\n      page?: number;\n      per_page?: number;\n      order?: 'asc' | 'desc';\n      orderBy?: string;\n      userFilter?: 'all' | string;\n    }) => {\n      // For widgets, we load conversations differently\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      logger.info('CONVERSATIONS', 'Fetching conversations for widget', {\n        sessionId,\n        projectId,\n        isDemoMode\n      });\n\n      set({ loading: true, error: null });\n\n      try {\n        if (isDemoMode) {\n          // In demo mode, just load from local storage\n          return get().loadConversations(projectId.toString());\n        }\n        \n        // Get the list of conversation IDs that belong to this widget session\n        const widgetConvKey = `widget_conversations_${sessionId}`;\n        const widgetConvIds = JSON.parse(localStorage.getItem(widgetConvKey) || '[]');\n        \n        if (widgetConvIds.length === 0) {\n          // No conversations created yet in this widget session\n          set({\n            conversations: [],\n            loading: false,\n          });\n          return;\n        }\n        \n        // Fetch conversations from API but only keep ones created in this widget session\n        const client = getClient();\n        \n        // Merge params with current state\n        const queryParams = {\n          page: params?.page ?? get().currentPage,\n          per_page: params?.per_page ?? get().perPage,\n          order: params?.order ?? get().sortOrder,\n          orderBy: params?.orderBy ?? get().sortBy,\n          userFilter: params?.userFilter ?? get().userFilter,\n        };\n        \n        const response = await client.getConversations(projectId, queryParams);\n        \n        // Handle different response formats\n        let allConversations = [];\n        let paginationData = null;\n        \n        if (response && typeof response === 'object') {\n          // Standard paginated response format\n          if ((response as any).data && (response as any).data.data) {\n            allConversations = (response as any).data.data;\n            paginationData = (response as any).data;\n          } else if (Array.isArray((response as any).data)) {\n            allConversations = (response as any).data;\n          } else if (Array.isArray(response)) {\n            allConversations = response;\n          }\n        }\n        \n        // Filter to only include conversations created in this widget session\n        const widgetConversations = allConversations.filter((conv: Conversation) => \n          widgetConvIds.includes(conv.id)\n        );\n        \n        logger.info('CONVERSATIONS', 'Filtered widget conversations', {\n          totalFromAPI: allConversations.length,\n          widgetSpecific: widgetConversations.length,\n          widgetConvIds,\n          paginationData\n        });\n        \n        // Update state with conversations and pagination data\n        set({ \n          conversations: widgetConversations, \n          loading: false,\n          // Update pagination state if available\n          currentPage: paginationData?.current_page ?? 1,\n          totalPages: paginationData?.last_page ?? 1,\n          totalConversations: widgetConvIds.length, // Total widget conversations, not API total\n          // Update sorting/filtering if params were provided\n          ...(params?.order && { sortOrder: params.order }),\n          ...(params?.orderBy && { sortBy: params.orderBy }),\n          ...(params?.userFilter && { userFilter: params.userFilter }),\n        });\n        \n        // Save to local storage\n        saveConversationsToStorage(projectId.toString(), widgetConversations);\n      } catch (error) {\n        logger.error('CONVERSATIONS', 'Failed to fetch conversations', error);\n        // On error, try to load from local storage\n        const cached = loadConversationsFromStorage(projectId.toString());\n        set({ \n          conversations: cached || [],\n          error: error instanceof Error ? error.message : 'Failed to fetch conversations',\n          loading: false,\n        });\n      }\n    },\n\n    loadConversations: async (agentId: string) => {\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      logger.info('CONVERSATIONS', 'Loading conversations for widget store', {\n        sessionId,\n        agentId,\n        isDemoMode\n      });\n\n      set({ loading: true, error: null });\n\n      try {\n        // For widgets, we only load conversations from local storage that were created in this session\n        // We do NOT fetch from the API to ensure complete isolation\n        const cachedConversations = loadConversationsFromStorage(agentId);\n        \n        if (cachedConversations) {\n          // Filter to only include conversations created in this widget session\n          const sessionConversations = cachedConversations.filter(conv => \n            conv.session_id && conv.session_id.includes(sessionId)\n          );\n          \n          set({\n            conversations: sessionConversations,\n            loading: false,\n          });\n          \n          logger.info('CONVERSATIONS', 'Loaded session-specific conversations', {\n            totalCached: cachedConversations.length,\n            sessionSpecific: sessionConversations.length,\n            sessionId\n          });\n        } else {\n          // No conversations yet - start with empty array\n          set({\n            conversations: [],\n            loading: false,\n          });\n        }\n      } catch (error) {\n        logger.error('CONVERSATIONS', 'Failed to load conversations', error);\n        set({\n          error: error instanceof Error ? error.message : 'Failed to load conversations',\n          loading: false,\n          conversations: [] // Start with empty on error\n        });\n      }\n    },\n\n    createConversation: async (projectId: number, name?: string): Promise<void> => {\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      logger.info('CONVERSATIONS', 'Creating conversation in widget store', {\n        sessionId,\n        projectId,\n        name\n      });\n\n      set({ loading: true, error: null });\n\n      try {\n        // Use the API to create the conversation\n        const client = getClient();\n        \n        if (isDemoMode) {\n          // Demo mode - create locally only\n          const timestamp = Date.now();\n          const random = Math.floor(Math.random() * 1000000);\n          const sessionIdForConv = `demo_session_${timestamp}_${random}_${sessionId}`;\n\n          const newConversation: Conversation = {\n            id: Math.floor(Math.random() * 1000000),\n            session_id: sessionIdForConv,\n            project_id: projectId,\n            name: name || 'New Conversation',\n            message_count: 0,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            deleted_at: null,\n          };\n\n          set(state => ({\n            conversations: [...state.conversations, newConversation],\n            currentConversation: newConversation,\n            loading: false,\n          }));\n          \n          saveConversationsToStorage(projectId.toString(), [...get().conversations]);\n          return;\n        }\n        \n        // Create conversation via API\n        const response = await client.createConversation(projectId, name ? { name } : undefined);\n        const newConversation = response.data;\n        \n        // Ensure the conversation has our widget session ID in it for filtering\n        // Store the widget session ID in localStorage to track which conversations belong to this widget\n        const widgetConvKey = `widget_conversations_${sessionId}`;\n        const existingConvIds = JSON.parse(localStorage.getItem(widgetConvKey) || '[]');\n        existingConvIds.push(newConversation.id);\n        localStorage.setItem(widgetConvKey, JSON.stringify(existingConvIds));\n        \n        logger.info('CONVERSATIONS', 'Created conversation via API', {\n          conversationId: newConversation.id,\n          sessionId: newConversation.session_id,\n          projectId: newConversation.project_id,\n          widgetSessionId: sessionId\n        });\n        \n        set(state => ({ \n          conversations: [...state.conversations, newConversation],\n          currentConversation: newConversation,\n          loading: false,\n        }));\n        \n        // Save to local storage for this widget session\n        saveConversationsToStorage(projectId.toString(), get().conversations);\n      } catch (error) {\n        logger.error('CONVERSATIONS', 'Failed to create conversation', error);\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to create conversation',\n          loading: false \n        });\n        throw error;\n      }\n    },\n\n    updateConversation: async (conversationId: number, sessionId: string, data: { name: string }) => {\n      logger.info('CONVERSATIONS', 'Updating conversation in widget store', {\n        sessionId: sessionId,\n        conversationId,\n        data\n      });\n\n      set(state => ({\n        conversations: state.conversations.map(conv =>\n          conv.id.toString() === conversationId.toString()\n            ? { ...conv, name: data.name, updated_at: new Date().toISOString() }\n            : conv\n        ),\n      }));\n\n      // Update current conversation if it's the one being updated\n      const current = get().currentConversation;\n      if (current && current.id.toString() === conversationId.toString()) {\n        set({\n          currentConversation: { ...current, name: data.name, updated_at: new Date().toISOString() },\n        });\n      }\n\n      // Save to storage\n      const projectId = get().conversations.find(c => c.id.toString() === conversationId.toString())?.project_id;\n      if (projectId) {\n        saveConversationsToStorage(projectId.toString(), get().conversations);\n      }\n    },\n\n    deleteConversation: async (conversationId: string | number) => {\n      logger.info('CONVERSATIONS', 'Deleting conversation from widget store', {\n        sessionId,\n        conversationId\n      });\n\n      const conversation = get().conversations.find(c => c.id.toString() === conversationId);\n      if (!conversation) return;\n\n      set(state => ({\n        conversations: state.conversations.filter(conv => conv.id.toString() !== conversationId),\n        currentConversation: state.currentConversation?.id.toString() === conversationId\n          ? null\n          : state.currentConversation,\n      }));\n\n      // Save to storage\n      saveConversationsToStorage(conversation.project_id.toString(), get().conversations);\n    },\n\n    selectConversation: (conversation: Conversation) => {\n      logger.info('CONVERSATIONS', 'Selecting conversation in widget store', {\n        sessionId,\n        conversationId: conversation?.id\n      });\n\n      set({ currentConversation: conversation });\n\n      // Update activity tracking\n      if (conversation) {\n        const activity = { ...get().lastConversationActivity };\n        activity[conversation.project_id.toString()] = conversation.id.toString();\n        set({ lastConversationActivity: activity });\n        saveActivityToStorage(activity);\n      }\n    },\n\n    ensureConversation: async (projectId: number, firstMessage?: string) => {\n      const { currentConversation } = get();\n      \n      // If we have a current conversation for this agent, use it\n      if (currentConversation && currentConversation.project_id === projectId) {\n        return currentConversation;\n      }\n\n      // If no current conversation, always create a new one\n      // This ensures that seeing the welcome screen (currentConversation = null) \n      // always results in starting a fresh conversation\n      const title = firstMessage\n        ? firstMessage.substring(0, 50) + (firstMessage.length > 50 ? '...' : '')\n        : 'New Conversation';\n      \n      await get().createConversation(projectId, title);\n      \n      // Get the newly created conversation\n      const newConversation = get().conversations[get().conversations.length - 1];\n      set({ currentConversation: newConversation });\n      \n      return newConversation;\n    },\n\n    reset: () => {\n      set({\n        conversations: [],\n        currentConversation: null,\n        loading: false,\n        error: null,\n        lastConversationActivity: {},\n      });\n    },\n  }));\n}","/**\n * Widget-specific Agent Store Factory\n * \n * Creates an isolated agent store instance for each widget.\n * This ensures agent selection is not shared between different widget instances.\n */\n\nimport { create, StoreApi } from 'zustand';\nimport type { Agent } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\n\n// Agent Store interface - widget-specific version with minimal methods\nexport interface AgentStore {\n  agents: Agent[];\n  currentAgent: Agent | null;\n  loading: boolean;\n  error: string | null;\n  \n  loadAgents: () => Promise<void>;\n  fetchAgents: () => Promise<void>; // Alias for compatibility\n  selectAgent: (agent: Agent) => void;\n  setAgents: (agents: Agent[]) => void;\n  updateAgent: (id: number, data: { are_licenses_allowed?: boolean }) => Promise<Agent>;\n  deleteAgent: (id: number) => Promise<void>;\n  createAgent: (data: any) => Promise<Agent>;\n  replicateAgent: (id: number) => Promise<Agent>;\n  getAgentStats: (id: number) => Promise<any>;\n  reset: () => void;\n}\n\n/**\n * Create an agent store instance for a specific widget\n * @param sessionId - The widget's session ID for isolation\n */\nexport function createAgentStore(sessionId: string): StoreApi<AgentStore> {\n  const AGENTS_STORAGE_KEY = `customgpt-agents-cache-${sessionId}`;\n  const SELECTED_AGENT_KEY = `customgpt-selected-agent-${sessionId}`;\n  \n  // Local storage helpers scoped to this instance\n  function saveAgentsToStorage(agents: Agent[]) {\n    try {\n      localStorage.setItem(AGENTS_STORAGE_KEY, JSON.stringify(agents));\n    } catch (error) {\n      console.error('Failed to save agents to storage:', error);\n    }\n  }\n\n  function loadAgentsFromStorage(): Agent[] | null {\n    try {\n      const stored = localStorage.getItem(AGENTS_STORAGE_KEY);\n      return stored ? JSON.parse(stored) : null;\n    } catch (error) {\n      console.error('Failed to load agents from storage:', error);\n      return null;\n    }\n  }\n\n  function saveSelectedAgentToStorage(agentId: string | null) {\n    try {\n      if (agentId) {\n        localStorage.setItem(SELECTED_AGENT_KEY, agentId);\n      } else {\n        localStorage.removeItem(SELECTED_AGENT_KEY);\n      }\n    } catch (error) {\n      console.error('Failed to save selected agent to storage:', error);\n    }\n  }\n\n  function loadSelectedAgentFromStorage(): string | null {\n    try {\n      return localStorage.getItem(SELECTED_AGENT_KEY);\n    } catch (error) {\n      console.error('Failed to load selected agent from storage:', error);\n      return null;\n    }\n  }\n\n  return create<AgentStore>((set, get) => ({\n    agents: [],\n    currentAgent: null,\n    loading: false,\n    error: null,\n\n    fetchAgents: async () => {\n      // Alias for loadAgents for compatibility\n      return get().loadAgents();\n    },\n\n    loadAgents: async () => {\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      // Get widget instance from window using session ID\n      const widgetKey = `__customgpt_widget_${sessionId}`;\n      const widget = typeof window !== 'undefined' ? (window as any)[widgetKey] : null;\n      \n      logger.info('AGENTS', 'Loading agents for widget store', {\n        sessionId,\n        isDemoMode,\n        hasWidget: !!widget,\n        configuredAgentId: widget?.config?.agentId\n      });\n\n      set({ loading: true, error: null });\n\n      try {\n        // If widget has a configured agentId, fetch that specific agent from API\n        if (widget?.config?.agentId) {\n          const client = getClient();\n          \n          if (isDemoMode) {\n            // Demo mode - create fake agent\n            const singleAgent: Agent = {\n              id: widget.config.agentId,\n              project_name: widget.config.name || 'CustomGPT Assistant',\n              type: 'WIDGET',\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString(),\n              is_chat_active: true,\n              is_shared: false,\n              user_id: 0,\n              team_id: 0,\n            };\n\n            set({\n              agents: [singleAgent],\n              currentAgent: singleAgent,\n              loading: false,\n            });\n\n            saveAgentsToStorage([singleAgent]);\n            saveSelectedAgentToStorage(singleAgent.id.toString());\n            return;\n          }\n          \n          try {\n            // Fetch the specific agent from API\n            const response = await client.getAgent(widget.config.agentId);\n            const agent = response.data || response;\n            \n            logger.info('AGENTS', 'Fetched specific agent from API', {\n              agentId: agent.id,\n              agentName: agent.project_name\n            });\n            \n            set({\n              agents: [agent],\n              currentAgent: agent,\n              loading: false,\n            });\n\n            saveAgentsToStorage([agent]);\n            saveSelectedAgentToStorage(agent.id.toString());\n            return;\n          } catch (error) {\n            logger.error('AGENTS', 'Failed to fetch specific agent', error);\n            // Fall back to cached data if available\n            const cachedAgents = loadAgentsFromStorage();\n            if (cachedAgents && cachedAgents.length > 0) {\n              const agent = cachedAgents.find(a => a.id === widget.config.agentId) || cachedAgents[0];\n              set({\n                agents: cachedAgents,\n                currentAgent: agent,\n                loading: false,\n              });\n              return;\n            }\n            throw error;\n          }\n        }\n\n        // No specific agent ID - fetch agents from API with enterprise-scale pagination\n        if (!isDemoMode) {\n          const client = getClient();\n          // Load first batch with larger page size for better widget performance\n          const response = await client.getAgents({ page: 1, per_page: 100 });\n          \n          // Handle different response formats\n          let agents: Agent[] = [];\n          if (response && typeof response === 'object') {\n            if ('data' in response && 'total' in response) {\n              // Paginated response format\n              agents = (response as { data: Agent[] }).data;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              agents = (response as any).data;\n            } else if (Array.isArray(response)) {\n              // Legacy format: [...]\n              agents = response as Agent[];\n            }\n          }\n          \n          logger.info('AGENTS', 'Fetched agents from API (first page)', {\n            count: agents.length,\n            total: (response as any)?.total || agents.length\n          });\n          \n          // Select first agent or previously selected\n          const selectedAgentId = loadSelectedAgentFromStorage();\n          const selectedAgent = selectedAgentId \n            ? agents.find(a => a.id.toString() === selectedAgentId) || agents[0]\n            : agents[0];\n          \n          set({\n            agents,\n            currentAgent: selectedAgent || null,\n            loading: false,\n          });\n          \n          saveAgentsToStorage(agents);\n          if (selectedAgent) {\n            saveSelectedAgentToStorage(selectedAgent.id.toString());\n          }\n          return;\n        }\n\n        // Demo mode without specific agent ID\n        if (isDemoMode) {\n          // Create demo agents\n          const demoAgents: Agent[] = [\n            {\n              id: 1,\n              project_name: 'Demo Assistant',\n              type: 'DEMO',\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString(),\n              is_chat_active: true,\n              is_shared: false,\n              user_id: 0,\n              team_id: 0,\n            },\n          ];\n          \n          set({\n            agents: demoAgents,\n            currentAgent: demoAgents[0],\n            loading: false,\n          });\n          \n          saveAgentsToStorage(demoAgents);\n          saveSelectedAgentToStorage(demoAgents[0].id.toString());\n          return;\n        }\n\n        // Should not reach here\n        set({\n          agents: [],\n          currentAgent: null,\n          loading: false,\n        });\n      } catch (error) {\n        logger.error('AGENTS', 'Failed to load agents', error);\n        set({\n          error: error instanceof Error ? error.message : 'Failed to load agents',\n          loading: false,\n        });\n      }\n    },\n\n    selectAgent: (agent: Agent) => {\n      logger.info('AGENTS', 'Selecting agent in widget store', {\n        sessionId,\n        agentId: agent?.id,\n        agentName: agent?.project_name\n      });\n\n      set({ currentAgent: agent });\n      saveSelectedAgentToStorage(agent?.id.toString() || null);\n\n      // Update widget instance if available\n      const widgetKey = `__customgpt_widget_${sessionId}`;\n      const widget = typeof window !== 'undefined' ? (window as any)[widgetKey] : null;\n      \n      if (widget && agent) {\n        widget.config.agentId = agent.id;\n        widget.config.name = agent.project_name;\n      }\n    },\n\n    setAgents: (agents: Agent[]) => {\n      set({ agents });\n      saveAgentsToStorage(agents);\n    },\n\n    updateAgent: async (id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }) => {\n      logger.info('AGENTS', 'Updating agent in widget store', {\n        sessionId,\n        agentId: id,\n        data\n      });\n\n      const agent = get().agents.find(a => a.id === id);\n      if (!agent) {\n        throw new Error('Agent not found');\n      }\n\n      const updatedAgent = { ...agent, ...data };\n      \n      set(state => ({\n        agents: state.agents.map(a =>\n          a.id === id ? updatedAgent : a\n        ),\n        currentAgent: state.currentAgent?.id === id\n          ? updatedAgent\n          : state.currentAgent,\n      }));\n\n      // Save to storage\n      saveAgentsToStorage(get().agents);\n      \n      return updatedAgent;\n    },\n\n    deleteAgent: async (id: number) => {\n      logger.info('AGENTS', 'Deleting agent from widget store', {\n        sessionId,\n        agentId: id\n      });\n\n      set(state => ({\n        agents: state.agents.filter(a => a.id !== id),\n        currentAgent: state.currentAgent?.id === id ? null : state.currentAgent,\n      }));\n\n      // Save to storage\n      saveAgentsToStorage(get().agents);\n    },\n\n    createAgent: async (data: any) => {\n      // Widgets typically don't create agents, but we need this for compatibility\n      throw new Error('Creating agents is not supported in widget mode');\n    },\n\n    replicateAgent: async (id: number) => {\n      // Widgets typically don't replicate agents\n      throw new Error('Replicating agents is not supported in widget mode');\n    },\n\n    getAgentStats: async (id: number) => {\n      // Return empty stats for widget mode\n      return {\n        messages_sent: 0,\n        users_interacted: 0,\n        last_message_at: null\n      };\n    },\n\n    reset: () => {\n      set({\n        agents: [],\n        currentAgent: null,\n        loading: false,\n        error: null,\n      });\n      \n      // Clear storage\n      try {\n        localStorage.removeItem(AGENTS_STORAGE_KEY);\n        localStorage.removeItem(SELECTED_AGENT_KEY);\n      } catch (error) {\n        console.error('Failed to clear agent storage:', error);\n      }\n    },\n  }));\n}","import React, { createContext, useContext, useRef, ReactNode } from 'react';\nimport { StoreApi } from 'zustand';\nimport { createMessageStore, MessageStore } from '../store/widget-stores/messages';\nimport { createConversationStore, ConversationStore } from '../store/widget-stores/conversations';\nimport { createAgentStore, AgentStore } from '../store/widget-stores/agents';\n\n/**\n * Widget Store Context\n * \n * Provides instance-specific Zustand stores for each widget.\n * This ensures complete data isolation between multiple widgets.\n * \n * Each widget instance gets its own:\n * - Message store (for chat messages)\n * - Conversation store (for conversation management)\n * - Agent store (for agent selection)\n * \n * The config store remains global as API configuration should be shared.\n */\n\ninterface WidgetStores {\n  messageStore: StoreApi<MessageStore>;\n  conversationStore: StoreApi<ConversationStore>;\n  agentStore: StoreApi<AgentStore>;\n}\n\ninterface WidgetStoreContextValue {\n  stores: WidgetStores;\n}\n\nexport const WidgetStoreContext = createContext<WidgetStoreContextValue | null>(null);\n\ninterface WidgetStoreProviderProps {\n  children: ReactNode;\n  sessionId: string;\n}\n\n/**\n * Widget Store Provider\n * \n * Creates and provides instance-specific stores for a widget.\n * Stores are created once per widget instance and reused.\n */\nexport const WidgetStoreProvider: React.FC<WidgetStoreProviderProps> = ({ \n  children, \n  sessionId \n}) => {\n  // Use ref to ensure stores are only created once per widget instance\n  const storesRef = useRef<WidgetStores | null>(null);\n  \n  if (!storesRef.current) {\n    // Create stores in the correct order, passing references to dependent stores\n    const agentStore = createAgentStore(sessionId);\n    const conversationStore = createConversationStore(sessionId);\n    const messageStore = createMessageStore(sessionId, agentStore, conversationStore);\n    \n    storesRef.current = {\n      messageStore,\n      conversationStore,\n      agentStore,\n    };\n  }\n  \n  return (\n    <WidgetStoreContext.Provider value={{ stores: storesRef.current }}>\n      {children}\n    </WidgetStoreContext.Provider>\n  );\n};\n\n/**\n * Hook to access widget-specific stores\n */\nexport const useWidgetStores = (): WidgetStores => {\n  const context = useContext(WidgetStoreContext);\n  if (!context) {\n    throw new Error('useWidgetStores must be used within WidgetStoreProvider');\n  }\n  return context.stores;\n};\n\n/**\n * Individual store hooks for easier access\n */\nexport const useWidgetMessageStore = () => {\n  const { messageStore } = useWidgetStores();\n  return messageStore;\n};\n\nexport const useWidgetConversationStore = () => {\n  const { conversationStore } = useWidgetStores();\n  return conversationStore;\n};\n\nexport const useWidgetAgentStore = () => {\n  const { agentStore } = useWidgetStores();\n  return agentStore;\n};","/**\n * Widget Store Hooks\n * \n * These hooks automatically select between global and widget-specific stores\n * based on whether the component is rendered inside a widget context.\n */\n\nimport { useContext } from 'react';\nimport { useStore } from 'zustand';\nimport { WidgetStoreContext } from '../widget/WidgetStoreContext';\nimport { useMessageStore as useGlobalMessageStore } from '../store';\nimport { useConversationStore as useGlobalConversationStore } from '../store';\nimport { useAgentStore as useGlobalAgentStore } from '../store';\nimport type { MessageStore } from '../store/widget-stores/messages';\nimport type { ConversationStore } from '../store/widget-stores/conversations';\nimport type { AgentStore } from '../store/widget-stores/agents';\n\n/**\n * Check if we're inside a widget context\n */\nfunction useIsInWidgetContext(): boolean {\n  try {\n    const context = useContext(WidgetStoreContext);\n    return context !== null;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get widget stores if inside widget context\n */\nfunction useWidgetStores() {\n  const context = useContext(WidgetStoreContext);\n  return context?.stores;\n}\n\n/**\n * Message store hook that automatically selects the correct store\n */\nexport function useMessageStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  const globalStore = useGlobalMessageStore();\n  const widgetStore = useStore(\n    widgetStores?.messageStore || useGlobalMessageStore,\n    (state) => state\n  );\n  \n  return isInWidget && widgetStores ? widgetStore : globalStore;\n}\n\n/**\n * Conversation store hook that automatically selects the correct store\n */\nexport function useConversationStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  const globalStore = useGlobalConversationStore();\n  const widgetStore = useStore(\n    widgetStores?.conversationStore || useGlobalConversationStore,\n    (state) => state\n  );\n  \n  return isInWidget && widgetStores ? widgetStore : globalStore;\n}\n\n/**\n * Agent store hook that automatically selects the correct store\n */\nexport function useAgentStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  const globalStore = useGlobalAgentStore();\n  const widgetStore = useStore(\n    widgetStores?.agentStore || useGlobalAgentStore,\n    (state) => state\n  );\n  \n  return isInWidget && widgetStores ? widgetStore : globalStore;\n}\n\n/**\n * Export convenience functions to check store source\n */\nexport function useIsUsingWidgetStore(): boolean {\n  return useIsInWidgetContext();\n}\n\n/**\n * Get the current session ID if in widget context\n */\nexport function useWidgetSessionId(): string | null {\n  const context = useContext(WidgetStoreContext);\n  if (!context) return null;\n  \n  // Extract session ID from the store's localStorage key\n  const messageStore = context.stores.messageStore;\n  const state = messageStore.getState();\n  \n  // Session ID would need to be added to context for retrieval\n  return null;\n}","/**\n * Theme Manager\n * \n * Orchestrates theme switching, loading, and lifecycle management.\n * Provides centralized access to all available voice themes.\n */\n\nimport { IVoiceTheme, ThemeMetadata, ThemeFactory, VoiceState } from './IVoiceTheme';\n\nexport interface ThemeTransitionOptions {\n  duration: number;\n  easing: 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out';\n  crossfade: boolean;\n}\n\nexport interface ThemeRegistration {\n  id: string;\n  factory: ThemeFactory;\n  metadata: ThemeMetadata;\n}\n\n/**\n * Theme Manager - Singleton class for managing voice themes\n */\nexport class ThemeManager {\n  private static instance: ThemeManager;\n  private registeredThemes: Map<string, ThemeRegistration> = new Map();\n  private currentTheme: IVoiceTheme | null = null;\n  private canvas: HTMLCanvasElement | null = null;\n  private context: CanvasRenderingContext2D | null = null;\n  \n  // Transition state\n  private isTransitioning = false;\n  private transitionTheme: IVoiceTheme | null = null;\n  private transitionProgress = 0;\n  private transitionOptions: ThemeTransitionOptions = {\n    duration: 1000,\n    easing: 'ease-in-out',\n    crossfade: true\n  };\n\n  // Event callbacks\n  private callbacks: {\n    onThemeChange?: (oldTheme: string | null, newTheme: string) => void;\n    onTransitionStart?: (from: string | null, to: string) => void;\n    onTransitionComplete?: (themeId: string) => void;\n    onThemeError?: (error: Error, themeId: string) => void;\n  } = {};\n\n  private constructor() {\n    this.registerBuiltInThemes();\n  }\n\n  /**\n   * Get singleton instance\n   */\n  static getInstance(): ThemeManager {\n    if (!ThemeManager.instance) {\n      ThemeManager.instance = new ThemeManager();\n    }\n    return ThemeManager.instance;\n  }\n\n  /**\n   * Initialize with canvas context\n   */\n  initialize(canvas: HTMLCanvasElement, context: CanvasRenderingContext2D): void {\n    this.canvas = canvas;\n    this.context = context;\n    \n    // Initialize current theme if one is set\n    if (this.currentTheme && this.context) {\n      this.currentTheme.init(this.context, canvas.width, canvas.height);\n    }\n  }\n\n  /**\n   * Register a new theme\n   */\n  registerTheme(registration: ThemeRegistration): void {\n    if (this.registeredThemes.has(registration.id)) {\n      console.warn(`Theme ${registration.id} is already registered. Overwriting.`);\n    }\n    \n    this.registeredThemes.set(registration.id, registration);\n    console.log(`Registered theme: ${registration.id}`);\n  }\n\n  /**\n   * Unregister a theme\n   */\n  unregisterTheme(themeId: string): boolean {\n    if (this.currentTheme?.id === themeId) {\n      console.warn(`Cannot unregister active theme: ${themeId}`);\n      return false;\n    }\n    \n    return this.registeredThemes.delete(themeId);\n  }\n\n  /**\n   * Get all available themes metadata\n   */\n  getAvailableThemes(): ThemeMetadata[] {\n    return Array.from(this.registeredThemes.values()).map(reg => reg.metadata);\n  }\n\n  /**\n   * Get theme metadata by ID\n   */\n  getThemeMetadata(themeId: string): ThemeMetadata | null {\n    const registration = this.registeredThemes.get(themeId);\n    return registration ? registration.metadata : null;\n  }\n\n  /**\n   * Switch to a new theme\n   */\n  async switchTheme(themeId: string, transitionOptions?: Partial<ThemeTransitionOptions>): Promise<boolean> {\n    if (this.isTransitioning) {\n      console.warn('Theme transition already in progress');\n      return false;\n    }\n\n    const registration = this.registeredThemes.get(themeId);\n    if (!registration) {\n      const error = new Error(`Theme not found: ${themeId}`);\n      this.callbacks.onThemeError?.(error, themeId);\n      return false;\n    }\n\n    // If this is the current theme, no need to switch\n    if (this.currentTheme?.id === themeId) {\n      return true;\n    }\n\n    try {\n      // Update transition options\n      this.transitionOptions = { ...this.transitionOptions, ...transitionOptions };\n\n      // Create new theme instance\n      const newTheme = registration.factory();\n      \n      // Initialize with current context if available\n      if (this.context && this.canvas) {\n        newTheme.init(this.context, this.canvas.width, this.canvas.height);\n      }\n\n      // Start transition\n      await this.performThemeTransition(newTheme);\n      \n      return true;\n    } catch (error) {\n      console.error(`Failed to switch to theme ${themeId}:`, error);\n      this.callbacks.onThemeError?.(error as Error, themeId);\n      return false;\n    }\n  }\n\n  /**\n   * Get current active theme\n   */\n  getCurrentTheme(): IVoiceTheme | null {\n    return this.currentTheme;\n  }\n\n  /**\n   * Get current theme ID\n   */\n  getCurrentThemeId(): string | null {\n    return this.currentTheme?.id || null;\n  }\n\n  /**\n   * Set event callbacks\n   */\n  setCallbacks(callbacks: Partial<typeof this.callbacks>): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Draw current theme (delegated from Canvas component)\n   */\n  draw(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void {\n    if (this.isTransitioning && this.transitionOptions.crossfade) {\n      this.drawTransition(context, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    } else if (this.currentTheme) {\n      this.currentTheme.draw(context, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    }\n  }\n\n  /**\n   * Forward state changes to current theme\n   */\n  onUserSpeaking(): void {\n    this.currentTheme?.onUserSpeaking();\n    this.transitionTheme?.onUserSpeaking();\n  }\n\n  onProcessing(): void {\n    this.currentTheme?.onProcessing();\n    this.transitionTheme?.onProcessing();\n  }\n\n  onAiSpeaking(): void {\n    this.currentTheme?.onAiSpeaking();\n    this.transitionTheme?.onAiSpeaking();\n  }\n\n  reset(): void {\n    this.currentTheme?.reset();\n    this.transitionTheme?.reset();\n  }\n\n  /**\n   * Forward mouse events to current theme\n   */\n  setMousePosition(x: number, y: number, canvasWidth: number, canvasHeight: number): void {\n    this.currentTheme?.setMousePosition(x, y, canvasWidth, canvasHeight);\n    this.transitionTheme?.setMousePosition(x, y, canvasWidth, canvasHeight);\n  }\n\n  setHovering(hovering: boolean): void {\n    this.currentTheme?.setHovering(hovering);\n    this.transitionTheme?.setHovering(hovering);\n  }\n\n  /**\n   * Get performance metrics from current theme\n   */\n  getPerformanceMetrics() {\n    return this.currentTheme?.getPerformanceMetrics() || {};\n  }\n\n  /**\n   * Dispose of all resources\n   */\n  dispose(): void {\n    this.currentTheme?.dispose();\n    this.transitionTheme?.dispose();\n    this.currentTheme = null;\n    this.transitionTheme = null;\n    this.isTransitioning = false;\n  }\n\n  // Private methods\n\n  /**\n   * Register built-in themes\n   */\n  private registerBuiltInThemes(): void {\n    // Import themes dynamically to avoid circular dependencies\n    import('./DefaultTheme').then(({ DefaultTheme }) => {\n      this.registerTheme({\n        id: 'default',\n        factory: () => new DefaultTheme(),\n        metadata: {\n          id: 'default',\n          name: 'Classic Sphere',\n          description: 'The original 3D particle sphere with smooth color transitions',\n          category: 'particle',\n          performanceProfile: 'medium',\n          previewColors: ['#4285F4', '#34A853', '#EA4335'],\n          previewDescription: 'Rotating particle sphere with dynamic colors'\n        }\n      });\n    });\n\n    import('./StarfieldTheme').then(({ StarfieldTheme }) => {\n      this.registerTheme({\n        id: 'starfield',\n        factory: () => new StarfieldTheme(),\n        metadata: {\n          id: 'starfield',\n          name: 'Cosmic Starfield',\n          description: 'Twinkling stars, dynamic constellations, and flowing nebula clouds',\n          category: 'particle',\n          performanceProfile: 'medium',\n          previewColors: ['#FFFFFF', '#ADD8E6', '#FFD700', '#FFC0CB'],\n          previewDescription: 'Immersive space environment with stars and constellations'\n        }\n      });\n    });\n\n    import('./JarvisTheme').then(({ JarvisTheme }) => {\n      this.registerTheme({\n        id: 'jarvis',\n        factory: () => new JarvisTheme(),\n        metadata: {\n          id: 'jarvis',\n          name: 'J.A.R.V.I.S.',\n          description: 'Advanced AI interface with arc reactor, HUD elements, and energy particles',\n          category: 'advanced',\n          performanceProfile: 'heavy',\n          previewColors: ['#00A2E8', '#00FFFF', '#FF6500', '#FF00FF'],\n          previewDescription: 'Iron Man-inspired technological interface with arc reactor'\n        }\n      });\n    });\n\n    import('./LegoTheme').then(({ LegoTheme }) => {\n      this.registerTheme({\n        id: 'lego',\n        factory: () => new LegoTheme(),\n        metadata: {\n          id: 'lego',\n          name: 'LEGO Blocks',\n          description: '3D building blocks that construct and deconstruct with satisfying physics',\n          category: 'artistic',\n          performanceProfile: 'medium',\n          previewColors: ['#C4281C', '#0D69AB', '#12852B', '#F5CD2F'],\n          previewDescription: 'Interactive LEGO blocks building structures with authentic colors'\n        }\n      });\n    });\n\n    import('./StarWarsTheme').then(({ StarWarsTheme }) => {\n      this.registerTheme({\n        id: 'starwars',\n        factory: () => new StarWarsTheme(),\n        metadata: {\n          id: 'starwars',\n          name: 'Star Wars',\n          description: 'Lightsabers, holograms, and the Force in a galaxy far, far away',\n          category: 'advanced',\n          performanceProfile: 'heavy',\n          previewColors: ['#00A2FF', '#FF0000', '#00FF00', '#9333EA'],\n          previewDescription: 'Epic Star Wars experience with lightsabers and hologram effects'\n        }\n      });\n    });\n\n    import('./OceanWaveTheme').then(({ OceanWaveTheme }) => {\n      this.registerTheme({\n        id: 'ocean',\n        factory: () => new OceanWaveTheme(),\n        metadata: {\n          id: 'ocean',\n          name: 'Ocean Waves',\n          description: 'Calming underwater environment with waves, bubbles, and marine life',\n          category: 'particle',\n          performanceProfile: 'medium',\n          previewColors: ['#0077BE', '#00BCF2', '#C8E6FF', '#98CB3B'],\n          previewDescription: 'Serene ocean experience with realistic wave physics and bubbles'\n        }\n      });\n    });\n\n    import('./NFTTheme').then(({ NFTTheme }) => {\n      this.registerTheme({\n        id: 'nft',\n        factory: () => new NFTTheme(),\n        metadata: {\n          id: 'nft',\n          name: 'NFT Art',\n          description: 'Vibrant digital art with morphing shapes, dynamic gradients, and artistic trails',\n          category: 'artistic',\n          performanceProfile: 'heavy',\n          previewColors: ['#FF00FF', '#00FFFF', '#FFFF00', '#8000FF', '#FF0080'],\n          previewDescription: 'Bold NFT-style aesthetics with morphing geometric shapes'\n        }\n      });\n    });\n\n    import('./NothingPhoneTheme').then(({ NothingPhoneTheme }) => {\n      this.registerTheme({\n        id: 'nothing',\n        factory: () => new NothingPhoneTheme(),\n        metadata: {\n          id: 'nothing',\n          name: 'Nothing Phone',\n          description: 'Minimalist design inspired by Nothing Phone with clean dots and typography',\n          category: 'artistic',\n          performanceProfile: 'light',\n          previewColors: ['#FFFFFF', '#F5F5F5', '#C8C8C8', '#808080', '#000000'],\n          previewDescription: 'Clean minimalist interface with Glyph-inspired dot patterns'\n        }\n      });\n    });\n\n    import('./MinecraftTheme').then(({ MinecraftTheme }) => {\n      this.registerTheme({\n        id: 'minecraft',\n        factory: () => new MinecraftTheme(),\n        metadata: {\n          id: 'minecraft',\n          name: 'Minecraft',\n          description: 'Blocky voxel world with building, breaking, and crafting animations',\n          category: 'artistic',\n          performanceProfile: 'medium',\n          previewColors: ['#7CBD52', '#FEF63F', '#A28A4E', '#63EDE5', '#888888'],\n          previewDescription: 'Interactive voxel blocks with authentic Minecraft aesthetics'\n        }\n      });\n    });\n\n    import('./FuturisticTheme').then(({ FuturisticTheme }) => {\n      this.registerTheme({\n        id: 'futuristic',\n        factory: () => new FuturisticTheme(),\n        metadata: {\n          id: 'futuristic',\n          name: 'Futuristic',\n          description: 'High-tech cyberpunk interface with holograms, wireframes, and data streams',\n          category: 'advanced',\n          performanceProfile: 'heavy',\n          previewColors: ['#00FFFF', '#FF00FF', '#FFFF00', '#00FF00', '#0096FF'],\n          previewDescription: 'Cyberpunk-inspired holographic displays and wireframe models'\n        }\n      });\n    });\n\n    import('./VintageModernTheme').then(({ VintageModernTheme }) => {\n      this.registerTheme({\n        id: 'vintage-modern',\n        factory: () => new VintageModernTheme(),\n        metadata: {\n          id: 'vintage-modern',\n          name: 'Vintage Modern',\n          description: 'Retro aesthetics meets modern design with film grain and neon glow',\n          category: 'artistic',\n          performanceProfile: 'medium',\n          previewColors: ['#FF6F91', '#FF9A00', '#ED75FF', '#5FE1FA', '#FFF176'],\n          previewDescription: 'Nostalgic blend of retro TV effects with modern animations'\n        }\n      });\n    });\n\n    import('./AuroraTheme').then(({ AuroraTheme }) => {\n      this.registerTheme({\n        id: 'aurora',\n        factory: () => new AuroraTheme(),\n        metadata: {\n          id: 'aurora',\n          name: 'Aurora Borealis',\n          description: 'Ethereal northern lights with flowing ribbons and magnetic fields',\n          category: 'particle',\n          performanceProfile: 'heavy',\n          previewColors: ['#00FF00', '#0064FF', '#9300D3', '#FF0064', '#5FE1FA'],\n          previewDescription: 'Mesmerizing aurora borealis with realistic light bands'\n        }\n      });\n    });\n\n    console.log('ThemeManager: Built-in themes registered');\n  }\n\n  /**\n   * Perform theme transition\n   */\n  private async performThemeTransition(newTheme: IVoiceTheme): Promise<void> {\n    const oldTheme = this.currentTheme;\n    const oldThemeId = oldTheme?.id || null;\n    \n    this.isTransitioning = true;\n    this.transitionTheme = newTheme;\n    this.transitionProgress = 0;\n\n    // Notify callbacks\n    this.callbacks.onTransitionStart?.(oldThemeId, newTheme.id);\n\n    // If crossfade is disabled, immediately switch\n    if (!this.transitionOptions.crossfade) {\n      this.completeTransition(newTheme, oldTheme);\n      return;\n    }\n\n    // Animate transition\n    return new Promise((resolve) => {\n      const startTime = performance.now();\n      const { duration, easing } = this.transitionOptions;\n\n      const animate = (currentTime: number) => {\n        const elapsed = currentTime - startTime;\n        let progress = Math.min(elapsed / duration, 1);\n\n        // Apply easing\n        progress = this.applyEasing(progress, easing);\n        this.transitionProgress = progress;\n\n        if (progress >= 1) {\n          this.completeTransition(newTheme, oldTheme);\n          resolve();\n        } else {\n          requestAnimationFrame(animate);\n        }\n      };\n\n      requestAnimationFrame(animate);\n    });\n  }\n\n  /**\n   * Complete theme transition\n   */\n  private completeTransition(newTheme: IVoiceTheme, oldTheme: IVoiceTheme | null): void {\n    // Clean up old theme\n    oldTheme?.dispose();\n\n    // Set new theme as current\n    this.currentTheme = newTheme;\n    this.transitionTheme = null;\n    this.isTransitioning = false;\n    this.transitionProgress = 0;\n\n    // Notify callbacks\n    this.callbacks.onThemeChange?.(oldTheme?.id || null, newTheme.id);\n    this.callbacks.onTransitionComplete?.(newTheme.id);\n\n    console.log(`Theme switched to: ${newTheme.id}`);\n  }\n\n  /**\n   * Draw crossfade transition between themes\n   */\n  private drawTransition(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void {\n    // Create temporary canvases for each theme\n    const tempCanvas1 = document.createElement('canvas');\n    const tempCanvas2 = document.createElement('canvas');\n    tempCanvas1.width = tempCanvas2.width = displayWidth;\n    tempCanvas1.height = tempCanvas2.height = displayHeight;\n    \n    const tempCtx1 = tempCanvas1.getContext('2d');\n    const tempCtx2 = tempCanvas2.getContext('2d');\n\n    if (!tempCtx1 || !tempCtx2) return;\n\n    // Draw old theme to first canvas\n    if (this.currentTheme) {\n      this.currentTheme.draw(tempCtx1, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    }\n\n    // Draw new theme to second canvas\n    if (this.transitionTheme) {\n      this.transitionTheme.draw(tempCtx2, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    }\n\n    // Clear main canvas\n    context.clearRect(0, 0, displayWidth, displayHeight);\n\n    // Draw old theme with fading alpha\n    context.globalAlpha = 1 - this.transitionProgress;\n    context.drawImage(tempCanvas1, 0, 0);\n\n    // Draw new theme with increasing alpha\n    context.globalAlpha = this.transitionProgress;\n    context.drawImage(tempCanvas2, 0, 0);\n\n    // Reset alpha\n    context.globalAlpha = 1;\n  }\n\n  /**\n   * Apply easing function to transition progress\n   */\n  private applyEasing(t: number, easing: string): number {\n    switch (easing) {\n      case 'linear':\n        return t;\n      case 'ease-in':\n        return t * t;\n      case 'ease-out':\n        return t * (2 - t);\n      case 'ease-in-out':\n        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n      default:\n        return t;\n    }\n  }\n}\n\n/**\n * Convenience function to get theme manager instance\n */\nexport const getThemeManager = () => ThemeManager.getInstance();","import { useEffect, useRef, forwardRef } from \"react\";\nimport { getThemeManager } from '@/lib/voice/themes/ThemeManager';\nimport { DefaultTheme } from '@/lib/voice/themes/DefaultTheme';\nimport { throttle, debounce } from '@/lib/utils/throttle';\n\ninterface CanvasProps {\n  // Classic theme only - no theme switching\n}\n\nconst Canvas = forwardRef<HTMLCanvasElement, CanvasProps>(({}, ref) => {\n  const internalRef = useRef<HTMLCanvasElement>(null);\n  const canvasRef = (ref as any) || internalRef;\n  const themeManagerRef = useRef(getThemeManager());\n  const isInitializedRef = useRef(false);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const context = canvas.getContext('2d');\n    if (!context) return;\n\n    const themeManager = themeManagerRef.current;\n\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    \n    // Debounce resize to prevent excessive updates\n    const debouncedResize = debounce(resizeCanvas, 250);\n\n    resizeCanvas();\n    window.addEventListener('resize', debouncedResize);\n\n    // Initialize theme manager with canvas context\n    if (!isInitializedRef.current) {\n      themeManager.initialize(canvas, context);\n      \n      // Register default theme if not already registered\n      if (!themeManager.getThemeMetadata('default')) {\n        themeManager.registerTheme({\n          id: 'default',\n          factory: () => new DefaultTheme(),\n          metadata: {\n            id: 'default',\n            name: 'Classic Sphere',\n            description: 'The original 3D particle sphere with smooth color transitions',\n            category: 'particle',\n            performanceProfile: 'medium',\n            previewColors: ['#4285F4', '#34A853', '#EA4335'],\n            previewDescription: 'Rotating particle sphere with dynamic colors'\n          }\n        });\n      }\n\n      // Use default theme only\n      themeManager.switchTheme('default');\n      isInitializedRef.current = true;\n    }\n\n    // Throttled mouse move handler for better performance\n    const handleMouseMove = throttle((event: MouseEvent) => {\n      const rect = canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      themeManager.setMousePosition(x, y, canvas.width, canvas.height);\n    }, 16); // ~60fps for mouse movements\n\n    const handleMouseEnter = () => {\n      themeManager.setHovering(true);\n    };\n\n    const handleMouseLeave = () => {\n      themeManager.setHovering(false);\n    };\n\n    // Add mouse event listeners\n    canvas.addEventListener('mousemove', handleMouseMove);\n    canvas.addEventListener('mouseenter', handleMouseEnter);\n    canvas.addEventListener('mouseleave', handleMouseLeave);\n\n    let animationFrameId: number;\n    let lastTime = 0;\n    const targetFPS = 30; // Target 30 FPS for better performance\n    const frameInterval = 1000 / targetFPS;\n    \n    // Performance monitoring\n    let frameCount = 0;\n    let fpsTime = performance.now();\n    let currentFPS = targetFPS;\n\n    const render = (currentTime: number) => {\n      const deltaTime = currentTime - lastTime;\n      \n      // Only render if enough time has passed for target FPS\n      if (deltaTime >= frameInterval) {\n        // Update lastTime, adjusting for any time drift\n        lastTime = currentTime - (deltaTime % frameInterval);\n        \n        // Get current canvas dimensions\n        const currentWidth = canvas.width;\n        const currentHeight = canvas.height;\n        const currentProjCenterX = currentWidth / 2;\n        const currentProjCenterY = currentHeight / 2;\n        \n        // Delegate drawing to theme manager\n        themeManager.draw(context, currentWidth, currentHeight, currentProjCenterX, currentProjCenterY, deltaTime);\n        \n        // Performance monitoring\n        frameCount++;\n        const now = performance.now();\n        if (now - fpsTime >= 1000) {\n          currentFPS = frameCount;\n          frameCount = 0;\n          fpsTime = now;\n          \n          // Log performance warnings\n          if (currentFPS < targetFPS * 0.8) {\n            console.warn(`[VOICE-CANVAS] Low FPS detected: ${currentFPS}/${targetFPS}`);\n          }\n        }\n      }\n      \n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    \n    // Start the animation loop\n    animationFrameId = window.requestAnimationFrame(render);\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n      window.removeEventListener('resize', debouncedResize);\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('mouseenter', handleMouseEnter);\n      canvas.removeEventListener('mouseleave', handleMouseLeave);\n    };\n  }, []);\n\n  // Expose theme actions for parent component to call\n  (Canvas as any).getThemeManager = () => themeManagerRef.current;\n  (Canvas as any).onUserSpeaking = () => themeManagerRef.current.onUserSpeaking();\n  (Canvas as any).onProcessing = () => themeManagerRef.current.onProcessing();\n  (Canvas as any).onAiSpeaking = () => themeManagerRef.current.onAiSpeaking();\n  (Canvas as any).reset = () => themeManagerRef.current.reset();\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"absolute inset-0 w-full h-full\"\n      style={{ background: 'transparent' }}\n    />\n  );\n});\n\nCanvas.displayName = 'Canvas';\n\nexport default Canvas;","/**\n * Throttle function that limits how often a function can be called\n * @param func Function to throttle\n * @param delay Minimum time between calls in milliseconds\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let lastCall = 0;\n  let timeoutId: NodeJS.Timeout | null = null;\n\n  return (...args: Parameters<T>) => {\n    const now = Date.now();\n    const timeSinceLastCall = now - lastCall;\n\n    if (timeSinceLastCall >= delay) {\n      lastCall = now;\n      func(...args);\n    } else {\n      // Schedule a call for the remaining time\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      \n      const remainingTime = delay - timeSinceLastCall;\n      timeoutId = setTimeout(() => {\n        lastCall = Date.now();\n        func(...args);\n        timeoutId = null;\n      }, remainingTime);\n    }\n  };\n}\n\n/**\n * Debounce function that delays executing a function until after a specified time has elapsed\n * @param func Function to debounce\n * @param delay Time to wait in milliseconds\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let timeoutId: NodeJS.Timeout | null = null;\n\n  return (...args: Parameters<T>) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    \n    timeoutId = setTimeout(() => {\n      func(...args);\n      timeoutId = null;\n    }, delay);\n  };\n}","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nexport type VoiceOption = 'alloy' | 'echo' | 'fable' | 'onyx' | 'nova' | 'shimmer';\nexport type PersonaOption = 'assistant' | 'creative' | 'analytical' | 'casual' | 'professional';\n\ninterface VoiceSettings {\n  selectedVoice: VoiceOption;\n  selectedPersona: PersonaOption;\n  isVoiceModalOpen: boolean;\n}\n\ninterface VoiceSettingsActions {\n  setVoice: (voice: VoiceOption) => void;\n  setPersona: (persona: PersonaOption) => void;\n  setVoiceModalOpen: (isOpen: boolean) => void;\n  getSettings: () => Omit<VoiceSettings, 'isVoiceModalOpen'>;\n}\n\nexport type VoiceSettingsStore = VoiceSettings & VoiceSettingsActions;\n\n/**\n * Voice Settings Store\n * \n * Persists user's voice preferences including:\n * - Voice selection (OpenAI TTS voices)\n * - Persona selection (conversation style)\n */\nexport const useVoiceSettingsStore = create<VoiceSettingsStore>()(\n  persist(\n    (set, get) => ({\n      // Default settings\n      selectedVoice: 'alloy',\n      selectedPersona: 'assistant',\n      isVoiceModalOpen: false,\n\n      setVoice: (voice: VoiceOption) => {\n        set({ selectedVoice: voice });\n      },\n\n      setPersona: (persona: PersonaOption) => {\n        set({ selectedPersona: persona });\n      },\n\n      setVoiceModalOpen: (isOpen: boolean) => {\n        set({ isVoiceModalOpen: isOpen });\n      },\n\n      getSettings: () => {\n        const state = get();\n        return {\n          selectedVoice: state.selectedVoice,\n          selectedPersona: state.selectedPersona,\n        };\n      },\n    }),\n    {\n      name: 'customgpt-voice-settings',\n      // Persist all voice settings except modal state\n      partialize: (state) => ({\n        selectedVoice: state.selectedVoice,\n        selectedPersona: state.selectedPersona,\n        // Don't persist isVoiceModalOpen - always start as false\n      }),\n    }\n  )\n);\n\n// Export helper to get persona system prompts\nexport const getPersonaSystemPrompt = (persona: PersonaOption): string => {\n  const prompts: Record<PersonaOption, string> = {\n    assistant: 'You are a helpful assistant with a voice interface. Keep your responses concise and informative, limited to 1-2 sentences since the user is interacting through voice.',\n    creative: 'You are a creative and imaginative assistant with a voice interface. Be playful and artistic in your responses while keeping them brief (1-2 sentences) for voice interaction.',\n    analytical: 'You are a logical and precise assistant with a voice interface. Provide clear, data-driven responses in 1-2 concise sentences suitable for voice interaction.',\n    casual: 'You are a relaxed and conversational assistant with a voice interface. Keep responses friendly and informal, limited to 1-2 sentences for natural voice interaction.',\n    professional: 'You are a formal and business-focused assistant with a voice interface. Maintain a professional tone while keeping responses brief (1-2 sentences) for voice interaction.',\n  };\n  \n  return prompts[persona];\n};","'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Settings, Mic, User, X } from 'lucide-react';\nimport { useVoiceSettingsStore } from '@/store/voice-settings';\n\ninterface VoiceSettingsProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function VoiceSettings({ isOpen, onClose }: VoiceSettingsProps) {\n  console.log('🎛️ VoiceSettings render - isOpen:', isOpen);\n  \n  // Use persisted settings from store\n  const { selectedVoice, selectedPersona, setVoice, setPersona } = useVoiceSettingsStore();\n  \n  // Local state for preview before saving\n  const [previewVoice, setPreviewVoice] = useState(selectedVoice);\n  const [previewPersona, setPreviewPersona] = useState(selectedPersona);\n  \n  // Reset preview to saved values when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setPreviewVoice(selectedVoice);\n      setPreviewPersona(selectedPersona);\n    }\n  }, [isOpen, selectedVoice, selectedPersona]);\n\n  const voices = [\n    { id: 'alloy', name: 'Alloy', desc: 'Neutral' },\n    { id: 'echo', name: 'Echo', desc: 'Clear' },\n    { id: 'fable', name: 'Fable', desc: 'Warm' },\n    { id: 'onyx', name: 'Onyx', desc: 'Deep' },\n    { id: 'nova', name: 'Nova', desc: 'Bright' },\n    { id: 'shimmer', name: 'Shimmer', desc: 'Smooth' }\n  ];\n\n  const personas = [\n    { id: 'assistant', name: 'Assistant', desc: 'Helpful' },\n    { id: 'creative', name: 'Creative', desc: 'Artistic' },\n    { id: 'analytical', name: 'Analytical', desc: 'Logical' },\n    { id: 'casual', name: 'Casual', desc: 'Relaxed' },\n    { id: 'professional', name: 'Professional', desc: 'Formal' }\n  ];\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-[10001] bg-black/50 backdrop-blur-sm flex items-center justify-center p-4\">\n      <div className=\"bg-gray-900 rounded-2xl border border-gray-700 w-full max-w-2xl max-h-[70vh] flex flex-col\">\n        {/* Header */}\n        <div className=\"p-4 border-b border-gray-700 flex items-center justify-between flex-shrink-0\">\n          <div className=\"flex items-center gap-3\">\n            <Settings className=\"w-5 h-5 text-white\" />\n            <h2 className=\"text-lg font-semibold text-white\">Voice Settings</h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"w-8 h-8 rounded-full bg-gray-700 hover:bg-gray-600 flex items-center justify-center transition-colors\"\n          >\n            <X className=\"w-4 h-4 text-white\" />\n          </button>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 overflow-y-auto p-6 space-y-6\">\n          {/* Voice and Persona in a row */}\n          <div className=\"grid grid-cols-1 gap-6\">\n            {/* Voice Selection */}\n            <div>\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Mic className=\"w-4 h-4 text-white\" />\n                <h3 className=\"text-sm font-semibold text-white uppercase tracking-wider\">Voice</h3>\n              </div>\n              <div className=\"grid grid-cols-3 gap-2\">\n                {voices.map((voice) => (\n                  <button\n                    key={voice.id}\n                    onClick={() => setPreviewVoice(voice.id as any)}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewVoice === voice.id\n                        ? 'border-blue-500 bg-blue-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">{voice.name}</div>\n                    <div className=\"text-xs text-gray-400\">{voice.desc}</div>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Persona Selection */}\n            <div>\n              <div className=\"flex items-center gap-2 mb-3\">\n                <User className=\"w-4 h-4 text-white\" />\n                <h3 className=\"text-sm font-semibold text-white uppercase tracking-wider\">Persona</h3>\n              </div>\n              <div className=\"grid grid-cols-3 gap-2\">\n                {personas.map((persona) => (\n                  <button\n                    key={persona.id}\n                    onClick={() => setPreviewPersona(persona.id as any)}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewPersona === persona.id\n                        ? 'border-purple-500 bg-purple-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">{persona.name}</div>\n                    <div className=\"text-xs text-gray-400\">{persona.desc}</div>\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"p-4 border-t border-gray-700 flex justify-end gap-3 flex-shrink-0\">\n          <button\n            onClick={() => {\n              setPreviewVoice(selectedVoice);\n              setPreviewPersona(selectedPersona);\n              onClose();\n            }}\n            className=\"px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg text-white text-sm transition-colors\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={() => {\n              setVoice(previewVoice as any);\n              setPersona(previewPersona as any);\n              onClose();\n            }}\n            className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-white text-sm transition-colors\"\n          >\n            Save Settings\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","/**\n * Streaming TTS Manager\n * \n * Handles chunked text-to-speech for faster voice responses\n */\n\nexport class StreamingTTSManager {\n  private audioQueue: AudioBuffer[] = [];\n  private pendingChunks: Map<number, AudioBuffer> = new Map(); // Store chunks by ID\n  private nextExpectedChunkId = 0; // Track which chunk should play next\n  private isPlaying = false;\n  private audioContext: AudioContext | null = null;\n  private currentSource: AudioBufferSourceNode | null = null;\n  private onPlaybackComplete?: () => void;\n  private onError?: (error: string) => void;\n\n  constructor() {\n    this.initAudioContext();\n  }\n\n  private async initAudioContext() {\n    try {\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      \n      // Resume context if suspended (required for mobile)\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume();\n      }\n    } catch (error) {\n      console.error('Failed to initialize AudioContext:', error);\n    }\n  }\n\n  /**\n   * Add a text chunk to be converted to speech and queued\n   */\n  async addTextChunk(text: string, voice: string = 'alloy') {\n    try {\n      // Convert text to speech\n      const audioBuffer = await this.textToSpeech(text, voice);\n      \n      // Add to queue\n      this.audioQueue.push(audioBuffer);\n      \n      // Start playing if not already playing\n      if (!this.isPlaying) {\n        this.playNextChunk();\n      }\n    } catch (error) {\n      console.error('Failed to add text chunk:', error);\n      this.onError?.('Failed to generate speech for chunk');\n    }\n  }\n\n  /**\n   * Add a pre-generated audio buffer directly to the queue\n   * Used for streaming responses that provide ready audio chunks\n   */\n  async addAudioBuffer(audioBuffer: AudioBuffer) {\n    try {\n      // Add to queue - for backward compatibility without chunk ID\n      this.audioQueue.push(audioBuffer);\n      \n      // Start playing if not already playing\n      if (!this.isPlaying) {\n        this.playNextChunk();\n      }\n    } catch (error) {\n      console.error('Failed to add audio buffer:', error);\n      this.onError?.('Failed to queue audio buffer');\n    }\n  }\n\n  /**\n   * Add an audio buffer with a specific chunk ID to ensure ordered playback\n   */\n  async addAudioBufferWithId(audioBuffer: AudioBuffer, chunkId: number) {\n    try {\n      console.log(`[StreamingTTS] Adding chunk ${chunkId}, expecting ${this.nextExpectedChunkId}`);\n      \n      // Store the chunk\n      this.pendingChunks.set(chunkId, audioBuffer);\n      \n      // Check if we can queue any pending chunks in order\n      while (this.pendingChunks.has(this.nextExpectedChunkId)) {\n        const chunk = this.pendingChunks.get(this.nextExpectedChunkId)!;\n        this.pendingChunks.delete(this.nextExpectedChunkId);\n        \n        console.log(`[StreamingTTS] Queuing chunk ${this.nextExpectedChunkId} in order`);\n        this.audioQueue.push(chunk);\n        this.nextExpectedChunkId++;\n        \n        // Start playing if not already playing\n        if (!this.isPlaying) {\n          this.playNextChunk();\n        }\n      }\n      \n      console.log(`[StreamingTTS] Pending chunks: ${Array.from(this.pendingChunks.keys()).sort().join(', ')}`);\n    } catch (error) {\n      console.error('Failed to add audio buffer with ID:', error);\n      this.onError?.('Failed to queue audio buffer');\n    }\n  }\n\n  /**\n   * Convert text to speech using OpenAI TTS API\n   */\n  private async textToSpeech(text: string, voice: string): Promise<AudioBuffer> {\n    if (!text.trim()) {\n      throw new Error('Empty text provided');\n    }\n\n    // Call TTS API\n    const response = await fetch('/api/proxy/tts/stream', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'tts-1', // Use faster model for streaming\n        input: text,\n        voice: voice,\n        response_format: 'mp3'\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`TTS API error: ${response.status}`);\n    }\n\n    const audioBlob = await response.blob();\n    const arrayBuffer = await audioBlob.arrayBuffer();\n\n    if (!this.audioContext) {\n      throw new Error('AudioContext not initialized');\n    }\n\n    return await this.audioContext.decodeAudioData(arrayBuffer);\n  }\n\n  /**\n   * Play the next audio chunk in the queue\n   */\n  private async playNextChunk() {\n    if (this.audioQueue.length === 0) {\n      this.isPlaying = false;\n      this.onPlaybackComplete?.();\n      return;\n    }\n\n    if (!this.audioContext) {\n      console.error('AudioContext not available');\n      return;\n    }\n\n    this.isPlaying = true;\n    const audioBuffer = this.audioQueue.shift();\n\n    if (!audioBuffer) return;\n\n    try {\n      // Create and configure audio source\n      this.currentSource = this.audioContext.createBufferSource();\n      this.currentSource.buffer = audioBuffer;\n      this.currentSource.connect(this.audioContext.destination);\n\n      // Set up completion handler\n      this.currentSource.onended = () => {\n        this.currentSource = null;\n        // Add a small delay between chunks for smoother playback\n        setTimeout(() => {\n          this.playNextChunk(); // Play next chunk\n        }, 50);\n      };\n\n      // Start playback\n      this.currentSource.start(0);\n      \n    } catch (error) {\n      console.error('Failed to play audio chunk:', error);\n      // Try to continue with the next chunk\n      setTimeout(() => {\n        this.playNextChunk();\n      }, 100);\n    }\n  }\n\n  /**\n   * Stop all playback and clear queue\n   */\n  stopPlayback() {\n    // Stop current audio\n    if (this.currentSource) {\n      try {\n        this.currentSource.stop();\n      } catch (error) {\n        // Ignore errors from stopping already stopped sources\n      }\n      this.currentSource = null;\n    }\n\n    // Clear queue and pending chunks\n    this.audioQueue = [];\n    this.pendingChunks.clear();\n    this.nextExpectedChunkId = 0;\n    this.isPlaying = false;\n  }\n\n  /**\n   * Reset the chunk ID counter for a new streaming session\n   */\n  resetChunkCounter() {\n    this.nextExpectedChunkId = 0;\n    this.pendingChunks.clear();\n    console.log('[StreamingTTS] Chunk counter reset for new session');\n  }\n\n  /**\n   * Check if audio is currently playing\n   */\n  isCurrentlyPlaying(): boolean {\n    return this.isPlaying;\n  }\n\n  /**\n   * Get number of chunks in queue\n   */\n  getQueueLength(): number {\n    return this.audioQueue.length;\n  }\n\n  /**\n   * Set callback for when all queued audio finishes playing\n   */\n  onPlaybackCompleted(callback: () => void) {\n    this.onPlaybackComplete = callback;\n  }\n\n  /**\n   * Set callback for errors\n   */\n  onStreamingError(callback: (error: string) => void) {\n    this.onError = callback;\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy() {\n    this.stopPlayback();\n    this.pendingChunks.clear();\n    this.nextExpectedChunkId = 0;\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n  }\n}\n\n/**\n * Text chunking utilities for optimal TTS streaming\n */\nexport class TextChunker {\n  /**\n   * Split text into optimal chunks for TTS\n   * Aims for natural speech breaks while keeping chunks reasonably sized\n   */\n  static chunkText(text: string, maxChunkSize: number = 200): string[] {\n    const chunks: string[] = [];\n    \n    // Split by sentences first\n    const sentences = text.split(/[.!?]+/).filter(s => s.trim());\n    \n    let currentChunk = '';\n    \n    for (const sentence of sentences) {\n      const trimmedSentence = sentence.trim();\n      if (!trimmedSentence) continue;\n      \n      // If adding this sentence would exceed max size and we have content, finalize chunk\n      if (currentChunk && (currentChunk.length + trimmedSentence.length + 2) > maxChunkSize) {\n        chunks.push(currentChunk.trim() + '.');\n        currentChunk = trimmedSentence;\n      } else {\n        currentChunk += (currentChunk ? '. ' : '') + trimmedSentence;\n      }\n    }\n    \n    // Add final chunk\n    if (currentChunk.trim()) {\n      chunks.push(currentChunk.trim() + (currentChunk.endsWith('.') ? '' : '.'));\n    }\n    \n    return chunks;\n  }\n\n  /**\n   * Smart chunking that considers punctuation and natural breaks\n   */\n  static smartChunk(text: string, targetChunkSize: number = 150): string[] {\n    const chunks: string[] = [];\n    \n    // Priority order for splitting: sentences, clauses, phrases, words\n    const breakPoints = [\n      /[.!?]+\\s+/g,  // Sentence endings\n      /[,;:]\\s+/g,   // Clause breaks\n      /\\s+(?=and|but|or|so|yet|for|nor)\\s+/g, // Conjunctions\n      /\\s+/g         // Word breaks (fallback)\n    ];\n    \n    let remainingText = text;\n    \n    while (remainingText.length > targetChunkSize) {\n      let bestSplit = -1;\n      \n      // Try each break point type in order of preference\n      for (const breakRegex of breakPoints) {\n        const matches = Array.from(remainingText.matchAll(breakRegex));\n        \n        // Find the best split point (closest to target size without going over)\n        for (const match of matches) {\n          const splitIndex = match.index! + match[0].length;\n          if (splitIndex <= targetChunkSize && splitIndex > bestSplit) {\n            bestSplit = splitIndex;\n          }\n        }\n        \n        if (bestSplit > 0) break; // Found a good split\n      }\n      \n      // If no good split found, split at target size\n      if (bestSplit <= 0) {\n        bestSplit = targetChunkSize;\n      }\n      \n      chunks.push(remainingText.slice(0, bestSplit).trim());\n      remainingText = remainingText.slice(bestSplit).trim();\n    }\n    \n    // Add final chunk\n    if (remainingText) {\n      chunks.push(remainingText);\n    }\n    \n    return chunks.filter(chunk => chunk.length > 0);\n  }\n}","import { utils } from \"@ricky0123/vad-react\";\nimport type { VoiceOption, PersonaOption } from '@/store/voice-settings';\nimport { StreamingTTSManager } from './streaming-tts';\n\nexport interface VoiceCallbacks {\n  onUserSpeaking?: () => void;\n  onProcessing?: () => void;\n  onAiSpeaking?: () => void;\n  onReset?: () => void;\n  onError?: (error: string) => void;\n  onDebug?: (message: string, data?: any) => void;\n  // New callbacks for message store integration\n  onTranscriptReceived?: (transcript: string) => void;\n  onResponseReceived?: (response: string) => void;\n  // Streaming callbacks\n  onStreamingTextChunk?: (textChunk: string) => void;\n  onStreamingAudioReady?: (audioUrl: string, chunkId: string) => void;\n  onStreamingComplete?: (fullResponse: string, transcript: string) => void;\n}\n\nclass SpeechManager {\n  private source: AudioBufferSourceNode | null = null;\n  private sourceIsStarted = false;\n  private conversationThusFar: any[] = [];\n  private callbacks: VoiceCallbacks = {};\n  private projectId: string | null = null;\n  private sessionId: string | null = null;\n  private voiceSettings: { voice: VoiceOption; persona: PersonaOption } | null = null;\n  private streamingTTS: StreamingTTSManager | null = null;\n  // Streaming is always enabled for optimal performance\n\n  setCallbacks(callbacks: VoiceCallbacks) {\n    this.callbacks = callbacks;\n    this.debug(\"Callbacks set\", { hasCallbacks: Object.keys(callbacks) });\n  }\n\n  setProjectId(projectId: string) {\n    this.projectId = projectId;\n    this.debug(\"Project ID set\", { projectId });\n  }\n\n  setSessionId(sessionId: string | null) {\n    this.sessionId = sessionId;\n    this.debug(\"Session ID set\", { sessionId });\n  }\n\n  setVoiceSettings(voice: VoiceOption, persona: PersonaOption) {\n    this.voiceSettings = { voice, persona };\n    this.debug(\"Voice settings set\", { voice, persona });\n  }\n\n  private debug(message: string, data?: any) {\n    // Production: Debug logging disabled\n    // Uncomment for development debugging:\n    // const timestamp = new Date().toISOString();\n    // console.log(`🎯 [SPEECH-MANAGER ${timestamp}] ${message}`, data || '');\n    this.callbacks.onDebug?.(message, data);\n  }\n\n  private error(message: string, error?: any) {\n    const timestamp = new Date().toISOString();\n    console.error(`❌ [SPEECH-MANAGER ${timestamp}] ${message}`, error || '');\n    this.callbacks.onError?.(message);\n  }\n\n  onSpeechStart = () => {\n    this.debug(\"Speech started - user is speaking\");\n    this.callbacks.onUserSpeaking?.();\n    this.stopSourceIfNeeded();\n  };\n\n  onSpeechEnd = async (audio: Float32Array) => {\n    this.debug(\"Speech ended\", { \n      audioLength: audio.length,\n      audioDuration: `${audio.length / 16000}s` // Assuming 16kHz sample rate\n    });\n    await this.processAudio(audio);\n  };\n\n  onMisfire = () => {\n    this.debug(\"VAD misfire - noise detected but not speech\");\n    this.callbacks.onReset?.();\n  };\n\n  private stopSourceIfNeeded = () => {\n    if (this.source && this.sourceIsStarted) {\n      this.debug(\"Stopping current audio playback\");\n      this.source.stop(0);\n      this.sourceIsStarted = false;\n    }\n  };\n\n  // Public method to stop audio playback\n  public stopAudio = () => {\n    this.stopSourceIfNeeded();\n    \n    // Also stop streaming TTS if active\n    if (this.streamingTTS) {\n      this.streamingTTS.stopPlayback();\n      this.debug(\"🛑 Streaming TTS stopped\");\n    }\n    \n    this.callbacks.onReset?.();\n    this.debug(\"Audio stopped by user\");\n  };\n\n  // Public method to process manually recorded audio\n  public processManualAudio = async (audioBlob: Blob) => {\n    this.debug(\"Processing manual audio\", { \n      size: `${(audioBlob.size / 1024).toFixed(2)}KB`,\n      type: audioBlob.type\n    });\n    this.callbacks.onProcessing?.();\n    \n    try {\n      await this.validate(audioBlob);\n      await this.sendData(audioBlob);\n    } catch (error) {\n      this.error('Error processing manual audio', error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private processAudio = async (audio: Float32Array) => {\n    this.debug(\"Processing audio started\");\n    this.callbacks.onProcessing?.();\n    \n    try {\n      const blob = this.createAudioBlob(audio);\n      await this.validate(blob);\n      await this.sendData(blob);\n    } catch (error) {\n      this.error('Error processing audio', error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private createAudioBlob = (audio: Float32Array): Blob => {\n    const wavBuffer = utils.encodeWAV(audio);\n    const blob = new Blob([wavBuffer], { type: 'audio/wav' });\n    this.debug(\"Created audio blob\", { \n      size: `${(blob.size / 1024).toFixed(2)}KB`,\n      type: blob.type,\n      samples: audio.length,\n      duration: `${audio.length / 16000}s` // Assuming 16kHz from VAD\n    });\n    return blob;\n  };\n\n  private sendData = async (blob: Blob) => {\n    // Always use streaming mode\n    await this.sendStreamingData(blob);\n  };\n\n  private sendStreamingData = async (blob: Blob) => {\n    this.debug(\"🚀 Sending audio data to streaming API\");\n    \n    if (!this.projectId) {\n      this.error('No project ID set - cannot send audio');\n      this.callbacks.onReset?.();\n      return;\n    }\n\n    // Initialize streaming TTS manager\n    if (!this.streamingTTS) {\n      this.streamingTTS = new StreamingTTSManager();\n      this.streamingTTS.onPlaybackCompleted(() => {\n        this.debug(\"🔄 Streaming playback completed\");\n        this.callbacks.onReset?.();\n      });\n      this.streamingTTS.onStreamingError((error) => {\n        this.error('🎵 Streaming TTS error', error);\n      });\n    } else {\n      // Reset chunk counter for new streaming session\n      this.streamingTTS.resetChunkCounter();\n    }\n\n    const formData = new FormData();\n    formData.append(\"audio\", blob, \"audio.wav\");\n    formData.append(\"project_id\", this.projectId);\n    if (this.sessionId) {\n      formData.append(\"session_id\", this.sessionId);\n    }\n    \n    // Add voice settings to the request\n    if (this.voiceSettings) {\n      formData.append(\"voice\", this.voiceSettings.voice);\n      formData.append(\"persona\", this.voiceSettings.persona);\n    }\n\n    this.debug(\"🔄 Starting streaming voice request\", {\n      projectId: this.projectId,\n      sessionId: this.sessionId,\n      conversationLength: this.conversationThusFar.length,\n      audioSize: `${(blob.size / 1024).toFixed(2)}KB`,\n      voice: this.voiceSettings?.voice,\n      persona: this.voiceSettings?.persona,\n      lastMessages: this.conversationThusFar.slice(-2).map(m => ({ role: m.role, preview: m.content.slice(0, 50) }))\n    });\n\n    try {\n      // Check for demo mode OpenAI key\n      const headers: Record<string, string> = {\n        'conversation': this.base64Encode(JSON.stringify(this.conversationThusFar))\n      };\n      \n      // Add deployment mode header\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n      headers['X-Deployment-Mode'] = deploymentMode;\n      \n      console.log('🔍 [SPEECH-MANAGER] Deployment mode from localStorage:', deploymentMode);\n      console.log('🔍 [SPEECH-MANAGER] localStorage value:', localStorage.getItem('customgpt.deploymentMode'));\n      console.log('🔍 [SPEECH-MANAGER] Sending headers:', headers);\n      \n      // In demo mode, add keys from window object if available\n      if (deploymentMode === 'demo') {\n        // Add OpenAI key for TTS/STT\n        if ((window as any).__demoOpenAIKey) {\n          headers['X-OpenAI-API-Key'] = (window as any).__demoOpenAIKey;\n        }\n        // Add CustomGPT API key for chat completions\n        if ((window as any).__demoCustomGPTKey) {\n          headers['X-CustomGPT-API-Key'] = (window as any).__demoCustomGPTKey;\n        }\n      }\n      \n      const response = await fetch(\"/api/proxy/voice/streaming\", {\n        method: \"POST\",\n        body: formData,\n        headers\n      });\n\n      this.debug(\"🎯 Streaming response received\", {\n        status: response.status,\n        ok: response.ok,\n        contentType: response.headers.get('content-type')\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch {\n          errorData = { error: errorText };\n        }\n        \n        // Check if it's specifically an OpenAI API key error\n        if (response.status === 503 && errorData.userMessage) {\n          throw new Error(errorData.userMessage);\n        }\n        \n        throw new Error(`Streaming API Error (${response.status}): ${errorData.error || errorText}`);\n      }\n\n      // Process streaming response\n      await this.processStreamingResponse(response);\n    } catch (error) {\n      this.error(\"❌ Failed to process streaming voice\", error);\n      this.handleError(error);\n    }\n  };\n\n  private processStreamingResponse = async (response: Response) => {\n    if (!response.body) {\n      throw new Error(\"No response body for streaming\");\n    }\n\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    \n    let fullResponse = '';\n    let transcript = '';\n    let currentStreamingActive = false;\n\n    this.debug(\"🔄 Processing streaming response chunks\");\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          this.debug(\"✅ Streaming response complete\");\n          break;\n        }\n\n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data.trim() === '') continue;\n\n            try {\n              const parsed = JSON.parse(data);\n              \n              if (parsed.type === 'text') {\n                // Stream text chunk\n                fullResponse += parsed.text;\n                \n                // Trigger UI update for text streaming\n                this.callbacks.onStreamingTextChunk?.(parsed.text);\n                \n                this.debug(`📝 Text chunk received: \"${parsed.text}\"`);\n                \n              } else if (parsed.type === 'audio' || parsed.type === 'audio_ref') {\n                // Audio chunk ready - queue it for playback\n                if (parsed.audioUrl || parsed.audioId) {\n                  if (!currentStreamingActive) {\n                    this.callbacks.onAiSpeaking?.();\n                    currentStreamingActive = true;\n                  }\n                  \n                  // Handle both legacy data URL and new audio reference\n                  if (parsed.audioUrl) {\n                    // Legacy: Convert data URL to audio and queue it\n                    await this.queueAudioChunk(parsed.audioUrl, parsed.chunkId);\n                  } else if (parsed.audioId) {\n                    // New: Fetch audio chunk by ID\n                    await this.queueAudioChunkById(parsed.audioId, parsed.chunkId);\n                  }\n                  \n                  this.debug(`🎵 Audio chunk queued: ${parsed.chunkId} (${parsed.text?.slice(0, 50)}...)`);\n                }\n                \n              } else if (parsed.type === 'complete') {\n                // Stream complete\n                fullResponse = parsed.fullResponse || fullResponse;\n                transcript = parsed.transcript || transcript;\n                \n                this.debug(\"✅ Stream complete\", { \n                  responseLength: fullResponse.length,\n                  transcript \n                });\n                \n                console.log(`📝 [SPEECH-MANAGER] Complete fullResponse (${fullResponse.length} chars):`, fullResponse);\n                console.log(`📝 [SPEECH-MANAGER] Includes \"individuals\":`, fullResponse.includes('individuals'));\n                console.log(`📝 [SPEECH-MANAGER] Includes \"like\":`, fullResponse.includes('like'));\n                console.log(`📝 [SPEECH-MANAGER] Includes \"CustomGPT\":`, fullResponse.includes('CustomGPT'));\n                \n                // Trigger callbacks for UI updates\n                // Don't update conversationThusFar here - let the message store be the single source of truth\n                if (transcript) {\n                  this.callbacks.onTranscriptReceived?.(transcript);\n                }\n                \n                if (fullResponse) {\n                  this.callbacks.onResponseReceived?.(fullResponse);\n                }\n                \n                this.callbacks.onStreamingComplete?.(fullResponse, transcript);\n                \n              } else if (parsed.type === 'error') {\n                // Stream error\n                this.error(`🚨 Stream error: ${parsed.error}`);\n                this.callbacks.onReset?.();\n              }\n            } catch (parseError) {\n              this.debug(`⚠️ Failed to parse chunk: ${data}`, parseError);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      this.error(\"❌ Error processing streaming response\", error);\n      this.callbacks.onReset?.();\n    } finally {\n      reader.releaseLock();\n    }\n  };\n\n  private queueAudioChunk = async (audioDataUrl: string, chunkId: string) => {\n    if (!this.streamingTTS) {\n      this.error(\"❌ StreamingTTS not initialized\");\n      return;\n    }\n\n    try {\n      // Extract numeric chunk ID from the string (e.g., \"chunk_0\" -> 0)\n      const numericChunkId = parseInt(chunkId.replace('chunk_', ''));\n      \n      // Convert data URL to blob\n      const response = await fetch(audioDataUrl);\n      const audioBlob = await response.blob();\n      \n      // Convert blob to ArrayBuffer for Web Audio API\n      const arrayBuffer = await audioBlob.arrayBuffer();\n      \n      // Create audio context and decode\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      // Queue the decoded audio buffer with ID for ordered playback\n      await this.streamingTTS.addAudioBufferWithId(audioBuffer, numericChunkId);\n      \n      this.debug(`🎵 Audio chunk queued with ID ${numericChunkId}: ${chunkId}`);\n    } catch (error) {\n      this.error(`❌ Failed to queue audio chunk ${chunkId}`, error);\n    }\n  };\n\n  // Legacy sendLegacyData method removed - streaming is always used\n  \n  private queueAudioChunkById = async (audioId: string, chunkId: string) => {\n    if (!this.streamingTTS) {\n      this.error(\"❌ StreamingTTS not initialized\");\n      return;\n    }\n\n    try {\n      // Extract numeric chunk ID from the string (e.g., \"chunk_0\" -> 0)\n      const numericChunkId = parseInt(chunkId.replace('chunk_', ''));\n      \n      // Fetch audio chunk by ID from the streaming endpoint\n      const response = await fetch(`/api/proxy/voice/streaming?id=${audioId}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          // Audio chunk not found - this can happen after server restart\n          this.debug(`⚠️ Audio chunk not found (server may have restarted): ${chunkId}`);\n          return; // Skip this chunk gracefully\n        }\n        throw new Error(`Failed to fetch audio chunk: ${response.status}`);\n      }\n      \n      const audioBlob = await response.blob();\n      \n      // Convert blob to ArrayBuffer for Web Audio API\n      const arrayBuffer = await audioBlob.arrayBuffer();\n      \n      // Create audio context and decode\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      // Queue the decoded audio buffer with ID for ordered playback\n      await this.streamingTTS.addAudioBufferWithId(audioBuffer, numericChunkId);\n      \n      this.debug(`🎵 Audio chunk fetched and queued with ID ${numericChunkId}: ${chunkId}`);\n    } catch (error) {\n      this.error(`❌ Failed to fetch/queue audio chunk ${chunkId}`, error);\n    }\n  };\n\n  // Legacy sendLegacyData method removed - streaming is always used\n\n  private base64Encode(str: string): string {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(str);\n    return window.btoa(String.fromCharCode(...new Uint8Array(data)));\n  }\n\n  private base64Decode(base64: string): string {\n    const binaryStr = window.atob(base64);\n    const bytes = new Uint8Array([...binaryStr].map((char) => char.charCodeAt(0)));\n    return new TextDecoder().decode(bytes);\n  }\n\n  private handleSuccess = async (blob: Blob) => {\n    this.debug(\"Playing AI response audio\");\n    \n    try {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      this.stopSourceIfNeeded();\n\n      const arrayBuffer = await blob.arrayBuffer();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      this.debug(\"Audio decoded\", {\n        duration: `${audioBuffer.duration.toFixed(2)}s`,\n        sampleRate: audioBuffer.sampleRate,\n        numberOfChannels: audioBuffer.numberOfChannels\n      });\n\n      this.source = audioContext.createBufferSource();\n      this.source.buffer = audioBuffer;\n      this.source.connect(audioContext.destination);\n      this.source.start(0);\n      this.sourceIsStarted = true;\n      \n      this.source.onended = () => {\n        this.debug(\"Audio playback ended\");\n        this.callbacks.onReset?.();\n      };\n\n      this.callbacks.onAiSpeaking?.();\n    } catch (error) {\n      this.error(\"Failed to play audio\", error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private handleError = (error: any) => {\n    this.error(`Error encountered: ${error.message}`, error);\n    this.callbacks.onReset?.();\n  };\n\n  private validate = async (data: Blob) => {\n    this.debug(\"Validating audio duration\");\n    \n    try {\n      // Clone the blob to avoid consuming the arrayBuffer\n      const clonedBlob = new Blob([data], { type: data.type });\n      const arrayBuffer = await clonedBlob.arrayBuffer();\n      const audioContext = new AudioContext();\n      const decodedData = await audioContext.decodeAudioData(arrayBuffer);\n      const duration = decodedData.duration;\n      const minDuration = 0.4;\n\n      this.debug(\"Audio validation\", {\n        duration: `${duration.toFixed(2)}s`,\n        minDuration: `${minDuration}s`,\n        valid: duration >= minDuration\n      });\n\n      if (duration < minDuration) {\n        throw new Error(`Duration is ${duration}s, which is less than minimum of ${minDuration}s`);\n      }\n    } catch (error) {\n      this.error(\"Audio validation failed\", error);\n      throw error;\n    }\n  };\n\n  clearConversation() {\n    this.conversationThusFar = [];\n  }\n\n  getConversationThusFar() {\n    return this.conversationThusFar;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  // Set the conversation history from existing messages\n  setConversationHistory(messages: any[]) {\n    // Clean and deduplicate messages before setting\n    const cleanedMessages = messages\n      .filter((msg, index, self) => \n        // Remove duplicates based on content and role\n        index === self.findIndex(m => m.content === msg.content && m.role === msg.role)\n      )\n      .map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n    \n    this.conversationThusFar = cleanedMessages;\n    this.debug(\"Conversation history loaded\", {\n      messageCount: this.conversationThusFar.length,\n      originalCount: messages.length\n    });\n  }\n\n\n  // Public method to clean up streaming resources\n  public destroy() {\n    this.stopAudio();\n    if (this.streamingTTS) {\n      this.streamingTTS.destroy();\n      this.streamingTTS = null;\n    }\n    this.debug(\"🧹 SpeechManager destroyed\");\n  }\n}\n\nexport const speechManager = new SpeechManager();","/**\n * Utility functions for voice mode\n */\n\n/**\n * Simple markdown parser for voice responses\n * Removes markdown formatting for cleaner display in voice UI\n */\nexport function parseMarkdownForVoice(text: string): string {\n  return text\n    // Remove bold markers\n    .replace(/\\*\\*(.*?)\\*\\*/g, '$1')\n    // Remove italic markers\n    .replace(/\\*(.*?)\\*/g, '$1')\n    // Remove code blocks\n    .replace(/```[\\s\\S]*?```/g, '')\n    // Remove inline code\n    .replace(/`([^`]+)`/g, '$1')\n    // Remove headers\n    .replace(/#{1,6}\\s+/g, '')\n    // Remove links but keep text\n    .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1')\n    // Remove images\n    .replace(/!\\[([^\\]]*)\\]\\([^)]+\\)/g, '')\n    // Remove horizontal rules\n    .replace(/^-{3,}$/gm, '')\n    // Remove bullet points\n    .replace(/^\\s*[-*+]\\s+/gm, '')\n    // Remove numbered lists\n    .replace(/^\\s*\\d+\\.\\s+/gm, '')\n    // Clean up extra whitespace\n    .replace(/\\n{3,}/g, '\\n\\n')\n    .trim();\n}\n\n/**\n * Split response into chunks for streaming display\n */\nexport function* streamTextChunks(text: string, chunkSize: number = 50): Generator<string> {\n  const words = text.split(' ');\n  let currentChunk = '';\n  \n  for (const word of words) {\n    if (currentChunk.length + word.length + 1 > chunkSize && currentChunk.length > 0) {\n      yield currentChunk.trim();\n      currentChunk = word;\n    } else {\n      currentChunk += (currentChunk ? ' ' : '') + word;\n    }\n  }\n  \n  if (currentChunk) {\n    yield currentChunk.trim();\n  }\n}","/**\n * Simple encryption utilities for demo mode API key storage\n * \n * This provides basic obfuscation to prevent casual observation\n * of API keys in browser storage. This is NOT cryptographically\n * secure and should only be used for demo/playground purposes.\n */\n\n/**\n * Generate a random key for encryption\n */\nexport function generateKey(): string {\n  const array = new Uint8Array(32);\n  crypto.getRandomValues(array);\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\n/**\n * Simple XOR encryption (obfuscation)\n * This is NOT secure encryption - it's just to prevent\n * API keys from being stored in plain text\n */\nexport function encrypt(text: string, key: string): string {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    result += String.fromCharCode(\n      text.charCodeAt(i) ^ key.charCodeAt(i % key.length)\n    );\n  }\n  return btoa(result); // Base64 encode\n}\n\n/**\n * Decrypt XOR encrypted text\n */\nexport function decrypt(encrypted: string, key: string): string {\n  try {\n    const text = atob(encrypted); // Base64 decode\n    let result = '';\n    for (let i = 0; i < text.length; i++) {\n      result += String.fromCharCode(\n        text.charCodeAt(i) ^ key.charCodeAt(i % key.length)\n      );\n    }\n    return result;\n  } catch {\n    return '';\n  }\n}\n\n/**\n * Validate API key format\n */\nexport function isValidApiKey(key: string): boolean {\n  // CustomGPT.ai API key format: projectId|apiKey\n  // Example: 7840|8TPfOoyBywFfUfvwuY7ZZ2s1WAFtxU7WCxunMbej\n  const trimmedKey = key.trim();\n  \n  // Check if it contains a pipe character\n  if (!trimmedKey.includes('|')) {\n    return false;\n  }\n  \n  // Split and validate both parts\n  const [projectId, apiKey] = trimmedKey.split('|');\n  \n  // Project ID should be numeric\n  if (!projectId || !/^\\d+$/.test(projectId)) {\n    return false;\n  }\n  \n  // API key should be alphanumeric (with possible special chars)\n  if (!apiKey || apiKey.length < 20) {\n    return false;\n  }\n  \n  return true;\n}","/**\n * Demo Mode Store\n * \n * Manages API key storage and authentication for demo/playground mode.\n * Uses encrypted sessionStorage for temporary key storage that survives\n * page refreshes but is cleared when the browser tab is closed.\n */\n\nimport { create } from 'zustand';\nimport { encrypt, decrypt, generateKey, isValidApiKey } from '@/lib/crypto';\n\ninterface DemoStore {\n  // Demo mode configuration\n  isDemoMode: boolean;\n  \n  // API key management\n  apiKey: string | null;\n  openAIApiKey: string | null;\n  encryptionKey: string | null;\n  \n  // UI state\n  isAuthenticated: boolean;\n  error: string | null;\n  \n  // Session management\n  sessionStartTime: number | null;\n  sessionTimeout: number; // 2 hours in milliseconds\n  \n  // Actions\n  setApiKey: (key: string) => void;\n  setOpenAIApiKey: (key: string) => void;\n  clearApiKey: () => void;\n  validateSession: () => boolean;\n  setError: (error: string | null) => void;\n  initializeFromStorage: () => void;\n  restoreSession: () => boolean;\n}\n\nconst STORAGE_KEY = 'customgpt-demo-key';\nconst OPENAI_STORAGE_KEY = 'customgpt-demo-openai-key';\nconst ENCRYPTION_KEY = 'customgpt-demo-enc';\nconst SESSION_KEY = 'customgpt-demo-session';\nconst SESSION_TIMEOUT = 2 * 60 * 60 * 1000; // 2 hours\n\nexport const useDemoStore = create<DemoStore>((set, get) => ({\n  // Check if demo mode is enabled from localStorage deployment mode\n  isDemoMode: typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') === 'demo' : false,\n  \n  apiKey: null,\n  openAIApiKey: null,\n  encryptionKey: null,\n  isAuthenticated: false,\n  error: null,\n  sessionStartTime: null,\n  sessionTimeout: SESSION_TIMEOUT,\n  \n  setApiKey: (key: string) => {\n    const trimmedKey = key.trim();\n    \n    // Validate API key format\n    if (!isValidApiKey(trimmedKey)) {\n      set({ error: 'Invalid API key format' });\n      return;\n    }\n    \n    try {\n      // Generate encryption key\n      const encKey = generateKey();\n      \n      // Encrypt and store in sessionStorage\n      const encrypted = encrypt(trimmedKey, encKey);\n      sessionStorage.setItem(STORAGE_KEY, encrypted);\n      sessionStorage.setItem(ENCRYPTION_KEY, encKey);\n      \n      // Store session info\n      const sessionInfo = {\n        startTime: Date.now(),\n        encKey: encKey\n      };\n      sessionStorage.setItem(SESSION_KEY, JSON.stringify(sessionInfo));\n      \n      // Update store state\n      set({\n        apiKey: trimmedKey,\n        encryptionKey: encKey,\n        isAuthenticated: true,\n        error: null,\n        sessionStartTime: Date.now()\n      });\n    } catch (error) {\n      set({ error: 'Failed to store API key' });\n    }\n  },\n  \n  setOpenAIApiKey: (key: string) => {\n    const trimmedKey = key.trim();\n    const state = get();\n    \n    // Only allow if already authenticated with CustomGPT key\n    if (!state.isAuthenticated) {\n      set({ error: 'Please enter CustomGPT.ai API key first' });\n      return;\n    }\n    \n    // OpenAI keys typically start with 'sk-'\n    if (trimmedKey && !trimmedKey.startsWith('sk-')) {\n      set({ error: 'Invalid OpenAI API key format' });\n      return;\n    }\n    \n    try {\n      // Use same encryption key as CustomGPT key\n      const encKey = state.encryptionKey;\n      if (!encKey) {\n        set({ error: 'Encryption key not found' });\n        return;\n      }\n      \n      if (trimmedKey) {\n        // Encrypt and store\n        const encrypted = encrypt(trimmedKey, encKey);\n        sessionStorage.setItem(OPENAI_STORAGE_KEY, encrypted);\n        set({ openAIApiKey: trimmedKey, error: null });\n      } else {\n        // Clear OpenAI key\n        sessionStorage.removeItem(OPENAI_STORAGE_KEY);\n        set({ openAIApiKey: null, error: null });\n      }\n    } catch (error) {\n      set({ error: 'Failed to store OpenAI API key' });\n    }\n  },\n  \n  clearApiKey: () => {\n    // Clear from storage\n    sessionStorage.removeItem(STORAGE_KEY);\n    sessionStorage.removeItem(OPENAI_STORAGE_KEY);\n    sessionStorage.removeItem(ENCRYPTION_KEY);\n    sessionStorage.removeItem(SESSION_KEY);\n    \n    // Clear from memory\n    set({\n      apiKey: null,\n      openAIApiKey: null,\n      encryptionKey: null,\n      isAuthenticated: false,\n      error: null,\n      sessionStartTime: null\n    });\n  },\n  \n  validateSession: () => {\n    const state = get();\n    \n    // Check if session has expired\n    if (state.sessionStartTime) {\n      const elapsed = Date.now() - state.sessionStartTime;\n      if (elapsed > state.sessionTimeout) {\n        state.clearApiKey();\n        state.setError('Session expired. Please enter your API key again.');\n        return false;\n      }\n    }\n    \n    return state.isAuthenticated;\n  },\n  \n  setError: (error: string | null) => {\n    set({ error });\n  },\n  \n  initializeFromStorage: () => {\n    const state = get();\n    \n    // Only initialize if demo mode is enabled\n    if (!state.isDemoMode) return;\n    \n    // Try to restore the session\n    state.restoreSession();\n  },\n  \n  restoreSession: () => {\n    const state = get();\n    \n    try {\n      // Check for session info\n      const sessionData = sessionStorage.getItem(SESSION_KEY);\n      if (!sessionData) return false;\n      \n      const sessionInfo = JSON.parse(sessionData);\n      const { startTime, encKey } = sessionInfo;\n      \n      // Check if session expired\n      const elapsed = Date.now() - startTime;\n      if (elapsed > SESSION_TIMEOUT) {\n        state.clearApiKey();\n        state.setError('Session expired. Please enter your API key again.');\n        return false;\n      }\n      \n      // Try to restore encrypted keys\n      const encrypted = sessionStorage.getItem(STORAGE_KEY);\n      const encryptedOpenAI = sessionStorage.getItem(OPENAI_STORAGE_KEY);\n      \n      if (!encrypted || !encKey) return false;\n      \n      // Decrypt API keys\n      const apiKey = decrypt(encrypted, encKey);\n      if (!apiKey || !isValidApiKey(apiKey)) {\n        state.clearApiKey();\n        return false;\n      }\n      \n      // Restore OpenAI key if present\n      let openAIKey = null;\n      if (encryptedOpenAI) {\n        openAIKey = decrypt(encryptedOpenAI, encKey);\n      }\n      \n      // Restore state\n      set({\n        apiKey: apiKey,\n        openAIApiKey: openAIKey,\n        encryptionKey: encKey,\n        isAuthenticated: true,\n        sessionStartTime: startTime,\n        error: null\n      });\n      \n      return true;\n    } catch {\n      // Session restore failed, clear everything\n      state.clearApiKey();\n      return false;\n    }\n  }\n}));\n\n// Auto-clear on tab visibility change (optional security feature)\nif (typeof window !== 'undefined') {\n  document.addEventListener('visibilitychange', () => {\n    if (document.hidden) {\n      // Optional: Clear API key when tab is hidden\n      // Uncomment for extra security\n      // const { clearApiKey } = useDemoStore.getState();\n      // clearApiKey();\n    }\n  });\n  \n  // Check session validity periodically\n  setInterval(() => {\n    const { validateSession } = useDemoStore.getState();\n    validateSession();\n  }, 60000); // Check every minute\n}","'use client';\n\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { useMicVAD, utils } from '@ricky0123/vad-react';\nimport RotateLoader from 'react-spinners/RotateLoader';\nimport { X, StopCircle, Mic, MicOff, Settings } from 'lucide-react';\nimport Canvas from './Canvas';\nimport { VoiceSettings } from './VoiceSettings';\nimport { speechManager } from '@/lib/voice/speech-manager';\nimport { useMessageStore, useConversationStore } from '@/hooks/useWidgetStore';\nimport { useAgentStore } from '@/store/agents';\nimport { generateId, generateConversationName } from '@/lib/utils';\nimport { useVoiceSettingsStore } from '@/store/voice-settings';\nimport { parseMarkdownForVoice } from '@/lib/voice/utils';\nimport { useDemoStore } from '@/store/demo';\nimport { AlertTriangle } from 'lucide-react';\n\ninterface VoiceModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  projectId: string;\n  projectName?: string;\n}\n\n// Voice states for UI animations\ntype VoiceState = 'idle' | 'listening' | 'recording' | 'processing' | 'speaking';\n\n// Separate component that handles VAD initialization\nfunction VoiceModalContent({ isOpen, onClose, projectId, projectName }: VoiceModalProps) {\n  const [loading, setLoading] = useState(true);\n  const [transcript, setTranscript] = useState('');\n  const [agentResponse, setAgentResponse] = useState('');\n  const [isManualRecording, setIsManualRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null);\n  const [apiKeyError, setApiKeyError] = useState(false);\n  const [isAgentSpeaking, setIsAgentSpeaking] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [voiceState, setVoiceState] = useState<VoiceState>('idle');\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  \n  // Streaming state\n  const [isStreamingText, setIsStreamingText] = useState(false);\n  const [streamingResponse, setStreamingResponse] = useState('');\n  \n  // Message store integration\n  const { addMessage, messages, loadMessages } = useMessageStore();\n  const { currentConversation, ensureConversation, updateConversation } = useConversationStore();\n  const [currentUserMessageId, setCurrentUserMessageId] = useState<string | null>(null);\n  const [voiceConversation, setVoiceConversation] = useState<any>(null);\n  \n  // Voice settings integration\n  const { selectedVoice, selectedPersona, setVoiceModalOpen } = useVoiceSettingsStore();\n  \n  // Demo mode check\n  const { isDemoMode, openAIApiKey } = useDemoStore();\n  \n  // Check if OpenAI API key is available\n  const checkOpenAIKeyAvailability = useCallback(() => {\n    const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n    if (deploymentMode === 'demo' && !openAIApiKey) {\n      return false;\n    }\n    // In production mode, we can't check server-side env from client\n    // We'll let the API handle validation\n    return true;\n  }, [openAIApiKey]);\n\n  // Initialize VAD with error handling\n  const vad = useMicVAD({\n    preSpeechPadFrames: 10,\n    positiveSpeechThreshold: 0.8,   // Lower threshold for easier detection\n    negativeSpeechThreshold: 0.6,   // Lower threshold\n    minSpeechFrames: 3,              // Reduce minimum frames\n    startOnLoad: false,              // Start manually\n    workletURL: '/vad.worklet.bundle.min.js',\n    modelURL: '/silero_vad.onnx',\n    // VAD configuration\n    onSpeechStart: () => {\n      console.log('🎤 [VAD] Speech started detected');\n      speechManager.onSpeechStart();\n    },\n    onSpeechEnd: (audio) => {\n      console.log('🎤 [VAD] Speech ended, audio length:', audio.length);\n      speechManager.onSpeechEnd(audio);\n    },\n    onVADMisfire: () => {\n      console.log('🎤 [VAD] Misfire detected');\n      speechManager.onMisfire();\n    }\n  });\n\n  // Control global voice modal state for hiding mobile navigation\n  useEffect(() => {\n    setVoiceModalOpen(isOpen);\n    \n    // Extra cleanup when closing to ensure mobile navigation reappears\n    if (!isOpen) {\n      // Small delay to ensure the state change is processed\n      setTimeout(() => {\n        setVoiceModalOpen(false);\n      }, 100);\n    }\n  }, [isOpen, setVoiceModalOpen]);\n\n  // Set up speech manager when modal opens\n  useEffect(() => {\n    if (isOpen && projectId) {\n      console.log('🔧 [VOICE-MODAL] Setting up speech manager');\n      speechManager.setProjectId(projectId);\n      \n      // Apply voice settings to speech manager\n      speechManager.setVoiceSettings(selectedVoice, selectedPersona);\n      \n      // Pass demo keys to window object for speech manager (only in demo mode)\n      if (isDemoMode) {\n        if (openAIApiKey) {\n          (window as any).__demoOpenAIKey = openAIApiKey;\n        }\n        // Also pass CustomGPT API key from demo store\n        const demoApiKey = useDemoStore.getState().apiKey;\n        if (demoApiKey) {\n          (window as any).__demoCustomGPTKey = demoApiKey;\n        }\n      }\n      \n      // Theme is now handled directly by Canvas component through themeId prop\n      \n      // Check if agent is active\n      const currentAgentStore = useAgentStore.getState();\n      const agent = currentAgentStore.agents.find(a => a.id === parseInt(projectId));\n      \n      if (agent && !agent.is_chat_active) {\n        console.warn('⚠️ [VOICE-MODAL] Agent is inactive - may fall back to OpenAI');\n      }\n      \n      // Ensure we have a conversation before starting voice\n      const setupConversation = async () => {\n        try {\n          let conversation = currentConversation;\n          \n          // If no current conversation, create one for voice\n          if (!conversation) {\n            console.log('🔄 [VOICE-MODAL] No current conversation, creating one for voice');\n            // Create conversation with temporary title - will be updated when we get the transcript\n            conversation = await ensureConversation(parseInt(projectId), 'New voice conversation');\n            console.log('✅ [VOICE-MODAL] Created conversation:', conversation.id, 'session:', conversation.session_id);\n            // Store the conversation reference for reuse\n            setVoiceConversation(conversation);\n          } else {\n            // Store existing conversation reference\n            setVoiceConversation(conversation);\n          }\n          \n          // Load conversation history and session ID\n          const conversationMessages = messages.get(conversation.id.toString()) || [];\n          console.log('📝 [VOICE-MODAL] Loading conversation history:', conversationMessages.length, 'messages');\n          console.log('📝 [VOICE-MODAL] Agent status:', agent?.is_chat_active ? 'Active' : 'Inactive');\n          \n          // Filter out any duplicate messages and ensure proper ordering\n          const cleanedMessages = conversationMessages.filter((msg, index, self) => \n            // Keep only the first occurrence of each message ID\n            index === self.findIndex(m => m.id === msg.id)\n          ).sort((a, b) => \n            // Sort by timestamp to ensure proper ordering\n            new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n          );\n          \n          speechManager.setConversationHistory(cleanedMessages);\n          speechManager.setSessionId(conversation.session_id);\n        } catch (error) {\n          console.error('❌ [VOICE-MODAL] Failed to setup conversation:', error);\n        }\n      };\n      \n      setupConversation();\n      \n      speechManager.setCallbacks({\n        onUserSpeaking: () => {\n          (Canvas as any).onUserSpeaking?.();\n          setTranscript('');\n          setStreamingResponse(''); // Clear streaming response\n          setIsStreamingText(false);\n          setVoiceState('recording');\n        },\n        onProcessing: async () => {\n          (Canvas as any).onProcessing?.();\n          setVoiceState('processing');\n          \n          // Use existing conversation - don't create a new one\n          // The conversation should already be set up in setupConversation()\n          \n          const placeholderUserMessage = {\n            id: generateId(),\n            role: 'user' as const,\n            content: '🎤 Processing voice input...',\n            timestamp: new Date().toISOString(),\n            status: 'sending' as const,\n          };\n          \n          setCurrentUserMessageId(placeholderUserMessage.id);\n          const targetConversation = voiceConversation || currentConversation;\n          if (targetConversation) {\n            addMessage(targetConversation.id.toString(), placeholderUserMessage);\n            console.log('🎤 [VOICE-MODAL] Added placeholder user message');\n          }\n        },\n        onAiSpeaking: () => {\n          (Canvas as any).onAiSpeaking?.();\n          setIsAgentSpeaking(true);\n          setVoiceState('speaking');\n        },\n        onReset: () => {\n          (Canvas as any).reset?.();\n          setIsAgentSpeaking(false);\n          setIsStreamingText(false);\n          setVoiceState('idle');\n        },\n        onDebug: (message: string, data?: any) => {\n          // Debug logging removed for production\n        },\n        onError: (error: string) => {\n          console.error('❌ [VOICE-MODAL] Error from speech manager:', error);\n          // Check if it's an API key error\n          if (error.includes('OpenAI API key') || error.includes('API key')) {\n            setApiKeyError(true);\n            // Also show a toast error\n            const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : null;\n            const isDemoMode = deploymentMode === 'demo';\n            const errorMsg = isDemoMode \n              ? 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n              : 'Voice feature requires OpenAI API key configuration. Please add OPENAI_API_KEY to your .env.local file.';\n            \n            // Import toast at the top of the file\n            import('sonner').then(({ toast }) => {\n              toast.error(errorMsg);\n            });\n          }\n          setIsStreamingText(false);\n          setVoiceState('idle');\n        },\n        onTranscriptReceived: async (transcript: string) => {\n          console.log('🎯 [VOICE-MODAL] Transcript received:', transcript);\n          setTranscript(transcript);\n          \n          // Update conversation title if this is the first message\n          const targetConversation = voiceConversation || currentConversation;\n          if (targetConversation) {\n            const conversationMessages = messages.get(targetConversation.id.toString()) || [];\n            // If this is the first or second message (after initial placeholder), update the title\n            if (conversationMessages.length <= 1 && targetConversation.name && \n                (targetConversation.name === 'New voice conversation' || \n                 targetConversation.name === 'Voice conversation' ||\n                 targetConversation.name === 'Processing...')) {\n              const newTitle = generateConversationName(transcript);\n              console.log('📝 [VOICE-MODAL] Updating conversation title to:', newTitle);\n              try {\n                await updateConversation(targetConversation.id, targetConversation.session_id, { name: newTitle });\n              } catch (error) {\n                console.error('❌ [VOICE-MODAL] Failed to update conversation title:', error);\n              }\n            }\n          }\n          \n          // Update the placeholder message with actual transcript\n          \n          if (targetConversation && currentUserMessageId) {\n            // Update the existing placeholder message\n            const updatedUserMessage = {\n              id: currentUserMessageId,\n              role: 'user' as const,\n              content: transcript,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n            };\n            \n            addMessage(targetConversation.id.toString(), updatedUserMessage);\n            console.log('✅ [VOICE-MODAL] Updated user message with transcript');\n          } else {\n            // Fallback: create new message if no placeholder exists\n            // Use the existing conversation from voiceConversation or currentConversation\n            const conversation = voiceConversation || currentConversation;\n            if (!conversation) {\n              console.error('❌ [VOICE-MODAL] No conversation available for user message');\n              return;\n            }\n            \n            const userMessage = {\n              id: generateId(),\n              role: 'user' as const,\n              content: transcript,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n            };\n            \n            setCurrentUserMessageId(userMessage.id);\n            addMessage(conversation.id.toString(), userMessage);\n          }\n        },\n        onResponseReceived: async (response: string) => {\n          console.log('🎯 [VOICE-MODAL] Response received:', response);\n          console.log('🎯 [VOICE-MODAL] Response includes \"individuals\":', response.includes('individuals'));\n          console.log('🎯 [VOICE-MODAL] Response includes \"like\":', response.includes('like'));\n          console.log('🎯 [VOICE-MODAL] Response includes \"CustomGPT\":', response.includes('CustomGPT'));\n          \n          // For streaming responses, this will be called with the final response\n          // Don't update the display here as it's already being updated via streaming chunks\n          // This is mainly for adding the message to the conversation history\n          \n          // Use voiceConversation to ensure we're adding to the same conversation as the user message\n          // This prevents race condition where messages could be added out of order\n          const targetConversation = voiceConversation || currentConversation;\n          \n          if (targetConversation) {\n            // Create and add assistant message to chat\n            const assistantMessage = {\n              id: generateId(),\n              role: 'assistant' as const,\n              content: response,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n              citations: [], // Voice responses typically don't have citations\n            };\n            \n            addMessage(targetConversation.id.toString(), assistantMessage);\n            \n            // Force refresh conversation to ensure proper syncing\n            const currentMessages = messages.get(targetConversation.id.toString()) || [];\n            console.log('🔄 [VOICE-MODAL] Current conversation messages:', currentMessages.length, 'messages');\n            \n          } else {\n            console.warn('⚠️ [VOICE-MODAL] No conversation available for adding assistant message');\n          }\n        },\n        // New streaming callbacks\n        onStreamingTextChunk: (textChunk: string) => {\n          console.log('📝 [VOICE-MODAL] Streaming text chunk:', textChunk);\n          setIsStreamingText(true);\n          setStreamingResponse(prev => {\n            const newText = prev + textChunk;\n            console.log('📝 [VOICE-MODAL] Accumulated streaming text length:', newText.length);\n            // Update the displayed response immediately for streaming\n            const cleanResponse = parseMarkdownForVoice(newText);\n            setAgentResponse(cleanResponse);\n            return newText;\n          });\n        },\n        onStreamingAudioReady: (audioUrl: string, chunkId: string) => {\n          console.log('🎵 [VOICE-MODAL] Audio chunk ready:', chunkId, 'URL length:', audioUrl.length);\n          \n          // Ensure we're in speaking state when audio arrives\n          if (voiceState !== 'speaking') {\n            setVoiceState('speaking');\n            setIsAgentSpeaking(true);\n          }\n        },\n        onStreamingComplete: (fullResponse: string, transcript: string) => {\n          console.log('✅ [VOICE-MODAL] Streaming complete:', { fullResponse: fullResponse.length, transcript });\n          console.log('✅ [VOICE-MODAL] Full response includes \"individuals\":', fullResponse.includes('individuals'));\n          console.log('✅ [VOICE-MODAL] Full response includes \"like\":', fullResponse.includes('like'));\n          console.log('✅ [VOICE-MODAL] Full response includes \"CustomGPT\":', fullResponse.includes('CustomGPT'));\n          \n          // Final cleanup - ensure we have the complete response\n          const cleanResponse = parseMarkdownForVoice(fullResponse);\n          console.log('✅ [VOICE-MODAL] Final clean response:', cleanResponse);\n          setAgentResponse(cleanResponse);\n          setStreamingResponse(fullResponse);\n          setIsStreamingText(false);\n          \n          // Don't add messages here - they've already been added via onTranscriptReceived and onResponseReceived\n          // This prevents duplicate messages in the conversation\n        }\n      });\n    }\n    \n    // Clean up when modal closes\n    if (!isOpen) {\n      // Don't clear conversation history to maintain context\n      setTranscript('');\n      setAgentResponse('');\n      setStreamingResponse('');\n      setIsStreamingText(false);\n      setIsAgentSpeaking(false);\n      setVoiceConversation(null); // Clear voice conversation reference\n      setVoiceState('idle'); // Reset voice state to idle\n      setCurrentUserMessageId(null); // Clear current user message ID\n      \n      // Clean up demo keys from window object (only in demo mode)\n      if ((window as any).__demoOpenAIKey) {\n        delete (window as any).__demoOpenAIKey;\n      }\n      if ((window as any).__demoCustomGPTKey) {\n        delete (window as any).__demoCustomGPTKey;\n      }\n      \n      // Ensure VAD is stopped if it was running\n      if (vad.listening) {\n        vad.pause();\n      }\n      \n      // Clean up speech manager streaming resources\n      speechManager.destroy();\n      \n      // Ensure global state is properly reset\n      setVoiceModalOpen(false);\n      \n      // Reload messages to ensure sync with API format\n      if (currentConversation) {\n        // Use the loadMessages function directly from the hook\n        loadMessages(currentConversation.id.toString());\n      }\n    }\n  }, [isOpen, projectId, currentConversation, messages, selectedVoice, selectedPersona, isDemoMode, openAIApiKey, loadMessages]);\n  \n  // Update settings when they change\n  useEffect(() => {\n    if (isOpen && projectId) {\n      // Update speech manager with new voice settings\n      speechManager.setVoiceSettings(selectedVoice, selectedPersona);\n      \n      // Theme is now handled directly by Canvas component through themeId prop\n      // The Canvas component automatically switches themes when themeId changes\n    }\n  }, [selectedVoice, selectedPersona, isOpen, projectId]);\n  \n  // Monitor VAD state changes\n  useEffect(() => {\n    if (vad.errored) {\n    } else if (!vad.loading && !vad.errored) {\n    }\n  }, [vad.loading, vad.errored]);\n\n  // Define handleToggleListening before useEffect that uses it\n  const handleToggleListening = useCallback(async () => {\n    console.log('🔘 [VOICE-MODAL] Toggle listening clicked', { \n      vadLoading: vad.loading,\n      vadListening: vad.listening,\n      vadErrored: vad.errored\n    });\n    \n    // Check OpenAI key availability first\n    if (!checkOpenAIKeyAvailability()) {\n      console.error('❌ [VOICE-MODAL] OpenAI API key not available');\n      setApiKeyError(true);\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n      const errorMsg = deploymentMode === 'demo' \n        ? 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n        : 'Voice feature requires OpenAI API key. Please add OPENAI_API_KEY to your .env.local file.';\n      \n      import('sonner').then(({ toast }) => {\n        toast.error(errorMsg);\n      });\n      return;\n    }\n    \n    // Enhanced error handling for VAD\n    if (vad.errored) {\n      console.error('❌ [VOICE-MODAL] VAD is in error state, attempting recovery...');\n      \n      // Try to restart VAD after error\n      try {\n        console.log('🔄 [VOICE-MODAL] Attempting VAD recovery...');\n        // Wait a moment then try to start\n        setTimeout(() => {\n          if (!vad.listening && !vad.loading) {\n            console.log('🔄 [VOICE-MODAL] Retry VAD start after error');\n            vad.start();\n          }\n        }, 1000);\n        return;\n      } catch (recoveryError) {\n        console.error('❌ [VOICE-MODAL] VAD recovery failed:', recoveryError);\n        return;\n      }\n    }\n    \n    try {\n      if (vad.listening) {\n        console.log('⏸️ [VOICE-MODAL] Pausing VAD');\n        vad.pause();\n        setVoiceState('idle');\n      } else {\n        console.log('▶️ [VOICE-MODAL] Starting VAD');\n        setVoiceState('listening');\n        \n        // Simplified microphone permission check\n        try {\n          console.log('🎤 [VOICE-MODAL] Checking microphone permissions...');\n          const stream = await navigator.mediaDevices.getUserMedia({ \n            audio: true\n          });\n          \n          // Clean up immediately - we just needed to check permission\n          stream.getTracks().forEach(track => track.stop());\n          \n          console.log('🎯 [VOICE-MODAL] Microphone permission granted');\n        } catch (permissionError) {\n          console.error('❌ [VOICE-MODAL] Microphone permission failed:', permissionError);\n          const errorMessage = permissionError instanceof Error ? permissionError.message : 'Permission denied';\n          \n          // Still try to start VAD - it might handle permissions internally\n        }\n        \n        // Start VAD with additional error handling\n        try {\n          vad.start();\n        } catch (vadError) {\n          console.error('❌ [VOICE-MODAL] VAD start failed:', vadError);\n          const errorMessage = vadError instanceof Error ? vadError.message : 'Unknown error';\n        }\n      }\n    } catch (error) {\n      console.error('❌ [VOICE-MODAL] Error in toggle listening:', error);\n    }\n  }, [vad, checkOpenAIKeyAvailability]);\n\n  // Manual recording fallback when VAD fails\n  const handleManualRecording = useCallback(async () => {\n    console.log('🎤 [MANUAL] Starting manual recording fallback');\n    \n    // Check OpenAI key availability first\n    if (!checkOpenAIKeyAvailability()) {\n      console.error('❌ [MANUAL] OpenAI API key not available');\n      setApiKeyError(true);\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n      const errorMsg = deploymentMode === 'demo' \n        ? 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n        : 'Voice feature requires OpenAI API key. Please add OPENAI_API_KEY to your .env.local file.';\n      \n      import('sonner').then(({ toast }) => {\n        toast.error(errorMsg);\n      });\n      return;\n    }\n    \n    try {\n      if (!isManualRecording) {\n        // Start manual recording with better audio quality\n        setVoiceState('recording');\n        const stream = await navigator.mediaDevices.getUserMedia({ \n          audio: {\n            echoCancellation: true,\n            noiseSuppression: true,\n            autoGainControl: true,\n            sampleRate: 48000\n          } \n        });\n        \n        // Choose the best available audio format\n        const mimeType = MediaRecorder.isTypeSupported('audio/webm;codecs=opus') \n          ? 'audio/webm;codecs=opus' \n          : 'audio/webm';\n          \n        const recorder = new MediaRecorder(stream, { mimeType });\n        const chunks: Blob[] = [];\n        \n        recorder.ondataavailable = (event) => {\n          if (event.data.size > 0) {\n            chunks.push(event.data);\n          }\n        };\n        \n        recorder.onstop = async () => {\n          console.log('🎤 [MANUAL] Recording stopped, processing audio...');\n          // MediaRecorder doesn't produce WAV, it produces webm/opus or similar\n          const audioBlob = new Blob(chunks, { type: recorder.mimeType || 'audio/webm' });\n          \n          try {\n            // Create audio context for decoding compressed audio\n            const audioContext = new AudioContext();\n            \n            // Convert blob to ArrayBuffer\n            const audioBuffer = await audioBlob.arrayBuffer();\n            \n            // Decode the compressed audio to get raw PCM data\n            const decodedAudio = await audioContext.decodeAudioData(audioBuffer);\n            console.log('🎯 [MANUAL] Audio decoded:', {\n              sampleRate: decodedAudio.sampleRate,\n              channels: decodedAudio.numberOfChannels,\n              duration: decodedAudio.duration,\n              length: decodedAudio.length\n            });\n            \n            // Convert to mono Float32Array (match VAD format)\n            const channelData = decodedAudio.getChannelData(0); // Get first channel\n            \n            // CRITICAL: Resample from 48kHz to 16kHz for VAD/Whisper compatibility\n            let audioArray: Float32Array;\n            if (decodedAudio.sampleRate !== 16000) {\n              console.log('🔄 [MANUAL] Resampling from', decodedAudio.sampleRate, 'to 16kHz');\n              const resampleRatio = 16000 / decodedAudio.sampleRate;\n              const newLength = Math.floor(channelData.length * resampleRatio);\n              audioArray = new Float32Array(newLength);\n              \n              // Simple linear interpolation resampling\n              for (let i = 0; i < newLength; i++) {\n                const srcIndex = i / resampleRatio;\n                const srcIndexFloor = Math.floor(srcIndex);\n                const srcIndexCeil = Math.min(srcIndexFloor + 1, channelData.length - 1);\n                const fraction = srcIndex - srcIndexFloor;\n                \n                audioArray[i] = channelData[srcIndexFloor] * (1 - fraction) + \n                               channelData[srcIndexCeil] * fraction;\n              }\n            } else {\n              audioArray = new Float32Array(channelData);\n            }\n            \n            console.log('🎯 [MANUAL] Audio ready:', audioArray.length, 'samples at 16kHz');\n            \n            // Process through speech manager\n            speechManager.onSpeechStart();\n            await speechManager.onSpeechEnd(audioArray);\n            \n            // Clean up audio context\n            await audioContext.close();\n            \n          } catch (error) {\n            console.error('❌ [MANUAL] Audio decoding failed:', error);\n          }\n          \n          // Clean up recording resources\n          stream.getTracks().forEach(track => track.stop());\n          setIsManualRecording(false);\n          setMediaRecorder(null);\n        };\n        \n        setMediaRecorder(recorder);\n        setIsManualRecording(true);\n        recorder.start();\n        \n        \n      } else {\n        // Stop manual recording\n        if (mediaRecorder) {\n          mediaRecorder.stop();\n        }\n      }\n    } catch (error) {\n      console.error('❌ [MANUAL] Manual recording failed:', error);\n    }\n  }, [isManualRecording, mediaRecorder, checkOpenAIKeyAvailability]);\n\n  // Track if we've already auto-started to prevent loops\n  const [hasAutoStarted, setHasAutoStarted] = useState(false);\n\n  // Handle stopping the agent's speech\n  const handleStopSpeech = useCallback(() => {\n    console.log('🛑 [VOICE-MODAL] Stopping agent speech');\n    speechManager.stopAudio();\n    setIsAgentSpeaking(false);\n  }, []);\n\n  // Handle VAD state updates with comprehensive error checking\n  useEffect(() => {\n    console.log('🔄 [VOICE-MODAL] VAD state changed', { \n      isOpen,\n      vadLoading: vad.loading, \n      vadListening: vad.listening,\n      vadUserSpeaking: vad.userSpeaking,\n      vadErrored: vad.errored,\n      hasAutoStarted\n    });\n    \n    // Check for VAD errors\n    if (vad.errored) {\n      console.error('❌ [VOICE-MODAL] VAD encountered an error');\n      return;\n    }\n    \n    // Don't auto-start VAD - wait for user interaction\n    // This prevents microphone permission request on modal open\n    if (isOpen && !vad.loading && !vad.listening && !vad.errored) {\n      console.log('🎯 [VOICE-MODAL] VAD loaded successfully, ready for manual start');\n    }\n    \n    // If VAD is in error state but we haven't tried recovery, attempt recovery\n    if (isOpen && !vad.loading && vad.errored && hasAutoStarted) {\n      console.log('🔄 [VOICE-MODAL] VAD in error state, scheduling recovery attempt...');\n      \n      // Don't continuously retry, just once more after a delay\n      setTimeout(() => {\n        if (vad.errored && !vad.listening) {\n          console.log('🔄 [VOICE-MODAL] Executing VAD recovery attempt');\n          handleToggleListening();\n        }\n      }, 1500);\n    }\n    \n    // Pause when modal closes\n    if (!isOpen && vad.listening) {\n      console.log('🛑 [VOICE-MODAL] Pausing VAD (modal closed)');\n      vad.pause();\n    }\n  }, [isOpen, vad.loading, vad.listening, vad.errored, hasAutoStarted]);\n\n  // Reset auto-start flag and error state when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setHasAutoStarted(false);\n      setApiKeyError(false);\n      setTranscript('');\n      setAgentResponse('');\n      setStreamingResponse('');\n      setIsStreamingText(false);\n      setIsAgentSpeaking(false);\n      setVoiceConversation(null); // Reset voice conversation for new session\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setLoading(vad.loading);\n  }, [vad.loading]);\n\n  return (\n    <>\n      {isOpen && (\n        <>\n          <style jsx global>{`\n            /* Custom scrollbar styles for voice modal */\n            .voice-response-scroll::-webkit-scrollbar {\n              width: 6px;\n            }\n            \n            .voice-response-scroll::-webkit-scrollbar-track {\n              background: rgba(255, 255, 255, 0.1);\n              border-radius: 3px;\n            }\n            \n            .voice-response-scroll::-webkit-scrollbar-thumb {\n              background: rgba(255, 255, 255, 0.3);\n              border-radius: 3px;\n            }\n            \n            .voice-response-scroll::-webkit-scrollbar-thumb:hover {\n              background: rgba(255, 255, 255, 0.5);\n            }\n            \n            /* Firefox scrollbar */\n            .voice-response-scroll {\n              scrollbar-width: thin;\n              scrollbar-color: rgba(255, 255, 255, 0.3) rgba(255, 255, 255, 0.1);\n            }\n            \n            /* Mobile touch scrolling optimization */\n            .voice-response-scroll {\n              -webkit-overflow-scrolling: touch;\n              scroll-behavior: smooth;\n            }\n          `}</style>\n          {/* Settings and Close buttons - moved outside main container to avoid click issues */}\n          <div \n            className=\"fixed top-4 sm:top-6 md:top-8 right-4 sm:right-6 md:right-8 flex items-center gap-2 sm:gap-3 z-[10000]\"\n            style={{ pointerEvents: 'auto' }}\n          >\n            {/* Settings button */}\n            <button\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                console.log('🔧 Settings button clicked, current state:', isSettingsOpen);\n                setIsSettingsOpen(true);\n                console.log('🔧 Settings state should now be true');\n              }}\n              className=\"w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-white/10 hover:bg-white/20 active:bg-white/30 backdrop-blur-sm flex items-center justify-center transition-all transform active:scale-95\"\n              aria-label=\"Voice settings\"\n            >\n              <Settings className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n            </button>\n            \n            {/* Close button */}\n            <button\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                console.log('❌ Close button clicked');\n                onClose();\n              }}\n              className=\"w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-white/10 hover:bg-white/20 active:bg-white/30 backdrop-blur-sm flex items-center justify-center transition-all transform active:scale-95\"\n              aria-label=\"Close voice mode\"\n            >\n              <X className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n            </button>\n          </div>\n          \n          <div \n            className=\"fixed inset-0 z-[9999] overflow-hidden\"\n          >\n          {/* Dynamic gradient background based on voice state */}\n          <div className={`absolute inset-0 transition-all duration-1000 pointer-events-none ${\n            voiceState === 'idle' ? 'voice-gradient-idle' :\n            voiceState === 'listening' ? 'voice-gradient-listening' :\n            voiceState === 'recording' ? 'voice-gradient-recording' :\n            voiceState === 'processing' ? 'voice-gradient-processing' :\n            'voice-gradient-speaking'\n          }`} />\n          \n          {/* Wave overlay effect for processing and speaking states */}\n          {(voiceState === 'processing' || voiceState === 'speaking') && (\n            <div className=\"absolute inset-0 voice-overlay-wave pointer-events-none\" />\n          )}\n          \n          {/* Pulse overlay for recording state */}\n          {voiceState === 'recording' && (\n            <div className=\"absolute inset-0 bg-red-500/10 voice-overlay-pulse pointer-events-none\" />\n          )}\n          {loading ? (\n            <div className=\"flex items-center justify-center h-full relative z-10\">\n              <RotateLoader\n                loading={loading}\n                color=\"#ffffff\"\n                aria-label=\"Loading Voice\"\n                data-testid=\"loader\"\n              />\n            </div>\n          ) : (\n            <>\n              {/* Canvas for particle animation */}\n              <div className=\"absolute inset-0 pointer-events-none z-0\">\n                <Canvas />\n              </div>\n              \n              {/* Top-left settings display */}\n              <div className=\"absolute top-4 sm:top-6 md:top-8 left-4 sm:left-6 md:left-8 z-20 space-y-2\">\n                {/* Demo mode indicator */}\n                {isDemoMode && (\n                  <div className=\"bg-amber-500/20 backdrop-blur-sm rounded-lg px-3 py-2 text-amber-300 text-xs flex items-center gap-2 border border-amber-500/30\">\n                    <AlertTriangle className=\"w-3 h-3\" />\n                    <span className=\"font-medium\">Demo Mode</span>\n                  </div>\n                )}\n                \n                {/* Voice settings */}\n                <div className=\"bg-white/5 backdrop-blur-sm rounded-lg px-3 py-2 text-white/70 text-xs space-y-1\">\n                  <div>Voice: {selectedVoice}</div>\n                  <div>Persona: {selectedPersona}</div>\n                </div>\n              </div>\n\n              \n              \n\n              {/* Status display - mobile optimized with better text handling */}\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-center px-4 z-10 pointer-events-auto max-w-full\" style={{ maxHeight: '80vh', display: 'flex', flexDirection: 'column' }}>\n                <div className=\"relative\">\n                  {/* Main status text with state-based colors - no blinking */}\n                  <p className={`text-2xl sm:text-3xl md:text-4xl font-light mb-4 leading-tight transition-all duration-300 ${\n                    voiceState === 'recording' ? 'text-red-400' :\n                    voiceState === 'processing' ? 'text-purple-400' :\n                    voiceState === 'speaking' ? 'text-green-400' :\n                    voiceState === 'listening' ? 'text-blue-400' :\n                    'text-white/90'\n                  }`}>\n                    {isManualRecording \n                      ? 'Analyzing...' \n                      : voiceState === 'listening'\n                      ? 'Listening...'\n                      : voiceState === 'processing'\n                      ? 'Thinking...'\n                      : voiceState === 'speaking'\n                      ? 'Speaking...'\n                      : vad.loading\n                      ? 'Initializing...'\n                      : 'Ready to chat'}\n                  </p>\n                  \n                  {/* Animated dots for processing state */}\n                  {voiceState === 'processing' && (\n                    <div className=\"flex justify-center gap-1 mt-2\">\n                      <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }} />\n                      <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }} />\n                      <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }} />\n                    </div>\n                  )}\n                </div>\n                \n                {/* Show user's transcript - responsive */}\n                {transcript && (\n                  <div className=\"mb-4 sm:mb-6\">\n                    <p className=\"text-xs sm:text-sm text-white/70 mb-1\">You said:</p>\n                    <p className=\"text-sm sm:text-lg text-white/90 max-w-xs sm:max-w-md mx-auto px-2\">&ldquo;{transcript}&rdquo;</p>\n                  </div>\n                )}\n                \n                {/* Show agent's response - mobile optimized with scrollable area */}\n                {agentResponse && (\n                  <div className=\"animate-fade-in pointer-events-auto\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <p className=\"text-xs text-white/70\">Agent:</p>\n                      {isStreamingText && (\n                        <div className=\"flex items-center gap-1\">\n                          <div className=\"w-1.5 h-1.5 bg-blue-400 rounded-full animate-pulse\"></div>\n                          <span className=\"text-xs text-blue-400/70\">streaming...</span>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"voice-response-scroll max-h-[40vh] sm:max-h-[50vh] overflow-y-auto overflow-x-hidden px-4 py-2 -mx-2 rounded-lg bg-white/5 relative\">\n                      <p className=\"text-sm sm:text-base text-white max-w-xs sm:max-w-md mx-auto leading-relaxed break-words whitespace-pre-wrap\">\n                        {agentResponse}\n                        {isStreamingText && (\n                          <span className=\"inline-block w-2 h-4 bg-white/60 ml-1 animate-pulse\"></span>\n                        )}\n                      </p>\n                    </div>\n                    \n                    {/* Audio wave visualization for speaking state */}\n                    {voiceState === 'speaking' && (\n                      <div className=\"flex justify-center items-center gap-1 mt-4\">\n                        {[...Array(5)].map((_, i) => (\n                          <div\n                            key={i}\n                            className=\"w-1 bg-green-400 rounded-full audio-wave-bar\"\n                            style={{\n                              height: '20px',\n                              animationDelay: `${i * 0.1}s`\n                            }}\n                          />\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                )}\n                \n                \n              </div>\n\n              {/* Bottom control buttons - Mobile optimized */}\n              <div \n                className=\"absolute bottom-6 sm:bottom-8 md:bottom-12 left-1/2 transform -translate-x-1/2 flex flex-col items-center gap-4 px-4\"\n                style={{ pointerEvents: 'auto', zIndex: 10000 }}\n              >\n                {/* API Key error warning */}\n                {(() => {\n                  const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                  const showWarning = deploymentMode === 'demo' ? !openAIApiKey : false;\n                  if (!showWarning) return null;\n                  \n                  return (\n                    <div className=\"bg-red-500/20 backdrop-blur-sm rounded-lg px-4 py-3 text-red-300 text-sm flex items-center gap-2 border border-red-500/30 max-w-xs\">\n                      <AlertTriangle className=\"w-4 h-4 flex-shrink-0\" />\n                      <span>Voice requires OpenAI API key. Add it in demo settings.</span>\n                    </div>\n                  );\n                })()}\n                \n                {/* Main voice control button */}\n                <div className=\"flex items-center justify-center\">\n                  {/* Recording/Listening State */}\n                  {(isManualRecording || voiceState === 'listening') && (\n                    <button\n                      onClick={isManualRecording ? handleManualRecording : handleToggleListening}\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-red-500/20 hover:bg-red-500/30 active:bg-red-500/40 backdrop-blur-sm transition-all transform active:scale-95 pointer-events-auto shadow-lg border-2 border-red-500/50\"\n                      style={{ pointerEvents: 'auto' }}\n                      aria-label={isManualRecording ? \"Stop recording\" : \"Stop listening\"}\n                    >\n                      {/* Pulsing animation ring */}\n                      <div className=\"absolute inset-0 rounded-full bg-red-500/30 animate-ping\"></div>\n                      \n                      {/* Inner button content */}\n                      <div className=\"relative z-10 w-full h-full flex items-center justify-center\">\n                        <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-red-500 rounded-sm\"></div>\n                      </div>\n                    </button>\n                  )}\n\n                  {/* Processing State */}\n                  {voiceState === 'processing' && (\n                    <button\n                      disabled\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-purple-500/20 backdrop-blur-sm shadow-lg border-2 border-purple-500/50\"\n                      aria-label=\"Processing\"\n                    >\n                      {/* Processing animation */}\n                      <div className=\"absolute inset-3 border-4 border-purple-500/30 border-t-purple-500 rounded-full animate-spin\"></div>\n                      <div className=\"absolute inset-6 border-2 border-purple-500/20 border-t-purple-500/60 rounded-full animate-spin\" style={{ animationDirection: 'reverse', animationDuration: '1.5s' }}></div>\n                    </button>\n                  )}\n\n                  {/* Speaking State - Stop button */}\n                  {voiceState === 'speaking' && (\n                    <button\n                      onClick={handleStopSpeech}\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-orange-500/20 hover:bg-orange-500/30 active:bg-orange-500/40 backdrop-blur-sm transition-all transform active:scale-95 pointer-events-auto shadow-lg border-2 border-orange-500/50\"\n                      style={{ pointerEvents: 'auto' }}\n                      aria-label=\"Stop response\"\n                    >\n                      {/* Sound wave animation */}\n                      <div className=\"absolute inset-0 rounded-full\">\n                        {[...Array(3)].map((_, i) => (\n                          <div\n                            key={i}\n                            className=\"absolute inset-0 rounded-full border border-orange-500/30 animate-ping\"\n                            style={{\n                              animationDelay: `${i * 0.2}s`,\n                              animationDuration: '1.5s'\n                            }}\n                          />\n                        ))}\n                      </div>\n                      \n                      <div className=\"relative z-10 w-full h-full flex items-center justify-center\">\n                        <StopCircle className=\"w-8 h-8 sm:w-10 sm:h-10 text-orange-500\" />\n                      </div>\n                    </button>\n                  )}\n\n                  {/* Idle State - Start button */}\n                  {!vad.loading && !isManualRecording && voiceState !== 'speaking' && voiceState !== 'listening' && voiceState !== 'processing' && (\n                    <button\n                      onClick={vad.errored ? handleManualRecording : handleToggleListening}\n                      disabled={(() => {\n                        const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                        return deploymentMode === 'demo' && !openAIApiKey;\n                      })()}\n                      className={`relative w-20 h-20 sm:w-24 sm:h-24 rounded-full backdrop-blur-sm transition-all transform shadow-lg border-2 ${\n                        (() => {\n                          const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                          return deploymentMode === 'demo' && !openAIApiKey;\n                        })() \n                          ? 'bg-gray-500/20 border-gray-500/50 cursor-not-allowed opacity-50' \n                          : 'bg-blue-500/20 hover:bg-blue-500/30 active:bg-blue-500/40 hover:scale-105 active:scale-95 pointer-events-auto border-blue-500/50'\n                      }`}\n                      style={{ pointerEvents: 'auto' }}\n                      aria-label={(() => {\n                        const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                        return deploymentMode === 'demo' && !openAIApiKey ? \"Voice disabled - API key required\" : \"Start voice chat\";\n                      })()}\n                    >\n                      {/* Subtle glow effect */}\n                      <div className=\"absolute inset-0 rounded-full bg-blue-500/10 blur-sm\"></div>\n                      \n                      <div className=\"relative z-10 w-full h-full flex items-center justify-center\">\n                        <Mic className={`w-8 h-8 sm:w-10 sm:h-10 ${\n                          (() => {\n                            const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                            return deploymentMode === 'demo' && !openAIApiKey ? 'text-gray-500' : 'text-blue-500';\n                          })()\n                        }`} />\n                      </div>\n                    </button>\n                  )}\n\n                  {/* Loading State */}\n                  {vad.loading && (\n                    <button\n                      disabled\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-gray-500/20 backdrop-blur-sm shadow-lg border-2 border-gray-500/50\"\n                      aria-label=\"Loading\"\n                    >\n                      <div className=\"absolute inset-4 border-3 border-gray-500/30 border-t-gray-500 rounded-full animate-spin\"></div>\n                    </button>\n                  )}\n                </div>\n\n                {/* State indicator text (subtle) */}\n                <div className=\"text-xs text-white/60 text-center\">\n                  {(() => {\n                    const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                    return deploymentMode === 'demo' && !openAIApiKey ? 'API key required' : '';\n                  })() ||\n                   vad.loading ? 'Initializing...' :\n                   isManualRecording ? 'Tap to stop' :\n                   voiceState === 'listening' ? 'Listening...' :\n                   voiceState === 'processing' ? 'Processing...' :\n                   voiceState === 'speaking' ? 'Tap to stop' :\n                   'Tap to speak'}\n                </div>\n              </div>\n\n            </>\n          )}\n          </div>\n        </>\n      )}\n      \n      {/* Voice Settings Modal */}\n      <VoiceSettings \n        isOpen={isSettingsOpen} \n        onClose={() => setIsSettingsOpen(false)} \n      />\n    </>\n  );\n}\n\n// Main component that conditionally renders the VAD component\nexport function VoiceModal(props: VoiceModalProps) {\n  const { setVoiceModalOpen } = useVoiceSettingsStore();\n  \n  // Ensure global state is synchronized with props\n  React.useEffect(() => {\n    setVoiceModalOpen(props.isOpen);\n  }, [props.isOpen, setVoiceModalOpen]);\n  \n  // Only render the content (and initialize VAD) when modal is open\n  if (!props.isOpen) {\n    return null;\n  }\n  \n  return <VoiceModalContent {...props} />;\n}","/**\n * ChatContainer Component\n * \n * Main chat interface component that manages the entire chat experience.\n * This is the primary component for integrating CustomGPT chat functionality.\n * \n * Features:\n * - Message display with streaming support\n * - Agent selection and switching\n * - Citation handling with modal details\n * - Multiple deployment modes (standalone, widget, floating)\n * - Welcome screen with example prompts\n * - Error handling and authorization checks\n * \n * For customization:\n * - Example questions are now fetched from agent settings API\n * - Modify DEFAULT_EXAMPLE_PROMPTS for fallback starter questions\n * - Customize WelcomeMessage for branding\n * - Adjust ChatHeader for different layouts\n * - Style using Tailwind classes throughout\n */\n\n'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Sparkles, Bot } from 'lucide-react';\nimport Link from 'next/link';\nimport { toast } from 'sonner';\n\nimport type { ChatMessage, Citation, Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Message } from './Message';\nimport { ChatInput } from './ChatInput';\nimport { TypingIndicator } from './TypingIndicator';\nimport { AgentSelector } from './AgentSelector';\nimport { CitationDetailsModal } from './CitationDetailsModal';\nimport { CitationFilePreview } from './CitationFilePreview';\nimport { ConversationManager } from './ConversationManager';\nimport { MessageErrorDisplay } from './MessageErrorDisplay';\nimport { logger } from '@/lib/logger';\nimport { useWidgetSafe } from '@/widget/WidgetContext';\nimport { useMessageStore, useConversationStore, useAgentStore } from '@/hooks/useWidgetStore';\nimport { MessageSkeleton, LoadingOverlay } from '@/components/ui/loading';\nimport { getClient } from '@/lib/api/client';\nimport { VoiceModal } from '@/components/voice/VoiceModal';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\nimport { useDemoStore } from '@/store/demo';\n\n/**\n * Default example prompts shown to users when starting a new conversation\n * These are used as fallback when API-sourced example questions are not available\n */\nconst DEFAULT_EXAMPLE_PROMPTS = [\n  \"What can you help me with?\",\n  \"Explain this document\", \n  \"Summarize key points\",\n  \"Answer my questions\",\n];\n\ninterface ExamplePromptCardProps {\n  /** The prompt text to display */\n  prompt: string;\n  /** Handler called when the prompt is clicked */\n  onClick: (prompt: string) => void;\n}\n\n/**\n * ExamplePromptCard Component\n * \n * Clickable card showing an example prompt that users can select\n * to quickly start a conversation\n */\nconst ExamplePromptCard: React.FC<ExamplePromptCardProps> = ({ prompt, onClick }) => {\n  return (\n    <button\n      onClick={() => onClick(prompt)}\n      className={cn(\n        \"text-left bg-card border border-border rounded-lg\",\n        \"hover:border-accent hover:shadow-sm transition-all\",\n        \"text-card-foreground\",\n        \"p-2.5\",\n        \"text-xs\",\n        \"min-h-[50px] flex items-center\",\n        \"w-full\" // Ensures button takes full width of grid cell\n      )}\n    >\n      {prompt}\n    </button>\n  );\n};\n\ninterface WelcomeMessageProps {\n  /** Handler called when an example prompt is clicked */\n  onPromptClick: (prompt: string) => void;\n}\n\n/**\n * WelcomeMessage Component\n * \n * Displays a welcome screen when no messages exist in the conversation.\n * Shows the agent name, welcome text, and example prompts.\n * Fetches agent-specific example questions from API with fallback to defaults.\n * Uses Framer Motion for smooth animations.\n */\nconst WelcomeMessage: React.FC<WelcomeMessageProps> = ({ onPromptClick }) => {\n  const { currentAgent } = useAgentStore();\n  const [exampleQuestions, setExampleQuestions] = useState<string[]>(DEFAULT_EXAMPLE_PROMPTS);\n  const [loading, setLoading] = useState(false);\n  \n  /**\n   * Fetch agent settings to get custom example questions\n   */\n  useEffect(() => {\n    const fetchExampleQuestions = async () => {\n      if (!currentAgent) {\n        return;\n      }\n\n      // If we already have example questions from settings, use them\n      if (currentAgent.settings?.example_questions && currentAgent.settings.example_questions.length > 0) {\n        setExampleQuestions(currentAgent.settings.example_questions);\n        return;\n      }\n\n      setLoading(true);\n      try {\n        const client = getClient();\n        const response = await client.getAgentSettings(currentAgent.id);\n        const settings = response.data || response;\n        \n        // Use API example questions if available, otherwise keep defaults\n        if (settings.example_questions && settings.example_questions.length > 0) {\n          setExampleQuestions(settings.example_questions);\n          \n          logger.info('UI', 'Loaded custom example questions from API', {\n            agentId: currentAgent.id,\n            questionCount: settings.example_questions.length\n          });\n        } else {\n          logger.info('UI', 'No custom example questions found, using defaults', {\n            agentId: currentAgent.id\n          });\n        }\n      } catch (error) {\n        logger.warn('UI', 'Failed to load agent settings for example questions', {\n          agentId: currentAgent.id,\n          error: error instanceof Error ? error.message : String(error)\n        });\n        // Keep default questions on error\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchExampleQuestions();\n  }, [currentAgent]);\n  \n  return (\n    <div className={cn(\n      \"flex flex-col items-center justify-center h-full py-8\",\n      \"px-4 md:px-8\"\n    )}>\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className={cn(\n          \"text-center w-full\",\n          \"max-w-sm sm:max-w-md md:max-w-lg\"\n        )}\n      >\n        {/* Agent Avatar */}\n        <div className=\"w-16 h-16 rounded-full flex items-center justify-center mb-6 mx-auto overflow-hidden bg-accent\">\n          {currentAgent?.settings?.chatbot_avatar ? (\n            <img \n              src={currentAgent.settings.chatbot_avatar} \n              alt={`${currentAgent.project_name} avatar`} \n              className=\"w-16 h-16 rounded-full object-cover\"\n            />\n          ) : (\n            <Bot className=\"w-8 h-8 text-muted-foreground\" />\n          )}\n        </div>\n        \n        {/* Welcome Text */}\n        <h3 className={cn(\n          \"font-semibold text-foreground mb-2\",\n          \"text-lg sm:text-xl md:text-2xl\"\n        )}>\n          Welcome to {currentAgent?.project_name || 'CustomGPT'}!\n        </h3>\n        <p className={cn(\n          \"text-muted-foreground mb-6 sm:mb-8\",\n          \"text-sm sm:text-base\"\n        )}>\n          I&apos;m here to help answer your questions and assist with your tasks. How can I help you today?\n        </p>\n        \n        {/* Example Prompts */}\n        <div className={cn(\n          \"grid gap-2 sm:gap-3 w-full\",\n          \"grid-cols-2\",\n          \"max-w-full sm:max-w-md md:max-w-lg\",\n          \"auto-cols-fr\" // Ensures equal column widths\n        )}>\n          {exampleQuestions.map((prompt, idx) => (\n            <motion.div\n              key={`${currentAgent?.id}-${idx}`} // Include agent ID to force re-render on agent change\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3, delay: 0.1 + (idx * 0.1) }}\n            >\n              <ExamplePromptCard\n                prompt={prompt}\n                onClick={onPromptClick}\n              />\n            </motion.div>\n          ))}\n        </div>\n        \n        {/* Loading indicator for example questions */}\n        {loading && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className=\"mt-4\"\n          >\n            <p className=\"text-xs text-muted-foreground\">Loading custom questions...</p>\n          </motion.div>\n        )}\n      </motion.div>\n    </div>\n  );\n};\n\ninterface MessageAreaProps {\n  /** Additional CSS classes for styling */\n  className?: string;\n}\n\n/**\n * MessageArea Component\n * \n * Scrollable area that displays all messages in the current conversation.\n * Handles:\n * - Message rendering with streaming support\n * - Auto-scrolling to latest messages\n * - Citation click handling\n * - Error display\n * - Welcome message when empty\n * - Loading states with typing indicator\n */\nconst MessageArea: React.FC<MessageAreaProps> = ({ className }) => {\n  const { \n    messages, \n    streamingMessage, \n    isStreaming,\n    error,\n    sendMessage,\n    updateMessageFeedback,\n    loading,\n    clearError,\n    setMessagesForConversation\n  } = useMessageStore();\n  const { currentConversation } = useConversationStore();\n  const { currentAgent } = useAgentStore();\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMessages, setIsLoadingMessages] = React.useState(false);\n  const [prevConversationId, setPrevConversationId] = React.useState<string | null>(null);\n  \n  // Citation modal state - tracks which citation is being viewed\n  const [selectedCitationId, setSelectedCitationId] = React.useState<number | string | null>(null);\n  const [citationModalOpen, setCitationModalOpen] = React.useState(false);\n  \n  // Citation preview state\n  const [previewCitationId, setPreviewCitationId] = React.useState<string | null>(null);\n  const [previewModalOpen, setPreviewModalOpen] = React.useState(false);\n  \n  // Check if we're in free trial mode by looking at localStorage\n  const [isFreeTrialMode, setIsFreeTrialMode] = React.useState(false);\n  \n  React.useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const freeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n      setIsFreeTrialMode(freeTrialFlag === 'true');\n    }\n  }, []);\n  \n  const conversationMessages = currentConversation \n    ? messages.get(currentConversation.id.toString()) || []\n    : [];\n  \n  // Detect conversation change\n  useEffect(() => {\n    if (currentConversation && currentConversation.id.toString() !== prevConversationId) {\n      setIsLoadingMessages(true);\n      setPrevConversationId(currentConversation.id.toString());\n      \n      // Set a timeout to hide loading after a reasonable time\n      const timeout = setTimeout(() => {\n        setIsLoadingMessages(false);\n      }, 1000);\n      \n      return () => clearTimeout(timeout);\n    }\n  }, [currentConversation, prevConversationId]);\n  \n  // Hide loading when messages arrive OR when message loading completes\n  useEffect(() => {\n    if (isLoadingMessages && (conversationMessages.length > 0 || !loading)) {\n      setIsLoadingMessages(false);\n    }\n  }, [conversationMessages, isLoadingMessages, loading]);\n  \n  /**\n   * Auto-scroll effect\n   * Automatically scrolls to the bottom when new messages arrive\n   * or when streaming messages are updated\n   * \n   * Uses instant scroll for conversation switches to avoid annoying\n   * scroll animations when clicking on past chats with many messages.\n   * Uses smooth scroll for new messages and streaming updates.\n   */\n  useEffect(() => {\n    if (scrollRef.current) {\n      // Use instant scroll when loading messages (conversation switch)\n      // Use smooth scroll for real-time message additions and streaming\n      const scrollBehavior = isLoadingMessages ? 'auto' : 'smooth';\n      \n      scrollRef.current.scrollTo({\n        top: scrollRef.current.scrollHeight,\n        behavior: scrollBehavior,\n      });\n    }\n  }, [conversationMessages, streamingMessage, isLoadingMessages]);\n  \n  const handleExamplePrompt = (prompt: string) => {\n    // Check if in free trial mode\n    if (isFreeTrialMode) {\n      toast.error('Free Trial Limitation', {\n        description: 'Sending messages is not available in free trial mode. Please use your own API key to send messages.',\n        duration: 5000,\n      });\n      return;\n    }\n    \n    logger.info('UI', 'Example prompt clicked', { prompt });\n    sendMessage(prompt);\n  };\n  \n  const handleCitationClick = (citation: Citation) => {\n    logger.info('UI', 'Citation clicked', {\n      citationId: citation.id,\n      citationIndex: citation.index,\n      citationTitle: citation.title\n    });\n    \n    // Open citation details modal with the citation ID\n    if (citation.id) {\n      setSelectedCitationId(citation.id);\n      setCitationModalOpen(true);\n    }\n  };\n  \n  const handlePreviewClick = (citation: Citation) => {\n    logger.info('UI', 'Citation preview requested', {\n      citationId: citation.id,\n      citationTitle: citation.title\n    });\n    \n    // Open preview modal with the citation ID\n    if (citation.id) {\n      setPreviewCitationId(citation.id);\n      setPreviewModalOpen(true);\n    }\n  };\n  \n  const handleMessageFeedback = async (messageId: string, feedback: 'like' | 'dislike') => {\n    logger.info('UI', 'Message feedback provided', {\n      messageId,\n      feedback\n    });\n    \n    // Call the message store to update feedback\n    await updateMessageFeedback(messageId, feedback);\n  };\n  \n  return (\n    <div\n      ref={scrollRef}\n      className={cn(\n        'flex-1 overflow-y-auto scroll-smooth',\n        'bg-gradient-to-b from-muted/50 to-background',\n        className\n      )}\n    >\n      {/* Error Message */}\n      {error && (\n        <div className=\"p-4 m-4\">\n          <MessageErrorDisplay \n            error={error}\n            onRetry={() => {\n              // Clear error first\n              clearError();\n              \n              // Then retry sending last message if applicable\n              if (currentConversation) {\n                const conversationMessages = messages.get(currentConversation.id.toString()) || [];\n                const lastUserMessage = conversationMessages\n                  .filter(m => m.role === 'user')\n                  .pop();\n                \n                if (lastUserMessage) {\n                  // Remove the error message before retrying\n                  const filteredMessages = conversationMessages.filter(m => m.id !== lastUserMessage.id);\n                  setMessagesForConversation(\n                    currentConversation.id.toString(), \n                    filteredMessages\n                  );\n                  \n                  // Retry sending the message\n                  sendMessage(lastUserMessage.content);\n                }\n              }\n            }}\n          />\n        </div>\n      )}\n\n      {/* Loading state when switching conversations */}\n      {isLoadingMessages && (\n        <LoadingOverlay \n          visible={true} \n          message={conversationMessages.length > 0 ? \"Loading conversation...\" : \"Switching to conversation...\"}\n          blur={true}\n        />\n      )}\n      \n      {/* Message skeleton fallback for empty conversations */}\n      {isLoadingMessages && conversationMessages.length === 0 && !isStreaming && (\n        <div className=\"space-y-0 opacity-30\">\n          <MessageSkeleton isAssistant={false} lines={2} />\n          <MessageSkeleton isAssistant={true} lines={3} />\n          <MessageSkeleton isAssistant={false} lines={1} />\n          <MessageSkeleton isAssistant={true} lines={4} />\n        </div>\n      )}\n\n      {/* Welcome Message */}\n      {conversationMessages.length === 0 && !streamingMessage && !error && !isLoadingMessages && (\n        <WelcomeMessage onPromptClick={handleExamplePrompt} />\n      )}\n      \n      {/* Messages */}\n      {conversationMessages.length > 0 && (\n        <div className=\"space-y-0\">\n          {conversationMessages.map((message, index) => (\n            <Message\n              key={message.id}\n              message={message}\n              agent={currentAgent}\n              isLast={index === conversationMessages.length - 1}\n              onCitationClick={handleCitationClick}\n              onPreviewClick={handlePreviewClick}\n              onFeedback={(feedback) => handleMessageFeedback(message.id, feedback)}\n            />\n          ))}\n        </div>\n      )}\n      \n      {/* Streaming Message */}\n      {streamingMessage && (\n        <Message\n          message={streamingMessage}\n          agent={currentAgent}\n          isStreaming={true}\n          isLast={true}\n          onCitationClick={handleCitationClick}\n          onPreviewClick={handlePreviewClick}\n        />\n      )}\n      \n      {/* Typing Indicator */}\n      {isStreaming && !streamingMessage && (\n        <TypingIndicator />\n      )}\n      \n      {/* Citation Details Modal */}\n      {selectedCitationId && (\n        <CitationDetailsModal\n          isOpen={citationModalOpen}\n          onClose={() => {\n            setCitationModalOpen(false);\n            setSelectedCitationId(null);\n          }}\n          citationId={selectedCitationId}\n          projectId={currentAgent?.id}\n        />\n      )}\n      \n      {/* Citation File Preview Modal */}\n      {previewCitationId && (\n        <CitationFilePreview\n          isOpen={previewModalOpen}\n          onClose={() => {\n            setPreviewModalOpen(false);\n            setPreviewCitationId(null);\n          }}\n          citationId={previewCitationId}\n          fileName={`Citation_${previewCitationId}.txt`}\n        />\n      )}\n    </div>\n  );\n};\n\ninterface ChatHeaderProps {\n  /** Deployment mode affects header layout */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler for agent settings button */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Current conversation ID */\n  currentConversationId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback to create new conversation */\n  onCreateConversation?: () => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n}\n\n/**\n * ChatHeader Component\n * \n * Header bar for the chat interface. Layout changes based on deployment mode:\n * - Standalone: Full header with agent selector\n * - Widget/Floating: Compact header with close button\n * \n * Shows agent status (online/offline) and provides agent switching\n */\nconst ChatHeader: React.FC<ChatHeaderProps> = ({ \n  mode = 'standalone', \n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  conversationRefreshKey\n}) => {\n  const { currentAgent } = useAgentStore();\n  const { isMobile } = useBreakpoint();\n  \n  if (mode === 'widget' || mode === 'floating') {\n    return (\n      <header className=\"border-b border-border bg-background\">\n        {/* Conversation Manager */}\n        {enableConversationManagement && sessionId && (\n          <div className=\"px-4 py-2 border-b border-border\">\n            <ConversationManager\n              sessionId={sessionId}\n              maxConversations={maxConversations}\n              currentConversationId={currentConversationId}\n              onConversationChange={onConversationChange}\n              onCreateConversation={onCreateConversation}\n              className=\"w-full\"\n              refreshKey={conversationRefreshKey}\n            />\n          </div>\n        )}\n        \n        {/* Header Content */}\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            <div className=\"w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0\">\n              <img \n                src=\"/logo.png\" \n                alt=\"CustomGPT.ai Logo\" \n                className=\"w-8 h-8 rounded-lg\"\n              />\n            </div>\n            <div className=\"min-w-0 flex-1\">\n              <h2 className=\"font-semibold text-foreground truncate\">\n                {currentAgent?.project_name || 'CustomGPT Assistant'}\n              </h2>\n              <p className=\"text-xs text-muted-foreground\">\n                {currentAgent?.is_chat_active ? 'Online' : 'Offline'}\n              </p>\n            </div>\n          </div>\n          \n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"p-1.5 rounded-lg hover:bg-accent hover:text-accent-foreground transition-colors flex-shrink-0\"\n            >\n              <span className=\"sr-only\">Close</span>\n              ×\n            </button>\n          )}\n        </div>\n      </header>\n    );\n  }\n  \n  // For standalone mode, show agent selector header (but not on mobile)\n  if (mode === 'standalone' && !isMobile) {\n    return (\n      <header className=\"flex items-center justify-between px-4 py-3 border-b border-border bg-background\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-lg bg-brand-500 flex items-center justify-center\">\n            <Bot className=\"w-5 h-5 text-white\" />\n          </div>\n          <h1 className=\"text-lg font-semibold text-foreground\">\n            Agent Chat\n          </h1>\n        </div>\n        \n        <div className=\"flex-1 max-w-xs ml-4\">\n          <AgentSelector\n            onSettingsClick={onAgentSettings}\n            className=\"w-full\"\n          />\n        </div>\n      </header>\n    );\n  }\n  \n  return null;\n};\n\ninterface ChatContainerProps {\n  /** Deployment mode - affects layout and styling */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Additional CSS classes */\n  className?: string;\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler when agent settings are requested */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Specific conversation thread to load */\n  threadId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback when message is sent/received */\n  onMessage?: (message: any) => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n  /** Mobile optimization mode */\n  isMobile?: boolean;\n}\n\n/**\n * ChatContainer Component - Main Export\n * \n * The primary chat interface component. Can be deployed in three modes:\n * \n * 1. Standalone: Full-page chat interface\n *    - Use when chat is the main feature\n *    - No fixed dimensions, fills container\n * \n * 2. Widget: Embedded chat widget\n *    - Use for embedding in existing pages\n *    - Fixed dimensions with shadow\n * \n * 3. Floating: Floating chat bubble\n *    - Use for overlay chat interfaces\n *    - Fixed dimensions with stronger shadow\n * \n * @example\n * // Standalone mode\n * <ChatContainer mode=\"standalone\" />\n * \n * @example\n * // Widget mode with close handler\n * <ChatContainer \n *   mode=\"widget\" \n *   onClose={() => setShowChat(false)}\n * />\n */\nexport const ChatContainer: React.FC<ChatContainerProps> = ({ \n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  conversationRefreshKey,\n  isMobile = false\n}) => {\n  const { sendMessage, isStreaming, cancelStreaming } = useMessageStore();\n  const { fetchAgents, agents, currentAgent } = useAgentStore();\n  const { currentConversation } = useConversationStore();\n  \n  // Get widget instance from context\n  const widget = useWidgetSafe();\n  \n  // Track current conversation for the widget\n  const [currentConversationId, setCurrentConversationId] = React.useState<string | null>(null);\n  \n  // Voice modal state\n  const [isVoiceModalOpen, setIsVoiceModalOpen] = React.useState(false);\n  const [voiceError, setVoiceError] = React.useState<string | null>(null);\n  \n  // Get demo store state\n  const { isDemoMode, openAIApiKey } = useDemoStore();\n  \n  // Check if we're in free trial mode by looking at localStorage\n  const [isFreeTrialMode, setIsFreeTrialMode] = React.useState(false);\n  \n  React.useEffect(() => {\n    if (mode === 'standalone' && typeof window !== 'undefined') {\n      const freeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n      setIsFreeTrialMode(freeTrialFlag === 'true');\n    }\n  }, [mode]);\n  \n  // Check if OpenAI key is available\n  const checkVoiceAvailability = () => {\n    // In demo mode, check if user has provided OpenAI key\n    if (isDemoMode) {\n      if (!openAIApiKey) {\n        return {\n          available: false,\n          error: 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n        };\n      }\n      return { available: true };\n    }\n    \n    // In normal mode, check if OpenAI key is in environment\n    // We can't check server-side env vars from client, so we'll let the API handle it\n    return { available: true };\n  };\n  \n  // Handle voice button click\n  const handleVoiceClick = () => {\n    const { available, error } = checkVoiceAvailability();\n    \n    if (!available) {\n      toast.error(error || 'Voice feature is not available');\n      return;\n    }\n    \n    setIsVoiceModalOpen(true);\n  };\n  \n  // Handle conversation management\n  const handleConversationChange = (conversation: any) => {\n    setCurrentConversationId(conversation.id);\n    onConversationChange?.(conversation);\n    // The widget will handle the actual conversation switch\n    if (widget) {\n      widget.switchConversation(conversation.id);\n    }\n  };\n  \n  const handleCreateConversation = () => {\n    if (widget) {\n      const newConv = widget.createConversation();\n      if (newConv) {\n        setCurrentConversationId(newConv.id);\n      } else {\n        // Show user-friendly message when conversation limit is reached\n        const maxConversations = widget.configuration?.maxConversations || 5;\n        toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n      }\n    }\n  };\n\n  /**\n   * Agent initialization effect\n   * Fetches available agents when the component first mounts\n   * Only runs if agents haven't been loaded yet\n   */\n  useEffect(() => {\n    const initializeAgents = async () => {\n      // Only fetch if we don't have agents and no current agent\n      if (agents.length === 0 && !currentAgent) {\n        logger.info('UI', 'Initializing agents on ChatContainer mount');\n        try {\n          await fetchAgents();\n          logger.info('UI', 'Agents initialized successfully', {\n            agentCount: agents.length\n          });\n        } catch (error) {\n          logger.error('UI', 'Failed to initialize agents', error, {\n            errorMessage: error instanceof Error ? error.message : String(error)\n          });\n          console.error('Failed to initialize agents:', error);\n        }\n      } else {\n        logger.info('UI', 'Agents already initialized', {\n          agentCount: agents.length,\n          hasCurrentAgent: !!currentAgent,\n          currentAgentName: currentAgent?.project_name\n        });\n      }\n    };\n\n    initializeAgents();\n  }, [agents.length, currentAgent, fetchAgents]); // Add dependencies for exhaustive deps\n  \n  const handleSendMessage = async (content: string, files?: File[]) => {\n    // Check if in free trial mode\n    if (isFreeTrialMode) {\n      toast.error('Free Trial Limitation', {\n        description: 'Sending messages is not available in free trial mode. Please use your own API key to send messages.',\n        duration: 5000,\n      });\n      return;\n    }\n    \n    logger.info('UI', 'Sending message from ChatContainer', {\n      contentLength: content.length,\n      hasFiles: files && files.length > 0,\n      fileCount: files?.length || 0,\n      currentAgent: currentAgent?.project_name,\n      agentId: currentAgent?.id\n    });\n    \n    try {\n      await sendMessage(content, files);\n      logger.info('UI', 'Message sent successfully');\n    } catch (error) {\n      logger.error('UI', 'Failed to send message from ChatContainer', error, {\n        errorMessage: error instanceof Error ? error.message : String(error),\n        isAuthError: error instanceof Error && (error.message.includes('403') || error.message.includes('unauthorized'))\n      });\n      console.error('Failed to send message:', error);\n    }\n  };\n  \n  const handleStopGeneration = () => {\n    logger.info('UI', 'User cancelled streaming generation');\n    cancelStreaming();\n  };\n  \n  const handleAgentSettings = (agent: Agent) => {\n    logger.info('UI', 'Agent settings requested', {\n      agentId: agent.id,\n      agentName: agent.project_name\n    });\n    onAgentSettings?.(agent);\n  };\n  \n  return (\n    <div\n      className={cn(\n        'flex flex-col bg-background',\n        mode === 'standalone' && 'h-full',\n        mode === 'widget' && !isMobile && 'h-[600px] w-[400px] rounded-lg shadow-xl border border-border',\n        mode === 'floating' && !isMobile && 'h-[600px] w-[400px] rounded-lg shadow-2xl border border-border',\n        isMobile && 'h-full w-full',\n        className\n      )}\n    >\n      <ChatHeader \n        mode={mode} \n        onClose={onClose}\n        onAgentSettings={handleAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        currentConversationId={currentConversationId || currentConversation?.id.toString()}\n        onConversationChange={handleConversationChange}\n        onCreateConversation={handleCreateConversation}\n        conversationRefreshKey={conversationRefreshKey}\n      />\n      <MessageArea className=\"flex-1 overflow-y-auto\" />\n      <div className={cn(\n        \"mt-auto\",\n        isMobile && mode === 'standalone' ? \"pb-[30px]\" : \"\"\n      )}>\n        <ChatInput\n          onSend={handleSendMessage}\n          disabled={isStreaming || isFreeTrialMode}\n          placeholder={\n            isFreeTrialMode \n              ? \"Free trial mode - Use your API key to send messages\" \n              : isStreaming \n                ? \"AI is thinking...\" \n                : \"Send a message...\"\n          }\n          onVoiceClick={handleVoiceClick}\n          isMobile={isMobile}\n        />\n      </div>\n      \n      {/* Branding Footer */}\n      <div className={cn(\n        \"px-4 py-2 border-t border-border bg-muted\",\n        mode === 'standalone' && \"flex items-center justify-center\"\n      )}>\n        <a\n          href=\"https://customgpt.ai\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={cn(\n            \"text-xs text-muted-foreground hover:text-foreground transition-colors\",\n            mode === 'standalone' ? \"inline-flex items-center\" : \"block text-center\"\n          )}\n        >\n          Powered by CustomGPT.ai\n        </a>\n      </div>\n      \n      {/* Voice Modal */}\n      {currentAgent && (\n        <VoiceModal\n          isOpen={isVoiceModalOpen}\n          onClose={() => setIsVoiceModalOpen(false)}\n          projectId={currentAgent.id.toString()}\n          projectName={currentAgent.project_name}\n        />\n      )}\n    </div>\n  );\n};","import React from 'react';\nimport { X, Calendar, User, Hash, Clock, AlertCircle, Copy, Download, Share2 } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { toast } from 'sonner';\nimport type { Conversation } from '@/types';\nimport { Button } from '@/components/ui/button';\nimport { formatTimestamp, cn } from '@/lib/utils';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\ninterface ConversationDetailsModalProps {\n  conversation: Conversation | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onExport?: (conversation: Conversation) => void;\n  onShare?: (conversation: Conversation) => void;\n}\n\nexport const ConversationDetailsModal: React.FC<ConversationDetailsModalProps> = ({\n  conversation,\n  isOpen,\n  onClose,\n  onExport,\n  onShare,\n}) => {\n  const { isMobile } = useBreakpoint();\n  \n  if (!isOpen || !conversation) return null;\n\n  const copyToClipboard = (text: string, label: string) => {\n    navigator.clipboard.writeText(text);\n    toast.success(`${label} copied to clipboard`);\n  };\n\n  const formatFullTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'short'\n    });\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black bg-opacity-50 z-50\"\n            onClick={onClose}\n          />\n\n          {/* Modal */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            className={cn(\n              \"fixed bg-background shadow-xl z-50\",\n              isMobile \n                ? \"inset-x-0 bottom-0 top-20 rounded-t-xl flex flex-col\" \n                : \"inset-x-0 top-[10%] mx-auto max-w-2xl rounded-lg max-h-[80vh] overflow-hidden\"\n            )}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {/* Header */}\n            <div className={cn(\n              \"flex items-center justify-between border-b border-border bg-background/95 backdrop-blur-sm flex-shrink-0\",\n              isMobile ? \"px-4 py-4\" : \"p-6\"\n            )}>\n              <h2 className={cn(\n                \"font-semibold text-foreground\",\n                isMobile ? \"text-base\" : \"text-xl\"\n              )}>Conversation Details</h2>\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={onClose}\n                className={cn(\n                  isMobile ? \"h-9 w-9 touch-target\" : \"h-8 w-8\"\n                )}\n              >\n                <X className={cn(\n                  isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n                )} />\n              </Button>\n            </div>\n\n            {/* Content */}\n            <div className={cn(\n              \"overflow-y-auto\",\n              isMobile \n                ? \"flex-1 px-4 py-4 pb-6 safe-area-pb space-y-6\" \n                : \"p-6 space-y-6 max-h-[calc(80vh-200px)]\"\n            )}>\n              {/* Basic Information */}\n              <div>\n                <h3 className={cn(\n                  \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                  isMobile ? \"text-xs\" : \"text-sm\"\n                )}>\n                  Basic Information\n                </h3>\n                <div className={cn(\n                  \"bg-muted rounded-lg space-y-4\",\n                  isMobile ? \"p-4\" : \"p-4 space-y-3\"\n                )}>\n                  {/* Conversation Name */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Conversation Name</span>\n                    </div>\n                    <span className={cn(\n                      \"text-foreground font-medium break-words\",\n                      isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                    )}>{conversation.name}</span>\n                  </div>\n\n                  {/* Conversation ID */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Conversation ID</span>\n                    </div>\n                    <div className={cn(\n                      \"flex items-center gap-2\",\n                      isMobile ? \"ml-6\" : \"\"\n                    )}>\n                      <span className={cn(\n                        \"text-foreground font-mono\",\n                        isMobile ? \"text-xs\" : \"text-sm\"\n                      )}>{conversation.id}</span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className={cn(\n                          isMobile ? \"h-8 w-8 touch-target\" : \"h-6 w-6\"\n                        )}\n                        onClick={() => copyToClipboard(conversation.id.toString(), 'Conversation ID')}\n                      >\n                        <Copy className={cn(\n                          isMobile ? \"h-4 w-4\" : \"h-3 w-3\"\n                        )} />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Session ID */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Session ID</span>\n                    </div>\n                    <div className={cn(\n                      \"flex items-center gap-2\",\n                      isMobile ? \"ml-6\" : \"\"\n                    )}>\n                      <span \n                        className={cn(\n                          \"text-foreground font-mono break-all\",\n                          isMobile ? \"text-sm\" : \"text-sm truncate max-w-[300px]\"\n                        )} \n                        title={conversation.session_id}\n                      >\n                        {conversation.session_id}\n                      </span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className={cn(\n                          isMobile ? \"h-8 w-8 touch-target flex-shrink-0\" : \"h-6 w-6\"\n                        )}\n                        onClick={() => copyToClipboard(conversation.session_id, 'Session ID')}\n                      >\n                        <Copy className={cn(\n                          isMobile ? \"h-4 w-4\" : \"h-3 w-3\"\n                        )} />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Project ID */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Project ID</span>\n                    </div>\n                    <span className={cn(\n                      \"text-foreground\",\n                      isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                    )}>{conversation.project_id}</span>\n                  </div>\n\n                  {/* Message Count */}\n                  {conversation.message_count !== undefined && (\n                    <div className={cn(\n                      isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                    )}>\n                      <div className=\"flex items-center gap-2\">\n                        <Hash className={cn(\n                          \"text-muted-foreground\",\n                          isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                        )} />\n                        <span className={cn(\n                          \"font-medium text-foreground\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>Message Count</span>\n                      </div>\n                      <span className={cn(\n                        \"text-foreground\",\n                        isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                      )}>{conversation.message_count} messages</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Timeline */}\n              <div>\n                <h3 className={cn(\n                  \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                  isMobile ? \"text-xs\" : \"text-sm\"\n                )}>\n                  Timeline\n                </h3>\n                <div className={cn(\n                  \"bg-muted rounded-lg space-y-4\",\n                  isMobile ? \"p-4\" : \"p-4 space-y-3\"\n                )}>\n                  {/* Created At */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Created At</span>\n                    </div>\n                    <div className={cn(\n                      isMobile ? \"ml-6 space-y-1\" : \"text-right\"\n                    )}>\n                      <span className={cn(\n                        \"text-foreground block\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>{formatFullTimestamp(conversation.created_at)}</span>\n                      <span className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"text-xs\" : \"text-xs\"\n                      )}>({formatTimestamp(conversation.created_at)})</span>\n                    </div>\n                  </div>\n\n                  {/* Last Updated */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Last Updated</span>\n                    </div>\n                    <div className={cn(\n                      isMobile ? \"ml-6 space-y-1\" : \"text-right\"\n                    )}>\n                      <span className={cn(\n                        \"text-foreground block\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>{formatFullTimestamp(conversation.updated_at)}</span>\n                      <span className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"text-xs\" : \"text-xs\"\n                      )}>({formatTimestamp(conversation.updated_at)})</span>\n                    </div>\n                  </div>\n\n                  {/* Deleted At */}\n                  {conversation.deleted_at && (\n                    <div className={cn(\n                      isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                    )}>\n                      <div className=\"flex items-center gap-2\">\n                        <AlertCircle className={cn(\n                          \"text-red-400\",\n                          isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                        )} />\n                        <span className={cn(\n                          \"font-medium text-red-700\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>Deleted At</span>\n                      </div>\n                      <div className={cn(\n                        isMobile ? \"ml-6 space-y-1\" : \"text-right\"\n                      )}>\n                        <span className={cn(\n                          \"text-red-900 block\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>{formatFullTimestamp(conversation.deleted_at)}</span>\n                        <span className={cn(\n                          \"text-red-500\",\n                          isMobile ? \"text-xs\" : \"text-xs\"\n                        )}>({formatTimestamp(conversation.deleted_at)})</span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* User Information */}\n              {conversation.created_by && (\n                <div>\n                  <h3 className={cn(\n                    \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                    isMobile ? \"text-xs\" : \"text-sm\"\n                  )}>\n                    User Information\n                  </h3>\n                  <div className={cn(\n                    \"bg-accent rounded-lg\",\n                    isMobile ? \"p-4\" : \"p-4\"\n                  )}>\n                    <div className={cn(\n                      isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                    )}>\n                      <div className=\"flex items-center gap-2\">\n                        <User className={cn(\n                          \"text-muted-foreground\",\n                          isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                        )} />\n                        <span className={cn(\n                          \"font-medium text-foreground\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>Created By</span>\n                      </div>\n                      <span className={cn(\n                        \"text-foreground\",\n                        isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                      )}>User ID: {conversation.created_by}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Actions */}\n              <div>\n                <h3 className={cn(\n                  \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                  isMobile ? \"text-xs\" : \"text-sm\"\n                )}>\n                  Actions\n                </h3>\n                <div className={cn(\n                  \"flex gap-3\",\n                  isMobile ? \"flex-col space-y-3\" : \"flex-row\"\n                )}>\n                  {onExport && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => onExport(conversation)}\n                      className={cn(\n                        \"flex items-center gap-2\",\n                        isMobile ? \"w-full h-11 touch-target justify-center\" : \"\"\n                      )}\n                    >\n                      <Download className={cn(\n                        isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        isMobile ? \"text-sm\" : \"\"\n                      )}>Export Conversation</span>\n                    </Button>\n                  )}\n                  {onShare && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => onShare(conversation)}\n                      className={cn(\n                        \"flex items-center gap-2\",\n                        isMobile ? \"w-full h-11 touch-target justify-center\" : \"\"\n                      )}\n                    >\n                      <Share2 className={cn(\n                        isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        isMobile ? \"text-sm\" : \"\"\n                      )}>Share Conversation</span>\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Footer */}\n            {!isMobile && (\n              <div className=\"p-6 border-t border-border bg-accent\">\n                <div className=\"flex justify-end\">\n                  <Button onClick={onClose}>\n                    Close\n                  </Button>\n                </div>\n              </div>\n            )}\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};","import React, { useState } from 'react';\nimport { AlertTriangle, Trash2, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\ninterface DeleteConversationDialogProps {\n  isOpen: boolean;\n  conversationName: string;\n  messageCount?: number;\n  onConfirm: () => Promise<void>;\n  onCancel: () => void;\n}\n\nexport const DeleteConversationDialog: React.FC<DeleteConversationDialogProps> = ({\n  isOpen,\n  conversationName,\n  messageCount,\n  onConfirm,\n  onCancel,\n}) => {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { isMobile } = useBreakpoint();\n\n  const handleConfirm = async () => {\n    setIsDeleting(true);\n    setError(null);\n    \n    try {\n      await onConfirm();\n    } catch (err: any) {\n      console.error('Delete failed:', err);\n      \n      // Parse error message based on status code\n      let errorMessage = 'Failed to delete conversation';\n      \n      if (err.status === 400) {\n        errorMessage = 'Invalid request. Please try again.';\n      } else if (err.status === 401) {\n        errorMessage = 'Authentication failed. Please refresh the page and try again.';\n      } else if (err.status === 404) {\n        errorMessage = 'Conversation not found. It may have already been deleted.';\n      } else if (err.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      setIsDeleting(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-black bg-opacity-50\"\n            onClick={!isDeleting ? onCancel : undefined}\n          />\n\n          {/* Dialog */}\n          <motion.div\n            initial={{ opacity: 0, scale: isMobile ? 1 : 0.95, y: isMobile ? '100%' : 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: isMobile ? 1 : 0.95, y: isMobile ? '100%' : 0 }}\n            className={cn(\n              \"relative bg-background shadow-xl\",\n              isMobile \n                ? \"fixed inset-x-0 bottom-0 rounded-t-xl safe-area-pb\" \n                : \"w-full max-w-md rounded-lg\"\n            )}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className={cn(\n              isMobile ? \"p-4 pb-6\" : \"p-6\"\n            )}>\n              {/* Header */}\n              <div className={cn(\n                \"flex items-start\",\n                isMobile ? \"gap-3\" : \"gap-4\"\n              )}>\n                <div className={cn(\n                  \"bg-red-100 rounded-full flex-shrink-0\",\n                  isMobile ? \"p-2.5\" : \"p-3\"\n                )}>\n                  <AlertTriangle className={cn(\n                    \"text-red-600\",\n                    isMobile ? \"w-5 h-5\" : \"w-6 h-6\"\n                  )} />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className={cn(\n                    \"font-semibold text-foreground\",\n                    isMobile ? \"text-base\" : \"text-lg\"\n                  )}>\n                    Delete Conversation\n                  </h3>\n                  <p className={cn(\n                    \"mt-2 text-muted-foreground\",\n                    isMobile ? \"text-sm\" : \"text-sm\"\n                  )}>\n                    Are you sure you want to delete <strong>&ldquo;{conversationName}&rdquo;</strong>?\n                  </p>\n                  \n                  {messageCount !== undefined && messageCount > 0 && (\n                    <p className={cn(\n                      \"mt-2 text-muted-foreground\",\n                      isMobile ? \"text-sm\" : \"text-sm\"\n                    )}>\n                      This conversation contains {messageCount} message{messageCount !== 1 ? 's' : ''}.\n                    </p>\n                  )}\n                  \n                  <div className={cn(\n                    \"mt-3 bg-red-50 rounded-lg\",\n                    isMobile ? \"p-3\" : \"p-3\"\n                  )}>\n                    <p className={cn(\n                      \"text-red-800 font-medium\",\n                      isMobile ? \"text-sm\" : \"text-sm\"\n                    )}>\n                      ⚠️ This action cannot be undone\n                    </p>\n                    <p className={cn(\n                      \"text-red-700 mt-1\",\n                      isMobile ? \"text-xs\" : \"text-xs\"\n                    )}>\n                      All messages and data associated with this conversation will be permanently deleted.\n                    </p>\n                  </div>\n\n                  {/* Error Display */}\n                  {error && (\n                    <div className={cn(\n                      \"mt-3 bg-red-100 border border-red-200 rounded-lg\",\n                      isMobile ? \"p-3\" : \"p-3\"\n                    )}>\n                      <p className={cn(\n                        \"text-red-900 font-medium\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>\n                        Error: {error}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className={cn(\n                \"flex items-center gap-3\",\n                isMobile ? \"mt-6 flex-col-reverse\" : \"mt-6 justify-end\"\n              )}>\n                <Button\n                  variant=\"outline\"\n                  onClick={onCancel}\n                  disabled={isDeleting}\n                  className={cn(\n                    isMobile && \"w-full h-11 touch-target\"\n                  )}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleConfirm}\n                  disabled={isDeleting}\n                  className={cn(\n                    \"min-w-[100px]\",\n                    isMobile && \"w-full h-11 touch-target\"\n                  )}\n                >\n                  {isDeleting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                      Deleting...\n                    </>\n                  ) : (\n                    <>\n                      <Trash2 className={cn(\n                        \"mr-2\",\n                        isMobile ? \"w-4 h-4\" : \"w-4 h-4\"\n                      )} />\n                      Delete\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n      )}\n    </AnimatePresence>\n  );\n};","/**\n * Conversation Sidebar Component\n * \n * Manages the conversation list and provides quick navigation\n * between different chat sessions. Includes conversation management\n * features like create, rename, and delete.\n * \n * Features:\n * - Conversation list with search/filter\n * - Create new conversation\n * - Rename conversations inline\n * - Delete conversations with confirmation\n * - Agent management access\n * - Data source management\n * - Analytics dashboard access\n * - Collapsible sidebar\n * \n * State Management:\n * - Conversations from conversationStore\n * - Current conversation selection\n * - Search/filter state (local)\n * - Collapse state (passed from parent)\n * \n * UI/UX Features:\n * - Hover states and animations\n * - Keyboard shortcuts (future enhancement)\n * - Context menu for conversation actions\n * - Auto-scroll to selected conversation\n * - Responsive design for mobile\n * \n * Features:\n * - Advanced conversation organization with categories and search\n * - Bulk conversation management with export/import capabilities\n * - Customizable sidebar design with responsive layout\n * - Professional conversation management with templates and pinning\n * - Comprehensive conversation history and analytics\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport Link from 'next/link';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  MessageSquare, \n  Plus, \n  MoreHorizontal, \n  Trash2, \n  Edit3, \n  Calendar,\n  Search,\n  X,\n  Bot,\n  Filter,\n  ChevronDown,\n  ChevronUp,\n  Info,\n  Download,\n  Share2,\n  Clock,\n  User\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Conversation } from '@/types';\nimport { useConversationStore, useAgentStore, useMessageStore } from '@/hooks/useWidgetStore';\nimport { cn, formatTimestamp, generateConversationName } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { logger } from '@/lib/logger';\nimport { ConversationDetailsModal } from './ConversationDetailsModal';\nimport { DeleteConversationDialog } from './DeleteConversationDialog';\nimport { ConversationSkeleton, Spinner } from '@/components/ui/loading';\nimport { useDemoModeContext } from '@/contexts/DemoModeContext';\n\n/**\n * Props for individual conversation item\n * \n * @property conversation - Conversation data object\n * @property isSelected - Whether this conversation is currently active\n * @property onSelect - Callback when conversation is clicked\n * @property onDelete - Callback for deleting conversation\n * @property onRename - Callback for renaming conversation\n */\ninterface ConversationItemProps {\n  conversation: Conversation;\n  isSelected: boolean;\n  onSelect: (conversation: Conversation) => void;\n  onDelete: (conversationId: string) => void;\n  onRename: (conversationId: string, newName: string) => void;\n}\n\n/**\n * Individual Conversation Item Component\n * \n * Renders a single conversation in the sidebar with actions.\n * Features inline editing and context menu for management.\n */\nconst ConversationItem: React.FC<ConversationItemProps> = ({\n  conversation,\n  isSelected,\n  onSelect,\n  onDelete,\n  onRename\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editName, setEditName] = useState(conversation.name);\n  const [showMenu, setShowMenu] = useState(false);\n  const [showDetails, setShowDetails] = useState(false);\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  // Close menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setShowMenu(false);\n      }\n    };\n\n    if (showMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [showMenu]);\n\n  // Focus input when editing starts\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n      inputRef.current.select();\n    }\n  }, [isEditing]);\n\n  const handleEdit = () => {\n    setIsEditing(true);\n    setShowMenu(false);\n  };\n\n  const handleSaveEdit = () => {\n    if (editName.trim() && editName.trim() !== conversation.name) {\n      onRename(conversation.id.toString(), editName.trim());\n    }\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSaveEdit();\n    } else if (e.key === 'Escape') {\n      handleCancelEdit();\n    }\n  };\n\n  const handleDelete = () => {\n    setShowDeleteDialog(true);\n    setShowMenu(false);\n  };\n\n  const handleConfirmDelete = async () => {\n    await onDelete(conversation.id.toString());\n    setShowDeleteDialog(false);\n  };\n\n  return (\n    <div\n      className={cn(\n        'group relative p-3 rounded-lg cursor-pointer transition-colors',\n        'hover:bg-accent',\n        isSelected && 'bg-accent/50 hover:bg-accent/70'\n      )}\n      onClick={async () => {\n        if (isEditing || isLoading) return;\n        setIsLoading(true);\n        try {\n          await onSelect(conversation);\n        } finally {\n          setIsLoading(false);\n        }\n      }}\n    >\n      {/* Loading overlay for individual conversation */}\n      {isLoading && (\n        <div className=\"absolute inset-0 bg-background/70 backdrop-blur-sm rounded-lg flex items-center justify-center z-10\">\n          <Spinner size=\"sm\" />\n        </div>\n      )}\n      \n      <div className=\"flex items-start justify-between gap-2\">\n        <div className=\"flex-1 min-w-0\">\n          {isEditing ? (\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={editName}\n              onChange={(e) => setEditName(e.target.value)}\n              onBlur={handleSaveEdit}\n              onKeyDown={handleKeyDown}\n              className=\"w-full px-2 py-1 text-sm font-medium text-foreground bg-background border border-input rounded focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent\"\n              maxLength={100}\n            />\n          ) : (\n            <h3 className=\"font-medium text-foreground text-sm truncate\">\n              {conversation.name}\n            </h3>\n          )}\n          \n          <div className=\"flex items-center gap-2 mt-1 text-xs text-muted-foreground\">\n            <Clock className=\"w-3 h-3\" />\n            <span title={new Date(conversation.updated_at).toLocaleString()}>\n              {formatTimestamp(conversation.updated_at)}\n            </span>\n            {conversation.message_count !== undefined && (\n              <>\n                <span>•</span>\n                <MessageSquare className=\"w-3 h-3\" />\n                <span>{conversation.message_count}</span>\n              </>\n            )}\n          </div>\n          \n          {/* More Details Button */}\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              setShowDetails(!showDetails);\n            }}\n            className=\"flex items-center gap-1 mt-2 text-xs text-muted-foreground hover:text-foreground transition-colors\"\n          >\n            {showDetails ? (\n              <>\n                <ChevronUp className=\"w-3 h-3\" />\n                Hide Details\n              </>\n            ) : (\n              <>\n                <ChevronDown className=\"w-3 h-3\" />\n                More Details\n              </>\n            )}\n          </button>\n          \n          {/* Expandable Details Section */}\n          <AnimatePresence>\n            {showDetails && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                exit={{ opacity: 0, height: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"mt-2 pt-2 border-t border-border\"\n              >\n                <div className=\"space-y-1 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Session ID:</span>\n                    <span className=\"font-mono text-foreground truncate max-w-[150px]\" title={conversation.session_id}>\n                      {conversation.session_id}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Created:</span>\n                    <span className=\"text-foreground\">{formatTimestamp(conversation.created_at)}</span>\n                  </div>\n                  {conversation.deleted_at && (\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-destructive\">Deleted:</span>\n                      <span className=\"text-destructive\">{formatTimestamp(conversation.deleted_at)}</span>\n                    </div>\n                  )}\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Menu Button */}\n        {!isEditing && (\n          <div className=\"relative\" ref={menuRef}>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setShowMenu(!showMenu);\n              }}\n              className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-muted-foreground hover:text-foreground\"\n            >\n              <MoreHorizontal className=\"h-3 w-3\" />\n            </Button>\n\n            {/* Dropdown Menu */}\n            <AnimatePresence>\n              {showMenu && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.95, y: -5 }}\n                  animate={{ opacity: 1, scale: 1, y: 0 }}\n                  exit={{ opacity: 0, scale: 0.95, y: -5 }}\n                  transition={{ duration: 0.1 }}\n                  className=\"absolute right-0 top-6 mt-1 w-40 bg-background border border-border rounded-lg shadow-lg z-50\"\n                >\n                  <div className=\"py-1\">\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setShowDetailsModal(true);\n                        setShowMenu(false);\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-foreground hover:bg-accent\"\n                    >\n                      <Info className=\"w-3 h-3\" />\n                      View Details\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEdit();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-foreground hover:bg-accent\"\n                    >\n                      <Edit3 className=\"w-3 h-3\" />\n                      Rename\n                    </button>\n                    <div className=\"border-t border-border my-1\" />\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDelete();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-destructive hover:bg-destructive/10\"\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                      Delete\n                    </button>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        )}\n      </div>\n\n      {/* Conversation Details Modal */}\n      <ConversationDetailsModal\n        conversation={conversation}\n        isOpen={showDetailsModal}\n        onClose={() => setShowDetailsModal(false)}\n        onExport={(conv) => {\n          // Export functionality\n          const data = JSON.stringify(conv, null, 2);\n          const blob = new Blob([data], { type: 'application/json' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `conversation-${conv.id}-${new Date().toISOString().split('T')[0]}.json`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          URL.revokeObjectURL(url);\n          toast.success('Conversation exported successfully');\n        }}\n        onShare={(conv) => {\n          // Share functionality\n          const shareUrl = `${window.location.origin}/chat/${conv.session_id}`;\n          navigator.clipboard.writeText(shareUrl);\n          toast.success('Share link copied to clipboard');\n        }}\n      />\n\n      {/* Delete Conversation Dialog */}\n      <DeleteConversationDialog\n        isOpen={showDeleteDialog}\n        conversationName={conversation.name}\n        messageCount={conversation.message_count}\n        onConfirm={handleConfirmDelete}\n        onCancel={() => setShowDeleteDialog(false)}\n      />\n    </div>\n  );\n};\n\ninterface ConversationSidebarProps {\n  className?: string;\n  isCollapsed?: boolean;\n  onToggle?: () => void;\n  isMobile?: boolean;\n  onConversationSelect?: () => void;\n}\n\nexport const ConversationSidebar: React.FC<ConversationSidebarProps> = ({\n  className,\n  isCollapsed = false,\n  onToggle,\n  isMobile = false,\n  onConversationSelect\n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isCreating, setIsCreating] = useState(false);\n  const [showSortFilter, setShowSortFilter] = useState(false);\n  const [searchMode, setSearchMode] = useState<'name' | 'id' | 'session'>('name');\n  const [dateFilter, setDateFilter] = useState<'all' | 'today' | 'week' | 'month'>('all');\n  const [isSearching, setIsSearching] = useState(false);\n  \n  const { isFreeTrialMode } = useDemoModeContext();\n  \n  const { \n    conversations, \n    currentConversation, \n    loading, \n    error,\n    fetchConversations,\n    createConversation,\n    selectConversation,\n    deleteConversation,\n    updateConversation,\n    // Pagination state\n    currentPage,\n    totalPages,\n    totalConversations,\n    perPage,\n    // Sorting and filtering state\n    sortOrder,\n    sortBy,\n    userFilter\n  } = useConversationStore();\n  \n  const { currentAgent } = useAgentStore();\n  const { clearMessages, loadMessages } = useMessageStore();\n\n  // Fetch conversations when agent changes\n  useEffect(() => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (currentAgent && !isDemoMode) {\n      logger.info('UI', 'Agent changed in sidebar, fetching conversations', {\n        agentId: currentAgent.id,\n        agentName: currentAgent.project_name,\n        isActive: currentAgent.is_chat_active\n      });\n      fetchConversations(currentAgent.id);\n    } else if (!currentAgent) {\n      logger.warn('UI', 'No current agent selected in sidebar');\n    } else if (isDemoMode) {\n      logger.info('UI', 'Skipping conversation fetch in demo mode');\n    }\n  }, [currentAgent, fetchConversations]);\n\n  // Debounced search function\n  const debouncedSearch = useCallback(\n    async (query: string) => {\n      if (!currentAgent) return;\n      \n      setIsSearching(true);\n      try {\n        await fetchConversations(currentAgent.id, { \n          page: 1,\n          searchQuery: query.trim() || undefined,\n          searchMode: searchMode,\n          dateFilter: dateFilter !== 'all' ? dateFilter : undefined,\n          order: sortOrder,\n          orderBy: sortBy,\n          userFilter: userFilter !== 'all' ? userFilter : undefined\n        });\n      } catch (error) {\n        logger.error('UI', 'Failed to search conversations', error);\n      } finally {\n        setIsSearching(false);\n      }\n    },\n    [currentAgent, searchMode, dateFilter, sortOrder, sortBy, userFilter, fetchConversations]\n  );\n\n  // Debounce search calls\n  useEffect(() => {\n    // Skip initial empty state to prevent unnecessary API call on mount\n    if (searchQuery === '') return;\n    \n    const timeoutId = setTimeout(() => {\n      debouncedSearch(searchQuery);\n    }, 500); // 500ms debounce\n\n    return () => clearTimeout(timeoutId);\n  }, [searchQuery, debouncedSearch]);\n\n  // Handle search input change\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  // Handle date filter change\n  const handleDateFilterChange = async (filter: 'all' | 'today' | 'week' | 'month') => {\n    setDateFilter(filter);\n    \n    if (!currentAgent) return;\n    \n    try {\n      await fetchConversations(currentAgent.id, { \n        page: 1,\n        searchQuery: searchQuery.trim() || undefined,\n        searchMode: searchMode,\n        dateFilter: filter !== 'all' ? filter : undefined,\n        order: sortOrder,\n        orderBy: sortBy,\n        userFilter: userFilter !== 'all' ? userFilter : undefined\n      });\n    } catch (error) {\n      logger.error('UI', 'Failed to filter conversations by date', error);\n    }\n  };\n\n  // Handle search mode change  \n  const handleSearchModeChange = async (mode: 'name' | 'id' | 'session') => {\n    setSearchMode(mode);\n    \n    if (!currentAgent || !searchQuery.trim()) return;\n    \n    try {\n      await fetchConversations(currentAgent.id, { \n        page: 1,\n        searchQuery: searchQuery.trim(),\n        searchMode: mode,\n        dateFilter: dateFilter !== 'all' ? dateFilter : undefined,\n        order: sortOrder,\n        orderBy: sortBy,\n        userFilter: userFilter !== 'all' ? userFilter : undefined\n      });\n    } catch (error) {\n      logger.error('UI', 'Failed to change search mode', error);\n    }\n  };\n  \n  // Use conversations directly since filtering is now done server-side\n  const filteredConversations = Array.isArray(conversations) ? conversations : [];\n\n  const handleNewConversation = async () => {\n    if (!currentAgent || isCreating) return;\n    \n    if (isFreeTrialMode) {\n      toast.error('Creating new conversations is not available in free trial mode');\n      return;\n    }\n    \n    logger.info('UI', 'Creating new conversation', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n    \n    setIsCreating(true);\n    try {\n      const name = `New Chat ${new Date().toLocaleDateString()}`;\n      await createConversation(currentAgent.id, name);\n      clearMessages(); // Clear current messages when starting new conversation\n      logger.info('UI', 'New conversation created successfully', { name });\n      toast.success('New conversation created');\n      \n      // Call the onConversationSelect callback to close the mobile drawer\n      if (onConversationSelect) {\n        onConversationSelect();\n      }\n    } catch (error) {\n      logger.error('UI', 'Failed to create conversation', error, {\n        agentId: currentAgent.id,\n        errorMessage: error instanceof Error ? error.message : String(error)\n      });\n      toast.error('Failed to create new conversation');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const handleSelectConversation = async (conversation: Conversation) => {\n    // Prevent multiple clicks while switching\n    if (loading) return;\n    \n    logger.info('UI', 'Selecting conversation', {\n      conversationId: conversation.id,\n      conversationName: conversation.name,\n      projectId: conversation.project_id,\n      messageCount: conversation.message_count\n    });\n    \n    selectConversation(conversation);\n    \n    // Load messages for the selected conversation\n    try {\n      logger.info('UI', 'Loading messages for selected conversation', {\n        conversationId: conversation.id,\n        agentId: currentAgent?.id,\n        agentName: currentAgent?.project_name\n      });\n      \n      await loadMessages(conversation.id.toString());\n      \n      logger.info('UI', 'Messages loaded successfully for conversation', {\n        conversationId: conversation.id\n      });\n      \n      // Call the onConversationSelect callback to close the mobile drawer\n      if (onConversationSelect) {\n        onConversationSelect();\n      }\n    } catch (error) {\n      logger.error('UI', 'Failed to load messages for conversation', error, {\n        conversationId: conversation.id,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        errorType: error instanceof Error ? error.constructor.name : typeof error\n      });\n      toast.error('Failed to load conversation messages');\n    }\n  };\n\n  const handleDeleteConversation = async (conversationId: string) => {\n    if (isFreeTrialMode) {\n      toast.error('Deleting conversations is not available in free trial mode');\n      return;\n    }\n    \n    try {\n      await deleteConversation(conversationId);\n      toast.success('Conversation deleted');\n    } catch (error) {\n      toast.error('Failed to delete conversation');\n    }\n  };\n\n  const handleRenameConversation = async (conversationId: string, newName: string) => {\n    if (isFreeTrialMode) {\n      toast.error('Renaming conversations is not available in free trial mode');\n      return;\n    }\n    \n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) return;\n    \n    try {\n      await updateConversation(conversation.project_id, conversation.session_id, { name: newName });\n      toast.success('Conversation renamed');\n    } catch (error) {\n      toast.error('Failed to rename conversation');\n    }\n  };\n\n  // Use prop or fallback to viewport check if needed\n  // const isMobile = typeof window !== 'undefined' && window.innerWidth < 768;\n  \n  if (isCollapsed && !isMobile) {\n    return (\n      <div className={cn('w-12 bg-muted border-r border-border flex flex-col', className)}>\n        <div className=\"p-2\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggle}\n            className=\"w-8 h-8\"\n            title=\"Expand sidebar\"\n          >\n            <MessageSquare className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\n      'bg-muted flex flex-col',\n      isMobile ? 'w-full h-full' : 'w-80 border-r border-border',\n      className\n    )}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-border bg-background\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h2 className=\"font-semibold text-foreground\">Conversations</h2>\n          {!isMobile && (\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={onToggle}\n              className=\"h-8 w-8\"\n              title=\"Collapse sidebar\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n        \n        {/* Search */}\n        <div className=\"space-y-2\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <input\n              type=\"text\"\n              placeholder={isMobile ? \"Search conversations...\" : `Search by ${searchMode}...`}\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              className={cn(\n                \"w-full pl-9 pr-12 py-2 text-sm border border-input bg-background text-foreground rounded-lg focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent placeholder:text-muted-foreground\",\n                isMobile && \"py-3\"\n              )}\n            />\n            {isSearching && (\n              <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-brand-600\"></div>\n              </div>\n            )}\n          </div>\n          \n          {/* Search Mode Selector - Hidden on mobile */}\n          {!isMobile && (\n            <div className=\"flex gap-1\">\n              <button\n                onClick={() => handleSearchModeChange('name')}\n                className={cn(\n                  \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                  searchMode === 'name' \n                    ? \"bg-brand-500 text-white\" \n                    : \"bg-muted text-muted-foreground hover:bg-accent\"\n                )}\n              >\n                Name\n              </button>\n              <button\n                onClick={() => handleSearchModeChange('id')}\n                className={cn(\n                  \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                  searchMode === 'id' \n                    ? \"bg-brand-500 text-white\" \n                    : \"bg-muted text-muted-foreground hover:bg-accent\"\n                )}\n              >\n                ID\n              </button>\n              <button\n                onClick={() => handleSearchModeChange('session')}\n                className={cn(\n                  \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                  searchMode === 'session' \n                    ? \"bg-brand-500 text-white\" \n                    : \"bg-muted text-muted-foreground hover:bg-accent\"\n                )}\n              >\n                Session\n              </button>\n            </div>\n          )}\n        </div>\n        \n        {/* Sort and Filter Toggle - Hidden on mobile */}\n        {!isMobile && (\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setShowSortFilter(!showSortFilter)}\n            className=\"w-full mt-2 justify-center gap-2\"\n          >\n            <Filter className=\"h-3 w-3\" />\n            Sort & Filter\n            {showSortFilter ? <ChevronUp className=\"h-3 w-3\" /> : <ChevronDown className=\"h-3 w-3\" />}\n          </Button>\n        )}\n        \n        {/* Sort and Filter Options - Hidden on mobile */}\n        {!isMobile && showSortFilter && (\n          <AnimatePresence>\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"space-y-3 mt-3 overflow-hidden\"\n            >\n              {/* Sort Options */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Sort By</label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <select\n                    value={sortBy}\n                    onChange={(e) => {\n                      if (currentAgent) {\n                        fetchConversations(currentAgent.id, { \n                          page: 1, \n                          orderBy: e.target.value \n                        });\n                      }\n                    }}\n                    className=\"px-2 py-1 text-xs border border-input bg-background text-foreground rounded focus:outline-none focus:ring-2 focus:ring-ring\"\n                  >\n                    <option value=\"id\">Date Created</option>\n                    <option value=\"updated_at\">Last Updated</option>\n                    <option value=\"name\">Name</option>\n                  </select>\n                  \n                  <select\n                    value={sortOrder}\n                    onChange={(e) => {\n                      if (currentAgent) {\n                        fetchConversations(currentAgent.id, { \n                          page: 1, \n                          order: e.target.value as 'asc' | 'desc' \n                        });\n                      }\n                    }}\n                    className=\"px-2 py-1 text-xs border border-input bg-background text-foreground rounded focus:outline-none focus:ring-2 focus:ring-ring\"\n                  >\n                    <option value=\"desc\">Newest First</option>\n                    <option value=\"asc\">Oldest First</option>\n                  </select>\n                </div>\n              </div>\n              \n              {/* Date Filter */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Filter By Date</label>\n                <select\n                  value={dateFilter}\n                  onChange={(e) => handleDateFilterChange(e.target.value as 'all' | 'today' | 'week' | 'month')}\n                  className=\"w-full px-2 py-1 text-xs border border-input bg-background text-foreground rounded focus:outline-none focus:ring-2 focus:ring-ring\"\n                >\n                  <option value=\"all\">All Time</option>\n                  <option value=\"today\">Today</option>\n                  <option value=\"week\">Last 7 Days</option>\n                  <option value=\"month\">Last 30 Days</option>\n                </select>\n              </div>\n              \n              {/* User Filter */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Filter By User</label>\n                <select\n                  value={userFilter}\n                  onChange={(e) => {\n                    if (currentAgent) {\n                      fetchConversations(currentAgent.id, { \n                        page: 1, \n                        userFilter: e.target.value \n                      });\n                    }\n                  }}\n                  className=\"w-full px-2 py-1 text-xs border border-input bg-background text-foreground rounded focus:outline-none focus:ring-2 focus:ring-ring\"\n                >\n                  <option value=\"all\">All Users</option>\n                  {/* Additional user options could be dynamically loaded */}\n                </select>\n              </div>\n            </motion.div>\n          </AnimatePresence>\n        )}\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"p-4 space-y-2\">\n        <Link href=\"/dashboard/projects/create\">\n          <Button\n            className=\"w-full justify-start gap-2\"\n            variant=\"default\"\n            disabled={isFreeTrialMode}\n            title={isFreeTrialMode ? 'Creating new agents is not available in free trial mode' : ''}\n          >\n            <Bot className=\"w-4 h-4\" />\n            Create New Agent\n          </Button>\n        </Link>\n        \n        <Button\n          onClick={handleNewConversation}\n          disabled={!currentAgent || isCreating || isFreeTrialMode}\n          className=\"w-full justify-start gap-2\"\n          variant=\"outline\"\n          title={isFreeTrialMode ? 'Creating new conversations is not available in free trial mode' : ''}\n        >\n          {isCreating ? (\n            <>\n              <Spinner size=\"sm\" />\n              <span>Creating...</span>\n            </>\n          ) : (\n            <>\n              <Plus className=\"w-4 h-4\" />\n              <span>New Chat</span>\n            </>\n          )}\n        </Button>\n      </div>\n\n      {/* Conversations List */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {loading && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <ConversationSkeleton count={5} />\n        ) : error && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <div className=\"p-4 text-center\">\n            <p className=\"text-sm text-destructive mb-2\">Failed to load conversations</p>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => currentAgent && fetchConversations(currentAgent.id)}\n            >\n              Try Again\n            </Button>\n          </div>\n        ) : filteredConversations.length === 0 ? (\n          <div className=\"p-4 text-center\">\n            <MessageSquare className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">\n              {searchQuery ? 'No conversations found' : 'No conversations yet'}\n            </p>\n            {!searchQuery && (\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Start a new conversation to get going\n              </p>\n            )}\n            {currentAgent && (\n              <div className=\"text-xs text-muted-foreground mt-2 space-y-1\">\n                <p>Agent: {currentAgent.project_name} (ID: {currentAgent.id})</p>\n                {error && (\n                  <p className=\"text-destructive\">Error: {error}</p>\n                )}\n                <p>Conversations loaded: {conversations.length}</p>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"p-2 space-y-1\">\n            {filteredConversations.map((conversation) => (\n              <ConversationItem\n                key={conversation.id}\n                conversation={conversation}\n                isSelected={currentConversation?.id === conversation.id}\n                onSelect={handleSelectConversation}\n                onDelete={(id) => handleDeleteConversation(id)}\n                onRename={handleRenameConversation}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Footer with Pagination */}\n      <div className=\"p-4 border-t border-border bg-background space-y-3\">\n        <div className=\"text-xs text-muted-foreground text-center\">\n          {searchQuery ? (\n            <>\n              {filteredConversations.length} result{filteredConversations.length !== 1 ? 's' : ''}\n            </>\n          ) : (\n            <>\n              Showing {conversations.length} of {totalConversations} conversation{totalConversations !== 1 ? 's' : ''}\n            </>\n          )}\n          {currentAgent && (\n            <span className=\"block mt-1\">\n              Agent: {currentAgent.project_name}\n            </span>\n          )}\n        </div>\n        \n        {/* Pagination Controls */}\n        {totalPages > 1 && !searchQuery && (\n          <div className=\"flex items-center justify-between gap-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                if (currentAgent && currentPage > 1) {\n                  fetchConversations(currentAgent.id, { page: currentPage - 1 });\n                }\n              }}\n              disabled={currentPage === 1 || loading}\n            >\n              <ChevronDown className=\"h-3 w-3 rotate-90\" />\n            </Button>\n            \n            <span className=\"text-xs text-muted-foreground\">\n              Page {currentPage} of {totalPages}\n            </span>\n            \n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                if (currentAgent && currentPage < totalPages) {\n                  fetchConversations(currentAgent.id, { page: currentPage + 1 });\n                }\n              }}\n              disabled={currentPage === totalPages || loading}\n            >\n              <ChevronDown className=\"h-3 w-3 -rotate-90\" />\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};","/**\n * Chat Layout Component\n * \n * Top-level layout component that orchestrates the chat interface.\n * Handles different deployment modes and manages the conversation sidebar.\n * \n * Deployment Modes:\n * - standalone: Full chat with sidebar (default for main app)\n * - widget: Embeddable chat without sidebar\n * - floating: Popup-style chat without sidebar\n * \n * Features:\n * - Responsive sidebar with collapse/expand\n * - Automatic message loading on conversation change\n * - Mode-specific rendering logic\n * - Clean separation of concerns\n * \n * Architecture:\n * - ChatLayout (this) - Layout orchestration\n *   - ConversationSidebar - Conversation list and management\n *   - ChatContainer - Main chat interface\n *     - Message - Individual messages\n *     - ChatInput - Message input area\n * \n * State Management:\n * - currentConversation from conversationStore\n * - loadMessages from messageStore\n * - Local state for sidebar collapse\n * \n * Features:\n * - Multiple deployment modes with flexible configuration\n * - Professional sidebar with persistent state and responsive design\n * - Full keyboard navigation and accessibility support\n * - Mobile-optimized interface with adaptive layout\n * - Customizable sidebar positioning and behavior options\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport type { Agent } from '@/types';\nimport { ChatContainer } from './ChatContainer';\nimport { ConversationSidebar } from './ConversationSidebar';\nimport { useConversationStore, useMessageStore } from '@/hooks/useWidgetStore';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\n/**\n * Props for ChatLayout component\n * \n * @property mode - Deployment mode: standalone (with sidebar), widget, or floating\n * @property className - Additional CSS classes for styling\n * @property onClose - Callback for closing chat (widget/floating modes)\n * @property onAgentSettings - Callback for opening agent settings\n * @property showSidebar - Whether to show sidebar (only applies to standalone mode)\n * @property enableConversationManagement - Enable conversation switching UI\n * @property maxConversations - Maximum conversations per session\n * @property sessionId - Session ID for conversation isolation\n * @property threadId - Specific conversation thread to load\n * @property onConversationChange - Callback when conversation changes\n * @property onMessage - Callback when message is sent/received\n */\ninterface ChatLayoutProps {\n  mode?: 'standalone' | 'widget' | 'floating';\n  className?: string;\n  onClose?: () => void;\n  onAgentSettings?: (agent: Agent) => void;\n  showSidebar?: boolean;\n  enableConversationManagement?: boolean;\n  maxConversations?: number;\n  sessionId?: string;\n  threadId?: string;\n  onConversationChange?: (conversation: any) => void;\n  onMessage?: (message: any) => void;\n  widgetInstance?: any; // Widget instance for isolated conversation management\n  conversations?: any[]; // Current conversations for isolated mode\n  currentConversation?: any; // Current conversation for isolated mode\n  conversationRefreshKey?: number; // Key to trigger ConversationManager refresh\n}\n\n/**\n * Chat Layout Component\n * \n * Orchestrates the overall chat interface layout based on deployment mode.\n * In standalone mode, includes a collapsible conversation sidebar.\n * In widget/floating modes, renders only the chat container.\n */\nexport const ChatLayout: React.FC<ChatLayoutProps> = ({\n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  showSidebar = true,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  widgetInstance,\n  conversations,\n  currentConversation,\n  conversationRefreshKey\n}) => {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [mobileSidebarOpen, setMobileSidebarOpen] = useState(false);\n  const { currentConversation: storeCurrentConversation } = useConversationStore();\n  const { loadMessages } = useMessageStore();\n\n  /**\n   * Load messages when conversation changes\n   * \n   * Automatically fetches messages from the store when user\n   * switches between conversations. This ensures the chat\n   * always shows the correct message history.\n   */\n  useEffect(() => {\n    // Skip API calls in demo mode to prevent errors\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (storeCurrentConversation && !isDemoMode) {\n      loadMessages(storeCurrentConversation.id.toString());\n    }\n  }, [storeCurrentConversation, loadMessages]);\n\n  const { isMobile } = useBreakpoint();\n\n  // Hide sidebar for widget and floating modes\n  // Only standalone mode shows the conversation sidebar\n  const shouldShowSidebar = showSidebar && mode === 'standalone';\n\n  /**\n   * Toggle sidebar collapsed state\n   * \n   * Toggles sidebar visibility with potential for session persistence\n   * to enhance user experience across application sessions\n   */\n  const handleToggleSidebar = () => {\n    setSidebarCollapsed(!sidebarCollapsed);\n  };\n\n  if (!shouldShowSidebar) {\n    // For widget/floating modes, just show the chat container\n    return (\n      <ChatContainer\n        mode={mode}\n        className={className}\n        onClose={onClose}\n        onAgentSettings={onAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        threadId={threadId}\n        onConversationChange={onConversationChange}\n        onMessage={onMessage}\n        conversationRefreshKey={conversationRefreshKey}\n        isMobile={isMobile}\n      />\n    );\n  }\n\n  // On mobile, hide the sidebar and use drawer navigation instead\n  if (isMobile) {\n    return (\n      <div className=\"flex flex-col h-full bg-background\">\n        <ChatContainer\n          mode={mode}\n          className=\"flex-1\"\n          onClose={onClose}\n          onAgentSettings={onAgentSettings}\n          enableConversationManagement={enableConversationManagement}\n          maxConversations={maxConversations}\n          sessionId={sessionId}\n          threadId={threadId}\n          onConversationChange={onConversationChange}\n          onMessage={onMessage}\n          conversationRefreshKey={conversationRefreshKey}\n          isMobile={true}\n        />\n      </div>\n    );\n  }\n\n  // Desktop layout with sidebar\n  return (\n    <div className=\"flex h-full bg-background\">\n      {/* Sidebar */}\n      <ConversationSidebar\n        isCollapsed={sidebarCollapsed}\n        onToggle={handleToggleSidebar}\n        isMobile={false}\n      />\n      \n      {/* Main Chat Area */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        <ChatContainer\n          mode={mode}\n          className=\"h-full\"\n          onClose={onClose}\n          onAgentSettings={onAgentSettings}\n          enableConversationManagement={enableConversationManagement}\n          maxConversations={maxConversations}\n          sessionId={sessionId}\n          threadId={threadId}\n          onConversationChange={onConversationChange}\n          onMessage={onMessage}\n          conversationRefreshKey={conversationRefreshKey}\n          isMobile={false}\n        />\n      </div>\n    </div>\n  );\n};","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Toaster } from 'sonner';\n\nimport '../app/globals.css';\nimport './widget-styles.css';\nimport { WidgetConfig } from '../types';\nimport { useConfigStore, useAgentStore } from '../store';\nimport { ChatLayout } from '../components/chat/ChatLayout';\nimport { getClient } from '../lib/api/client';\nimport { WidgetProvider } from './WidgetContext';\nimport { WidgetStoreProvider } from './WidgetStoreContext';\n\n/**\n * Widget Configuration Interface\n * \n * Defines all configuration options for CustomGPT widget initialization.\n * This interface is used by both embedded widgets and floating buttons.\n * \n * @property agentId - Required: Agent/Project ID from CustomGPT dashboard\n * @property agentName - Optional: Custom name to display instead of \"Agent - {ID}\"\n * @property containerId - DOM element ID for embedded mode (ignored in floating mode)\n * @property mode - Widget deployment mode: 'embedded' | 'floating' | 'widget'\n * @property theme - Color theme: 'light' | 'dark'\n * @property position - Position for floating mode: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left'\n * @property width - Widget width (default: '400px')\n * @property height - Widget height (default: '600px')\n * @property enableCitations - Show citation sources in messages\n * @property enableFeedback - Show thumbs up/down feedback buttons\n * \n * Conversation Management Options:\n * @property enableConversationManagement - Enable conversation switching UI\n * @property maxConversations - Maximum conversations per session (default: 5)\n * @property sessionId - Custom session ID (auto-generated if not provided)\n * @property threadId - Specific conversation thread to load\n * @property isolateConversations - Whether to isolate conversations from other widgets (default: true)\n * \n * Event Callbacks:\n * @property onOpen - Called when widget opens\n * @property onClose - Called when widget closes\n * @property onMessage - Called when new message is sent/received\n * @property onConversationChange - Called when conversation switches\n */\nexport interface CustomGPTWidgetConfig {\n  // Required properties (API key no longer needed - handled by server)\n  agentId: number | string;\n  \n  // Display properties\n  agentName?: string;\n  containerId?: string;\n  mode?: 'embedded' | 'floating' | 'widget';\n  theme?: 'light' | 'dark';\n  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n  width?: string;\n  height?: string;\n  \n  // Feature flags\n  enableCitations?: boolean;\n  enableFeedback?: boolean;\n  enableConversationManagement?: boolean;\n  \n  // Conversation management\n  maxConversations?: number;\n  sessionId?: string;\n  threadId?: string;\n  isolateConversations?: boolean; // New flag to isolate conversations\n  \n  // Event callbacks\n  onOpen?: () => void;\n  onClose?: () => void;\n  onMessage?: (message: any) => void;\n  onConversationChange?: (conversation: any) => void;\n}\n\n/**\n * CustomGPT Widget Class\n * \n * Main widget class that manages the lifecycle of CustomGPT chat instances.\n * Supports both embedded and floating deployment modes with full conversation management.\n * \n * @example\n * // Basic embedded widget\n * const widget = CustomGPTWidget.init({\n *   agentId: '123',\n *   containerId: 'chat-container'\n * });\n * \n * @example\n * // Floating widget with conversation management\n * const widget = CustomGPTWidget.init({\n *   agentId: '123',\n *   mode: 'floating',\n *   enableConversationManagement: true,\n *   maxConversations: 10\n * });\n */\nclass CustomGPTWidget {\n  private container: HTMLElement | null = null;\n  private root: any = null;\n  private config: CustomGPTWidgetConfig;\n  private isOpen: boolean = false;\n  public sessionId: string;\n  private currentConversationId: string | null = null;\n  private instanceKey?: string;\n  private conversationRefreshKey: number = 0;\n\n  constructor(config: CustomGPTWidgetConfig) {\n    // Validate required fields\n    \n    if (!config.agentId) {\n      throw new Error('CustomGPT Widget: Agent ID is required');\n    }\n\n    // Merge with defaults\n    this.config = {\n      mode: 'embedded',\n      theme: 'light',\n      position: 'bottom-right',\n      width: '400px',\n      height: '600px',\n      enableCitations: true,\n      enableFeedback: true,\n      enableConversationManagement: false,\n      ...config,\n    };\n\n    // Initialize session ID\n    // If isolateConversations is true, ensure each widget has a unique session\n    if (this.config.isolateConversations !== false) {\n      // Default to isolated conversations - each widget gets its own session\n      const modePrefix = this.config.mode || 'widget';\n      const containerId = this.config.containerId || 'default';\n      // Create a unique session ID that includes mode, container info, and a random component\n      // Use performance.now() for higher precision to avoid collisions\n      const timestamp = typeof performance !== 'undefined' ? performance.now() : Date.now();\n      const random = Math.random().toString(36).substr(2, 9);\n      const uniqueId = `${timestamp}_${random}_${Math.random().toString(36).substr(2, 5)}`;\n      this.sessionId = `session_${modePrefix}_${containerId}_${uniqueId}`;\n    } else if (this.config.sessionId) {\n      // Use provided session ID for sharing conversations\n      this.sessionId = this.config.sessionId;\n    } else {\n      // Generate a regular session ID\n      this.sessionId = this.generateSessionId();\n    }\n    \n    // Store widget instance reference for conversation management\n    // Use unique instance key to prevent conflicts between multiple widgets\n    if (typeof window !== 'undefined') {\n      const instanceKey = `__customgpt_widget_${this.sessionId}`;\n      (window as any)[instanceKey] = this;\n      \n      // DEPRECATED: Global reference kept for backward compatibility\n      // Don't overwrite if already exists to preserve first widget\n      if (!(window as any).__customgpt_widget_instance) {\n        (window as any).__customgpt_widget_instance = this;\n      }\n      \n      // Store instance key for later reference\n      this.instanceKey = instanceKey;\n    }\n\n    this.init();\n  }\n\n  /**\n   * Generates a unique session ID for conversation isolation\n   * @returns Unique session identifier\n   */\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private async init() {\n    // Config store no longer needs API key setup\n    \n    // Configure session for conversation isolation\n    if (this.config.enableConversationManagement) {\n      // Store session configuration for conversation management\n      // If isolateConversations is true, use instance-specific session storage\n      if (this.config.isolateConversations) {\n        // Create instance-specific session object\n        if (!(window as any).__customgpt_sessions) {\n          (window as any).__customgpt_sessions = {};\n        }\n        (window as any).__customgpt_sessions[this.sessionId] = {\n          sessionId: this.sessionId,\n          maxConversations: this.config.maxConversations,\n          enableConversationManagement: true\n        };\n      } else {\n        // Use shared session (old behavior)\n        (window as any).__customgpt_session = {\n          sessionId: this.sessionId,\n          maxConversations: this.config.maxConversations,\n          enableConversationManagement: true\n        };\n      }\n    }\n    \n    // Check if using demo/test API key\n    const isDemoMode = false; // Demo mode removed as API key is server-side\n    \n    // Store demo mode flag for preventing unnecessary API calls\n    if (isDemoMode) {\n      (window as any).__customgpt_demo_mode = true;\n    } else {\n      // Ensure demo mode is disabled for valid API keys\n      (window as any).__customgpt_demo_mode = false;\n    }\n    \n    // Fetch the actual agent details\n    const agentId = typeof this.config.agentId === 'string' ? parseInt(this.config.agentId) : this.config.agentId;\n    \n    if (!isDemoMode) {\n      try {\n        // Try to fetch agent details to get the project name\n        const client = getClient();\n        const agentsResponse = await client.getAgents();\n        const agents = Array.isArray(agentsResponse) ? agentsResponse : (agentsResponse as any).data || [];\n        const agent = agents.find((a: any) => a.id === agentId);\n        \n        if (agent) {\n          // Use custom agent name if provided\n          if (this.config.agentName) {\n            agent.project_name = this.config.agentName;\n          }\n          \n          // Use the actual agent with proper project name\n          useAgentStore.getState().selectAgent(agent);\n          // Clear other agents to ensure only this one is available\n          useAgentStore.getState().setAgents([agent]);\n        } else {\n          // Fallback if agent not found\n          const fallbackAgent: any = {\n            id: agentId,\n            project_name: this.config.agentName || `Project ${agentId}`,\n            is_chat_active: true,\n          };\n          useAgentStore.getState().selectAgent(fallbackAgent);\n          useAgentStore.getState().setAgents([fallbackAgent]);\n        }\n      } catch (error) {\n        // Use fallback on error\n        const fallbackAgent: any = {\n          id: agentId,\n          project_name: this.config.agentName || `Project ${agentId}`,\n          is_chat_active: true,\n        };\n        useAgentStore.getState().selectAgent(fallbackAgent);\n        useAgentStore.getState().setAgents([fallbackAgent]);\n      }\n    } else {\n      // For demo mode, always use fallback agent\n      const fallbackAgent: any = {\n        id: agentId,\n        project_name: this.config.agentName || `Demo Assistant`,\n        is_chat_active: true,\n      };\n      useAgentStore.getState().selectAgent(fallbackAgent);\n      useAgentStore.getState().setAgents([fallbackAgent]);\n    }\n\n    // Create container based on mode\n    this.createContainer();\n    \n    // Render the widget first\n    this.render();\n    \n    // Initialize conversation after render to ensure ConversationManager is mounted\n    if (this.config.enableConversationManagement) {\n      const conversations = this.getConversations();\n      \n      if (conversations.length === 0) {\n        // Create initial conversation after a small delay to ensure components are mounted\n        setTimeout(() => {\n          this.createConversation('New Chat');\n        }, 100);\n      } else {\n        // Set current conversation to the first one\n        this.currentConversationId = conversations[0].id;\n        \n        // Only sync with global store if explicitly not isolated\n        if (this.config.isolateConversations === false && typeof window !== 'undefined') {\n          const { useConversationStore } = require('../store');\n          const currentConv = conversations[0];\n          const fullConversation = {\n            ...currentConv,\n            project_id: parseInt(this.config.agentId as string) || 0,\n            session_id: this.sessionId,\n            name: currentConv.title\n          };\n          \n          // Set only the current conversation\n          useConversationStore.setState({\n            conversations: [fullConversation as any],\n            currentConversation: fullConversation as any\n          });\n        }\n      }\n    }\n    \n    // For isolated widgets, we need to prevent the global store from being used\n    if (this.config.isolateConversations !== false && typeof window !== 'undefined') {\n      // Store the widget instance globally so components can access it\n      (window as any).__customgpt_widget_instances = (window as any).__customgpt_widget_instances || {};\n      (window as any).__customgpt_widget_instances[this.sessionId] = this;\n      \n      // Set the current active widget session\n      (window as any).__customgpt_active_widget_session = this.sessionId;\n    }\n  }\n\n  private createContainer() {\n    const { mode, containerId } = this.config;\n\n    if (mode === 'embedded' && containerId) {\n      // Use provided container\n      this.container = document.getElementById(containerId);\n      if (!this.container) {\n        throw new Error(`Container with id \"${containerId}\" not found`);\n      }\n    } else if (mode === 'floating') {\n      // Create floating container\n      this.container = document.createElement('div');\n      this.container.id = 'customgpt-floating-widget';\n      this.setupFloatingStyles();\n      document.body.appendChild(this.container);\n    } else {\n      // Create default container\n      this.container = document.createElement('div');\n      this.container.id = 'customgpt-widget';\n      document.body.appendChild(this.container);\n    }\n  }\n\n  private setupFloatingStyles() {\n    if (!this.container || this.config.mode !== 'floating') return;\n\n    const { position, width, height } = this.config;\n    \n    // Base floating styles\n    Object.assign(this.container.style, {\n      position: 'fixed',\n      zIndex: '9999',\n      width: width || '400px',\n      height: height || '600px',\n      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\n      borderRadius: '12px',\n      overflow: 'hidden',\n      transition: 'all 0.3s ease',\n      backgroundColor: 'white', // Ensure background is set\n    });\n    \n    // Add class for styling\n    this.container.classList.add('floating-mode');\n    this.container.classList.add('customgpt-floating-container');\n\n    // Position-specific styles\n    switch (position) {\n      case 'bottom-right':\n        Object.assign(this.container.style, {\n          bottom: '20px',\n          right: '20px',\n        });\n        break;\n      case 'bottom-left':\n        Object.assign(this.container.style, {\n          bottom: '20px',\n          left: '20px',\n        });\n        break;\n      case 'top-right':\n        Object.assign(this.container.style, {\n          top: '20px',\n          right: '20px',\n        });\n        break;\n      case 'top-left':\n        Object.assign(this.container.style, {\n          top: '20px',\n          left: '20px',\n        });\n        break;\n    }\n\n    // Initially hidden for floating mode with proper initial state\n    this.container.style.display = 'none';\n    this.container.style.opacity = '0';\n    this.container.style.transform = 'translateY(20px)';\n  }\n\n  private render() {\n    if (!this.container) return;\n\n    // Apply proper styling based on mode\n    if (this.config.mode === 'embedded') {\n      this.container.classList.add('customgpt-embedded-widget');\n      // Apply width and height styles directly to container\n      Object.assign(this.container.style, {\n        width: this.config.width || '400px',\n        height: this.config.height || '600px',\n        margin: '0 auto', // Center by default\n        display: 'block',\n      });\n    }\n\n    // Only create root once\n    if (!this.root) {\n      this.root = createRoot(this.container);\n    }\n    \n    const WidgetApp = () => {\n      // DEPRECATED: This global reference is kept for backward compatibility\n      // New code should use WidgetContext instead\n      // Only set if not already set to avoid overwriting first widget\n      if (typeof window !== 'undefined' && !(window as any).__customgpt_widget_instance) {\n        (window as any).__customgpt_widget_instance = this;\n      }\n      \n      const handleClose = () => {\n        this.close();\n        this.config.onClose?.();\n      };\n\n      // Get current conversation ID or use thread ID\n      const currentConvId = this.currentConversationId || this.config.threadId;\n      \n      // For isolated mode, pass the widget instance to manage conversations locally\n      const widgetRef = this;\n      \n      // Create a unique key for this widget's conversations\n      const widgetKey = `widget_${this.sessionId}`;\n\n      return (\n        <WidgetStoreProvider sessionId={this.sessionId}>\n          <WidgetProvider widgetInstance={widgetRef}>\n            <div className={`customgpt-widget-wrapper widget-mode ${this.config.mode}-mode`}>\n              <ChatLayout\n                mode={this.config.mode === 'embedded' ? 'widget' : 'floating'}\n                onClose={this.config.mode === 'floating' ? handleClose : undefined}\n                showSidebar={false} // Disable sidebar for widget mode\n                className=\"w-full h-full\"\n                // Pass conversation management configuration\n                enableConversationManagement={this.config.enableConversationManagement}\n                maxConversations={this.config.maxConversations}\n                sessionId={this.sessionId}\n                threadId={currentConvId} // Pass current conversation ID\n                onConversationChange={this.config.onConversationChange}\n                onMessage={this.config.onMessage}\n                // Pass widget instance for isolated conversation management\n                widgetInstance={this.config.isolateConversations !== false ? widgetRef : undefined}\n                // Pass current conversations for isolated mode\n                conversations={this.config.isolateConversations !== false ? this.getConversations() : undefined}\n                currentConversation={this.config.isolateConversations !== false && this.currentConversationId ? \n                  this.getConversations().find(c => c.id === this.currentConversationId) : undefined}\n                // Pass refresh key to trigger ConversationManager updates\n                conversationRefreshKey={this.conversationRefreshKey}\n              />\n              <Toaster \n                position=\"top-center\"\n                closeButton\n                gap={8}\n                toastOptions={{\n                  style: { \n                    zIndex: 10000,\n                    marginTop: '8px'\n                  }\n                }}\n              />\n            </div>\n          </WidgetProvider>\n        </WidgetStoreProvider>\n      );\n    };\n\n    this.root.render(<WidgetApp />);\n\n    // Auto-open for embedded mode\n    if (this.config.mode === 'embedded') {\n      this.open();\n    }\n  }\n\n  /**\n   * Get all conversations for current session\n   * @returns Array of conversations\n   */\n  public getConversations(): any[] {\n    const stored = localStorage.getItem(`customgpt_conversations_${this.sessionId}`);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (e) {\n        console.error('Failed to parse conversations:', e);\n      }\n    }\n    return [];\n  }\n\n  /**\n   * Switch to a different conversation\n   * @param conversationId - ID of conversation to switch to\n   */\n  public switchConversation(conversationId: string): void {\n    const conversations = this.getConversations();\n    const conversation = conversations.find(c => c.id === conversationId);\n    \n    if (conversation) {\n      this.currentConversationId = conversationId;\n      \n      // Increment refresh key to trigger ConversationManager update\n      this.conversationRefreshKey++;\n      \n      // Don't update the global store if we're in isolated mode\n      // The render() method will handle passing the correct conversation\n      if (!this.config.isolateConversations) {\n        // Only update global store if sharing conversations\n        if (typeof window !== 'undefined') {\n          const { useConversationStore } = require('../store');\n          \n          // Get all widget conversations\n          const allWidgetConversations = this.getConversations();\n          \n          // Convert all widget conversations to store format\n          const storeConversations = allWidgetConversations.map(conv => ({\n            ...conv,\n            project_id: parseInt(this.config.agentId as string) || 0,\n            session_id: this.sessionId,\n            name: conv.title\n          }));\n          \n          // Find the selected conversation with proper format\n          const fullConversation = storeConversations.find(c => c.id === conversationId);\n          \n          // Update store with all widget conversations\n          useConversationStore.setState({\n            conversations: storeConversations as any,\n            currentConversation: fullConversation as any\n          });\n        }\n      }\n      \n      // Trigger re-render with new conversation\n      this.render();\n      this.config.onConversationChange?.(conversation);\n    }\n  }\n\n  /**\n   * Create a new conversation\n   * @param title - Optional title for the conversation\n   * @returns The new conversation object\n   */\n  public createConversation(title?: string): any {\n    const conversations = this.getConversations();\n    \n    // Check max conversations limit (only if specified by user)\n    if (this.config.maxConversations && conversations.length >= this.config.maxConversations) {\n      console.warn(`Maximum conversation limit (${this.config.maxConversations}) reached`);\n      return null; // Return null instead of throwing error\n    }\n    \n    const newConversation = {\n      id: `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      title: title || `Conversation ${conversations.length + 1}`,\n      createdAt: new Date().toISOString(),\n      messages: [],\n      // Add required fields for conversation store compatibility\n      project_id: parseInt(this.config.agentId as string) || 0,\n      session_id: this.sessionId,\n      name: title || `Conversation ${conversations.length + 1}`\n    };\n    \n    conversations.unshift(newConversation);\n    this.saveConversations(conversations);\n    this.currentConversationId = newConversation.id;\n    \n    // Don't update the global store if we're in isolated mode\n    if (!this.config.isolateConversations) {\n      // Only update global store if sharing conversations\n      if (typeof window !== 'undefined') {\n        const { useConversationStore, useMessageStore } = require('../store');\n        const messageStore = useMessageStore.getState();\n        \n        // Get all widget conversations (local storage)\n        const allWidgetConversations = this.getConversations();\n        \n        // Convert all widget conversations to store format\n        const storeConversations = allWidgetConversations.map(conv => ({\n          ...conv,\n          project_id: parseInt(this.config.agentId as string) || 0,\n          session_id: this.sessionId,\n          name: conv.title\n        }));\n        \n        // Update store with all widget conversations, with new one as current\n        useConversationStore.setState({\n          conversations: storeConversations as any,\n          currentConversation: newConversation as any\n        });\n        \n        // Clear any existing messages for this conversation ID to ensure welcome message shows\n        messageStore.clearMessages(newConversation.id);\n      }\n    }\n    \n    // Increment refresh key to trigger ConversationManager update\n    this.conversationRefreshKey++;\n    \n    // Trigger re-render with new conversation\n    this.render();\n    \n    return newConversation;\n  }\n\n  /**\n   * Update conversation title\n   * @param conversationId - ID of conversation to update\n   * @param newTitle - New title for the conversation\n   */\n  public updateConversationTitle(conversationId: string, newTitle: string): void {\n    const conversations = this.getConversations();\n    const conversation = conversations.find(c => c.id === conversationId);\n    \n    if (conversation) {\n      conversation.title = newTitle;\n      this.saveConversations(conversations);\n      // Increment refresh key to trigger ConversationManager update\n      this.conversationRefreshKey++;\n      this.render();\n    }\n  }\n\n  /**\n   * Delete a conversation\n   * @param conversationId - ID of conversation to delete\n   */\n  public deleteConversation(conversationId: string): void {\n    const conversations = this.getConversations();\n    const filtered = conversations.filter(c => c.id !== conversationId);\n    \n    this.saveConversations(filtered);\n    \n    // Increment refresh key to trigger ConversationManager update\n    this.conversationRefreshKey++;\n    \n    // If deleting current conversation, switch to another or create new\n    if (this.currentConversationId === conversationId) {\n      if (filtered.length > 0) {\n        this.switchConversation(filtered[0].id);\n      } else {\n        this.createConversation();\n      }\n    } else {\n      // Still need to re-render to update the conversation list\n      this.render();\n    }\n  }\n\n  /**\n   * Save conversations to localStorage\n   * @param conversations - Array of conversations to save\n   */\n  private saveConversations(conversations: any[]): void {\n    try {\n      localStorage.setItem(\n        `customgpt_conversations_${this.sessionId}`,\n        JSON.stringify(conversations)\n      );\n    } catch (e) {\n      console.error('Failed to save conversations:', e);\n      // Handle quota exceeded error\n      if (e instanceof DOMException && e.name === 'QuotaExceededError') {\n        // Try to clean up old conversations\n        this.cleanupOldConversations();\n      }\n    }\n  }\n\n  /**\n   * Clean up old conversations to free up localStorage space\n   */\n  private cleanupOldConversations(): void {\n    const conversations = this.getConversations();\n    // Keep only the 3 most recent conversations\n    const recent = conversations.slice(0, 3);\n    this.saveConversations(recent);\n  }\n\n  // Public methods\n  public open() {\n    if (!this.container) return;\n\n    this.isOpen = true;\n    \n    if (this.config.mode === 'floating') {\n      this.container.style.display = 'block';\n      // Trigger animation\n      setTimeout(() => {\n        if (this.container) {\n          this.container.style.transform = 'translateY(0)';\n          this.container.style.opacity = '1';\n        }\n      }, 10);\n    }\n\n    this.config.onOpen?.();\n  }\n\n  public close() {\n    if (!this.container) return;\n\n    this.isOpen = false;\n\n    if (this.config.mode === 'floating') {\n      this.container.style.transform = 'translateY(20px)';\n      this.container.style.opacity = '0';\n      \n      setTimeout(() => {\n        if (this.container) {\n          this.container.style.display = 'none';\n        }\n      }, 300);\n    }\n  }\n\n  public toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  public destroy() {\n    if (this.root) {\n      this.root.unmount();\n    }\n    \n    if (this.container && this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container);\n    }\n    \n    this.container = null;\n    this.root = null;\n  }\n\n  public updateConfig(newConfig: Partial<CustomGPTWidgetConfig>) {\n    this.config = { ...this.config, ...newConfig };\n    \n    // Re-render with new config\n    this.render();\n  }\n  \n  /**\n   * Force a re-render of the widget\n   * Useful for updating the UI after state changes\n   */\n  public refresh() {\n    this.render();\n  }\n\n  // Getters\n  public get isOpened() {\n    return this.isOpen;\n  }\n\n  public get configuration() {\n    return { ...this.config };\n  }\n}\n\n// Global API for the widget\ndeclare global {\n  interface Window {\n    CustomGPTWidget: {\n      init: (config: CustomGPTWidgetConfig) => CustomGPTWidget;\n      create: (config: CustomGPTWidgetConfig) => CustomGPTWidget;\n    };\n  }\n}\n\n// Export for UMD build\nconst CustomGPTWidgetAPI = {\n  init: (config: CustomGPTWidgetConfig): CustomGPTWidget => {\n    return new CustomGPTWidget(config);\n  },\n  \n  create: (config: CustomGPTWidgetConfig): CustomGPTWidget => {\n    return new CustomGPTWidget(config);\n  },\n};\n\n// Global assignment for browser usage\nif (typeof window !== 'undefined') {\n  window.CustomGPTWidget = CustomGPTWidgetAPI;\n}\n\n// For module usage\nexport { CustomGPTWidget, CustomGPTWidgetAPI };\nexport default CustomGPTWidgetAPI;","/**\n * Default Theme - Classic Particle Sphere\n * \n * The original particle sphere theme, refactored to use the new theme system.\n * Features a 3D rotating sphere of particles with smooth color transitions.\n */\n\nimport { BaseTheme } from './BaseTheme';\nimport { VoiceState } from './IVoiceTheme';\nimport { lerp } from '../utils/math';\nimport { ObjectPool } from '../utils/performance';\n\ninterface Particle {\n  x: number;\n  y: number;\n  z: number;\n  velX: number;\n  velY: number;\n  velZ: number;\n  age: number;\n  dead: boolean;\n  right: boolean;\n  projX: number;\n  projY: number;\n  alpha: number;\n  attack: number;\n  hold: number;\n  decay: number;\n  initValue: number;\n  holdValue: number;\n  lastValue: number;\n  stuckTime: number;\n  accelX: number;\n  accelY: number;\n  accelZ: number;\n  next?: Particle;\n  prev?: Particle;\n}\n\ninterface ColorPalette {\n  r: number;\n  g: number;\n  b: number;\n  gradient: number[];\n}\n\ninterface ColorScheme {\n  idle: ColorPalette;\n  userSpeaking: ColorPalette;\n  processing: ColorPalette;\n  aiSpeaking: ColorPalette;\n  hover: ColorPalette;\n}\n\nexport class DefaultTheme extends BaseTheme {\n  readonly id = 'default';\n  readonly name = 'Classic Sphere';\n  readonly description = 'The original 3D particle sphere with smooth color transitions';\n  readonly category = 'particle' as const;\n  readonly performanceProfile = 'medium' as const;\n\n  // Sphere configuration\n  private sphereRadius = 280;\n  private radiusScale = 1;\n  private framesPerRotation = 5000;\n  private focalLength = 320;\n  private zeroAlphaDepth = -750;\n  private sphereCenterY = 0;\n  private sphereCenterZ = -3 - this.sphereRadius;\n\n  // Particle system\n  private particlePool: ObjectPool<Particle>;\n  private particleList: { first?: Particle } = {};\n  private recycleBin: { first?: Particle } = {};\n  private currentParticleCount = 0;\n  private maxParticles = 200;\n\n  // Color system\n  private currentR = 52;\n  private currentG = 235;\n  private currentB = 222;\n  private targetR = 52;\n  private targetG = 235;\n  private targetB = 222;\n  private colorTransitionSpeed = 0.05;\n  private currentColorScheme = 'gemini';\n\n  // Animation parameters\n  private turnAngle = 1;\n  private wait = 2;\n  private count = 0;\n  private numToAddEachFrame = 3;\n  private particleAlpha = 1;\n  private particleRad = 2.5;\n  private gravity = 0;\n  private randAccelX = 0.1;\n  private randAccelY = 0.1;\n  private randAccelZ = 0.1;\n\n  // Color schemes\n  private colorSchemes: Record<string, ColorScheme> = {\n    gemini: {\n      idle: { r: 66, g: 133, b: 244, gradient: [66, 133, 244, 52, 168, 83] },\n      userSpeaking: { r: 234, g: 67, b: 53, gradient: [234, 67, 53, 251, 188, 5] },\n      processing: { r: 155, g: 64, b: 224, gradient: [155, 64, 224, 66, 133, 244] },\n      aiSpeaking: { r: 52, g: 168, b: 83, gradient: [52, 168, 83, 66, 133, 244] },\n      hover: { r: 251, g: 188, b: 5, gradient: [251, 188, 5, 234, 67, 53] }\n    },\n    instagram: {\n      idle: { r: 228, g: 64, b: 95, gradient: [228, 64, 95, 247, 119, 55] },\n      userSpeaking: { r: 247, g: 119, b: 55, gradient: [247, 119, 55, 252, 175, 69] },\n      processing: { r: 193, g: 53, b: 132, gradient: [193, 53, 132, 228, 64, 95] },\n      aiSpeaking: { r: 252, g: 175, b: 69, gradient: [252, 175, 69, 247, 119, 55] },\n      hover: { r: 131, g: 58, b: 180, gradient: [131, 58, 180, 193, 53, 132] }\n    },\n    ocean: {\n      idle: { r: 0, g: 119, b: 190, gradient: [0, 119, 190, 0, 168, 232] },\n      userSpeaking: { r: 0, g: 168, b: 232, gradient: [0, 168, 232, 0, 201, 255] },\n      processing: { r: 0, g: 201, b: 255, gradient: [0, 201, 255, 100, 255, 218] },\n      aiSpeaking: { r: 100, g: 255, b: 218, gradient: [100, 255, 218, 0, 168, 232] },\n      hover: { r: 0, g: 150, b: 199, gradient: [0, 150, 199, 0, 201, 255] }\n    },\n    sunset: {\n      idle: { r: 255, g: 107, b: 107, gradient: [255, 107, 107, 255, 193, 7] },\n      userSpeaking: { r: 255, g: 193, b: 7, gradient: [255, 193, 7, 255, 142, 83] },\n      processing: { r: 255, g: 142, b: 83, gradient: [255, 142, 83, 255, 107, 107] },\n      aiSpeaking: { r: 255, g: 230, b: 109, gradient: [255, 230, 109, 255, 193, 7] },\n      hover: { r: 255, g: 171, b: 64, gradient: [255, 171, 64, 255, 107, 107] }\n    },\n    aurora: {\n      idle: { r: 0, g: 201, b: 255, gradient: [0, 201, 255, 146, 254, 157] },\n      userSpeaking: { r: 146, g: 254, b: 157, gradient: [146, 254, 157, 0, 255, 193] },\n      processing: { r: 0, g: 255, b: 193, gradient: [0, 255, 193, 186, 85, 255] },\n      aiSpeaking: { r: 186, g: 85, b: 255, gradient: [186, 85, 255, 0, 201, 255] },\n      hover: { r: 120, g: 255, b: 214, gradient: [120, 255, 214, 186, 85, 255] }\n    }\n  };\n\n  constructor() {\n    super();\n    \n    // Initialize particle pool\n    this.particlePool = new ObjectPool<Particle>(\n      () => ({\n        x: 0, y: 0, z: 0, velX: 0, velY: 0, velZ: 0,\n        age: 0, dead: false, right: false, projX: 0, projY: 0, alpha: 0,\n        attack: 0, hold: 0, decay: 0, initValue: 0, holdValue: 0, lastValue: 0,\n        stuckTime: 0, accelX: 0, accelY: 0, accelZ: 0\n      }),\n      (particle) => {\n        particle.age = 0;\n        particle.dead = false;\n        particle.alpha = 0;\n        particle.next = undefined;\n        particle.prev = undefined;\n      },\n      50,\n      this.maxParticles\n    );\n\n    this.setColor(this.getColorPalette().idle);\n  }\n\n  protected onInit(): void {\n    this.maxParticles = this.getMaxParticles();\n  }\n\n  protected onDraw(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number,\n    deltaTime: number\n  ): void {\n    this.updateColors();\n    this.updateParticles(context, width, height, centerX, centerY);\n    this.renderParticles(context, width, height, centerX, centerY);\n  }\n\n  protected onStateChange(newState: VoiceState): void {\n    const palette = this.getColorPalette();\n    \n    switch (newState) {\n      case VoiceState.USER_SPEAKING:\n        this.framesPerRotation = 2000;\n        this.colorTransitionSpeed = 0.15;\n        this.setColor(palette.userSpeaking);\n        this.numToAddEachFrame = 5;\n        this.particleAlpha = 1.2;\n        this.particleRad = 3.5;\n        this.gravity = 0.1;\n        break;\n        \n      case VoiceState.PROCESSING:\n        this.framesPerRotation = 500;\n        this.colorTransitionSpeed = 0.2;\n        this.setColor(palette.processing);\n        this.numToAddEachFrame = 8;\n        this.particleAlpha = 1.5;\n        this.particleRad = 4;\n        this.gravity = 0;\n        break;\n        \n      case VoiceState.AI_SPEAKING:\n        this.framesPerRotation = 2500;\n        this.colorTransitionSpeed = 0.1;\n        this.setColor(palette.aiSpeaking);\n        this.numToAddEachFrame = 4;\n        this.particleAlpha = 1.3;\n        this.particleRad = 3;\n        this.gravity = -0.05;\n        break;\n        \n      case VoiceState.IDLE:\n      default:\n        this.framesPerRotation = 5000;\n        this.colorTransitionSpeed = 0.05;\n        this.setColor(palette.idle);\n        this.numToAddEachFrame = 3;\n        this.particleAlpha = 1;\n        this.particleRad = 2.5;\n        this.gravity = 0;\n        break;\n    }\n  }\n\n  protected getThemeSpecificMetrics() {\n    return {\n      particleCount: this.currentParticleCount,\n      maxParticles: this.maxParticles,\n      colorScheme: this.currentColorScheme\n    };\n  }\n\n  /**\n   * Set color scheme (public method for external use)\n   */\n  setColorScheme(scheme: string): void {\n    if (this.colorSchemes[scheme]) {\n      this.currentColorScheme = scheme;\n      // Update current color based on current state\n      const palette = this.getColorPalette();\n      this.setColor(palette.idle); // Will be overridden by current state\n    }\n  }\n\n  // Private methods - core particle system logic\n\n  private getColorPalette(): ColorScheme {\n    return this.colorSchemes[this.currentColorScheme] || this.colorSchemes.gemini;\n  }\n\n  private setColor(palette: ColorPalette): void {\n    this.targetR = palette.r;\n    this.targetG = palette.g;\n    this.targetB = palette.b;\n  }\n\n  private updateColors(): void {\n    this.currentR = lerp(this.currentR, this.targetR, this.colorTransitionSpeed);\n    this.currentG = lerp(this.currentG, this.targetG, this.colorTransitionSpeed);\n    this.currentB = lerp(this.currentB, this.targetB, this.colorTransitionSpeed);\n  }\n\n  private updateParticles(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number\n  ): void {\n    // Create new particles\n    this.count++;\n    if (this.count >= this.wait && this.currentParticleCount < this.maxParticles) {\n      this.count = 0;\n      const dynamicNumParticles = Math.floor(this.numToAddEachFrame * (1 + this.mouseInfluence * 0.5));\n      const particlesToCreate = Math.min(dynamicNumParticles, this.maxParticles - this.currentParticleCount);\n      \n      for (let i = 0; i < particlesToCreate; i++) {\n        this.createParticle();\n      }\n    }\n\n    // Update rotation\n    const turnSpeed = 2 * Math.PI / this.framesPerRotation;\n    const dynamicTurnSpeed = turnSpeed * (1 + this.mouseInfluence * 0.3);\n    this.turnAngle = (this.turnAngle + dynamicTurnSpeed) % (2 * Math.PI);\n  }\n\n  private createParticle(): void {\n    const theta = Math.random() * 2 * Math.PI;\n    const phi = Math.acos(Math.random() * 2 - 1);\n    \n    // Add mouse influence to particle positioning\n    const mouseDistortion = this.mouseInfluence * 0.3;\n    const mouseBias = {\n      x: this.normalizedMouseX * mouseDistortion * this.sphereRadius * 0.5,\n      y: this.normalizedMouseY * mouseDistortion * this.sphereRadius * 0.5,\n      z: 0\n    };\n    \n    const x0 = this.sphereRadius * Math.sin(phi) * Math.cos(theta) + mouseBias.x;\n    const y0 = this.sphereRadius * Math.sin(phi) * Math.sin(theta) + mouseBias.y;\n    const z0 = this.sphereRadius * Math.cos(phi) + mouseBias.z;\n\n    const velocityMultiplier = 0.002 * (1 + this.mouseInfluence * 0.5);\n    const particle = this.addParticle(\n      x0,\n      this.sphereCenterY + y0,\n      this.sphereCenterZ + z0,\n      velocityMultiplier * x0,\n      velocityMultiplier * y0,\n      velocityMultiplier * z0\n    );\n\n    // Set particle envelope parameters\n    const alphaMultiplier = 1 + this.mouseInfluence * 0.3;\n    particle.attack = Math.floor(30 / (1 + this.mouseInfluence * 0.5));\n    particle.hold = Math.floor(30 * (1 + this.mouseInfluence * 0.5));\n    particle.decay = 60;\n    particle.initValue = 0;\n    particle.holdValue = this.particleAlpha * alphaMultiplier;\n    particle.lastValue = 0;\n    particle.stuckTime = Math.floor((45 + Math.random() * 15) / (1 + this.mouseInfluence * 0.3));\n\n    // Enhanced acceleration with mouse influence\n    particle.accelX = this.normalizedMouseX * this.mouseInfluence * 0.001;\n    particle.accelY = this.gravity + (this.normalizedMouseY * this.mouseInfluence * 0.001);\n    particle.accelZ = 0;\n  }\n\n  private addParticle(x0: number, y0: number, z0: number, vx0: number, vy0: number, vz0: number): Particle {\n    const newParticle = this.particlePool.acquire();\n    this.currentParticleCount++;\n\n    // Add to beginning of particle list\n    if (this.particleList.first) {\n      newParticle.next = this.particleList.first;\n      this.particleList.first.prev = newParticle;\n    }\n    this.particleList.first = newParticle;\n    newParticle.prev = undefined;\n\n    // Initialize particle\n    newParticle.x = x0;\n    newParticle.y = y0;\n    newParticle.z = z0;\n    newParticle.velX = vx0;\n    newParticle.velY = vy0;\n    newParticle.velZ = vz0;\n    newParticle.age = 0;\n    newParticle.dead = false;\n    newParticle.right = Math.random() < 0.5;\n\n    return newParticle;\n  }\n\n  private renderParticles(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number\n  ): void {\n    const sinAngle = Math.sin(this.turnAngle);\n    const cosAngle = Math.cos(this.turnAngle);\n    const zMax = this.focalLength - 2;\n\n    let particle = this.particleList.first;\n    \n    while (particle) {\n      const nextParticle = particle.next;\n\n      // Update particle age\n      particle.age++;\n\n      // Move particle if not stuck\n      if (particle.age > particle.stuckTime) {\n        particle.velX += particle.accelX + this.randAccelX * (Math.random() * 2 - 1);\n        particle.velY += particle.accelY + this.randAccelY * (Math.random() * 2 - 1);\n        particle.velZ += particle.accelZ + this.randAccelZ * (Math.random() * 2 - 1);\n\n        particle.x += particle.velX;\n        particle.y += particle.velY;\n        particle.z += particle.velZ;\n      }\n\n      // Calculate 3D rotation and projection\n      const rotX = cosAngle * particle.x + sinAngle * (particle.z - this.sphereCenterZ);\n      const rotZ = -sinAngle * particle.x + cosAngle * (particle.z - this.sphereCenterZ) + this.sphereCenterZ;\n      const m = this.radiusScale * this.focalLength / (this.focalLength - rotZ);\n      \n      particle.projX = rotX * m + centerX;\n      particle.projY = particle.y * m + centerY;\n\n      // Update alpha based on envelope\n      this.updateParticleAlpha(particle);\n\n      // Check if particle should be rendered or recycled\n      const outsideTest = (\n        particle.projX > width || particle.projX < 0 ||\n        particle.projY < 0 || particle.projY > height ||\n        rotZ > zMax\n      );\n\n      if (outsideTest || particle.dead) {\n        this.recycleParticle(particle);\n      } else {\n        this.renderParticle(context, particle, rotZ, m);\n      }\n\n      particle = nextParticle;\n    }\n  }\n\n  private updateParticleAlpha(particle: Particle): void {\n    if (particle.age < particle.attack + particle.hold + particle.decay) {\n      if (particle.age < particle.attack) {\n        particle.alpha = (particle.holdValue - particle.initValue) / particle.attack * particle.age + particle.initValue;\n      } else if (particle.age < particle.attack + particle.hold) {\n        particle.alpha = particle.holdValue;\n      } else {\n        particle.alpha = (particle.lastValue - particle.holdValue) / particle.decay * (particle.age - particle.attack - particle.hold) + particle.holdValue;\n      }\n    } else {\n      particle.dead = true;\n    }\n  }\n\n  private renderParticle(context: CanvasRenderingContext2D, particle: Particle, rotZ: number, scale: number): void {\n    // Depth-dependent alpha\n    const depthAlphaFactor = Math.max(0, Math.min(1, 1 - rotZ / this.zeroAlphaDepth));\n    const finalAlpha = depthAlphaFactor * particle.alpha;\n    const particleSize = scale * this.particleRad * (1 + this.mouseInfluence * 0.2);\n\n    // Draw main particle\n    context.fillStyle = `rgba(${Math.floor(this.currentR)}, ${Math.floor(this.currentG)}, ${Math.floor(this.currentB)}, ${finalAlpha})`;\n    context.beginPath();\n    context.arc(particle.projX, particle.projY, particleSize, 0, 2 * Math.PI);\n    context.fill();\n\n    // Draw glow effect if enabled and appropriate\n    if (this.shouldEnableGlow() && this.mouseInfluence > 0.5 && finalAlpha > 0.3) {\n      context.fillStyle = `rgba(${Math.floor(this.currentR)}, ${Math.floor(this.currentG)}, ${Math.floor(this.currentB)}, ${finalAlpha * 0.3})`;\n      context.beginPath();\n      context.arc(particle.projX, particle.projY, particleSize * 1.5, 0, 2 * Math.PI);\n      context.fill();\n    }\n  }\n\n  private recycleParticle(particle: Particle): void {\n    this.currentParticleCount = Math.max(0, this.currentParticleCount - 1);\n\n    // Remove from particle list\n    if (this.particleList.first === particle) {\n      this.particleList.first = particle.next;\n      if (particle.next) {\n        particle.next.prev = undefined;\n      }\n    } else {\n      if (particle.prev) {\n        particle.prev.next = particle.next;\n      }\n      if (particle.next) {\n        particle.next.prev = particle.prev;\n      }\n    }\n\n    // Return to pool\n    this.particlePool.release(particle);\n  }\n\n  protected onDispose(): void {\n    // Clean up all particles\n    this.particleList.first = undefined;\n    this.currentParticleCount = 0;\n    this.particlePool.clear();\n  }\n}","/**\n * Agent Store - Chatbot Management\n * \n * This store manages all agent (chatbot) related state and operations.\n * Agents are the core entities in CustomGPT - each agent is a trained\n * chatbot with its own knowledge base and settings.\n * \n * Features:\n * - CRUD operations for agents\n * - Persistent state using localStorage\n * - Auto-selection of first agent\n * - Agent statistics fetching\n * - License management support\n * \n * State Persistence:\n * - Uses Zustand persist middleware\n * - Stores: agents list and current selection\n * - Survives page refreshes\n * \n * Features:\n * - Multi-format API response handling with backward compatibility\n * - Automatic agent state synchronization across operations\n * - Optimistic UI updates for seamless user experience\n * - Comprehensive error handling with graceful recovery\n */\n\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { AgentStore, Agent } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useConversationStore } from './conversations';\nimport { useMessageStore } from './messages';\n\n/**\n * Agent Store Implementation\n * \n * Persisted to localStorage with key 'customgpt-agent-store'\n * Automatically hydrates on app load\n */\nexport const useAgentStore = create<AgentStore>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      agents: [],\n      currentAgent: null,\n      loading: false,\n      error: null,\n      paginationMeta: undefined,\n\n      /**\n       * Fetch agents from the API with enterprise-scale pagination\n       * \n       * Strategy for 1000+ projects:\n       * - Load first batch (100 items) immediately for UI responsiveness\n       * - Load additional batches as needed via loadMoreAgents()\n       * - Auto-selects first agent if none selected\n       * - Maintains total count for pagination UI\n       */\n      fetchAgents: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Load first batch with larger page size for better UX\n          const response = await client.getAgents({ page: 1, per_page: 100 });\n          \n          let agents: Agent[] = [];\n          let total = 0;\n          let hasMore = false;\n          \n          // Handle different response formats from the API\n          if (response && typeof response === 'object') {\n            // Check for nested pagination format: { data: { data: [...], total: ..., current_page: ... } }\n            if ('data' in response && (response as any).data && typeof (response as any).data === 'object' && 'data' in (response as any).data) {\n              const nestedData = (response as any).data;\n              agents = Array.isArray(nestedData.data) ? nestedData.data : [];\n              total = nestedData.total || agents.length;\n              const currentPage = nestedData.current_page || 1;\n              const perPage = nestedData.per_page || 100;\n              hasMore = nestedData.last_page ? currentPage < nestedData.last_page : false;\n            } else if ('data' in response && 'total' in response) {\n              // Flat paginated response format\n              const paginatedResponse = response as { data: Agent[]; total: number; page: number; per_page: number };\n              agents = paginatedResponse.data;\n              total = paginatedResponse.total;\n              hasMore = total > paginatedResponse.per_page;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              agents = (response as any).data;\n              total = agents.length;\n              hasMore = false;\n            } else if (Array.isArray(response)) {\n              // Legacy format: [...]\n              agents = response as Agent[];\n              total = agents.length;\n              hasMore = false;\n            }\n          }\n          \n          set({ \n            agents, \n            loading: false,\n            // Always update pagination metadata with fresh data\n            paginationMeta: { \n              currentPage: 1, \n              totalCount: total, \n              hasMore,\n              perPage: 100\n            },\n            // Auto-select first agent if none selected\n            currentAgent: get().currentAgent || (agents.length > 0 ? agents[0] : null)\n          });\n          \n          // Fetch settings for the current agent to get avatar\n          const currentAgent = get().currentAgent;\n          if (currentAgent && !currentAgent.settings) {\n            try {\n              const client = getClient();\n              const settingsResponse = await client.getAgentSettings(currentAgent.id);\n              if (settingsResponse && settingsResponse.data) {\n                const agentWithSettings = { ...currentAgent, settings: settingsResponse.data };\n                set({ currentAgent: agentWithSettings });\n                \n                // Also update in the agents list\n                set(state => ({\n                  agents: state.agents.map(a => \n                    a.id === currentAgent.id ? agentWithSettings : a\n                  )\n                }));\n              }\n            } catch (error) {\n              console.error('Failed to fetch current agent settings:', error);\n            }\n          }\n        } catch (error) {\n          console.error('Failed to fetch agents:', error);\n          set({ \n            agents: [], \n            error: error instanceof Error ? error.message : 'Failed to fetch agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Load more agents for large datasets (enterprise accounts)\n       * Appends to existing agents list\n       */\n      loadMoreAgents: async () => {\n        const state = get();\n        const paginationMeta = (state as any).paginationMeta;\n        \n        if (!paginationMeta?.hasMore || state.loading) return;\n        \n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const nextPage = paginationMeta.currentPage + 1;\n          \n          const response = await client.getAgents({ \n            page: nextPage, \n            per_page: paginationMeta.perPage \n          });\n          \n          if (response && 'data' in response) {\n            let newAgents: Agent[] = [];\n            let responseTotal = 0;\n            let responsePage = nextPage;\n            \n            // Handle nested format: { data: { data: [...] } }\n            if (response.data && typeof response.data === 'object' && 'data' in response.data) {\n              const nestedData = (response as any).data;\n              newAgents = Array.isArray(nestedData.data) ? nestedData.data : [];\n              responseTotal = nestedData.total || 0;\n              responsePage = nestedData.current_page || nextPage;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              newAgents = (response as any).data;\n              responseTotal = paginationMeta.totalCount;\n            }\n            \n            set(state => ({ \n              agents: [...state.agents, ...newAgents],\n              loading: false,\n              paginationMeta: {\n                ...paginationMeta,\n                currentPage: responsePage,\n                hasMore: (responsePage * paginationMeta.perPage + newAgents.length) < responseTotal\n              }\n            }));\n          }\n        } catch (error) {\n          console.error('Failed to load more agents:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to load more agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Search for a specific agent by ID or name\n       * Useful for enterprise accounts with many projects\n       */\n      findAgent: async (query: string | number) => {\n        try {\n          const client = getClient();\n          \n          // If query is numeric, assume it's an ID and try to fetch directly\n          if (typeof query === 'number' || /^\\d+$/.test(query.toString())) {\n            const id = typeof query === 'number' ? query : parseInt(query.toString());\n            try {\n              const response = await client.getAgent(id);\n              const agent = response.data;\n              \n              // Add to agents list if not already present\n              const state = get();\n              if (!state.agents.find(a => a.id === agent.id)) {\n                set(state => ({ \n                  agents: [agent, ...state.agents] \n                }));\n              }\n              \n              return agent;\n            } catch {\n              // ID not found or no access, fall through to search\n            }\n          }\n          \n          // For text search, we'd need a search endpoint (not implemented in current API)\n          // For now, search within loaded agents\n          const state = get();\n          const found = state.agents.find(agent => \n            agent.project_name.toLowerCase().includes(query.toString().toLowerCase()) ||\n            agent.id.toString() === query.toString()\n          );\n          \n          return found || null;\n        } catch (error) {\n          console.error('Failed to find agent:', error);\n          return null;\n        }\n      },\n\n      /**\n       * Create a new agent\n       * \n       * @param data - Agent creation data\n       * @param data.project_name - Display name for the agent\n       * @param data.sitemap_path - URL for sitemap-based training\n       * @param data.files - Files for file-based training\n       * @param data.is_shared - Whether agent is publicly accessible\n       * \n       * Behavior:\n       * - Adds new agent to beginning of list\n       * - Auto-selects the new agent\n       * - Returns the created agent\n       * - Throws error on failure\n       */\n      createAgent: async (data: {\n        project_name: string;\n        sitemap_path?: string;\n        files?: File[];\n        is_shared?: boolean;\n      }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createAgent(data);\n          const newAgent = response.data;\n          \n          // Optimistic update - add to list and select immediately\n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to create agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create agent',\n            loading: false \n          });\n          throw error; // Re-throw for component error handling\n        }\n      },\n\n      /**\n       * Select an agent as the current active agent\n       * This agent will be used for all chat operations\n       * \n       * @param agent - The agent to select\n       */\n      selectAgent: async (agent: Agent) => {\n        // Clear conversation state when switching agents\n        const conversationStore = useConversationStore.getState();\n        const messageStore = useMessageStore.getState();\n        \n        // Set the new agent first\n        set({ currentAgent: agent });\n        \n        // Clear current conversation to show welcome screen\n        conversationStore.selectConversation(null);\n        \n        // Clear all messages from the previous agent\n        messageStore.clearMessages();\n        \n        // Fetch agent settings to get avatar and other details\n        try {\n          const client = getClient();\n          const settingsResponse = await client.getAgentSettings(agent.id);\n          if (settingsResponse && settingsResponse.data) {\n            // Update the agent with settings\n            const agentWithSettings = { ...agent, settings: settingsResponse.data };\n            set({ currentAgent: agentWithSettings });\n            \n            // Also update in the agents list\n            set(state => ({\n              agents: state.agents.map(a => \n                a.id === agent.id ? agentWithSettings : a\n              )\n            }));\n          }\n        } catch (error) {\n          console.error('Failed to fetch agent settings:', error);\n          // Continue without settings\n        }\n        \n        // Fetch conversations for the new agent\n        try {\n          await conversationStore.fetchConversations(agent.id);\n        } catch (error) {\n          console.error('Failed to fetch conversations for new agent:', error);\n          // Even if fetch fails, we've already cleared the old state\n        }\n      },\n\n      /**\n       * Manually set the agents list\n       * Used for optimistic updates or manual state management\n       * \n       * Features:\n       * - Validates current agent still exists\n       * - Auto-selects first agent if current is removed\n       * - Maintains agent selection when possible\n       * \n       * @param agents - New list of agents\n       */\n      setAgents: (agents: Agent[]) => {\n        set({ \n          agents,\n          // Update current agent if it's no longer in the list\n          currentAgent: (() => {\n            const current = get().currentAgent;\n            if (!current) return agents.length > 0 ? agents[0] : null;\n            \n            // Check if current agent still exists in new list\n            const stillExists = agents.find(a => a.id === current.id);\n            return stillExists || (agents.length > 0 ? agents[0] : null);\n          })()\n        });\n      },\n      \n      updateAgent: async (id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateAgent(id, data);\n          const updatedAgent = response.data;\n          \n          set(state => ({\n            agents: state.agents.map(a => a.id === id ? updatedAgent : a),\n            currentAgent: state.currentAgent?.id === id ? updatedAgent : state.currentAgent,\n            loading: false,\n          }));\n          \n          return updatedAgent;\n        } catch (error) {\n          console.error('Failed to update agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      deleteAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteAgent(id);\n          \n          set(state => {\n            const filteredAgents = state.agents.filter(a => a.id !== id);\n            return {\n              agents: filteredAgents,\n              currentAgent: state.currentAgent?.id === id \n                ? (filteredAgents.length > 0 ? filteredAgents[0] : null)\n                : state.currentAgent,\n              loading: false,\n            };\n          });\n        } catch (error) {\n          console.error('Failed to delete agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      replicateAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.replicateAgent(id);\n          const newAgent = response.data;\n          \n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to replicate agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to replicate agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      getAgentStats: async (id: number) => {\n        try {\n          const client = getClient();\n          const response = await client.getAgentStats(id);\n          return response.data;\n        } catch (error) {\n          console.error('Failed to get agent stats:', error);\n          throw error;\n        }\n      },\n    }),\n    {\n      name: 'customgpt-agents',\n      partialize: (state) => ({\n        currentAgent: state.currentAgent,\n      }),\n    }\n  )\n);","/**\n * Performance monitoring utilities for voice themes\n * \n * Provides performance tracking, FPS monitoring, and device capability detection\n */\n\nexport interface PerformanceMetrics {\n  fps: number;\n  frameTime: number;\n  memoryUsage?: number;\n  particleCount?: number;\n  objectCount?: number;\n  drawCalls?: number;\n}\n\nexport interface DeviceCapabilities {\n  isMobile: boolean;\n  isLowPowerDevice: boolean;\n  supportsWebGL: boolean;\n  hardwareConcurrency: number;\n  memoryGB?: number;\n  performanceLevel: 'low' | 'medium' | 'high';\n}\n\n/**\n * Performance monitor for tracking FPS and frame timing\n */\nexport class PerformanceMonitor {\n  private frameCount = 0;\n  private lastTime = 0;\n  private currentFPS = 60;\n  private frameTime = 16.67;\n  private fpsHistory: number[] = [];\n  private frameTimeHistory: number[] = [];\n  private maxHistorySize = 60; // Keep 1 second of history at 60fps\n  private warningThreshold = 0.8;\n  private criticalThreshold = 0.6;\n\n  private callbacks: {\n    onFPSUpdate?: (fps: number) => void;\n    onPerformanceWarning?: (metrics: PerformanceMetrics) => void;\n    onPerformanceCritical?: (metrics: PerformanceMetrics) => void;\n  } = {};\n\n  constructor(targetFPS = 60) {\n    this.lastTime = performance.now();\n  }\n\n  /**\n   * Call this every frame to update performance metrics\n   */\n  update(): PerformanceMetrics {\n    const currentTime = performance.now();\n    const deltaTime = currentTime - this.lastTime;\n    this.frameTime = deltaTime;\n    \n    // Update FPS calculation\n    this.frameCount++;\n    const fps = 1000 / deltaTime;\n    this.fpsHistory.push(fps);\n    this.frameTimeHistory.push(deltaTime);\n\n    // Keep history size manageable\n    if (this.fpsHistory.length > this.maxHistorySize) {\n      this.fpsHistory.shift();\n      this.frameTimeHistory.shift();\n    }\n\n    // Calculate average FPS over recent history\n    const avgFPS = this.fpsHistory.reduce((sum, fps) => sum + fps, 0) / this.fpsHistory.length;\n    this.currentFPS = avgFPS;\n\n    // Check for performance issues\n    const targetFPS = 30; // Conservative target for voice themes\n    const performanceRatio = avgFPS / targetFPS;\n\n    if (performanceRatio < this.criticalThreshold) {\n      this.callbacks.onPerformanceCritical?.({\n        fps: avgFPS,\n        frameTime: deltaTime\n      });\n    } else if (performanceRatio < this.warningThreshold) {\n      this.callbacks.onPerformanceWarning?.({\n        fps: avgFPS,\n        frameTime: deltaTime\n      });\n    }\n\n    // Update callbacks\n    if (this.frameCount % 30 === 0) { // Update every 30 frames (~0.5 seconds)\n      this.callbacks.onFPSUpdate?.(avgFPS);\n    }\n\n    this.lastTime = currentTime;\n\n    return {\n      fps: avgFPS,\n      frameTime: deltaTime\n    };\n  }\n\n  /**\n   * Set performance monitoring callbacks\n   */\n  setCallbacks(callbacks: typeof this.callbacks) {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Get current performance metrics\n   */\n  getCurrentMetrics(): PerformanceMetrics {\n    return {\n      fps: this.currentFPS,\n      frameTime: this.frameTime\n    };\n  }\n\n  /**\n   * Reset performance tracking\n   */\n  reset() {\n    this.frameCount = 0;\n    this.fpsHistory = [];\n    this.frameTimeHistory = [];\n    this.lastTime = performance.now();\n  }\n}\n\n/**\n * Detect device capabilities for performance optimization\n */\nexport class DeviceCapabilityDetector {\n  private static instance: DeviceCapabilityDetector;\n  private capabilities: DeviceCapabilities | null = null;\n\n  static getInstance(): DeviceCapabilityDetector {\n    if (!DeviceCapabilityDetector.instance) {\n      DeviceCapabilityDetector.instance = new DeviceCapabilityDetector();\n    }\n    return DeviceCapabilityDetector.instance;\n  }\n\n  /**\n   * Detect and cache device capabilities\n   */\n  async detectCapabilities(): Promise<DeviceCapabilities> {\n    if (this.capabilities) {\n      return this.capabilities;\n    }\n\n    const isMobile = this.detectMobile();\n    const supportsWebGL = this.detectWebGL();\n    const hardwareConcurrency = navigator.hardwareConcurrency || 4;\n    \n    let memoryGB: number | undefined;\n    if ('memory' in (navigator as any)) {\n      memoryGB = (navigator as any).memory.jsHeapSizeLimit / (1024 ** 3);\n    }\n\n    // Performance benchmarking\n    const performanceLevel = await this.benchmarkPerformance();\n    const isLowPowerDevice = this.detectLowPowerDevice(hardwareConcurrency, memoryGB, performanceLevel);\n\n    this.capabilities = {\n      isMobile,\n      isLowPowerDevice,\n      supportsWebGL,\n      hardwareConcurrency,\n      memoryGB,\n      performanceLevel\n    };\n\n    return this.capabilities;\n  }\n\n  private detectMobile(): boolean {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n  }\n\n  private detectWebGL(): boolean {\n    try {\n      const canvas = document.createElement('canvas');\n      return !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n    } catch {\n      return false;\n    }\n  }\n\n  private detectLowPowerDevice(cores: number, memoryGB?: number, performanceLevel?: string): boolean {\n    // Heuristics for low-power device detection\n    if (cores <= 2) return true;\n    if (memoryGB && memoryGB < 2) return true;\n    if (performanceLevel === 'low') return true;\n    return false;\n  }\n\n  private async benchmarkPerformance(): Promise<'low' | 'medium' | 'high'> {\n    return new Promise((resolve) => {\n      const startTime = performance.now();\n      let operations = 0;\n      const maxTime = 50; // 50ms benchmark window\n\n      const benchmark = () => {\n        const currentTime = performance.now();\n        if (currentTime - startTime >= maxTime) {\n          // Classify performance based on operations completed\n          if (operations < 100000) {\n            resolve('low');\n          } else if (operations < 500000) {\n            resolve('medium');\n          } else {\n            resolve('high');\n          }\n          return;\n        }\n\n        // Simple mathematical operations\n        for (let i = 0; i < 1000; i++) {\n          Math.sin(Math.random() * Math.PI * 2);\n          operations++;\n        }\n\n        requestAnimationFrame(benchmark);\n      };\n\n      requestAnimationFrame(benchmark);\n    });\n  }\n\n  /**\n   * Get cached capabilities or detect if not available\n   */\n  getCapabilities(): DeviceCapabilities | null {\n    return this.capabilities;\n  }\n}\n\n/**\n * Memory pool for efficient particle/object management\n */\nexport class ObjectPool<T> {\n  private available: T[] = [];\n  private inUse = new Set<T>();\n  private createFn: () => T;\n  private resetFn?: (obj: T) => void;\n  private maxSize: number;\n\n  constructor(createFn: () => T, resetFn?: (obj: T) => void, initialSize = 10, maxSize = 1000) {\n    this.createFn = createFn;\n    this.resetFn = resetFn;\n    this.maxSize = maxSize;\n\n    // Pre-populate pool\n    for (let i = 0; i < initialSize; i++) {\n      this.available.push(this.createFn());\n    }\n  }\n\n  /**\n   * Get an object from the pool\n   */\n  acquire(): T {\n    let obj: T;\n\n    if (this.available.length > 0) {\n      obj = this.available.pop()!;\n    } else if (this.inUse.size < this.maxSize) {\n      obj = this.createFn();\n    } else {\n      // Pool is full, reuse oldest object\n      const oldest = this.inUse.values().next().value;\n      if (oldest) {\n        this.release(oldest);\n        obj = oldest;\n      } else {\n        // Fallback: create new object if somehow there's nothing to reuse\n        obj = this.createFn();\n      }\n    }\n\n    this.inUse.add(obj);\n    return obj;\n  }\n\n  /**\n   * Return an object to the pool\n   */\n  release(obj: T): void {\n    if (this.inUse.has(obj)) {\n      this.inUse.delete(obj);\n      if (this.resetFn) {\n        this.resetFn(obj);\n      }\n      this.available.push(obj);\n    }\n  }\n\n  /**\n   * Get pool statistics\n   */\n  getStats() {\n    return {\n      available: this.available.length,\n      inUse: this.inUse.size,\n      total: this.available.length + this.inUse.size\n    };\n  }\n\n  /**\n   * Clear the entire pool\n   */\n  clear(): void {\n    this.available = [];\n    this.inUse.clear();\n  }\n}\n\n/**\n * Utility to get optimal performance settings based on device capabilities\n */\nexport const getOptimalSettings = async (): Promise<{\n  targetFPS: number;\n  maxParticles: number;\n  enableEffects: boolean;\n  enableGlow: boolean;\n  qualityLevel: 'low' | 'medium' | 'high';\n}> => {\n  const detector = DeviceCapabilityDetector.getInstance();\n  const capabilities = await detector.detectCapabilities();\n\n  if (capabilities.performanceLevel === 'low' || capabilities.isLowPowerDevice) {\n    return {\n      targetFPS: 24,\n      maxParticles: 50,\n      enableEffects: false,\n      enableGlow: false,\n      qualityLevel: 'low'\n    };\n  } else if (capabilities.performanceLevel === 'medium') {\n    return {\n      targetFPS: 30,\n      maxParticles: 150,\n      enableEffects: true,\n      enableGlow: false,\n      qualityLevel: 'medium'\n    };\n  } else {\n    return {\n      targetFPS: 60,\n      maxParticles: 300,\n      enableEffects: true,\n      enableGlow: true,\n      qualityLevel: 'high'\n    };\n  }\n};","import type { StreamChunk, Citation, StreamCallbacks, StreamHandlerConfig } from '@/types';\nimport { parseStreamChunk } from '@/lib/utils';\n\nexport interface StreamMessage {\n  id: string;\n  content: string;\n  citations: Citation[];\n  isComplete: boolean;\n}\n\nexport class StreamHandler {\n  private config: Required<StreamHandlerConfig>;\n  private abortController: AbortController | null = null;\n  private currentMessage: StreamMessage | null = null;\n\n  constructor(config: StreamHandlerConfig = {}) {\n    this.config = {\n      timeout: config.timeout || 60000,\n      retryAttempts: config.retryAttempts || 3,\n      retryDelay: config.retryDelay || 1000,\n    };\n  }\n\n  /**\n   * Process a streaming response\n   */\n  async processStream(\n    stream: ReadableStream,\n    callbacks: StreamCallbacks\n  ): Promise<StreamMessage> {\n    this.abortController = new AbortController();\n    this.currentMessage = {\n      id: this.generateId(),\n      content: '',\n      citations: [],\n      isComplete: false,\n    };\n\n    const reader = stream.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    // Set timeout\n    const timeoutId = setTimeout(() => {\n      this.cancel();\n      callbacks.onError?.(new Error('Stream timeout'));\n    }, this.config.timeout);\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) {\n          this.currentMessage.isComplete = true;\n          callbacks.onComplete?.();\n          break;\n        }\n\n        // Decode chunk and add to buffer\n        buffer += decoder.decode(value, { stream: true });\n        \n        // Process complete lines\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n        for (const line of lines) {\n          if (line.trim()) {\n            await this.processLine(line, callbacks);\n          }\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        callbacks.onError?.(new Error('Stream cancelled'));\n      } else {\n        callbacks.onError?.(error instanceof Error ? error : new Error('Unknown streaming error'));\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      reader.releaseLock();\n      this.abortController = null;\n    }\n\n    return this.currentMessage;\n  }\n\n  /**\n   * Process a single line from the stream\n   */\n  private async processLine(line: string, callbacks: StreamCallbacks): Promise<void> {\n    const chunk = parseStreamChunk(line);\n    \n    if (!chunk || !this.currentMessage) return;\n\n    switch (chunk.type) {\n      case 'content':\n        if (chunk.content) {\n          this.currentMessage.content += chunk.content;\n          callbacks.onChunk?.(chunk.content);\n        }\n        break;\n\n      case 'citation':\n        if (chunk.citations) {\n          this.currentMessage.citations.push(...chunk.citations);\n          chunk.citations.forEach((citation: Citation) => {\n            callbacks.onCitation?.(citation);\n          });\n        }\n        break;\n\n      case 'done':\n        this.currentMessage.isComplete = true;\n        callbacks.onComplete?.();\n        return;\n\n      case 'error':\n        callbacks.onError?.(new Error(chunk.error || 'Stream error'));\n        return;\n\n      default:\n        // Handle unknown chunk types gracefully\n        console.warn('Unknown stream chunk type:', chunk.type);\n    }\n  }\n\n  /**\n   * Cancel the current stream\n   */\n  cancel(): void {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n  }\n\n  /**\n   * Get current message state\n   */\n  getCurrentMessage(): StreamMessage | null {\n    return this.currentMessage;\n  }\n\n  /**\n   * Check if streaming is active\n   */\n  isStreaming(): boolean {\n    return this.abortController !== null && this.currentMessage !== null && !this.currentMessage.isComplete;\n  }\n\n  private generateId(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n}\n\n/**\n * Utility class for managing multiple concurrent streams\n */\nexport class StreamManager {\n  private streams: Map<string, StreamHandler> = new Map();\n  private maxConcurrentStreams: number;\n\n  constructor(maxConcurrentStreams: number = 3) {\n    this.maxConcurrentStreams = maxConcurrentStreams;\n  }\n\n  /**\n   * Start a new stream\n   */\n  async startStream(\n    streamId: string,\n    stream: ReadableStream,\n    callbacks: StreamCallbacks,\n    config?: StreamHandlerConfig\n  ): Promise<StreamMessage> {\n    // Check if we're at the concurrent limit\n    if (this.streams.size >= this.maxConcurrentStreams) {\n      throw new Error(`Maximum concurrent streams (${this.maxConcurrentStreams}) reached`);\n    }\n\n    // Cancel existing stream with same ID if it exists\n    if (this.streams.has(streamId)) {\n      this.cancelStream(streamId);\n    }\n\n    const handler = new StreamHandler(config);\n    this.streams.set(streamId, handler);\n\n    try {\n      const result = await handler.processStream(stream, {\n        ...callbacks,\n        onComplete: () => {\n          this.streams.delete(streamId);\n          callbacks.onComplete?.();\n        },\n        onError: (error) => {\n          this.streams.delete(streamId);\n          callbacks.onError?.(error);\n        },\n      });\n\n      return result;\n    } catch (error) {\n      this.streams.delete(streamId);\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel a specific stream\n   */\n  cancelStream(streamId: string): void {\n    const handler = this.streams.get(streamId);\n    if (handler) {\n      handler.cancel();\n      this.streams.delete(streamId);\n    }\n  }\n\n  /**\n   * Cancel all active streams\n   */\n  cancelAllStreams(): void {\n    this.streams.forEach(handler => handler.cancel());\n    this.streams.clear();\n  }\n\n  /**\n   * Get active stream IDs\n   */\n  getActiveStreams(): string[] {\n    return Array.from(this.streams.keys());\n  }\n\n  /**\n   * Get stream status\n   */\n  getStreamStatus(streamId: string): {\n    exists: boolean;\n    isStreaming: boolean;\n    message: StreamMessage | null;\n  } {\n    const handler = this.streams.get(streamId);\n    \n    if (!handler) {\n      return { exists: false, isStreaming: false, message: null };\n    }\n\n    return {\n      exists: true,\n      isStreaming: handler.isStreaming(),\n      message: handler.getCurrentMessage(),\n    };\n  }\n\n  /**\n   * Get number of active streams\n   */\n  getActiveStreamCount(): number {\n    return this.streams.size;\n  }\n}\n\n/**\n * Parse Server-Sent Events (SSE) data\n */\nexport function parseSSEData(data: string): any | null {\n  try {\n    if (data === '[DONE]') {\n      return { type: 'done' };\n    }\n    \n    const parsed = JSON.parse(data);\n    \n    // Handle different response formats\n    if (parsed.choices && parsed.choices[0]) {\n      const choice = parsed.choices[0];\n      \n      if (choice.delta && choice.delta.content) {\n        return {\n          type: 'content',\n          content: choice.delta.content,\n        };\n      }\n      \n      if (choice.message && choice.message.content) {\n        return {\n          type: 'content',\n          content: choice.message.content,\n        };\n      }\n    }\n    \n    // Handle CustomGPT format\n    if (parsed.content) {\n      return {\n        type: 'content',\n        content: parsed.content,\n        citations: parsed.citations || [],\n      };\n    }\n    \n    return parsed;\n  } catch (error) {\n    console.error('Failed to parse SSE data:', error);\n    return null;\n  }\n}\n\n\n/**\n * Validate stream format\n */\nexport function validateStreamChunk(chunk: any): boolean {\n  if (!chunk || typeof chunk !== 'object') {\n    return false;\n  }\n\n  // Must have a type\n  if (!chunk.type || typeof chunk.type !== 'string') {\n    return false;\n  }\n\n  // Validate specific types\n  switch (chunk.type) {\n    case 'content':\n      return typeof chunk.content === 'string';\n    \n    case 'citation':\n      return Array.isArray(chunk.citations);\n    \n    case 'done':\n    case 'error':\n      return true;\n    \n    default:\n      return false;\n  }\n}\n\n// Global stream manager instance\nexport const globalStreamManager = new StreamManager();","/**\n * Voice Theme Interface\n * \n * Defines the contract that all voice interaction themes must implement.\n * Each theme provides unique visual feedback for different voice states.\n */\n\nexport interface IVoiceTheme {\n  /**\n   * Unique identifier for the theme\n   */\n  readonly id: string;\n\n  /**\n   * Display name for the theme\n   */\n  readonly name: string;\n\n  /**\n   * Theme description\n   */\n  readonly description: string;\n\n  /**\n   * Theme category for UI organization\n   */\n  readonly category: 'particle' | 'geometric' | 'advanced' | 'artistic';\n\n  /**\n   * Performance profile for mobile optimization\n   */\n  readonly performanceProfile: 'light' | 'medium' | 'heavy';\n\n  /**\n   * Initialize the theme with canvas context and dimensions\n   */\n  init(context: CanvasRenderingContext2D, width: number, height: number): void;\n\n  /**\n   * Main drawing function called every frame\n   */\n  draw(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void;\n\n  /**\n   * User is speaking state\n   */\n  onUserSpeaking(): void;\n\n  /**\n   * Processing/analyzing speech state\n   */\n  onProcessing(): void;\n\n  /**\n   * AI is responding state\n   */\n  onAiSpeaking(): void;\n\n  /**\n   * Reset to idle state\n   */\n  reset(): void;\n\n  /**\n   * Handle mouse/touch position updates\n   */\n  setMousePosition(x: number, y: number, canvasWidth: number, canvasHeight: number): void;\n\n  /**\n   * Handle mouse/touch hover state\n   */\n  setHovering(hovering: boolean): void;\n\n  /**\n   * Cleanup resources when theme is deactivated\n   */\n  dispose(): void;\n\n  /**\n   * Get current performance metrics\n   */\n  getPerformanceMetrics(): {\n    particleCount?: number;\n    objectCount?: number;\n    memoryUsage?: number;\n    averageFPS?: number;\n  };\n}\n\n/**\n * Theme metadata for UI display\n */\nexport interface ThemeMetadata {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  performanceProfile: string;\n  previewColors: string[];\n  previewDescription: string;\n}\n\n/**\n * Voice state enumeration\n */\nexport enum VoiceState {\n  IDLE = 'idle',\n  USER_SPEAKING = 'userSpeaking',\n  PROCESSING = 'processing',\n  AI_SPEAKING = 'aiSpeaking'\n}\n\n/**\n * Performance settings for different device types\n */\nexport interface PerformanceSettings {\n  targetFPS: number;\n  maxParticles: number;\n  enableEffects: boolean;\n  enableGlow: boolean;\n  qualityLevel: 'low' | 'medium' | 'high';\n}\n\n/**\n * Theme factory function type\n */\nexport type ThemeFactory = () => IVoiceTheme;","/**\n * Theme utilities for persistent theme management\n * \n * Uses cookies for theme persistence to ensure the theme\n * is available during server-side rendering and prevents\n * flash of incorrect theme on page load.\n */\n\nexport type Theme = 'light' | 'dark';\n\nconst THEME_COOKIE_NAME = 'customgpt-theme';\nconst THEME_COOKIE_MAX_AGE = 365 * 24 * 60 * 60; // 1 year in seconds\n\n/**\n * Get theme from cookie\n */\nexport function getThemeFromCookie(): Theme {\n  if (typeof window === 'undefined') return 'light';\n  \n  const cookies = document.cookie.split(';');\n  const themeCookie = cookies.find(cookie => \n    cookie.trim().startsWith(`${THEME_COOKIE_NAME}=`)\n  );\n  \n  if (themeCookie) {\n    const value = themeCookie.split('=')[1].trim();\n    return value === 'dark' ? 'dark' : 'light';\n  }\n  \n  return 'light';\n}\n\n/**\n * Set theme in cookie\n */\nexport function setThemeCookie(theme: Theme) {\n  if (typeof window === 'undefined') return;\n  \n  // Set cookie with max age and path\n  document.cookie = `${THEME_COOKIE_NAME}=${theme}; max-age=${THEME_COOKIE_MAX_AGE}; path=/; SameSite=Lax`;\n}\n\n/**\n * Apply theme to document\n */\nexport function applyThemeToDocument(theme: Theme) {\n  if (typeof window === 'undefined') return;\n  \n  if (theme === 'dark') {\n    document.documentElement.classList.add('dark');\n  } else {\n    document.documentElement.classList.remove('dark');\n  }\n}\n\n/**\n * Initialize theme from cookie and apply to document\n */\nexport function initializeTheme(): Theme {\n  const theme = getThemeFromCookie();\n  applyThemeToDocument(theme);\n  return theme;\n}\n\n/**\n * Set theme and persist to cookie\n */\nexport function setTheme(theme: Theme) {\n  setThemeCookie(theme);\n  applyThemeToDocument(theme);\n}","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConfigStore } from '@/types';\nimport { setTheme as setThemeUtil, getThemeFromCookie, initializeTheme } from '@/lib/theme';\n\n/**\n * Configuration Store\n * \n * Updated to remove API key storage for security.\n * API key is now stored securely on the server.\n * Theme is persisted using cookies for better SSR support.\n */\nexport const useConfigStore = create<ConfigStore>()(\n  persist(\n    (set, get) => ({\n      apiKey: null, // Deprecated - kept for interface compatibility\n      baseURL: 'https://app.customgpt.ai/api/v1', // Not used anymore, server handles this\n      theme: (typeof window !== 'undefined' ? getThemeFromCookie() : 'light') as 'light' | 'dark',\n\n      setApiKey: (key: string) => {\n        // No-op - API key is not stored client-side anymore\n        // This method is kept for backward compatibility\n        console.warn('API key storage has been disabled for security. Configure API key in server environment variables.');\n      },\n\n      setBaseURL: (url: string) => {\n        // No-op - base URL is configured on server\n        console.warn('Base URL configuration has been moved to server. Update CUSTOMGPT_API_BASE_URL in environment variables.');\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Update cookie and document class for theme\n        if (typeof window !== 'undefined') {\n          setThemeUtil(theme);\n        }\n      },\n    }),\n    {\n      name: 'customgpt-config',\n      // Only persist non-sensitive data\n      partialize: (state) => ({\n        theme: state.theme,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Initialize theme from cookie on rehydration\n        if (typeof window !== 'undefined') {\n          const theme = initializeTheme();\n          if (state && state.theme !== theme) {\n            state.theme = theme;\n          }\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { UIStore } from '@/types';\n\nexport const useUIStore = create<UIStore>()(\n  persist(\n    (set) => ({\n      sidebarOpen: true,\n      settingsOpen: false,\n      theme: 'light',\n      fontSize: 'md',\n\n      setSidebarOpen: (open: boolean) => {\n        set({ sidebarOpen: open });\n      },\n\n      setSettingsOpen: (open: boolean) => {\n        set({ settingsOpen: open });\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Apply theme to document\n        if (typeof window !== 'undefined') {\n          document.documentElement.className = theme;\n        }\n      },\n\n      setFontSize: (size: 'sm' | 'md' | 'lg') => {\n        set({ fontSize: size });\n        \n        // Apply font size to document\n        if (typeof window !== 'undefined') {\n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (size) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }),\n    {\n      name: 'customgpt-ui',\n      partialize: (state) => ({\n        sidebarOpen: state.sidebarOpen,\n        theme: state.theme,\n        fontSize: state.fontSize,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Apply theme and font size on rehydration\n        if (typeof window !== 'undefined' && state) {\n          document.documentElement.className = state.theme;\n          \n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (state.fontSize) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface AnalyticsData {\n  conversations: {\n    total: number;\n    active: number;\n    trend: number;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  queries: {\n    total: number;\n    successful: number;\n    failed: number;\n    avgResponseTime: number;\n    topQueries: Array<{\n      query: string;\n      count: number;\n    }>;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  traffic: {\n    uniqueUsers: number;\n    pageViews: number;\n    avgSessionDuration: number;\n    bounceRate: number;\n    data: Array<{\n      date: string;\n      users: number;\n      pageViews: number;\n    }>;\n  };\n  statistics: {\n    totalMessages: number;\n    totalConversations: number;\n    avgMessagesPerConversation: number;\n    satisfactionRate: number;\n    responseAccuracy: number;\n  };\n}\n\ninterface AnalyticsState {\n  analytics: AnalyticsData | null;\n  loading: boolean;\n  error: string | null;\n  dateRange: {\n    startDate: string;\n    endDate: string;\n  };\n  \n  // Actions\n  fetchAnalytics: (projectId: number) => Promise<void>;\n  setDateRange: (startDate: string, endDate: string) => void;\n  exportAnalytics: (format: 'csv' | 'json' | 'pdf') => Promise<void>;\n  reset: () => void;\n}\n\n// Helper function to format dates for API\nconst formatDate = (date: Date): string => {\n  return date.toISOString().split('T')[0];\n};\n\n// Get default date range (last 30 days)\nconst getDefaultDateRange = () => {\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - 30);\n  \n  return {\n    startDate: formatDate(startDate),\n    endDate: formatDate(endDate),\n  };\n};\n\nexport const useAnalyticsStore = create<AnalyticsState>((set, get) => ({\n  analytics: null,\n  loading: false,\n  error: null,\n  dateRange: getDefaultDateRange(),\n\n  fetchAnalytics: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Fetch all reports data in parallel using documented endpoints\n      const [trafficReport, queriesReport, conversationsReport, analysisReport] = await Promise.all([\n        client.getTrafficReport(projectId),\n        client.getQueriesReport(projectId),\n        client.getConversationsReport(projectId),\n        client.getAnalysisReport(projectId, 'daily'),\n      ]);\n\n      // Transform the data to match our interface using actual API response structure\n      // Handle cases where API returns empty arrays instead of numbers\n      const conversationsTotal = Array.isArray(conversationsReport.data?.total) ? 0 : (conversationsReport.data?.total || 0);\n      const queriesTotal = Array.isArray(queriesReport.data?.total) ? 0 : (queriesReport.data?.total || 0);\n      const avgQueriesPerConv = Array.isArray(conversationsReport.data?.average_queries_per_conversation) \n        ? 0 \n        : (Number(conversationsReport.data?.average_queries_per_conversation) || 0);\n\n      const analyticsData: AnalyticsData = {\n        conversations: {\n          total: conversationsTotal,\n          active: Math.floor(conversationsTotal * 0.7), // Estimate active conversations\n          trend: 0, // Calculate trend from data if needed\n          data: Array.isArray(analysisReport.data?.conversations) \n            ? analysisReport.data.conversations.map((item: any) => ({\n                date: item.created_at_interval,\n                count: Number(item.queries_number) || 0,\n              }))\n            : [],\n        },\n        queries: {\n          total: queriesTotal,\n          successful: Array.isArray(queriesReport.data?.query_status) \n            ? (queriesReport.data.query_status.find((s: any) => s.status === 'success')?.count || 0)\n            : 0,\n          failed: Array.isArray(queriesReport.data?.query_status)\n            ? (queriesReport.data.query_status.find((s: any) => s.status === 'failed')?.count || 0)\n            : 0,\n          avgResponseTime: 0, // Not provided by API\n          topQueries: [], // Not provided by these endpoints\n          data: Array.isArray(analysisReport.data?.queries)\n            ? analysisReport.data.queries.map((item: any) => ({\n                date: item.created_at_interval,\n                count: Number(item.queries_number) || 0,\n              }))\n            : [],\n        },\n        traffic: {\n          uniqueUsers: Array.isArray(trafficReport.data?.sources)\n            ? trafficReport.data.sources.reduce((acc: number, source: any) => acc + (source.request_source_number || 0), 0)\n            : 0,\n          pageViews: Array.isArray(trafficReport.data?.sources)\n            ? trafficReport.data.sources.reduce((acc: number, source: any) => acc + (source.request_source_number || 0), 0)\n            : 0,\n          avgSessionDuration: 0, // Not provided by API\n          bounceRate: 0, // Not provided by API\n          data: Array.isArray(trafficReport.data?.sources)\n            ? trafficReport.data.sources.map((source: any) => ({\n                date: new Date().toISOString().split('T')[0], // Current date as traffic report doesn't have dates\n                users: source.request_source_number || 0,\n                pageViews: source.request_source_number || 0,\n              }))\n            : [],\n        },\n        statistics: {\n          totalMessages: queriesTotal,\n          totalConversations: conversationsTotal,\n          avgMessagesPerConversation: avgQueriesPerConv,\n          satisfactionRate: 0, // Not provided by API\n          responseAccuracy: 0, // Not provided by API\n        },\n      };\n\n      set({ analytics: analyticsData, loading: false });\n    } catch (error: any) {\n      console.error('Failed to fetch analytics:', error);\n      \n      let errorMessage = 'Failed to fetch analytics';\n      if (error.status === 401) {\n        const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : 'production';\n        const isDemoMode = deploymentMode === 'demo';\n        if (isDemoMode) {\n          errorMessage = 'API key authentication failed. Please check your API key.';\n          toast.error('Authentication failed. Please check your API key in demo settings.');\n        } else {\n          errorMessage = 'Authentication required. Please check your API key configuration.';\n          toast.error('Authentication failed. Please check your API key configuration.');\n        }\n      } else if (error.status === 404) {\n        errorMessage = 'Analytics data not found for this project.';\n        toast.error('No analytics data available yet.');\n      } else if (error.status === 500) {\n        errorMessage = 'Server error occurred. Please try again later.';\n        toast.error('Server error. Please try again later.');\n      } else {\n        toast.error('Failed to fetch analytics data');\n      }\n      \n      set({ \n        analytics: null,\n        error: errorMessage,\n        loading: false,\n      });\n    }\n  },\n\n  setDateRange: (startDate: string, endDate: string) => {\n    set({ dateRange: { startDate, endDate } });\n  },\n\n  exportAnalytics: async (format: 'csv' | 'json' | 'pdf') => {\n    const analytics = get().analytics;\n    if (!analytics) {\n      toast.error('No analytics data to export');\n      return;\n    }\n\n    try {\n      // Implementation would depend on the format\n      switch (format) {\n        case 'json':\n          const jsonData = JSON.stringify(analytics, null, 2);\n          const blob = new Blob([jsonData], { type: 'application/json' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `analytics-${new Date().toISOString()}.json`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          URL.revokeObjectURL(url);\n          toast.success('Analytics exported successfully');\n          break;\n          \n        case 'csv':\n          // Would need a CSV conversion library or custom implementation\n          toast.info('CSV export not yet implemented');\n          break;\n          \n        case 'pdf':\n          // Would need a PDF generation library\n          toast.info('PDF export not yet implemented');\n          break;\n      }\n    } catch (error) {\n      console.error('Failed to export analytics:', error);\n      toast.error('Failed to export analytics');\n    }\n  },\n\n  reset: () => {\n    set({\n      analytics: null,\n      loading: false,\n      error: null,\n      dateRange: getDefaultDateRange(),\n    });\n  },\n}));","import { create } from 'zustand';\nimport { getClient, isClientInitialized } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { Page, PagesQueryParams } from '@/types/pages.types';\n\ninterface PagesState {\n  pages: Page[];\n  loading: boolean;\n  error: string | null;\n  paginationInfo: {\n    current_page: number;\n    total: number;\n    per_page: number;\n    last_page: number;\n  };\n  queryParams: PagesQueryParams;\n  \n  // Actions\n  fetchPages: (projectId: number) => Promise<void>;\n  deletePage: (projectId: number, pageId: number) => Promise<void>;\n  reindexPage: (projectId: number, pageId: number) => Promise<void>;\n  \n  // UI State\n  setQueryParams: (params: Partial<PagesQueryParams>) => void;\n  reset: () => void;\n}\n\nexport const usePageStore = create<PagesState>((set, get) => ({\n  pages: [],\n  loading: false,\n  error: null,\n  paginationInfo: {\n    current_page: 1,\n    total: 0,\n    per_page: 20,\n    last_page: 1\n  },\n  queryParams: {\n    page: 1,\n    limit: 20,\n    order: 'desc',\n    crawl_status: 'all',\n    index_status: 'all'\n  },\n\n  fetchPages: async (projectId: number) => {\n    if (!isClientInitialized()) {\n      set({ error: 'API client not initialized' });\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const { queryParams } = get();\n      const response = await client.getPages(projectId, queryParams);\n      \n      set({ \n        pages: response.data.pages.data,\n        paginationInfo: {\n          current_page: response.data.pages.current_page,\n          total: response.data.pages.total,\n          per_page: response.data.pages.per_page,\n          last_page: response.data.pages.last_page\n        },\n        loading: false \n      });\n    } catch (error: any) {\n      console.error('Failed to fetch pages:', error);\n      \n      let errorMessage = 'Failed to fetch pages';\n      if (error.status === 400) {\n        errorMessage = 'Invalid request. Please check the project ID.';\n      } else if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Project not found.';\n      } else if (error.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  deletePage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deletePage(projectId, pageId);\n      \n      set(state => ({\n        pages: state.pages.filter(page => page.id !== pageId),\n        loading: false,\n      }));\n      \n      toast.success('Page deleted successfully');\n    } catch (error: any) {\n      console.error('Failed to delete page:', error);\n      \n      let errorMessage = 'Failed to delete page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Page not found.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  reindexPage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.reindexPage(projectId, pageId);\n      \n      // Update local state to show queued status\n      set(state => ({\n        pages: state.pages.map(page => \n          page.id === pageId \n            ? { ...page, crawl_status: 'queued', index_status: 'queued' }\n            : page\n        ),\n        loading: false,\n      }));\n      \n      toast.success('Page reindexing started');\n    } catch (error: any) {\n      console.error('Failed to reindex page:', error);\n      \n      let errorMessage = 'Failed to reindex page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 403) {\n        errorMessage = 'The page could not be reindexed.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  setQueryParams: (params: Partial<PagesQueryParams>) => {\n    set(state => ({\n      queryParams: { ...state.queryParams, ...params },\n    }));\n  },\n\n  reset: () => {\n    set({\n      pages: [],\n      loading: false,\n      error: null,\n      paginationInfo: {\n        current_page: 1,\n        total: 0,\n        per_page: 20,\n        last_page: 1\n      },\n      queryParams: {\n        page: 1,\n        limit: 20,\n        order: 'desc',\n        crawl_status: 'all',\n        index_status: 'all'\n      },\n    });\n  },\n}));","// Sources store - provides state management for source data\n// Currently uses direct API calls in components\n\nimport { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface Source {\n  id: string;\n  project_id: number;\n  name: string;\n  type: 'file' | 'url' | 'text' | 'api';\n  status: 'active' | 'inactive' | 'processing' | 'error';\n  size?: number;\n  file_type?: string;\n  url?: string;\n  content?: string;\n  metadata?: {\n    description?: string;\n    tags?: string[];\n    author?: string;\n    lastIndexed?: string;\n    [key: string]: any;\n  };\n  created_at: string;\n  updated_at: string;\n  indexed_at?: string;\n  error_message?: string;\n}\n\ninterface SourcesState {\n  sources: Source[];\n  currentSource: Source | null;\n  loading: boolean;\n  error: string | null;\n  searchQuery: string;\n  filter: {\n    status?: 'active' | 'inactive' | 'processing' | 'error' | 'all';\n    type?: 'file' | 'url' | 'text' | 'api' | 'all';\n    sortBy?: 'name' | 'created_at' | 'updated_at' | 'size';\n    sortOrder?: 'asc' | 'desc';\n  };\n  syncStatus: {\n    syncing: boolean;\n    lastSync?: string;\n    progress?: number;\n  };\n  \n  // Actions\n  fetchSources: (projectId: number) => Promise<void>;\n  fetchSource: (projectId: number, sourceId: string) => Promise<void>;\n  uploadSources: (projectId: number, files: File[]) => Promise<void>;\n  updateSource: (projectId: number, sourceId: string, updates: Partial<Source>) => Promise<void>;\n  deleteSource: (projectId: number, sourceId: string) => Promise<void>;\n  bulkDelete: (projectId: number, sourceIds: string[]) => Promise<void>;\n  syncSources: (projectId: number) => Promise<void>;\n  \n  // UI State\n  setSearchQuery: (query: string) => void;\n  setFilter: (filter: Partial<SourcesState['filter']>) => void;\n  selectSource: (source: Source | null) => void;\n  reset: () => void;\n}\n\n// Store implementation for source management\nexport const useSourceStore = create<SourcesState>((set, get) => ({\n  sources: [],\n  currentSource: null,\n  loading: false,\n  error: null,\n  searchQuery: '',\n  filter: {\n    status: 'all',\n    type: 'all',\n    sortBy: 'updated_at',\n    sortOrder: 'desc',\n  },\n  syncStatus: {\n    syncing: false,\n  },\n\n  fetchSources: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getSources(projectId);\n      \n      // Extract all sources from sitemaps and uploads\n      const allSources: Source[] = [];\n      \n      if (response.data.sitemaps) {\n        // Map API source structure to store's Source interface\n        response.data.sitemaps.forEach((apiSource: any) => {\n          allSources.push({\n            id: apiSource.id.toString(),\n            project_id: projectId,\n            name: apiSource.settings.sitemap_path || `Source ${apiSource.id}`,\n            type: 'url', // Map 'sitemap' to 'url'\n            status: 'active',\n            metadata: {\n              ...apiSource.settings,\n              pages: apiSource.pages,\n            },\n            created_at: apiSource.created_at,\n            updated_at: apiSource.updated_at,\n          });\n        });\n      }\n      \n      if (response.data.uploads) {\n        const uploads = Array.isArray(response.data.uploads) \n          ? response.data.uploads \n          : [response.data.uploads];\n          \n        uploads.forEach((apiSource: any) => {\n          allSources.push({\n            id: apiSource.id.toString(),\n            project_id: projectId,\n            name: `Upload ${apiSource.id}`,\n            type: 'file',\n            status: 'active',\n            metadata: {\n              ...apiSource.settings,\n              pages: apiSource.pages,\n            },\n            created_at: apiSource.created_at,\n            updated_at: apiSource.updated_at,\n          });\n        });\n      }\n      \n      set({ sources: allSources, loading: false });\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch sources',\n        loading: false,\n      });\n      toast.error('Failed to load sources');\n    }\n  },\n\n  fetchSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      // const client = getClient();\n      // const response = await client.getSource(projectId, sourceId);\n      \n      // const source = response.data;\n      // set({ currentSource: source, loading: false });\n      throw new Error('getSource API method not available');\n      \n      // Update in the list as well\n      // set(state => ({\n      //   sources: state.sources.map(s => s.id === sourceId ? source : s),\n      // }));\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch source',\n        loading: false,\n      });\n      toast.error('Failed to load source details');\n    }\n  },\n\n  uploadSources: async (projectId: number, files: File[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Upload files one by one for better progress tracking\n      const uploadPromises = files.map(file => \n        Promise.reject(new Error('uploadFile API method not available'))\n      );\n      \n      const responses = await Promise.all(uploadPromises);\n      \n      // Refresh sources list\n      await get().fetchSources(projectId);\n      \n      toast.success(`Successfully uploaded ${files.length} file(s)`);\n      set({ loading: false });\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to upload sources',\n        loading: false,\n      });\n      toast.error('Failed to upload files');\n      throw error;\n    }\n  },\n\n  updateSource: async (projectId: number, sourceId: string, updates: Partial<Source>) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      // await client.updateSource(projectId, sourceId, {\n      throw new Error('updateSource API method not available');\n      /*\n        name: updates.name,\n        metadata: updates.metadata,\n        status: updates.status,\n      }); */\n      \n      set(state => ({\n        sources: state.sources.map(source => \n          source.id === sourceId \n            ? { ...source, ...updates, updated_at: new Date().toISOString() } \n            : source\n        ),\n        currentSource: state.currentSource?.id === sourceId \n          ? { ...state.currentSource, ...updates, updated_at: new Date().toISOString() }\n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source updated successfully');\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to update source',\n        loading: false,\n      });\n      toast.error('Failed to update source');\n      throw error;\n    }\n  },\n\n  deleteSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteSource(projectId, parseInt(sourceId));\n      \n      set(state => ({\n        sources: state.sources.filter(source => source.id !== sourceId),\n        currentSource: state.currentSource?.id === sourceId ? null : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source deleted successfully');\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete source',\n        loading: false,\n      });\n      toast.error('Failed to delete source');\n      throw error;\n    }\n  },\n\n  bulkDelete: async (projectId: number, sourceIds: string[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Delete sources in parallel\n      await Promise.all(\n        sourceIds.map(sourceId => client.deleteSource(projectId, parseInt(sourceId)))\n      );\n      \n      set(state => ({\n        sources: state.sources.filter(source => !sourceIds.includes(source.id)),\n        currentSource: sourceIds.includes(state.currentSource?.id || '') \n          ? null \n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success(`Successfully deleted ${sourceIds.length} source(s)`);\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete sources',\n        loading: false,\n      });\n      toast.error('Failed to delete sources');\n      throw error;\n    }\n  },\n\n  syncSources: async (projectId: number) => {\n    set(state => ({\n      syncStatus: { ...state.syncStatus, syncing: true, progress: 0 }\n    }));\n    \n    try {\n      const client = getClient();\n      // await client.syncSources(projectId);\n      throw new Error('syncSources API method not available');\n      \n      // Refresh sources after sync\n      await get().fetchSources(projectId);\n      \n      set(state => ({\n        syncStatus: {\n          syncing: false,\n          lastSync: new Date().toISOString(),\n          progress: 100,\n        }\n      }));\n      \n      toast.success('Sources synchronized successfully');\n    } catch (error) {\n      set(state => ({\n        syncStatus: { ...state.syncStatus, syncing: false },\n        error: error instanceof Error ? error.message : 'Failed to sync sources',\n      }));\n      toast.error('Failed to sync sources');\n      throw error;\n    }\n  },\n\n  setSearchQuery: (query: string) => {\n    set({ searchQuery: query });\n  },\n\n  setFilter: (filter: Partial<SourcesState['filter']>) => {\n    set(state => ({\n      filter: { ...state.filter, ...filter },\n    }));\n  },\n\n  selectSource: (source: Source | null) => {\n    set({ currentSource: source });\n  },\n\n  reset: () => {\n    set({\n      sources: [],\n      currentSource: null,\n      loading: false,\n      error: null,\n      searchQuery: '',\n      filter: {\n        status: 'all',\n        type: 'all',\n        sortBy: 'updated_at',\n        sortOrder: 'desc',\n      },\n      syncStatus: {\n        syncing: false,\n      },\n    });\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { UserProfileStore, UserProfile } from '@/types';\n\n// CustomGPT.ai API Response format\ninterface CustomGPTResponse<T> {\n  status: 'success' | 'error';\n  data: T;\n}\n\nexport const useProfileStore = create<UserProfileStore>()(\n  persist(\n    (set, get) => ({\n      // Initial State\n      profile: null,\n      loading: false,\n      error: null,\n\n      // Profile Management - GET /api/v1/user\n      fetchProfile: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.getUserProfile();\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n          } else {\n            throw new Error('Failed to fetch profile');\n          }\n        } catch (error: any) {\n          console.error('Failed to fetch profile:', error);\n          \n          let errorMessage = 'Failed to fetch profile';\n          \n          if (error.status === 401) {\n            const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : null;\n            const isDemoMode = deploymentMode === 'demo';\n            if (isDemoMode) {\n              errorMessage = 'API key authentication failed. Please check your API key.';\n              toast.error('Authentication failed. Please check your API key in demo settings.');\n            } else {\n              errorMessage = 'Authentication required. Please check your API key configuration.';\n              toast.error('Authentication failed. Please check your API key configuration.');\n            }\n          } else if (error.status === 500) {\n            errorMessage = 'Server error occurred. Please try again later.';\n            toast.error('Server error. Please try again later.');\n          } else {\n            toast.error('Failed to load profile');\n          }\n          \n          set({ \n            error: errorMessage,\n            loading: false \n          });\n        }\n      },\n\n      // Profile Update - POST /api/v1/user (multipart/form-data)\n      updateProfile: async (name: string, profilePhoto?: File) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Create FormData for multipart request\n          const formData = new FormData();\n          formData.append('name', name);\n          \n          if (profilePhoto) {\n            formData.append('profile_photo', profilePhoto);\n          }\n          \n          const response = await client.updateUserProfile(formData);\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n            toast.success('Profile updated successfully');\n          } else {\n            throw new Error('Failed to update profile');\n          }\n        } catch (error: any) {\n          console.error('Failed to update profile:', error);\n          \n          let errorMessage = 'Failed to update profile';\n          \n          if (error.status === 401) {\n            const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : null;\n            const isDemoMode = deploymentMode === 'demo';\n            if (isDemoMode) {\n              errorMessage = 'API key authentication failed. Please check your API key.';\n              toast.error('Authentication failed. Please check your API key in demo settings.');\n            } else {\n              errorMessage = 'Authentication required. Please check your API key configuration.';\n              toast.error('Authentication failed. Please check your API key configuration.');\n            }\n          } else if (error.status === 422 || error.status === 400) {\n            // Handle validation errors\n            if (error.data?.data?.errors) {\n              const errors = error.data.data.errors;\n              if (errors.profile_photo && Array.isArray(errors.profile_photo)) {\n                errorMessage = errors.profile_photo[0];\n                toast.error(errorMessage);\n              } else {\n                // Handle other validation errors\n                const firstError = Object.values(errors).flat()[0] as string;\n                errorMessage = firstError || 'Validation error occurred';\n                toast.error(errorMessage);\n              }\n            } else {\n              errorMessage = error.message || 'Validation error occurred';\n              toast.error(errorMessage);\n            }\n          } else if (error.status === 500) {\n            errorMessage = 'Server error occurred. Please try again later.';\n            toast.error('Server error. Please try again later.');\n          } else {\n            errorMessage = error.message || 'Failed to update profile';\n            toast.error(errorMessage);\n          }\n          \n          set({ \n            error: errorMessage,\n            loading: false \n          });\n        }\n      },\n\n      // Utility\n      reset: () => {\n        set({\n          profile: null,\n          loading: false,\n          error: null,\n        });\n      },\n    }),\n    {\n      name: 'profile-store',\n      partialize: (state) => ({\n        profile: state.profile,\n      }),\n    }\n  )\n);","import { create } from 'zustand';\nimport { toast } from 'sonner';\nimport { getClient } from '@/lib/api/client';\nimport type { APIResponse, AgentStats } from '@/types';\n\nexport interface ProjectSettings {\n  // Appearance\n  chatbot_avatar?: string;\n  chatbot_background_type?: 'image' | 'color';\n  chatbot_background?: string;\n  chatbot_background_color?: string;\n  chatbot_color?: string;\n  chatbot_toolbar_color?: string;\n  chatbot_title?: string;\n  chatbot_title_color?: string;\n  user_avatar?: string;\n  spotlight_avatar_enabled?: boolean;\n  spotlight_avatar?: string;\n  spotlight_avatar_shape?: 'rectangle' | 'circle' | 'rounded' | 'square';\n  spotlight_avatar_type?: 'default' | 'animated' | '3d' | 'custom';\n  user_avatar_orientation?: 'agent-left-user-right' | 'agent-right-user-left' | 'both-left' | 'both-right';\n  \n  // Messages & Behavior\n  default_prompt?: string;\n  example_questions?: string[];\n  persona_instructions?: string;\n  response_source?: 'default' | 'own_content' | 'openai_content';\n  chatbot_model?: string;\n  custom_persona?: string;\n  agent_capability?: 'fastest-responses' | 'optimal-choice' | 'advanced-reasoning' | 'complex-tasks';\n  chatbot_msg_lang?: string;\n  input_field_addendum?: string;\n  \n  // Messages\n  hang_in_there_msg?: string;\n  chatbot_siesta_msg?: string;\n  no_answer_message?: string;\n  ending_message?: string;\n  try_asking_questions_msg?: string;\n  view_more_msg?: string;\n  view_less_msg?: string;\n  \n  // Citations\n  enable_citations?: number;\n  citations_view_type?: 'user' | 'show' | 'hide';\n  citations_answer_source_label_msg?: string;\n  citations_sources_label_msg?: string;\n  image_citation_display?: 'default' | 'inline' | 'none';\n  enable_inline_citations_api?: boolean;\n  hide_sources_from_responses?: boolean;\n  \n  // Features\n  enable_feedbacks?: boolean;\n  is_loading_indicator_enabled?: boolean;\n  remove_branding?: boolean;\n  private_deployment?: boolean;\n  enable_recaptcha_for_public_chatbots?: boolean;\n  is_selling_enabled?: boolean;\n  license_slug?: boolean;\n  selling_url?: string;\n  can_share_conversation?: boolean;\n  can_export_conversation?: boolean;\n  conversation_time_window?: boolean;\n  conversation_retention_period?: 'day' | 'week' | 'month' | 'quarter' | 'year' | 'custom';\n  conversation_retention_days?: number;\n  enable_agent_knowledge_base_awareness?: boolean;\n  markdown_enabled?: boolean;\n}\n\nexport interface ProjectPlugin {\n  id: string;\n  name: string;\n  enabled: boolean;\n  description?: string;\n  category?: string;\n  settings?: Record<string, any>;\n}\n\n// Using AgentStats from the API instead of custom ProjectStats\nexport type ProjectStats = AgentStats;\n\nexport interface ProjectSettingsStore {\n  // Settings\n  settings: ProjectSettings | null;\n  settingsLoading: boolean;\n  settingsError: string | null;\n\n  // Plugins\n  plugins: ProjectPlugin[];\n  pluginsLoading: boolean;\n  pluginsError: string | null;\n\n  // Stats\n  stats: ProjectStats | null;\n  statsLoading: boolean;\n  statsError: string | null;\n\n  // Actions\n  fetchSettings: (projectId: number) => Promise<void>;\n  updateSettings: (projectId: number, settings: Partial<ProjectSettings>) => Promise<void>;\n  fetchPlugins: (projectId: number) => Promise<void>;\n  updatePlugin: (projectId: number, pluginId: string, enabled: boolean) => Promise<void>;\n  fetchStats: (projectId: number) => Promise<void>;\n  reset: () => void;\n}\n\n// Track active requests to prevent duplicates\nconst activeRequests = new Map<string, boolean>();\n\nexport const useProjectSettingsStore = create<ProjectSettingsStore>((set, get) => ({\n  // Initial state\n  settings: null,\n  settingsLoading: false,\n  settingsError: null,\n  plugins: [],\n  pluginsLoading: false,\n  pluginsError: null,\n  stats: null,\n  statsLoading: false,\n  statsError: null,\n\n  // Fetch project settings\n  fetchSettings: async (projectId: number) => {\n    const requestKey = `settings-${projectId}`;\n    \n    // Prevent duplicate requests\n    if (activeRequests.get(requestKey)) {\n      return;\n    }\n    \n    activeRequests.set(requestKey, true);\n    \n    // Clear previous errors and set loading state\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      const response = await getClient().getAgentSettings(projectId);\n\n      // The API client returns the data directly, not wrapped with status\n      if (response && response.data) {\n        set({ \n          settings: response.data, \n          settingsLoading: false,\n          settingsError: null // Explicitly clear error on success\n        });\n      } else if (response) {\n        // If response exists but doesn't have data property, it might be the direct data\n        set({ \n          settings: response as any, \n          settingsLoading: false,\n          settingsError: null\n        });\n      } else {\n        throw new Error('Failed to fetch project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      // Only show toast for actual errors, not for expected scenarios\n      if (error instanceof Error && !error.message.includes('404')) {\n        toast.error(errorMessage);\n      }\n    } finally {\n      activeRequests.delete(requestKey);\n    }\n  },\n\n  // Update project settings\n  updateSettings: async (projectId: number, settingsUpdate: Partial<ProjectSettings>) => {\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      // Create FormData for multipart/form-data\n      const formData = new FormData();\n      \n      Object.entries(settingsUpdate).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          if (key === 'example_questions' && Array.isArray(value)) {\n            // Handle array fields - use bracket notation without index\n            value.forEach((question) => {\n              formData.append(`example_questions[]`, question);\n            });\n          } else if (value instanceof File) {\n            // Handle file uploads\n            formData.append(key, value);\n          } else {\n            // Handle regular fields\n            formData.append(key, String(value));\n          }\n        }\n      });\n\n      const response = await getClient().updateAgentSettings(projectId, formData);\n\n      // The API client returns the data directly\n      if (response) {\n        // Instead of merging, re-fetch the settings to ensure we have the latest data\n        set({ settingsLoading: false });\n        \n        // Re-fetch settings to get the updated data from server\n        await get().fetchSettings(projectId);\n        \n        toast.success('Project settings updated successfully');\n      } else {\n        throw new Error('Failed to update project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project plugins\n  fetchPlugins: async (projectId: number) => {\n    set({ pluginsLoading: true, pluginsError: null });\n\n    try {\n      const response = await getClient().getProjectPlugins(projectId);\n\n      // The API client returns the data directly\n      if (response) {\n        const pluginsData = response.data || response;\n        set({ \n          plugins: Array.isArray(pluginsData) ? pluginsData : [], \n          pluginsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project plugins');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project plugins';\n      set({ \n        pluginsError: errorMessage, \n        pluginsLoading: false,\n        plugins: [] // Fallback to empty array\n      });\n      console.warn('Plugins not available:', errorMessage);\n    }\n  },\n\n  // Update project plugin\n  updatePlugin: async (projectId: number, pluginId: string, enabled: boolean) => {\n    try {\n      // This endpoint might not exist yet, so we'll implement it as a placeholder\n      const response = await getClient().updateProjectPlugin(projectId, pluginId, { enabled });\n\n      // The API client returns the data directly\n      if (response) {\n        // Update plugin in store\n        const plugins = get().plugins.map(plugin =>\n          plugin.id === pluginId ? { ...plugin, enabled } : plugin\n        );\n        \n        set({ plugins });\n        toast.success(`Plugin ${enabled ? 'enabled' : 'disabled'} successfully`);\n      } else {\n        throw new Error('Failed to update plugin');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update plugin';\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project stats\n  fetchStats: async (projectId: number) => {\n    set({ statsLoading: true, statsError: null });\n\n    try {\n      const response = await getClient().getAgentStats(projectId);\n\n      // The API client returns the data directly\n      if (response) {\n        const statsData = response.data || response;\n        set({ \n          stats: statsData, \n          statsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project stats');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project stats';\n      set({ \n        statsError: errorMessage, \n        statsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Reset store\n  reset: () => {\n    set({\n      settings: null,\n      settingsLoading: false,\n      settingsError: null,\n      plugins: [],\n      pluginsLoading: false,\n      pluginsError: null,\n      stats: null,\n      statsLoading: false,\n      statsError: null,\n    });\n  },\n}));","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport type { AgentLicense } from '@/types';\n\ninterface LicenseStore {\n  licenses: AgentLicense[];\n  loading: boolean;\n  error: string | null;\n  \n  fetchLicenses: (projectId: number) => Promise<void>;\n  createLicense: (projectId: number, name: string) => Promise<AgentLicense>;\n  updateLicense: (projectId: number, licenseId: string, name: string) => Promise<void>;\n  deleteLicense: (projectId: number, licenseId: string) => Promise<void>;\n  clearError: () => void;\n}\n\nexport const useLicenseStore = create<LicenseStore>((set, get) => ({\n  licenses: [],\n  loading: false,\n  error: null,\n\n  fetchLicenses: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getLicenses(projectId);\n      \n      logger.info('LICENSES', 'API Response', {\n        projectId,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataType: Array.isArray(response?.data) ? 'array' : typeof response?.data,\n        dataLength: Array.isArray(response?.data) ? response.data.length : 0\n      });\n      \n      // Handle response format based on API documentation\n      const licenses = Array.isArray(response.data) ? response.data : [];\n      \n      logger.info('LICENSES', 'Processed licenses', {\n        count: licenses.length,\n        licenses: licenses.map((l: any) => ({ \n          name: l.name, \n          key: l.key?.substring(0, 8) + '...', \n          project_id: l.project_id \n        }))\n      });\n      \n      set({ \n        licenses,\n        loading: false \n      });\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to fetch licenses', {\n        projectId,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        responseText: error?.responseText || 'No response text'\n      });\n      \n      // Handle JSON parsing errors specifically\n      let errorMessage = 'Failed to fetch licenses';\n      if (error?.status === 403 || error?.data?.message?.includes('not allowed')) {\n        // This is expected for some projects - don't show an error\n        errorMessage = '';\n        set({ \n          error: null,\n          loading: false,\n          licenses: []\n        });\n        throw error; // Still throw to handle in component\n      } else if (error?.message?.includes('Unexpected token')) {\n        errorMessage = 'API returned invalid response format. This may be a server configuration issue.';\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      \n      if (errorMessage) {\n        set({ \n          error: errorMessage,\n          loading: false,\n          licenses: []\n        });\n      }\n    }\n  },\n\n  createLicense: async (projectId: number, name: string) => {\n    set({ loading: true, error: null });\n    \n    logger.info('LICENSES', 'Creating license', {\n      projectId,\n      name\n    });\n    \n    try {\n      const client = getClient();\n      const response = await client.createLicense(projectId, { name });\n      \n      logger.info('LICENSES', 'Create license API response', {\n        projectId,\n        name,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataStructure: response?.data ? Object.keys(response.data) : [],\n        licenseKey: response.data?.licenseKey?.substring(0, 8) + '...'\n      });\n      \n      // Handle response format based on API documentation\n      // Response contains { license: {...}, licenseKey: \"...\" }\n      const newLicense = response.data?.license || response.data;\n      \n      if (newLicense) {\n        logger.info('LICENSES', 'New license created', {\n          licenseName: newLicense.name,\n          licenseKey: newLicense.key?.substring(0, 8) + '...',\n          project_id: newLicense.project_id\n        });\n        \n        set(state => ({\n          licenses: [...state.licenses, newLicense],\n          loading: false\n        }));\n      }\n      \n      return newLicense;\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to create license', {\n        projectId,\n        name,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        responseText: error?.responseText || 'No response text'\n      });\n      \n      // Handle JSON parsing errors specifically\n      let errorMessage = 'Failed to create license';\n      if (error?.message?.includes('Unexpected token')) {\n        errorMessage = 'API returned invalid response format. This may be a server configuration issue.';\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  updateLicense: async (projectId: number, licenseId: string, name: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.updateLicense(projectId, licenseId, { name });\n      \n      logger.info('LICENSES', 'Updated license', {\n        projectId,\n        licenseId,\n        name\n      });\n      \n      // Handle response format based on API documentation\n      const updatedLicense = (response as any).license || response.data;\n      \n      if (updatedLicense) {\n        set(state => ({\n          licenses: state.licenses.map(license => \n            license.key === licenseId ? { ...license, name, updated_at: new Date().toISOString() } : license\n          ),\n          loading: false\n        }));\n      }\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to update license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to update license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  deleteLicense: async (projectId: number, licenseId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteLicense(projectId, licenseId);\n      \n      logger.info('LICENSES', 'Deleted license', {\n        projectId,\n        licenseId\n      });\n      \n      set(state => ({\n        licenses: state.licenses.filter(license => license.key !== licenseId),\n        loading: false\n      }));\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to delete license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to delete license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  clearError: () => {\n    set({ error: null });\n  }\n}));","/**\n * Store Index - Central State Management\n * \n * This file exports all Zustand stores used in the application.\n * Each store manages a specific domain of the application state.\n * \n * Architecture:\n * - Uses Zustand for lightweight state management\n * - Each store is independent but can interact via imports\n * - Stores handle both state and async operations (API calls)\n * - All stores use TypeScript for type safety\n * \n * Store Overview:\n * - config: API keys, base URLs, theme settings\n * - agents: Agent/chatbot management and CRUD operations\n * - conversations: Chat session management\n * - messages: Message handling, streaming, and history\n * - ui: UI preferences and layout state\n * - analytics: Usage tracking and metrics\n * - pages: Agent knowledge base pages\n * - sources: Citation sources and references\n * - profile: User profile and limits\n * - project-settings: Agent-specific settings\n * - licenses: License key management\n * \n * Features:\n * - Centralized state management with TypeScript support\n * - Domain-specific stores for organized architecture\n * - Automated error handling and recovery\n * - Cross-store communication and data consistency\n */\n\n// Export all stores from a single entry point\nexport { useConfigStore } from './config';\nexport { useAgentStore } from './agents';\nexport { useConversationStore } from './conversations';\nexport { useMessageStore } from './messages';\nexport { useUIStore } from './ui';\nexport { useAnalyticsStore } from './analytics';\nexport { usePageStore } from './pages';\nexport { useSourceStore } from './sources';\nexport { useProfileStore } from './profile';\nexport { useProjectSettingsStore } from './project-settings';\nexport { useLicenseStore } from './licenses';\n\n/**\n * Store initialization helper\n * \n * Currently, Zustand stores auto-initialize on first access.\n * This function is provided for future use cases where\n * manual initialization might be needed (e.g., SSR, testing).\n * \n * @example\n * // In your app initialization\n * initializeStores();\n */\nexport function initializeStores() {\n  // Stores will auto-initialize when first accessed\n  // This function can be used for any additional setup if needed\n}\n\n/**\n * Store cleanup helper\n * \n * Zustand automatically handles cleanup when components unmount.\n * This function is provided for manual cleanup scenarios\n * (e.g., user logout, testing teardown).\n * \n * To implement cleanup:\n * 1. Add a reset() method to each store\n * 2. Call each store's reset() method here\n * \n * @example\n * // On user logout\n * cleanupStores();\n */\nexport function cleanupStores() {\n  // Add any cleanup logic if needed\n  // Currently, Zustand handles cleanup automatically\n}","/**\n * Performance Optimizations for Voice Themes\n * \n * Advanced performance optimizations including LOD system, render culling,\n * batch rendering, and memory management for maintaining 30+ FPS on all devices.\n */\n\nimport { PerformanceMetrics, DeviceCapabilities } from '../utils/performance';\n\nexport interface LODSettings {\n  level: 0 | 1 | 2; // 0 = high, 1 = medium, 2 = low\n  particleReduction: number; // 0-1, percentage reduction\n  effectsDisabled: boolean;\n  glowDisabled: boolean;\n  simplifiedRendering: boolean;\n  skipFrames: number; // Skip every N frames for heavy operations\n}\n\nexport interface CullingBounds {\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n  near?: number;\n  far?: number;\n}\n\nexport interface RenderBatch {\n  color: string;\n  particles: Array<{ x: number; y: number; size: number; alpha: number }>;\n  glowEnabled: boolean;\n  effectsEnabled: boolean;\n}\n\n/**\n * Level-of-Detail Manager for Performance Scaling\n */\nexport class LODManager {\n  private currentLOD: LODSettings;\n  private frameCount = 0;\n  private lastPerformanceCheck = 0;\n  private performanceHistory: number[] = [];\n  \n  private lodProfiles: Record<number, LODSettings> = {\n    0: { // High quality\n      level: 0,\n      particleReduction: 0,\n      effectsDisabled: false,\n      glowDisabled: false,\n      simplifiedRendering: false,\n      skipFrames: 0\n    },\n    1: { // Medium quality\n      level: 1,\n      particleReduction: 0.3,\n      effectsDisabled: false,\n      glowDisabled: true,\n      simplifiedRendering: false,\n      skipFrames: 1\n    },\n    2: { // Low quality\n      level: 2,\n      particleReduction: 0.6,\n      effectsDisabled: true,\n      glowDisabled: true,\n      simplifiedRendering: true,\n      skipFrames: 2\n    }\n  };\n\n  constructor(initialLOD = 1) {\n    this.currentLOD = this.lodProfiles[initialLOD];\n  }\n\n  /**\n   * Update LOD based on performance metrics\n   */\n  updateLOD(metrics: PerformanceMetrics): LODSettings {\n    this.frameCount++;\n    \n    // Check performance every 30 frames (0.5 seconds at 60fps)\n    if (this.frameCount - this.lastPerformanceCheck >= 30) {\n      this.performanceHistory.push(metrics.fps);\n      \n      // Keep only last 5 measurements (2.5 seconds)\n      if (this.performanceHistory.length > 5) {\n        this.performanceHistory.shift();\n      }\n      \n      const avgFPS = this.performanceHistory.reduce((sum, fps) => sum + fps, 0) / this.performanceHistory.length;\n      this.adjustLODBasedOnFPS(avgFPS);\n      \n      this.lastPerformanceCheck = this.frameCount;\n    }\n    \n    return this.currentLOD;\n  }\n\n  private adjustLODBasedOnFPS(avgFPS: number): void {\n    const targetFPS = 30;\n    \n    if (avgFPS < targetFPS * 0.7 && this.currentLOD.level < 2) {\n      // Performance is poor, reduce quality\n      this.currentLOD = this.lodProfiles[Math.min(2, this.currentLOD.level + 1)];\n      console.log(`[LOD] Reducing quality to level ${this.currentLOD.level} (FPS: ${avgFPS.toFixed(1)})`);\n    } else if (avgFPS > targetFPS * 1.2 && this.currentLOD.level > 0) {\n      // Performance is good, can increase quality\n      this.currentLOD = this.lodProfiles[Math.max(0, this.currentLOD.level - 1)];\n      console.log(`[LOD] Increasing quality to level ${this.currentLOD.level} (FPS: ${avgFPS.toFixed(1)})`);\n    }\n  }\n\n  getCurrentLOD(): LODSettings {\n    return this.currentLOD;\n  }\n\n  shouldSkipFrame(): boolean {\n    return this.currentLOD.skipFrames > 0 && \n           this.frameCount % (this.currentLOD.skipFrames + 1) !== 0;\n  }\n}\n\n/**\n * Frustum Culling for Off-screen Particle Elimination\n */\nexport class FrustumCuller {\n  private bounds!: CullingBounds;\n  private margin = 50; // Extra margin to prevent pop-in\n  \n  constructor(width: number, height: number, margin = 50) {\n    this.margin = margin;\n    this.updateBounds(width, height);\n  }\n\n  updateBounds(width: number, height: number): void {\n    this.bounds = {\n      left: -this.margin,\n      right: width + this.margin,\n      top: -this.margin,\n      bottom: height + this.margin,\n      near: -200,\n      far: 200\n    };\n  }\n\n  /**\n   * Check if a particle is within visible bounds\n   */\n  isVisible(x: number, y: number, z = 0, size = 0): boolean {\n    return (\n      x + size >= this.bounds.left &&\n      x - size <= this.bounds.right &&\n      y + size >= this.bounds.top &&\n      y - size <= this.bounds.bottom &&\n      (this.bounds.near === undefined || z >= this.bounds.near) &&\n      (this.bounds.far === undefined || z <= this.bounds.far)\n    );\n  }\n\n  /**\n   * Filter array of particles to only visible ones\n   */\n  cullParticles<T extends { x: number; y: number; z?: number; size?: number }>(particles: T[]): T[] {\n    return particles.filter(particle => \n      this.isVisible(\n        particle.x, \n        particle.y, \n        particle.z || 0, \n        particle.size || 0\n      )\n    );\n  }\n\n  /**\n   * Get culling statistics\n   */\n  getCullingStats<T extends { x: number; y: number }>(particles: T[]): {\n    total: number;\n    visible: number;\n    culled: number;\n    cullingRatio: number;\n  } {\n    const visible = this.cullParticles(particles);\n    const culled = particles.length - visible.length;\n    \n    return {\n      total: particles.length,\n      visible: visible.length,\n      culled,\n      cullingRatio: particles.length > 0 ? culled / particles.length : 0\n    };\n  }\n}\n\n/**\n * Batch Renderer for Optimized Drawing\n */\nexport class BatchRenderer {\n  private batches: Map<string, RenderBatch> = new Map();\n  private maxBatchSize = 1000;\n  \n  /**\n   * Add particle to appropriate batch\n   */\n  addToBatch(\n    color: string, \n    x: number, \n    y: number, \n    size: number, \n    alpha: number,\n    glowEnabled = false,\n    effectsEnabled = false\n  ): void {\n    const batchKey = `${color}_${glowEnabled}_${effectsEnabled}`;\n    \n    if (!this.batches.has(batchKey)) {\n      this.batches.set(batchKey, {\n        color,\n        particles: [],\n        glowEnabled,\n        effectsEnabled\n      });\n    }\n    \n    const batch = this.batches.get(batchKey)!;\n    if (batch.particles.length < this.maxBatchSize) {\n      batch.particles.push({ x, y, size, alpha });\n    }\n  }\n\n  /**\n   * Render all batches efficiently\n   */\n  renderBatches(context: CanvasRenderingContext2D, lodSettings: LODSettings): void {\n    Array.from(this.batches.entries()).forEach(([batchKey, batch]) => {\n      if (batch.particles.length === 0) return;\n      \n      context.save();\n      context.fillStyle = batch.color;\n      \n      // Skip effects if disabled by LOD\n      const shouldRenderEffects = batch.effectsEnabled && !lodSettings.effectsDisabled;\n      const shouldRenderGlow = batch.glowEnabled && !lodSettings.glowDisabled;\n      \n      if (lodSettings.simplifiedRendering) {\n        // Simplified rendering: draw all particles as simple circles\n        this.renderSimplifiedBatch(context, batch);\n      } else {\n        // Full rendering: individual particles with effects\n        this.renderFullBatch(context, batch, shouldRenderEffects, shouldRenderGlow);\n      }\n      \n      context.restore();\n    });\n  }\n\n  private renderSimplifiedBatch(context: CanvasRenderingContext2D, batch: RenderBatch): void {\n    context.beginPath();\n    batch.particles.forEach(particle => {\n      context.globalAlpha = particle.alpha;\n      context.moveTo(particle.x + particle.size, particle.y);\n      context.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n    });\n    context.fill();\n  }\n\n  private renderFullBatch(\n    context: CanvasRenderingContext2D, \n    batch: RenderBatch,\n    renderEffects: boolean,\n    renderGlow: boolean\n  ): void {\n    batch.particles.forEach(particle => {\n      context.save();\n      context.globalAlpha = particle.alpha;\n      \n      // Render glow first if enabled\n      if (renderGlow && particle.alpha > 0.5) {\n        const glowGradient = context.createRadialGradient(\n          particle.x, particle.y, 0,\n          particle.x, particle.y, particle.size * 3\n        );\n        glowGradient.addColorStop(0, batch.color);\n        glowGradient.addColorStop(1, 'transparent');\n        \n        context.fillStyle = glowGradient;\n        context.globalAlpha = particle.alpha * 0.3;\n        context.beginPath();\n        context.arc(particle.x, particle.y, particle.size * 3, 0, Math.PI * 2);\n        context.fill();\n      }\n      \n      // Render main particle\n      context.globalAlpha = particle.alpha;\n      context.fillStyle = batch.color;\n      context.beginPath();\n      context.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n      context.fill();\n      \n      context.restore();\n    });\n  }\n\n  /**\n   * Clear all batches\n   */\n  clearBatches(): void {\n    Array.from(this.batches.values()).forEach(batch => {\n      batch.particles = [];\n    });\n  }\n\n  /**\n   * Get batch statistics\n   */\n  getBatchStats(): {\n    batchCount: number;\n    totalParticles: number;\n    avgBatchSize: number;\n    largestBatch: number;\n  } {\n    const batchCount = this.batches.size;\n    let totalParticles = 0;\n    let largestBatch = 0;\n    \n    Array.from(this.batches.values()).forEach(batch => {\n      totalParticles += batch.particles.length;\n      largestBatch = Math.max(largestBatch, batch.particles.length);\n    });\n    \n    return {\n      batchCount,\n      totalParticles,\n      avgBatchSize: batchCount > 0 ? totalParticles / batchCount : 0,\n      largestBatch\n    };\n  }\n}\n\n/**\n * Memory Usage Monitor and Optimizer\n */\nexport class MemoryOptimizer {\n  private lastGCTime = 0;\n  private gcInterval = 10000; // 10 seconds\n  private memoryPressureThreshold = 0.85; // 85% of heap limit\n  \n  /**\n   * Check memory usage and trigger cleanup if needed\n   */\n  checkMemoryPressure(): { pressure: number; shouldCleanup: boolean } {\n    const currentTime = performance.now();\n    let pressure = 0;\n    let shouldCleanup = false;\n    \n    // Check if memory API is available\n    if ('memory' in (performance as any)) {\n      const memInfo = (performance as any).memory;\n      pressure = memInfo.usedJSHeapSize / memInfo.jsHeapSizeLimit;\n      shouldCleanup = pressure > this.memoryPressureThreshold;\n    }\n    \n    // Force cleanup based on time interval\n    if (currentTime - this.lastGCTime > this.gcInterval) {\n      shouldCleanup = true;\n      this.lastGCTime = currentTime;\n    }\n    \n    return { pressure, shouldCleanup };\n  }\n\n  /**\n   * Suggest memory optimization actions\n   */\n  getOptimizationSuggestions(pressure: number): {\n    reduceParticles: boolean;\n    clearCaches: boolean;\n    disableEffects: boolean;\n    simplifyRendering: boolean;\n  } {\n    return {\n      reduceParticles: pressure > 0.7,\n      clearCaches: pressure > 0.8,\n      disableEffects: pressure > 0.75,\n      simplifyRendering: pressure > 0.85\n    };\n  }\n}\n\n/**\n * Animation Frame Controller for Battery Optimization\n */\nexport class AnimationController {\n  private isVisible = true;\n  private targetFPS = 30;\n  private actualInterval = 1000 / 30; // ~33ms\n  private lastFrameTime = 0;\n  private frameBudget = 16.67; // ~60fps budget, but we target lower\n  \n  constructor(targetFPS = 30) {\n    this.setTargetFPS(targetFPS);\n    this.setupVisibilityHandling();\n  }\n\n  /**\n   * Set target FPS and update timing\n   */\n  setTargetFPS(fps: number): void {\n    this.targetFPS = Math.max(10, Math.min(60, fps)); // Clamp between 10-60\n    this.actualInterval = 1000 / this.targetFPS;\n  }\n\n  /**\n   * Check if frame should be rendered\n   */\n  shouldRenderFrame(): boolean {\n    if (!this.isVisible) return false;\n    \n    const currentTime = performance.now();\n    const deltaTime = currentTime - this.lastFrameTime;\n    \n    if (deltaTime >= this.actualInterval) {\n      this.lastFrameTime = currentTime;\n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * Get frame timing info\n   */\n  getFrameTiming(): {\n    targetFPS: number;\n    interval: number;\n    isVisible: boolean;\n    shouldThrottle: boolean;\n  } {\n    return {\n      targetFPS: this.targetFPS,\n      interval: this.actualInterval,\n      isVisible: this.isVisible,\n      shouldThrottle: !this.isVisible || this.targetFPS < 30\n    };\n  }\n\n  private setupVisibilityHandling(): void {\n    // Handle page visibility for battery optimization\n    document.addEventListener('visibilitychange', () => {\n      this.isVisible = !document.hidden;\n      \n      // Reduce FPS when not visible\n      if (!this.isVisible) {\n        this.setTargetFPS(10); // Very low FPS when hidden\n      } else {\n        this.setTargetFPS(30); // Normal FPS when visible\n      }\n    });\n    \n    // Handle focus/blur for additional optimization\n    window.addEventListener('focus', () => {\n      this.isVisible = true;\n      this.setTargetFPS(30);\n    });\n    \n    window.addEventListener('blur', () => {\n      this.setTargetFPS(20); // Reduced but not hidden\n    });\n  }\n}\n\n/**\n * Complete Performance Optimization Suite\n */\nexport class ThemePerformanceManager {\n  private lodManager: LODManager;\n  private culler: FrustumCuller;\n  private batchRenderer: BatchRenderer;\n  private memoryOptimizer: MemoryOptimizer;\n  private animationController: AnimationController;\n  \n  constructor(canvasWidth: number, canvasHeight: number) {\n    this.lodManager = new LODManager();\n    this.culler = new FrustumCuller(canvasWidth, canvasHeight);\n    this.batchRenderer = new BatchRenderer();\n    this.memoryOptimizer = new MemoryOptimizer();\n    this.animationController = new AnimationController();\n  }\n\n  /**\n   * Update all performance systems\n   */\n  update(metrics: PerformanceMetrics, canvasWidth?: number, canvasHeight?: number): {\n    lodSettings: LODSettings;\n    shouldRender: boolean;\n    memoryPressure: number;\n    optimizationActive: boolean;\n  } {\n    // Update LOD based on performance\n    const lodSettings = this.lodManager.updateLOD(metrics);\n    \n    // Update culling bounds if canvas size changed\n    if (canvasWidth && canvasHeight) {\n      this.culler.updateBounds(canvasWidth, canvasHeight);\n    }\n    \n    // Check memory pressure\n    const { pressure, shouldCleanup } = this.memoryOptimizer.checkMemoryPressure();\n    \n    // Check if we should render this frame\n    const shouldRender = this.animationController.shouldRenderFrame() && !this.lodManager.shouldSkipFrame();\n    \n    return {\n      lodSettings,\n      shouldRender,\n      memoryPressure: pressure,\n      optimizationActive: lodSettings.level > 0 || pressure > 0.7 || !shouldRender\n    };\n  }\n\n  /**\n   * Get all performance managers for direct access\n   */\n  getManagers() {\n    return {\n      lod: this.lodManager,\n      culler: this.culler,\n      batchRenderer: this.batchRenderer,\n      memory: this.memoryOptimizer,\n      animation: this.animationController\n    };\n  }\n\n  /**\n   * Get comprehensive performance report\n   */\n  getPerformanceReport(): {\n    lod: LODSettings;\n    culling: any;\n    batching: any;\n    memory: { pressure: number; shouldCleanup: boolean };\n    animation: any;\n  } {\n    const { pressure, shouldCleanup } = this.memoryOptimizer.checkMemoryPressure();\n    \n    return {\n      lod: this.lodManager.getCurrentLOD(),\n      culling: {}, // Will be populated when particles are processed\n      batching: this.batchRenderer.getBatchStats(),\n      memory: { pressure, shouldCleanup },\n      animation: this.animationController.getFrameTiming()\n    };\n  }\n}","/**\n * Base Theme Class\n * \n * Provides common functionality and structure for all voice themes.\n * Themes can extend this class to inherit shared behavior.\n */\n\nimport { IVoiceTheme, VoiceState, PerformanceSettings } from './IVoiceTheme';\nimport { PerformanceMonitor, DeviceCapabilityDetector } from '../utils/performance';\nimport { ThemePerformanceManager, LODSettings } from './PerformanceOptimizations';\nimport { lerp, clamp } from '../utils/math';\n\nexport abstract class BaseTheme implements IVoiceTheme {\n  // Abstract properties that must be implemented\n  abstract readonly id: string;\n  abstract readonly name: string;\n  abstract readonly description: string;\n  abstract readonly category: 'particle' | 'geometric' | 'advanced' | 'artistic';\n  abstract readonly performanceProfile: 'light' | 'medium' | 'heavy';\n\n  // Common state management\n  protected currentState: VoiceState = VoiceState.IDLE;\n  protected targetState: VoiceState = VoiceState.IDLE;\n  protected stateTransition = 0;\n  protected stateTransitionSpeed = 0.1;\n\n  // Mouse/touch interaction\n  protected mouseX = 0;\n  protected mouseY = 0;\n  protected normalizedMouseX = 0; // -1 to 1\n  protected normalizedMouseY = 0; // -1 to 1\n  protected mouseInfluence = 0;\n  protected targetMouseInfluence = 0;\n  protected isHovering = false;\n\n  // Canvas context and dimensions\n  protected context: CanvasRenderingContext2D | null = null;\n  protected canvasWidth = 0;\n  protected canvasHeight = 0;\n  protected centerX = 0;\n  protected centerY = 0;\n\n  // Performance monitoring\n  protected performanceMonitor: PerformanceMonitor;\n  protected performanceManager: ThemePerformanceManager | null = null;\n  protected performanceSettings: PerformanceSettings;\n  protected currentLODSettings: LODSettings | null = null;\n  protected lastFrameTime = 0;\n\n  // Animation timing\n  protected animationTime = 0;\n  protected deltaTimeAccumulator = 0;\n\n  constructor() {\n    this.performanceMonitor = new PerformanceMonitor();\n    \n    // Default performance settings (will be overridden by capability detection)\n    this.performanceSettings = {\n      targetFPS: 30,\n      maxParticles: 100,\n      enableEffects: true,\n      enableGlow: false,\n      qualityLevel: 'medium'\n    };\n\n    this.initializePerformanceCallbacks();\n  }\n\n  /**\n   * Initialize the theme with canvas context and dimensions\n   */\n  init(context: CanvasRenderingContext2D, width: number, height: number): void {\n    this.context = context;\n    this.updateDimensions(width, height);\n    this.initializePerformanceManager();\n    this.setupPerformanceSettings();\n    this.onInit();\n  }\n\n  /**\n   * Update canvas dimensions\n   */\n  protected updateDimensions(width: number, height: number): void {\n    this.canvasWidth = width;\n    this.canvasHeight = height;\n    this.centerX = width / 2;\n    this.centerY = height / 2;\n    \n    // Update performance manager with new dimensions\n    if (this.performanceManager) {\n      this.performanceManager.getManagers().culler.updateBounds(width, height);\n    }\n  }\n\n  /**\n   * Main drawing function called every frame\n   */\n  draw(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void {\n    // Update performance monitoring\n    const metrics = this.performanceMonitor.update();\n    \n    // Update performance manager and check if we should render\n    if (this.performanceManager) {\n      const perfUpdate = this.performanceManager.update(metrics, displayWidth, displayHeight);\n      this.currentLODSettings = perfUpdate.lodSettings;\n      \n      // Skip rendering if performance manager suggests it\n      if (!perfUpdate.shouldRender) {\n        return;\n      }\n    }\n    \n    // Update dimensions if changed\n    if (this.canvasWidth !== displayWidth || this.canvasHeight !== displayHeight) {\n      this.updateDimensions(displayWidth, displayHeight);\n    }\n\n    // Update animation timing\n    this.updateTiming(deltaTime);\n\n    // Update state transitions\n    this.updateStateTransition();\n\n    // Update mouse influence\n    this.updateMouseInfluence();\n\n    // Clear canvas with theme-specific background\n    this.clearCanvas(context, displayWidth, displayHeight);\n\n    // Delegate to theme-specific drawing\n    this.onDraw(context, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n\n    // Draw performance overlay if enabled\n    if (this.shouldShowPerformanceOverlay()) {\n      this.drawPerformanceOverlay(context, metrics);\n    }\n  }\n\n  /**\n   * Handle state changes with smooth transitions\n   */\n  onUserSpeaking(): void {\n    this.setTargetState(VoiceState.USER_SPEAKING);\n    this.onStateChange(VoiceState.USER_SPEAKING);\n  }\n\n  onProcessing(): void {\n    this.setTargetState(VoiceState.PROCESSING);\n    this.onStateChange(VoiceState.PROCESSING);\n  }\n\n  onAiSpeaking(): void {\n    this.setTargetState(VoiceState.AI_SPEAKING);\n    this.onStateChange(VoiceState.AI_SPEAKING);\n  }\n\n  reset(): void {\n    this.setTargetState(VoiceState.IDLE);\n    this.onStateChange(VoiceState.IDLE);\n    this.onReset();\n  }\n\n  /**\n   * Handle mouse/touch position updates\n   */\n  setMousePosition(x: number, y: number, canvasWidth: number, canvasHeight: number): void {\n    this.mouseX = x;\n    this.mouseY = y;\n    this.normalizedMouseX = (x / canvasWidth) * 2 - 1; // -1 to 1\n    this.normalizedMouseY = (y / canvasHeight) * 2 - 1; // -1 to 1\n    this.targetMouseInfluence = this.isHovering ? 1 : 0.3;\n    this.onMouseMove(x, y, this.normalizedMouseX, this.normalizedMouseY);\n  }\n\n  /**\n   * Handle hover state changes\n   */\n  setHovering(hovering: boolean): void {\n    this.isHovering = hovering;\n    this.targetMouseInfluence = hovering ? 1 : 0;\n    this.onHoverChange(hovering);\n  }\n\n  /**\n   * Cleanup resources\n   */\n  dispose(): void {\n    this.onDispose();\n  }\n\n  /**\n   * Get performance metrics\n   */\n  getPerformanceMetrics() {\n    const baseMetrics = this.performanceMonitor.getCurrentMetrics();\n    const themeMetrics = this.getThemeSpecificMetrics();\n    return { ...baseMetrics, ...themeMetrics };\n  }\n\n  // Protected methods for subclasses to override\n\n  /**\n   * Theme-specific initialization\n   */\n  protected onInit(): void {}\n\n  /**\n   * Theme-specific drawing logic\n   */\n  protected abstract onDraw(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number,\n    deltaTime: number\n  ): void;\n\n  /**\n   * Called when state changes\n   */\n  protected onStateChange(newState: VoiceState): void {}\n\n  /**\n   * Called when reset\n   */\n  protected onReset(): void {}\n\n  /**\n   * Called when mouse moves\n   */\n  protected onMouseMove(x: number, y: number, normalizedX: number, normalizedY: number): void {}\n\n  /**\n   * Called when hover state changes\n   */\n  protected onHoverChange(hovering: boolean): void {}\n\n  /**\n   * Called when disposing\n   */\n  protected onDispose(): void {}\n\n  /**\n   * Get theme-specific performance metrics\n   */\n  protected getThemeSpecificMetrics(): Record<string, any> {\n    return {};\n  }\n\n  /**\n   * Clear canvas with theme-specific background\n   */\n  protected clearCanvas(context: CanvasRenderingContext2D, width: number, height: number): void {\n    context.clearRect(0, 0, width, height);\n  }\n\n  // Private helper methods\n\n  private async setupPerformanceSettings(): Promise<void> {\n    try {\n      const detector = DeviceCapabilityDetector.getInstance();\n      const capabilities = await detector.detectCapabilities();\n      \n      // Adjust performance settings based on device capabilities\n      if (capabilities.performanceLevel === 'low' || capabilities.isLowPowerDevice) {\n        this.performanceSettings = {\n          targetFPS: 24,\n          maxParticles: this.getOptimalParticleCount('low'),\n          enableEffects: false,\n          enableGlow: false,\n          qualityLevel: 'low'\n        };\n      } else if (capabilities.performanceLevel === 'medium') {\n        this.performanceSettings = {\n          targetFPS: 30,\n          maxParticles: this.getOptimalParticleCount('medium'),\n          enableEffects: true,\n          enableGlow: false,\n          qualityLevel: 'medium'\n        };\n      } else {\n        this.performanceSettings = {\n          targetFPS: 60,\n          maxParticles: this.getOptimalParticleCount('high'),\n          enableEffects: true,\n          enableGlow: true,\n          qualityLevel: 'high'\n        };\n      }\n    } catch (error) {\n      console.warn('Failed to detect device capabilities, using default settings:', error);\n    }\n  }\n\n  private initializePerformanceManager(): void {\n    this.performanceManager = new ThemePerformanceManager(this.canvasWidth, this.canvasHeight);\n  }\n\n  private getOptimalParticleCount(quality: 'low' | 'medium' | 'high'): number {\n    const baseCount = {\n      light: { low: 30, medium: 80, high: 150 },\n      medium: { low: 50, medium: 120, high: 250 },\n      heavy: { low: 20, medium: 60, high: 120 }\n    };\n\n    return baseCount[this.performanceProfile][quality];\n  }\n\n  private initializePerformanceCallbacks(): void {\n    this.performanceMonitor.setCallbacks({\n      onPerformanceWarning: (metrics) => {\n        console.warn(`[${this.id}] Performance warning:`, metrics);\n        this.adjustPerformanceSettings(0.8);\n      },\n      onPerformanceCritical: (metrics) => {\n        console.error(`[${this.id}] Critical performance:`, metrics);\n        this.adjustPerformanceSettings(0.6);\n      }\n    });\n  }\n\n  private adjustPerformanceSettings(factor: number): void {\n    this.performanceSettings.maxParticles = Math.floor(this.performanceSettings.maxParticles * factor);\n    this.performanceSettings.enableEffects = false;\n    this.performanceSettings.enableGlow = false;\n  }\n\n  private setTargetState(state: VoiceState): void {\n    if (this.targetState !== state) {\n      this.targetState = state;\n      this.stateTransition = 0;\n    }\n  }\n\n  private updateStateTransition(): void {\n    if (this.currentState !== this.targetState) {\n      this.stateTransition += this.stateTransitionSpeed;\n      if (this.stateTransition >= 1) {\n        this.currentState = this.targetState;\n        this.stateTransition = 1;\n      }\n    }\n  }\n\n  private updateMouseInfluence(): void {\n    this.mouseInfluence = lerp(this.mouseInfluence, this.targetMouseInfluence, 0.1);\n  }\n\n  private updateTiming(deltaTime: number): void {\n    this.deltaTimeAccumulator += deltaTime;\n    this.animationTime += deltaTime;\n  }\n\n  private shouldShowPerformanceOverlay(): boolean {\n    // Only show in development or when explicitly enabled\n    return process.env.NODE_ENV === 'development' && \n           localStorage.getItem('voice-performance-overlay') === 'true';\n  }\n\n  private drawPerformanceOverlay(context: CanvasRenderingContext2D, metrics: any): void {\n    context.save();\n    context.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    context.fillRect(10, 10, 200, 80);\n    context.fillStyle = 'white';\n    context.font = '12px monospace';\n    context.fillText(`Theme: ${this.name}`, 15, 25);\n    context.fillText(`FPS: ${Math.round(metrics.fps)}`, 15, 40);\n    context.fillText(`Frame: ${Math.round(metrics.frameTime)}ms`, 15, 55);\n    context.fillText(`State: ${this.currentState}`, 15, 70);\n    context.fillText(`Mouse: ${Math.round(this.mouseInfluence * 100)}%`, 15, 85);\n    context.restore();\n  }\n\n  // Protected utility methods for subclasses\n\n  /**\n   * Get color interpolated between states\n   */\n  protected getStateColor(idleColor: string, activeColor: string): string {\n    if (this.stateTransition === 0) return idleColor;\n    if (this.stateTransition === 1) return activeColor;\n    \n    // Simple color interpolation (for more complex colors, use Color class)\n    return activeColor; // Simplified for now\n  }\n\n  /**\n   * Get value interpolated by mouse influence\n   */\n  protected getMouseInfluencedValue(baseValue: number, influencedValue: number): number {\n    return lerp(baseValue, influencedValue, this.mouseInfluence);\n  }\n\n  /**\n   * Check if effects should be enabled based on performance settings\n   */\n  protected shouldEnableEffects(): boolean {\n    if (this.currentLODSettings) {\n      return !this.currentLODSettings.effectsDisabled;\n    }\n    return this.performanceSettings.enableEffects;\n  }\n\n  /**\n   * Check if glow effects should be enabled\n   */\n  protected shouldEnableGlow(): boolean {\n    if (this.currentLODSettings) {\n      return !this.currentLODSettings.glowDisabled;\n    }\n    return this.performanceSettings.enableGlow;\n  }\n\n  /**\n   * Get maximum particle count for performance\n   */\n  protected getMaxParticles(): number {\n    const baseMax = this.performanceSettings.maxParticles;\n    if (this.currentLODSettings) {\n      return Math.floor(baseMax * (1 - this.currentLODSettings.particleReduction));\n    }\n    return baseMax;\n  }\n\n  /**\n   * Get current LOD level for theme-specific optimizations\n   */\n  protected getCurrentLODLevel(): number {\n    return this.currentLODSettings?.level || 1;\n  }\n\n  /**\n   * Check if simplified rendering should be used\n   */\n  protected shouldUseSimplifiedRendering(): boolean {\n    return this.currentLODSettings?.simplifiedRendering || false;\n  }\n\n  /**\n   * Get performance managers for advanced optimizations\n   */\n  protected getPerformanceManagers() {\n    return this.performanceManager?.getManagers() || null;\n  }\n\n  /**\n   * Check if a particle is visible (for culling)\n   */\n  protected isParticleVisible(x: number, y: number, z = 0, size = 0): boolean {\n    const managers = this.getPerformanceManagers();\n    if (managers?.culler) {\n      return managers.culler.isVisible(x, y, z, size);\n    }\n    return true; // No culling available, assume visible\n  }\n\n  /**\n   * Filter particles to only visible ones\n   */\n  protected cullParticles<T extends { x: number; y: number; z?: number; size?: number }>(particles: T[]): T[] {\n    const managers = this.getPerformanceManagers();\n    if (managers?.culler) {\n      return managers.culler.cullParticles(particles);\n    }\n    return particles; // No culling available, return all\n  }\n\n  /**\n   * Add particle to batch renderer for optimized drawing\n   */\n  protected addToBatch(\n    color: string,\n    x: number,\n    y: number, \n    size: number,\n    alpha: number,\n    glowEnabled = false,\n    effectsEnabled = false\n  ): void {\n    const managers = this.getPerformanceManagers();\n    if (managers?.batchRenderer) {\n      managers.batchRenderer.addToBatch(color, x, y, size, alpha, glowEnabled, effectsEnabled);\n    }\n  }\n\n  /**\n   * Render all batches (call at end of draw)\n   */\n  protected renderBatches(context: CanvasRenderingContext2D): void {\n    const managers = this.getPerformanceManagers();\n    if (managers?.batchRenderer && this.currentLODSettings) {\n      managers.batchRenderer.renderBatches(context, this.currentLODSettings);\n      managers.batchRenderer.clearBatches();\n    }\n  }\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 70396;\nmodule.exports = webpackEmptyContext;","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { AgentSettings } from '@/types';\n\ninterface ChatSettingsState {\n  // Current chat settings per agent\n  settings: Record<number, Partial<AgentSettings>>;\n  \n  // Get settings for a specific agent\n  getSettings: (agentId: number) => Partial<AgentSettings>;\n  \n  // Update settings for a specific agent\n  updateSettings: (agentId: number, updates: Partial<AgentSettings>) => void;\n  \n  // Clear settings for an agent\n  clearSettings: (agentId: number) => void;\n}\n\nexport const useChatSettingsStore = create<ChatSettingsState>()(\n  persist(\n    (set, get) => ({\n      settings: {},\n\n      getSettings: (agentId: number) => {\n        const settings = get().settings[agentId] || {};\n        return {\n          response_source: settings.response_source || 'own_content',\n          chatbot_model: settings.chatbot_model || 'gpt-4-o',\n          custom_persona: settings.custom_persona || 'professional',\n          agent_capability: settings.agent_capability || 'optimal-choice',\n          ...settings,\n        };\n      },\n\n      updateSettings: (agentId: number, updates: Partial<AgentSettings>) => {\n        set((state) => ({\n          settings: {\n            ...state.settings,\n            [agentId]: {\n              ...state.settings[agentId],\n              ...updates,\n            },\n          },\n        }));\n      },\n\n      clearSettings: (agentId: number) => {\n        set((state) => {\n          const newSettings = { ...state.settings };\n          delete newSettings[agentId];\n          return { settings: newSettings };\n        });\n      },\n    }),\n    {\n      name: 'customgpt-chat-settings',\n    }\n  )\n);","/**\n * Message Store - Core Chat Functionality\n * \n * This store manages all message-related state and operations.\n * It's the heart of the chat system, handling:\n * - Message sending and receiving\n * - Real-time streaming responses\n * - Message history management\n * - Local storage fallback\n * - Error handling and retries\n * \n * Architecture:\n * - Uses Map for efficient conversation-based message storage\n * - Integrates with agent and conversation stores\n * - Handles both streaming and non-streaming API responses\n * - Provides local storage backup for offline access\n * \n * Key Features:\n * - Automatic conversation creation if needed\n * - Streaming with fallback to non-streaming\n * - Optimistic UI updates\n * - Message feedback tracking\n * - File upload support\n * \n * Features:\n * - Real-time streaming with local storage persistence\n * - Robust error handling with graceful fallbacks\n * - Comprehensive logging and debugging support\n * - Optimistic UI updates with consistent message ordering\n */\n\nimport { create } from 'zustand';\nimport type { MessageStore, ChatMessage, Citation, FeedbackType, MessageDetails, MessageMetadata } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useAgentStore } from './agents';\nimport { useConversationStore } from './conversations';\nimport { useChatSettingsStore } from './chat-settings';\nimport { generateId } from '@/lib/utils';\nimport { globalStreamManager } from '@/lib/streaming/handler';\nimport { logger } from '@/lib/logger';\nimport { toast } from 'sonner';\n\n/**\n * Local storage configuration\n * Provides offline access and caching for better UX\n */\nconst MESSAGES_STORAGE_KEY = 'customgpt-messages-cache';\n\n/**\n * Save messages to local storage\n * Provides a fallback when API is unavailable\n * @param conversationId - The conversation to save messages for\n * @param messages - Array of messages to save\n */\nfunction saveMessagesToStorage(conversationId: string, messages: ChatMessage[]) {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    const cache = stored ? JSON.parse(stored) : {};\n    cache[conversationId] = messages;\n    localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n  } catch (error) {\n    // Silent fail - storage is optional\n  }\n}\n\n/**\n * Load messages from local storage\n * Used as fallback when API is unavailable\n * @param conversationId - The conversation to load messages for\n * @returns Array of messages or null if not found\n */\nfunction loadMessagesFromStorage(conversationId: string): ChatMessage[] | null {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    if (!stored) return null;\n    const cache = JSON.parse(stored);\n    return cache[conversationId] || null;\n  } catch (error) {\n    // Silent fail - storage is optional\n    return null;\n  }\n}\n\n/**\n * Fetch citation details by IDs\n * \n * Converts citation IDs to full citation objects with title, source, content\n * \n * @param citationIds - Array of citation IDs\n * @param projectId - The project/agent ID\n * @returns Array of citation objects with details\n */\n/**\n * Validate and filter citation IDs\n * \n * @param citationIds - Raw citation IDs from API\n * @returns Filtered array of valid citation IDs\n */\nfunction validateCitationIds(citationIds: any[]): number[] {\n  if (!Array.isArray(citationIds)) {\n    logger.warn('MESSAGES', 'Citation IDs is not an array', { citationIds });\n    return [];\n  }\n  \n  const validIds = citationIds\n    .filter(id => typeof id === 'number' && !isNaN(id) && id > 0)\n    .filter((id, index, arr) => arr.indexOf(id) === index); // Remove duplicates\n  \n  if (validIds.length !== citationIds.length) {\n    logger.warn('MESSAGES', 'Filtered out invalid citation IDs', {\n      original: citationIds,\n      valid: validIds,\n      filtered: citationIds.length - validIds.length\n    });\n  }\n  \n  return validIds;\n}\n\nasync function fetchCitationDetails(citationIds: number[], projectId: number): Promise<Citation[]> {\n  // Validate input citation IDs\n  const validCitationIds = validateCitationIds(citationIds);\n  \n  if (validCitationIds.length === 0) {\n    logger.warn('MESSAGES', 'No valid citation IDs to fetch', { citationIds });\n    return [];\n  }\n  \n  logger.info('MESSAGES', 'Fetching citation details', {\n    projectId,\n    citationIds: validCitationIds,\n    count: validCitationIds.length\n  });\n  \n  const client = getClient();\n  const citations: Citation[] = [];\n  \n  for (let i = 0; i < validCitationIds.length; i++) {\n    const citationId = validCitationIds[i];\n    \n    try {\n      const response = await client.getCitation(projectId, citationId);\n      \n      if (response.data) {\n        const citation = {\n          id: citationId.toString(), // Convert to string as per Citation interface\n          index: i + 1, // 1-based index for display\n          title: response.data.title || `Citation ${i + 1}`,\n          source: response.data.url,\n          url: response.data.url,\n          content: response.data.description || '',\n        };\n        citations.push(citation);\n        \n        logger.info('MESSAGES', 'Citation fetched successfully', {\n          citationId,\n          title: citation.title,\n          hasContent: !!citation.content,\n          hasUrl: !!citation.url\n        });\n      } else {\n        logger.warn('MESSAGES', 'Citation API returned empty data', {\n          citationId,\n          response\n        });\n      }\n    } catch (error) {\n      logger.warn('MESSAGES', 'Failed to fetch citation details', {\n        citationId,\n        projectId,\n        error: error instanceof Error ? error.message : String(error),\n        errorType: error instanceof Error ? error.constructor.name : typeof error\n      });\n      // Only create fallback citations for actual errors, not empty responses\n      // This reduces wrong citations from appearing\n      if (error instanceof Error && error.message.includes('404')) {\n        logger.info('MESSAGES', 'Citation not found, skipping fallback', { citationId });\n        // Skip creating fallback for 404 errors - citation simply doesn't exist\n        continue;\n      } else {\n        // Create fallback only for network/server errors\n        citations.push({\n          id: citationId.toString(), // Convert to string\n          index: i + 1,\n          title: `Citation ${i + 1}`,\n          source: '',\n          url: '',\n          content: 'Citation details unavailable',\n        });\n      }\n    }\n  }\n  \n  logger.info('MESSAGES', 'Citation fetching completed', {\n    requested: validCitationIds.length,\n    fetched: citations.length,\n    success: citations.filter(c => c.content !== 'Citation details unavailable').length\n  });\n  \n  return citations;\n}\n\n/**\n * Message Store Implementation\n * \n * State Structure:\n * - messages: Map<conversationId, ChatMessage[]> - All messages grouped by conversation\n * - streamingMessage: Current message being streamed (null when not streaming)\n * - isStreaming: Whether a message is currently being streamed\n * - loading: General loading state for message operations\n * - error: Current error message if any\n */\nexport const useMessageStore = create<MessageStore>((set, get) => ({\n  // Initialize with empty state\n  messages: new Map(),\n  streamingMessage: null,\n  isStreaming: false,\n  loading: false,\n  error: null,\n\n  /**\n   * Send a message to the current agent\n   * \n   * Flow:\n   * 1. Validate agent selection\n   * 2. Ensure conversation exists (create if needed)\n   * 3. Create and add user message (optimistic update)\n   * 4. Upload files if present\n   * 5. Start streaming response\n   * 6. Fall back to non-streaming if streaming fails\n   * 7. Handle errors gracefully\n   * \n   * \n   * @param content - Message text\n   * @param files - Optional file attachments\n   */\n  sendMessage: async (content: string, files?: File[]) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    if (!currentAgent) {\n      logger.error('MESSAGES', 'No agent selected when trying to send message');\n      \n      // Check if this is due to missing API keys\n      const response = await fetch('/api/proxy/user/limits').catch(() => null);\n      if (!response || response.status === 401 || response.status === 500) {\n        throw new Error('API key not configured. Please add CUSTOMGPT_API_KEY to your .env.local file and restart the server.');\n      }\n      \n      throw new Error('No agent selected. Please select or create an agent first.');\n    }\n\n    logger.info('MESSAGES', 'Sending message', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name,\n      messageLength: content.length,\n      hasFiles: files && files.length > 0\n    });\n\n    // Ensure we have a conversation\n    const conversation = await conversationStore.ensureConversation(\n      currentAgent.id,\n      content\n    );\n\n    logger.info('MESSAGES', 'Conversation ensured', {\n      conversationId: conversation.id,\n      sessionId: conversation.session_id,\n      hasSessionId: !!conversation.session_id,\n      isNew: !conversation.message_count || conversation.message_count === 0\n    });\n\n    if (!conversation.session_id) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversation });\n      throw new Error('Conversation missing session_id');\n    }\n\n    set({ loading: true, error: null });\n\n    // Create user message\n    const userMessage: ChatMessage = {\n      id: generateId(),\n      role: 'user',\n      content,\n      timestamp: new Date().toISOString(),\n      status: 'sending',\n    };\n\n    // Add user message to store\n    get().addMessage(conversation.id.toString(), userMessage);\n\n    // Create assistant message placeholder\n    const assistantMessage: ChatMessage = {\n      id: generateId(),\n      role: 'assistant',\n      content: '',\n      timestamp: new Date().toISOString(),\n      citations: [],\n    };\n\n    set({ \n      streamingMessage: assistantMessage,\n      isStreaming: true,\n      loading: false,\n    });\n\n    try {\n      // Handle file uploads if present\n      let sourceIds: string[] = [];\n      if (files && files.length > 0) {\n        const client = getClient();\n        const uploadResponses = await Promise.all(\n          files.map(file => client.uploadFile(currentAgent.id, file))\n        );\n        \n        // Extract source IDs from upload responses\n        sourceIds = uploadResponses\n          .filter(response => response?.data?.id)\n          .map(response => response.data.id.toString());\n          \n        logger.info('MESSAGES', 'Files uploaded successfully', {\n          fileCount: files.length,\n          sourceIds: sourceIds\n        });\n      }\n\n      // Update user message status\n      userMessage.status = 'sent';\n      get().addMessage(conversation.id.toString(), userMessage);\n\n      // Start streaming with correct parameters\n      const client = getClient();\n      \n      logger.info('MESSAGES', 'Starting message stream', {\n        agentId: currentAgent.id,\n        sessionId: conversation.session_id,\n        messageContent: content.substring(0, 50),\n        hasSourceIds: sourceIds.length > 0,\n        sourceIds: sourceIds\n      });\n      \n      try {\n        // Get chat settings for current agent\n        const chatSettings = useChatSettingsStore.getState().getSettings(currentAgent.id);\n        \n        // Prepare the request data - only send fields that the API accepts\n        const requestData: { \n          prompt: string; \n          source_ids?: string[];\n          response_source?: string;\n        } = { \n          prompt: content || '', // Ensure we always have a prompt, even if empty\n          response_source: chatSettings.response_source || 'default',\n        };\n        \n        // Add source_ids if we have uploaded files\n        if (sourceIds.length > 0) {\n          requestData.source_ids = sourceIds;\n          \n          // If no text prompt was provided, add a default prompt for file analysis\n          if (!content.trim()) {\n            requestData.prompt = 'Please analyze the uploaded file(s).';\n          }\n        }\n        \n        await client.sendMessageStream(\n          currentAgent.id,\n          conversation.session_id,  // Use session_id instead of id\n          requestData,\n          (chunk) => {\n              logger.info('MESSAGES', 'Received stream chunk', { \n                type: chunk.type, \n                hasContent: !!chunk.content,\n                contentLength: chunk.content?.length,\n                contentPreview: chunk.content?.substring(0, 50)\n              });\n              \n              if (chunk.type === 'content' && chunk.content) {\n                get().updateStreamingMessage(chunk.content, chunk.citations);\n              } else if (chunk.type === 'citation' && chunk.citations) {\n                // Handle citation-only chunks\n                const current = get().streamingMessage;\n                if (current && chunk.citations && Array.isArray(chunk.citations)) {\n                  // Check if citations are IDs or objects\n                  if (chunk.citations.length > 0 && typeof chunk.citations[0] === 'number') {\n                    // Fetch citation details asynchronously\n                    fetchCitationDetails(chunk.citations as any as number[], currentAgent.id).then(citationDetails => {\n                      const updatedCurrent = get().streamingMessage;\n                      if (updatedCurrent) {\n                        set({\n                          streamingMessage: {\n                            ...updatedCurrent,\n                            citations: citationDetails\n                          }\n                        });\n                      }\n                    });\n                  } else {\n                    // Citations might already be objects\n                    set({\n                      streamingMessage: {\n                        ...current,\n                        citations: chunk.citations\n                      }\n                    });\n                  }\n                }\n              }\n            },\n            async (streamError) => {\n              logger.error('MESSAGES', 'Streaming failed, attempting fallback to non-streaming', streamError, {\n                errorMessage: streamError.message,\n                agentId: currentAgent.id,\n                sessionId: conversation.session_id\n              });\n              \n              // Try fallback to non-streaming API\n              try {\n                logger.info('MESSAGES', 'Using non-streaming fallback');\n                \n                const response = await client.sendMessage(\n                  currentAgent.id,\n                  conversation.session_id,\n                  { \n                    prompt: requestData.prompt,\n                    stream: false,\n                    source_ids: requestData.source_ids\n                  }\n                );\n                \n                // Update streaming message with the complete response\n                const finalMessage = get().streamingMessage;\n                if (finalMessage && response) {\n                  // Handle different response formats from API\n                  let messageData: any;\n                  if (response.data) {\n                    messageData = response.data;\n                  } else {\n                    // Direct response format - cast to any to handle the actual API structure\n                    messageData = response as any;\n                  }\n                  \n                  finalMessage.content = messageData?.openai_response || messageData?.content || 'No response received';\n                  \n                  // Fetch citation details if needed\n                  if (messageData?.citations && Array.isArray(messageData.citations) && messageData.citations.length > 0) {\n                    if (typeof messageData.citations[0] === 'number') {\n                      // Citations are IDs, fetch details\n                      finalMessage.citations = await fetchCitationDetails(messageData.citations, currentAgent.id);\n                    } else {\n                      // Citations might already be objects\n                      finalMessage.citations = messageData.citations;\n                    }\n                  } else {\n                    finalMessage.citations = [];\n                  }\n                  \n                  finalMessage.status = 'sent';\n                  \n                  // Update the message ID to include the prompt ID if available\n                  if (messageData?.id) {\n                    finalMessage.id = `${messageData.id}-assistant`;\n                    // Also update the user message ID\n                    const conversationMessages = get().messages.get(conversation.id.toString()) || [];\n                    const lastUserMessage = conversationMessages.filter(m => m.role === 'user').pop();\n                    if (lastUserMessage && lastUserMessage.id === userMessage.id) {\n                      lastUserMessage.id = `${messageData.id}-user`;\n                      get().addMessage(conversation.id.toString(), lastUserMessage);\n                    }\n                  }\n                  \n                  // Add details from the API response\n                  finalMessage.details = {\n                    user_id: messageData?.user_id,\n                    conversation_id: messageData?.conversation_id,\n                    updated_at: messageData?.updated_at,\n                    prompt_id: messageData?.id,\n                    metadata: messageData?.metadata ? {\n                      user_ip: messageData.metadata.user_ip,\n                      user_agent: messageData.metadata.user_agent,\n                      external_id: messageData.metadata.external_id,\n                      request_source: messageData.metadata.request_source,\n                    } : undefined,\n                  };\n                  get().addMessage(conversation.id.toString(), finalMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                logger.info('MESSAGES', 'Fallback to non-streaming successful');\n                \n              } catch (fallbackError: any) {\n                logger.error('MESSAGES', 'Both streaming and non-streaming failed', fallbackError);\n                \n                // Update assistant message with error\n                const errorMessage = get().streamingMessage;\n                if (errorMessage) {\n                  errorMessage.content = 'Sorry, I encountered an error while processing your message. Please try again.';\n                  errorMessage.status = 'error';\n                  get().addMessage(conversation.id.toString(), errorMessage);\n                }\n                \n                // Extract error details including status code\n                let errorText = 'Communication error';\n                if (fallbackError.status) {\n                  switch (fallbackError.status) {\n                    case 429:\n                      errorText = 'You have exhausted your current query credits. Please contact customer service for assistance.';\n                      break;\n                    case 401:\n                      errorText = 'API Token is either missing or invalid';\n                      break;\n                    case 404:\n                      errorText = 'Agent or conversation not found';\n                      break;\n                    case 400:\n                      errorText = 'Invalid request format';\n                      break;\n                    default:\n                      errorText = fallbackError.message || `Error ${fallbackError.status}`;\n                  }\n                } else if (fallbackError.message) {\n                  errorText = fallbackError.message;\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                  error: errorText,\n                });\n              }\n            },\n            async () => {\n              // onComplete callback - enrich streaming message with API data\n              const finalMessage = get().streamingMessage;\n              if (finalMessage) {\n                finalMessage.status = 'sent';\n                \n                // Add message immediately to ensure it's visible\n                get().addMessage(conversation.id.toString(), finalMessage);\n                \n                // Clear streaming state now that message is added\n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                // Fetch latest messages to enrich the streaming message with API metadata\n                try {\n                  logger.info('MESSAGES', 'Enriching streaming message with API data');\n                  const client = getClient();\n                  const response = await client.getMessages(currentAgent.id, conversation.session_id);\n                  \n                  // Process API response to find messages\n                  let apiMessages = [];\n                  if (response && typeof response === 'object') {\n                    if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n                      apiMessages = (response as any).data.messages.data;\n                    } else if (Array.isArray((response as any).data)) {\n                      apiMessages = (response as any).data;\n                    } else if (Array.isArray(response)) {\n                      apiMessages = response;\n                    } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n                      apiMessages = (response as any).data.data;\n                    }\n                  }\n                  \n                  if (apiMessages.length > 0) {\n                    // Find the most recent assistant message (should be our streaming message)\n                    const latestApiMessage = apiMessages[apiMessages.length - 1];\n                    \n                    if (latestApiMessage && latestApiMessage.openai_response) {\n                      // Enrich the streaming message with API data\n                      finalMessage.id = `${latestApiMessage.id}-assistant`;\n                      finalMessage.timestamp = latestApiMessage.created_at || latestApiMessage.timestamp || finalMessage.timestamp;\n                      \n                      // Add full message details\n                      finalMessage.details = {\n                        user_id: latestApiMessage.user_id,\n                        conversation_id: latestApiMessage.conversation_id,\n                        updated_at: latestApiMessage.updated_at,\n                        prompt_id: latestApiMessage.id,\n                        metadata: latestApiMessage.metadata ? {\n                          user_ip: latestApiMessage.metadata.user_ip,\n                          user_agent: latestApiMessage.metadata.user_agent,\n                          external_id: latestApiMessage.metadata.external_id,\n                          request_source: latestApiMessage.metadata.request_source,\n                        } : undefined,\n                      };\n                      \n                      // Also enrich the user message with proper ID and details\n                      const conversationMessages = get().messages.get(conversation.id.toString()) || [];\n                      const lastUserMessage = conversationMessages.filter(m => m.role === 'user').pop();\n                      if (lastUserMessage && lastUserMessage.id === userMessage.id && latestApiMessage.user_query) {\n                        lastUserMessage.id = `${latestApiMessage.id}-user`;\n                        lastUserMessage.timestamp = latestApiMessage.created_at || latestApiMessage.timestamp || lastUserMessage.timestamp;\n                        lastUserMessage.details = {\n                          user_id: latestApiMessage.user_id,\n                          conversation_id: latestApiMessage.conversation_id,\n                          updated_at: latestApiMessage.updated_at,\n                          prompt_id: latestApiMessage.id,\n                          metadata: latestApiMessage.metadata ? {\n                            user_ip: latestApiMessage.metadata.user_ip,\n                            user_agent: latestApiMessage.metadata.user_agent,\n                            external_id: latestApiMessage.metadata.external_id,\n                            request_source: latestApiMessage.metadata.request_source,\n                          } : undefined,\n                        };\n                        get().addMessage(conversation.id.toString(), lastUserMessage);\n                      }\n                      \n                      // Enrich citations if they exist\n                      // Preserve existing citations from streaming if API doesn't provide them\n                      const existingCitations = finalMessage.citations || [];\n                      \n                      if (latestApiMessage.citations && Array.isArray(latestApiMessage.citations) && latestApiMessage.citations.length > 0) {\n                        if (typeof latestApiMessage.citations[0] === 'number') {\n                          // Citations are IDs, fetch details\n                          const citationDetails = await fetchCitationDetails(latestApiMessage.citations, currentAgent.id);\n                          finalMessage.citations = citationDetails;\n                        } else {\n                          // Citations might already be objects\n                          finalMessage.citations = latestApiMessage.citations;\n                        }\n                      } else {\n                        // Keep existing citations from streaming if API doesn't provide any\n                        finalMessage.citations = existingCitations;\n                      }\n                      \n                      // Update feedback if present\n                      if (latestApiMessage.response_feedback?.reaction) {\n                        finalMessage.feedback = latestApiMessage.response_feedback.reaction === 'liked' ? 'like' : \n                                               latestApiMessage.response_feedback.reaction === 'disliked' ? 'dislike' : \n                                               undefined;\n                      }\n                      \n                      // Update the enriched message in the store (it's already added, so this updates it)\n                      get().addMessage(conversation.id.toString(), finalMessage);\n                      \n                      logger.info('MESSAGES', 'Successfully enriched streaming message with API data', {\n                        messageId: finalMessage.id,\n                        hasDetails: !!finalMessage.details,\n                        citationCount: finalMessage.citations?.length || 0\n                      });\n                    } else {\n                      // API message exists but doesn't have expected format\n                      logger.info('MESSAGES', 'API message format mismatch, keeping original message');\n                    }\n                  } else {\n                    // No API messages found\n                    logger.info('MESSAGES', 'No API messages found for enrichment');\n                  }\n                } catch (enrichmentError) {\n                  logger.warn('MESSAGES', 'Failed to enrich streaming message, keeping basic version', enrichmentError);\n                  // Message is already added, enrichment failed but user can still see the response\n                }\n              }\n            }\n        );\n      } catch (setupError) {\n        logger.error('MESSAGES', 'Failed to setup streaming', setupError);\n        throw setupError;\n      }\n    } catch (error: any) {\n      logger.error('MESSAGES', 'Failed to send message', error, {\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n        status: error.status,\n        agentId: currentAgent.id,\n        conversationId: conversation.id,\n        sessionId: conversation.session_id\n      });\n      \n      // Update user message status\n      userMessage.status = 'error';\n      get().addMessage(conversation.id.toString(), userMessage);\n      \n      // Extract error details including status code\n      let errorText = 'Failed to send message';\n      if (error.status) {\n        switch (error.status) {\n          case 429:\n            errorText = 'You have exhausted your current query credits. Please contact customer service for assistance.';\n            break;\n          case 401:\n            errorText = 'API Token is either missing or invalid';\n            break;\n          case 403:\n            // Check if agent is inactive by looking at current agent status\n            const agentStore = useAgentStore.getState();\n            const { currentAgent: currentAgentFor403 } = agentStore;\n            if (currentAgentFor403 && !currentAgentFor403.is_chat_active) {\n              errorText = 'Agent is inactive - no documents uploaded. Please add documents to activate the agent.';\n            } else {\n              errorText = 'Access denied. You don\\'t have permission to access this resource.';\n            }\n            break;\n          case 404:\n            errorText = 'Agent or conversation not found';\n            break;\n          case 400:\n            errorText = 'Invalid request format';\n            break;\n          case 500:\n            errorText = 'Internal server error. Please try again later.';\n            break;\n          default:\n            errorText = error.message || `Error ${error.status}`;\n        }\n      } else if (error.message) {\n        errorText = error.message;\n      }\n      \n      set({ \n        streamingMessage: null,\n        isStreaming: false,\n        error: errorText,\n        loading: false,\n      });\n      \n      throw error;\n    }\n  },\n\n  /**\n   * Add or update a message in the store\n   * \n   * Features:\n   * - Handles both new messages and updates\n   * - Maintains message order\n   * - Automatically saves to local storage\n   * - Efficient update using message ID lookup\n   * \n   * @param conversationId - The conversation to add the message to\n   * @param message - The message to add or update\n   */\n  addMessage: (conversationId: string, message: ChatMessage) => {\n    set(state => {\n      const newMessages = new Map(state.messages);\n      const conversationMessages = newMessages.get(conversationId) || [];\n      \n      // Check if message already exists and update it\n      const existingIndex = conversationMessages.findIndex(m => m.id === message.id);\n      if (existingIndex >= 0) {\n        // Update existing message\n        conversationMessages[existingIndex] = message;\n      } else {\n        // Add new message\n        conversationMessages.push(message);\n      }\n      \n      newMessages.set(conversationId, conversationMessages);\n      \n      // Save to local storage as fallback\n      saveMessagesToStorage(conversationId, conversationMessages);\n      \n      return { messages: newMessages };\n    });\n  },\n\n  /**\n   * Update the currently streaming message\n   * \n   * Used during streaming to append content chunks\n   * and update citations as they arrive\n   * \n   * @param content - Content chunk to append\n   * @param citations - Updated citations (optional)\n   */\n  updateStreamingMessage: (content: string, citations?: Citation[]) => {\n    set(state => {\n      if (!state.streamingMessage) return state;\n      \n      return {\n        streamingMessage: {\n          ...state.streamingMessage,\n          content: state.streamingMessage.content + content, // Append content\n          citations: citations || state.streamingMessage.citations, // Update citations if provided\n        },\n      };\n    });\n  },\n\n  clearMessages: (conversationId?: string) => {\n    set(state => {\n      if (conversationId) {\n        const newMessages = new Map(state.messages);\n        newMessages.delete(conversationId);\n        return { messages: newMessages };\n      } else {\n        // Clear all messages\n        return { messages: new Map() };\n      }\n    });\n  },\n\n  updateMessageFeedback: async (messageId: string, feedback: FeedbackType) => {\n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    const { currentConversation } = conversationStore;\n    \n    if (!currentAgent || !currentConversation) {\n      logger.warn('MESSAGES', 'Cannot update feedback - missing agent or conversation');\n      return;\n    }\n\n    // Find the message\n    const conversationMessages = get().messages.get(currentConversation.id.toString()) || [];\n    const message = conversationMessages.find(m => m.id === messageId);\n    \n    if (!message) {\n      logger.warn('MESSAGES', 'Message not found for feedback update', { messageId });\n      return;\n    }\n\n    // Get the prompt ID from message details or try to extract from message ID\n    let promptId: number | undefined;\n    \n    if (message.details?.prompt_id) {\n      promptId = message.details.prompt_id;\n    } else {\n      // Try to extract from message ID format \"{promptId}-assistant\" or \"{promptId}-user\"\n      const promptIdMatch = message.id.match(/^(\\d+)-/);\n      if (promptIdMatch) {\n        promptId = parseInt(promptIdMatch[1]);\n      }\n    }\n    \n    if (!promptId) {\n      logger.error('MESSAGES', 'Could not determine prompt ID for message', { messageId, details: message.details });\n      toast.error('Unable to update feedback. Message ID not found.');\n      return;\n    }\n    const sessionId = currentConversation.session_id;\n    \n    if (!sessionId) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversationId: currentConversation.id });\n      return;\n    }\n\n    try {\n      // Update local state immediately (optimistic update)\n      const updatedMessage = { ...message, feedback };\n      get().addMessage(currentConversation.id.toString(), updatedMessage);\n\n      // Send to API\n      const client = getClient();\n      \n      // Map feedback directly to API format (no neutral option)\n      const feedbackValue = feedback === 'like' ? 'thumbs_up' : 'thumbs_down';\n      \n      logger.info('MESSAGES', 'Updating message feedback', {\n        projectId: currentAgent.id,\n        sessionId,\n        promptId,\n        feedback: feedbackValue\n      });\n      \n      const response = await client.updateMessageFeedback(\n        currentAgent.id,\n        sessionId,\n        promptId,\n        { feedback: feedbackValue }\n      );\n      \n      // The feedback was already updated optimistically above\n      // The response doesn't include the updated message data in the expected format\n      logger.info('MESSAGES', 'Message feedback updated successfully');\n      \n      // Show success toast\n      toast.success('Thanks for your feedback!');\n      \n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to update message feedback', error);\n      \n      // Revert local state on error\n      get().addMessage(currentConversation.id.toString(), message);\n      \n      // Show error toast\n      if ((error as any)?.status === 401) {\n        toast.error('Authentication failed. Please log in again.');\n      } else if ((error as any)?.status === 404) {\n        toast.error('Message not found.');\n      } else {\n        toast.error('Failed to update feedback. Please try again.');\n      }\n    }\n  },\n\n  // Utility methods\n  getMessagesForConversation: (conversationId: string): ChatMessage[] => {\n    return get().messages.get(conversationId) || [];\n  },\n\n  cancelStreaming: () => {\n    globalStreamManager.cancelAllStreams();\n    set({ \n      streamingMessage: null,\n      isStreaming: false,\n    });\n  },\n\n  /**\n   * Load message history for a conversation\n   * \n   * API Response Handling:\n   * - Supports multiple response formats from the API\n   * - Converts API format to internal ChatMessage format\n   * - Falls back to local storage if API fails\n   * - Handles both user_query and openai_response fields\n   * - Fetches citation details for citation IDs\n   * \n   * @param conversationId - The conversation to load messages for\n   */\n  loadMessages: async (conversationId: string) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    if (isDemoMode) {\n      logger.info('MESSAGES', 'Skipping message load in demo mode', { conversationId });\n      // Just ensure the conversation has an entry in the messages map\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    // Skip API calls for locally created conversations (they don't exist on server)\n    if (conversationId.startsWith('conv_')) {\n      logger.info('MESSAGES', 'Skipping API load for local conversation', { conversationId });\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    const { currentAgent } = agentStore;\n    const { conversations } = conversationStore;\n    \n    if (!currentAgent) {\n      logger.warn('MESSAGES', 'No current agent when loading messages', { conversationId });\n      return;\n    }\n\n    // Find the conversation to get its session_id\n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) {\n      logger.error('MESSAGES', 'Conversation not found in store', { \n        conversationId,\n        availableConversations: conversations.map(c => c.id)\n      });\n      // Don't set error, just ensure empty message array exists\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n\n    logger.info('MESSAGES', 'Loading messages for conversation', {\n      conversationId,\n      sessionId: conversation.session_id,\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n\n    set({ loading: true, error: null });\n\n    try {\n      const client = getClient();\n      const response = await client.getMessages(currentAgent.id, conversation.session_id);\n      logger.info('MESSAGES', 'Messages API response received', {\n        conversationId,\n        responseType: typeof response,\n        hasData: !!(response as any)?.data,\n        dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n      });\n      \n      // Handle different response formats from the API\n      let messages = [];\n      if (response && typeof response === 'object') {\n        // API documentation shows response format: { status: \"success\", data: { conversation: {...}, messages: { data: [...] } } }\n        if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n          messages = (response as any).data.messages.data;\n        } else if (Array.isArray((response as any).data)) {\n          messages = (response as any).data;\n        } else if (Array.isArray(response)) {\n          messages = response;\n        } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n          messages = (response as any).data.data;\n        }\n      }\n      \n      logger.info('MESSAGES', 'Processing messages', {\n        conversationId,\n        messagesCount: messages.length,\n        messageTypes: messages.map((m: any) => m.role || 'unknown')\n      });\n      \n      // Convert API messages to our format\n      // Each API message contains both user_query and openai_response, so we need to create two ChatMessage objects\n      const formattedMessages: ChatMessage[] = [];\n      \n      if (Array.isArray(messages)) {\n        // Process messages and fetch citation details\n        for (const msg of messages) {\n          const baseTimestamp = msg.created_at || msg.timestamp || new Date().toISOString();\n          \n          // Add user message\n          if (msg.user_query) {\n            formattedMessages.push({\n              id: `${msg.id}-user` || `user-${Math.random()}`,\n              role: 'user',\n              content: msg.user_query,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              details: {\n                user_id: msg.user_id,\n                conversation_id: msg.conversation_id,\n                updated_at: msg.updated_at,\n                prompt_id: msg.id,\n                metadata: msg.metadata ? {\n                  user_ip: msg.metadata.user_ip,\n                  user_agent: msg.metadata.user_agent,\n                  external_id: msg.metadata.external_id,\n                  request_source: msg.metadata.request_source,\n                } : undefined,\n              },\n            });\n          }\n          \n          // Add assistant message\n          if (msg.openai_response) {\n            // Fetch citation details if citations exist\n            let citationDetails: Citation[] = [];\n            if (msg.citations && Array.isArray(msg.citations) && msg.citations.length > 0) {\n              // Check if citations are already objects (future-proofing) or just IDs\n              if (typeof msg.citations[0] === 'number') {\n                // Citations are IDs, fetch details\n                citationDetails = await fetchCitationDetails(msg.citations, currentAgent.id);\n              } else {\n                // Citations might already be objects, use as is\n                citationDetails = msg.citations;\n              }\n            }\n            \n            formattedMessages.push({\n              id: `${msg.id}-assistant` || `assistant-${Math.random()}`,\n              role: 'assistant',\n              content: msg.openai_response,\n              citations: citationDetails,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              feedback: msg.response_feedback?.reaction === 'liked' ? 'like' : \n                       msg.response_feedback?.reaction === 'disliked' ? 'dislike' : \n                       undefined,\n              details: {\n                user_id: msg.user_id,\n                conversation_id: msg.conversation_id,\n                updated_at: msg.updated_at,\n                prompt_id: msg.id,\n                metadata: msg.metadata ? {\n                  user_ip: msg.metadata.user_ip,\n                  user_agent: msg.metadata.user_agent,\n                  external_id: msg.metadata.external_id,\n                  request_source: msg.metadata.request_source,\n                } : undefined,\n              },\n            });\n          }\n        }\n      }\n\n      logger.info('MESSAGES', 'Messages formatted successfully', {\n        conversationId,\n        formattedCount: formattedMessages.length\n      });\n\n      // Sort messages by timestamp to ensure chronological order\n      formattedMessages.sort((a, b) => {\n        const dateA = new Date(a.timestamp).getTime();\n        const dateB = new Date(b.timestamp).getTime();\n        return dateA - dateB; // Ascending order (oldest first)\n      });\n\n      logger.info('MESSAGES', 'Messages sorted by timestamp', {\n        conversationId,\n        firstMessageTime: formattedMessages[0]?.timestamp,\n        lastMessageTime: formattedMessages[formattedMessages.length - 1]?.timestamp\n      });\n\n      set(state => {\n        const newMessages = new Map(state.messages);\n        \n        // Preserve any local messages that might be in sending state\n        const existingMessages = state.messages.get(conversationId) || [];\n        const localSendingMessages = existingMessages.filter(msg => \n          msg.status === 'sending' || \n          (msg.role === 'user' && \n           new Date(msg.timestamp).getTime() > Date.now() - 5000) // Messages sent in last 5 seconds\n        );\n        \n        // Merge local sending messages with API messages\n        const mergedMessages = [...formattedMessages];\n        for (const localMsg of localSendingMessages) {\n          if (!mergedMessages.find(m => m.id === localMsg.id)) {\n            // Insert local message at the appropriate position based on timestamp\n            const insertIndex = mergedMessages.findIndex(m => \n              new Date(m.timestamp).getTime() > new Date(localMsg.timestamp).getTime()\n            );\n            if (insertIndex === -1) {\n              mergedMessages.push(localMsg);\n            } else {\n              mergedMessages.splice(insertIndex, 0, localMsg);\n            }\n          }\n        }\n        \n        newMessages.set(conversationId, mergedMessages);\n        \n        // Save to local storage as fallback\n        saveMessagesToStorage(conversationId, mergedMessages);\n        \n        return { \n          messages: newMessages,\n          loading: false,\n        };\n      });\n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to load messages', error, {\n        conversationId,\n        agentId: currentAgent.id,\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        status: (error as any)?.status,\n        message: (error as any)?.message\n      });\n      \n      // Try to load from local storage as fallback\n      const cachedMessages = loadMessagesFromStorage(conversationId);\n      if (cachedMessages && cachedMessages.length > 0) {\n        logger.info('MESSAGES', 'Using cached messages as fallback', {\n          conversationId,\n          messageCount: cachedMessages.length\n        });\n        \n        // Sort cached messages by timestamp to ensure chronological order\n        cachedMessages.sort((a, b) => {\n          const dateA = new Date(a.timestamp).getTime();\n          const dateB = new Date(b.timestamp).getTime();\n          return dateA - dateB; // Ascending order (oldest first)\n        });\n        \n        set(state => {\n          const newMessages = new Map(state.messages);\n          newMessages.set(conversationId, cachedMessages);\n          return { \n            messages: newMessages,\n            loading: false,\n            error: 'Using cached messages (API unavailable)'\n          };\n        });\n      } else {\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to load messages',\n          loading: false,\n        });\n      }\n    }\n  },\n  \n  /**\n   * Clear the error state\n   */\n  clearError: () => {\n    set({ error: null });\n  },\n  \n  /**\n   * Set messages for a specific conversation\n   * Used for updating conversation messages directly\n   */\n  setMessagesForConversation: (conversationId: string, messages: ChatMessage[]) => {\n    set(state => {\n      const newMessages = new Map(state.messages);\n      newMessages.set(conversationId, messages);\n      return { messages: newMessages };\n    });\n  },\n}));","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + {\"135\":\"300cf3128c7b3899f41e\",\"139\":\"b5b36620976f04410283\",\"236\":\"f4f1e2e8242e227a0fbf\",\"258\":\"088a5955ad60da7b0eac\",\"352\":\"932975b3c3dcb3907cb8\",\"365\":\"f366977150fc0db74e96\",\"404\":\"d6cb89542ef4f6025d04\",\"482\":\"61ff49824d046d57452e\",\"613\":\"3f83b3c90df78f917118\",\"638\":\"e1c53d34514d703a4e96\",\"964\":\"7561879d4b6c10001d9e\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t30: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = Object(typeof self !== 'undefined' ? self : this)[\"webpackChunkCustomGPTWidget\"] = Object(typeof self !== 'undefined' ? self : this)[\"webpackChunkCustomGPTWidget\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","__webpack_require__.nc = undefined;","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [96], () => (__webpack_require__(26239)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["root","factory","exports","module","define","amd","self","this","deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","useConversationStore","create","persist","set","get","conversations","currentConversation","loading","error","currentPage","totalPages","totalConversations","perPage","sortOrder","sortBy","userFilter","fetchConversations","async","projectId","params","logger","info","client","getClient","queryParams","page","per_page","order","orderBy","searchQuery","searchMode","dateFilter","response","getConversations","responseType","hasData","data","dataLength","Array","isArray","length","paginationData","count","map","c","id","name","messagesCount","messages","current_page","last_page","total","errorType","Error","constructor","status","message","createConversation","newConversation","undefined","state","selectConversation","conversation","deleteConversation","find","toString","conversationId","project_id","session_id","updatedConversations","filter","updateConversation","sessionId","updatedConversation","ensureConversation","firstMessage","generateConversationName","Date","toLocaleDateString","getSessionId","window","__customgpt_current_session","__customgpt_session","__customgpt_sessions","sessions","sessionIds","Object","keys","sessionStorage","getItem","now","Math","random","substr","setItem","e","partialize","onRehydrateStorage","cn","inputs","twMerge","clsx","generateId","substring","formatFileSize","bytes","i","floor","log","parseFloat","pow","toFixed","getFileIcon","fileType","type","toLowerCase","includes","isFileTypeAllowed","allowedTypes","some","formatTimestamp","timestamp","date","diffInMs","getTime","diffInMinutes","diffInHours","diffInDays","copyToClipboard","text","navigator","clipboard","writeText","parseStreamChunk","chunk","startsWith","slice","trim","parsed","JSON","parse","content","citations","delta","choices","jsonError","parseError","cleanedMessage","replace","title","split","join","CONSTANTS","MAX_FILE_SIZE","ACCEPTED_FILE_TYPES","MAX_MESSAGE_LENGTH","API_TIMEOUT","STREAM_TIMEOUT","RETRY_ATTEMPTS","RETRY_DELAY","lerp","start","end","factor","clamp","value","min","max","distance2D","x1","y1","x2","y2","dx","dy","sqrt","hslToRgb","h","s","l","hue2rgb","p","q","t","round","DEMO_STORAGE_KEYS","UsageTracker","_defineProperty","process","NEXT_PUBLIC_ANALYTICS_ENDPOINT","startFlushTimer","getInstance","instance","track","event","fullEvent","eventType","eventName","deploymentMode","getDeploymentMode","demoType","getDemoType","clientVersion","NEXT_PUBLIC_APP_VERSION","userAgent","referrer","document","eventQueue","push","batchSize","flush","trackApiCall","endpoint","method","statusCode","trackSessionStart","metadata","mode","trackSessionEnd","reason","trackLimitReached","limitType","trackError","context","localStorage","sessionData","demoSession","flushTimer","clearInterval","setInterval","flushInterval","events","fetch","analyticsEndpoint","headers","body","stringify","unshift","forceFlush","usageTracker","addEventListener","hidden","DEMO_ERROR_MESSAGES","retryAfter","proxyClient","Map","isDemoMode","baseURL","timeout","setDemoApiKey","apiKey","demoApiKey","request","options","url","requestId","apiRequest","controller","AbortController","abortControllers","timeoutId","setTimeout","abort","isFormData","FormData","baseHeaders","session","signal","clearTimeout","delete","responseData","json","ok","isFreeTrialMode","errorInfo","getErrorMessage","isFreeTrialError","apiResponse","apiError","code","streamRequest","errorMessage","errorText","errorData","cancelRequest","from","entries","forEach","key","cancelAllRequests","clear","getAgents","URLSearchParams","append","queryString","createAgent","getAgent","updateAgent","formData","String","deleteAgent","replicateAgent","getAgentStats","getAgentSettings","updateAgentSettings","settings","getProjectPlugins","updateProjectPlugin","pluginId","getMessages","sendMessage","sendMessageStream","onChunk","onError","onComplete","reader","stream","getReader","decoder","TextDecoder","buffer","done","read","decode","lines","pop","line","getMessageById","messageId","updateMessageFeedback","feedback","getCitation","citationId","previewCitationFile","uploadFile","file","getTrafficReport","getQueriesReport","getConversationsReport","getAnalysisReport","interval","getPages","limit","crawl_status","index_status","deletePage","pageId","reindexPage","getPageMetadata","updatePageMetadata","getLicenses","createLicense","getLicense","licenseId","updateLicense","deleteLicense","getSources","createSitemapSource","sitemap_path","executive_js","data_refresh_frequency","create_new_pages","remove_unexist_pages","refresh_existing_pages","uploadFileSource","updateSourceSettings","sourceId","deleteSource","instantSyncSource","getCustomerIntelligence","getUserLimits","getUserProfile","updateUserProfile","getDemoUsageStats","startTime","cleanupDemoSession","isClientInitialized","Logger","isClient","formatMessage","entry","level","category","stack","formatted","toUpperCase","writeToFile","toISOString","logs","warn","getLogs","clearLogs","authCheck","authError","navigation","route","storeAction","store","action","buttonVariants","cva","variants","variant","default","destructive","outline","secondary","ghost","link","premium","size","sm","lg","xl","icon","defaultVariants","Button","React","className","asChild","loadingText","children","disabled","onClick","props","ref","ripples","setRipples","handleClick","rect","currentTarget","getBoundingClientRect","rippleX","clientX","left","rippleY","clientY","top","rippleId","prev","x","y","ripple","_jsxs","_jsx","style","transform","width","height","animation","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","displayName","sizeVariants","xs","container","md","shapeVariants","circle","rounded","square","Avatar","agent","src","alt","shape","fallback","isSelected","imageError","setImageError","avatarUrl","chatbot_avatar","altText","project_name","sizeClasses","shapeClass","backgroundClass","handleImageError","renderFallbackIcon","iconClass","User","Bot","AgentAvatar","UserAvatar","CitationCard","citation","index","isExpanded","onToggle","onPreviewClick","source","ChevronDown","AnimatePresence","motion","div","initial","opacity","animate","exit","transition","duration","href","target","rel","ExternalLink","FileText","CitationList","onCitationClick","maxVisible","expanded","setExpanded","useState","Set","showAll","setShowAll","visibleCitations","hasMore","BookOpen","idx","delay","has","newExpanded","add","toggleExpanded","MessageDetails","details","setIsExpanded","handleCopyValue","toast","success","Info","ChevronUp","detailsText","Copy","user_id","DetailRow","label","onCopy","conversation_id","updated_at","toLocaleString","user_ip","user_agent","truncate","external_id","request_source","CodeBlock","language","copied","setCopied","SyntaxHighlighter","oneDark","customStyle","margin","borderRadius","fontSize","StreamingCursor","MessageContent","isStreaming","cleanedContent","ReactMarkdown","remarkPlugins","remarkGfm","components","match","exec","a","MessageActions","onFeedback","setFeedback","handleFeedback","ThumbsUp","ThumbsDown","handleRegenerate","RotateCw","Message","isLast","isUser","role","DemoModeContext","createContext","isRuntimeDemoMode","isInitialized","useDemoModeContext","useContext","Spinner","Loader2","Skeleton","LoadingOverlay","visible","blur","MessageSkeleton","isAssistant","_","ConversationSkeleton","TooltipProvider","TooltipPrimitive","Tooltip","TooltipTrigger","TooltipContent","sideOffset","SpeechToTextButton","onTranscription","onTranscriptionStart","onTranscriptionEnd","isMobile","isRecording","setIsRecording","isProcessing","setIsProcessing","recordingDuration","setRecordingDuration","mediaRecorderRef","useRef","audioChunksRef","recordingTimeoutRef","durationIntervalRef","stopRecording","useCallback","current","stop","startRecording","mediaDevices","getUserMedia","audio","mimeType","MediaRecorder","isTypeSupported","mediaRecorder","ondataavailable","onstop","audioBlob","Blob","getTracks","processAudio","elapsed","FileReader","readAsDataURL","onloadend","base64Data","result","__demoOpenAIKey","catch","onerror","isActive","formatDuration","seconds","padStart","MicOff","Mic","AnimatedVoiceIcon","barHeights","bars","gap","animationDelay","background","DropdownMenu","DropdownMenuPrimitive","DropdownMenuTrigger","inset","ChevronRight","DropdownMenuContent","DropdownMenuItem","checked","Check","Circle","DropdownMenuLabel","DropdownMenuSeparator","FileChip","onRemove","fileIcon","scale","_Fragment","progress","AlertCircle","X","FileUploadButton","onUpload","fileInputRef","multiple","accept","onChange","files","click","Paperclip","RESPONSE_SOURCES","description","MessageSquare","Brain","Settings","CHATBOT_MODELS","capabilities","Sparkles","Zap","COMMON_PERSONAS","AGENT_CAPABILITIES","enterprise","ChatInput","onSend","placeholder","maxLength","onVoiceClick","input","setInput","setFiles","isTranscribing","setIsTranscribing","isLoadingSettings","setIsLoadingSettings","showSettings","setShowSettings","textareaRef","currentAgent","useAgentStore","getSettings","updateSettings","updateLocalSettings","useChatSettingsStore","response_source","chatbot_model","custom_persona","agent_capability","loadAgentSettings","loadedSettings","useEffect","updateSetting","updates","validModels","m","adjustTextareaHeight","textarea","scrollHeight","maxHeight","handleSubmit","preventDefault","fileObjects","f","focus","handleFileUpload","newFiles","uploadFiles","simulateUpload","getRootProps","getInputProps","isDragActive","useDropzone","onDrop","noClick","noKeyboard","reduce","acc","maxSize","canSend","handleTranscription","prevInput","newInput","handleTranscriptionStart","handleTranscriptionEnd","Upload","removeFile","fileId","onSubmit","onKeyDown","shiftKey","rows","overflowY","Send","SlidersHorizontal","align","Icon","model","persona","capability","TypingIndicator","iconSizeClasses","display","parent","parentElement","createElement","innerHTML","appendChild","AgentItem","onSelect","onSettingsClick","is_chat_active","stopPropagation","AgentSelector","isOpen","setIsOpen","isSelectingAgent","setIsSelectingAgent","loadingSettings","setLoadingSettings","dropdownRef","agents","fetchAgents","loadMoreAgents","selectAgent","setAgents","paginationMeta","fetchAgentSettings","agentsNeedingSettings","agentsToLoad","newSet","settingsPromises","agentId","results","Promise","all","updatedAgents","handleClickOutside","contains","removeEventListener","handleRefresh","handleSelectAgent","RefreshCw","willOpen","location","BarChart3","totalCount","useMediaQuery","query","matches","setMatches","media","matchMedia","listener","useBreakpoint","isTablet","isDesktop","isLargeScreen","isTouchDevice","isMobileOrTablet","isTabletOrDesktop","CitationDetailsModal","onClose","setLoading","setError","citationData","setCitationData","effectiveProjectId","fetchCitationDetails","parseInt","hasImage","image","err","Loader","Globe","ImageIcon","CitationFilePreview","fileName","fileContent","setFileContent","contentType","setContentType","fetchFilePreview","content_type","contentLength","handleDownload","blob","URL","createObjectURL","download","removeChild","revokeObjectURL","Download","ConversationManager","maxConversations","currentConversationId","onConversationChange","onCreateConversation","refreshKey","setConversations","editingId","setEditingId","editTitle","setEditTitle","loadConversations","stored","handleEditSave","updated","MessageCircle","strokeLinecap","strokeLinejoin","handleCreateConversation","Plus","autoFocus","handleSelectConversation","createdAt","handleEditStart","Edit2","filtered","handleDelete","Trash2","MessageErrorDisplay","propStatusCode","onRetry","parsedStatusCode","statusMatch","finalStatusCode","errorDetails","getErrorDetails","iconClassName","textClassName","UserX","showSupport","Search","CreditCard","supportUrl","ServerCrash","showRetry","XCircle","WidgetContext","WidgetProvider","widgetInstance","Provider","createMessageStore","agentStore","conversationStore","MESSAGES_STORAGE_KEY","saveMessagesToStorage","cache","streamingMessage","__customgpt_demo_mode","getState","agentName","messageLength","hasFiles","hasSessionId","isNew","message_count","userMessage","addMessage","assistantMessage","messageContent","resolve","demoResponse","updateStreamingMessage","finalMessage","prompt","hasContent","contentPreview","streamError","messageData","openai_response","fallbackError","loadMessages","cachedMessages","loadMessagesFromStorage","newMessages","existingIndex","findIndex","clearMessages","removeItem","cancelStreaming","globalStreamManager","cancelAllStreams","getMessagesForConversation","convId","messageIndex","updatedMessages","reset","clearError","setMessagesForConversation","createConversationStore","CONVERSATIONS_STORAGE_KEY","ACTIVITY_STORAGE_KEY","saveConversationsToStorage","loadConversationsFromStorage","loadActivityFromStorage","lastConversationActivity","widgetConvKey","widgetConvIds","allConversations","widgetConversations","conv","totalFromAPI","widgetSpecific","cached","cachedConversations","sessionConversations","totalCached","sessionSpecific","sessionIdForConv","created_at","deleted_at","existingConvIds","widgetSessionId","activity","saveActivityToStorage","createAgentStore","AGENTS_STORAGE_KEY","SELECTED_AGENT_KEY","saveAgentsToStorage","saveSelectedAgentToStorage","loadAgents","widgetKey","widget","hasWidget","configuredAgentId","config","singleAgent","is_shared","team_id","cachedAgents","loadAgentsFromStorage","selectedAgentId","loadSelectedAgentFromStorage","selectedAgent","demoAgents","updatedAgent","messages_sent","users_interacted","last_message_at","WidgetStoreContext","WidgetStoreProvider","storesRef","messageStore","stores","useIsInWidgetContext","useWidgetStores","useMessageStore","isInWidget","widgetStores","globalStore","useGlobalMessageStore","widgetStore","useStore","useGlobalConversationStore","useGlobalAgentStore","ThemeManager","easing","crossfade","registerBuiltInThemes","initialize","canvas","currentTheme","init","registerTheme","registration","registeredThemes","unregisterTheme","themeId","getAvailableThemes","values","reg","getThemeMetadata","switchTheme","transitionOptions","isTransitioning","callbacks","onThemeError","newTheme","performThemeTransition","getCurrentTheme","getCurrentThemeId","setCallbacks","draw","displayWidth","displayHeight","projCenterX","projCenterY","deltaTime","drawTransition","onUserSpeaking","transitionTheme","onProcessing","onAiSpeaking","setMousePosition","canvasWidth","canvasHeight","setHovering","hovering","getPerformanceMetrics","dispose","then","DefaultTheme","performanceProfile","previewColors","previewDescription","StarfieldTheme","JarvisTheme","LegoTheme","StarWarsTheme","OceanWaveTheme","NFTTheme","NothingPhoneTheme","MinecraftTheme","FuturisticTheme","VintageModernTheme","AuroraTheme","oldTheme","oldThemeId","transitionProgress","onTransitionStart","performance","currentTime","applyEasing","completeTransition","requestAnimationFrame","onThemeChange","onTransitionComplete","tempCanvas1","tempCanvas2","tempCtx1","getContext","tempCtx2","clearRect","globalAlpha","drawImage","Canvas","forwardRef","internalRef","canvasRef","themeManagerRef","isInitializedRef","themeManager","resizeCanvas","innerWidth","innerHeight","debouncedResize","func","args","debounce","handleMouseMove","lastCall","timeSinceLastCall","throttle","handleMouseEnter","handleMouseLeave","animationFrameId","lastTime","frameInterval","frameCount","fpsTime","currentFPS","render","currentWidth","currentHeight","currentProjCenterX","currentProjCenterY","cancelAnimationFrame","getThemeManager","useVoiceSettingsStore","selectedVoice","selectedPersona","isVoiceModalOpen","setVoice","voice","setPersona","setVoiceModalOpen","VoiceSettings","previewVoice","setPreviewVoice","previewPersona","setPreviewPersona","desc","StreamingTTSManager","initAudioContext","audioContext","AudioContext","webkitAudioContext","resume","addTextChunk","audioBuffer","textToSpeech","audioQueue","isPlaying","playNextChunk","addAudioBuffer","addAudioBufferWithId","chunkId","pendingChunks","nextExpectedChunkId","response_format","arrayBuffer","decodeAudioData","onPlaybackComplete","shift","currentSource","createBufferSource","connect","destination","onended","stopPlayback","resetChunkCounter","isCurrentlyPlaying","getQueueLength","onPlaybackCompleted","callback","onStreamingError","destroy","close","speechManager","debug","stopSourceIfNeeded","audioLength","audioDuration","onReset","sourceIsStarted","streamingTTS","validate","sendData","createAudioBlob","wavBuffer","utils","encodeWAV","samples","sendStreamingData","voiceSettings","conversationLength","conversationThusFar","audioSize","lastMessages","preview","base64Encode","__demoCustomGPTKey","processStreamingResponse","handleError","fullResponse","transcript","currentStreamingActive","onStreamingTextChunk","audioUrl","audioId","queueAudioChunk","queueAudioChunkById","responseLength","onTranscriptReceived","onResponseReceived","onStreamingComplete","releaseLock","audioDataUrl","numericChunkId","sampleRate","numberOfChannels","clonedBlob","minDuration","valid","hasCallbacks","setProjectId","setSessionId","setVoiceSettings","onDebug","str","TextEncoder","encode","btoa","fromCharCode","Uint8Array","base64Decode","base64","binaryStr","atob","char","charCodeAt","clearConversation","getConversationThusFar","setConversationHistory","cleanedMessages","msg","messageCount","originalCount","stopAudio","parseMarkdownForVoice","encrypt","decrypt","encrypted","isValidApiKey","trimmedKey","test","STORAGE_KEY","OPENAI_STORAGE_KEY","ENCRYPTION_KEY","SESSION_KEY","SESSION_TIMEOUT","useDemoStore","openAIApiKey","encryptionKey","isAuthenticated","sessionStartTime","sessionTimeout","setApiKey","encKey","array","crypto","getRandomValues","byte","generateKey","sessionInfo","setOpenAIApiKey","clearApiKey","validateSession","initializeFromStorage","restoreSession","encryptedOpenAI","openAIKey","VoiceModalContent","projectName","setTranscript","agentResponse","setAgentResponse","isManualRecording","setIsManualRecording","setMediaRecorder","apiKeyError","setApiKeyError","isAgentSpeaking","setIsAgentSpeaking","isSettingsOpen","setIsSettingsOpen","voiceState","setVoiceState","isStreamingText","setIsStreamingText","streamingResponse","setStreamingResponse","currentUserMessageId","setCurrentUserMessageId","voiceConversation","setVoiceConversation","checkOpenAIKeyAvailability","vad","useMicVAD","preSpeechPadFrames","positiveSpeechThreshold","negativeSpeechThreshold","minSpeechFrames","startOnLoad","workletURL","modelURL","onSpeechStart","onSpeechEnd","onVADMisfire","onMisfire","sort","b","setupConversation","placeholderUserMessage","targetConversation","errorMsg","newTitle","updatedUserMessage","textChunk","newText","cleanResponse","onStreamingAudioReady","listening","pause","errored","handleToggleListening","recoveryError","permissionError","vadError","handleManualRecording","echoCancellation","noiseSuppression","autoGainControl","recorder","chunks","decodedAudio","channelData","getChannelData","audioArray","resampleRatio","newLength","Float32Array","srcIndex","srcIndexFloor","srcIndexCeil","fraction","hasAutoStarted","setHasAutoStarted","handleStopSpeech","jsx","global","pointerEvents","RotateLoader","color","AlertTriangle","flexDirection","zIndex","animationDirection","animationDuration","StopCircle","VoiceModal","DEFAULT_EXAMPLE_PROMPTS","ExamplePromptCard","WelcomeMessage","onPromptClick","exampleQuestions","setExampleQuestions","example_questions","questionCount","fetchExampleQuestions","MessageArea","scrollRef","isLoadingMessages","setIsLoadingMessages","prevConversationId","setPrevConversationId","selectedCitationId","setSelectedCitationId","citationModalOpen","setCitationModalOpen","previewCitationId","setPreviewCitationId","previewModalOpen","setPreviewModalOpen","setIsFreeTrialMode","freeTrialFlag","conversationMessages","scrollBehavior","scrollTo","behavior","handleCitationClick","citationIndex","citationTitle","handlePreviewClick","lastUserMessage","filteredMessages","handleMessageFeedback","ChatHeader","onAgentSettings","enableConversationManagement","conversationRefreshKey","ChatContainer","threadId","onMessage","setCurrentConversationId","setIsVoiceModalOpen","voiceError","setVoiceError","agentCount","hasCurrentAgent","currentAgentName","initializeAgents","switchConversation","newConv","configuration","fileCount","isAuthError","handleVoiceClick","available","ConversationDetailsModal","onExport","onShare","formatFullTimestamp","weekday","year","month","day","hour","minute","second","timeZoneName","Hash","Calendar","Clock","created_by","Share2","DeleteConversationDialog","conversationName","onConfirm","onCancel","isDeleting","setIsDeleting","ConversationItem","onDelete","onRename","isEditing","setIsEditing","editName","setEditName","showMenu","setShowMenu","showDetails","setShowDetails","showDetailsModal","setShowDetailsModal","showDeleteDialog","setShowDeleteDialog","isLoading","setIsLoading","inputRef","menuRef","select","handleSaveEdit","onBlur","MoreHorizontal","Edit3","shareUrl","origin","ConversationSidebar","isCollapsed","onConversationSelect","setSearchQuery","isCreating","setIsCreating","showSortFilter","setShowSortFilter","setSearchMode","setDateFilter","isSearching","setIsSearching","debouncedSearch","handleSearchModeChange","filteredConversations","handleRenameConversation","newName","handleSearch","Filter","handleDateFilterChange","Link","handleDeleteConversation","ChatLayout","showSidebar","sidebarCollapsed","setSidebarCollapsed","mobileSidebarOpen","setMobileSidebarOpen","storeCurrentConversation","handleToggleSidebar","CustomGPTWidget","theme","position","enableCitations","enableFeedback","isolateConversations","modePrefix","containerId","uniqueId","generateSessionId","instanceKey","__customgpt_widget_instance","agentsResponse","fallbackAgent","createContainer","require","currentConv","fullConversation","setState","__customgpt_widget_instances","__customgpt_active_widget_session","getElementById","setupFloatingStyles","assign","boxShadow","overflow","backgroundColor","classList","bottom","right","createRoot","WidgetApp","currentConvId","handleClose","Toaster","closeButton","toastOptions","marginTop","open","storeConversations","saveConversations","updateConversationTitle","DOMException","cleanupOldConversations","recent","onOpen","toggle","unmount","parentNode","updateConfig","newConfig","refresh","isOpened","CustomGPTWidgetAPI","BaseTheme","super","sphereRadius","gemini","idle","g","gradient","userSpeaking","processing","aiSpeaking","hover","instagram","ocean","sunset","aurora","particlePool","ObjectPool","z","velX","velY","velZ","age","dead","projX","projY","alpha","attack","hold","decay","initValue","holdValue","lastValue","stuckTime","accelX","accelY","accelZ","particle","next","maxParticles","setColor","getColorPalette","onInit","getMaxParticles","onDraw","centerX","centerY","updateColors","updateParticles","renderParticles","onStateChange","newState","palette","VoiceState","USER_SPEAKING","framesPerRotation","colorTransitionSpeed","numToAddEachFrame","particleAlpha","particleRad","gravity","PROCESSING","AI_SPEAKING","IDLE","getThemeSpecificMetrics","particleCount","currentParticleCount","colorScheme","currentColorScheme","setColorScheme","scheme","colorSchemes","targetR","targetG","targetB","currentR","currentG","currentB","wait","dynamicNumParticles","mouseInfluence","particlesToCreate","createParticle","dynamicTurnSpeed","PI","turnAngle","theta","phi","acos","mouseDistortion","mouseBias","normalizedMouseX","normalizedMouseY","x0","sin","cos","y0","z0","velocityMultiplier","addParticle","sphereCenterY","sphereCenterZ","alphaMultiplier","vx0","vy0","vz0","newParticle","acquire","particleList","first","sinAngle","cosAngle","zMax","focalLength","nextParticle","randAccelX","randAccelY","randAccelZ","rotX","rotZ","radiusScale","updateParticleAlpha","recycleParticle","renderParticle","finalAlpha","zeroAlphaDepth","particleSize","fillStyle","beginPath","arc","shouldEnableGlow","release","onDispose","nestedData","paginatedResponse","settingsResponse","agentWithSettings","nextPage","newAgents","responseTotal","responsePage","findAgent","newAgent","filteredAgents","PerformanceMonitor","targetFPS","update","frameTime","fps","fpsHistory","frameTimeHistory","maxHistorySize","avgFPS","sum","performanceRatio","criticalThreshold","onPerformanceCritical","warningThreshold","onPerformanceWarning","onFPSUpdate","getCurrentMetrics","DeviceCapabilityDetector","detectCapabilities","detectMobile","supportsWebGL","detectWebGL","hardwareConcurrency","memoryGB","memory","jsHeapSizeLimit","performanceLevel","benchmarkPerformance","isLowPowerDevice","detectLowPowerDevice","cores","operations","benchmark","getCapabilities","createFn","resetFn","initialSize","obj","inUse","oldest","getStats","StreamHandler","retryAttempts","retryDelay","processStream","abortController","currentMessage","isComplete","cancel","processLine","onCitation","getCurrentMessage","maxConcurrentStreams","startStream","streamId","streams","cancelStream","handler","getActiveStreams","getStreamStatus","exists","getActiveStreamCount","THEME_COOKIE_NAME","getThemeFromCookie","themeCookie","cookie","applyThemeToDocument","documentElement","remove","setTheme","setThemeCookie","useConfigStore","setBaseURL","setThemeUtil","initializeTheme","useUIStore","sidebarOpen","settingsOpen","setSidebarOpen","setSettingsOpen","setFontSize","formatDate","getDefaultDateRange","endDate","startDate","setDate","getDate","useAnalyticsStore","analytics","dateRange","fetchAnalytics","trafficReport","queriesReport","conversationsReport","analysisReport","conversationsTotal","queriesTotal","avgQueriesPerConv","average_queries_per_conversation","Number","analyticsData","active","trend","item","created_at_interval","queries_number","queries","successful","query_status","failed","avgResponseTime","topQueries","traffic","uniqueUsers","sources","request_source_number","pageViews","avgSessionDuration","bounceRate","users","statistics","totalMessages","avgMessagesPerConversation","satisfactionRate","responseAccuracy","setDateRange","exportAnalytics","format","jsonData","usePageStore","pages","paginationInfo","fetchPages","setQueryParams","useSourceStore","syncStatus","syncing","fetchSources","allSources","sitemaps","apiSource","uploads","fetchSource","uploadSources","uploadPromises","reject","updateSource","bulkDelete","sourceIds","syncSources","setFilter","selectSource","useProfileStore","profile","fetchProfile","updateProfile","profilePhoto","errors","profile_photo","flat","activeRequests","useProjectSettingsStore","settingsLoading","settingsError","plugins","pluginsLoading","pluginsError","stats","statsLoading","statsError","fetchSettings","requestKey","settingsUpdate","question","File","fetchPlugins","pluginsData","updatePlugin","enabled","plugin","fetchStats","statsData","useLicenseStore","licenses","fetchLicenses","dataType","errorStatus","errorCode","responseText","dataStructure","licenseKey","newLicense","license","licenseName","initializeStores","cleanupStores","LODManager","initialLOD","particleReduction","effectsDisabled","glowDisabled","simplifiedRendering","skipFrames","currentLOD","lodProfiles","updateLOD","metrics","lastPerformanceCheck","performanceHistory","adjustLODBasedOnFPS","getCurrentLOD","shouldSkipFrame","FrustumCuller","updateBounds","bounds","near","far","isVisible","cullParticles","particles","getCullingStats","culled","cullingRatio","BatchRenderer","addToBatch","glowEnabled","effectsEnabled","batchKey","batches","batch","maxBatchSize","renderBatches","lodSettings","save","shouldRenderEffects","shouldRenderGlow","renderSimplifiedBatch","renderFullBatch","restore","moveTo","renderEffects","renderGlow","glowGradient","createRadialGradient","addColorStop","clearBatches","getBatchStats","batchCount","totalParticles","largestBatch","avgBatchSize","MemoryOptimizer","checkMemoryPressure","pressure","shouldCleanup","memInfo","usedJSHeapSize","memoryPressureThreshold","lastGCTime","gcInterval","getOptimizationSuggestions","reduceParticles","clearCaches","disableEffects","simplifyRendering","AnimationController","setTargetFPS","setupVisibilityHandling","actualInterval","shouldRenderFrame","lastFrameTime","getFrameTiming","shouldThrottle","ThemePerformanceManager","lodManager","culler","batchRenderer","memoryOptimizer","animationController","shouldRender","memoryPressure","optimizationActive","getManagers","lod","getPerformanceReport","culling","batching","performanceMonitor","performanceSettings","enableEffects","enableGlow","qualityLevel","initializePerformanceCallbacks","updateDimensions","initializePerformanceManager","setupPerformanceSettings","performanceManager","perfUpdate","currentLODSettings","updateTiming","updateStateTransition","updateMouseInfluence","clearCanvas","shouldShowPerformanceOverlay","drawPerformanceOverlay","setTargetState","mouseX","mouseY","targetMouseInfluence","isHovering","onMouseMove","onHoverChange","normalizedX","normalizedY","detector","getOptimalParticleCount","quality","light","low","medium","high","heavy","adjustPerformanceSettings","targetState","stateTransition","currentState","stateTransitionSpeed","deltaTimeAccumulator","animationTime","fillRect","font","fillText","getStateColor","idleColor","activeColor","getMouseInfluencedValue","baseValue","influencedValue","shouldEnableEffects","baseMax","getCurrentLODLevel","shouldUseSimplifiedRendering","getPerformanceManagers","isParticleVisible","managers","webpackEmptyContext","req","clearSettings","newSettings","citationIds","validCitationIds","validIds","isNaN","arr","indexOf","original","validateCitationIds","hasUrl","requested","fetched","hasSourceIds","requestData","source_ids","citationDetails","updatedCurrent","prompt_id","apiMessages","latestApiMessage","user_query","existingCitations","response_feedback","reaction","hasDetails","citationCount","enrichmentError","setupError","currentAgentFor403","promptId","promptIdMatch","updatedMessage","feedbackValue","availableConversations","messageTypes","formattedMessages","baseTimestamp","formattedCount","firstMessageTime","lastMessageTime","localSendingMessages","mergedMessages","localMsg","insertIndex","splice","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","n","getter","__esModule","getPrototypeOf","ns","def","getOwnPropertyNames","definition","o","defineProperty","enumerable","promises","u","miniCssF","globalThis","Function","prop","prototype","hasOwnProperty","script","needAttach","scripts","getElementsByTagName","getAttribute","charset","nc","setAttribute","onScriptComplete","onload","doneFns","bind","head","Symbol","toStringTag","installedChunks","installedChunkData","promise","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}