{"version":3,"file":"customgpt-widget.js","mappings":"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","sources":["webpack://CustomGPTWidget/webpack/universalModuleDefinition","webpack://CustomGPTWidget/webpack/runtime/chunk loaded","webpack://CustomGPTWidget/webpack/runtime/create fake namespace object","webpack://CustomGPTWidget/webpack/runtime/load script","webpack://CustomGPTWidget/./src/components/ui/button.tsx","webpack://CustomGPTWidget/./src/components/ui/avatar.tsx","webpack://CustomGPTWidget/./src/components/chat/CitationList.tsx","webpack://CustomGPTWidget/./src/components/chat/MessageDetails.tsx","webpack://CustomGPTWidget/./src/components/chat/Message.tsx","webpack://CustomGPTWidget/./src/contexts/DemoModeContext.tsx","webpack://CustomGPTWidget/./src/components/ui/loading.tsx","webpack://CustomGPTWidget/./src/components/ui/tooltip.tsx","webpack://CustomGPTWidget/./src/components/voice/SpeechToTextButton.tsx","webpack://CustomGPTWidget/./src/components/voice/AnimatedVoiceIcon.tsx","webpack://CustomGPTWidget/./src/components/ui/dropdown-menu.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatInput.tsx","webpack://CustomGPTWidget/./src/components/chat/TypingIndicator.tsx","webpack://CustomGPTWidget/./src/components/chat/AgentSelector.tsx","webpack://CustomGPTWidget/./src/hooks/useMediaQuery.ts","webpack://CustomGPTWidget/./src/widget/isolated-toast.tsx","webpack://CustomGPTWidget/./src/widget/WidgetContext.tsx","webpack://CustomGPTWidget/./src/widget/debug-utils.ts","webpack://CustomGPTWidget/./src/store/widget-stores/messages.ts","webpack://CustomGPTWidget/./src/store/widget-stores/conversations.ts","webpack://CustomGPTWidget/./src/store/widget-stores/agents.ts","webpack://CustomGPTWidget/./src/widget/WidgetStoreContext.tsx","webpack://CustomGPTWidget/./src/components/chat/CitationDetailsModal.tsx","webpack://CustomGPTWidget/./src/components/chat/CitationFilePreview.tsx","webpack://CustomGPTWidget/./src/components/chat/MessageErrorDisplay.tsx","webpack://CustomGPTWidget/./src/hooks/useWidgetStore.ts","webpack://CustomGPTWidget/./src/lib/voice/themes/ThemeManager.ts","webpack://CustomGPTWidget/./src/components/voice/Canvas.tsx","webpack://CustomGPTWidget/./src/lib/utils/throttle.ts","webpack://CustomGPTWidget/./src/store/voice-settings.ts","webpack://CustomGPTWidget/./src/components/voice/VoiceSettings.tsx","webpack://CustomGPTWidget/./src/lib/voice/streaming-tts.ts","webpack://CustomGPTWidget/./src/lib/voice/speech-manager.ts","webpack://CustomGPTWidget/./src/lib/voice/utils.ts","webpack://CustomGPTWidget/./src/lib/crypto.ts","webpack://CustomGPTWidget/./src/store/demo.ts","webpack://CustomGPTWidget/./src/components/voice/VoiceModal.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatContainer.tsx","webpack://CustomGPTWidget/./src/components/ui/select.tsx","webpack://CustomGPTWidget/./src/components/ui/simple-select.tsx","webpack://CustomGPTWidget/./src/components/chat/ConversationDetailsModal.tsx","webpack://CustomGPTWidget/./src/components/chat/DeleteConversationDialog.tsx","webpack://CustomGPTWidget/./src/components/chat/ConversationSidebar.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatLayout.tsx","webpack://CustomGPTWidget/./src/widget/FloatingButton.tsx","webpack://CustomGPTWidget/./src/widget/index.tsx","webpack://CustomGPTWidget/./src/store/conversations.ts","webpack://CustomGPTWidget/./src/lib/utils.ts","webpack://CustomGPTWidget/./src/lib/voice/utils/math.ts","webpack://CustomGPTWidget/./src/lib/logger.ts","webpack://CustomGPTWidget/./src/lib/voice/themes/DefaultTheme.ts","webpack://CustomGPTWidget/./src/store/agents.ts","webpack://CustomGPTWidget/./src/lib/voice/utils/performance.ts","webpack://CustomGPTWidget/./src/lib/streaming/handler.ts","webpack://CustomGPTWidget/./src/lib/voice/themes/IVoiceTheme.ts","webpack://CustomGPTWidget/./src/lib/theme.ts","webpack://CustomGPTWidget/./src/store/config.ts","webpack://CustomGPTWidget/./src/store/ui.ts","webpack://CustomGPTWidget/./src/store/analytics.ts","webpack://CustomGPTWidget/./src/store/pages.ts","webpack://CustomGPTWidget/./src/store/sources.ts","webpack://CustomGPTWidget/./src/store/profile.ts","webpack://CustomGPTWidget/./src/store/project-settings.ts","webpack://CustomGPTWidget/./src/store/licenses.ts","webpack://CustomGPTWidget/./src/store/index.ts","webpack://CustomGPTWidget/./src/lib/voice/themes/PerformanceOptimizations.ts","webpack://CustomGPTWidget/./src/lib/voice/themes/BaseTheme.ts","webpack://CustomGPTWidget/./node_modules/.pnpm/onnxruntime-web@1.22.0/node_modules/onnxruntime-web/dist/ sync","webpack://CustomGPTWidget/./src/store/chat-settings.ts","webpack://CustomGPTWidget/./src/lib/constants/demo-limits.ts","webpack://CustomGPTWidget/./src/lib/analytics/usage-tracker.ts","webpack://CustomGPTWidget/./src/lib/constants/error-messages.ts","webpack://CustomGPTWidget/./src/lib/api/proxy-client.ts","webpack://CustomGPTWidget/./src/lib/api/direct-client.ts","webpack://CustomGPTWidget/./src/lib/api/client.ts","webpack://CustomGPTWidget/./src/store/messages.ts","webpack://CustomGPTWidget/webpack/bootstrap","webpack://CustomGPTWidget/webpack/runtime/compat get default export","webpack://CustomGPTWidget/webpack/runtime/define property getters","webpack://CustomGPTWidget/webpack/runtime/ensure chunk","webpack://CustomGPTWidget/webpack/runtime/get javascript chunk filename","webpack://CustomGPTWidget/webpack/runtime/get mini-css chunk filename","webpack://CustomGPTWidget/webpack/runtime/global","webpack://CustomGPTWidget/webpack/runtime/hasOwnProperty shorthand","webpack://CustomGPTWidget/webpack/runtime/make namespace object","webpack://CustomGPTWidget/webpack/runtime/publicPath","webpack://CustomGPTWidget/webpack/runtime/jsonp chunk loading","webpack://CustomGPTWidget/webpack/runtime/nonce","webpack://CustomGPTWidget/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"CustomGPTWidget\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CustomGPTWidget\"] = factory();\n\telse\n\t\troot[\"CustomGPTWidget\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; (typeof current == 'object' || typeof current == 'function') && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"CustomGPTWidget:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","/**\n * Button Component\n * \n * Reusable button component with multiple variants and sizes.\n * Built with class-variance-authority for type-safe styling.\n * \n * Variants:\n * - default: Primary brand button with shadow\n * - destructive: Red danger button for destructive actions\n * - outline: Secondary button with border\n * - secondary: Gray background button\n * - ghost: Transparent button with hover state\n * - link: Text-only button styled as link\n * \n * Sizes:\n * - default: Standard size (h-10)\n * - sm: Small size (h-8)\n * - lg: Large size (h-12)\n * - icon: Square icon button (10x10)\n * \n * Features:\n * - Full keyboard accessibility\n * - Focus ring for keyboard navigation\n * - Disabled state handling\n * - Smooth transitions\n * - Responsive to all button HTML attributes\n * \n * Usage examples:\n * <Button>Click me</Button>\n * <Button variant=\"destructive\">Delete</Button>\n * <Button size=\"sm\" variant=\"outline\">Cancel</Button>\n * <Button size=\"icon\" variant=\"ghost\"><Icon /></Button>\n * \n * Features:\n * - Comprehensive variant system with brand-consistent styling\n * - Professional color schemes aligned with design guidelines\n * - Loading states with integrated spinner animations\n * - Button group functionality for complex interfaces\n * - Full icon support with flexible positioning options\n */\n\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\n/**\n * Button variant configuration using class-variance-authority\n * \n * Base classes apply to all buttons, then variant-specific\n * classes are added based on the variant and size props.\n */\nconst buttonVariants = cva(\n  // Enhanced base classes with premium feel\n  'relative inline-flex items-center justify-center font-medium transition-all duration-200 ease-out focus-visible:outline-none disabled:opacity-50 disabled:cursor-not-allowed disabled:pointer-events-none transform-gpu active:scale-[0.98]',\n  {\n    variants: {\n      variant: {\n        default: [\n          'bg-primary text-primary-foreground shadow-sm',\n          'hover:bg-primary-hover hover:shadow-md hover:scale-[1.02]',\n          'focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2',\n          'active:bg-primary-active',\n          'transition-all duration-200',\n        ].join(' '),\n        destructive: [\n          'bg-destructive text-destructive-foreground shadow-sm',\n          'hover:bg-destructive/90 hover:shadow-md hover:scale-[1.02]',\n          'focus-visible:ring-2 focus-visible:ring-destructive/50 focus-visible:ring-offset-2',\n          'active:bg-destructive/80',\n        ].join(' '),\n        outline: [\n          'border border-input bg-background/50 backdrop-blur-sm',\n          'hover:bg-accent hover:text-accent-foreground hover:border-accent',\n          'focus-visible:ring-2 focus-visible:ring-accent/50 focus-visible:ring-offset-2',\n          'transition-all duration-200',\n        ].join(' '),\n        secondary: [\n          'bg-secondary text-secondary-foreground',\n          'hover:bg-secondary/80 hover:shadow-sm',\n          'focus-visible:ring-2 focus-visible:ring-secondary/50 focus-visible:ring-offset-2',\n        ].join(' '),\n        ghost: [\n          'hover:bg-accent hover:text-accent-foreground',\n          'focus-visible:ring-2 focus-visible:ring-accent/50 focus-visible:ring-offset-2',\n          'data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n        ].join(' '),\n        link: [\n          'text-primary underline-offset-4 hover:underline',\n          'focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2',\n          'hover:text-primary-hover',\n        ].join(' '),\n        premium: [\n          'bg-gradient-to-r from-primary to-primary-hover text-primary-foreground',\n          'shadow-md hover:shadow-lg hover:scale-[1.02]',\n          'focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2',\n          'before:absolute before:inset-0 before:bg-white/20 before:opacity-0',\n          'hover:before:opacity-100 before:transition-opacity before:duration-200',\n          'overflow-hidden',\n        ].join(' '),\n      },\n      size: {\n        default: 'h-10 rounded-lg px-4 py-2 text-sm',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-12 rounded-lg px-8 text-base',\n        xl: 'h-14 rounded-xl px-10 text-lg',\n        icon: 'h-10 w-10 rounded-lg',\n        'icon-sm': 'h-8 w-8 rounded-md',\n        'icon-lg': 'h-12 w-12 rounded-lg',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\n/**\n * Button component props\n * \n * Extends standard HTML button attributes with variant props\n * @property variant - Visual style variant\n * @property size - Button size preset\n * @property asChild - Whether to render as child component (for composition)\n */\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  loading?: boolean;\n  loadingText?: string;\n}\n\n/**\n * Button Component\n * \n * Forward ref component for proper ref handling in forms\n * and other use cases requiring direct DOM access.\n */\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ \n    className, \n    variant, \n    size, \n    asChild = false, \n    loading = false,\n    loadingText,\n    children,\n    disabled,\n    onClick,\n    ...props \n  }, ref) => {\n    const [ripples, setRipples] = React.useState<Array<{ x: number; y: number; id: number }>>([]);\n    \n    const handleClick = React.useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      if (loading || disabled) return;\n      \n      // Add ripple effect\n      const button = e.currentTarget;\n      const rect = button.getBoundingClientRect();\n      const rippleX = e.clientX - rect.left;\n      const rippleY = e.clientY - rect.top;\n      const rippleId = Date.now();\n      \n      setRipples(prev => [...prev, { x: rippleX, y: rippleY, id: rippleId }]);\n      \n      // Remove ripple after animation\n      setTimeout(() => {\n        setRipples(prev => prev.filter(ripple => ripple.id !== rippleId));\n      }, 600);\n      \n      // Call original onClick\n      onClick?.(e);\n    }, [loading, disabled, onClick]);\n    \n    return (\n      <button\n        className={cn(\n          buttonVariants({ variant, size, className }),\n          'relative overflow-hidden',\n          loading && 'cursor-wait'\n        )}\n        ref={ref}\n        disabled={loading || disabled}\n        onClick={handleClick}\n        {...props}\n      >\n        {/* Ripple effects */}\n        {ripples.map(ripple => (\n          <span\n            key={ripple.id}\n            className=\"absolute pointer-events-none\"\n            style={{\n              left: ripple.x,\n              top: ripple.y,\n              transform: 'translate(-50%, -50%)',\n            }}\n          >\n            <span className=\"block animate-ripple rounded-full bg-white/30 dark:bg-white/20\" \n              style={{\n                width: 0,\n                height: 0,\n                animation: 'ripple-expand 0.6s ease-out forwards',\n              }}\n            />\n          </span>\n        ))}\n        \n        {/* Loading spinner */}\n        {loading && (\n          <span className=\"absolute inset-0 flex items-center justify-center bg-inherit\">\n            <svg\n              className=\"animate-spin h-4 w-4\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              />\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              />\n            </svg>\n          </span>\n        )}\n        \n        {/* Button content */}\n        <span className={cn(\n          'relative z-10 inline-flex items-center',\n          loading && 'opacity-0'\n        )}>\n          {children}\n        </span>\n        \n        {/* Loading text */}\n        {loading && loadingText && (\n          <span className=\"absolute inset-0 flex items-center justify-center\">\n            <span className=\"ml-6\">{loadingText}</span>\n          </span>\n        )}\n      </button>\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };","/**\n * Avatar Component\n * \n * Reusable avatar component that displays agent avatars with fallback to default icons.\n * Supports different sizes, shapes, and fallback icons for various use cases.\n * \n * Features:\n * - Image loading with error handling\n * - Multiple size variants\n * - Customizable fallback icons\n * - Consistent styling across the application\n * - Accessibility support\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot, User } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport type { Agent } from '@/types';\n\nexport interface AvatarProps {\n  /** Agent/project data containing avatar information */\n  agent?: Agent | null;\n  /** Avatar image URL (alternative to agent prop) */\n  src?: string;\n  /** Alt text for the image */\n  alt?: string;\n  /** Size variant */\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  /** Shape variant */\n  shape?: 'circle' | 'rounded' | 'square';\n  /** Fallback icon type */\n  fallback?: 'bot' | 'user' | 'none';\n  /** Whether this avatar represents a selected/active state */\n  isSelected?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Avatar size configurations\n */\nconst sizeVariants = {\n  xs: {\n    container: 'w-4 h-4',\n    icon: 'w-2 h-2'\n  },\n  sm: {\n    container: 'w-6 h-6', \n    icon: 'w-3 h-3'\n  },\n  md: {\n    container: 'w-8 h-8',\n    icon: 'w-4 h-4'\n  },\n  lg: {\n    container: 'w-10 h-10',\n    icon: 'w-5 h-5'\n  },\n  xl: {\n    container: 'w-12 h-12',\n    icon: 'w-6 h-6'\n  }\n};\n\n/**\n * Avatar shape configurations\n */\nconst shapeVariants = {\n  circle: 'rounded-full',\n  rounded: 'rounded-lg', \n  square: 'rounded-none'\n};\n\n/**\n * Avatar Component\n * \n * Displays agent avatar with proper fallbacks and error handling.\n * \n * @param agent - Agent object containing avatar settings\n * @param src - Direct image URL (overrides agent avatar)\n * @param alt - Alt text for accessibility\n * @param size - Size variant (xs, sm, md, lg, xl)\n * @param shape - Shape variant (circle, rounded, square)\n * @param fallback - Fallback icon type\n * @param isSelected - Whether avatar represents selected state\n * @param className - Additional CSS classes\n */\nexport const Avatar: React.FC<AvatarProps> = ({\n  agent,\n  src,\n  alt,\n  size = 'md',\n  shape = 'circle',\n  fallback = 'bot',\n  isSelected = false,\n  className\n}) => {\n  const [imageError, setImageError] = React.useState(false);\n  \n  // Determine the avatar URL from props or agent settings\n  const avatarUrl = src || agent?.settings?.chatbot_avatar;\n  \n  // Generate alt text if not provided\n  const altText = alt || (agent?.project_name ? `${agent.project_name} avatar` : 'Avatar');\n  \n  // Get size and shape classes\n  const sizeClasses = sizeVariants[size];\n  const shapeClass = shapeVariants[shape];\n  \n  // Determine background color based on state\n  const backgroundClass = isSelected \n    ? 'bg-primary shadow-md' \n    : 'bg-muted hover:bg-accent transition-all duration-200';\n  \n  // Handle image load error\n  const handleImageError = () => {\n    setImageError(true);\n  };\n  \n  // Reset error state when avatar URL changes\n  React.useEffect(() => {\n    setImageError(false);\n  }, [avatarUrl]);\n  \n  // Render fallback icon\n  const renderFallbackIcon = () => {\n    if (fallback === 'none') return null;\n    \n    const iconClass = cn(\n      sizeClasses.icon,\n      isSelected ? 'text-primary-foreground' : 'text-muted-foreground'\n    );\n    \n    switch (fallback) {\n      case 'user':\n        return <User className={iconClass} />;\n      case 'bot':\n      default:\n        return <Bot className={iconClass} />;\n    }\n  };\n  \n  return (\n    <div className={cn(\n      'relative flex items-center justify-center flex-shrink-0 overflow-hidden',\n      'ring-2 ring-transparent',\n      'hover:ring-primary/20 hover:scale-105',\n      'transition-all duration-200',\n      isSelected && 'ring-primary ring-offset-2 ring-offset-background',\n      sizeClasses.container,\n      shapeClass,\n      backgroundClass,\n      className\n    )}>\n      {avatarUrl && !imageError ? (\n        <img\n          src={avatarUrl}\n          alt={altText}\n          className=\"w-full h-full object-cover\"\n          onError={handleImageError}\n          loading=\"lazy\"\n        />\n      ) : (\n        renderFallbackIcon()\n      )}\n      {/* Online indicator (optional) */}\n      {isSelected && (\n        <div className=\"absolute -bottom-0.5 -right-0.5 h-3 w-3 rounded-full bg-success border-2 border-background\" />\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Avatar Component\n * \n * Specialized avatar component for agent/project displays.\n * Uses 'bot' fallback by default and extracts name for alt text.\n * \n * @param agent - Agent object\n * @param size - Size variant\n * @param isSelected - Selection state\n * @param className - Additional classes\n */\nexport const AgentAvatar: React.FC<{\n  agent?: Agent | null;\n  size?: AvatarProps['size'];\n  isSelected?: boolean;\n  className?: string;\n}> = ({ agent, size = 'md', isSelected = false, className }) => {\n  return (\n    <Avatar\n      agent={agent}\n      size={size}\n      shape=\"circle\"\n      fallback=\"bot\"\n      isSelected={isSelected}\n      alt={agent?.project_name ? `${agent.project_name} avatar` : 'Agent avatar'}\n      className={className}\n    />\n  );\n};\n\n/**\n * User Avatar Component\n * \n * Specialized avatar component for user displays.\n * Uses 'user' fallback by default.\n * \n * @param src - Avatar image URL\n * @param size - Size variant  \n * @param className - Additional classes\n */\nexport const UserAvatar: React.FC<{\n  src?: string;\n  size?: AvatarProps['size'];\n  className?: string;\n}> = ({ src, size = 'md', className }) => {\n  return (\n    <Avatar\n      src={src}\n      size={size}\n      shape=\"circle\"\n      fallback=\"user\"\n      alt=\"User avatar\"\n      className={className}\n    />\n  );\n};","/**\n * Citation List Component\n * \n * Displays a list of source citations from the AI's response.\n * Shows where the information came from with expandable details.\n * \n * Features:\n * - Expandable citation cards\n * - Confidence score visualization\n * - Direct source links\n * - Show more/less functionality\n * - Smooth expand/collapse animations\n * - Citation numbering\n * - View details modal integration\n * \n * UI/UX:\n * - Compact card design\n * - Progressive disclosure pattern\n * - Visual confidence indicators\n * - Hover states for interactivity\n * - Staggered animation on load\n * \n * Citation Display:\n * - Title and source URL\n * - Content preview\n * - Confidence percentage\n * - External link to source\n * - Details button for modal\n * \n * Features:\n * - Advanced citation filtering and intelligent search capabilities\n * - Professional export functionality for research workflows\n * - Enhanced confidence visualization with detailed analytics\n * - Smart citation grouping by domain and source type\n * - Interactive tooltips and one-click copy functionality\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  BookOpen, \n  ChevronDown, \n  ExternalLink,\n  FileText \n} from 'lucide-react';\n\nimport type { CitationProps, Citation } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\n/**\n * Props for individual citation card\n * \n * @property citation - Citation data object\n * @property index - Display index (1-based)\n * @property isExpanded - Whether card is expanded\n * @property onToggle - Toggle expansion callback\n * @property onClick - Optional click handler for details\n * @property onPreviewClick - Optional click handler for file preview\n */\ninterface CitationCardProps {\n  citation: Citation;\n  index: number;\n  isExpanded: boolean;\n  onToggle: () => void;\n  onClick?: (citation: Citation) => void;\n  onPreviewClick?: (citation: Citation) => void;\n}\n\n/**\n * Citation Card Component\n * \n * Individual citation with expandable details.\n * Shows title, source, content, and confidence score.\n */\nconst CitationCard: React.FC<CitationCardProps> = ({\n  citation,\n  index,\n  isExpanded,\n  onToggle,\n  onClick,\n  onPreviewClick,\n}) => {\n  return (\n    <div className=\"border border-border rounded-lg overflow-hidden transition-all hover:border-border/80\">\n      <button\n        onClick={onToggle}\n        className=\"w-full px-3 py-2 flex items-center gap-3 hover:bg-accent transition-colors text-left\"\n      >\n        {/* Citation Index */}\n        <div className=\"flex-shrink-0 w-6 h-6 rounded bg-brand-100 flex items-center justify-center\">\n          <span className=\"text-xs font-medium text-brand-700\">{index}</span>\n        </div>\n        \n        {/* Citation Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"font-medium text-sm text-foreground line-clamp-1\">\n            {citation.title}\n          </div>\n          <div className=\"text-xs text-muted-foreground line-clamp-1\">\n            {citation.source || citation.url}\n          </div>\n        </div>\n        \n        {/* Expand Icon */}\n        <ChevronDown\n          className={cn(\n            'w-4 h-4 text-muted-foreground transition-transform flex-shrink-0',\n            isExpanded && 'rotate-180'\n          )}\n        />\n      </button>\n      \n      {/* Expanded Content */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: 'auto', opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"px-3 py-2 border-t border-border bg-accent\">\n              <p className=\"text-sm text-foreground mb-2\">\n                {citation.content}\n              </p>\n              \n              \n              {/* Actions */}\n              <div className=\"flex items-center gap-2\">\n                {citation.url && (\n                  <a\n                    href={citation.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"inline-flex items-center gap-1 text-xs text-brand-600 hover:text-brand-700 transition-colors\"\n                  >\n                    View source\n                    <ExternalLink className=\"w-3 h-3\" />\n                  </a>\n                )}\n                \n                {onClick && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onClick(citation)}\n                    className=\"h-6 px-2 text-xs\"\n                  >\n                    View details\n                  </Button>\n                )}\n                \n                {onPreviewClick && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onPreviewClick(citation)}\n                    className=\"h-6 px-2 text-xs\"\n                  >\n                    <FileText className=\"w-3 h-3 mr-1\" />\n                    Preview file\n                  </Button>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\n/**\n * Citation List Component\n * \n * Main component that renders a list of citations with progressive disclosure.\n * Handles expansion state and show more/less functionality.\n * \n * @param citations - Array of citation objects to display\n * @param onCitationClick - Optional handler for citation detail clicks\n * @param maxVisible - Maximum citations to show initially (default: 5)\n * @param className - Additional CSS classes\n */\nexport const CitationList: React.FC<CitationProps & { onPreviewClick?: (citation: Citation) => void }> = ({ \n  citations, \n  onCitationClick,\n  onPreviewClick,\n  maxVisible = 5,\n  className \n}) => {\n  // Track which citations are expanded\n  const [expanded, setExpanded] = useState<Set<string>>(new Set());\n  // Track whether to show all citations or just maxVisible\n  const [showAll, setShowAll] = useState(false);\n  \n  const visibleCitations = showAll ? citations : citations.slice(0, maxVisible);\n  const hasMore = citations.length > maxVisible;\n\n  /**\n   * Toggle citation expansion state\n   * \n   * Uses Set for efficient lookup and update of expanded citations\n   */\n  const toggleExpanded = (citationId: string) => {\n    const newExpanded = new Set(expanded);\n    if (expanded.has(citationId)) {\n      newExpanded.delete(citationId);\n    } else {\n      newExpanded.add(citationId);\n    }\n    setExpanded(newExpanded);\n  };\n\n  if (citations.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={cn('mt-4 space-y-2', className)}>\n      {/* Header */}\n      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n        <BookOpen className=\"w-4 h-4\" />\n        <span className=\"font-medium\">Sources</span>\n        <span className=\"text-muted-foreground\">({citations.length})</span>\n        \n        {hasMore && (\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => setShowAll(!showAll)}\n            className=\"ml-auto h-6 px-2 text-xs\"\n          >\n            {showAll ? 'Show less' : `Show all ${citations.length}`}\n          </Button>\n        )}\n      </div>\n      \n      {/* Citations */}\n      <div className=\"space-y-2\">\n        <AnimatePresence>\n          {visibleCitations.map((citation, idx) => (\n            <motion.div\n              key={citation.id}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.2, delay: idx * 0.05 }}\n            >\n              <CitationCard\n                citation={citation}\n                index={idx + 1}\n                isExpanded={expanded.has(citation.id)}\n                onToggle={() => toggleExpanded(citation.id)}\n                onClick={onCitationClick}\n                onPreviewClick={onPreviewClick}\n              />\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n      \n      {/* Load More Button */}\n      {hasMore && !showAll && (\n        <div className=\"pt-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setShowAll(true)}\n            className=\"w-full\"\n          >\n            Show {citations.length - maxVisible} more sources\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Message Details Component\n * \n * Displays additional metadata and information about a message\n * that's not shown in the main UI. Includes user ID, conversation ID,\n * metadata, and timestamps.\n * \n * Features:\n * - Collapsible details section\n * - Formatted metadata display\n * - Copy functionality for technical details\n * - Responsive layout\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { ChevronDown, ChevronUp, Copy, Info } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { cn, copyToClipboard } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport type { MessageDetails as MessageDetailsType } from '@/types';\n\ninterface MessageDetailsProps {\n  /** The message details to display */\n  details?: MessageDetailsType;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Format a key name to be more readable\n */\nconst formatKey = (key: string): string => {\n  return key\n    .split('_')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n};\n\n/**\n * Format a value for display\n */\nconst formatValue = (value: any): string => {\n  if (value === null || value === undefined) {\n    return 'N/A';\n  }\n  if (typeof value === 'object') {\n    return JSON.stringify(value, null, 2);\n  }\n  return String(value);\n};\n\nexport const MessageDetails: React.FC<MessageDetailsProps> = ({ details, className }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  if (!details) {\n    return null;\n  }\n\n  const handleCopyAll = async () => {\n    const detailsText = JSON.stringify(details, null, 2);\n    const success = await copyToClipboard(detailsText);\n    if (success) {\n      toast.success('Details copied to clipboard');\n    }\n  };\n\n  const handleCopyValue = async (value: string) => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      toast.success('Value copied to clipboard');\n    }\n  };\n\n  return (\n    <div className={cn('mt-2', className)}>\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"flex items-center gap-1 text-xs text-muted-foreground hover:text-foreground transition-colors\"\n      >\n        <Info className=\"w-3 h-3\" />\n        <span>More Details</span>\n        {isExpanded ? (\n          <ChevronUp className=\"w-3 h-3\" />\n        ) : (\n          <ChevronDown className=\"w-3 h-3\" />\n        )}\n      </button>\n\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"mt-2 p-3 bg-accent rounded-lg border border-border\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className=\"text-xs font-semibold text-foreground\">Message Details</h4>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={handleCopyAll}\n                  className=\"h-6 px-2 text-xs\"\n                >\n                  <Copy className=\"w-3 h-3 mr-1\" />\n                  Copy All\n                </Button>\n              </div>\n\n              <div className=\"space-y-2\">\n                {/* Basic Details */}\n                {details.user_id !== undefined && (\n                  <DetailRow\n                    label=\"User ID\"\n                    value={String(details.user_id)}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n                \n                {details.conversation_id !== undefined && (\n                  <DetailRow\n                    label=\"Conversation ID\"\n                    value={String(details.conversation_id)}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n                \n                {details.updated_at && (\n                  <DetailRow\n                    label=\"Updated At\"\n                    value={new Date(details.updated_at).toLocaleString()}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n\n                {/* Metadata Section */}\n                {details.metadata && (\n                  <div className=\"mt-3 pt-2 border-t border-border\">\n                    <h5 className=\"text-xs font-semibold text-muted-foreground mb-2\">Metadata</h5>\n                    \n                    {details.metadata.user_ip && (\n                      <DetailRow\n                        label=\"User IP\"\n                        value={details.metadata.user_ip}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                    \n                    {details.metadata.user_agent && (\n                      <DetailRow\n                        label=\"User Agent\"\n                        value={details.metadata.user_agent}\n                        onCopy={handleCopyValue}\n                        truncate\n                      />\n                    )}\n                    \n                    {details.metadata.external_id && (\n                      <DetailRow\n                        label=\"External ID\"\n                        value={details.metadata.external_id}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                    \n                    {details.metadata.request_source && (\n                      <DetailRow\n                        label=\"Request Source\"\n                        value={details.metadata.request_source}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\ninterface DetailRowProps {\n  label: string;\n  value: string;\n  onCopy: (value: string) => void;\n  truncate?: boolean;\n}\n\nconst DetailRow: React.FC<DetailRowProps> = ({ label, value, onCopy, truncate }) => {\n  return (\n    <div className=\"flex items-start justify-between gap-2 text-xs\">\n      <span className=\"text-muted-foreground font-medium whitespace-nowrap\">{label}:</span>\n      <div className=\"flex items-center gap-1 flex-1 min-w-0\">\n        <span \n          className={cn(\n            \"text-foreground break-all\",\n            truncate && \"truncate\"\n          )}\n          title={truncate ? value : undefined}\n        >\n          {value}\n        </span>\n        <button\n          onClick={() => onCopy(value)}\n          className=\"p-1 text-muted-foreground hover:text-foreground transition-colors flex-shrink-0\"\n          title=\"Copy value\"\n        >\n          <Copy className=\"w-3 h-3\" />\n        </button>\n      </div>\n    </div>\n  );\n};","/**\n * Message Component\n * \n * Displays individual chat messages with rich formatting support.\n * \n * Features:\n * - Markdown rendering with GitHub Flavored Markdown\n * - Syntax highlighting for code blocks\n * - Copy functionality for code and messages\n * - User feedback (thumbs up/down)\n * - Citation display and interaction\n * - Animated entrance and streaming cursor\n * - Different layouts for user vs assistant messages\n * \n * Customization:\n * - Modify avatar styles in the component\n * - Adjust markdown prose styles\n * - Customize code block themes (currently using oneDark)\n * - Change animation settings\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { motion } from 'framer-motion';\nimport { \n  Bot, \n  User, \n  Copy, \n  ThumbsUp, \n  ThumbsDown, \n  RotateCw,\n  ExternalLink \n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { MessageProps, Citation, ChatMessage } from '@/types';\nimport { cn, copyToClipboard, formatTimestamp } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { AgentAvatar, UserAvatar } from '@/components/ui/avatar';\nimport { CitationList } from './CitationList';\nimport { MessageDetails } from './MessageDetails';\nimport { useMessageStore } from '@/store/messages';\nimport { useConversationStore } from '@/store/conversations';\n\ninterface CodeBlockProps {\n  /** Programming language for syntax highlighting */\n  language: string;\n  /** Code content to display */\n  value: string;\n}\n\n/**\n * CodeBlock Component\n * \n * Renders code with syntax highlighting and a copy button.\n * Uses react-syntax-highlighter with the oneDark theme.\n * Copy button appears on hover.\n */\nconst CodeBlock: React.FC<CodeBlockProps> = ({ language, value }) => {\n  const [copied, setCopied] = useState(false);\n  \n  const handleCopy = async () => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      setCopied(true);\n      toast.success('Code copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    }\n  };\n\n  return (\n    <div className=\"relative group\">\n      <div className=\"absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          onClick={handleCopy}\n          className=\"h-6 px-2 text-xs bg-foreground text-background hover:bg-foreground/90\"\n        >\n          {copied ? 'Copied!' : 'Copy'}\n        </Button>\n      </div>\n      <SyntaxHighlighter\n        language={language}\n        style={oneDark}\n        customStyle={{\n          margin: 0,\n          borderRadius: '0.5rem',\n          fontSize: '0.875rem',\n        }}\n      >\n        {value}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\n/**\n * StreamingCursor Component\n * \n * Animated blinking cursor shown at the end of streaming messages\n * to indicate the AI is still generating content\n */\nconst StreamingCursor: React.FC = () => (\n  <span className=\"inline-block w-0.5 h-4 bg-foreground animate-blink ml-0.5 align-middle\" />\n);\n\ninterface MessageContentProps {\n  /** Markdown content to render */\n  content: string;\n  /** Whether the message is currently being streamed */\n  isStreaming?: boolean;\n}\n\n/**\n * MessageContent Component\n * \n * Renders message content with full markdown support including:\n * - Headers, lists, tables (via GFM)\n * - Inline and block code with syntax highlighting\n * - Links that open in new tabs\n * - Streaming cursor when content is being generated\n */\nconst MessageContent: React.FC<MessageContentProps> = ({ content, isStreaming }) => {\n  // Remove <CONTEXT> and </CONTEXT> tags from the content\n  const cleanedContent = content.replace(/<CONTEXT>|<\\/CONTEXT>/g, '').trim();\n  \n  return (\n    <div className=\"prose prose-sm max-w-none text-foreground\">\n      <ReactMarkdown\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || '');\n            const isInline = !match;\n            return !isInline && match ? (\n              <CodeBlock\n                language={match[1]}\n                value={String(children).replace(/\\n$/, '')}\n                {...props}\n              />\n            ) : (\n              <code className=\"px-1 py-0.5 rounded bg-muted text-sm font-medium\" {...props}>\n                {children}\n              </code>\n            );\n          },\n          a({ href, children }) {\n            return (\n              <a\n                href={href}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-brand-600 hover:text-brand-700 no-underline hover:underline inline-flex items-center gap-1\"\n              >\n                {children}\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            );\n          },\n        }}\n      >\n        {cleanedContent}\n      </ReactMarkdown>\n      {isStreaming && <StreamingCursor />}\n    </div>\n  );\n};\n\ninterface MessageActionsProps {\n  /** The message object containing content and metadata */\n  message: ChatMessage;\n  /** Handler for user feedback */\n  onFeedback?: (feedback: 'like' | 'dislike') => void;\n  /** Whether this is the last assistant message */\n  isLastAssistant?: boolean;\n}\n\n/**\n * MessageActions Component\n * \n * Action buttons for assistant messages:\n * - Copy message content\n * - Thumbs up/down feedback\n * - Regenerate response (placeholder)\n * \n * Only visible on hover for cleaner UI\n */\nconst MessageActions: React.FC<MessageActionsProps> = ({ message, onFeedback, isLastAssistant = false }) => {\n  const [feedback, setFeedback] = useState<'like' | 'dislike' | null>(\n    message.feedback || null\n  );\n\n  const handleCopy = async () => {\n    const success = await copyToClipboard(message.content);\n    if (success) {\n      toast.success('Message copied to clipboard');\n    }\n  };\n\n  const handleFeedback = (type: 'like' | 'dislike') => {\n    setFeedback(type);\n    onFeedback?.(type);\n    toast.success('Thanks for your feedback!');\n  };\n\n  const regenerateLastResponse = useMessageStore(state => state.regenerateLastResponse);\n  \n  const handleRegenerate = async () => {\n    try {\n      await regenerateLastResponse();\n    } catch (error) {\n      // Error handling is done in the store, so we don't need to do anything here\n      console.error('Failed to regenerate response:', error);\n    }\n  };\n\n  return (\n    <div className=\"mt-3 flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleCopy}\n        className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n        title=\"Copy message\"\n      >\n        <Copy className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('like')}\n        className={cn(\n          'h-8 w-8 text-muted-foreground hover:text-foreground',\n          feedback === 'like' && 'text-success hover:text-success/90'\n        )}\n        title=\"Good response\"\n      >\n        <ThumbsUp className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('dislike')}\n        className={cn(\n          'h-8 w-8 text-muted-foreground hover:text-foreground',\n          feedback === 'dislike' && 'text-destructive hover:text-destructive/90'\n        )}\n        title=\"Bad response\"\n      >\n        <ThumbsDown className=\"h-4 w-4\" />\n      </Button>\n      \n      {isLastAssistant && (\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={handleRegenerate}\n          className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n          title=\"Regenerate response\"\n        >\n          <RotateCw className=\"h-4 w-4\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\n/**\n * Message Component - Main Export\n * \n * Renders a complete message with avatar, content, citations, and actions.\n * \n * Layout:\n * - User messages: White background, user avatar, plain text\n * - Assistant messages: Gray background, bot avatar, markdown content\n * \n * Features:\n * - Smooth entrance animation with Framer Motion\n * - Hover effects for action visibility\n * - Status indicators (sending, error)\n * - Timestamp display\n * - Citation list integration\n * \n * @param message - The message data to display\n * @param isStreaming - Whether this message is being streamed\n * @param isLast - Whether this is the last message (affects scrolling)\n * @param onCitationClick - Handler for citation interactions\n * @param onFeedback - Handler for user feedback\n * @param className - Additional CSS classes\n */\nexport const Message: React.FC<MessageProps> = ({ \n  message,\n  agent,\n  isStreaming = false, \n  isLast = false,\n  onCitationClick,\n  onPreviewClick,\n  onFeedback,\n  mode = 'standalone',\n  className \n}) => {\n  const isUser = message.role === 'user';\n  \n  // Get messages from the conversation to check if this is the last assistant message\n  const messages = useMessageStore(state => {\n    const conversationStore = useConversationStore.getState();\n    const currentConversation = conversationStore.currentConversation;\n    if (!currentConversation) return [];\n    return state.getMessagesForConversation(currentConversation.id.toString());\n  });\n  \n  // Check if this is the last assistant message\n  const isLastAssistant = !isUser && messages.length > 0 && \n    messages[messages.length - 1].role === 'assistant' &&\n    messages[messages.length - 1].id === message.id;\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n      className={cn(\n        'group relative px-4 py-6 transition-colors',\n        isUser ? 'bg-background' : 'bg-muted border-y border-border',\n        'hover:bg-opacity-80',\n        className\n      )}\n    >\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"flex-shrink-0\">\n          {isUser ? (\n            <UserAvatar \n              size=\"md\" \n              className=\"bg-secondary\"\n            />\n          ) : (\n            <AgentAvatar \n              agent={agent}\n              size=\"md\"\n              className=\"bg-background border border-border\"\n            />\n          )}\n        </div>\n        \n        {/* Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          {/* Message Status */}\n          {message.status && message.status !== 'sent' && (\n            <div className=\"mb-2 text-xs text-muted-foreground\">\n              {message.status === 'sending' && 'Sending...'}\n              {message.status === 'error' && (\n                <span className=\"text-red-500\">Failed to send</span>\n              )}\n            </div>\n          )}\n          \n          {/* Message Content */}\n          {isUser ? (\n            <p className=\"text-foreground whitespace-pre-wrap\">{message.content}</p>\n          ) : (\n            <MessageContent \n              content={message.content} \n              isStreaming={isStreaming}\n            />\n          )}\n          \n          {/* Citations - Only shown in standalone mode */}\n          {mode === 'standalone' && message.citations && message.citations.length > 0 && (\n            <CitationList \n              citations={message.citations}\n              onCitationClick={onCitationClick}\n              onPreviewClick={onPreviewClick}\n            />\n          )}\n          \n          {/* Timestamp */}\n          <div className=\"mt-2 text-xs text-muted-foreground\">\n            {formatTimestamp(message.timestamp)}\n          </div>\n          \n          {/* Message Details (hidden by default) */}\n          <MessageDetails details={message.details} />\n          \n          {/* Actions */}\n          {!isUser && !isStreaming && (\n            <MessageActions \n              message={message}\n              onFeedback={onFeedback}\n              isLastAssistant={isLastAssistant}\n            />\n          )}\n        </div>\n      </div>\n    </motion.div>\n  );\n};","/**\n * Demo Mode Context\n * \n * Provides runtime demo mode status throughout the app\n */\n\n'use client';\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\ninterface DemoModeContextType {\n  isRuntimeDemoMode: boolean;\n  deploymentMode: 'demo' | 'production' | null;\n  isInitialized: boolean;\n  isFreeTrialMode: boolean;\n}\n\nconst DemoModeContext = createContext<DemoModeContextType>({\n  isRuntimeDemoMode: false,\n  deploymentMode: null,\n  isInitialized: false,\n  isFreeTrialMode: false,\n});\n\nexport const useDemoModeContext = () => {\n  const context = useContext(DemoModeContext);\n  if (!context) {\n    throw new Error('useDemoModeContext must be used within DemoModeProvider');\n  }\n  return context;\n};\n\ninterface DemoModeContextProviderProps {\n  children: React.ReactNode;\n}\n\nexport function DemoModeContextProvider({ children }: DemoModeContextProviderProps) {\n  const [deploymentMode, setDeploymentMode] = useState<'demo' | 'production' | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isFreeTrialMode, setIsFreeTrialMode] = useState(false);\n\n  useEffect(() => {\n    // Get the runtime deployment mode from localStorage\n    const mode = localStorage.getItem('customgpt.deploymentMode') as 'demo' | 'production' | null;\n    const freeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n    setDeploymentMode(mode);\n    setIsFreeTrialMode(freeTrialFlag === 'true');\n    setIsInitialized(true);\n\n    // Listen for storage changes\n    const handleStorageChange = () => {\n      const newMode = localStorage.getItem('customgpt.deploymentMode') as 'demo' | 'production' | null;\n      const newFreeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n      setDeploymentMode(newMode);\n      setIsFreeTrialMode(newFreeTrialFlag === 'true');\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    \n    // Also listen for custom events for same-window updates\n    window.addEventListener('deploymentModeChanged', handleStorageChange);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('deploymentModeChanged', handleStorageChange);\n    };\n  }, []);\n\n  const value: DemoModeContextType = {\n    isRuntimeDemoMode: deploymentMode === 'demo',\n    deploymentMode,\n    isInitialized,\n    isFreeTrialMode,\n  };\n\n  return (\n    <DemoModeContext.Provider value={value}>\n      {children}\n    </DemoModeContext.Provider>\n  );\n}","/**\n * Loading Components\n * \n * Reusable loading indicators for consistent loading states across the app.\n * Includes spinner, skeleton loaders, and full-page loading states.\n */\n\nimport React from 'react';\nimport { cn } from '@/lib/utils';\nimport { Loader2 } from 'lucide-react';\n\ninterface SpinnerProps {\n  /** Size of the spinner */\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  /** Additional CSS classes */\n  className?: string;\n  /** Label for accessibility */\n  label?: string;\n}\n\n/**\n * Spinner Component\n * \n * Animated spinning loader for inline and overlay loading states\n */\nexport const Spinner: React.FC<SpinnerProps> = ({ \n  size = 'md', \n  className,\n  label = 'Loading...'\n}) => {\n  const sizeClasses = {\n    sm: 'h-4 w-4',\n    md: 'h-6 w-6',\n    lg: 'h-8 w-8',\n    xl: 'h-12 w-12'\n  };\n\n  return (\n    <div className=\"relative inline-flex\">\n      <Loader2 \n        className={cn(\n          'animate-spin text-primary transition-all duration-200',\n          sizeClasses[size],\n          className\n        )}\n        aria-label={label}\n      />\n      {/* Subtle glow effect */}\n      <div className={cn(\n        'absolute inset-0 animate-pulse rounded-full bg-primary/20 blur-xl',\n        sizeClasses[size]\n      )} />\n    </div>\n  );\n};\n\ninterface SkeletonProps {\n  /** Additional CSS classes */\n  className?: string;\n  /** Whether to animate the skeleton */\n  animate?: boolean;\n}\n\n/**\n * Skeleton Component\n * \n * Placeholder loading state for content\n */\nexport const Skeleton: React.FC<SkeletonProps> = ({ \n  className,\n  animate = true\n}) => {\n  return (\n    <div\n      className={cn(\n        'relative overflow-hidden rounded-lg bg-muted',\n        animate && 'shimmer',\n        className\n      )}\n    >\n      {animate && (\n        <div className=\"absolute inset-0 -translate-x-full animate-[shimmer_2s_infinite] bg-gradient-to-r from-transparent via-white/10 to-transparent\" />\n      )}\n    </div>\n  );\n};\n\ninterface LoadingDotsProps {\n  /** Size of the dots */\n  size?: 'sm' | 'md' | 'lg';\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * LoadingDots Component\n * \n * Three animated dots for typing/processing indicators\n */\nexport const LoadingDots: React.FC<LoadingDotsProps> = ({ \n  size = 'md',\n  className \n}) => {\n  const sizeClasses = {\n    sm: 'h-1.5 w-1.5',\n    md: 'h-2 w-2',\n    lg: 'h-2.5 w-2.5'\n  };\n\n  return (\n    <div className={cn('flex items-center space-x-1.5', className)}>\n      {[0, 1, 2].map((index) => (\n        <div\n          key={index}\n          className={cn(\n            'rounded-full bg-primary/60',\n            'animate-[pulse_1.4s_ease-in-out_infinite]',\n            sizeClasses[size]\n          )}\n          style={{\n            animationDelay: `${index * 0.15}s`,\n            animationFillMode: 'both',\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\ninterface LoadingOverlayProps {\n  /** Whether the overlay is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Whether to blur the background */\n  blur?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * LoadingOverlay Component\n * \n * Full-screen or container overlay with loading indicator\n */\nexport const LoadingOverlay: React.FC<LoadingOverlayProps> = ({ \n  visible,\n  message,\n  blur = true,\n  className\n}) => {\n  if (!visible) return null;\n\n  return (\n    <div className={cn(\n      'absolute inset-0 z-50 flex items-center justify-center',\n      'bg-background/60 transition-all duration-300',\n      blur && 'backdrop-blur-md',\n      'animate-in fade-in-0 duration-200',\n      className\n    )}>\n      <div className={cn(\n        'flex flex-col items-center space-y-4 p-6',\n        'bg-background/90 backdrop-blur-sm',\n        'rounded-xl border border-border/50',\n        'shadow-xl',\n        'animate-in zoom-in-95 duration-300'\n      )}>\n        <Spinner size=\"lg\" />\n        {message && (\n          <p className=\"text-sm text-muted-foreground font-medium\">{message}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface MessageSkeletonProps {\n  /** Whether this represents an assistant message */\n  isAssistant?: boolean;\n  /** Number of lines to show */\n  lines?: number;\n}\n\n/**\n * MessageSkeleton Component\n * \n * Skeleton loader specifically for chat messages\n */\nexport const MessageSkeleton: React.FC<MessageSkeletonProps> = ({ \n  isAssistant = false,\n  lines = 3\n}) => {\n  return (\n    <div className={cn(\n      'flex gap-3 p-4',\n      isAssistant ? 'bg-muted' : 'bg-background'\n    )}>\n      {/* Avatar */}\n      <Skeleton className=\"h-8 w-8 rounded-full flex-shrink-0\" />\n      \n      {/* Message content */}\n      <div className=\"flex-1 space-y-2\">\n        {Array.from({ length: lines }).map((_, i) => (\n          <Skeleton \n            key={i}\n            className={cn(\n              'h-4',\n              i === lines - 1 ? 'w-3/4' : 'w-full'\n            )}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\ninterface ConversationSkeletonProps {\n  /** Number of conversation items to show */\n  count?: number;\n}\n\n/**\n * ConversationSkeleton Component\n * \n * Skeleton loader for conversation list items\n */\nexport const ConversationSkeleton: React.FC<ConversationSkeletonProps> = ({ \n  count = 3 \n}) => {\n  return (\n    <div className=\"space-y-2 p-2\">\n      {Array.from({ length: count }).map((_, i) => (\n        <div key={i} className=\"p-3 rounded-lg\">\n          <Skeleton className=\"h-4 w-3/4 mb-2\" />\n          <Skeleton className=\"h-3 w-1/2\" />\n        </div>\n      ))}\n    </div>\n  );\n};\n\ninterface LoadingButtonProps {\n  /** Whether the button is in loading state */\n  loading: boolean;\n  /** Button content when not loading */\n  children: React.ReactNode;\n  /** Loading text to display */\n  loadingText?: string;\n  /** Additional CSS classes */\n  className?: string;\n  /** Other button props */\n  [key: string]: any;\n}\n\n/**\n * LoadingButton Component\n * \n * Button with integrated loading state\n */\nexport const LoadingButton: React.FC<LoadingButtonProps> = ({ \n  loading,\n  children,\n  loadingText = 'Loading...',\n  className,\n  disabled,\n  ...props\n}) => {\n  return (\n    <button\n      className={cn(\n        'relative',\n        loading && 'cursor-not-allowed opacity-70',\n        className\n      )}\n      disabled={disabled || loading}\n      {...props}\n    >\n      {loading ? (\n        <span className=\"flex items-center justify-center gap-2\">\n          <Spinner size=\"sm\" />\n          <span>{loadingText}</span>\n        </span>\n      ) : (\n        children\n      )}\n    </button>\n  );\n};\n\ninterface ScreenLoadingProps {\n  /** Whether the screen loading is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Optional icon to show with the loading message */\n  icon?: React.ReactNode;\n  /** Background opacity (0-100) */\n  opacity?: number;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * ScreenLoading Component\n * \n * Full-screen loading overlay for page/screen transitions\n * with customizable message and icon\n */\nexport const ScreenLoading: React.FC<ScreenLoadingProps> = ({\n  visible,\n  message = 'Loading...',\n  icon,\n  opacity = 95,\n  className\n}) => {\n  if (!visible) return null;\n\n  return (\n    <div className={cn(\n      'fixed inset-0 z-[100] flex items-center justify-center',\n      'bg-background/90 backdrop-blur-lg',\n      'transition-all duration-500',\n      'animate-in fade-in-0',\n      className\n    )}>\n      <div className={cn(\n        'flex flex-col items-center space-y-6 p-10',\n        'animate-in zoom-in-95 slide-in-from-bottom-4 duration-500'\n      )}>\n        <div className=\"relative\">\n          {icon ? (\n            <div className={cn(\n              'flex items-center justify-center w-20 h-20',\n              'bg-primary/10 rounded-2xl',\n              'shadow-lg shadow-primary/20',\n              'animate-pulse'\n            )}>\n              {icon}\n            </div>\n          ) : (\n            <Spinner size=\"xl\" />\n          )}\n        </div>\n        {message && (\n          <div className=\"text-center space-y-2\">\n            <p className=\"text-lg font-semibold text-foreground\">{message}</p>\n            <LoadingDots size=\"md\" />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface PageLoadingProps {\n  /** Whether the page loading is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Show skeleton content instead of spinner */\n  showSkeleton?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * PageLoading Component\n * \n * In-page loading state for content areas\n * with optional skeleton loading\n */\nexport const PageLoading: React.FC<PageLoadingProps> = ({\n  visible,\n  message = 'Loading page...',\n  showSkeleton = false,\n  className\n}) => {\n  if (!visible) return null;\n\n  if (showSkeleton) {\n    return (\n      <div className={cn('space-y-4 p-6', className)}>\n        <div className=\"space-y-3\">\n          <Skeleton className=\"h-8 w-1/3\" />\n          <Skeleton className=\"h-4 w-2/3\" />\n          <Skeleton className=\"h-4 w-1/2\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <div key={i} className=\"space-y-3\">\n              <Skeleton className=\"h-32 w-full rounded-lg\" />\n              <Skeleton className=\"h-4 w-3/4\" />\n              <Skeleton className=\"h-3 w-1/2\" />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\n      'flex flex-col items-center justify-center p-12',\n      className\n    )}>\n      <Spinner size=\"lg\" />\n      <p className=\"mt-4 text-gray-600\">{message}</p>\n    </div>\n  );\n};","\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 6, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden\",\n        \"rounded-lg px-3.5 py-2\",\n        \"bg-gray-900 dark:bg-gray-100 backdrop-blur-sm\",\n        \"text-xs font-medium text-white dark:text-gray-900\",\n        \"shadow-lg shadow-black/20\",\n        \"border border-gray-800 dark:border-gray-200\",\n        \"animate-in fade-in-0 zoom-in-95\",\n        \"data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95\",\n        \"data-[side=bottom]:slide-in-from-top-2\",\n        \"data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2\",\n        \"data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    >\n      {props.children}\n      <TooltipPrimitive.Arrow \n        className=\"fill-gray-900 dark:fill-gray-100\"\n        width={8}\n        height={4}\n      />\n    </TooltipPrimitive.Content>\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }","'use client';\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport { Mic, MicOff, Loader2 } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n\ninterface SpeechToTextButtonProps {\n  onTranscription: (text: string) => void;\n  onTranscriptionStart?: () => void;\n  onTranscriptionEnd?: () => void;\n  disabled?: boolean;\n  isMobile?: boolean;\n  className?: string;\n}\n\nexport function SpeechToTextButton({ \n  onTranscription, \n  onTranscriptionStart,\n  onTranscriptionEnd,\n  disabled = false, \n  isMobile = false,\n  className \n}: SpeechToTextButtonProps) {\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [recordingDuration, setRecordingDuration] = useState(0);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n  const recordingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const durationIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const stopRecording = useCallback(() => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      // Don't call onTranscriptionEnd here - let processAudio handle it\n      \n      if (recordingTimeoutRef.current) {\n        clearTimeout(recordingTimeoutRef.current);\n        recordingTimeoutRef.current = null;\n      }\n      \n      if (durationIntervalRef.current) {\n        clearInterval(durationIntervalRef.current);\n        durationIntervalRef.current = null;\n      }\n      \n      setRecordingDuration(0);\n    }\n  }, []);\n\n  const startRecording = useCallback(async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      \n      const mimeType = MediaRecorder.isTypeSupported('audio/webm') \n        ? 'audio/webm' \n        : 'audio/mp4';\n      \n      const mediaRecorder = new MediaRecorder(stream, { mimeType });\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = async () => {\n        const audioBlob = new Blob(audioChunksRef.current, { type: mimeType });\n        stream.getTracks().forEach(track => track.stop());\n        \n        // Process the audio\n        await processAudio(audioBlob);\n      };\n\n      mediaRecorder.start();\n      setIsRecording(true);\n      onTranscriptionStart?.();\n      \n      // Start duration timer\n      const startTime = Date.now();\n      durationIntervalRef.current = setInterval(() => {\n        const elapsed = Math.floor((Date.now() - startTime) / 1000);\n        setRecordingDuration(elapsed);\n      }, 100) as any;\n\n      // Auto-stop recording after 30 seconds\n      recordingTimeoutRef.current = setTimeout(() => {\n        stopRecording();\n        toast.info('Recording stopped after 30 seconds');\n      }, 30000);\n\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      toast.error('Unable to access microphone. Please check your permissions.');\n      onTranscriptionEnd?.();\n    }\n  }, [stopRecording, onTranscriptionStart, onTranscriptionEnd]);\n\n  const processAudio = async (audioBlob: Blob) => {\n    setIsProcessing(true);\n\n    try {\n      // Convert blob to base64 for sending\n      const reader = new FileReader();\n      reader.readAsDataURL(audioBlob);\n      \n      reader.onloadend = async () => {\n        const base64Audio = reader.result as string;\n        const base64Data = base64Audio.split(',')[1];\n\n        // Check for demo mode and add appropriate headers\n        const headers: Record<string, string> = {\n          'Content-Type': 'application/json',\n        };\n        \n        // Add deployment mode header\n        const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n        headers['X-Deployment-Mode'] = deploymentMode;\n        \n        // In demo mode, add OpenAI key from window object if available\n        if (deploymentMode === 'demo' && (window as any).__demoOpenAIKey) {\n          headers['X-OpenAI-API-Key'] = (window as any).__demoOpenAIKey;\n        }\n\n        const response = await fetch('/api/proxy/voice/transcribe', {\n          method: 'POST',\n          headers,\n          body: JSON.stringify({\n            audio: base64Data,\n            mimeType: audioBlob.type,\n          }),\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({ error: 'Transcription failed' }));\n          \n          // Check if it's an OpenAI API key error\n          if (response.status === 500 && errorData.error && errorData.error.includes('OpenAI API key')) {\n            toast.error(errorData.error);\n            throw new Error('OpenAI API key not configured');\n          }\n          \n          throw new Error(errorData.error || 'Transcription failed');\n        }\n\n        const data = await response.json();\n        \n        if (data.text) {\n          onTranscription(data.text);\n          toast.success('Speech transcribed successfully');\n        } else {\n          throw new Error('No transcription received');\n        }\n      };\n\n      reader.onerror = () => {\n        throw new Error('Failed to process audio');\n      };\n\n    } catch (error) {\n      console.error('Transcription error:', error);\n      \n      // Don't show duplicate toast for OpenAI API key error\n      if (error instanceof Error && error.message === 'OpenAI API key not configured') {\n        // Toast already shown above\n      } else if (error instanceof Error && error.message) {\n        toast.error(error.message);\n      } else {\n        toast.error('Failed to transcribe speech. Please try again.');\n      }\n    } finally {\n      setIsProcessing(false);\n      onTranscriptionEnd?.();\n    }\n  };\n\n  const handleClick = () => {\n    if (isRecording) {\n      stopRecording();\n    } else {\n      startRecording();\n    }\n  };\n\n  const isActive = isRecording || isProcessing;\n\n  // Format duration as MM:SS\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button\n            type=\"button\"\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={handleClick}\n            disabled={disabled || isProcessing}\n            className={cn(\n              \"relative text-muted-foreground hover:text-foreground transition-all\",\n              isActive && \"text-red-600 hover:text-red-700\",\n              isRecording && \"animate-pulse bg-red-50 hover:bg-red-100\",\n              className\n            )}\n          >\n            {isProcessing ? (\n              <div className=\"relative\">\n                <Loader2 className={cn(\n                  \"animate-spin\",\n                  isMobile ? \"h-5 w-5\" : \"h-5 w-5\"\n                )} />\n                <span className=\"absolute -bottom-5 left-1/2 -translate-x-1/2 text-[10px] text-muted-foreground whitespace-nowrap\">\n                  Processing...\n                </span>\n              </div>\n            ) : isRecording ? (\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 bg-red-500 rounded-full animate-ping opacity-25\" />\n                <MicOff className={cn(\n                  \"relative z-10\",\n                  isMobile ? \"h-5 w-5\" : \"h-5 w-5\"\n                )} />\n                {/* Recording duration */}\n                {recordingDuration > 0 && (\n                  <span className=\"absolute -bottom-5 left-1/2 -translate-x-1/2 text-[10px] text-red-600 font-medium whitespace-nowrap\">\n                    {formatDuration(recordingDuration)}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <Mic className={cn(isMobile ? \"h-5 w-5\" : \"h-5 w-5\")} />\n            )}\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p>\n            {isProcessing ? 'Processing your speech...' : isRecording ? `Recording... ${formatDuration(recordingDuration)}` : 'Click to start speech-to-text'}\n          </p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}","'use client';\n\nimport { cn } from '@/lib/utils';\n\ninterface AnimatedVoiceIconProps {\n  className?: string;\n  isActive?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nexport function AnimatedVoiceIcon({ \n  className, \n  isActive = false,\n  size = 'md' \n}: AnimatedVoiceIconProps) {\n  const sizeClasses = {\n    sm: 'w-5 h-5',\n    md: 'w-6 h-6',\n    lg: 'w-7 h-7'\n  };\n\n  const barHeights = {\n    sm: ['h-2', 'h-3', 'h-2.5', 'h-3', 'h-2'],\n    md: ['h-3', 'h-4', 'h-3.5', 'h-4', 'h-3'],\n    lg: ['h-3.5', 'h-5', 'h-4.5', 'h-5', 'h-3.5']\n  };\n\n  const bars = size === 'sm' ? barHeights.sm : size === 'md' ? barHeights.md : barHeights.lg;\n\n  return (\n    <div className={cn(\n      'flex items-center justify-center',\n      sizeClasses[size],\n      className\n    )}\n    style={{ gap: '2px' }}>\n      {bars.map((height, index) => (\n        <div\n          key={index}\n          className={cn(\n            'rounded-full transition-all duration-300',\n            height,\n            isActive && 'animate-voice-pulse'\n          )}\n          style={{\n            width: size === 'lg' ? '3px' : size === 'md' ? '2.5px' : '2px',\n            animationDelay: isActive ? `${index * 100}ms` : '0ms',\n            background: isActive \n              ? `linear-gradient(to top, \n                  hsl(${260 + index * 20}, 85%, 55%), \n                  hsl(${320 + index * 20}, 85%, 65%))` \n              : `linear-gradient(to top,\n                  hsl(${260 + index * 15}, 80%, 55%),\n                  hsl(${280 + index * 15}, 80%, 65%))`\n          }}\n        />\n      ))}\n    </div>\n  );\n}","\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-pointer select-none items-center\",\n      \"rounded-md px-3 py-2 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4 transition-transform duration-200 data-[state=open]:rotate-90\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden\",\n      \"rounded-lg border border-gray-200/50 dark:border-gray-800/30\",\n      \"bg-background/95 backdrop-blur-md\",\n      \"p-1.5 text-foreground\",\n      \"shadow-lg shadow-black/10\",\n      \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n      \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n      \"data-[side=bottom]:slide-in-from-top-2\",\n      \"data-[side=left]:slide-in-from-right-2\",\n      \"data-[side=right]:slide-in-from-left-2\",\n      \"data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 6, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden\",\n        \"rounded-lg border border-gray-200/50 dark:border-gray-800/30\",\n        \"bg-background/95 backdrop-blur-md\",\n        \"p-1.5 text-foreground\",\n        \"shadow-lg shadow-black/10\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n        \"data-[side=bottom]:slide-in-from-top-2\",\n        \"data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2\",\n        \"data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer select-none items-center\",\n      \"rounded-md px-3 py-2 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground hover:scale-[0.98]\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      \"active:scale-[0.96]\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer select-none items-center\",\n      \"rounded-md py-2 pl-8 pr-3 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-4 w-4 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-3.5 w-3.5 animate-in zoom-in-0 duration-200\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer select-none items-center\",\n      \"rounded-md py-2 pl-8 pr-3 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-4 w-4 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2.5 w-2.5 fill-current animate-in zoom-in-0 duration-200\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-3 py-2 text-xs font-semibold\",\n      \"text-muted-foreground uppercase tracking-wider\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\n      \"-mx-1.5 my-1.5 h-px\",\n      \"bg-gradient-to-r from-transparent via-gray-200/50 dark:via-gray-800/20 to-transparent\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-[10px] tracking-widest\",\n        \"text-muted-foreground/70\",\n        \"font-medium uppercase\",\n        \"px-1.5 py-0.5 rounded\",\n        \"bg-muted/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}","/**\n * ChatInput Component\n * \n * Rich input field for sending messages and uploading files.\n * \n * Features:\n * - Auto-expanding textarea (up to 200px height)\n * - File upload with drag-and-drop support\n * - Speech-to-text transcription using OpenAI Whisper\n * - File type and size validation\n * - Progress tracking for uploads\n * - Character count display\n * - Keyboard shortcuts (Enter to send, Shift+Enter for newline)\n * - Animated file chips and drag overlay\n * \n * Customization:\n * - Modify CONSTANTS in utils for file limits\n * - Adjust max textarea height (line 144)\n * - Customize accepted file types\n * - Style the drag overlay and file chips\n */\n\n'use client';\n\nimport React, { useState, useRef, useCallback, KeyboardEvent, FormEvent, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Send, \n  Paperclip, \n  X,\n  Upload,\n  AlertCircle,\n  ChevronDown,\n  Settings,\n  Sparkles,\n  Brain,\n  Zap,\n  MessageSquare,\n  User,\n  Bot,\n  SlidersHorizontal\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { InputProps, FileUpload, AgentSettings } from '@/types';\nimport { useDemoModeContext } from '@/contexts/DemoModeContext';\nimport { cn, formatFileSize, getFileIcon, isFileTypeAllowed, generateId, CONSTANTS } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Spinner } from '@/components/ui/loading';\nimport { SpeechToTextButton } from '@/components/voice/SpeechToTextButton';\nimport { AnimatedVoiceIcon } from '@/components/voice/AnimatedVoiceIcon';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n  DropdownMenuLabel,\n} from '@/components/ui/dropdown-menu';\nimport { useAgentStore } from '@/store/agents';\nimport { useChatSettingsStore } from '@/store/chat-settings';\nimport { getClient } from '@/lib/api/client';\n\ninterface FileChipProps {\n  /** File upload object with metadata */\n  file: FileUpload;\n  /** Handler to remove this file */\n  onRemove: () => void;\n}\n\n/**\n * FileChip Component\n * \n * Displays an uploaded or uploading file with:\n * - File icon based on type\n * - Name and size\n * - Upload progress bar\n * - Remove button\n * - Error state indication\n */\nconst FileChip: React.FC<FileChipProps> = ({ file, onRemove }) => {\n  const fileIcon = getFileIcon(file.type);\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"flex items-center gap-2 px-3 py-1.5 bg-muted hover:bg-accent rounded-lg transition-colors\"\n    >\n      <div className=\"text-muted-foreground\">{fileIcon}</div>\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"text-sm font-medium text-foreground truncate\">\n          {file.name}\n        </div>\n        <div className=\"text-xs text-muted-foreground flex items-center gap-2\">\n          <span>{formatFileSize(file.size)}</span>\n          {file.status === 'uploading' && (\n            <>\n              <span>•</span>\n              <span>{file.progress}%</span>\n            </>\n          )}\n          {file.status === 'error' && (\n            <>\n              <span>•</span>\n              <span className=\"text-destructive flex items-center gap-1\">\n                <AlertCircle className=\"w-3 h-3\" />\n                Error\n              </span>\n            </>\n          )}\n        </div>\n      </div>\n      \n      {/* Progress Bar */}\n      {file.status === 'uploading' && (\n        <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-muted rounded-b\">\n          <div \n            className=\"h-full bg-brand-500 rounded-b transition-all duration-300\"\n            style={{ width: `${file.progress}%` }}\n          />\n        </div>\n      )}\n      \n      <button\n        onClick={onRemove}\n        className=\"p-0.5 rounded hover:bg-accent-foreground/20 transition-colors\"\n        disabled={file.status === 'uploading'}\n      >\n        <X className=\"w-3 h-3 text-muted-foreground\" />\n      </button>\n    </motion.div>\n  );\n};\n\n\n/**\n * FileUploadButton Component\n * \n * Hidden file input with visible button trigger.\n * Accepts multiple files based on ACCEPTED_FILE_TYPES.\n */\ninterface FileUploadButtonProps {\n  /** Handler called when files are selected */\n  onUpload: (files: File[]) => void;\n  /** Whether the button is disabled */\n  disabled?: boolean;\n  /** Mobile optimization mode */\n  isMobile?: boolean;\n}\n\nconst FileUploadButton: React.FC<FileUploadButtonProps> = ({ onUpload, disabled, isMobile = false }) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    if (files.length > 0) {\n      onUpload(files);\n      e.target.value = '';\n    }\n  };\n  \n  return (\n    <>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept={CONSTANTS.ACCEPTED_FILE_TYPES.join(',')}\n        onChange={handleChange}\n        className=\"hidden\"\n      />\n      <Button\n        type=\"button\"\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleClick}\n        disabled={disabled}\n        className={cn(\n          \"text-muted-foreground hover:text-foreground relative z-10\",\n          isMobile ? \"h-10 w-10 min-w-[40px]\" : \"h-9 w-9\"\n        )}\n        title=\"Upload files\"\n      >\n        <Paperclip className={cn(isMobile ? \"h-5 w-5\" : \"h-4 w-4\")} />\n      </Button>\n    </>\n  );\n};\n\n// Configuration options\nconst RESPONSE_SOURCES = [\n  { value: 'own_content', label: 'Content', description: 'Uses only your uploaded content', icon: MessageSquare },\n  { value: 'openai_content', label: 'AI + Content', description: 'Combines AI knowledge with your content', icon: Brain },\n  { value: 'default', label: 'Default', description: 'Uses the default agent setting', icon: Settings },\n] as const;\n\nconst CHATBOT_MODELS = [\n  { value: 'gpt-4-o', label: 'GPT-4', description: 'Most capable model', icon: Brain, capabilities: ['optimal-choice', 'advanced-reasoning', 'complex-tasks'] },\n  { value: 'gpt-4-1', label: 'GPT-4.1', description: 'Latest GPT-4 version', icon: Sparkles, capabilities: ['optimal-choice', 'advanced-reasoning', 'complex-tasks'] },\n  { value: 'gpt-4o-mini', label: 'GPT-4 Mini', description: 'Faster, good for most tasks', icon: Zap, capabilities: ['fastest-responses', 'optimal-choice'] },\n  { value: 'gpt-4-1-mini', label: 'GPT-4.1 Mini', description: 'Fast and efficient', icon: Zap, capabilities: ['fastest-responses', 'optimal-choice'] },\n  { value: 'claude-3-sonnet', label: 'Claude 3', description: 'Balanced performance', icon: Brain, capabilities: ['optimal-choice', 'advanced-reasoning'] },\n  { value: 'claude-3.5-sonnet', label: 'Claude 3.5', description: 'Advanced reasoning', icon: Sparkles, capabilities: ['optimal-choice', 'advanced-reasoning', 'complex-tasks'] },\n] as const;\n\nconst COMMON_PERSONAS = [\n  { value: 'professional', label: 'Professional', description: 'Formal responses', icon: Bot },\n  { value: 'friendly', label: 'Friendly', description: 'Conversational tone', icon: User },\n  { value: 'technical', label: 'Technical', description: 'Technical explanations', icon: Brain },\n  { value: 'creative', label: 'Creative', description: 'Imaginative responses', icon: Sparkles },\n  { value: 'educator', label: 'Teacher', description: 'Step-by-step guidance', icon: Bot },\n  { value: 'custom', label: 'Custom', description: 'Your own instructions', icon: Settings },\n] as const;\n\nconst AGENT_CAPABILITIES = [\n  { value: 'fastest-responses', label: 'Fastest', description: 'Quick answers', icon: Zap, enterprise: true },\n  { value: 'optimal-choice', label: 'Optimal', description: 'Balanced', icon: Settings, enterprise: false },\n  { value: 'advanced-reasoning', label: 'Advanced', description: 'Complex tasks', icon: Brain, enterprise: true },\n  { value: 'complex-tasks', label: 'Complex Reasoning', description: 'Highest quality', icon: Sparkles, enterprise: true },\n] as const;\n\n/**\n * ChatInput Component - Main Export\n * \n * Complete chat input with message composition and file upload.\n * \n * Props:\n * @param onSend - Handler called with message content and files\n * @param disabled - Disables input during message sending\n * @param placeholder - Placeholder text for the textarea\n * @param maxLength - Maximum message length (default from CONSTANTS)\n * @param className - Additional CSS classes\n * @param onVoiceClick - Handler for voice mode button click\n * \n * State Management:\n * - input: Current message text\n * - files: Array of uploaded/uploading files\n * - isDragOver: Drag-and-drop state\n * \n * @example\n * <ChatInput \n *   onSend={(message, files) => handleSend(message, files)}\n *   disabled={isLoading}\n *   onVoiceClick={() => setVoiceModalOpen(true)}\n * />\n */\nexport const ChatInput: React.FC<InputProps> = ({ \n  onSend,\n  disabled = false,\n  placeholder = \"Send a message...\",\n  maxLength = CONSTANTS.MAX_MESSAGE_LENGTH,\n  className,\n  onVoiceClick,\n  isMobile = false,\n  mode = 'standalone'\n}) => {\n  const [input, setInput] = useState('');\n  const [files, setFiles] = useState<FileUpload[]>([]);\n  const [isTranscribing, setIsTranscribing] = useState(false);\n  const [isLoadingSettings, setIsLoadingSettings] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \n  // Get free trial mode status\n  const { isFreeTrialMode } = useDemoModeContext();\n  \n  // Get stores\n  const { currentAgent } = useAgentStore();\n  const { getSettings, updateSettings: updateLocalSettings } = useChatSettingsStore();\n  \n  // Get settings for current agent\n  const settings = currentAgent?.id ? getSettings(currentAgent.id) : {\n    response_source: 'own_content',\n    chatbot_model: 'gpt-4-o',\n    custom_persona: 'professional',\n    agent_capability: 'optimal-choice',\n  };\n  \n  const loadAgentSettings = useCallback(async () => {\n    if (!currentAgent?.id) return;\n\n    try {\n      const client = getClient();\n      const response = await client.getAgentSettings(currentAgent.id);\n      \n      if (response?.data) {\n        const loadedSettings = {\n          response_source: response.data.response_source || 'own_content',\n          chatbot_model: response.data.chatbot_model || 'gpt-4-o',\n          custom_persona: response.data.custom_persona || 'professional',\n          agent_capability: response.data.agent_capability || 'optimal-choice',\n        };\n        updateLocalSettings(currentAgent.id, loadedSettings);\n      }\n    } catch (error) {\n      console.error('Failed to load agent settings:', error);\n    }\n  }, [currentAgent?.id, updateLocalSettings]);\n\n  // Load settings when agent changes\n  useEffect(() => {\n    if (currentAgent?.id) {\n      loadAgentSettings();\n    }\n  }, [currentAgent?.id, loadAgentSettings]);\n\n  const updateSetting = async (key: keyof AgentSettings, value: string) => {\n    if (!currentAgent?.id) return;\n\n    setIsLoadingSettings(true);\n    try {\n      const client = getClient();\n      let updates: Partial<AgentSettings> = { [key]: value };\n      \n      // If changing capability, check if current model is still valid\n      if (key === 'agent_capability') {\n        const validModels = CHATBOT_MODELS.filter(m => m.capabilities.includes(value as any));\n        const currentModelValid = validModels.some(m => m.value === settings.chatbot_model);\n        \n        if (!currentModelValid && validModels.length > 0) {\n          // Switch to first available model for new capability\n          updates.chatbot_model = validModels[0].value;\n          toast.info(`Model changed to ${validModels[0].label} for ${AGENT_CAPABILITIES.find(c => c.value === value)?.label} mode`);\n        }\n      }\n      \n      await client.updateAgentSettings(currentAgent.id, updates);\n      updateLocalSettings(currentAgent.id, updates);\n      toast.success('Setting updated successfully');\n    } catch (error) {\n      console.error('Failed to update setting:', error);\n      toast.error('Failed to update setting');\n    } finally {\n      setIsLoadingSettings(false);\n    }\n  };\n  \n  /**\n   * Auto-resize textarea based on content\n   * Grows up to maxHeight (200px) then scrolls\n   */\n  const adjustTextareaHeight = useCallback(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      const scrollHeight = textarea.scrollHeight;\n      const maxHeight = 200; // Max height in pixels - customize as needed\n      textarea.style.height = `${Math.min(scrollHeight, maxHeight)}px`;\n    }\n  }, []);\n  \n  // Handle text input changes\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    if (value.length <= maxLength) {\n      setInput(value);\n      adjustTextareaHeight();\n    }\n  };\n  \n  // Handle key presses\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e as any);\n    }\n  };\n  \n  // Handle form submission\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    \n    if (disabled) return;\n    if (!input.trim() && files.length === 0) return;\n    \n    // Convert FileUpload objects to File objects\n    const fileObjects = files\n      .filter(f => f.status === 'uploaded')\n      .map(f => f.file); // Use the actual File object\n    \n    onSend(input.trim(), fileObjects);\n    \n    // Reset form\n    setInput('');\n    setFiles([]);\n    \n    // Reset textarea height\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n    }\n    \n    // Focus textarea\n    setTimeout(() => {\n      textareaRef.current?.focus();\n    }, 0);\n  };\n  \n  /**\n   * Handle file uploads with validation\n   * Checks file size and type before accepting\n   * Shows toast notifications for validation errors\n   */\n  const handleFileUpload = useCallback((newFiles: File[]) => {\n    const validFiles = newFiles.filter(file => {\n      // Check file size against MAX_FILE_SIZE constant\n      if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n        toast.error(`File \"${file.name}\" is too large. Maximum size is ${formatFileSize(CONSTANTS.MAX_FILE_SIZE)}`);\n        return false;\n      }\n      \n      // Check file type against ACCEPTED_FILE_TYPES\n      if (!isFileTypeAllowed(file.type, CONSTANTS.ACCEPTED_FILE_TYPES)) {\n        toast.error(`File type \"${file.type}\" is not supported`);\n        return false;\n      }\n      \n      return true;\n    });\n    \n    const uploadFiles: FileUpload[] = validFiles.map(file => ({\n      id: generateId(),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      status: 'uploading',\n      progress: 0,\n      file: file, // Store the actual File object\n    }));\n    \n    setFiles(prev => [...prev, ...uploadFiles]);\n    \n    // Simulate file upload\n    uploadFiles.forEach(uploadFile => {\n      simulateUpload(uploadFile);\n    });\n    \n  }, []);\n  \n  /**\n   * Simulate file upload progress\n   * In production, replace with actual upload logic\n   * Updates progress in 100ms intervals\n   */\n  const simulateUpload = (uploadFile: FileUpload) => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 20;\n      \n      if (progress >= 100) {\n        progress = 100;\n        clearInterval(interval);\n        \n        // Mark file as uploaded\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, status: 'uploaded' as const, progress: 100 }\n            : f\n        ));\n      } else {\n        // Update progress\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, progress: Math.round(progress) }\n            : f\n        ));\n      }\n    }, 100);\n  };\n  \n  // Remove file\n  const removeFile = (fileId: string) => {\n    setFiles(prev => prev.filter(f => f.id !== fileId));\n  };\n  \n  /**\n   * Dropzone configuration for drag-and-drop\n   * - Accepts files based on ACCEPTED_FILE_TYPES\n   * - Validates file size\n   * - Shows overlay on drag\n   * - Disabled click/keyboard to use custom button\n   */\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: handleFileUpload,\n    noClick: true, // Use custom button instead\n    noKeyboard: true,\n    accept: CONSTANTS.ACCEPTED_FILE_TYPES.reduce((acc, type) => {\n      acc[type] = [];\n      return acc;\n    }, {} as Record<string, string[]>),\n    maxSize: CONSTANTS.MAX_FILE_SIZE,\n  });\n  \n  const canSend = !disabled && (input.trim() || files.some(f => f.status === 'uploaded'));\n  \n  // Handle speech-to-text transcription\n  const handleTranscription = useCallback((text: string) => {\n    setInput(prevInput => {\n      const newInput = prevInput ? `${prevInput} ${text}` : text;\n      return newInput.length <= maxLength ? newInput : prevInput;\n    });\n    \n    // Adjust textarea height after updating text\n    setTimeout(() => {\n      adjustTextareaHeight();\n    }, 0);\n  }, [maxLength, adjustTextareaHeight]);\n  \n  // Handle transcription start\n  const handleTranscriptionStart = useCallback(() => {\n    setIsTranscribing(true);\n  }, []);\n  \n  // Handle transcription end\n  const handleTranscriptionEnd = useCallback(() => {\n    setIsTranscribing(false);\n  }, []);\n  \n  return (\n    <div \n      {...getRootProps()}\n      className={cn(\n        'relative',\n        isDragActive && 'bg-brand-50',\n        className\n      )}\n    >\n      <input {...getInputProps()} />\n      \n      {/* Drag Overlay */}\n      <AnimatePresence>\n        {isDragActive && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-brand-50 border-2 border-dashed border-brand-300 rounded-lg flex items-center justify-center z-10\"\n          >\n            <div className=\"text-center\">\n              <Upload className=\"w-8 h-8 text-brand-600 mx-auto mb-2\" />\n              <p className=\"text-brand-700 font-medium\">Drop files here to upload</p>\n              <p className=\"text-brand-600 text-sm\">\n                Supports PDF, DOC, TXT, and more\n              </p>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* File Preview */}\n      <AnimatePresence>\n        {files.length > 0 && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"px-4 pt-3 pb-2 flex flex-wrap gap-2\"\n          >\n            {files.map((file) => (\n              <FileChip\n                key={file.id}\n                file={file}\n                onRemove={() => removeFile(file.id)}\n              />\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* Main Input Container */}\n      <div className={cn(\n        \"mx-4 my-3 bg-background border border-border rounded-2xl shadow-sm\",\n        \"focus-within:ring-2 focus-within:ring-brand-500 focus-within:border-transparent transition-all\"\n      )}>\n        {/* Text Input Area */}\n        <form onSubmit={handleSubmit} className=\"relative\">\n          <div className=\"flex items-center p-3 pb-1\">\n            {/* File Upload Button - Hidden in free trial mode and widget/floating modes */}\n            {!isFreeTrialMode && mode === 'standalone' && (\n              <FileUploadButton\n                onUpload={handleFileUpload}\n                disabled={disabled}\n                isMobile={isMobile}\n              />\n            )}\n            \n            {/* Speech to Text Button - Hidden in widget/floating modes */}\n            {mode === 'standalone' && (\n              <SpeechToTextButton\n                onTranscription={handleTranscription}\n                onTranscriptionStart={handleTranscriptionStart}\n                onTranscriptionEnd={handleTranscriptionEnd}\n                disabled={disabled}\n                isMobile={isMobile}\n                className={cn(\n                  \"!h-8 !w-8 !min-w-0 mr-2\",\n                  isMobile && \"!h-9 !w-9\"\n                )}\n              />\n            )}\n            \n            {/* Textarea */}\n            <div className=\"flex-1 relative\">\n              <textarea\n                ref={textareaRef}\n                value={input}\n                onChange={handleInputChange}\n                onKeyDown={handleKeyDown}\n                placeholder={isTranscribing ? '' : placeholder}\n                disabled={disabled}\n                rows={1}\n                className={cn(\n                  'w-full resize-none bg-transparent border-0',\n                  'focus:outline-none focus:ring-0',\n                  'disabled:opacity-50 disabled:cursor-not-allowed',\n                  'placeholder:text-muted-foreground text-foreground',\n                  isMobile \n                    ? 'text-base min-h-[24px] max-h-[120px] placeholder:text-sm' \n                    : 'text-sm min-h-[20px] max-h-[200px]'\n                )}\n                style={{\n                  height: 'auto',\n                  overflowY: input.split('\\n').length > 5 ? 'auto' : 'hidden',\n                }}\n              />\n              \n              {/* Transcribing Animation */}\n              {isTranscribing && !input && (\n                <div className=\"absolute top-0 left-0 right-0 bottom-0 flex items-center pointer-events-none\">\n                  <span className={cn(\n                    \"text-muted-foreground animate-pulse\",\n                    isMobile ? \"text-base\" : \"text-sm\"\n                  )}>\n                    Transcribing\n                    <span className=\"inline-flex\">\n                      <span className=\"animate-bounce\" style={{ animationDelay: '0ms' }}>.</span>\n                      <span className=\"animate-bounce\" style={{ animationDelay: '150ms' }}>.</span>\n                      <span className=\"animate-bounce\" style={{ animationDelay: '300ms' }}>.</span>\n                    </span>\n                  </span>\n                </div>\n              )}\n            </div>\n            \n            {/* Character Count */}\n            {input.length > 0 && (\n              <div className={cn(\n                \"text-xs text-muted-foreground mr-2\",\n                isMobile ? \"text-xs\" : \"text-xs\"\n              )}>\n                {input.length}/{maxLength}\n              </div>\n            )}\n            \n            {/* Action Buttons */}\n            <div className=\"flex items-center gap-1\">\n              {/* Voice Button - Hidden in widget/floating modes */}\n              {onVoiceClick && mode === 'standalone' && (\n                <Button\n                  type=\"button\"\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={onVoiceClick}\n                  disabled={disabled}\n                  className={cn(\n                    'relative group transition-all duration-200',\n                    'bg-gradient-to-br from-purple-500/10 to-pink-500/10',\n                    'hover:from-purple-500/20 hover:to-pink-500/20',\n                    'border border-purple-500/20 hover:border-purple-500/40',\n                    'shadow-sm hover:shadow-md',\n                    isMobile ? 'h-10 w-10' : 'h-9 w-9'\n                  )}\n                  title=\"Voice mode\"\n                >\n                  <div className=\"absolute inset-0 rounded-md bg-gradient-to-br from-purple-600/5 to-pink-600/5 opacity-0 group-hover:opacity-100 transition-opacity\" />\n                  <AnimatedVoiceIcon \n                    size={isMobile ? 'lg' : 'md'} \n                    isActive={false}\n                    className=\"relative z-10\"\n                  />\n                </Button>\n              )}\n              \n              {/* Send Button */}\n              <Button\n                type=\"submit\"\n                size=\"icon\"\n                disabled={!canSend}\n                className={cn(\n                  'transition-all duration-200 group',\n                  'bg-brand-500 hover:bg-brand-600 active:bg-brand-700',\n                  'text-white shadow-sm hover:shadow-md',\n                  'disabled:opacity-50 disabled:cursor-not-allowed',\n                  'disabled:hover:bg-brand-500 disabled:hover:shadow-sm',\n                  isMobile ? 'h-10 w-10' : 'h-9 w-9'\n                )}\n                title={disabled ? 'Sending message...' : 'Send message'}\n              >\n                {disabled ? (\n                  <Spinner size=\"sm\" className=\"text-white\" />\n                ) : (\n                  <Send className={cn(\n                    \"transition-transform duration-200 group-hover:translate-x-0.5 group-hover:-translate-y-0.5\",\n                    isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n                  )} />\n                )}\n              </Button>\n            </div>\n          </div>\n        </form>\n        \n        {/* Settings Toggle Button - Hidden in widget/floating modes */}\n        {mode === 'standalone' && (\n          <div className=\"border-t border-gray-200/50 dark:border-gray-800/30\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setShowSettings(!showSettings)}\n              className={cn(\n                \"flex items-center gap-2 text-xs\",\n                isMobile ? \"w-full justify-center h-9 px-3 py-2\" : \"w-auto justify-start h-8 px-3 py-1.5\",\n                \"hover:bg-accent/50 transition-all duration-200\",\n                showSettings && \"bg-accent/30\"\n              )}\n              title=\"Customize chat settings including response source, AI model, and persona\"\n            >\n              <SlidersHorizontal className={cn(\n                \"transition-colors\",\n                showSettings ? \"text-brand-500\" : \"text-muted-foreground\",\n                isMobile ? \"h-4 w-4\" : \"h-3.5 w-3.5\"\n              )} />\n              <span className={cn(\n                \"font-medium text-muted-foreground\",\n                showSettings && \"text-brand-600\"\n              )}>Customize Chat</span>\n              <ChevronDown className={cn(\n                \"h-3 w-3 opacity-50 transition-transform duration-200\",\n                showSettings && \"rotate-180\"\n              )} />\n            </Button>\n          \n          {/* Expandable Settings Panel */}\n          <AnimatePresence>\n            {showSettings && (\n              <motion.div\n                initial={{ height: 0, opacity: 0 }}\n                animate={{ height: \"auto\", opacity: 1 }}\n                exit={{ height: 0, opacity: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"overflow-hidden bg-accent/20\"\n              >\n                <div className={cn(\n                  \"flex items-center border-t border-gray-200/50 dark:border-gray-800/30\",\n                  isMobile \n                    ? \"justify-between px-2 pb-2 pt-2\" \n                    : \"gap-2 px-3 pb-2.5 pt-2.5\"\n                )}>\n                  {/* Response Source */}\n                  <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-4 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <MessageSquare className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Source</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"start\" className=\"w-64\">\n            <DropdownMenuLabel className=\"text-xs\">RESPONSE SOURCE</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {RESPONSE_SOURCES.map((source) => {\n              const Icon = source.icon;\n              return (\n                <DropdownMenuItem\n                  key={source.value}\n                  onClick={() => updateSetting('response_source', source.value)}\n                  className=\"flex flex-col items-start py-1.5\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Icon className=\"h-3.5 w-3.5\" />\n                    <span className=\"text-sm font-medium\">{source.label}</span>\n                    {settings.response_source === source.value && (\n                      <span className=\"text-xs text-brand-600\">✓</span>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-5\">{source.description}</span>\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Model Selection */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-2 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <Brain className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Model</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"center\" className=\"w-72\">\n            <DropdownMenuLabel className=\"text-xs\">AI MODEL</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {CHATBOT_MODELS\n              .filter((model) => settings.agent_capability && model.capabilities.includes(settings.agent_capability as any))\n              .map((model) => {\n                const Icon = model.icon;\n                return (\n                  <DropdownMenuItem\n                    key={model.value}\n                    onClick={() => updateSetting('chatbot_model', model.value)}\n                    className=\"flex flex-col items-start py-1.5\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <Icon className=\"h-3.5 w-3.5\" />\n                      <span className=\"text-sm font-medium\">{model.label}</span>\n                      {settings.chatbot_model === model.value && (\n                        <span className=\"text-xs text-brand-600\">✓</span>\n                      )}\n                    </div>\n                    <span className=\"text-xs text-muted-foreground ml-5\">{model.description}</span>\n                  </DropdownMenuItem>\n                );\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Persona Selection */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-2 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <User className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Persona</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"center\" className=\"w-64\">\n            <DropdownMenuLabel className=\"text-xs\">ASSISTANT PERSONA</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {COMMON_PERSONAS.map((persona) => {\n              const Icon = persona.icon;\n              return (\n                <DropdownMenuItem\n                  key={persona.value}\n                  onClick={() => updateSetting('custom_persona', persona.value)}\n                  className=\"flex flex-col items-start py-1.5\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Icon className=\"h-3.5 w-3.5\" />\n                    <span className=\"text-sm font-medium\">{persona.label}</span>\n                    {settings.custom_persona === persona.value && (\n                      <span className=\"text-xs text-brand-600\">✓</span>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-5\">{persona.description}</span>\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Agent Capability */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-2 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <Settings className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Mode</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-72\">\n            <DropdownMenuLabel className=\"text-xs\">RESPONSE MODE</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {AGENT_CAPABILITIES.map((capability) => {\n              const Icon = capability.icon;\n              return (\n                <DropdownMenuItem\n                  key={capability.value}\n                  onClick={() => updateSetting('agent_capability', capability.value)}\n                  className=\"flex flex-col items-start py-1.5\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Icon className=\"h-3.5 w-3.5\" />\n                    <span className=\"text-sm font-medium\">{capability.label}</span>\n                    {capability.enterprise && (\n                      <span className=\"text-[10px] bg-muted text-muted-foreground px-1 py-0.5 rounded\">Enterprise only</span>\n                    )}\n                    {settings.agent_capability === capability.value && (\n                      <span className=\"text-xs text-brand-600\">✓</span>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-5\">{capability.description}</span>\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n        )}\n      </div>\n      \n      {/* Input Hints - Below configuration options */}\n      {!isMobile && (\n        <div className=\"px-4 pb-3 text-xs text-muted-foreground\">\n          <span>Press Enter to send, Shift+Enter for new line</span>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Typing Indicator Component\n * \n * Shows animated typing indicator when AI is generating a response.\n * Provides visual feedback that the system is processing.\n * \n * Features:\n * - Three-dot bouncing animation\n * - AI avatar display\n * - Staggered animation delays\n * - Consistent styling with messages\n * - Subtle bounce effect\n * \n * Animation:\n * - Uses CSS animations defined in globals.css\n * - animate-bounce-subtle class for smooth motion\n * - Staggered delays (0ms, 100ms, 200ms)\n * - Creates wave-like effect\n * \n * Design:\n * - Matches message component layout\n * - Gray background for distinction\n * - Centered in chat container\n * - Responsive max-width\n * \n * Features:\n * - Multiple animation styles for enhanced visual feedback\n * - Contextual status messages for different AI processing states\n * - Progress indicators with time estimation for long operations\n * - Professional avatar customization with brand consistency\n * - Advanced loading patterns including skeleton alternatives\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n/**\n * Props for TypingIndicator\n * \n * @property className - Additional CSS classes for styling\n */\ninterface TypingIndicatorProps {\n  className?: string;\n}\n\n/**\n * Typing Indicator Component\n * \n * Displays animated dots to indicate AI is typing/processing.\n * Maintains visual consistency with message components.\n */\nexport const TypingIndicator: React.FC<TypingIndicatorProps> = ({ className }) => {\n  return (\n    <div className={cn(\n      'px-4 py-6 bg-muted border-y border-border',\n      className\n    )}>\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"w-8 h-8 rounded-full bg-background border border-border flex items-center justify-center flex-shrink-0\">\n          <Bot className=\"w-4 h-4 text-brand-600\" />\n        </div>\n        \n        {/* Typing Animation */}\n        <div className=\"flex items-center gap-1 py-2\">\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle\" />\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle delay-100\" />\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle delay-200\" />\n        </div>\n      </div>\n    </div>\n  );\n};","/**\n * Agent Selector Component\n * \n * Dropdown selector for switching between different CustomGPT agents.\n * Displays the current agent and allows users to select from available agents.\n * \n * Features:\n * - Current agent display with avatar\n * - Dropdown list of all available agents\n * - Agent metadata display (model, status)\n * - Quick settings access per agent\n * - Refresh agents functionality\n * - Loading and error states\n * - Click-outside-to-close behavior\n * - Smooth animations\n * \n * State Management:\n * - Uses agentStore for agent data\n * - Local state for dropdown open/close\n * - Automatic agent fetching on dropdown open\n * \n * UI/UX:\n * - Visual selection indicator (checkmark)\n * - Hover states for better interactivity\n * - Loading skeleton for initial load\n * - Error state with retry option\n * - Empty state guidance\n * \n * Features:\n * - Comprehensive agent selection with real-time filtering\n * - Intelligent agent management with favorites and categories\n * - Quick agent creation workflow integration\n * - Professional avatar display with status indicators\n * - Full keyboard navigation and accessibility support\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Bot, \n  ChevronDown, \n  Settings, \n  RefreshCw,\n  AlertCircle,\n  Check,\n  BarChart3,\n  User\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { useAgentStore } from '@/store';\nimport { Spinner } from '@/components/ui/loading';\nimport { getClient } from '@/lib/api/client';\n\n/**\n * Props for AgentSelector component\n * \n * @property className - Additional CSS classes\n * @property showSettings - Whether to show settings button for each agent\n * @property onSettingsClick - Callback when settings button is clicked\n */\ninterface AgentSelectorProps {\n  className?: string;\n  showSettings?: boolean;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Props for agent avatar component\n */\ninterface AgentAvatarProps {\n  agent: Agent | null;\n  size?: 'sm' | 'md';\n  isSelected?: boolean;\n  className?: string;\n}\n\n/**\n * Props for individual agent item in dropdown\n * \n * @property agent - Agent data object\n * @property isSelected - Whether this agent is currently selected\n * @property onSelect - Callback when agent is selected\n * @property onSettingsClick - Optional callback for settings button\n */\ninterface AgentItemProps {\n  agent: Agent;\n  isSelected: boolean;\n  onSelect: (agent: Agent) => void;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Agent Avatar Component\n * \n * Displays agent avatar with fallback to default icon\n */\nconst AgentAvatar: React.FC<AgentAvatarProps> = ({ \n  agent, \n  size = 'md', \n  isSelected = false, \n  className \n}) => {\n  const sizeClasses = {\n    sm: 'w-6 h-6',\n    md: 'w-8 h-8'\n  };\n  \n  const iconSizeClasses = {\n    sm: 'w-3 h-3',\n    md: 'w-4 h-4'\n  };\n\n  const avatarUrl = agent?.settings?.chatbot_avatar;\n\n  return (\n    <div className={cn(\n      'rounded-full flex items-center justify-center flex-shrink-0 overflow-hidden',\n      sizeClasses[size],\n      isSelected ? 'bg-brand-600' : 'bg-accent',\n      className\n    )}>\n      {avatarUrl ? (\n        <img\n          src={avatarUrl}\n          alt={`${agent?.project_name} avatar`}\n          className=\"w-full h-full object-cover\"\n          onError={(e) => {\n            // Fallback to icon if image fails to load\n            const target = e.target as HTMLImageElement;\n            target.style.display = 'none';\n            const parent = target.parentElement;\n            if (parent) {\n              const icon = document.createElement('div');\n              icon.className = `w-full h-full flex items-center justify-center`;\n              icon.innerHTML = `<svg class=\"${iconSizeClasses[size]} ${isSelected ? 'text-white' : 'text-gray-600'}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"></path></svg>`;\n              parent.appendChild(icon);\n            }\n          }}\n        />\n      ) : (\n        <User className={cn(\n          iconSizeClasses[size],\n          isSelected ? 'text-white' : 'text-muted-foreground'\n        )} />\n      )}\n    </div>\n  );\n};\n\n/**\n * Individual Agent Item Component\n * \n * Renders a single agent in the dropdown list with:\n * - Agent avatar and name\n * - Selection indicator\n * - Metadata (model, status)\n * - Settings button (optional)\n */\nconst AgentItem: React.FC<AgentItemProps> = ({ \n  agent, \n  isSelected, \n  onSelect, \n  onSettingsClick \n}) => {\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-between p-3 rounded-lg cursor-pointer transition-colors group',\n        'hover:bg-accent',\n        isSelected && 'bg-brand-50 hover:bg-brand-100'\n      )}\n      onClick={() => onSelect(agent)}\n    >\n      <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n        {/* Avatar */}\n        <AgentAvatar \n          agent={agent}\n          size=\"md\"\n          isSelected={isSelected}\n        />\n        \n        {/* Agent Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"font-medium text-foreground truncate\">\n              {agent.project_name}\n            </h3>\n            {isSelected && (\n              <Check className=\"w-4 h-4 text-brand-600 flex-shrink-0\" />\n            )}\n          </div>\n          \n          {/* Status */}\n          <div className=\"mt-1 text-xs text-muted-foreground\">\n            <span>Status: {agent.is_chat_active ? 'Active' : 'Inactive'}</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Settings Button */}\n      {onSettingsClick && (\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onSettingsClick(agent);\n          }}\n          className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-muted-foreground hover:text-foreground\"\n          title=\"Agent Settings\"\n        >\n          <Settings className=\"h-3 w-3\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Selector Component\n * \n * Main component that provides agent switching functionality.\n * Manages dropdown state and handles agent selection.\n * \n * @param className - Additional CSS classes for styling\n * @param showSettings - Whether to show settings buttons (default: true)\n * @param onSettingsClick - Handler for agent settings clicks\n */\nexport const AgentSelector: React.FC<AgentSelectorProps> = ({ \n  className,\n  showSettings = true,\n  onSettingsClick\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isSelectingAgent, setIsSelectingAgent] = useState(false);\n  const [loadingSettings, setLoadingSettings] = useState<Set<number>>(new Set());\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  \n  const { \n    agents, \n    currentAgent, \n    loading, \n    error, \n    fetchAgents, \n    loadMoreAgents,\n    selectAgent,\n    setAgents,\n    paginationMeta\n  } = useAgentStore();\n\n  /**\n   * Fetch settings for agents that don't have them loaded\n   */\n  const fetchAgentSettings = async (agentsToLoad: Agent[]) => {\n    const agentsNeedingSettings = agentsToLoad.filter(agent => \n      !agent.settings && !loadingSettings.has(agent.id)\n    );\n\n    if (agentsNeedingSettings.length === 0) return;\n\n    // Mark agents as loading\n    setLoadingSettings(prev => {\n      const newSet = new Set(prev);\n      agentsNeedingSettings.forEach(agent => newSet.add(agent.id));\n      return newSet;\n    });\n\n    try {\n      const client = getClient();\n      const settingsPromises = agentsNeedingSettings.map(async (agent) => {\n        try {\n          const response = await client.getAgentSettings(agent.id);\n          return {\n            agentId: agent.id,\n            settings: response.data || response\n          };\n        } catch (error) {\n          console.warn(`Failed to load settings for agent ${agent.id}:`, error);\n          return {\n            agentId: agent.id,\n            settings: null\n          };\n        }\n      });\n\n      const results = await Promise.all(settingsPromises);\n      \n      // Update agents with their settings\n      const updatedAgents = agents.map(agent => {\n        const result = results.find(r => r.agentId === agent.id);\n        if (result && result.settings) {\n          return { ...agent, settings: result.settings };\n        }\n        return agent;\n      });\n\n      setAgents(updatedAgents);\n\n    } catch (error) {\n      console.error('Failed to fetch agent settings:', error);\n    } finally {\n      // Clear loading state\n      setLoadingSettings(prev => {\n        const newSet = new Set(prev);\n        agentsNeedingSettings.forEach(agent => newSet.delete(agent.id));\n        return newSet;\n      });\n    }\n  };\n\n  /**\n   * Close dropdown when clicking outside\n   * \n   * Uses mousedown event for better UX (closes before click completes)\n   */\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [isOpen]);\n\n  /**\n   * Refresh agents list\n   * \n   * Fetches latest agents from the API and shows toast feedback.\n   * This will temporarily cause avatars to flicker as settings are reloaded.\n   */\n  const handleRefresh = async () => {\n    try {\n      await fetchAgents();\n      toast.success('Agents refreshed');\n    } catch (error) {\n      toast.error('Failed to refresh agents');\n    }\n  };\n\n  /**\n   * Handle agent selection\n   * \n   * Updates the current agent, closes dropdown, and shows confirmation\n   */\n  const handleSelectAgent = async (agent: Agent) => {\n    if (isSelectingAgent) return; // Prevent multiple selections\n    \n    setIsSelectingAgent(true);\n    try {\n      await selectAgent(agent);\n      setIsOpen(false);\n      toast.success(`Switched to ${agent.project_name}`);\n    } catch (error) {\n      toast.error('Failed to switch agent');\n    } finally {\n      // Add a small delay to show the loading state briefly\n      setTimeout(() => {\n        setIsSelectingAgent(false);\n      }, 300);\n    }\n  };\n\n  /**\n   * Fetch settings when agents are loaded and dropdown is open\n   * Only runs when needed to prevent unnecessary API calls\n   */\n  useEffect(() => {\n    if (isOpen && agents.length > 0) {\n      // Only fetch if there are agents without settings\n      const agentsNeedingSettings = agents.some(agent => !agent.settings);\n      if (agentsNeedingSettings) {\n        fetchAgentSettings(agents);\n      }\n    }\n  }, [isOpen, agents.length, agents, fetchAgentSettings]);\n\n  /**\n   * Toggle dropdown and conditionally fetch agents\n   * \n   * Only fetches agents if the array is empty to prevent flickering.\n   * Settings are fetched via useEffect when agents are loaded.\n   */\n  const handleToggleDropdown = async () => {\n    const willOpen = !isOpen;\n    setIsOpen(willOpen);\n    \n    // Only fetch agents if we don't have any yet\n    // This prevents flickering caused by replacing agents that have settings\n    // with fresh agents that don't have settings loaded\n    if (willOpen && agents.length === 0) {\n      try {\n        await fetchAgents();\n      } catch (error) {\n        // Don't show error toast here as it might be annoying\n      }\n    }\n  };\n\n  if (loading && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-muted animate-pulse\" />\n          <div className=\"flex-1\">\n            <div className=\"h-4 bg-muted rounded animate-pulse mb-2\" />\n            <div className=\"h-3 bg-muted/50 rounded animate-pulse w-3/4\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-red-100 flex items-center justify-center flex-shrink-0\">\n            <AlertCircle className=\"w-4 h-4 text-red-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-red-600 font-medium\">Failed to load agents</p>\n            <p className=\"text-xs text-red-500\">{error}</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            className=\"text-red-600 hover:text-red-700\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentAgent && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-accent flex items-center justify-center flex-shrink-0\">\n            <Bot className=\"w-4 h-4 text-muted-foreground\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-muted-foreground font-medium\">No agents available</p>\n            <p className=\"text-xs text-muted-foreground\">Check your API configuration</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            disabled={loading}\n          >\n            <RefreshCw className={cn('w-4 h-4', loading && 'animate-spin')} />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('relative', className)} ref={dropdownRef}>\n      {/* Loading overlay when selecting agent */}\n      {isSelectingAgent && (\n        <div className=\"absolute inset-0 bg-background/80 backdrop-blur-sm rounded-lg flex items-center justify-center z-50\">\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Spinner size=\"sm\" />\n            <span className=\"text-foreground\">Switching agent...</span>\n          </div>\n        </div>\n      )}\n      {/* Selected Agent Display */}\n      <button\n        onClick={handleToggleDropdown}\n        className={cn(\n          'w-full p-3 bg-background border border-border rounded-lg text-left transition-colors',\n          'hover:bg-accent focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent',\n          isOpen && 'ring-2 ring-ring border-transparent'\n        )}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            {/* Avatar */}\n            <AgentAvatar \n              agent={currentAgent}\n              size=\"md\"\n              isSelected={true}\n            />\n            \n            {/* Agent Info */}\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-medium text-foreground truncate\">\n                {currentAgent?.project_name || 'Select Agent'}\n              </h3>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {/* Analytics Button */}\n            {currentAgent && (\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  // Navigate to projects page with analytics tab\n                  window.location.href = `/projects?id=${currentAgent.id}&tab=analytics`;\n                }}\n                title=\"View Analytics\"\n                className=\"text-muted-foreground hover:text-foreground\"\n              >\n                <BarChart3 className=\"w-4 h-4\" />\n              </Button>\n            )}\n            \n            {/* Refresh Button */}\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleRefresh();\n              }}\n              disabled={loading}\n              className=\"h-6 w-6 text-muted-foreground hover:text-foreground\"\n              title=\"Refresh Agents\"\n            >\n              <RefreshCw className={cn('h-3 w-3', loading && 'animate-spin')} />\n            </Button>\n            \n            {/* Dropdown Arrow */}\n            <ChevronDown className={cn(\n              'w-4 h-4 text-muted-foreground transition-transform',\n              isOpen && 'rotate-180'\n            )} />\n          </div>\n        </div>\n      </button>\n\n      {/* Dropdown */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-background border border-border rounded-lg shadow-lg z-50 max-h-80 overflow-y-auto\"\n          >\n            <div className=\"p-2\">\n              {/* Header */}\n              <div className=\"px-2 py-1 mb-2\">\n                <h4 className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n                  Available Agents ({Array.isArray(agents) ? agents.length : 0}\n                  {paginationMeta?.totalCount && paginationMeta.totalCount !== agents.length && (\n                    <span> of {paginationMeta.totalCount}</span>\n                  )})\n                </h4>\n              </div>\n              \n              {/* Agent List */}\n              <div className=\"space-y-1\">\n                {Array.isArray(agents) && agents.length > 0 ? (\n                  agents.map((agent) => (\n                    <AgentItem\n                      key={agent.id}\n                      agent={agent}\n                      isSelected={currentAgent?.id === agent.id}\n                      onSelect={handleSelectAgent}\n                      onSettingsClick={showSettings ? onSettingsClick : undefined}\n                    />\n                  ))\n                ) : (\n                  <div className=\"px-2 py-4 text-center\">\n                    <p className=\"text-sm text-muted-foreground\">No agents found</p>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={handleRefresh}\n                      className=\"mt-2\"\n                    >\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Refresh\n                    </Button>\n                  </div>\n                )}\n              </div>\n              \n              {/* Load More Button */}\n              {Array.isArray(agents) && agents.length > 0 && paginationMeta?.hasMore && (\n                <div className=\"px-2 py-2 border-t\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={async () => {\n                      try {\n                        await loadMoreAgents();\n                      } catch (error) {\n                        console.error('Failed to load more agents:', error);\n                      }\n                    }}\n                    disabled={loading}\n                    className=\"w-full\"\n                  >\n                    {loading ? (\n                      <>\n                        <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Loading...\n                      </>\n                    ) : (\n                      <>\n                        <ChevronDown className=\"w-4 h-4 mr-2\" />\n                        Load More Agents\n                      </>\n                    )}\n                  </Button>\n                </div>\n              )}\n              \n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","'use client';\n\nimport { useState, useEffect } from 'react';\n\n/**\n * Custom hook for responsive design based on media queries\n * Provides mobile-first breakpoint detection\n */\nexport const useMediaQuery = (query: string): boolean => {\n  const [matches, setMatches] = useState(false);\n\n  useEffect(() => {\n    // Handle server-side rendering\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const media = window.matchMedia(query);\n    \n    // Set initial value\n    setMatches(media.matches);\n\n    // Create event listener\n    const listener = (event: MediaQueryListEvent) => {\n      setMatches(event.matches);\n    };\n\n    // Add listener\n    media.addEventListener('change', listener);\n\n    // Cleanup\n    return () => media.removeEventListener('change', listener);\n  }, [query]);\n\n  return matches;\n};\n\n/**\n * Predefined breakpoint hooks for common use cases\n */\nexport const useBreakpoint = () => {\n  const isMobile = useMediaQuery('(max-width: 767px)');\n  const isTablet = useMediaQuery('(min-width: 768px) and (max-width: 1023px)');\n  const isDesktop = useMediaQuery('(min-width: 1024px)');\n  const isLargeScreen = useMediaQuery('(min-width: 1280px)');\n  \n  // Touch device detection\n  const isTouchDevice = useMediaQuery('(pointer: coarse)');\n  \n  return {\n    isMobile,\n    isTablet,\n    isDesktop,\n    isLargeScreen,\n    isTouchDevice,\n    // Helper computed values\n    isMobileOrTablet: isMobile || isTablet,\n    isTabletOrDesktop: isTablet || isDesktop\n  };\n};\n\n/**\n * Hook for getting current screen size category\n */\nexport const useScreenSize = () => {\n  const { isMobile, isTablet, isDesktop, isLargeScreen } = useBreakpoint();\n  \n  if (isMobile) return 'mobile';\n  if (isTablet) return 'tablet';\n  if (isLargeScreen) return 'large';\n  if (isDesktop) return 'desktop';\n  return 'desktop'; // fallback\n};","import React from 'react';\nimport { toast as globalToast, Toaster } from 'sonner';\n\n/**\n * Isolated toast implementation for widgets\n * \n * Creates widget-specific toast notifications that don't interfere\n * with other widget instances or the main application.\n */\n\n// Store widget-specific toast queues\nconst widgetToastQueues = new Map<string, Array<any>>();\n\n/**\n * Widget-specific Toaster component\n * This component only shows toasts for its specific widget session\n */\nexport const WidgetToaster: React.FC<{ sessionId: string }> = ({ sessionId }) => {\n  // Create a filter function that only shows toasts for this widget\n  return (\n    <Toaster \n      position=\"top-center\"\n      closeButton\n      gap={8}\n      toastOptions={{\n        style: { \n          zIndex: 10000,\n          marginTop: '8px'\n        },\n        // Custom class to identify widget-specific toasts\n        className: `widget-toast-${sessionId}`,\n      }}\n      // Filter toasts to only show those for this widget\n      richColors\n      theme=\"light\"\n    />\n  );\n};\n\n/**\n * Get or create a widget-specific toast instance\n */\nexport function getWidgetToast(sessionId: string) {\n  // Initialize queue if not exists\n  if (!widgetToastQueues.has(sessionId)) {\n    widgetToastQueues.set(sessionId, []);\n  }\n  \n  return {\n    success: (message: string, options?: any) => {\n      // Use data attribute to mark widget-specific toasts\n      globalToast.success(message, {\n        ...options,\n        id: `${sessionId}-${Date.now()}-${Math.random()}`,\n        duration: 3000,\n        className: `widget-toast-${sessionId}`,\n        data: {\n          widgetSessionId: sessionId\n        }\n      });\n    },\n    error: (message: string, options?: any) => {\n      globalToast.error(message, {\n        ...options,\n        id: `${sessionId}-${Date.now()}-${Math.random()}`,\n        duration: 4000,\n        className: `widget-toast-${sessionId}`,\n        data: {\n          widgetSessionId: sessionId\n        }\n      });\n    },\n    info: (message: string, options?: any) => {\n      globalToast.info(message, {\n        ...options,\n        id: `${sessionId}-${Date.now()}-${Math.random()}`,\n        duration: 3000,\n        className: `widget-toast-${sessionId}`,\n        data: {\n          widgetSessionId: sessionId\n        }\n      });\n    },\n    warning: (message: string, options?: any) => {\n      globalToast.warning(message, {\n        ...options,\n        id: `${sessionId}-${Date.now()}-${Math.random()}`,\n        duration: 3500,\n        className: `widget-toast-${sessionId}`,\n        data: {\n          widgetSessionId: sessionId\n        }\n      });\n    },\n    loading: (message: string, options?: any) => {\n      return globalToast.loading(message, {\n        ...options,\n        id: `${sessionId}-${Date.now()}-${Math.random()}`,\n        className: `widget-toast-${sessionId}`,\n        data: {\n          widgetSessionId: sessionId\n        }\n      });\n    },\n    dismiss: (id?: string) => {\n      if (id) {\n        globalToast.dismiss(id);\n      }\n    }\n  };\n}\n\n/**\n * Hook to use widget-specific toast in components\n */\nexport function useWidgetToast(sessionId: string) {\n  return getWidgetToast(sessionId);\n}","import React, { createContext, useContext, useMemo } from 'react';\nimport { getWidgetToast } from './isolated-toast';\n\n// Widget instance type - we'll define the actual widget interface based on what we need\ninterface WidgetInstance {\n  sessionId: string;\n  createConversation: (title?: string) => any;\n  switchConversation: (conversationId: string) => void;\n  getConversations: () => any[];\n  updateConversationTitle: (conversationId: string, newTitle: string) => void;\n  deleteConversation: (conversationId: string) => void;\n  configuration?: any;\n}\n\n// Extended context that includes both widget instance and toast\ninterface WidgetContextValue {\n  widget: WidgetInstance;\n  toast: ReturnType<typeof getWidgetToast>;\n}\n\n// Create the context with undefined default\nconst WidgetContext = createContext<WidgetContextValue | undefined>(undefined);\n\n// Provider component props\ninterface WidgetProviderProps {\n  widgetInstance: WidgetInstance;\n  children: React.ReactNode;\n}\n\n// Provider component that will wrap the widget's React tree\nexport const WidgetProvider: React.FC<WidgetProviderProps> = ({ widgetInstance, children }) => {\n  // Create isolated toast instance for this widget\n  const toast = useMemo(() => getWidgetToast(widgetInstance.sessionId), [widgetInstance.sessionId]);\n  \n  const value = useMemo(() => ({\n    widget: widgetInstance,\n    toast\n  }), [widgetInstance, toast]);\n  \n  return (\n    <WidgetContext.Provider value={value}>\n      {children}\n    </WidgetContext.Provider>\n  );\n};\n\n// Custom hook to use the widget instance from any component\nexport const useWidget = (): WidgetInstance => {\n  const context = useContext(WidgetContext);\n  if (!context) {\n    throw new Error('useWidget must be used within a WidgetProvider');\n  }\n  return context.widget;\n};\n\n// Optional: Hook that returns null instead of throwing if no widget context\nexport const useWidgetSafe = (): WidgetInstance | null => {\n  const context = useContext(WidgetContext);\n  return context?.widget || null;\n};\n\n// Hook to use the widget-specific toast\nexport const useWidgetToast = () => {\n  const context = useContext(WidgetContext);\n  if (!context) {\n    throw new Error('useWidgetToast must be used within a WidgetProvider');\n  }\n  return context.toast;\n};","/**\n * Debug utilities for CustomGPT Widget\n * \n * Provides comprehensive debugging tools for diagnosing widget issues,\n * especially around message persistence and conversation management.\n */\n\ninterface DebugInfo {\n  timestamp: string;\n  sessionId: string;\n  widgetInstance: any;\n  conversations: any[];\n  currentConversationId: string | null;\n  messageStore: any;\n  localStorage: {\n    keys: string[];\n    messageKeys: string[];\n    conversationKeys: string[];\n    contents: Record<string, any>;\n  };\n  widgetStores: any;\n}\n\nexport class WidgetDebugger {\n  private static instance: WidgetDebugger;\n  private debugEnabled: boolean = true;\n  private logHistory: any[] = [];\n\n  static getInstance(): WidgetDebugger {\n    if (!WidgetDebugger.instance) {\n      WidgetDebugger.instance = new WidgetDebugger();\n    }\n    return WidgetDebugger.instance;\n  }\n\n  /**\n   * Enhanced console log with color coding and grouping\n   */\n  log(category: string, message: string, data?: any, level: 'info' | 'warn' | 'error' | 'debug' = 'info') {\n    if (!this.debugEnabled) return;\n\n    const timestamp = new Date().toISOString();\n    const logEntry = { timestamp, category, message, data, level };\n    this.logHistory.push(logEntry);\n\n    // Color coding for different categories\n    const colors: Record<string, string> = {\n      MESSAGES: 'color: #2196F3; font-weight: bold',\n      CONVERSATIONS: 'color: #4CAF50; font-weight: bold',\n      STORAGE: 'color: #FF9800; font-weight: bold',\n      WIDGET: 'color: #9C27B0; font-weight: bold',\n      API: 'color: #F44336; font-weight: bold',\n      DEBUG: 'color: #607D8B; font-weight: bold'\n    };\n\n    const color = colors[category] || 'color: #000; font-weight: bold';\n\n    console.group(`%c[${category}] ${message}`, color);\n    console.log('Timestamp:', timestamp);\n    if (data) {\n      console.log('Data:', data);\n    }\n    console.groupEnd();\n  }\n\n  /**\n   * Inspect localStorage for widget-related keys\n   */\n  inspectLocalStorage(sessionId?: string): any {\n    const allKeys = Object.keys(localStorage);\n    const widgetKeys = allKeys.filter(key => \n      key.includes('customgpt') || \n      key.includes('widget') || \n      (sessionId && key.includes(sessionId))\n    );\n\n    const messageKeys = widgetKeys.filter(key => key.includes('messages'));\n    const conversationKeys = widgetKeys.filter(key => key.includes('conversation'));\n\n    const contents: Record<string, any> = {};\n    widgetKeys.forEach(key => {\n      try {\n        const value = localStorage.getItem(key);\n        contents[key] = value ? JSON.parse(value) : null;\n      } catch (e) {\n        contents[key] = localStorage.getItem(key);\n      }\n    });\n\n    return {\n      allKeysCount: allKeys.length,\n      widgetKeysCount: widgetKeys.length,\n      keys: widgetKeys,\n      messageKeys,\n      conversationKeys,\n      contents\n    };\n  }\n\n  /**\n   * Get comprehensive debug information for a widget instance\n   */\n  getDebugInfo(widgetInstance: any): DebugInfo {\n    const sessionId = widgetInstance?.sessionId || 'unknown';\n    const conversations = widgetInstance?.getConversations() || [];\n    const currentConversationId = widgetInstance?.currentConversationId;\n    \n    // Get widget stores\n    const widgetStores = (window as any).__customgpt_widget_stores?.[sessionId];\n    const messageStore = widgetStores?.messageStore?.getState();\n    \n    return {\n      timestamp: new Date().toISOString(),\n      sessionId,\n      widgetInstance: {\n        sessionId: widgetInstance?.sessionId,\n        currentConversationId: widgetInstance?.currentConversationId,\n        config: widgetInstance?.config,\n        conversationCount: conversations.length\n      },\n      conversations,\n      currentConversationId,\n      messageStore: messageStore ? {\n        messagesMapSize: messageStore.messages?.size,\n        messagesMapKeys: Array.from(messageStore.messages?.keys() || []),\n        isStreaming: messageStore.isStreaming,\n        loading: messageStore.loading,\n        error: messageStore.error\n      } : null,\n      localStorage: this.inspectLocalStorage(sessionId),\n      widgetStores: widgetStores ? {\n        hasMessageStore: !!widgetStores.messageStore,\n        hasConversationStore: !!widgetStores.conversationStore,\n        hasAgentStore: !!widgetStores.agentStore\n      } : null\n    };\n  }\n\n  /**\n   * Debug a specific conversation's messages\n   */\n  debugConversation(widgetInstance: any, conversationId: string) {\n    const debugInfo = this.getDebugInfo(widgetInstance);\n    const sessionId = widgetInstance?.sessionId;\n\n    console.group(`%c[DEBUG] Conversation ${conversationId}`, 'color: #E91E63; font-weight: bold');\n    \n    // Check message store\n    const messageStore = (window as any).__customgpt_widget_stores?.[sessionId]?.messageStore?.getState();\n    if (messageStore) {\n      const messages = messageStore.messages.get(conversationId);\n      console.log('Messages in store:', messages);\n      console.log('Message count:', messages?.length || 0);\n    }\n\n    // Check localStorage directly\n    const storageKeys = [\n      `customgpt-messages-cache-${sessionId}`,\n      `customgpt-messages-cache-${sessionId}-${conversationId}`,\n      `customgpt-messages-${sessionId}-${conversationId}`\n    ];\n\n    console.log('Checking localStorage keys:');\n    storageKeys.forEach(key => {\n      const value = localStorage.getItem(key);\n      if (value) {\n        try {\n          const parsed = JSON.parse(value);\n          console.log(`✅ Found ${key}:`, parsed);\n        } catch (e) {\n          console.log(`✅ Found ${key} (raw):`, value);\n        }\n      } else {\n        console.log(`❌ Not found: ${key}`);\n      }\n    });\n\n    console.groupEnd();\n  }\n\n  /**\n   * Trace message flow for debugging\n   */\n  traceMessageFlow(action: string, data: any) {\n    const trace = {\n      action,\n      timestamp: new Date().toISOString(),\n      ...data\n    };\n\n    console.group(`%c[TRACE] ${action}`, 'color: #795548; font-weight: bold');\n    console.table(trace);\n    console.groupEnd();\n  }\n\n  /**\n   * Export debug log history\n   */\n  exportLogs(): string {\n    return JSON.stringify(this.logHistory, null, 2);\n  }\n\n  /**\n   * Clear debug log history\n   */\n  clearLogs() {\n    this.logHistory = [];\n  }\n\n  /**\n   * Toggle debug mode\n   */\n  setDebugEnabled(enabled: boolean) {\n    this.debugEnabled = enabled;\n    console.log(`Widget debugging ${enabled ? 'enabled' : 'disabled'}`);\n  }\n}\n\n// Create global debug function for easy console access\nif (typeof window !== 'undefined') {\n  (window as any).__customgpt_debug = (conversationId?: string) => {\n    const instances = (window as any).__customgpt_widget_instances;\n    if (!instances) {\n      console.error('No widget instances found');\n      return;\n    }\n\n    const instanceKeys = Object.keys(instances);\n    if (instanceKeys.length === 0) {\n      console.error('No widget instances found');\n      return;\n    }\n\n    const widgetDebugger = WidgetDebugger.getInstance();\n    \n    instanceKeys.forEach(key => {\n      const instance = instances[key];\n      console.group(`%c[Widget Instance: ${key}]`, 'color: #3F51B5; font-weight: bold; font-size: 14px');\n      \n      const debugInfo = widgetDebugger.getDebugInfo(instance);\n      console.log('Debug Info:', debugInfo);\n      \n      if (conversationId) {\n        widgetDebugger.debugConversation(instance, conversationId);\n      }\n      \n      console.groupEnd();\n    });\n\n    console.log(`\n%c🔍 Debug Helper Functions:\n%c- __customgpt_debug() - Show all widget debug info\n- __customgpt_debug('conversationId') - Debug specific conversation\n- __customgpt_debug_trace() - Show message flow trace\n- __customgpt_debug_storage() - Inspect localStorage\n- __customgpt_debug_clear() - Clear localStorage (use with caution!)\n`, 'color: #4CAF50; font-weight: bold', 'color: #666');\n  };\n\n  // Additional debug helpers\n  (window as any).__customgpt_debug_trace = () => {\n    const widgetDebugger = WidgetDebugger.getInstance();\n    console.log(widgetDebugger.exportLogs());\n  };\n\n  (window as any).__customgpt_debug_storage = () => {\n    const widgetDebugger = WidgetDebugger.getInstance();\n    const storage = widgetDebugger.inspectLocalStorage();\n    console.table(storage.contents);\n  };\n\n  (window as any).__customgpt_debug_clear = () => {\n    if (confirm('This will clear all CustomGPT widget data from localStorage. Are you sure?')) {\n      const keys = Object.keys(localStorage).filter(key => \n        key.includes('customgpt') || key.includes('widget')\n      );\n      keys.forEach(key => localStorage.removeItem(key));\n      console.log(`Cleared ${keys.length} keys from localStorage`);\n    }\n  };\n}\n\nexport const widgetDebugger = WidgetDebugger.getInstance();","/**\n * Widget-specific Message Store Factory\n * \n * Creates an isolated message store instance for each widget.\n * This ensures messages are not shared between different widget instances.\n */\n\nimport { create, StoreApi } from 'zustand';\nimport type { ChatMessage, Citation, FeedbackType } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateId } from '@/lib/utils';\nimport { globalStreamManager } from '@/lib/streaming/handler';\nimport { logger } from '@/lib/logger';\nimport { widgetDebugger } from '@/widget/debug-utils';\nimport type { AgentStore } from './agents';\nimport type { ConversationStore } from './conversations';\n\n// Message Store interface - copied from original to maintain compatibility\nexport interface MessageStore {\n  messages: Map<string, ChatMessage[]>;\n  streamingMessage: ChatMessage | null;\n  isStreaming: boolean;\n  loading: boolean;\n  error: string | null;\n  \n  sendMessage: (content: string, files?: File[]) => Promise<void>;\n  loadMessages: (conversationId: string) => Promise<void>;\n  addMessage: (conversationId: string, message: ChatMessage) => void;\n  updateStreamingMessage: (content: string, citations?: Citation[]) => void;\n  clearMessages: (conversationId?: string) => void;\n  updateMessageFeedback: (messageId: string, feedback: FeedbackType) => void;\n  cancelStreaming: () => void;\n  getMessagesForConversation: (conversationId: string) => ChatMessage[];\n  reset: () => void;\n  clearError: () => void;\n  setMessagesForConversation: (conversationId: string, messages: ChatMessage[]) => void;\n}\n\n/**\n * Create a message store instance for a specific widget\n * @param sessionId - The widget's session ID for isolation\n * @param agentStore - Reference to the agent store\n * @param conversationStore - Reference to the conversation store\n */\nexport function createMessageStore(\n  sessionId: string,\n  agentStore?: StoreApi<AgentStore>,\n  conversationStore?: StoreApi<ConversationStore>\n): StoreApi<MessageStore> {\n  const MESSAGES_STORAGE_KEY = `customgpt-messages-cache-${sessionId}`;\n  \n  // Local storage helpers scoped to this instance\n  function saveMessagesToStorage(conversationId: string, messages: ChatMessage[]) {\n    try {\n      // Use a consistent storage key that includes both session ID and conversation ID\n      const storageKey = `${MESSAGES_STORAGE_KEY}-${conversationId}`;\n      localStorage.setItem(storageKey, JSON.stringify(messages));\n      \n      // Also update the main cache storage\n      const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n      const cache = stored ? JSON.parse(stored) : {};\n      cache[conversationId] = messages;\n      localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n      \n      // Enhanced debugging\n      widgetDebugger.log('STORAGE', 'Saved messages to localStorage', {\n        conversationId,\n        messageCount: messages.length,\n        storageKey,\n        cacheKey: MESSAGES_STORAGE_KEY,\n        sessionId,\n        actualKeys: [storageKey, MESSAGES_STORAGE_KEY],\n        messageIds: messages.map(m => ({ id: m.id, role: m.role }))\n      });\n      \n      widgetDebugger.traceMessageFlow('SAVE_MESSAGES', {\n        conversationId,\n        messageCount: messages.length,\n        sessionId,\n        storageKeys: [storageKey, MESSAGES_STORAGE_KEY]\n      });\n    } catch (error) {\n      console.error('Failed to save messages to local storage:', error);\n      widgetDebugger.log('STORAGE', 'Failed to save messages', { \n        conversationId, \n        error,\n        sessionId \n      }, 'error');\n    }\n  }\n\n  function loadMessagesFromStorage(conversationId: string): ChatMessage[] | null {\n    try {\n      // First try the session-specific storage key\n      const sessionStorageKey = `${MESSAGES_STORAGE_KEY}-${conversationId}`;\n      const sessionStored = localStorage.getItem(sessionStorageKey);\n      \n      widgetDebugger.log('STORAGE', 'Attempting to load messages', {\n        conversationId,\n        sessionId,\n        sessionStorageKey,\n        hasSessionStored: !!sessionStored,\n        sessionStoredLength: sessionStored?.length\n      });\n      \n      if (sessionStored) {\n        try {\n          const messages = JSON.parse(sessionStored);\n          widgetDebugger.log('STORAGE', 'Successfully loaded from session storage', {\n            conversationId,\n            messageCount: messages.length,\n            sessionId,\n            messageIds: messages.map((m: ChatMessage) => ({ id: m.id, role: m.role }))\n          });\n          \n          widgetDebugger.traceMessageFlow('LOAD_SUCCESS_SESSION', {\n            conversationId,\n            messageCount: messages.length,\n            fromKey: sessionStorageKey\n          });\n          \n          return messages;\n        } catch (e) {\n          widgetDebugger.log('STORAGE', 'Failed to parse session storage', { error: e }, 'error');\n        }\n      }\n      \n      // Then try the main cache\n      const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n      widgetDebugger.log('STORAGE', 'Checking main cache', {\n        cacheKey: MESSAGES_STORAGE_KEY,\n        hasCache: !!stored,\n        cacheSize: stored?.length\n      });\n      \n      if (stored) {\n        try {\n          const cache = JSON.parse(stored);\n          const messages = cache[conversationId];\n          \n          widgetDebugger.log('STORAGE', 'Cache lookup result', {\n            conversationId,\n            foundMessages: !!messages,\n            messageCount: messages?.length || 0,\n            cacheKeys: Object.keys(cache),\n            conversationIdType: typeof conversationId,\n            cacheKeyTypes: Object.keys(cache).map(k => ({ key: k, type: typeof k }))\n          });\n          \n          if (messages) {\n            widgetDebugger.traceMessageFlow('LOAD_SUCCESS_CACHE', {\n              conversationId,\n              messageCount: messages.length,\n              fromKey: MESSAGES_STORAGE_KEY\n            });\n          }\n          \n          return messages || null;\n        } catch (e) {\n          widgetDebugger.log('STORAGE', 'Failed to parse cache storage', { error: e }, 'error');\n        }\n      }\n      \n      widgetDebugger.log('STORAGE', 'No messages found in any storage', {\n        conversationId,\n        sessionId,\n        checkedKeys: [sessionStorageKey, MESSAGES_STORAGE_KEY],\n        allLocalStorageKeys: Object.keys(localStorage).filter(k => k.includes('customgpt'))\n      }, 'warn');\n      \n      widgetDebugger.traceMessageFlow('LOAD_EMPTY', {\n        conversationId,\n        sessionId,\n        reason: 'No messages found in storage'\n      });\n      \n      return null;\n    } catch (error) {\n      widgetDebugger.log('STORAGE', 'Exception loading messages', {\n        conversationId,\n        error,\n        sessionId\n      }, 'error');\n      return null;\n    }\n  }\n\n  return create<MessageStore>((set, get) => ({\n    messages: new Map(),\n    streamingMessage: null,\n    isStreaming: false,\n    loading: false,\n    error: null,\n\n    sendMessage: async (content: string, files?: File[]) => {\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      // Use the passed store references\n      if (!agentStore || !conversationStore) {\n        logger.error('MESSAGES', 'Store references not provided');\n        throw new Error('Store references not provided');\n      }\n      \n      const currentAgent = agentStore.getState().currentAgent;\n      if (!currentAgent) {\n        logger.error('MESSAGES', 'No agent selected');\n        throw new Error('No agent selected');\n      }\n\n      logger.info('MESSAGES', 'Sending message from widget store', {\n        sessionId,\n        agentId: currentAgent.id,\n        agentName: currentAgent.project_name,\n        messageLength: content.length,\n        hasFiles: files && files.length > 0\n      });\n\n      // Ensure we have a conversation\n      const conversation = await conversationStore.getState().ensureConversation(\n        typeof currentAgent.id === 'string' ? parseInt(currentAgent.id) : currentAgent.id,\n        content\n      );\n\n      logger.info('MESSAGES', 'Conversation ensured', {\n        conversationId: conversation.id,\n        sessionId: conversation.session_id,\n        hasSessionId: !!conversation.session_id,\n        isNew: !conversation.message_count || conversation.message_count === 0\n      });\n\n      if (!conversation.session_id) {\n        logger.error('MESSAGES', 'Conversation missing session_id', { conversation });\n        throw new Error('Conversation missing session_id');\n      }\n\n      set({ loading: true, error: null });\n\n      const conversationId = conversation.id.toString();\n\n      // Create user message\n      const userMessage: ChatMessage = {\n        id: generateId(),\n        role: 'user',\n        content,\n        timestamp: new Date().toISOString(),\n        status: 'sending',\n      };\n\n      widgetDebugger.log('MESSAGES', 'Adding user message', {\n        conversationId,\n        conversationIdType: typeof conversationId,\n        messageId: userMessage.id,\n        currentMapKeys: Array.from(get().messages.keys()),\n        sessionId\n      });\n      \n      widgetDebugger.traceMessageFlow('ADD_USER_MESSAGE', {\n        conversationId,\n        messageId: userMessage.id,\n        sessionId,\n        content: content.substring(0, 50) + '...'\n      });\n\n      // Add user message to store\n      get().addMessage(conversationId, userMessage);\n\n      // Create assistant message placeholder\n      const assistantMessage: ChatMessage = {\n        id: generateId(),\n        role: 'assistant',\n        content: '',\n        timestamp: new Date().toISOString(),\n        citations: [],\n      };\n\n      set({ \n        streamingMessage: assistantMessage,\n        isStreaming: true,\n        loading: false,\n      });\n\n      try {\n        // Handle file uploads if present\n        if (files && files.length > 0) {\n          const client = getClient();\n          await Promise.all(\n            files.map(file => client.uploadFile(currentAgent.id, file))\n          );\n        }\n\n        // Update user message status\n        userMessage.status = 'sent';\n        get().addMessage(conversationId, userMessage);\n\n        // Start streaming with correct parameters\n        const client = getClient();\n        \n        logger.info('MESSAGES', 'Starting message stream', {\n          agentId: currentAgent.id,\n          sessionId: conversation.session_id,\n          messageContent: content.substring(0, 50)\n        });\n        \n        if (isDemoMode) {\n          // Demo mode - simulate streaming response\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          const demoResponse = `This is a demo response to: \"${content}\"`;\n          get().updateStreamingMessage(demoResponse);\n          \n          await new Promise(resolve => setTimeout(resolve, 500));\n          \n          const finalMessage = get().streamingMessage;\n          if (finalMessage) {\n            finalMessage.status = 'sent';\n            get().addMessage(conversationId, finalMessage);\n          }\n          \n          set({ \n            streamingMessage: null,\n            isStreaming: false,\n          });\n          return;\n        }\n        \n        // Real API streaming\n        try {\n          await client.sendMessageStream(\n            currentAgent.id,\n            conversation.session_id,\n            { \n              prompt: content\n            },\n            (chunk) => {\n                logger.info('MESSAGES', 'Received stream chunk', { \n                  type: chunk.type, \n                  hasContent: !!chunk.content,\n                  contentLength: chunk.content?.length,\n                  contentPreview: chunk.content?.substring(0, 50)\n                });\n                \n                if (chunk.type === 'content' && chunk.content) {\n                  get().updateStreamingMessage(chunk.content, chunk.citations);\n                } else if (chunk.type === 'citation' && chunk.citations) {\n                  // Handle citation-only chunks\n                  const current = get().streamingMessage;\n                  if (current) {\n                    set({\n                      streamingMessage: {\n                        ...current,\n                        citations: chunk.citations\n                      }\n                    });\n                  }\n                }\n              },\n            async (streamError) => {\n                logger.error('MESSAGES', 'Streaming failed, attempting fallback to non-streaming', streamError);\n                \n                // Try fallback to non-streaming API\n                try {\n                  const response = await client.sendMessage(\n                    currentAgent.id,\n                    conversation.session_id,\n                    { \n                      prompt: content,\n                      stream: false\n                    }\n                  );\n                  \n                  // Update streaming message with the complete response\n                  const finalMessage = get().streamingMessage;\n                  if (finalMessage && response) {\n                    let messageData: any;\n                    if (response.data) {\n                      messageData = response.data;\n                    } else {\n                      messageData = response as any;\n                    }\n                    \n                    finalMessage.content = messageData?.openai_response || messageData?.content || 'No response received';\n                    finalMessage.citations = messageData?.citations || [];\n                    finalMessage.status = 'sent';\n                    get().addMessage(conversationId, finalMessage);\n                  }\n                  \n                  set({ \n                    streamingMessage: null,\n                    isStreaming: false,\n                  });\n                  \n                } catch (fallbackError) {\n                  logger.error('MESSAGES', 'Both streaming and non-streaming failed', fallbackError);\n                  throw fallbackError;\n                }\n              },\n            () => {\n                // onComplete callback\n                const finalMessage = get().streamingMessage;\n                if (finalMessage) {\n                  finalMessage.status = 'sent';\n                  get().addMessage(conversationId, finalMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                // Update conversation message count\n                conversationStore.getState().updateConversation(\n                  conversation.id,\n                  conversation.session_id,\n                  { name: conversation.name }\n                );\n              }\n          );\n        } catch (error) {\n          logger.error('MESSAGES', 'Failed to send message', error);\n          \n          // Remove assistant message placeholder on error\n          set({ \n            streamingMessage: null,\n            isStreaming: false,\n            error: error instanceof Error ? error.message : 'Failed to send message'\n          });\n          \n          throw error;\n        }\n      } catch (error) {\n        logger.error('MESSAGES', 'Error in sendMessage', error);\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to send message',\n          streamingMessage: null,\n          isStreaming: false,\n          loading: false,\n        });\n        throw error;\n      }\n    },\n\n    loadMessages: async (conversationId: string) => {\n      widgetDebugger.log('MESSAGES', 'loadMessages called', {\n        conversationId,\n        conversationIdType: typeof conversationId,\n        sessionId,\n        storageKey: MESSAGES_STORAGE_KEY,\n        currentMapSize: get().messages.size,\n        currentMapKeys: Array.from(get().messages.keys())\n      });\n      \n      widgetDebugger.traceMessageFlow('LOAD_MESSAGES_START', {\n        conversationId,\n        sessionId\n      });\n      \n      set({ loading: true, error: null });\n\n      try {\n        // Try to load from storage first\n        const cachedMessages = loadMessagesFromStorage(conversationId);\n        \n        widgetDebugger.log('MESSAGES', 'Storage load result', {\n          conversationId,\n          messageCount: cachedMessages?.length || 0,\n          hasMessages: !!cachedMessages,\n          firstMessage: cachedMessages?.[0] ? {\n            id: cachedMessages[0].id,\n            role: cachedMessages[0].role,\n            contentPreview: cachedMessages[0].content.substring(0, 50)\n          } : null\n        });\n        \n        if (cachedMessages && cachedMessages.length > 0) {\n          set(state => {\n            const newMap = new Map(state.messages);\n            newMap.set(conversationId, cachedMessages);\n            \n            widgetDebugger.log('MESSAGES', 'Updated message map', {\n              conversationId,\n              messageCount: cachedMessages.length,\n              newMapSize: newMap.size,\n              newMapKeys: Array.from(newMap.keys()),\n              mapNowHasConversation: newMap.has(conversationId)\n            });\n            \n            widgetDebugger.traceMessageFlow('LOAD_MESSAGES_SUCCESS', {\n              conversationId,\n              messageCount: cachedMessages.length,\n              sessionId\n            });\n            \n            return {\n              messages: newMap,\n              loading: false,\n            };\n          });\n          return;\n        }\n\n        // No messages found in storage\n        widgetDebugger.log('MESSAGES', 'No messages in storage, setting empty array', {\n          conversationId,\n          sessionId\n        }, 'warn');\n        \n        set(state => {\n          const newMap = new Map(state.messages);\n          newMap.set(conversationId, []);\n          \n          widgetDebugger.traceMessageFlow('LOAD_MESSAGES_EMPTY', {\n            conversationId,\n            reason: 'No messages found',\n            sessionId\n          });\n          \n          return {\n            messages: newMap,\n            loading: false,\n          };\n        });\n      } catch (error) {\n        widgetDebugger.log('MESSAGES', 'Exception in loadMessages', {\n          conversationId,\n          error,\n          sessionId\n        }, 'error');\n        \n        set({ \n          error: error instanceof Error ? error.message : 'Failed to load messages',\n          loading: false \n        });\n      }\n    },\n\n    addMessage: (conversationId: string, message: ChatMessage) => {\n      widgetDebugger.log('MESSAGES', 'addMessage called', {\n        conversationId,\n        conversationIdType: typeof conversationId,\n        messageId: message.id,\n        messageRole: message.role,\n        sessionId\n      });\n      \n      set(state => {\n        const newMessages = new Map(state.messages);\n        const messages = newMessages.get(conversationId) || [];\n        \n        widgetDebugger.log('MESSAGES', 'Current messages for conversation', {\n          conversationId,\n          existingMessageCount: messages.length,\n          mapHasConversation: state.messages.has(conversationId)\n        });\n        \n        // Check if message already exists\n        const existingIndex = messages.findIndex(m => m.id === message.id);\n        if (existingIndex >= 0) {\n          messages[existingIndex] = message;\n          widgetDebugger.log('MESSAGES', 'Updated existing message', { messageId: message.id });\n        } else {\n          messages.push(message);\n          widgetDebugger.log('MESSAGES', 'Added new message', { \n            messageId: message.id,\n            newMessageCount: messages.length \n          });\n        }\n        \n        newMessages.set(conversationId, messages);\n        \n        // Save to storage\n        saveMessagesToStorage(conversationId, messages);\n        \n        widgetDebugger.traceMessageFlow('MESSAGE_ADDED', {\n          conversationId,\n          messageId: message.id,\n          messageCount: messages.length,\n          role: message.role\n        });\n        \n        return { messages: newMessages };\n      });\n    },\n\n    updateStreamingMessage: (content: string, citations?: Citation[]) => {\n      set(state => {\n        if (!state.streamingMessage) return state;\n        \n        return {\n          streamingMessage: {\n            ...state.streamingMessage,\n            content: state.streamingMessage.content + content,\n            citations: citations || state.streamingMessage.citations,\n          },\n        };\n      });\n    },\n\n    clearMessages: (conversationId?: string) => {\n      if (conversationId) {\n        set(state => {\n          const newMessages = new Map(state.messages);\n          newMessages.delete(conversationId);\n          return { messages: newMessages };\n        });\n        \n        // Clear from storage\n        try {\n          const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n          if (stored) {\n            const cache = JSON.parse(stored);\n            delete cache[conversationId];\n            localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n          }\n        } catch (error) {\n          console.error('Failed to clear messages from storage:', error);\n        }\n      } else {\n        // Clear all messages\n        set({ messages: new Map() });\n        \n        // Clear all from storage\n        try {\n          localStorage.removeItem(MESSAGES_STORAGE_KEY);\n        } catch (error) {\n          console.error('Failed to clear all messages from storage:', error);\n        }\n      }\n    },\n\n    cancelStreaming: () => {\n      globalStreamManager.cancelAllStreams();\n      set({ isStreaming: false, streamingMessage: null });\n    },\n\n    getMessagesForConversation: (conversationId: string): ChatMessage[] => {\n      return get().messages.get(conversationId) || [];\n    },\n\n    updateMessageFeedback: (messageId: string, feedback: FeedbackType) => {\n      set(state => {\n        const newMessages = new Map(state.messages);\n        \n        for (const [convId, messages] of newMessages) {\n          const messageIndex = messages.findIndex(m => m.id === messageId);\n          if (messageIndex !== -1) {\n            const updatedMessages = [...messages];\n            updatedMessages[messageIndex] = {\n              ...updatedMessages[messageIndex],\n              feedback,\n            };\n            newMessages.set(convId, updatedMessages);\n            saveMessagesToStorage(convId, updatedMessages);\n            break;\n          }\n        }\n        \n        return { messages: newMessages };\n      });\n    },\n\n    reset: () => {\n      set({\n        messages: new Map(),\n        streamingMessage: null,\n        isStreaming: false,\n        loading: false,\n        error: null,\n      });\n    },\n    \n    clearError: () => {\n      set({ error: null });\n    },\n    \n    setMessagesForConversation: (conversationId: string, messages: ChatMessage[]) => {\n      set(state => {\n        const newMessages = new Map(state.messages);\n        newMessages.set(conversationId, messages);\n        return { messages: newMessages };\n      });\n    },\n  }));\n}","/**\n * Widget-specific Conversation Store Factory\n * \n * Creates an isolated conversation store instance for each widget.\n * This ensures conversations are not shared between different widget instances.\n */\n\nimport { create, StoreApi } from 'zustand';\nimport type { Conversation } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateId } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n// Conversation Store interface - widget-specific version\nexport interface ConversationStore {\n  conversations: Conversation[];\n  allConversations: Conversation[];\n  currentConversation: Conversation | null;\n  loading: boolean;\n  error: string | null;\n  lastConversationActivity: Record<string, string>;\n  \n  // Pagination state\n  currentPage: number;\n  totalPages: number;\n  totalConversations: number;\n  perPage: number;\n  \n  // Sorting and filtering state\n  sortOrder: 'asc' | 'desc';\n  sortBy: string;\n  userFilter: 'all' | 'me' | string;\n  \n  // Client-side filtering state\n  searchQuery: string;\n  searchMode: 'name' | 'id' | 'session';\n  dateFilter: 'all' | 'today' | 'week' | 'month';\n  \n  fetchConversations: (projectId: number, params?: {\n    page?: number;\n    per_page?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: string;\n    userFilter?: 'all' | 'me' | string;\n  }) => Promise<void>;\n  loadConversations: (agentId: string) => Promise<void>; // Keep for compatibility\n  createConversation: (projectId: number, name?: string) => Promise<void>;\n  updateConversation: (conversationId: number, sessionId: string, data: { name: string }) => Promise<void>;\n  deleteConversation: (conversationId: string | number) => Promise<void>;\n  selectConversation: (conversation: Conversation) => void;\n  ensureConversation: (projectId: number, firstMessage?: string) => Promise<Conversation>;\n  \n  // Client-side filtering methods\n  applyFilters: () => void;\n  setSearchQuery: (query: string) => void;\n  setSearchMode: (mode: 'name' | 'id' | 'session') => void;\n  setDateFilter: (filter: 'all' | 'today' | 'week' | 'month') => void;\n  \n  reset: () => void;\n}\n\n/**\n * Create a conversation store instance for a specific widget\n * @param sessionId - The widget's session ID for isolation\n */\nexport function createConversationStore(sessionId: string): StoreApi<ConversationStore> {\n  const CONVERSATIONS_STORAGE_KEY = `customgpt-conversations-cache-${sessionId}`;\n  const ACTIVITY_STORAGE_KEY = `customgpt-conversation-activity-${sessionId}`;\n  \n  // Local storage helpers scoped to this instance\n  function saveConversationsToStorage(agentId: string, conversations: Conversation[]) {\n    try {\n      const stored = localStorage.getItem(CONVERSATIONS_STORAGE_KEY);\n      const cache = stored ? JSON.parse(stored) : {};\n      cache[agentId] = conversations;\n      localStorage.setItem(CONVERSATIONS_STORAGE_KEY, JSON.stringify(cache));\n    } catch (error) {\n      console.error('Failed to save conversations to storage:', error);\n    }\n  }\n\n  function loadConversationsFromStorage(agentId: string): Conversation[] | null {\n    try {\n      const stored = localStorage.getItem(CONVERSATIONS_STORAGE_KEY);\n      if (!stored) return null;\n      const cache = JSON.parse(stored);\n      return cache[agentId] || null;\n    } catch (error) {\n      console.error('Failed to load conversations from storage:', error);\n      return null;\n    }\n  }\n\n  function saveActivityToStorage(activity: Record<string, string>) {\n    try {\n      localStorage.setItem(ACTIVITY_STORAGE_KEY, JSON.stringify(activity));\n    } catch (error) {\n      console.error('Failed to save activity to storage:', error);\n    }\n  }\n\n  function loadActivityFromStorage(): Record<string, string> {\n    try {\n      const stored = localStorage.getItem(ACTIVITY_STORAGE_KEY);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.error('Failed to load activity from storage:', error);\n      return {};\n    }\n  }\n\n  return create<ConversationStore>((set, get) => ({\n    conversations: [],\n    allConversations: [],\n    currentConversation: null,\n    loading: false,\n    error: null,\n    lastConversationActivity: loadActivityFromStorage(),\n    // Pagination state\n    currentPage: 1,\n    totalPages: 1,\n    totalConversations: 0,\n    perPage: 20,\n    // Sorting and filtering state\n    sortOrder: 'desc' as const,\n    sortBy: 'id',\n    userFilter: 'all' as const,\n    // Client-side filtering state\n    searchQuery: '',\n    searchMode: 'name' as const,\n    dateFilter: 'all' as const,\n\n    fetchConversations: async (projectId: number, params?: {\n      page?: number;\n      per_page?: number;\n      order?: 'asc' | 'desc';\n      orderBy?: string;\n      userFilter?: 'all' | 'me' | string;\n    }) => {\n      // For widgets, we load conversations differently\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      logger.info('CONVERSATIONS', 'Fetching conversations for widget', {\n        sessionId,\n        projectId,\n        isDemoMode\n      });\n\n      set({ loading: true, error: null });\n\n      try {\n        if (isDemoMode) {\n          // In demo mode, just load from local storage\n          return get().loadConversations(projectId.toString());\n        }\n        \n        // Get the list of conversation IDs that belong to this widget session\n        const widgetConvKey = `widget_conversations_${sessionId}`;\n        const widgetConvIds = JSON.parse(localStorage.getItem(widgetConvKey) || '[]');\n        \n        if (widgetConvIds.length === 0) {\n          // No conversations created yet in this widget session\n          set({\n            conversations: [],\n            loading: false,\n          });\n          return;\n        }\n        \n        // Fetch conversations from API but only keep ones created in this widget session\n        const client = getClient();\n        \n        // Merge params with current state\n        const queryParams = {\n          page: params?.page ?? get().currentPage,\n          per_page: params?.per_page ?? get().perPage,\n          order: params?.order ?? get().sortOrder,\n          orderBy: params?.orderBy ?? get().sortBy,\n          userFilter: params?.userFilter ?? get().userFilter,\n        };\n        \n        const response = await client.getConversations(projectId, queryParams);\n        \n        // Handle different response formats\n        let allConversations = [];\n        let paginationData = null;\n        \n        if (response && typeof response === 'object') {\n          // Standard paginated response format\n          if ((response as any).data && (response as any).data.data) {\n            allConversations = (response as any).data.data;\n            paginationData = (response as any).data;\n          } else if (Array.isArray((response as any).data)) {\n            allConversations = (response as any).data;\n          } else if (Array.isArray(response)) {\n            allConversations = response;\n          }\n        }\n        \n        // Filter to only include conversations created in this widget session\n        const widgetConversations = allConversations.filter((conv: Conversation) => \n          widgetConvIds.includes(conv.id)\n        );\n        \n        logger.info('CONVERSATIONS', 'Filtered widget conversations', {\n          totalFromAPI: allConversations.length,\n          widgetSpecific: widgetConversations.length,\n          widgetConvIds,\n          paginationData\n        });\n        \n        // Update state with conversations and pagination data\n        set({ \n          allConversations: widgetConversations, // Store raw conversations\n          loading: false,\n          // Update pagination state if available\n          currentPage: paginationData?.current_page ?? 1,\n          totalPages: paginationData?.last_page ?? 1,\n          totalConversations: widgetConvIds.length, // Total widget conversations, not API total\n          // Update sorting/filtering if params were provided\n          ...(params?.order && { sortOrder: params.order }),\n          ...(params?.orderBy && { sortBy: params.orderBy }),\n          ...(params?.userFilter && { userFilter: params.userFilter }),\n        });\n        \n        // Apply client-side filters\n        get().applyFilters();\n        \n        // Save to local storage\n        saveConversationsToStorage(projectId.toString(), widgetConversations);\n      } catch (error) {\n        logger.error('CONVERSATIONS', 'Failed to fetch conversations', error);\n        // On error, try to load from local storage\n        const cached = loadConversationsFromStorage(projectId.toString());\n        set({ \n          conversations: cached || [],\n          error: error instanceof Error ? error.message : 'Failed to fetch conversations',\n          loading: false,\n        });\n      }\n    },\n\n    loadConversations: async (agentId: string) => {\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      logger.info('CONVERSATIONS', 'Loading conversations for widget store', {\n        sessionId,\n        agentId,\n        isDemoMode\n      });\n\n      set({ loading: true, error: null });\n\n      try {\n        // For widgets, we only load conversations from local storage that were created in this session\n        // We do NOT fetch from the API to ensure complete isolation\n        const cachedConversations = loadConversationsFromStorage(agentId);\n        \n        if (cachedConversations) {\n          // Filter to only include conversations created in this widget session\n          const sessionConversations = cachedConversations.filter(conv => \n            conv.session_id && conv.session_id.includes(sessionId)\n          );\n          \n          set({\n            allConversations: sessionConversations,\n            loading: false,\n          });\n          \n          // Apply client-side filters\n          get().applyFilters();\n          \n          logger.info('CONVERSATIONS', 'Loaded session-specific conversations', {\n            totalCached: cachedConversations.length,\n            sessionSpecific: sessionConversations.length,\n            sessionId\n          });\n        } else {\n          // No conversations yet - start with empty array\n          set({\n            allConversations: [],\n            conversations: [],\n            loading: false,\n          });\n        }\n      } catch (error) {\n        logger.error('CONVERSATIONS', 'Failed to load conversations', error);\n        set({\n          error: error instanceof Error ? error.message : 'Failed to load conversations',\n          loading: false,\n          allConversations: [],\n          conversations: [] // Start with empty on error\n        });\n      }\n    },\n\n    createConversation: async (projectId: number, name?: string): Promise<void> => {\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      logger.info('CONVERSATIONS', 'Creating conversation in widget store', {\n        sessionId,\n        projectId,\n        name\n      });\n\n      set({ loading: true, error: null });\n\n      try {\n        // Use the API to create the conversation\n        const client = getClient();\n        \n        if (isDemoMode) {\n          // Demo mode - create locally only\n          const timestamp = Date.now();\n          const random = Math.floor(Math.random() * 1000000);\n          const sessionIdForConv = `demo_session_${timestamp}_${random}_${sessionId}`;\n\n          const newConversation: Conversation = {\n            id: Math.floor(Math.random() * 1000000),\n            session_id: sessionIdForConv,\n            project_id: projectId,\n            name: name || 'New Conversation',\n            message_count: 0,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            deleted_at: null,\n          };\n\n          set(state => ({\n            allConversations: [...state.allConversations, newConversation],\n            currentConversation: newConversation,\n            loading: false,\n          }));\n          \n          // Apply client-side filters\n          get().applyFilters();\n          \n          saveConversationsToStorage(projectId.toString(), [...get().conversations]);\n          return;\n        }\n        \n        // Create conversation via API\n        const response = await client.createConversation(projectId, name ? { name } : undefined);\n        const newConversation = response.data;\n        \n        // Ensure the conversation has our widget session ID in it for filtering\n        // Store the widget session ID in localStorage to track which conversations belong to this widget\n        const widgetConvKey = `widget_conversations_${sessionId}`;\n        const existingConvIds = JSON.parse(localStorage.getItem(widgetConvKey) || '[]');\n        existingConvIds.push(newConversation.id);\n        localStorage.setItem(widgetConvKey, JSON.stringify(existingConvIds));\n        \n        logger.info('CONVERSATIONS', 'Created conversation via API', {\n          conversationId: newConversation.id,\n          sessionId: newConversation.session_id,\n          projectId: newConversation.project_id,\n          widgetSessionId: sessionId\n        });\n        \n        set(state => ({ \n          allConversations: [...state.allConversations, newConversation],\n          currentConversation: newConversation,\n          loading: false,\n        }));\n        \n        // Apply client-side filters\n        get().applyFilters();\n        \n        // Save to local storage for this widget session\n        saveConversationsToStorage(projectId.toString(), get().conversations);\n      } catch (error) {\n        logger.error('CONVERSATIONS', 'Failed to create conversation', error);\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to create conversation',\n          loading: false \n        });\n        throw error;\n      }\n    },\n\n    updateConversation: async (conversationId: number, sessionId: string, data: { name: string }) => {\n      logger.info('CONVERSATIONS', 'Updating conversation in widget store', {\n        sessionId: sessionId,\n        conversationId,\n        data\n      });\n\n      set(state => ({\n        allConversations: state.allConversations.map(conv =>\n          conv.id.toString() === conversationId.toString()\n            ? { ...conv, name: data.name, updated_at: new Date().toISOString() }\n            : conv\n        ),\n      }));\n      \n      // Apply client-side filters\n      get().applyFilters();\n\n      // Update current conversation if it's the one being updated\n      const current = get().currentConversation;\n      if (current && current.id.toString() === conversationId.toString()) {\n        set({\n          currentConversation: { ...current, name: data.name, updated_at: new Date().toISOString() },\n        });\n      }\n\n      // Save to storage\n      const projectId = get().conversations.find(c => c.id.toString() === conversationId.toString())?.project_id;\n      if (projectId) {\n        saveConversationsToStorage(projectId.toString(), get().conversations);\n      }\n    },\n\n    deleteConversation: async (conversationId: string | number) => {\n      logger.info('CONVERSATIONS', 'Deleting conversation from widget store', {\n        sessionId,\n        conversationId\n      });\n\n      const conversation = get().allConversations.find(c => c.id.toString() === conversationId);\n      if (!conversation) return;\n\n      set(state => ({\n        allConversations: state.allConversations.filter(conv => conv.id.toString() !== conversationId),\n        currentConversation: state.currentConversation?.id.toString() === conversationId\n          ? null\n          : state.currentConversation,\n      }));\n      \n      // Apply client-side filters\n      get().applyFilters();\n\n      // Save to storage\n      saveConversationsToStorage(conversation.project_id.toString(), get().conversations);\n    },\n\n    selectConversation: (conversation: Conversation) => {\n      logger.info('CONVERSATIONS', 'Selecting conversation in widget store', {\n        sessionId,\n        conversationId: conversation?.id\n      });\n\n      set({ currentConversation: conversation });\n\n      // Update activity tracking\n      if (conversation) {\n        const activity = { ...get().lastConversationActivity };\n        activity[conversation.project_id.toString()] = conversation.id.toString();\n        set({ lastConversationActivity: activity });\n        saveActivityToStorage(activity);\n      }\n    },\n\n    ensureConversation: async (projectId: number, firstMessage?: string) => {\n      const { currentConversation, allConversations } = get();\n      \n      // If we have a current conversation for this agent, use it\n      if (currentConversation && currentConversation.project_id === projectId) {\n        return currentConversation;\n      }\n\n      // Check if we have any existing conversations for this project\n      // This helps when the widget is reloading and currentConversation isn't set yet\n      const existingConversation = allConversations.find(c => c.project_id === projectId);\n      if (existingConversation) {\n        set({ currentConversation: existingConversation });\n        return existingConversation;\n      }\n\n      // If no current conversation, always create a new one\n      // This ensures that seeing the welcome screen (currentConversation = null) \n      // always results in starting a fresh conversation\n      const title = firstMessage\n        ? firstMessage.substring(0, 50) + (firstMessage.length > 50 ? '...' : '')\n        : 'New Conversation';\n      \n      await get().createConversation(projectId, title);\n      \n      // Get the newly created conversation\n      const newConversation = get().conversations[get().conversations.length - 1];\n      set({ currentConversation: newConversation });\n      \n      return newConversation;\n    },\n\n    // Client-side filtering methods\n    applyFilters: () => {\n      const state = get();\n      let filtered = [...state.allConversations];\n      \n      // Apply search filter\n      if (state.searchQuery.trim()) {\n        const query = state.searchQuery.toLowerCase().trim();\n        filtered = filtered.filter(conv => {\n          switch (state.searchMode) {\n            case 'name':\n              return conv.name.toLowerCase().includes(query);\n            case 'id':\n              return conv.id.toString().includes(query);\n            case 'session':\n              return conv.session_id.toLowerCase().includes(query);\n            default:\n              return conv.name.toLowerCase().includes(query);\n          }\n        });\n      }\n      \n      // Apply date filter\n      if (state.dateFilter !== 'all') {\n        const now = new Date();\n        const filterDate = new Date();\n        \n        switch (state.dateFilter) {\n          case 'today':\n            filterDate.setHours(0, 0, 0, 0);\n            break;\n          case 'week':\n            filterDate.setDate(now.getDate() - 7);\n            break;\n          case 'month':\n            filterDate.setDate(now.getDate() - 30);\n            break;\n        }\n        \n        filtered = filtered.filter(conv => {\n          const convDate = new Date(conv.updated_at);\n          return convDate >= filterDate;\n        });\n      }\n      \n      // Note: User filter and sorting are handled server-side by the API\n      // We don't apply them client-side to avoid conflicts\n      \n      set({ conversations: filtered });\n    },\n\n    setSearchQuery: (query: string) => {\n      set({ searchQuery: query });\n      get().applyFilters();\n    },\n\n    setSearchMode: (mode: 'name' | 'id' | 'session') => {\n      set({ searchMode: mode });\n      get().applyFilters();\n    },\n\n    setDateFilter: (filter: 'all' | 'today' | 'week' | 'month') => {\n      set({ dateFilter: filter });\n      get().applyFilters();\n    },\n\n    reset: () => {\n      set({\n        conversations: [],\n        allConversations: [],\n        currentConversation: null,\n        loading: false,\n        error: null,\n        lastConversationActivity: {},\n        searchQuery: '',\n        searchMode: 'name' as const,\n        dateFilter: 'all' as const,\n      });\n    },\n  }));\n}","/**\n * Widget-specific Agent Store Factory\n * \n * Creates an isolated agent store instance for each widget.\n * This ensures agent selection is not shared between different widget instances.\n */\n\nimport { create, StoreApi } from 'zustand';\nimport type { Agent } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\n\n// Agent Store interface - widget-specific version with minimal methods\nexport interface AgentStore {\n  agents: Agent[];\n  currentAgent: Agent | null;\n  loading: boolean;\n  error: string | null;\n  \n  loadAgents: () => Promise<void>;\n  fetchAgents: () => Promise<void>; // Alias for compatibility\n  selectAgent: (agent: Agent) => void;\n  setAgents: (agents: Agent[]) => void;\n  updateAgent: (id: number, data: { are_licenses_allowed?: boolean }) => Promise<Agent>;\n  deleteAgent: (id: number) => Promise<void>;\n  createAgent: (data: any) => Promise<Agent>;\n  replicateAgent: (id: number) => Promise<Agent>;\n  getAgentStats: (id: number) => Promise<any>;\n  reset: () => void;\n}\n\n/**\n * Create an agent store instance for a specific widget\n * @param sessionId - The widget's session ID for isolation\n */\nexport function createAgentStore(sessionId: string): StoreApi<AgentStore> {\n  const AGENTS_STORAGE_KEY = `customgpt-agents-cache-${sessionId}`;\n  const SELECTED_AGENT_KEY = `customgpt-selected-agent-${sessionId}`;\n  \n  // Local storage helpers scoped to this instance\n  function saveAgentsToStorage(agents: Agent[]) {\n    try {\n      localStorage.setItem(AGENTS_STORAGE_KEY, JSON.stringify(agents));\n    } catch (error) {\n      console.error('Failed to save agents to storage:', error);\n    }\n  }\n\n  function loadAgentsFromStorage(): Agent[] | null {\n    try {\n      const stored = localStorage.getItem(AGENTS_STORAGE_KEY);\n      return stored ? JSON.parse(stored) : null;\n    } catch (error) {\n      console.error('Failed to load agents from storage:', error);\n      return null;\n    }\n  }\n\n  function saveSelectedAgentToStorage(agentId: string | null) {\n    try {\n      if (agentId) {\n        localStorage.setItem(SELECTED_AGENT_KEY, agentId);\n      } else {\n        localStorage.removeItem(SELECTED_AGENT_KEY);\n      }\n    } catch (error) {\n      console.error('Failed to save selected agent to storage:', error);\n    }\n  }\n\n  function loadSelectedAgentFromStorage(): string | null {\n    try {\n      return localStorage.getItem(SELECTED_AGENT_KEY);\n    } catch (error) {\n      console.error('Failed to load selected agent from storage:', error);\n      return null;\n    }\n  }\n\n  return create<AgentStore>((set, get) => ({\n    agents: [],\n    currentAgent: null,\n    loading: false,\n    error: null,\n\n    fetchAgents: async () => {\n      // Alias for loadAgents for compatibility\n      return get().loadAgents();\n    },\n\n    loadAgents: async () => {\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      // Get widget instance from window using session ID\n      let widget = null;\n      if (typeof window !== 'undefined') {\n        // Try multiple possible keys where widget might be stored\n        const widgetKey = `__customgpt_widget_${sessionId}`;\n        widget = (window as any)[widgetKey];\n        \n        // Fallback to check the instances object\n        if (!widget) {\n          const instances = (window as any).__customgpt_widget_instances;\n          widget = instances?.[sessionId];\n        }\n        \n        // Fallback to the main instance for backward compatibility\n        if (!widget) {\n          widget = (window as any).__customgpt_widget_instance;\n        }\n      }\n      \n      logger.info('AGENTS', 'Loading agents for widget store', {\n        sessionId,\n        isDemoMode,\n        hasWidget: !!widget,\n        configuredAgentId: widget?.config?.agentId\n      });\n\n      set({ loading: true, error: null });\n\n      try {\n        // If widget has a configured agentId, create the agent directly\n        if (widget?.config?.agentId) {\n          const agentId = typeof widget.config.agentId === 'string' ? parseInt(widget.config.agentId) : widget.config.agentId;\n          \n          // Create fallback agent immediately to ensure widget works\n          const fallbackAgent: Agent = {\n            id: agentId,\n            project_name: widget.config.agentName || widget.config.name || `Agent ${agentId}`,\n            type: 'WIDGET',\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            is_chat_active: true,\n            is_shared: false,\n            user_id: 0,\n            team_id: 0,\n            settings: {\n              chatbot_avatar: './logo.png'\n            }\n          };\n          \n          logger.info('AGENTS', 'Creating fallback agent for widget', {\n            agentId,\n            agentName: fallbackAgent.project_name,\n            isDemoMode\n          });\n          \n          set({\n            agents: [fallbackAgent],\n            currentAgent: fallbackAgent,\n            loading: false,\n          });\n          \n          saveAgentsToStorage([fallbackAgent]);\n          saveSelectedAgentToStorage(fallbackAgent.id.toString());\n          \n          // Try to fetch the actual agent details in the background\n          if (!isDemoMode) {\n            try {\n              const client = getClient();\n              const response = await client.getAgent(agentId);\n              const agent = response.data || response;\n              \n              // Fetch agent settings to get chatbot_avatar and other settings\n              try {\n                const settingsResponse = await client.getAgentSettings(agentId);\n                const settings = settingsResponse.data || settingsResponse;\n                \n                // Merge settings into agent object\n                agent.settings = settings;\n                \n                logger.info('AGENTS', 'Fetched agent settings', {\n                  agentId: agent.id,\n                  hasAvatar: !!settings?.chatbot_avatar,\n                  avatarUrl: settings?.chatbot_avatar\n                });\n              } catch (settingsError) {\n                logger.warn('AGENTS', 'Failed to fetch agent settings', settingsError);\n                // Use default settings with logo\n                agent.settings = {\n                  chatbot_avatar: './logo.png'\n                };\n              }\n              \n              // Apply custom name if provided\n              if (widget.config.agentName) {\n                agent.project_name = widget.config.agentName;\n              }\n              \n              logger.info('AGENTS', 'Updated agent with API data', {\n                agentId: agent.id,\n                agentName: agent.project_name,\n                hasSettings: !!agent.settings,\n                avatarUrl: agent.settings?.chatbot_avatar\n              });\n              \n              // Update the store with the actual agent data\n              set({\n                agents: [agent],\n                currentAgent: agent,\n                loading: false,\n              });\n              \n              saveAgentsToStorage([agent]);\n              saveSelectedAgentToStorage(agent.id.toString());\n            } catch (error) {\n              logger.warn('AGENTS', 'Failed to fetch agent from API, using fallback', error);\n              // Keep the fallback agent that was already set\n            }\n          }\n          \n          return;\n        }\n        \n        // If no widget configuration found, create a basic demo agent\n        if (!widget) {\n          logger.warn('AGENTS', 'No widget configuration found, creating demo agent');\n          const demoAgent: Agent = {\n            id: 1,\n            project_name: 'Demo Assistant',\n            type: 'DEMO',\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            is_chat_active: true,\n            is_shared: false,\n            user_id: 0,\n            team_id: 0,\n            settings: {\n              chatbot_avatar: './logo.png'\n            }\n          };\n          \n          set({\n            agents: [demoAgent],\n            currentAgent: demoAgent,\n            loading: false,\n          });\n          \n          saveAgentsToStorage([demoAgent]);\n          saveSelectedAgentToStorage(demoAgent.id.toString());\n          return;\n        }\n\n        // No specific agent ID - fetch agents from API with enterprise-scale pagination\n        if (!isDemoMode) {\n          const client = getClient();\n          // Load first batch with larger page size for better widget performance\n          const response = await client.getAgents({ page: 1, per_page: 100 });\n          \n          // Handle different response formats\n          let agents: Agent[] = [];\n          if (response && typeof response === 'object') {\n            if ('data' in response && 'total' in response) {\n              // Paginated response format\n              agents = (response as { data: Agent[] }).data;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              agents = (response as any).data;\n            } else if (Array.isArray(response)) {\n              // Legacy format: [...]\n              agents = response as Agent[];\n            }\n          }\n          \n          logger.info('AGENTS', 'Fetched agents from API (first page)', {\n            count: agents.length,\n            total: (response as any)?.total || agents.length\n          });\n          \n          // Select first agent or previously selected\n          const selectedAgentId = loadSelectedAgentFromStorage();\n          const selectedAgent = selectedAgentId \n            ? agents.find(a => a.id.toString() === selectedAgentId) || agents[0]\n            : agents[0];\n          \n          set({\n            agents,\n            currentAgent: selectedAgent || null,\n            loading: false,\n          });\n          \n          saveAgentsToStorage(agents);\n          if (selectedAgent) {\n            saveSelectedAgentToStorage(selectedAgent.id.toString());\n          }\n          return;\n        }\n\n        // Demo mode without specific agent ID\n        if (isDemoMode) {\n          // Create demo agents\n          const demoAgents: Agent[] = [\n            {\n              id: 1,\n              project_name: 'Demo Assistant',\n              type: 'DEMO',\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString(),\n              is_chat_active: true,\n              is_shared: false,\n              user_id: 0,\n              team_id: 0,\n              settings: {\n                chatbot_avatar: '/logo.png'\n              }\n            },\n          ];\n          \n          set({\n            agents: demoAgents,\n            currentAgent: demoAgents[0],\n            loading: false,\n          });\n          \n          saveAgentsToStorage(demoAgents);\n          saveSelectedAgentToStorage(demoAgents[0].id.toString());\n          return;\n        }\n\n        // Should not reach here\n        set({\n          agents: [],\n          currentAgent: null,\n          loading: false,\n        });\n      } catch (error) {\n        logger.error('AGENTS', 'Failed to load agents', error);\n        set({\n          error: error instanceof Error ? error.message : 'Failed to load agents',\n          loading: false,\n        });\n      }\n    },\n\n    selectAgent: (agent: Agent) => {\n      logger.info('AGENTS', 'Selecting agent in widget store', {\n        sessionId,\n        agentId: agent?.id,\n        agentName: agent?.project_name\n      });\n\n      set({ currentAgent: agent });\n      saveSelectedAgentToStorage(agent?.id.toString() || null);\n\n      // Update widget instance if available\n      const widgetKey = `__customgpt_widget_${sessionId}`;\n      const widget = typeof window !== 'undefined' ? (window as any)[widgetKey] : null;\n      \n      if (widget && agent) {\n        widget.config.agentId = agent.id;\n        widget.config.name = agent.project_name;\n      }\n    },\n\n    setAgents: (agents: Agent[]) => {\n      set({ agents });\n      saveAgentsToStorage(agents);\n    },\n\n    updateAgent: async (id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }) => {\n      logger.info('AGENTS', 'Updating agent in widget store', {\n        sessionId,\n        agentId: id,\n        data\n      });\n\n      const agent = get().agents.find(a => a.id === id);\n      if (!agent) {\n        throw new Error('Agent not found');\n      }\n\n      const updatedAgent = { ...agent, ...data };\n      \n      set(state => ({\n        agents: state.agents.map(a =>\n          a.id === id ? updatedAgent : a\n        ),\n        currentAgent: state.currentAgent?.id === id\n          ? updatedAgent\n          : state.currentAgent,\n      }));\n\n      // Save to storage\n      saveAgentsToStorage(get().agents);\n      \n      return updatedAgent;\n    },\n\n    deleteAgent: async (id: number) => {\n      logger.info('AGENTS', 'Deleting agent from widget store', {\n        sessionId,\n        agentId: id\n      });\n\n      set(state => ({\n        agents: state.agents.filter(a => a.id !== id),\n        currentAgent: state.currentAgent?.id === id ? null : state.currentAgent,\n      }));\n\n      // Save to storage\n      saveAgentsToStorage(get().agents);\n    },\n\n    createAgent: async (data: any) => {\n      // Widgets typically don't create agents, but we need this for compatibility\n      throw new Error('Creating agents is not supported in widget mode');\n    },\n\n    replicateAgent: async (id: number) => {\n      // Widgets typically don't replicate agents\n      throw new Error('Replicating agents is not supported in widget mode');\n    },\n\n    getAgentStats: async (id: number) => {\n      // Return empty stats for widget mode\n      return {\n        messages_sent: 0,\n        users_interacted: 0,\n        last_message_at: null\n      };\n    },\n\n    reset: () => {\n      set({\n        agents: [],\n        currentAgent: null,\n        loading: false,\n        error: null,\n      });\n      \n      // Clear storage\n      try {\n        localStorage.removeItem(AGENTS_STORAGE_KEY);\n        localStorage.removeItem(SELECTED_AGENT_KEY);\n      } catch (error) {\n        console.error('Failed to clear agent storage:', error);\n      }\n    },\n  }));\n}","import React, { createContext, useContext, useRef, ReactNode } from 'react';\nimport { StoreApi } from 'zustand';\nimport { createMessageStore, MessageStore } from '../store/widget-stores/messages';\nimport { createConversationStore, ConversationStore } from '../store/widget-stores/conversations';\nimport { createAgentStore, AgentStore } from '../store/widget-stores/agents';\n\n/**\n * Widget Store Context\n * \n * Provides instance-specific Zustand stores for each widget.\n * This ensures complete data isolation between multiple widgets.\n * \n * Each widget instance gets its own:\n * - Message store (for chat messages)\n * - Conversation store (for conversation management)\n * - Agent store (for agent selection)\n * \n * The config store remains global as API configuration should be shared.\n */\n\ninterface WidgetStores {\n  messageStore: StoreApi<MessageStore>;\n  conversationStore: StoreApi<ConversationStore>;\n  agentStore: StoreApi<AgentStore>;\n}\n\ninterface WidgetStoreContextValue {\n  stores: WidgetStores;\n}\n\nexport const WidgetStoreContext = createContext<WidgetStoreContextValue | null>(null);\n\ninterface WidgetStoreProviderProps {\n  children: ReactNode;\n  sessionId: string;\n}\n\n/**\n * Widget Store Provider\n * \n * Creates and provides instance-specific stores for a widget.\n * Stores are created once per widget instance and reused.\n */\nexport const WidgetStoreProvider: React.FC<WidgetStoreProviderProps> = ({ \n  children, \n  sessionId \n}) => {\n  // Use ref to ensure stores are only created once per widget instance\n  const storesRef = useRef<WidgetStores | null>(null);\n  \n  if (!storesRef.current) {\n    // Create stores in the correct order, passing references to dependent stores\n    const agentStore = createAgentStore(sessionId);\n    const conversationStore = createConversationStore(sessionId);\n    const messageStore = createMessageStore(sessionId, agentStore, conversationStore);\n    \n    storesRef.current = {\n      messageStore,\n      conversationStore,\n      agentStore,\n    };\n    \n    // Store the widget stores globally for access by the widget instance\n    if (typeof window !== 'undefined') {\n      if (!(window as any).__customgpt_widget_stores) {\n        (window as any).__customgpt_widget_stores = {};\n      }\n      (window as any).__customgpt_widget_stores[sessionId] = storesRef.current;\n    }\n  }\n  \n  return (\n    <WidgetStoreContext.Provider value={{ stores: storesRef.current }}>\n      {children}\n    </WidgetStoreContext.Provider>\n  );\n};\n\n/**\n * Hook to access widget-specific stores\n */\nexport const useWidgetStores = (): WidgetStores => {\n  const context = useContext(WidgetStoreContext);\n  if (!context) {\n    throw new Error('useWidgetStores must be used within WidgetStoreProvider');\n  }\n  return context.stores;\n};\n\n/**\n * Individual store hooks for easier access\n */\nexport const useWidgetMessageStore = () => {\n  const { messageStore } = useWidgetStores();\n  return messageStore;\n};\n\nexport const useWidgetConversationStore = () => {\n  const { conversationStore } = useWidgetStores();\n  return conversationStore;\n};\n\nexport const useWidgetAgentStore = () => {\n  const { agentStore } = useWidgetStores();\n  return agentStore;\n};","/**\n * Citation Details Modal Component\n * \n * Modal dialog that displays detailed information about a citation,\n * including Open Graph data fetched from the cited source.\n * \n * Features:\n * - Open Graph data display (title, description, image)\n * - Loading and error states\n * - Responsive modal design\n * - Image preview with error handling\n * - Direct link to source\n * - Citation metadata display\n * - Smooth animations\n * \n * API Integration:\n * - Fetches citation details via getCitation API\n * - Handles Open Graph data response\n * - Graceful error handling\n * - Automatic retry on prop changes\n * \n * UI/UX:\n * - Backdrop click to close\n * - Escape key support (via close button)\n * - Loading spinner during fetch\n * - Error message display\n * - Image fallback on load error\n * \n * Features:\n * - Advanced citation caching for improved performance\n * - Professional sharing and bookmarking functionality\n * - Enhanced image preview with zoom and gallery modes\n * - Citation analytics and usage tracking\n * - Comprehensive export options and related citation discovery\n */\n\n'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  ExternalLink,\n  Loader,\n  AlertCircle,\n  Globe,\n  Image as ImageIcon\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { useAgentStore } from '@/store/agents';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\nimport { useWidgetSafe } from '@/widget/WidgetContext';\nimport { useContext } from 'react';\nimport { WidgetStoreContext } from '@/widget/WidgetStoreContext';\n\n/**\n * Open Graph data structure for citations\n * \n * @property id - Citation ID\n * @property url - Source URL\n * @property title - Page title from Open Graph\n * @property description - Page description\n * @property image - Optional preview image URL\n */\ninterface CitationOpenGraphData {\n  id: number;\n  url: string;\n  title: string;\n  description: string;\n  image?: string;\n}\n\n/**\n * Props for CitationDetailsModal\n * \n * @property isOpen - Whether modal is visible\n * @property onClose - Callback to close modal\n * @property citationId - ID of citation to display\n * @property projectId - Optional project ID (uses current agent if not provided)\n */\ninterface CitationDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: number | string;\n  projectId?: number;\n}\n\n/**\n * Citation Details Modal Component\n * \n * Displays rich preview of citation with Open Graph data.\n * Fetches citation details from API when opened.\n */\nexport const CitationDetailsModal: React.FC<CitationDetailsModalProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  projectId\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [citationData, setCitationData] = useState<CitationOpenGraphData | null>(null);\n  const [imageError, setImageError] = useState(false);\n  \n  const { isMobile } = useBreakpoint();\n  const widgetInstance = useWidgetSafe();\n  \n  // Always call the global store hook\n  const globalStore = useAgentStore();\n  \n  // Check if widget store context is available\n  const widgetStoreContext = useContext(WidgetStoreContext);\n  \n  // Use widget store if available and we're in widget mode\n  const currentAgent = widgetInstance && widgetStoreContext \n    ? widgetStoreContext.stores.agentStore.getState().currentAgent\n    : globalStore.currentAgent;\n  \n  const effectiveProjectId = projectId || currentAgent?.id;\n\n  /**\n   * Fetch citation Open Graph data from API\n   * \n   * Handles:\n   * - Parameter validation\n   * - API call with proper typing\n   * - Error handling with user-friendly messages\n   * - Loading state management\n   * - Logging for debugging\n   */\n  const fetchCitationDetails = useCallback(async () => {\n    if (!effectiveProjectId || !citationId) {\n      setError('Missing project or citation information');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    setImageError(false);\n\n    try {\n      const client = getClient();\n      const response = await client.getCitation(\n        effectiveProjectId, \n        typeof citationId === 'string' ? parseInt(citationId, 10) : citationId\n      );\n      \n      if (response.data) {\n        setCitationData(response.data as unknown as CitationOpenGraphData);\n        logger.info('CITATION', 'Citation details fetched', {\n          citationId,\n          projectId: effectiveProjectId,\n          hasImage: !!response.data.image\n        });\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch citation details';\n      setError(errorMessage);\n      logger.error('CITATION', 'Failed to fetch citation details', {\n        error: err,\n        citationId,\n        projectId: effectiveProjectId\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [effectiveProjectId, citationId]);\n\n  /**\n   * Fetch citation details when modal opens\n   * \n   * Triggers API call when modal becomes visible and required data is available\n   */\n  useEffect(() => {\n    if (isOpen && effectiveProjectId && citationId) {\n      fetchCitationDetails();\n    }\n  }, [isOpen, effectiveProjectId, citationId, fetchCitationDetails]);\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            onClick={onClose}\n            className=\"fixed inset-0 bg-black/50 z-50\"\n          />\n\n          {/* Modal */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            className={cn(\n              \"fixed bg-background shadow-xl z-50\",\n              isMobile \n                ? \"inset-x-0 bottom-0 top-20 rounded-t-xl flex flex-col\" \n                : \"inset-x-0 top-[10%] mx-auto max-w-2xl rounded-lg max-h-[90vh] overflow-hidden\"\n            )}\n          >\n          {/* Header */}\n          <div className={cn(\n            \"flex items-center justify-between border-b border-border bg-background/95 backdrop-blur-sm flex-shrink-0\",\n            isMobile ? \"px-4 py-4\" : \"p-4\"\n          )}>\n            <h2 className={cn(\n              \"font-semibold text-foreground\",\n              isMobile ? \"text-lg\" : \"text-lg\"\n            )}>\n              Citation Details\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className={cn(\n                isMobile ? \"h-9 w-9 touch-target\" : \"h-8 w-8\"\n              )}\n            >\n              <X className={cn(\n                isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n              )} />\n            </Button>\n          </div>\n\n          {/* Content */}\n          <div className={cn(\n            \"overflow-y-auto\",\n            isMobile \n              ? \"flex-1 px-4 py-4 pb-6 safe-area-pb\" \n              : \"p-4 max-h-[calc(90vh-120px)]\"\n          )}>\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n              </div>\n            ) : error ? (\n              <div className={cn(\n                \"flex items-center gap-3 p-4 bg-red-50 dark:bg-red-950/20 rounded-lg\",\n                isMobile && \"mx-0\"\n              )}>\n                <AlertCircle className={cn(\n                  \"text-red-600 flex-shrink-0\",\n                  isMobile ? \"h-5 w-5\" : \"h-5 w-5\"\n                )} />\n                <div className=\"flex-1\">\n                  <p className={cn(\n                    \"font-medium text-red-900 dark:text-red-200\",\n                    isMobile ? \"text-sm\" : \"text-sm\"\n                  )}>Error loading citation</p>\n                  <p className={cn(\n                    \"text-red-700 dark:text-red-300 mt-1\",\n                    isMobile ? \"text-xs\" : \"text-sm\"\n                  )}>{error}</p>\n                </div>\n              </div>\n            ) : citationData ? (\n              <div className={cn(\n                \"space-y-4\",\n                isMobile && \"space-y-5\"\n              )}>\n                {/* Open Graph Image */}\n                {citationData.image && !imageError && (\n                  <div className={cn(\n                    \"relative rounded-lg overflow-hidden bg-muted\",\n                    isMobile && \"-mx-4 rounded-none\"\n                  )}>\n                    <img\n                      src={citationData.image}\n                      alt={citationData.title}\n                      className=\"w-full h-auto\"\n                      onError={() => setImageError(true)}\n                    />\n                    {isMobile && (\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent pointer-events-none\" />\n                    )}\n                  </div>\n                )}\n\n                {/* Title */}\n                <div>\n                  <h3 className={cn(\n                    \"font-semibold text-foreground\",\n                    isMobile ? \"text-lg leading-tight\" : \"text-xl\"\n                  )}>\n                    {citationData.title}\n                  </h3>\n                </div>\n\n                {/* URL */}\n                <div className={cn(\n                  \"flex items-center gap-2 text-muted-foreground\",\n                  isMobile ? \"text-sm\" : \"text-sm\"\n                )}>\n                  <Globe className={cn(\n                    \"flex-shrink-0\",\n                    isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                  )} />\n                  <a\n                    href={citationData.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className={cn(\n                      \"hover:text-brand-600 transition-colors\",\n                      isMobile ? \"break-all\" : \"truncate\"\n                    )}\n                  >\n                    {citationData.url}\n                  </a>\n                </div>\n\n                {/* Description */}\n                {citationData.description && (\n                  <div className=\"prose prose-gray dark:prose-invert max-w-none\">\n                    <p className={cn(\n                      \"text-foreground\",\n                      isMobile ? \"text-sm leading-relaxed\" : \"\"\n                    )}>{citationData.description}</p>\n                  </div>\n                )}\n\n                {/* Metadata */}\n                <div className={cn(\n                  \"pt-4 border-t border-border space-y-3\",\n                  isMobile && \"space-y-3\"\n                )}>\n                  <div className={cn(\n                    \"flex items-center justify-between\",\n                    isMobile ? \"text-sm\" : \"text-sm\"\n                  )}>\n                    <span className=\"text-muted-foreground\">Citation ID</span>\n                    <span className={cn(\n                      \"font-mono text-foreground\",\n                      isMobile ? \"text-base\" : \"\"\n                    )}>#{citationData.id}</span>\n                  </div>\n                  {citationData.image && (\n                    <div className={cn(\n                      \"flex items-center justify-between\",\n                      isMobile ? \"text-sm\" : \"text-sm\"\n                    )}>\n                      <span className=\"text-muted-foreground\">Has preview image</span>\n                      <ImageIcon className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                    </div>\n                  )}\n                </div>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className={cn(\n            \"border-t bg-muted flex-shrink-0\",\n            isMobile ? \"p-4 safe-area-pb\" : \"p-4\"\n          )}>\n            <div className={cn(\n              \"flex items-center\",\n              isMobile ? \"flex-col gap-3\" : \"justify-between\"\n            )}>\n              <div className={cn(\n                \"text-muted-foreground\",\n                isMobile ? \"text-xs text-center\" : \"text-xs\"\n              )}>\n                Open Graph data from cited source\n              </div>\n              {citationData && (\n                <a\n                  href={citationData.url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className={cn(\n                    \"inline-flex items-center gap-2 font-medium text-brand-600 hover:text-brand-700 transition-colors\",\n                    isMobile \n                      ? \"w-full justify-center bg-brand-600 text-white hover:bg-brand-700 hover:text-white rounded-lg px-4 py-3 text-base touch-target\" \n                      : \"px-3 py-1.5 text-sm\"\n                  )}\n                >\n                  Visit source\n                  <ExternalLink className={cn(\n                    isMobile ? \"h-4 w-4\" : \"h-3.5 w-3.5\"\n                  )} />\n                </a>\n              )}\n            </div>\n          </div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};","'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  FileText,\n  Download,\n  Loader,\n  AlertCircle,\n  Copy,\n  Check\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { toast } from 'sonner';\n\ninterface CitationFilePreviewProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: string;\n  fileName?: string;\n}\n\nexport const CitationFilePreview: React.FC<CitationFilePreviewProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  fileName = 'Citation File'\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [fileContent, setFileContent] = useState<string | null>(null);\n  const [contentType, setContentType] = useState<string>('text/plain');\n  const [copied, setCopied] = useState(false);\n\n  const fetchFilePreview = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const client = getClient();\n      const response = await client.previewCitationFile(citationId);\n      \n      // Handle different response formats\n      if (typeof response === 'string') {\n        setFileContent(response);\n        setContentType('text/plain');\n      } else if (response.data) {\n        setFileContent(response.data.content || response.data);\n        setContentType(response.data.content_type || 'text/plain');\n      } else {\n        setFileContent(JSON.stringify(response, null, 2));\n        setContentType('application/json');\n      }\n      \n      logger.info('CITATION_PREVIEW', 'File preview fetched', {\n        citationId,\n        contentLength: fileContent?.length\n      });\n    } catch (err: any) {\n      logger.error('CITATION_PREVIEW', 'Failed to fetch file preview', {\n        error: err,\n        citationId\n      });\n      \n      if (err.status === 400) {\n        setError('Invalid citation ID.');\n      } else if (err.status === 401) {\n        setError('Authentication failed. Please log in again.');\n      } else if (err.status === 403) {\n        setError('Access denied. You do not have permission to view this file.');\n      } else if (err.status === 404) {\n        setError('Citation file not found.');\n      } else if (err.status === 500) {\n        setError('Server error. Please try again later.');\n      } else {\n        setError('Failed to load file preview.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [citationId]);\n\n  useEffect(() => {\n    if (isOpen && citationId) {\n      fetchFilePreview();\n    }\n  }, [isOpen, citationId, fetchFilePreview]);\n\n  const handleCopy = async () => {\n    if (!fileContent) return;\n    \n    try {\n      await navigator.clipboard.writeText(fileContent);\n      setCopied(true);\n      toast.success('Content copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      toast.error('Failed to copy content');\n    }\n  };\n\n  const handleDownload = () => {\n    if (!fileContent) return;\n    \n    const blob = new Blob([fileContent], { type: contentType });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast.success('File downloaded');\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        {/* Backdrop */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onClick={onClose}\n          className=\"absolute inset-0 bg-black/50\"\n        />\n\n        {/* Modal */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.95 }}\n          className=\"relative bg-background rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden\"\n        >\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-border\">\n            <div className=\"flex items-center gap-3\">\n              <FileText className=\"h-5 w-5 text-muted-foreground\" />\n              <h2 className=\"text-lg font-semibold text-foreground\">\n                {fileName}\n              </h2>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleCopy}\n                disabled={!fileContent}\n              >\n                {copied ? (\n                  <>\n                    <Check className=\"h-4 w-4 mr-2\" />\n                    Copied\n                  </>\n                ) : (\n                  <>\n                    <Copy className=\"h-4 w-4 mr-2\" />\n                    Copy\n                  </>\n                )}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleDownload}\n                disabled={!fileContent}\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onClose}\n                className=\"h-8 w-8\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-4 overflow-y-auto max-h-[calc(90vh-120px)]\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n              </div>\n            ) : error ? (\n              <div className=\"flex items-center gap-3 p-4 bg-red-50 rounded-lg\">\n                <AlertCircle className=\"h-5 w-5 text-red-600 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-destructive\">Error loading file</p>\n                  <p className=\"text-sm text-destructive/90 mt-1\">{error}</p>\n                </div>\n              </div>\n            ) : fileContent ? (\n              <div className=\"font-mono text-sm bg-accent rounded-lg p-4 text-foreground\">\n                <pre className=\"whitespace-pre-wrap break-words\">\n                  {fileContent}\n                </pre>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t border-border bg-accent\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-xs text-muted-foreground\">\n                Citation ID: {citationId}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                {contentType}\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};","/**\n * Message Error Display Component\n * \n * Displays error messages with appropriate styling and context based on HTTP status codes.\n * Provides user-friendly error messages and actionable guidance.\n */\n\nimport React from 'react';\nimport { AlertCircle, XCircle, CreditCard, UserX, Search, ServerCrash } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface MessageErrorDisplayProps {\n  error: string | Error;\n  statusCode?: number;\n  onRetry?: () => void;\n  className?: string;\n}\n\n/**\n * Parse error to extract status code and message\n */\nconst parseError = (error: string | Error): { statusCode?: number; message: string } => {\n  if (typeof error === 'string') {\n    // Try to extract status code from error message\n    const statusMatch = error.match(/(\\d{3})/);\n    const statusCode = statusMatch ? parseInt(statusMatch[1]) : undefined;\n    return { statusCode, message: error };\n  }\n  \n  return { \n    statusCode: (error as any).status || (error as any).statusCode,\n    message: error.message \n  };\n};\n\n/**\n * Get error details based on status code\n */\nconst getErrorDetails = (statusCode?: number, message?: string) => {\n  switch (statusCode) {\n    case 400:\n      return {\n        icon: AlertCircle,\n        title: 'Invalid Request',\n        description: 'The request format is invalid. Please check your input and try again.',\n        className: 'border-orange-200 bg-orange-50',\n        iconClassName: 'text-orange-600',\n        textClassName: 'text-orange-800',\n      };\n      \n    case 401:\n      return {\n        icon: UserX,\n        title: 'Authentication Failed',\n        description: 'Your API key is either missing or invalid. Please check your API key configuration.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showSupport: true,\n      };\n      \n    case 403:\n      // Check if this is an inactive agent error\n      const isInactiveAgent = message && (\n        message.toLowerCase().includes('inactive') ||\n        message.toLowerCase().includes('no documents') ||\n        message.toLowerCase().includes('agent is not active') ||\n        message.toLowerCase().includes('project is not active') ||\n        message.toLowerCase().includes('no documents uploaded')\n      );\n      \n      if (isInactiveAgent) {\n        return {\n          icon: AlertCircle,\n          title: 'Agent Inactive',\n          description: 'This agent is inactive. Please add documents to activate it before starting a conversation.',\n          className: 'border-orange-200 bg-orange-50',\n          iconClassName: 'text-orange-600',\n          textClassName: 'text-orange-800',\n        };\n      }\n      \n      return {\n        icon: UserX,\n        title: 'Access Denied',\n        description: 'You don\\'t have permission to access this resource. Please check your API key permissions.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showSupport: true,\n      };\n      \n    case 404:\n      return {\n        icon: Search,\n        title: 'Not Found',\n        description: 'The requested agent or conversation was not found. It may have been deleted or you may not have access.',\n        className: 'border-border bg-accent',\n        iconClassName: 'text-muted-foreground',\n        textClassName: 'text-foreground',\n      };\n      \n    case 429:\n      return {\n        icon: CreditCard,\n        title: 'Query Credits Exhausted',\n        description: 'You have exhausted your current query credits. Please contact customer service for assistance.',\n        className: 'border-yellow-200 bg-yellow-50',\n        iconClassName: 'text-yellow-600',\n        textClassName: 'text-yellow-800',\n        showSupport: true,\n        supportUrl: 'https://customgpt.freshdesk.com/support/home',\n      };\n      \n    case 500:\n    case 502:\n    case 503:\n    case 504:\n      return {\n        icon: ServerCrash,\n        title: 'Server Error',\n        description: 'An internal server error occurred. Please try again later or contact support if the issue persists.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showRetry: true,\n      };\n      \n    default:\n      return {\n        icon: XCircle,\n        title: 'Error',\n        description: message || 'An unexpected error occurred. Please try again.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showRetry: true,\n      };\n  }\n};\n\nexport const MessageErrorDisplay: React.FC<MessageErrorDisplayProps> = ({\n  error,\n  statusCode: propStatusCode,\n  onRetry,\n  className,\n}) => {\n  const { statusCode: parsedStatusCode, message } = parseError(error);\n  const finalStatusCode = propStatusCode || parsedStatusCode;\n  \n  const errorDetails = getErrorDetails(finalStatusCode, message);\n  const Icon = errorDetails.icon;\n  \n  return (\n    <div\n      className={cn(\n        'p-4 rounded-lg border',\n        errorDetails.className,\n        className\n      )}\n    >\n      <div className=\"flex items-start gap-3\">\n        <Icon className={cn('w-5 h-5 mt-0.5 flex-shrink-0', errorDetails.iconClassName)} />\n        \n        <div className=\"flex-1 space-y-2\">\n          <div>\n            <h3 className={cn('font-medium', errorDetails.textClassName)}>\n              {errorDetails.title}\n              {finalStatusCode && ` (${finalStatusCode})`}\n            </h3>\n            <p className={cn('text-sm mt-1', errorDetails.textClassName, 'opacity-90')}>\n              {errorDetails.description}\n            </p>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"flex items-center gap-2 mt-3\">\n            {errorDetails.showRetry && onRetry && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={onRetry}\n                className=\"text-xs\"\n              >\n                Try Again\n              </Button>\n            )}\n            \n            {errorDetails.showSupport && (\n              <a\n                href={errorDetails.supportUrl || 'https://customgpt.freshdesk.com/support/home'}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-xs underline hover:no-underline\"\n              >\n                Contact Support\n              </a>\n            )}\n          </div>\n          \n          {/* Technical Details (collapsed by default) */}\n          {message && message !== errorDetails.description && (\n            <details className=\"mt-3\">\n              <summary className={cn('text-xs cursor-pointer', errorDetails.textClassName, 'opacity-70')}>\n                Technical Details\n              </summary>\n              <pre className={cn(\n                'mt-2 p-2 text-xs rounded bg-background bg-opacity-50 overflow-x-auto',\n                errorDetails.textClassName,\n                'opacity-80'\n              )}>\n                {message}\n              </pre>\n            </details>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","/**\n * Widget Store Hooks\n * \n * These hooks automatically select between global and widget-specific stores\n * based on whether the component is rendered inside a widget context.\n */\n\nimport { useContext } from 'react';\nimport { useStore } from 'zustand';\nimport { WidgetStoreContext } from '../widget/WidgetStoreContext';\nimport { useMessageStore as useGlobalMessageStore } from '../store';\nimport { useConversationStore as useGlobalConversationStore } from '../store';\nimport { useAgentStore as useGlobalAgentStore } from '../store';\nimport type { MessageStore } from '../store/widget-stores/messages';\nimport type { ConversationStore } from '../store/widget-stores/conversations';\nimport type { AgentStore } from '../store/widget-stores/agents';\n\n/**\n * Check if we're inside a widget context\n */\nfunction useIsInWidgetContext(): boolean {\n  try {\n    const context = useContext(WidgetStoreContext);\n    return context !== null;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get widget stores if inside widget context\n */\nfunction useWidgetStores() {\n  const context = useContext(WidgetStoreContext);\n  return context?.stores;\n}\n\n/**\n * Message store hook that automatically selects the correct store\n */\nexport function useMessageStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  const globalStore = useGlobalMessageStore();\n  const widgetStore = useStore(\n    widgetStores?.messageStore || useGlobalMessageStore,\n    (state) => state\n  );\n  \n  return isInWidget && widgetStores ? widgetStore : globalStore;\n}\n\n/**\n * Conversation store hook that automatically selects the correct store\n */\nexport function useConversationStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  const globalStore = useGlobalConversationStore();\n  const widgetStore = useStore(\n    widgetStores?.conversationStore || useGlobalConversationStore,\n    (state) => state\n  );\n  \n  return isInWidget && widgetStores ? widgetStore : globalStore;\n}\n\n/**\n * Agent store hook that automatically selects the correct store\n */\nexport function useAgentStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  const globalStore = useGlobalAgentStore();\n  const widgetStore = useStore(\n    widgetStores?.agentStore || useGlobalAgentStore,\n    (state) => state\n  );\n  \n  return isInWidget && widgetStores ? widgetStore : globalStore;\n}\n\n/**\n * Export convenience functions to check store source\n */\nexport function useIsUsingWidgetStore(): boolean {\n  return useIsInWidgetContext();\n}\n\n/**\n * Get the current session ID if in widget context\n */\nexport function useWidgetSessionId(): string | null {\n  const context = useContext(WidgetStoreContext);\n  if (!context) return null;\n  \n  // Extract session ID from the store's localStorage key\n  const messageStore = context.stores.messageStore;\n  const state = messageStore.getState();\n  \n  // Session ID would need to be added to context for retrieval\n  return null;\n}","/**\n * Theme Manager\n * \n * Orchestrates theme switching, loading, and lifecycle management.\n * Provides centralized access to all available voice themes.\n */\n\nimport { IVoiceTheme, ThemeMetadata, ThemeFactory, VoiceState } from './IVoiceTheme';\n\nexport interface ThemeTransitionOptions {\n  duration: number;\n  easing: 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out';\n  crossfade: boolean;\n}\n\nexport interface ThemeRegistration {\n  id: string;\n  factory: ThemeFactory;\n  metadata: ThemeMetadata;\n}\n\n/**\n * Theme Manager - Singleton class for managing voice themes\n */\nexport class ThemeManager {\n  private static instance: ThemeManager;\n  private registeredThemes: Map<string, ThemeRegistration> = new Map();\n  private currentTheme: IVoiceTheme | null = null;\n  private canvas: HTMLCanvasElement | null = null;\n  private context: CanvasRenderingContext2D | null = null;\n  \n  // Transition state\n  private isTransitioning = false;\n  private transitionTheme: IVoiceTheme | null = null;\n  private transitionProgress = 0;\n  private transitionOptions: ThemeTransitionOptions = {\n    duration: 1000,\n    easing: 'ease-in-out',\n    crossfade: true\n  };\n\n  // Event callbacks\n  private callbacks: {\n    onThemeChange?: (oldTheme: string | null, newTheme: string) => void;\n    onTransitionStart?: (from: string | null, to: string) => void;\n    onTransitionComplete?: (themeId: string) => void;\n    onThemeError?: (error: Error, themeId: string) => void;\n  } = {};\n\n  private constructor() {\n    this.registerBuiltInThemes();\n  }\n\n  /**\n   * Get singleton instance\n   */\n  static getInstance(): ThemeManager {\n    if (!ThemeManager.instance) {\n      ThemeManager.instance = new ThemeManager();\n    }\n    return ThemeManager.instance;\n  }\n\n  /**\n   * Initialize with canvas context\n   */\n  initialize(canvas: HTMLCanvasElement, context: CanvasRenderingContext2D): void {\n    this.canvas = canvas;\n    this.context = context;\n    \n    // Initialize current theme if one is set\n    if (this.currentTheme && this.context) {\n      this.currentTheme.init(this.context, canvas.width, canvas.height);\n    }\n  }\n\n  /**\n   * Register a new theme\n   */\n  registerTheme(registration: ThemeRegistration): void {\n    if (this.registeredThemes.has(registration.id)) {\n      console.warn(`Theme ${registration.id} is already registered. Overwriting.`);\n    }\n    \n    this.registeredThemes.set(registration.id, registration);\n    console.log(`Registered theme: ${registration.id}`);\n  }\n\n  /**\n   * Unregister a theme\n   */\n  unregisterTheme(themeId: string): boolean {\n    if (this.currentTheme?.id === themeId) {\n      console.warn(`Cannot unregister active theme: ${themeId}`);\n      return false;\n    }\n    \n    return this.registeredThemes.delete(themeId);\n  }\n\n  /**\n   * Get all available themes metadata\n   */\n  getAvailableThemes(): ThemeMetadata[] {\n    return Array.from(this.registeredThemes.values()).map(reg => reg.metadata);\n  }\n\n  /**\n   * Get theme metadata by ID\n   */\n  getThemeMetadata(themeId: string): ThemeMetadata | null {\n    const registration = this.registeredThemes.get(themeId);\n    return registration ? registration.metadata : null;\n  }\n\n  /**\n   * Switch to a new theme\n   */\n  async switchTheme(themeId: string, transitionOptions?: Partial<ThemeTransitionOptions>): Promise<boolean> {\n    if (this.isTransitioning) {\n      console.warn('Theme transition already in progress');\n      return false;\n    }\n\n    const registration = this.registeredThemes.get(themeId);\n    if (!registration) {\n      const error = new Error(`Theme not found: ${themeId}`);\n      this.callbacks.onThemeError?.(error, themeId);\n      return false;\n    }\n\n    // If this is the current theme, no need to switch\n    if (this.currentTheme?.id === themeId) {\n      return true;\n    }\n\n    try {\n      // Update transition options\n      this.transitionOptions = { ...this.transitionOptions, ...transitionOptions };\n\n      // Create new theme instance\n      const newTheme = registration.factory();\n      \n      // Initialize with current context if available\n      if (this.context && this.canvas) {\n        newTheme.init(this.context, this.canvas.width, this.canvas.height);\n      }\n\n      // Start transition\n      await this.performThemeTransition(newTheme);\n      \n      return true;\n    } catch (error) {\n      console.error(`Failed to switch to theme ${themeId}:`, error);\n      this.callbacks.onThemeError?.(error as Error, themeId);\n      return false;\n    }\n  }\n\n  /**\n   * Get current active theme\n   */\n  getCurrentTheme(): IVoiceTheme | null {\n    return this.currentTheme;\n  }\n\n  /**\n   * Get current theme ID\n   */\n  getCurrentThemeId(): string | null {\n    return this.currentTheme?.id || null;\n  }\n\n  /**\n   * Set event callbacks\n   */\n  setCallbacks(callbacks: Partial<typeof this.callbacks>): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Draw current theme (delegated from Canvas component)\n   */\n  draw(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void {\n    if (this.isTransitioning && this.transitionOptions.crossfade) {\n      this.drawTransition(context, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    } else if (this.currentTheme) {\n      this.currentTheme.draw(context, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    }\n  }\n\n  /**\n   * Forward state changes to current theme\n   */\n  onUserSpeaking(): void {\n    this.currentTheme?.onUserSpeaking();\n    this.transitionTheme?.onUserSpeaking();\n  }\n\n  onProcessing(): void {\n    this.currentTheme?.onProcessing();\n    this.transitionTheme?.onProcessing();\n  }\n\n  onAiSpeaking(): void {\n    this.currentTheme?.onAiSpeaking();\n    this.transitionTheme?.onAiSpeaking();\n  }\n\n  reset(): void {\n    this.currentTheme?.reset();\n    this.transitionTheme?.reset();\n  }\n\n  /**\n   * Forward mouse events to current theme\n   */\n  setMousePosition(x: number, y: number, canvasWidth: number, canvasHeight: number): void {\n    this.currentTheme?.setMousePosition(x, y, canvasWidth, canvasHeight);\n    this.transitionTheme?.setMousePosition(x, y, canvasWidth, canvasHeight);\n  }\n\n  setHovering(hovering: boolean): void {\n    this.currentTheme?.setHovering(hovering);\n    this.transitionTheme?.setHovering(hovering);\n  }\n\n  /**\n   * Get performance metrics from current theme\n   */\n  getPerformanceMetrics() {\n    return this.currentTheme?.getPerformanceMetrics() || {};\n  }\n\n  /**\n   * Dispose of all resources\n   */\n  dispose(): void {\n    this.currentTheme?.dispose();\n    this.transitionTheme?.dispose();\n    this.currentTheme = null;\n    this.transitionTheme = null;\n    this.isTransitioning = false;\n  }\n\n  // Private methods\n\n  /**\n   * Register built-in themes\n   */\n  private registerBuiltInThemes(): void {\n    // Import themes dynamically to avoid circular dependencies\n    import('./DefaultTheme').then(({ DefaultTheme }) => {\n      this.registerTheme({\n        id: 'default',\n        factory: () => new DefaultTheme(),\n        metadata: {\n          id: 'default',\n          name: 'Classic Sphere',\n          description: 'The original 3D particle sphere with smooth color transitions',\n          category: 'particle',\n          performanceProfile: 'medium',\n          previewColors: ['#4285F4', '#34A853', '#EA4335'],\n          previewDescription: 'Rotating particle sphere with dynamic colors'\n        }\n      });\n    });\n\n    import('./StarfieldTheme').then(({ StarfieldTheme }) => {\n      this.registerTheme({\n        id: 'starfield',\n        factory: () => new StarfieldTheme(),\n        metadata: {\n          id: 'starfield',\n          name: 'Cosmic Starfield',\n          description: 'Twinkling stars, dynamic constellations, and flowing nebula clouds',\n          category: 'particle',\n          performanceProfile: 'medium',\n          previewColors: ['#FFFFFF', '#ADD8E6', '#FFD700', '#FFC0CB'],\n          previewDescription: 'Immersive space environment with stars and constellations'\n        }\n      });\n    });\n\n    import('./JarvisTheme').then(({ JarvisTheme }) => {\n      this.registerTheme({\n        id: 'jarvis',\n        factory: () => new JarvisTheme(),\n        metadata: {\n          id: 'jarvis',\n          name: 'J.A.R.V.I.S.',\n          description: 'Advanced AI interface with arc reactor, HUD elements, and energy particles',\n          category: 'advanced',\n          performanceProfile: 'heavy',\n          previewColors: ['#00A2E8', '#00FFFF', '#FF6500', '#FF00FF'],\n          previewDescription: 'Iron Man-inspired technological interface with arc reactor'\n        }\n      });\n    });\n\n    import('./LegoTheme').then(({ LegoTheme }) => {\n      this.registerTheme({\n        id: 'lego',\n        factory: () => new LegoTheme(),\n        metadata: {\n          id: 'lego',\n          name: 'LEGO Blocks',\n          description: '3D building blocks that construct and deconstruct with satisfying physics',\n          category: 'artistic',\n          performanceProfile: 'medium',\n          previewColors: ['#C4281C', '#0D69AB', '#12852B', '#F5CD2F'],\n          previewDescription: 'Interactive LEGO blocks building structures with authentic colors'\n        }\n      });\n    });\n\n    import('./StarWarsTheme').then(({ StarWarsTheme }) => {\n      this.registerTheme({\n        id: 'starwars',\n        factory: () => new StarWarsTheme(),\n        metadata: {\n          id: 'starwars',\n          name: 'Star Wars',\n          description: 'Lightsabers, holograms, and the Force in a galaxy far, far away',\n          category: 'advanced',\n          performanceProfile: 'heavy',\n          previewColors: ['#00A2FF', '#FF0000', '#00FF00', '#9333EA'],\n          previewDescription: 'Epic Star Wars experience with lightsabers and hologram effects'\n        }\n      });\n    });\n\n    import('./OceanWaveTheme').then(({ OceanWaveTheme }) => {\n      this.registerTheme({\n        id: 'ocean',\n        factory: () => new OceanWaveTheme(),\n        metadata: {\n          id: 'ocean',\n          name: 'Ocean Waves',\n          description: 'Calming underwater environment with waves, bubbles, and marine life',\n          category: 'particle',\n          performanceProfile: 'medium',\n          previewColors: ['#0077BE', '#00BCF2', '#C8E6FF', '#98CB3B'],\n          previewDescription: 'Serene ocean experience with realistic wave physics and bubbles'\n        }\n      });\n    });\n\n    import('./NFTTheme').then(({ NFTTheme }) => {\n      this.registerTheme({\n        id: 'nft',\n        factory: () => new NFTTheme(),\n        metadata: {\n          id: 'nft',\n          name: 'NFT Art',\n          description: 'Vibrant digital art with morphing shapes, dynamic gradients, and artistic trails',\n          category: 'artistic',\n          performanceProfile: 'heavy',\n          previewColors: ['#FF00FF', '#00FFFF', '#FFFF00', '#8000FF', '#FF0080'],\n          previewDescription: 'Bold NFT-style aesthetics with morphing geometric shapes'\n        }\n      });\n    });\n\n    import('./NothingPhoneTheme').then(({ NothingPhoneTheme }) => {\n      this.registerTheme({\n        id: 'nothing',\n        factory: () => new NothingPhoneTheme(),\n        metadata: {\n          id: 'nothing',\n          name: 'Nothing Phone',\n          description: 'Minimalist design inspired by Nothing Phone with clean dots and typography',\n          category: 'artistic',\n          performanceProfile: 'light',\n          previewColors: ['#FFFFFF', '#F5F5F5', '#C8C8C8', '#808080', '#000000'],\n          previewDescription: 'Clean minimalist interface with Glyph-inspired dot patterns'\n        }\n      });\n    });\n\n    import('./MinecraftTheme').then(({ MinecraftTheme }) => {\n      this.registerTheme({\n        id: 'minecraft',\n        factory: () => new MinecraftTheme(),\n        metadata: {\n          id: 'minecraft',\n          name: 'Minecraft',\n          description: 'Blocky voxel world with building, breaking, and crafting animations',\n          category: 'artistic',\n          performanceProfile: 'medium',\n          previewColors: ['#7CBD52', '#FEF63F', '#A28A4E', '#63EDE5', '#888888'],\n          previewDescription: 'Interactive voxel blocks with authentic Minecraft aesthetics'\n        }\n      });\n    });\n\n    import('./FuturisticTheme').then(({ FuturisticTheme }) => {\n      this.registerTheme({\n        id: 'futuristic',\n        factory: () => new FuturisticTheme(),\n        metadata: {\n          id: 'futuristic',\n          name: 'Futuristic',\n          description: 'High-tech cyberpunk interface with holograms, wireframes, and data streams',\n          category: 'advanced',\n          performanceProfile: 'heavy',\n          previewColors: ['#00FFFF', '#FF00FF', '#FFFF00', '#00FF00', '#0096FF'],\n          previewDescription: 'Cyberpunk-inspired holographic displays and wireframe models'\n        }\n      });\n    });\n\n    import('./VintageModernTheme').then(({ VintageModernTheme }) => {\n      this.registerTheme({\n        id: 'vintage-modern',\n        factory: () => new VintageModernTheme(),\n        metadata: {\n          id: 'vintage-modern',\n          name: 'Vintage Modern',\n          description: 'Retro aesthetics meets modern design with film grain and neon glow',\n          category: 'artistic',\n          performanceProfile: 'medium',\n          previewColors: ['#FF6F91', '#FF9A00', '#ED75FF', '#5FE1FA', '#FFF176'],\n          previewDescription: 'Nostalgic blend of retro TV effects with modern animations'\n        }\n      });\n    });\n\n    import('./AuroraTheme').then(({ AuroraTheme }) => {\n      this.registerTheme({\n        id: 'aurora',\n        factory: () => new AuroraTheme(),\n        metadata: {\n          id: 'aurora',\n          name: 'Aurora Borealis',\n          description: 'Ethereal northern lights with flowing ribbons and magnetic fields',\n          category: 'particle',\n          performanceProfile: 'heavy',\n          previewColors: ['#00FF00', '#0064FF', '#9300D3', '#FF0064', '#5FE1FA'],\n          previewDescription: 'Mesmerizing aurora borealis with realistic light bands'\n        }\n      });\n    });\n\n    console.log('ThemeManager: Built-in themes registered');\n  }\n\n  /**\n   * Perform theme transition\n   */\n  private async performThemeTransition(newTheme: IVoiceTheme): Promise<void> {\n    const oldTheme = this.currentTheme;\n    const oldThemeId = oldTheme?.id || null;\n    \n    this.isTransitioning = true;\n    this.transitionTheme = newTheme;\n    this.transitionProgress = 0;\n\n    // Notify callbacks\n    this.callbacks.onTransitionStart?.(oldThemeId, newTheme.id);\n\n    // If crossfade is disabled, immediately switch\n    if (!this.transitionOptions.crossfade) {\n      this.completeTransition(newTheme, oldTheme);\n      return;\n    }\n\n    // Animate transition\n    return new Promise((resolve) => {\n      const startTime = performance.now();\n      const { duration, easing } = this.transitionOptions;\n\n      const animate = (currentTime: number) => {\n        const elapsed = currentTime - startTime;\n        let progress = Math.min(elapsed / duration, 1);\n\n        // Apply easing\n        progress = this.applyEasing(progress, easing);\n        this.transitionProgress = progress;\n\n        if (progress >= 1) {\n          this.completeTransition(newTheme, oldTheme);\n          resolve();\n        } else {\n          requestAnimationFrame(animate);\n        }\n      };\n\n      requestAnimationFrame(animate);\n    });\n  }\n\n  /**\n   * Complete theme transition\n   */\n  private completeTransition(newTheme: IVoiceTheme, oldTheme: IVoiceTheme | null): void {\n    // Clean up old theme\n    oldTheme?.dispose();\n\n    // Set new theme as current\n    this.currentTheme = newTheme;\n    this.transitionTheme = null;\n    this.isTransitioning = false;\n    this.transitionProgress = 0;\n\n    // Notify callbacks\n    this.callbacks.onThemeChange?.(oldTheme?.id || null, newTheme.id);\n    this.callbacks.onTransitionComplete?.(newTheme.id);\n\n    console.log(`Theme switched to: ${newTheme.id}`);\n  }\n\n  /**\n   * Draw crossfade transition between themes\n   */\n  private drawTransition(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void {\n    // Create temporary canvases for each theme\n    const tempCanvas1 = document.createElement('canvas');\n    const tempCanvas2 = document.createElement('canvas');\n    tempCanvas1.width = tempCanvas2.width = displayWidth;\n    tempCanvas1.height = tempCanvas2.height = displayHeight;\n    \n    const tempCtx1 = tempCanvas1.getContext('2d');\n    const tempCtx2 = tempCanvas2.getContext('2d');\n\n    if (!tempCtx1 || !tempCtx2) return;\n\n    // Draw old theme to first canvas\n    if (this.currentTheme) {\n      this.currentTheme.draw(tempCtx1, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    }\n\n    // Draw new theme to second canvas\n    if (this.transitionTheme) {\n      this.transitionTheme.draw(tempCtx2, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    }\n\n    // Clear main canvas\n    context.clearRect(0, 0, displayWidth, displayHeight);\n\n    // Draw old theme with fading alpha\n    context.globalAlpha = 1 - this.transitionProgress;\n    context.drawImage(tempCanvas1, 0, 0);\n\n    // Draw new theme with increasing alpha\n    context.globalAlpha = this.transitionProgress;\n    context.drawImage(tempCanvas2, 0, 0);\n\n    // Reset alpha\n    context.globalAlpha = 1;\n  }\n\n  /**\n   * Apply easing function to transition progress\n   */\n  private applyEasing(t: number, easing: string): number {\n    switch (easing) {\n      case 'linear':\n        return t;\n      case 'ease-in':\n        return t * t;\n      case 'ease-out':\n        return t * (2 - t);\n      case 'ease-in-out':\n        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n      default:\n        return t;\n    }\n  }\n}\n\n/**\n * Convenience function to get theme manager instance\n */\nexport const getThemeManager = () => ThemeManager.getInstance();","import { useEffect, useRef, forwardRef } from \"react\";\nimport { getThemeManager } from '@/lib/voice/themes/ThemeManager';\nimport { DefaultTheme } from '@/lib/voice/themes/DefaultTheme';\nimport { throttle, debounce } from '@/lib/utils/throttle';\n\ninterface CanvasProps {\n  // Classic theme only - no theme switching\n}\n\nconst Canvas = forwardRef<HTMLCanvasElement, CanvasProps>(({}, ref) => {\n  const internalRef = useRef<HTMLCanvasElement>(null);\n  const canvasRef = (ref as any) || internalRef;\n  const themeManagerRef = useRef(getThemeManager());\n  const isInitializedRef = useRef(false);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const context = canvas.getContext('2d');\n    if (!context) return;\n\n    const themeManager = themeManagerRef.current;\n\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    \n    // Debounce resize to prevent excessive updates\n    const debouncedResize = debounce(resizeCanvas, 250);\n\n    resizeCanvas();\n    window.addEventListener('resize', debouncedResize);\n\n    // Initialize theme manager with canvas context\n    if (!isInitializedRef.current) {\n      themeManager.initialize(canvas, context);\n      \n      // Register default theme if not already registered\n      if (!themeManager.getThemeMetadata('default')) {\n        themeManager.registerTheme({\n          id: 'default',\n          factory: () => new DefaultTheme(),\n          metadata: {\n            id: 'default',\n            name: 'Classic Sphere',\n            description: 'The original 3D particle sphere with smooth color transitions',\n            category: 'particle',\n            performanceProfile: 'medium',\n            previewColors: ['#4285F4', '#34A853', '#EA4335'],\n            previewDescription: 'Rotating particle sphere with dynamic colors'\n          }\n        });\n      }\n\n      // Use default theme only\n      themeManager.switchTheme('default');\n      isInitializedRef.current = true;\n    }\n\n    // Throttled mouse move handler for better performance\n    const handleMouseMove = throttle((event: MouseEvent) => {\n      const rect = canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      themeManager.setMousePosition(x, y, canvas.width, canvas.height);\n    }, 16); // ~60fps for mouse movements\n\n    const handleMouseEnter = () => {\n      themeManager.setHovering(true);\n    };\n\n    const handleMouseLeave = () => {\n      themeManager.setHovering(false);\n    };\n\n    // Add mouse event listeners\n    canvas.addEventListener('mousemove', handleMouseMove);\n    canvas.addEventListener('mouseenter', handleMouseEnter);\n    canvas.addEventListener('mouseleave', handleMouseLeave);\n\n    let animationFrameId: number;\n    let lastTime = 0;\n    const targetFPS = 30; // Target 30 FPS for better performance\n    const frameInterval = 1000 / targetFPS;\n    \n    // Performance monitoring\n    let frameCount = 0;\n    let fpsTime = performance.now();\n    let currentFPS = targetFPS;\n\n    const render = (currentTime: number) => {\n      const deltaTime = currentTime - lastTime;\n      \n      // Only render if enough time has passed for target FPS\n      if (deltaTime >= frameInterval) {\n        // Update lastTime, adjusting for any time drift\n        lastTime = currentTime - (deltaTime % frameInterval);\n        \n        // Get current canvas dimensions\n        const currentWidth = canvas.width;\n        const currentHeight = canvas.height;\n        const currentProjCenterX = currentWidth / 2;\n        const currentProjCenterY = currentHeight / 2;\n        \n        // Delegate drawing to theme manager\n        themeManager.draw(context, currentWidth, currentHeight, currentProjCenterX, currentProjCenterY, deltaTime);\n        \n        // Performance monitoring\n        frameCount++;\n        const now = performance.now();\n        if (now - fpsTime >= 1000) {\n          currentFPS = frameCount;\n          frameCount = 0;\n          fpsTime = now;\n          \n          // Log performance warnings\n          if (currentFPS < targetFPS * 0.8) {\n            console.warn(`[VOICE-CANVAS] Low FPS detected: ${currentFPS}/${targetFPS}`);\n          }\n        }\n      }\n      \n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    \n    // Start the animation loop\n    animationFrameId = window.requestAnimationFrame(render);\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n      window.removeEventListener('resize', debouncedResize);\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('mouseenter', handleMouseEnter);\n      canvas.removeEventListener('mouseleave', handleMouseLeave);\n    };\n  }, []);\n\n  // Expose theme actions for parent component to call\n  (Canvas as any).getThemeManager = () => themeManagerRef.current;\n  (Canvas as any).onUserSpeaking = () => themeManagerRef.current.onUserSpeaking();\n  (Canvas as any).onProcessing = () => themeManagerRef.current.onProcessing();\n  (Canvas as any).onAiSpeaking = () => themeManagerRef.current.onAiSpeaking();\n  (Canvas as any).reset = () => themeManagerRef.current.reset();\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"absolute inset-0 w-full h-full\"\n      style={{ background: 'transparent' }}\n    />\n  );\n});\n\nCanvas.displayName = 'Canvas';\n\nexport default Canvas;","/**\n * Throttle function that limits how often a function can be called\n * @param func Function to throttle\n * @param delay Minimum time between calls in milliseconds\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let lastCall = 0;\n  let timeoutId: NodeJS.Timeout | null = null;\n\n  return (...args: Parameters<T>) => {\n    const now = Date.now();\n    const timeSinceLastCall = now - lastCall;\n\n    if (timeSinceLastCall >= delay) {\n      lastCall = now;\n      func(...args);\n    } else {\n      // Schedule a call for the remaining time\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      \n      const remainingTime = delay - timeSinceLastCall;\n      timeoutId = setTimeout(() => {\n        lastCall = Date.now();\n        func(...args);\n        timeoutId = null;\n      }, remainingTime);\n    }\n  };\n}\n\n/**\n * Debounce function that delays executing a function until after a specified time has elapsed\n * @param func Function to debounce\n * @param delay Time to wait in milliseconds\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let timeoutId: NodeJS.Timeout | null = null;\n\n  return (...args: Parameters<T>) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    \n    timeoutId = setTimeout(() => {\n      func(...args);\n      timeoutId = null;\n    }, delay);\n  };\n}","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nexport type VoiceOption = 'alloy' | 'echo' | 'fable' | 'onyx' | 'nova' | 'shimmer';\nexport type PersonaOption = 'assistant' | 'creative' | 'analytical' | 'casual' | 'professional';\n\ninterface VoiceSettings {\n  selectedVoice: VoiceOption;\n  selectedPersona: PersonaOption;\n  isVoiceModalOpen: boolean;\n}\n\ninterface VoiceSettingsActions {\n  setVoice: (voice: VoiceOption) => void;\n  setPersona: (persona: PersonaOption) => void;\n  setVoiceModalOpen: (isOpen: boolean) => void;\n  getSettings: () => Omit<VoiceSettings, 'isVoiceModalOpen'>;\n}\n\nexport type VoiceSettingsStore = VoiceSettings & VoiceSettingsActions;\n\n/**\n * Voice Settings Store\n * \n * Persists user's voice preferences including:\n * - Voice selection (OpenAI TTS voices)\n * - Persona selection (conversation style)\n */\nexport const useVoiceSettingsStore = create<VoiceSettingsStore>()(\n  persist(\n    (set, get) => ({\n      // Default settings\n      selectedVoice: 'alloy',\n      selectedPersona: 'assistant',\n      isVoiceModalOpen: false,\n\n      setVoice: (voice: VoiceOption) => {\n        set({ selectedVoice: voice });\n      },\n\n      setPersona: (persona: PersonaOption) => {\n        set({ selectedPersona: persona });\n      },\n\n      setVoiceModalOpen: (isOpen: boolean) => {\n        set({ isVoiceModalOpen: isOpen });\n      },\n\n      getSettings: () => {\n        const state = get();\n        return {\n          selectedVoice: state.selectedVoice,\n          selectedPersona: state.selectedPersona,\n        };\n      },\n    }),\n    {\n      name: 'customgpt-voice-settings',\n      // Persist all voice settings except modal state\n      partialize: (state) => ({\n        selectedVoice: state.selectedVoice,\n        selectedPersona: state.selectedPersona,\n        // Don't persist isVoiceModalOpen - always start as false\n      }),\n    }\n  )\n);\n\n// Export helper to get persona system prompts\nexport const getPersonaSystemPrompt = (persona: PersonaOption): string => {\n  const prompts: Record<PersonaOption, string> = {\n    assistant: 'You are a helpful assistant with a voice interface. Keep your responses concise and informative, limited to 1-2 sentences since the user is interacting through voice.',\n    creative: 'You are a creative and imaginative assistant with a voice interface. Be playful and artistic in your responses while keeping them brief (1-2 sentences) for voice interaction.',\n    analytical: 'You are a logical and precise assistant with a voice interface. Provide clear, data-driven responses in 1-2 concise sentences suitable for voice interaction.',\n    casual: 'You are a relaxed and conversational assistant with a voice interface. Keep responses friendly and informal, limited to 1-2 sentences for natural voice interaction.',\n    professional: 'You are a formal and business-focused assistant with a voice interface. Maintain a professional tone while keeping responses brief (1-2 sentences) for voice interaction.',\n  };\n  \n  return prompts[persona];\n};","'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Settings, Mic, User, X, ExternalLink } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { useAgentStore } from '@/store/agents';\nimport { useVoiceSettingsStore } from '@/store/voice-settings';\n\ninterface VoiceSettingsProps {\n  isOpen: boolean;\n  onClose: () => void;\n  projectId?: string;\n}\n\nexport function VoiceSettings({ isOpen, onClose, projectId }: VoiceSettingsProps) {\n  console.log('🎛️ VoiceSettings render - isOpen:', isOpen);\n  \n  // Use persisted settings from store\n  const { selectedVoice, selectedPersona, setVoice, setPersona } = useVoiceSettingsStore();\n  const router = useRouter();\n  const { currentAgent, updateSettings } = useAgentStore();\n  \n  // Local state for preview before saving\n  const [previewVoice, setPreviewVoice] = useState(selectedVoice);\n  const [previewPersona, setPreviewPersona] = useState(selectedPersona);\n  const [previewModel, setPreviewModel] = useState(currentAgent?.settings?.chatbot_model || 'gpt-3.5-turbo');\n  \n  // Reset preview to saved values when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setPreviewVoice(selectedVoice);\n      setPreviewPersona(selectedPersona);\n      setPreviewModel(currentAgent?.settings?.chatbot_model || 'gpt-3.5-turbo');\n    }\n  }, [isOpen, selectedVoice, selectedPersona, currentAgent]);\n\n  const voices = [\n    { id: 'alloy', name: 'Alloy', desc: 'Neutral' },\n    { id: 'echo', name: 'Echo', desc: 'Clear' },\n    { id: 'fable', name: 'Fable', desc: 'Warm' },\n    { id: 'onyx', name: 'Onyx', desc: 'Deep' },\n    { id: 'nova', name: 'Nova', desc: 'Bright' },\n    { id: 'shimmer', name: 'Shimmer', desc: 'Smooth' }\n  ];\n\n  const personas = [\n    { id: 'assistant', name: 'Assistant', desc: 'Helpful' },\n    { id: 'creative', name: 'Creative', desc: 'Artistic' },\n    { id: 'analytical', name: 'Analytical', desc: 'Logical' },\n    { id: 'casual', name: 'Casual', desc: 'Relaxed' },\n    { id: 'professional', name: 'Professional', desc: 'Formal' }\n  ];\n  \n  const handleOpenProjectSettings = () => {\n    if (projectId) {\n      onClose();\n      router.push(`/projects?id=${projectId}`);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-[10001] bg-black/50 backdrop-blur-sm flex items-center justify-center p-4\">\n      <div className=\"bg-gray-900 rounded-2xl border border-gray-700 w-full max-w-2xl max-h-[70vh] flex flex-col\">\n        {/* Header */}\n        <div className=\"p-4 border-b border-gray-700 flex items-center justify-between flex-shrink-0\">\n          <div className=\"flex items-center gap-3\">\n            <Settings className=\"w-5 h-5 text-white\" />\n            <h2 className=\"text-lg font-semibold text-white\">Voice Settings</h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"w-8 h-8 rounded-full bg-gray-700 hover:bg-gray-600 flex items-center justify-center transition-colors\"\n          >\n            <X className=\"w-4 h-4 text-white\" />\n          </button>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 overflow-y-auto p-6 space-y-6\">\n          {/* Settings Grid */}\n          <div className=\"grid grid-cols-1 gap-6\">\n            {/* Voice Selection */}\n            <div>\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Mic className=\"w-4 h-4 text-white\" />\n                <h3 className=\"text-sm font-semibold text-white uppercase tracking-wider\">Voice</h3>\n              </div>\n              <div className=\"grid grid-cols-3 gap-2\">\n                {voices.map((voice) => (\n                  <button\n                    key={voice.id}\n                    onClick={() => setPreviewVoice(voice.id as any)}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewVoice === voice.id\n                        ? 'border-blue-500 bg-blue-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">{voice.name}</div>\n                    <div className=\"text-xs text-gray-400\">{voice.desc}</div>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Persona Selection */}\n            <div>\n              <div className=\"flex items-center gap-2 mb-3\">\n                <User className=\"w-4 h-4 text-white\" />\n                <h3 className=\"text-sm font-semibold text-white uppercase tracking-wider\">Persona</h3>\n              </div>\n              <div className=\"grid grid-cols-3 gap-2\">\n                {personas.map((persona) => (\n                  <button\n                    key={persona.id}\n                    onClick={() => setPreviewPersona(persona.id as any)}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewPersona === persona.id\n                        ? 'border-purple-500 bg-purple-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">{persona.name}</div>\n                    <div className=\"text-xs text-gray-400\">{persona.desc}</div>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Model Selection */}\n            {projectId && currentAgent && (\n              <div>\n                <div className=\"flex items-center gap-2 mb-3\">\n                  <Settings className=\"w-4 h-4 text-white\" />\n                  <h3 className=\"text-sm font-semibold text-white uppercase tracking-wider\">Model</h3>\n                </div>\n                <div className=\"grid grid-cols-3 gap-2\">\n                  <button\n                    onClick={() => setPreviewModel('gpt-3.5-turbo')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'gpt-3.5-turbo'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">GPT-3.5</div>\n                    <div className=\"text-xs text-gray-400\">Fast</div>\n                  </button>\n                  <button\n                    onClick={() => setPreviewModel('gpt-4')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'gpt-4'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">GPT-4</div>\n                    <div className=\"text-xs text-gray-400\">Powerful</div>\n                  </button>\n                  <button\n                    onClick={() => setPreviewModel('gpt-4-o')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'gpt-4-o'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">GPT-4o</div>\n                    <div className=\"text-xs text-gray-400\">Optimized</div>\n                  </button>\n                  <button\n                    onClick={() => setPreviewModel('claude-3-opus')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'claude-3-opus'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">Claude 3 Opus</div>\n                    <div className=\"text-xs text-gray-400\">Powerful</div>\n                  </button>\n                  <button\n                    onClick={() => setPreviewModel('claude-3-sonnet')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'claude-3-sonnet'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">Claude 3 Sonnet</div>\n                    <div className=\"text-xs text-gray-400\">Balanced</div>\n                  </button>\n                  <button\n                    onClick={() => setPreviewModel('claude-3-haiku')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'claude-3-haiku'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">Claude 3 Haiku</div>\n                    <div className=\"text-xs text-gray-400\">Fast</div>\n                  </button>\n                </div>\n                <p className=\"text-xs text-gray-400 mt-2\">\n                  Recommended for voice: Mini models provide faster responses\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"p-4 border-t border-gray-700 flex justify-end gap-3 flex-shrink-0\">\n          <button\n            onClick={() => {\n              setPreviewVoice(selectedVoice);\n              setPreviewPersona(selectedPersona);\n              setPreviewModel(currentAgent?.settings?.chatbot_model || 'gpt-3.5-turbo');\n              onClose();\n            }}\n            className=\"px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg text-white text-sm transition-colors\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={async () => {\n              // Save voice and persona settings\n              setVoice(previewVoice as any);\n              setPersona(previewPersona as any);\n              \n              // Update agent's model setting if it changed\n              if (currentAgent && previewModel !== currentAgent.settings?.chatbot_model) {\n                try {\n                  await updateSettings(currentAgent.id, {\n                    chatbot_model: previewModel\n                  });\n                } catch (error) {\n                  console.error('Failed to update model setting:', error);\n                  // Continue with closing the modal even if model update fails\n                }\n              }\n              \n              onClose();\n            }}\n            className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-white text-sm transition-colors\"\n          >\n            Save Settings\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","/**\n * Streaming TTS Manager\n * \n * Handles chunked text-to-speech for faster voice responses\n */\n\nexport class StreamingTTSManager {\n  private audioQueue: AudioBuffer[] = [];\n  private pendingChunks: Map<number, AudioBuffer> = new Map(); // Store chunks by ID\n  private nextExpectedChunkId = 0; // Track which chunk should play next\n  private isPlaying = false;\n  private audioContext: AudioContext | null = null;\n  private currentSource: AudioBufferSourceNode | null = null;\n  private onPlaybackComplete?: () => void;\n  private onError?: (error: string) => void;\n\n  constructor() {\n    this.initAudioContext();\n  }\n\n  private async initAudioContext() {\n    try {\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      \n      // Resume context if suspended (required for mobile)\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume();\n      }\n    } catch (error) {\n      console.error('Failed to initialize AudioContext:', error);\n    }\n  }\n\n  /**\n   * Add a text chunk to be converted to speech and queued\n   */\n  async addTextChunk(text: string, voice: string = 'alloy') {\n    try {\n      // Convert text to speech\n      const audioBuffer = await this.textToSpeech(text, voice);\n      \n      // Add to queue\n      this.audioQueue.push(audioBuffer);\n      \n      // Start playing if not already playing\n      if (!this.isPlaying) {\n        this.playNextChunk();\n      }\n    } catch (error) {\n      console.error('Failed to add text chunk:', error);\n      this.onError?.('Failed to generate speech for chunk');\n    }\n  }\n\n  /**\n   * Add a pre-generated audio buffer directly to the queue\n   * Used for streaming responses that provide ready audio chunks\n   */\n  async addAudioBuffer(audioBuffer: AudioBuffer) {\n    try {\n      // Add to queue - for backward compatibility without chunk ID\n      this.audioQueue.push(audioBuffer);\n      \n      // Start playing if not already playing\n      if (!this.isPlaying) {\n        this.playNextChunk();\n      }\n    } catch (error) {\n      console.error('Failed to add audio buffer:', error);\n      this.onError?.('Failed to queue audio buffer');\n    }\n  }\n\n  /**\n   * Add an audio buffer with a specific chunk ID to ensure ordered playback\n   */\n  async addAudioBufferWithId(audioBuffer: AudioBuffer, chunkId: number) {\n    try {\n      console.log(`[StreamingTTS] Adding chunk ${chunkId}, expecting ${this.nextExpectedChunkId}`);\n      \n      // Store the chunk\n      this.pendingChunks.set(chunkId, audioBuffer);\n      \n      // Check if we can queue any pending chunks in order\n      while (this.pendingChunks.has(this.nextExpectedChunkId)) {\n        const chunk = this.pendingChunks.get(this.nextExpectedChunkId)!;\n        this.pendingChunks.delete(this.nextExpectedChunkId);\n        \n        console.log(`[StreamingTTS] Queuing chunk ${this.nextExpectedChunkId} in order`);\n        this.audioQueue.push(chunk);\n        this.nextExpectedChunkId++;\n        \n        // Start playing if not already playing\n        if (!this.isPlaying) {\n          this.playNextChunk();\n        }\n      }\n      \n      console.log(`[StreamingTTS] Pending chunks: ${Array.from(this.pendingChunks.keys()).sort().join(', ')}`);\n    } catch (error) {\n      console.error('Failed to add audio buffer with ID:', error);\n      this.onError?.('Failed to queue audio buffer');\n    }\n  }\n\n  /**\n   * Convert text to speech using OpenAI TTS API\n   */\n  private async textToSpeech(text: string, voice: string): Promise<AudioBuffer> {\n    if (!text.trim()) {\n      throw new Error('Empty text provided');\n    }\n\n    // Call TTS API\n    const response = await fetch('/api/proxy/tts/stream', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'tts-1', // Use faster model for streaming\n        input: text,\n        voice: voice,\n        response_format: 'mp3'\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`TTS API error: ${response.status}`);\n    }\n\n    const audioBlob = await response.blob();\n    const arrayBuffer = await audioBlob.arrayBuffer();\n\n    if (!this.audioContext) {\n      throw new Error('AudioContext not initialized');\n    }\n\n    return await this.audioContext.decodeAudioData(arrayBuffer);\n  }\n\n  /**\n   * Play the next audio chunk in the queue\n   */\n  private async playNextChunk() {\n    if (this.audioQueue.length === 0) {\n      this.isPlaying = false;\n      this.onPlaybackComplete?.();\n      return;\n    }\n\n    if (!this.audioContext) {\n      console.error('AudioContext not available');\n      return;\n    }\n\n    this.isPlaying = true;\n    const audioBuffer = this.audioQueue.shift();\n\n    if (!audioBuffer) return;\n\n    try {\n      // Create and configure audio source\n      this.currentSource = this.audioContext.createBufferSource();\n      this.currentSource.buffer = audioBuffer;\n      this.currentSource.connect(this.audioContext.destination);\n\n      // Set up completion handler\n      this.currentSource.onended = () => {\n        this.currentSource = null;\n        // Add a small delay between chunks for smoother playback\n        setTimeout(() => {\n          this.playNextChunk(); // Play next chunk\n        }, 50);\n      };\n\n      // Start playback\n      this.currentSource.start(0);\n      \n    } catch (error) {\n      console.error('Failed to play audio chunk:', error);\n      // Try to continue with the next chunk\n      setTimeout(() => {\n        this.playNextChunk();\n      }, 100);\n    }\n  }\n\n  /**\n   * Stop all playback and clear queue\n   */\n  stopPlayback() {\n    // Stop current audio\n    if (this.currentSource) {\n      try {\n        this.currentSource.stop();\n      } catch (error) {\n        // Ignore errors from stopping already stopped sources\n      }\n      this.currentSource = null;\n    }\n\n    // Clear queue and pending chunks\n    this.audioQueue = [];\n    this.pendingChunks.clear();\n    this.nextExpectedChunkId = 0;\n    this.isPlaying = false;\n  }\n\n  /**\n   * Reset the chunk ID counter for a new streaming session\n   */\n  resetChunkCounter() {\n    this.nextExpectedChunkId = 0;\n    this.pendingChunks.clear();\n    console.log('[StreamingTTS] Chunk counter reset for new session');\n  }\n\n  /**\n   * Check if audio is currently playing\n   */\n  isCurrentlyPlaying(): boolean {\n    return this.isPlaying;\n  }\n\n  /**\n   * Get number of chunks in queue\n   */\n  getQueueLength(): number {\n    return this.audioQueue.length;\n  }\n\n  /**\n   * Set callback for when all queued audio finishes playing\n   */\n  onPlaybackCompleted(callback: () => void) {\n    this.onPlaybackComplete = callback;\n  }\n\n  /**\n   * Set callback for errors\n   */\n  onStreamingError(callback: (error: string) => void) {\n    this.onError = callback;\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy() {\n    this.stopPlayback();\n    this.pendingChunks.clear();\n    this.nextExpectedChunkId = 0;\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n  }\n}\n\n/**\n * Text chunking utilities for optimal TTS streaming\n */\nexport class TextChunker {\n  /**\n   * Split text into optimal chunks for TTS\n   * Aims for natural speech breaks while keeping chunks reasonably sized\n   */\n  static chunkText(text: string, maxChunkSize: number = 200): string[] {\n    const chunks: string[] = [];\n    \n    // Split by sentences first\n    const sentences = text.split(/[.!?]+/).filter(s => s.trim());\n    \n    let currentChunk = '';\n    \n    for (const sentence of sentences) {\n      const trimmedSentence = sentence.trim();\n      if (!trimmedSentence) continue;\n      \n      // If adding this sentence would exceed max size and we have content, finalize chunk\n      if (currentChunk && (currentChunk.length + trimmedSentence.length + 2) > maxChunkSize) {\n        chunks.push(currentChunk.trim() + '.');\n        currentChunk = trimmedSentence;\n      } else {\n        currentChunk += (currentChunk ? '. ' : '') + trimmedSentence;\n      }\n    }\n    \n    // Add final chunk\n    if (currentChunk.trim()) {\n      chunks.push(currentChunk.trim() + (currentChunk.endsWith('.') ? '' : '.'));\n    }\n    \n    return chunks;\n  }\n\n  /**\n   * Smart chunking that considers punctuation and natural breaks\n   */\n  static smartChunk(text: string, targetChunkSize: number = 150): string[] {\n    const chunks: string[] = [];\n    \n    // Priority order for splitting: sentences, clauses, phrases, words\n    const breakPoints = [\n      /[.!?]+\\s+/g,  // Sentence endings\n      /[,;:]\\s+/g,   // Clause breaks\n      /\\s+(?=and|but|or|so|yet|for|nor)\\s+/g, // Conjunctions\n      /\\s+/g         // Word breaks (fallback)\n    ];\n    \n    let remainingText = text;\n    \n    while (remainingText.length > targetChunkSize) {\n      let bestSplit = -1;\n      \n      // Try each break point type in order of preference\n      for (const breakRegex of breakPoints) {\n        const matches = Array.from(remainingText.matchAll(breakRegex));\n        \n        // Find the best split point (closest to target size without going over)\n        for (const match of matches) {\n          const splitIndex = match.index! + match[0].length;\n          if (splitIndex <= targetChunkSize && splitIndex > bestSplit) {\n            bestSplit = splitIndex;\n          }\n        }\n        \n        if (bestSplit > 0) break; // Found a good split\n      }\n      \n      // If no good split found, split at target size\n      if (bestSplit <= 0) {\n        bestSplit = targetChunkSize;\n      }\n      \n      chunks.push(remainingText.slice(0, bestSplit).trim());\n      remainingText = remainingText.slice(bestSplit).trim();\n    }\n    \n    // Add final chunk\n    if (remainingText) {\n      chunks.push(remainingText);\n    }\n    \n    return chunks.filter(chunk => chunk.length > 0);\n  }\n}","import { utils } from \"@ricky0123/vad-react\";\nimport type { VoiceOption, PersonaOption } from '@/store/voice-settings';\nimport { StreamingTTSManager } from './streaming-tts';\n\nexport interface VoiceCallbacks {\n  onUserSpeaking?: () => void;\n  onProcessing?: () => void;\n  onAiSpeaking?: () => void;\n  onReset?: () => void;\n  onError?: (error: string) => void;\n  onDebug?: (message: string, data?: any) => void;\n  // New callbacks for message store integration\n  onTranscriptReceived?: (transcript: string) => void;\n  onResponseReceived?: (response: string) => void;\n  // Streaming callbacks\n  onStreamingTextChunk?: (textChunk: string) => void;\n  onStreamingAudioReady?: (audioUrl: string, chunkId: string) => void;\n  onStreamingComplete?: (fullResponse: string, transcript: string) => void;\n}\n\nclass SpeechManager {\n  private source: AudioBufferSourceNode | null = null;\n  private sourceIsStarted = false;\n  private conversationThusFar: any[] = [];\n  private callbacks: VoiceCallbacks = {};\n  private projectId: string | null = null;\n  private sessionId: string | null = null;\n  private voiceSettings: { voice: VoiceOption; persona: PersonaOption } | null = null;\n  private streamingTTS: StreamingTTSManager | null = null;\n  private chatbotModel: string = 'gpt-3.5-turbo'; // Default to fast model for voice if not specified by agent\n  // Streaming is always enabled for optimal performance\n\n  setCallbacks(callbacks: VoiceCallbacks) {\n    this.callbacks = callbacks;\n    this.debug(\"Callbacks set\", { hasCallbacks: Object.keys(callbacks) });\n  }\n\n  setProjectId(projectId: string) {\n    this.projectId = projectId;\n    this.debug(\"Project ID set\", { projectId });\n  }\n\n  setSessionId(sessionId: string | null) {\n    this.sessionId = sessionId;\n    this.debug(\"Session ID set\", { sessionId });\n  }\n\n  setVoiceSettings(voice: VoiceOption, persona: PersonaOption) {\n    this.voiceSettings = { voice, persona };\n    this.debug(\"Voice settings set\", { voice, persona });\n  }\n\n  setChatbotModel(model: string) {\n    this.chatbotModel = model;\n    this.debug(\"Chatbot model set\", { model });\n  }\n\n  private debug(message: string, data?: any) {\n    // Production: Debug logging disabled\n    // Uncomment for development debugging:\n    // const timestamp = new Date().toISOString();\n    // console.log(`🎯 [SPEECH-MANAGER ${timestamp}] ${message}`, data || '');\n    this.callbacks.onDebug?.(message, data);\n  }\n\n  private error(message: string, error?: any) {\n    const timestamp = new Date().toISOString();\n    console.error(`❌ [SPEECH-MANAGER ${timestamp}] ${message}`, error || '');\n    this.callbacks.onError?.(message);\n  }\n\n  onSpeechStart = () => {\n    this.debug(\"Speech started - user is speaking\");\n    this.callbacks.onUserSpeaking?.();\n    this.stopSourceIfNeeded();\n  };\n\n  onSpeechEnd = async (audio: Float32Array) => {\n    this.debug(\"Speech ended\", { \n      audioLength: audio.length,\n      audioDuration: `${audio.length / 16000}s` // Assuming 16kHz sample rate\n    });\n    await this.processAudio(audio);\n  };\n\n  onMisfire = () => {\n    this.debug(\"VAD misfire - noise detected but not speech\");\n    this.callbacks.onReset?.();\n  };\n\n  private stopSourceIfNeeded = () => {\n    if (this.source && this.sourceIsStarted) {\n      this.debug(\"Stopping current audio playback\");\n      this.source.stop(0);\n      this.sourceIsStarted = false;\n    }\n  };\n\n  // Public method to stop audio playback\n  public stopAudio = () => {\n    this.stopSourceIfNeeded();\n    \n    // Also stop streaming TTS if active\n    if (this.streamingTTS) {\n      this.streamingTTS.stopPlayback();\n      this.debug(\"🛑 Streaming TTS stopped\");\n    }\n    \n    this.callbacks.onReset?.();\n    this.debug(\"Audio stopped by user\");\n  };\n\n  // Public method to process manually recorded audio\n  public processManualAudio = async (audioBlob: Blob) => {\n    this.debug(\"Processing manual audio\", { \n      size: `${(audioBlob.size / 1024).toFixed(2)}KB`,\n      type: audioBlob.type\n    });\n    this.callbacks.onProcessing?.();\n    \n    try {\n      await this.validate(audioBlob);\n      await this.sendData(audioBlob);\n    } catch (error) {\n      this.error('Error processing manual audio', error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private processAudio = async (audio: Float32Array) => {\n    this.debug(\"Processing audio started\");\n    this.callbacks.onProcessing?.();\n    \n    try {\n      const blob = this.createAudioBlob(audio);\n      await this.validate(blob);\n      await this.sendData(blob);\n    } catch (error) {\n      this.error('Error processing audio', error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private createAudioBlob = (audio: Float32Array): Blob => {\n    const wavBuffer = utils.encodeWAV(audio);\n    const blob = new Blob([wavBuffer], { type: 'audio/wav' });\n    this.debug(\"Created audio blob\", { \n      size: `${(blob.size / 1024).toFixed(2)}KB`,\n      type: blob.type,\n      samples: audio.length,\n      duration: `${audio.length / 16000}s` // Assuming 16kHz from VAD\n    });\n    return blob;\n  };\n\n  private sendData = async (blob: Blob) => {\n    // Always use streaming mode\n    await this.sendStreamingData(blob);\n  };\n\n  private sendStreamingData = async (blob: Blob) => {\n    this.debug(\"🚀 Sending audio data to streaming API\");\n    \n    if (!this.projectId) {\n      this.error('No project ID set - cannot send audio');\n      this.callbacks.onReset?.();\n      return;\n    }\n\n    // Initialize streaming TTS manager\n    if (!this.streamingTTS) {\n      this.streamingTTS = new StreamingTTSManager();\n      this.streamingTTS.onPlaybackCompleted(() => {\n        this.debug(\"🔄 Streaming playback completed\");\n        this.callbacks.onReset?.();\n      });\n      this.streamingTTS.onStreamingError((error) => {\n        this.error('🎵 Streaming TTS error', error);\n      });\n    } else {\n      // Reset chunk counter for new streaming session\n      this.streamingTTS.resetChunkCounter();\n    }\n\n    const formData = new FormData();\n    formData.append(\"audio\", blob, \"audio.wav\");\n    formData.append(\"project_id\", this.projectId);\n    if (this.sessionId) {\n      formData.append(\"session_id\", this.sessionId);\n    }\n    \n    // Add voice settings to the request\n    if (this.voiceSettings) {\n      formData.append(\"voice\", this.voiceSettings.voice);\n      formData.append(\"persona\", this.voiceSettings.persona);\n    }\n    \n    // Note: chatbot_model is not sent to voice API\n    // The agent's configured model will be used automatically\n\n    this.debug(\"🔄 Starting streaming voice request\", {\n      projectId: this.projectId,\n      sessionId: this.sessionId,\n      conversationLength: this.conversationThusFar.length,\n      audioSize: `${(blob.size / 1024).toFixed(2)}KB`,\n      voice: this.voiceSettings?.voice,\n      persona: this.voiceSettings?.persona,\n      lastMessages: this.conversationThusFar.slice(-2).map(m => ({ role: m.role, preview: m.content.slice(0, 50) }))\n    });\n\n    try {\n      // Check for demo mode OpenAI key\n      const headers: Record<string, string> = {\n        'conversation': this.base64Encode(JSON.stringify(this.conversationThusFar))\n      };\n      \n      // Add deployment mode header\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n      headers['X-Deployment-Mode'] = deploymentMode;\n      \n      console.log('🔍 [SPEECH-MANAGER] Deployment mode from localStorage:', deploymentMode);\n      console.log('🔍 [SPEECH-MANAGER] localStorage value:', localStorage.getItem('customgpt.deploymentMode'));\n      console.log('🔍 [SPEECH-MANAGER] Sending headers:', headers);\n      \n      // In demo mode, add keys from window object if available\n      if (deploymentMode === 'demo') {\n        // Add OpenAI key for TTS/STT\n        if ((window as any).__demoOpenAIKey) {\n          headers['X-OpenAI-API-Key'] = (window as any).__demoOpenAIKey;\n        }\n        // Add CustomGPT API key for chat completions\n        if ((window as any).__demoCustomGPTKey) {\n          headers['X-CustomGPT-API-Key'] = (window as any).__demoCustomGPTKey;\n        }\n      }\n      \n      const response = await fetch(\"/api/proxy/voice/streaming\", {\n        method: \"POST\",\n        body: formData,\n        headers\n      });\n\n      this.debug(\"🎯 Streaming response received\", {\n        status: response.status,\n        ok: response.ok,\n        contentType: response.headers.get('content-type')\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch {\n          errorData = { error: errorText };\n        }\n        \n        // Check if it's specifically an OpenAI API key error\n        if (response.status === 503 && errorData.userMessage) {\n          throw new Error(errorData.userMessage);\n        }\n        \n        throw new Error(`Streaming API Error (${response.status}): ${errorData.error || errorText}`);\n      }\n\n      // Process streaming response\n      await this.processStreamingResponse(response);\n    } catch (error) {\n      this.error(\"❌ Failed to process streaming voice\", error);\n      this.handleError(error);\n    }\n  };\n\n  private processStreamingResponse = async (response: Response) => {\n    if (!response.body) {\n      throw new Error(\"No response body for streaming\");\n    }\n\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    \n    let fullResponse = '';\n    let transcript = '';\n    let currentStreamingActive = false;\n\n    this.debug(\"🔄 Processing streaming response chunks\");\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          this.debug(\"✅ Streaming response complete\");\n          break;\n        }\n\n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data.trim() === '') continue;\n\n            try {\n              const parsed = JSON.parse(data);\n              \n              if (parsed.type === 'text') {\n                // Stream text chunk\n                fullResponse += parsed.text;\n                \n                // Trigger UI update for text streaming\n                this.callbacks.onStreamingTextChunk?.(parsed.text);\n                \n                this.debug(`📝 Text chunk received: \"${parsed.text}\"`);\n                \n              } else if (parsed.type === 'audio' || parsed.type === 'audio_ref') {\n                // Audio chunk ready - queue it for playback\n                if (parsed.audioUrl || parsed.audioId) {\n                  if (!currentStreamingActive) {\n                    this.callbacks.onAiSpeaking?.();\n                    currentStreamingActive = true;\n                  }\n                  \n                  // Handle both legacy data URL and new audio reference\n                  if (parsed.audioUrl) {\n                    // Legacy: Convert data URL to audio and queue it\n                    await this.queueAudioChunk(parsed.audioUrl, parsed.chunkId);\n                  } else if (parsed.audioId) {\n                    // New: Fetch audio chunk by ID\n                    await this.queueAudioChunkById(parsed.audioId, parsed.chunkId);\n                  }\n                  \n                  this.debug(`🎵 Audio chunk queued: ${parsed.chunkId} (${parsed.text?.slice(0, 50)}...)`);\n                }\n                \n              } else if (parsed.type === 'complete') {\n                // Stream complete\n                fullResponse = parsed.fullResponse || fullResponse;\n                transcript = parsed.transcript || transcript;\n                \n                this.debug(\"✅ Stream complete\", { \n                  responseLength: fullResponse.length,\n                  transcript \n                });\n                \n                console.log(`📝 [SPEECH-MANAGER] Complete fullResponse (${fullResponse.length} chars):`, fullResponse);\n                console.log(`📝 [SPEECH-MANAGER] Includes \"individuals\":`, fullResponse.includes('individuals'));\n                console.log(`📝 [SPEECH-MANAGER] Includes \"like\":`, fullResponse.includes('like'));\n                console.log(`📝 [SPEECH-MANAGER] Includes \"CustomGPT\":`, fullResponse.includes('CustomGPT'));\n                \n                // Trigger callbacks for UI updates\n                // Don't update conversationThusFar here - let the message store be the single source of truth\n                if (transcript) {\n                  this.callbacks.onTranscriptReceived?.(transcript);\n                }\n                \n                if (fullResponse) {\n                  this.callbacks.onResponseReceived?.(fullResponse);\n                }\n                \n                this.callbacks.onStreamingComplete?.(fullResponse, transcript);\n                \n              } else if (parsed.type === 'error') {\n                // Stream error\n                this.error(`🚨 Stream error: ${parsed.error}`);\n                this.callbacks.onReset?.();\n              }\n            } catch (parseError) {\n              this.debug(`⚠️ Failed to parse chunk: ${data}`, parseError);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      this.error(\"❌ Error processing streaming response\", error);\n      this.callbacks.onReset?.();\n    } finally {\n      reader.releaseLock();\n    }\n  };\n\n  private queueAudioChunk = async (audioDataUrl: string, chunkId: string) => {\n    if (!this.streamingTTS) {\n      this.error(\"❌ StreamingTTS not initialized\");\n      return;\n    }\n\n    try {\n      // Extract numeric chunk ID from the string (e.g., \"chunk_0\" -> 0)\n      const numericChunkId = parseInt(chunkId.replace('chunk_', ''));\n      \n      // Convert data URL to blob\n      const response = await fetch(audioDataUrl);\n      const audioBlob = await response.blob();\n      \n      // Convert blob to ArrayBuffer for Web Audio API\n      const arrayBuffer = await audioBlob.arrayBuffer();\n      \n      // Create audio context and decode\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      // Queue the decoded audio buffer with ID for ordered playback\n      await this.streamingTTS.addAudioBufferWithId(audioBuffer, numericChunkId);\n      \n      this.debug(`🎵 Audio chunk queued with ID ${numericChunkId}: ${chunkId}`);\n    } catch (error) {\n      this.error(`❌ Failed to queue audio chunk ${chunkId}`, error);\n    }\n  };\n\n  // Legacy sendLegacyData method removed - streaming is always used\n  \n  private queueAudioChunkById = async (audioId: string, chunkId: string) => {\n    if (!this.streamingTTS) {\n      this.error(\"❌ StreamingTTS not initialized\");\n      return;\n    }\n\n    try {\n      // Extract numeric chunk ID from the string (e.g., \"chunk_0\" -> 0)\n      const numericChunkId = parseInt(chunkId.replace('chunk_', ''));\n      \n      // Fetch audio chunk by ID from the streaming endpoint\n      const response = await fetch(`/api/proxy/voice/streaming?id=${audioId}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          // Audio chunk not found - this can happen after server restart\n          this.debug(`⚠️ Audio chunk not found (server may have restarted): ${chunkId}`);\n          return; // Skip this chunk gracefully\n        }\n        throw new Error(`Failed to fetch audio chunk: ${response.status}`);\n      }\n      \n      const audioBlob = await response.blob();\n      \n      // Convert blob to ArrayBuffer for Web Audio API\n      const arrayBuffer = await audioBlob.arrayBuffer();\n      \n      // Create audio context and decode\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      // Queue the decoded audio buffer with ID for ordered playback\n      await this.streamingTTS.addAudioBufferWithId(audioBuffer, numericChunkId);\n      \n      this.debug(`🎵 Audio chunk fetched and queued with ID ${numericChunkId}: ${chunkId}`);\n    } catch (error) {\n      this.error(`❌ Failed to fetch/queue audio chunk ${chunkId}`, error);\n    }\n  };\n\n  // Legacy sendLegacyData method removed - streaming is always used\n\n  private base64Encode(str: string): string {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(str);\n    return window.btoa(String.fromCharCode(...new Uint8Array(data)));\n  }\n\n  private base64Decode(base64: string): string {\n    const binaryStr = window.atob(base64);\n    const bytes = new Uint8Array([...binaryStr].map((char) => char.charCodeAt(0)));\n    return new TextDecoder().decode(bytes);\n  }\n\n  private handleSuccess = async (blob: Blob) => {\n    this.debug(\"Playing AI response audio\");\n    \n    try {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      this.stopSourceIfNeeded();\n\n      const arrayBuffer = await blob.arrayBuffer();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      this.debug(\"Audio decoded\", {\n        duration: `${audioBuffer.duration.toFixed(2)}s`,\n        sampleRate: audioBuffer.sampleRate,\n        numberOfChannels: audioBuffer.numberOfChannels\n      });\n\n      this.source = audioContext.createBufferSource();\n      this.source.buffer = audioBuffer;\n      this.source.connect(audioContext.destination);\n      this.source.start(0);\n      this.sourceIsStarted = true;\n      \n      this.source.onended = () => {\n        this.debug(\"Audio playback ended\");\n        this.callbacks.onReset?.();\n      };\n\n      this.callbacks.onAiSpeaking?.();\n    } catch (error) {\n      this.error(\"Failed to play audio\", error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private handleError = (error: any) => {\n    this.error(`Error encountered: ${error.message}`, error);\n    this.callbacks.onReset?.();\n  };\n\n  private validate = async (data: Blob) => {\n    this.debug(\"Validating audio duration\");\n    \n    try {\n      // Clone the blob to avoid consuming the arrayBuffer\n      const clonedBlob = new Blob([data], { type: data.type });\n      const arrayBuffer = await clonedBlob.arrayBuffer();\n      const audioContext = new AudioContext();\n      const decodedData = await audioContext.decodeAudioData(arrayBuffer);\n      const duration = decodedData.duration;\n      const minDuration = 0.4;\n\n      this.debug(\"Audio validation\", {\n        duration: `${duration.toFixed(2)}s`,\n        minDuration: `${minDuration}s`,\n        valid: duration >= minDuration\n      });\n\n      if (duration < minDuration) {\n        throw new Error(`Duration is ${duration}s, which is less than minimum of ${minDuration}s`);\n      }\n    } catch (error) {\n      this.error(\"Audio validation failed\", error);\n      throw error;\n    }\n  };\n\n  clearConversation() {\n    this.conversationThusFar = [];\n  }\n\n  getConversationThusFar() {\n    return this.conversationThusFar;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  // Set the conversation history from existing messages\n  setConversationHistory(messages: any[]) {\n    // Clean and deduplicate messages before setting\n    const cleanedMessages = messages\n      .filter((msg, index, self) => \n        // Remove duplicates based on content and role\n        index === self.findIndex(m => m.content === msg.content && m.role === msg.role)\n      )\n      .map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n    \n    this.conversationThusFar = cleanedMessages;\n    this.debug(\"Conversation history loaded\", {\n      messageCount: this.conversationThusFar.length,\n      originalCount: messages.length\n    });\n  }\n\n\n  // Public method to clean up streaming resources\n  public destroy() {\n    this.stopAudio();\n    if (this.streamingTTS) {\n      this.streamingTTS.destroy();\n      this.streamingTTS = null;\n    }\n    this.debug(\"🧹 SpeechManager destroyed\");\n  }\n}\n\nexport const speechManager = new SpeechManager();","/**\n * Utility functions for voice mode\n */\n\n/**\n * Simple markdown parser for voice responses\n * Removes markdown formatting for cleaner display in voice UI\n */\nexport function parseMarkdownForVoice(text: string): string {\n  return text\n    // Remove bold markers\n    .replace(/\\*\\*(.*?)\\*\\*/g, '$1')\n    // Remove italic markers\n    .replace(/\\*(.*?)\\*/g, '$1')\n    // Remove code blocks\n    .replace(/```[\\s\\S]*?```/g, '')\n    // Remove inline code\n    .replace(/`([^`]+)`/g, '$1')\n    // Remove headers\n    .replace(/#{1,6}\\s+/g, '')\n    // Remove links but keep text\n    .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1')\n    // Remove images\n    .replace(/!\\[([^\\]]*)\\]\\([^)]+\\)/g, '')\n    // Remove horizontal rules\n    .replace(/^-{3,}$/gm, '')\n    // Remove bullet points\n    .replace(/^\\s*[-*+]\\s+/gm, '')\n    // Remove numbered lists\n    .replace(/^\\s*\\d+\\.\\s+/gm, '')\n    // Clean up extra whitespace\n    .replace(/\\n{3,}/g, '\\n\\n')\n    .trim();\n}\n\n/**\n * Split response into chunks for streaming display\n */\nexport function* streamTextChunks(text: string, chunkSize: number = 50): Generator<string> {\n  const words = text.split(' ');\n  let currentChunk = '';\n  \n  for (const word of words) {\n    if (currentChunk.length + word.length + 1 > chunkSize && currentChunk.length > 0) {\n      yield currentChunk.trim();\n      currentChunk = word;\n    } else {\n      currentChunk += (currentChunk ? ' ' : '') + word;\n    }\n  }\n  \n  if (currentChunk) {\n    yield currentChunk.trim();\n  }\n}","/**\n * Simple encryption utilities for demo mode API key storage\n * \n * This provides basic obfuscation to prevent casual observation\n * of API keys in browser storage. This is NOT cryptographically\n * secure and should only be used for demo/playground purposes.\n */\n\n/**\n * Generate a random key for encryption\n */\nexport function generateKey(): string {\n  const array = new Uint8Array(32);\n  crypto.getRandomValues(array);\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\n/**\n * Simple XOR encryption (obfuscation)\n * This is NOT secure encryption - it's just to prevent\n * API keys from being stored in plain text\n */\nexport function encrypt(text: string, key: string): string {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    result += String.fromCharCode(\n      text.charCodeAt(i) ^ key.charCodeAt(i % key.length)\n    );\n  }\n  return btoa(result); // Base64 encode\n}\n\n/**\n * Decrypt XOR encrypted text\n */\nexport function decrypt(encrypted: string, key: string): string {\n  try {\n    const text = atob(encrypted); // Base64 decode\n    let result = '';\n    for (let i = 0; i < text.length; i++) {\n      result += String.fromCharCode(\n        text.charCodeAt(i) ^ key.charCodeAt(i % key.length)\n      );\n    }\n    return result;\n  } catch {\n    return '';\n  }\n}\n\n/**\n * Validate API key format\n */\nexport function isValidApiKey(key: string): boolean {\n  // CustomGPT.ai API key format: projectId|apiKey\n  // Example: 7840|8TPfOoyBywFfUfvwuY7ZZ2s1WAFtxU7WCxunMbej\n  const trimmedKey = key.trim();\n  \n  // Check if it contains a pipe character\n  if (!trimmedKey.includes('|')) {\n    return false;\n  }\n  \n  // Split and validate both parts\n  const [projectId, apiKey] = trimmedKey.split('|');\n  \n  // Project ID should be numeric\n  if (!projectId || !/^\\d+$/.test(projectId)) {\n    return false;\n  }\n  \n  // API key should be alphanumeric (with possible special chars)\n  if (!apiKey || apiKey.length < 20) {\n    return false;\n  }\n  \n  return true;\n}","/**\n * Demo Mode Store\n * \n * Manages API key storage and authentication for demo/playground mode.\n * Uses encrypted sessionStorage for temporary key storage that survives\n * page refreshes but is cleared when the browser tab is closed.\n */\n\nimport { create } from 'zustand';\nimport { encrypt, decrypt, generateKey, isValidApiKey } from '@/lib/crypto';\n\ninterface DemoStore {\n  // Demo mode configuration\n  isDemoMode: boolean;\n  \n  // API key management\n  apiKey: string | null;\n  openAIApiKey: string | null;\n  encryptionKey: string | null;\n  \n  // UI state\n  isAuthenticated: boolean;\n  error: string | null;\n  \n  // Session management\n  sessionStartTime: number | null;\n  sessionTimeout: number; // 2 hours in milliseconds\n  \n  // Actions\n  setApiKey: (key: string) => void;\n  setOpenAIApiKey: (key: string) => void;\n  clearApiKey: () => void;\n  validateSession: () => boolean;\n  setError: (error: string | null) => void;\n  initializeFromStorage: () => void;\n  restoreSession: () => boolean;\n}\n\nconst STORAGE_KEY = 'customgpt-demo-key';\nconst OPENAI_STORAGE_KEY = 'customgpt-demo-openai-key';\nconst ENCRYPTION_KEY = 'customgpt-demo-enc';\nconst SESSION_KEY = 'customgpt-demo-session';\nconst SESSION_TIMEOUT = 2 * 60 * 60 * 1000; // 2 hours\n\nexport const useDemoStore = create<DemoStore>((set, get) => ({\n  // Check if demo mode is enabled from localStorage deployment mode\n  isDemoMode: typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') === 'demo' : false,\n  \n  apiKey: null,\n  openAIApiKey: null,\n  encryptionKey: null,\n  isAuthenticated: false,\n  error: null,\n  sessionStartTime: null,\n  sessionTimeout: SESSION_TIMEOUT,\n  \n  setApiKey: (key: string) => {\n    const trimmedKey = key.trim();\n    \n    // Validate API key format\n    if (!isValidApiKey(trimmedKey)) {\n      set({ error: 'Invalid API key format' });\n      return;\n    }\n    \n    try {\n      // Generate encryption key\n      const encKey = generateKey();\n      \n      // Encrypt and store in sessionStorage\n      const encrypted = encrypt(trimmedKey, encKey);\n      sessionStorage.setItem(STORAGE_KEY, encrypted);\n      sessionStorage.setItem(ENCRYPTION_KEY, encKey);\n      \n      // Store session info\n      const sessionInfo = {\n        startTime: Date.now(),\n        encKey: encKey\n      };\n      sessionStorage.setItem(SESSION_KEY, JSON.stringify(sessionInfo));\n      \n      // Update store state\n      set({\n        apiKey: trimmedKey,\n        encryptionKey: encKey,\n        isAuthenticated: true,\n        error: null,\n        sessionStartTime: Date.now()\n      });\n    } catch (error) {\n      set({ error: 'Failed to store API key' });\n    }\n  },\n  \n  setOpenAIApiKey: (key: string) => {\n    const trimmedKey = key.trim();\n    const state = get();\n    \n    // Only allow if already authenticated with CustomGPT key\n    if (!state.isAuthenticated) {\n      set({ error: 'Please enter CustomGPT.ai API key first' });\n      return;\n    }\n    \n    // OpenAI keys typically start with 'sk-'\n    if (trimmedKey && !trimmedKey.startsWith('sk-')) {\n      set({ error: 'Invalid OpenAI API key format' });\n      return;\n    }\n    \n    try {\n      // Use same encryption key as CustomGPT key\n      const encKey = state.encryptionKey;\n      if (!encKey) {\n        set({ error: 'Encryption key not found' });\n        return;\n      }\n      \n      if (trimmedKey) {\n        // Encrypt and store\n        const encrypted = encrypt(trimmedKey, encKey);\n        sessionStorage.setItem(OPENAI_STORAGE_KEY, encrypted);\n        set({ openAIApiKey: trimmedKey, error: null });\n      } else {\n        // Clear OpenAI key\n        sessionStorage.removeItem(OPENAI_STORAGE_KEY);\n        set({ openAIApiKey: null, error: null });\n      }\n    } catch (error) {\n      set({ error: 'Failed to store OpenAI API key' });\n    }\n  },\n  \n  clearApiKey: () => {\n    // Clear from storage\n    sessionStorage.removeItem(STORAGE_KEY);\n    sessionStorage.removeItem(OPENAI_STORAGE_KEY);\n    sessionStorage.removeItem(ENCRYPTION_KEY);\n    sessionStorage.removeItem(SESSION_KEY);\n    \n    // Clear from memory\n    set({\n      apiKey: null,\n      openAIApiKey: null,\n      encryptionKey: null,\n      isAuthenticated: false,\n      error: null,\n      sessionStartTime: null\n    });\n  },\n  \n  validateSession: () => {\n    const state = get();\n    \n    // Check if session has expired\n    if (state.sessionStartTime) {\n      const elapsed = Date.now() - state.sessionStartTime;\n      if (elapsed > state.sessionTimeout) {\n        state.clearApiKey();\n        state.setError('Session expired. Please enter your API key again.');\n        return false;\n      }\n    }\n    \n    return state.isAuthenticated;\n  },\n  \n  setError: (error: string | null) => {\n    set({ error });\n  },\n  \n  initializeFromStorage: () => {\n    const state = get();\n    \n    // Only initialize if demo mode is enabled\n    if (!state.isDemoMode) return;\n    \n    // Try to restore the session\n    state.restoreSession();\n  },\n  \n  restoreSession: () => {\n    const state = get();\n    \n    try {\n      // Check for session info\n      const sessionData = sessionStorage.getItem(SESSION_KEY);\n      if (!sessionData) return false;\n      \n      const sessionInfo = JSON.parse(sessionData);\n      const { startTime, encKey } = sessionInfo;\n      \n      // Check if session expired\n      const elapsed = Date.now() - startTime;\n      if (elapsed > SESSION_TIMEOUT) {\n        state.clearApiKey();\n        state.setError('Session expired. Please enter your API key again.');\n        return false;\n      }\n      \n      // Try to restore encrypted keys\n      const encrypted = sessionStorage.getItem(STORAGE_KEY);\n      const encryptedOpenAI = sessionStorage.getItem(OPENAI_STORAGE_KEY);\n      \n      if (!encrypted || !encKey) return false;\n      \n      // Decrypt API keys\n      const apiKey = decrypt(encrypted, encKey);\n      if (!apiKey || !isValidApiKey(apiKey)) {\n        state.clearApiKey();\n        return false;\n      }\n      \n      // Restore OpenAI key if present\n      let openAIKey = null;\n      if (encryptedOpenAI) {\n        openAIKey = decrypt(encryptedOpenAI, encKey);\n      }\n      \n      // Restore state\n      set({\n        apiKey: apiKey,\n        openAIApiKey: openAIKey,\n        encryptionKey: encKey,\n        isAuthenticated: true,\n        sessionStartTime: startTime,\n        error: null\n      });\n      \n      return true;\n    } catch {\n      // Session restore failed, clear everything\n      state.clearApiKey();\n      return false;\n    }\n  }\n}));\n\n// Auto-clear on tab visibility change (optional security feature)\nif (typeof window !== 'undefined') {\n  document.addEventListener('visibilitychange', () => {\n    if (document.hidden) {\n      // Optional: Clear API key when tab is hidden\n      // Uncomment for extra security\n      // const { clearApiKey } = useDemoStore.getState();\n      // clearApiKey();\n    }\n  });\n  \n  // Check session validity periodically\n  setInterval(() => {\n    const { validateSession } = useDemoStore.getState();\n    validateSession();\n  }, 60000); // Check every minute\n}","'use client';\n\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { useMicVAD, utils } from '@ricky0123/vad-react';\nimport RotateLoader from 'react-spinners/RotateLoader';\nimport { X, StopCircle, Mic, MicOff, Settings } from 'lucide-react';\nimport Canvas from './Canvas';\nimport { VoiceSettings } from './VoiceSettings';\nimport { speechManager } from '@/lib/voice/speech-manager';\nimport { useMessageStore, useConversationStore } from '@/hooks/useWidgetStore';\nimport { useAgentStore } from '@/store/agents';\nimport { generateId, generateConversationName } from '@/lib/utils';\nimport { useVoiceSettingsStore } from '@/store/voice-settings';\nimport { parseMarkdownForVoice } from '@/lib/voice/utils';\nimport { useDemoStore } from '@/store/demo';\nimport { AlertTriangle } from 'lucide-react';\n\ninterface VoiceModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  projectId: string;\n  projectName?: string;\n}\n\n// Voice states for UI animations\ntype VoiceState = 'idle' | 'listening' | 'recording' | 'processing' | 'speaking';\n\n// Separate component that handles VAD initialization\nfunction VoiceModalContent({ isOpen, onClose, projectId, projectName }: VoiceModalProps) {\n  const [loading, setLoading] = useState(true);\n  const [transcript, setTranscript] = useState('');\n  const [agentResponse, setAgentResponse] = useState('');\n  const [isManualRecording, setIsManualRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null);\n  const [apiKeyError, setApiKeyError] = useState(false);\n  const [isAgentSpeaking, setIsAgentSpeaking] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [voiceState, setVoiceState] = useState<VoiceState>('idle');\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  \n  // Streaming state\n  const [isStreamingText, setIsStreamingText] = useState(false);\n  const [streamingResponse, setStreamingResponse] = useState('');\n  \n  // Message store integration\n  const { addMessage, messages, loadMessages } = useMessageStore();\n  const { currentConversation, ensureConversation, updateConversation } = useConversationStore();\n  const [currentUserMessageId, setCurrentUserMessageId] = useState<string | null>(null);\n  const [voiceConversation, setVoiceConversation] = useState<any>(null);\n  \n  // Guard to prevent multiple conversation creation attempts\n  const conversationSetupRef = useRef<boolean>(false);\n  \n  // Voice settings integration\n  const { selectedVoice, selectedPersona, setVoiceModalOpen } = useVoiceSettingsStore();\n  \n  // Demo mode check\n  const { isDemoMode, openAIApiKey } = useDemoStore();\n  \n  // Check if OpenAI API key is available\n  const checkOpenAIKeyAvailability = useCallback(() => {\n    const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n    if (deploymentMode === 'demo' && !openAIApiKey) {\n      return false;\n    }\n    // In production mode, we can't check server-side env from client\n    // We'll let the API handle validation\n    return true;\n  }, [openAIApiKey]);\n\n  // Initialize VAD with error handling\n  const vad = useMicVAD({\n    preSpeechPadFrames: 10,\n    positiveSpeechThreshold: 0.8,   // Lower threshold for easier detection\n    negativeSpeechThreshold: 0.6,   // Lower threshold\n    minSpeechFrames: 3,              // Reduce minimum frames\n    startOnLoad: false,              // Start manually\n    workletURL: '/vad.worklet.bundle.min.js',\n    modelURL: '/silero_vad.onnx',\n    // VAD configuration\n    onSpeechStart: () => {\n      console.log('🎤 [VAD] Speech started detected');\n      speechManager.onSpeechStart();\n    },\n    onSpeechEnd: (audio) => {\n      console.log('🎤 [VAD] Speech ended, audio length:', audio.length);\n      speechManager.onSpeechEnd(audio);\n    },\n    onVADMisfire: () => {\n      console.log('🎤 [VAD] Misfire detected');\n      speechManager.onMisfire();\n    }\n  });\n\n  // Control global voice modal state for hiding mobile navigation\n  useEffect(() => {\n    setVoiceModalOpen(isOpen);\n    \n    // Extra cleanup when closing to ensure mobile navigation reappears\n    if (!isOpen) {\n      // Reset conversation setup guard when modal closes\n      conversationSetupRef.current = false;\n      // Clear voice conversation reference when modal closes\n      setVoiceConversation(null);\n      \n      // Small delay to ensure the state change is processed\n      setTimeout(() => {\n        setVoiceModalOpen(false);\n      }, 100);\n    }\n  }, [isOpen, setVoiceModalOpen]);\n\n  // Set up speech manager when modal opens\n  useEffect(() => {\n    if (isOpen && projectId) {\n      console.log('🔧 [VOICE-MODAL] Setting up speech manager');\n      speechManager.setProjectId(projectId);\n      \n      // Apply voice settings to speech manager\n      speechManager.setVoiceSettings(selectedVoice, selectedPersona);\n      \n      // Pass demo keys to window object for speech manager (only in demo mode)\n      if (isDemoMode) {\n        if (openAIApiKey) {\n          (window as any).__demoOpenAIKey = openAIApiKey;\n        }\n        // Also pass CustomGPT API key from demo store\n        const demoApiKey = useDemoStore.getState().apiKey;\n        if (demoApiKey) {\n          (window as any).__demoCustomGPTKey = demoApiKey;\n        }\n      }\n      \n      // Theme is now handled directly by Canvas component through themeId prop\n      \n      // Check if agent is active\n      const currentAgentStore = useAgentStore.getState();\n      const agent = currentAgentStore.agents.find(a => a.id === parseInt(projectId));\n      \n      if (agent && !agent.is_chat_active) {\n        console.warn('⚠️ [VOICE-MODAL] Agent is inactive - may fall back to OpenAI');\n      }\n      \n      // Set the model based on agent settings or use fast default for voice\n      if (agent?.settings?.chatbot_model) {\n        speechManager.setChatbotModel(agent.settings.chatbot_model);\n      } else {\n        // Default to fast model for voice if agent doesn't have a model configured\n        speechManager.setChatbotModel('gpt-3.5-turbo');\n      }\n      \n      // Ensure we have a conversation before starting voice\n      const setupConversation = async () => {\n        // Prevent multiple setup attempts\n        if (conversationSetupRef.current) {\n          console.log('🔄 [VOICE-MODAL] Conversation setup already in progress, skipping');\n          return;\n        }\n        \n        try {\n          conversationSetupRef.current = true;\n          let conversation = currentConversation;\n          \n          // If no current conversation and no voice conversation stored, create one for voice\n          if (!conversation && !voiceConversation) {\n            console.log('🔄 [VOICE-MODAL] No current conversation, creating one for voice');\n            // Create conversation with voice title\n            conversation = await ensureConversation(parseInt(projectId), 'Voice Conversation');\n            console.log('✅ [VOICE-MODAL] Created conversation:', conversation.id, 'session:', conversation.session_id);\n            \n            // Immediately update the title to ensure it's set correctly\n            try {\n              await updateConversation(conversation.id, conversation.session_id, { name: 'Voice Conversation' });\n              console.log('📝 [VOICE-MODAL] Set initial voice conversation title');\n            } catch (error) {\n              console.error('❌ [VOICE-MODAL] Failed to set initial title:', error);\n            }\n            \n            // Store the conversation reference for reuse\n            setVoiceConversation(conversation);\n          } else if (conversation) {\n            // Store existing conversation reference\n            setVoiceConversation(conversation);\n          } else if (voiceConversation) {\n            // Use the existing voice conversation\n            conversation = voiceConversation;\n          }\n          \n          // Ensure we have a valid conversation before proceeding\n          if (!conversation) {\n            console.error('❌ [VOICE-MODAL] No conversation available after setup');\n            return;\n          }\n          \n          // Load conversation history and session ID\n          const conversationMessages = messages.get(conversation.id.toString()) || [];\n          console.log('📝 [VOICE-MODAL] Loading conversation history:', conversationMessages.length, 'messages');\n          console.log('📝 [VOICE-MODAL] Agent status:', agent?.is_chat_active ? 'Active' : 'Inactive');\n          \n          // Filter out any duplicate messages and ensure proper ordering\n          const cleanedMessages = conversationMessages.filter((msg, index, self) => \n            // Keep only the first occurrence of each message ID\n            index === self.findIndex(m => m.id === msg.id)\n          ).sort((a, b) => \n            // Sort by timestamp to ensure proper ordering\n            new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n          );\n          \n          speechManager.setConversationHistory(cleanedMessages);\n          speechManager.setSessionId(conversation.session_id);\n        } catch (error) {\n          console.error('❌ [VOICE-MODAL] Failed to setup conversation:', error);\n        } finally {\n          // Reset the guard after setup is complete (success or failure)\n          conversationSetupRef.current = false;\n        }\n      };\n      \n      setupConversation();\n      \n      speechManager.setCallbacks({\n        onUserSpeaking: () => {\n          (Canvas as any).onUserSpeaking?.();\n          setTranscript('');\n          setStreamingResponse(''); // Clear streaming response\n          setIsStreamingText(false);\n          setVoiceState('recording');\n        },\n        onProcessing: async () => {\n          (Canvas as any).onProcessing?.();\n          setVoiceState('processing');\n          \n          // Use existing conversation - don't create a new one\n          // The conversation should already be set up in setupConversation()\n          \n          const placeholderUserMessage = {\n            id: generateId(),\n            role: 'user' as const,\n            content: '🎤 Processing voice input...',\n            timestamp: new Date().toISOString(),\n            status: 'sending' as const,\n          };\n          \n          setCurrentUserMessageId(placeholderUserMessage.id);\n          const targetConversation = voiceConversation || currentConversation;\n          if (targetConversation) {\n            addMessage(targetConversation.id.toString(), placeholderUserMessage);\n            console.log('🎤 [VOICE-MODAL] Added placeholder user message');\n          }\n        },\n        onAiSpeaking: () => {\n          (Canvas as any).onAiSpeaking?.();\n          setIsAgentSpeaking(true);\n          setVoiceState('speaking');\n        },\n        onReset: () => {\n          (Canvas as any).reset?.();\n          setIsAgentSpeaking(false);\n          setIsStreamingText(false);\n          setVoiceState('idle');\n        },\n        onDebug: (message: string, data?: any) => {\n          // Debug logging removed for production\n        },\n        onError: (error: string) => {\n          console.error('❌ [VOICE-MODAL] Error from speech manager:', error);\n          // Check if it's an API key error\n          if (error.includes('OpenAI API key') || error.includes('API key')) {\n            setApiKeyError(true);\n            // Also show a toast error\n            const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : null;\n            const isDemoMode = deploymentMode === 'demo';\n            const errorMsg = isDemoMode \n              ? 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n              : 'Voice feature requires OpenAI API key configuration. Please add OPENAI_API_KEY to your .env.local file.';\n            \n            // Import toast at the top of the file\n            import('sonner').then(({ toast }) => {\n              toast.error(errorMsg);\n            });\n          }\n          setIsStreamingText(false);\n          setVoiceState('idle');\n        },\n        onTranscriptReceived: async (transcript: string) => {\n          console.log('🎯 [VOICE-MODAL] Transcript received:', transcript);\n          setTranscript(transcript);\n          \n          // Update conversation title for voice conversations\n          const targetConversation = voiceConversation || currentConversation;\n          if (targetConversation) {\n            const conversationMessages = messages.get(targetConversation.id.toString()) || [];\n            // If this is the first message and conversation doesn't have a proper title yet, set voice title\n            if (conversationMessages.length <= 1) {\n              const currentTitle = targetConversation.name || '';\n              const needsVoiceTitle = !currentTitle || \n                                      currentTitle === 'New voice conversation' || \n                                      currentTitle === 'New Conversation' ||\n                                      currentTitle === 'Processing...' ||\n                                      currentTitle.startsWith('Chat ') ||\n                                      currentTitle.startsWith('OpenAI-') ||\n                                      currentTitle.includes('OpenAI-');\n              \n              if (needsVoiceTitle) {\n                // Generate a more descriptive title based on the transcript\n                let voiceTitle = 'Voice Conversation';\n                if (transcript && transcript.length > 0) {\n                  // Use the first few words of the transcript as the title, but clean it first\n                  const cleanTranscript = transcript\n                    .replace(/^(OpenAI-|System-|API-|Assistant:|User:)\\s*/i, '')\n                    .trim();\n                  if (cleanTranscript.length > 0) {\n                    const words = cleanTranscript.split(/\\s+/).slice(0, 6).join(' ');\n                    voiceTitle = `Voice: ${words.length > 40 ? words.substring(0, 40).trim() + '...' : words}`;\n                  }\n                }\n                \n                console.log('📝 [VOICE-MODAL] Setting voice conversation title:', voiceTitle);\n                try {\n                  await updateConversation(targetConversation.id, targetConversation.session_id, { name: voiceTitle });\n                } catch (error) {\n                  console.error('❌ [VOICE-MODAL] Failed to update conversation title:', error);\n                }\n              }\n            }\n          }\n          \n          // Update the placeholder message with actual transcript\n          \n          if (targetConversation && currentUserMessageId) {\n            // Update the existing placeholder message\n            const updatedUserMessage = {\n              id: currentUserMessageId,\n              role: 'user' as const,\n              content: transcript,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n            };\n            \n            addMessage(targetConversation.id.toString(), updatedUserMessage);\n            console.log('✅ [VOICE-MODAL] Updated user message with transcript');\n          } else {\n            // Fallback: create new message if no placeholder exists\n            // Use the existing conversation from voiceConversation or currentConversation\n            const conversation = voiceConversation || currentConversation;\n            if (!conversation) {\n              console.error('❌ [VOICE-MODAL] No conversation available for user message');\n              return;\n            }\n            \n            const userMessage = {\n              id: generateId(),\n              role: 'user' as const,\n              content: transcript,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n            };\n            \n            setCurrentUserMessageId(userMessage.id);\n            addMessage(conversation.id.toString(), userMessage);\n          }\n        },\n        onResponseReceived: async (response: string) => {\n          console.log('🎯 [VOICE-MODAL] Response received:', response);\n          console.log('🎯 [VOICE-MODAL] Response includes \"individuals\":', response.includes('individuals'));\n          console.log('🎯 [VOICE-MODAL] Response includes \"like\":', response.includes('like'));\n          console.log('🎯 [VOICE-MODAL] Response includes \"CustomGPT\":', response.includes('CustomGPT'));\n          \n          // For streaming responses, this will be called with the final response\n          // Don't update the display here as it's already being updated via streaming chunks\n          // This is mainly for adding the message to the conversation history\n          \n          // Use voiceConversation to ensure we're adding to the same conversation as the user message\n          // This prevents race condition where messages could be added out of order\n          const targetConversation = voiceConversation || currentConversation;\n          \n          if (targetConversation) {\n            // Create and add assistant message to chat\n            const assistantMessage = {\n              id: generateId(),\n              role: 'assistant' as const,\n              content: response,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n              citations: [], // Voice responses typically don't have citations\n            };\n            \n            addMessage(targetConversation.id.toString(), assistantMessage);\n            \n            // Force refresh conversation to ensure proper syncing\n            const currentMessages = messages.get(targetConversation.id.toString()) || [];\n            console.log('🔄 [VOICE-MODAL] Current conversation messages:', currentMessages.length, 'messages');\n            \n          } else {\n            console.warn('⚠️ [VOICE-MODAL] No conversation available for adding assistant message');\n          }\n        },\n        // New streaming callbacks\n        onStreamingTextChunk: (textChunk: string) => {\n          console.log('📝 [VOICE-MODAL] Streaming text chunk:', textChunk);\n          setIsStreamingText(true);\n          setStreamingResponse(prev => {\n            const newText = prev + textChunk;\n            console.log('📝 [VOICE-MODAL] Accumulated streaming text length:', newText.length);\n            // Update the displayed response immediately for streaming\n            const cleanResponse = parseMarkdownForVoice(newText);\n            setAgentResponse(cleanResponse);\n            return newText;\n          });\n        },\n        onStreamingAudioReady: (audioUrl: string, chunkId: string) => {\n          console.log('🎵 [VOICE-MODAL] Audio chunk ready:', chunkId, 'URL length:', audioUrl.length);\n          \n          // Ensure we're in speaking state when audio arrives\n          if (voiceState !== 'speaking') {\n            setVoiceState('speaking');\n            setIsAgentSpeaking(true);\n          }\n        },\n        onStreamingComplete: (fullResponse: string, transcript: string) => {\n          console.log('✅ [VOICE-MODAL] Streaming complete:', { fullResponse: fullResponse.length, transcript });\n          console.log('✅ [VOICE-MODAL] Full response includes \"individuals\":', fullResponse.includes('individuals'));\n          console.log('✅ [VOICE-MODAL] Full response includes \"like\":', fullResponse.includes('like'));\n          console.log('✅ [VOICE-MODAL] Full response includes \"CustomGPT\":', fullResponse.includes('CustomGPT'));\n          \n          // Final cleanup - ensure we have the complete response\n          const cleanResponse = parseMarkdownForVoice(fullResponse);\n          console.log('✅ [VOICE-MODAL] Final clean response:', cleanResponse);\n          setAgentResponse(cleanResponse);\n          setStreamingResponse(fullResponse);\n          setIsStreamingText(false);\n          \n          // Don't add messages here - they've already been added via onTranscriptReceived and onResponseReceived\n          // This prevents duplicate messages in the conversation\n        }\n      });\n    }\n    \n    // Clean up when modal closes\n    if (!isOpen) {\n      // Don't clear conversation history to maintain context\n      setTranscript('');\n      setAgentResponse('');\n      setStreamingResponse('');\n      setIsStreamingText(false);\n      setIsAgentSpeaking(false);\n      setVoiceConversation(null); // Clear voice conversation reference\n      setVoiceState('idle'); // Reset voice state to idle\n      setCurrentUserMessageId(null); // Clear current user message ID\n      \n      // Clean up demo keys from window object (only in demo mode)\n      if ((window as any).__demoOpenAIKey) {\n        delete (window as any).__demoOpenAIKey;\n      }\n      if ((window as any).__demoCustomGPTKey) {\n        delete (window as any).__demoCustomGPTKey;\n      }\n      \n      // Ensure VAD is stopped if it was running\n      if (vad.listening) {\n        vad.pause();\n      }\n      \n      // Clean up speech manager streaming resources\n      speechManager.destroy();\n      \n      // Ensure global state is properly reset\n      setVoiceModalOpen(false);\n      \n      // Reload messages to ensure sync with API format\n      if (currentConversation) {\n        // Use the loadMessages function directly from the hook\n        loadMessages(currentConversation.id.toString());\n      }\n    }\n  }, [isOpen, projectId, currentConversation, messages, selectedVoice, selectedPersona, isDemoMode, openAIApiKey, loadMessages]);\n  \n  // Update settings when they change\n  useEffect(() => {\n    if (isOpen && projectId) {\n      // Update speech manager with new voice settings\n      speechManager.setVoiceSettings(selectedVoice, selectedPersona);\n      \n      // Get agent's configured model\n      const currentAgentStore = useAgentStore.getState();\n      const agent = currentAgentStore.agents.find(a => a.id === parseInt(projectId));\n      if (agent?.settings?.chatbot_model) {\n        speechManager.setChatbotModel(agent.settings.chatbot_model);\n      }\n      \n      // Theme is now handled directly by Canvas component through themeId prop\n      // The Canvas component automatically switches themes when themeId changes\n    }\n  }, [selectedVoice, selectedPersona, isOpen, projectId]);\n  \n  // Monitor VAD state changes\n  useEffect(() => {\n    if (vad.errored) {\n    } else if (!vad.loading && !vad.errored) {\n    }\n  }, [vad.loading, vad.errored]);\n\n  // Define handleToggleListening before useEffect that uses it\n  const handleToggleListening = useCallback(async () => {\n    console.log('🔘 [VOICE-MODAL] Toggle listening clicked', { \n      vadLoading: vad.loading,\n      vadListening: vad.listening,\n      vadErrored: vad.errored\n    });\n    \n    // Check OpenAI key availability first\n    if (!checkOpenAIKeyAvailability()) {\n      console.error('❌ [VOICE-MODAL] OpenAI API key not available');\n      setApiKeyError(true);\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n      const errorMsg = deploymentMode === 'demo' \n        ? 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n        : 'Voice feature requires OpenAI API key. Please add OPENAI_API_KEY to your .env.local file.';\n      \n      import('sonner').then(({ toast }) => {\n        toast.error(errorMsg);\n      });\n      return;\n    }\n    \n    // Enhanced error handling for VAD\n    if (vad.errored) {\n      console.error('❌ [VOICE-MODAL] VAD is in error state, attempting recovery...');\n      \n      // Try to restart VAD after error\n      try {\n        console.log('🔄 [VOICE-MODAL] Attempting VAD recovery...');\n        // Wait a moment then try to start\n        setTimeout(() => {\n          if (!vad.listening && !vad.loading) {\n            console.log('🔄 [VOICE-MODAL] Retry VAD start after error');\n            vad.start();\n          }\n        }, 1000);\n        return;\n      } catch (recoveryError) {\n        console.error('❌ [VOICE-MODAL] VAD recovery failed:', recoveryError);\n        return;\n      }\n    }\n    \n    try {\n      if (vad.listening) {\n        console.log('⏸️ [VOICE-MODAL] Pausing VAD');\n        vad.pause();\n        setVoiceState('idle');\n      } else {\n        console.log('▶️ [VOICE-MODAL] Starting VAD');\n        setVoiceState('listening');\n        \n        // Simplified microphone permission check\n        try {\n          console.log('🎤 [VOICE-MODAL] Checking microphone permissions...');\n          const stream = await navigator.mediaDevices.getUserMedia({ \n            audio: true\n          });\n          \n          // Clean up immediately - we just needed to check permission\n          stream.getTracks().forEach(track => track.stop());\n          \n          console.log('🎯 [VOICE-MODAL] Microphone permission granted');\n        } catch (permissionError) {\n          console.error('❌ [VOICE-MODAL] Microphone permission failed:', permissionError);\n          const errorMessage = permissionError instanceof Error ? permissionError.message : 'Permission denied';\n          \n          // Still try to start VAD - it might handle permissions internally\n        }\n        \n        // Start VAD with additional error handling\n        try {\n          vad.start();\n        } catch (vadError) {\n          console.error('❌ [VOICE-MODAL] VAD start failed:', vadError);\n          const errorMessage = vadError instanceof Error ? vadError.message : 'Unknown error';\n        }\n      }\n    } catch (error) {\n      console.error('❌ [VOICE-MODAL] Error in toggle listening:', error);\n    }\n  }, [vad, checkOpenAIKeyAvailability]);\n\n  // Manual recording fallback when VAD fails\n  const handleManualRecording = useCallback(async () => {\n    console.log('🎤 [MANUAL] Starting manual recording fallback');\n    \n    // Check OpenAI key availability first\n    if (!checkOpenAIKeyAvailability()) {\n      console.error('❌ [MANUAL] OpenAI API key not available');\n      setApiKeyError(true);\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n      const errorMsg = deploymentMode === 'demo' \n        ? 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n        : 'Voice feature requires OpenAI API key. Please add OPENAI_API_KEY to your .env.local file.';\n      \n      import('sonner').then(({ toast }) => {\n        toast.error(errorMsg);\n      });\n      return;\n    }\n    \n    try {\n      if (!isManualRecording) {\n        // Start manual recording with better audio quality\n        setVoiceState('recording');\n        const stream = await navigator.mediaDevices.getUserMedia({ \n          audio: {\n            echoCancellation: true,\n            noiseSuppression: true,\n            autoGainControl: true,\n            sampleRate: 48000\n          } \n        });\n        \n        // Choose the best available audio format\n        const mimeType = MediaRecorder.isTypeSupported('audio/webm;codecs=opus') \n          ? 'audio/webm;codecs=opus' \n          : 'audio/webm';\n          \n        const recorder = new MediaRecorder(stream, { mimeType });\n        const chunks: Blob[] = [];\n        \n        recorder.ondataavailable = (event) => {\n          if (event.data.size > 0) {\n            chunks.push(event.data);\n          }\n        };\n        \n        recorder.onstop = async () => {\n          console.log('🎤 [MANUAL] Recording stopped, processing audio...');\n          // MediaRecorder doesn't produce WAV, it produces webm/opus or similar\n          const audioBlob = new Blob(chunks, { type: recorder.mimeType || 'audio/webm' });\n          \n          try {\n            // Create audio context for decoding compressed audio\n            const audioContext = new AudioContext();\n            \n            // Convert blob to ArrayBuffer\n            const audioBuffer = await audioBlob.arrayBuffer();\n            \n            // Decode the compressed audio to get raw PCM data\n            const decodedAudio = await audioContext.decodeAudioData(audioBuffer);\n            console.log('🎯 [MANUAL] Audio decoded:', {\n              sampleRate: decodedAudio.sampleRate,\n              channels: decodedAudio.numberOfChannels,\n              duration: decodedAudio.duration,\n              length: decodedAudio.length\n            });\n            \n            // Convert to mono Float32Array (match VAD format)\n            const channelData = decodedAudio.getChannelData(0); // Get first channel\n            \n            // CRITICAL: Resample from 48kHz to 16kHz for VAD/Whisper compatibility\n            let audioArray: Float32Array;\n            if (decodedAudio.sampleRate !== 16000) {\n              console.log('🔄 [MANUAL] Resampling from', decodedAudio.sampleRate, 'to 16kHz');\n              const resampleRatio = 16000 / decodedAudio.sampleRate;\n              const newLength = Math.floor(channelData.length * resampleRatio);\n              audioArray = new Float32Array(newLength);\n              \n              // Simple linear interpolation resampling\n              for (let i = 0; i < newLength; i++) {\n                const srcIndex = i / resampleRatio;\n                const srcIndexFloor = Math.floor(srcIndex);\n                const srcIndexCeil = Math.min(srcIndexFloor + 1, channelData.length - 1);\n                const fraction = srcIndex - srcIndexFloor;\n                \n                audioArray[i] = channelData[srcIndexFloor] * (1 - fraction) + \n                               channelData[srcIndexCeil] * fraction;\n              }\n            } else {\n              audioArray = new Float32Array(channelData);\n            }\n            \n            console.log('🎯 [MANUAL] Audio ready:', audioArray.length, 'samples at 16kHz');\n            \n            // Process through speech manager\n            speechManager.onSpeechStart();\n            await speechManager.onSpeechEnd(audioArray);\n            \n            // Clean up audio context\n            await audioContext.close();\n            \n          } catch (error) {\n            console.error('❌ [MANUAL] Audio decoding failed:', error);\n          }\n          \n          // Clean up recording resources\n          stream.getTracks().forEach(track => track.stop());\n          setIsManualRecording(false);\n          setMediaRecorder(null);\n        };\n        \n        setMediaRecorder(recorder);\n        setIsManualRecording(true);\n        recorder.start();\n        \n        \n      } else {\n        // Stop manual recording\n        if (mediaRecorder) {\n          mediaRecorder.stop();\n        }\n      }\n    } catch (error) {\n      console.error('❌ [MANUAL] Manual recording failed:', error);\n    }\n  }, [isManualRecording, mediaRecorder, checkOpenAIKeyAvailability]);\n\n  // Track if we've already auto-started to prevent loops\n  const [hasAutoStarted, setHasAutoStarted] = useState(false);\n\n  // Handle stopping the agent's speech\n  const handleStopSpeech = useCallback(() => {\n    console.log('🛑 [VOICE-MODAL] Stopping agent speech');\n    speechManager.stopAudio();\n    setIsAgentSpeaking(false);\n  }, []);\n\n  // Handle VAD state updates with comprehensive error checking\n  useEffect(() => {\n    console.log('🔄 [VOICE-MODAL] VAD state changed', { \n      isOpen,\n      vadLoading: vad.loading, \n      vadListening: vad.listening,\n      vadUserSpeaking: vad.userSpeaking,\n      vadErrored: vad.errored,\n      hasAutoStarted\n    });\n    \n    // Check for VAD errors\n    if (vad.errored) {\n      console.error('❌ [VOICE-MODAL] VAD encountered an error');\n      return;\n    }\n    \n    // Don't auto-start VAD - wait for user interaction\n    // This prevents microphone permission request on modal open\n    if (isOpen && !vad.loading && !vad.listening && !vad.errored) {\n      console.log('🎯 [VOICE-MODAL] VAD loaded successfully, ready for manual start');\n    }\n    \n    // If VAD is in error state but we haven't tried recovery, attempt recovery\n    if (isOpen && !vad.loading && vad.errored && hasAutoStarted) {\n      console.log('🔄 [VOICE-MODAL] VAD in error state, scheduling recovery attempt...');\n      \n      // Don't continuously retry, just once more after a delay\n      setTimeout(() => {\n        if (vad.errored && !vad.listening) {\n          console.log('🔄 [VOICE-MODAL] Executing VAD recovery attempt');\n          handleToggleListening();\n        }\n      }, 1500);\n    }\n    \n    // Pause when modal closes\n    if (!isOpen && vad.listening) {\n      console.log('🛑 [VOICE-MODAL] Pausing VAD (modal closed)');\n      vad.pause();\n    }\n  }, [isOpen, vad.loading, vad.listening, vad.errored, hasAutoStarted]);\n\n  // Reset auto-start flag and error state when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setHasAutoStarted(false);\n      setApiKeyError(false);\n      setTranscript('');\n      setAgentResponse('');\n      setStreamingResponse('');\n      setIsStreamingText(false);\n      setIsAgentSpeaking(false);\n      setVoiceConversation(null); // Reset voice conversation for new session\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setLoading(vad.loading);\n  }, [vad.loading]);\n\n  return (\n    <>\n      {isOpen && (\n        <>\n          <style jsx global>{`\n            /* Custom scrollbar styles for voice modal */\n            .voice-response-scroll::-webkit-scrollbar {\n              width: 6px;\n            }\n            \n            .voice-response-scroll::-webkit-scrollbar-track {\n              background: rgba(255, 255, 255, 0.1);\n              border-radius: 3px;\n            }\n            \n            .voice-response-scroll::-webkit-scrollbar-thumb {\n              background: rgba(255, 255, 255, 0.3);\n              border-radius: 3px;\n            }\n            \n            .voice-response-scroll::-webkit-scrollbar-thumb:hover {\n              background: rgba(255, 255, 255, 0.5);\n            }\n            \n            /* Firefox scrollbar */\n            .voice-response-scroll {\n              scrollbar-width: thin;\n              scrollbar-color: rgba(255, 255, 255, 0.3) rgba(255, 255, 255, 0.1);\n            }\n            \n            /* Mobile touch scrolling optimization */\n            .voice-response-scroll {\n              -webkit-overflow-scrolling: touch;\n              scroll-behavior: smooth;\n            }\n          `}</style>\n          {/* Settings and Close buttons - moved outside main container to avoid click issues */}\n          <div \n            className=\"fixed top-4 sm:top-6 md:top-8 right-4 sm:right-6 md:right-8 flex items-center gap-2 sm:gap-3 z-[10000]\"\n            style={{ pointerEvents: 'auto' }}\n          >\n            {/* Settings button */}\n            <button\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                console.log('🔧 Settings button clicked, current state:', isSettingsOpen);\n                setIsSettingsOpen(true);\n                console.log('🔧 Settings state should now be true');\n              }}\n              className=\"w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-white/10 hover:bg-white/20 active:bg-white/30 backdrop-blur-sm flex items-center justify-center transition-all transform active:scale-95\"\n              aria-label=\"Voice settings\"\n            >\n              <Settings className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n            </button>\n            \n            {/* Close button */}\n            <button\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                console.log('❌ Close button clicked');\n                onClose();\n              }}\n              className=\"w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-white/10 hover:bg-white/20 active:bg-white/30 backdrop-blur-sm flex items-center justify-center transition-all transform active:scale-95\"\n              aria-label=\"Close voice mode\"\n            >\n              <X className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n            </button>\n          </div>\n          \n          <div \n            className=\"fixed inset-0 z-[9999] overflow-hidden\"\n          >\n          {/* Dynamic gradient background based on voice state */}\n          <div className={`absolute inset-0 transition-all duration-1000 pointer-events-none ${\n            voiceState === 'idle' ? 'voice-gradient-idle' :\n            voiceState === 'listening' ? 'voice-gradient-listening' :\n            voiceState === 'recording' ? 'voice-gradient-recording' :\n            voiceState === 'processing' ? 'voice-gradient-processing' :\n            'voice-gradient-speaking'\n          }`} />\n          \n          {/* Wave overlay effect for processing and speaking states */}\n          {(voiceState === 'processing' || voiceState === 'speaking') && (\n            <div className=\"absolute inset-0 voice-overlay-wave pointer-events-none\" />\n          )}\n          \n          {/* Pulse overlay for recording state */}\n          {voiceState === 'recording' && (\n            <div className=\"absolute inset-0 bg-red-500/10 voice-overlay-pulse pointer-events-none\" />\n          )}\n          {loading ? (\n            <div className=\"flex items-center justify-center h-full relative z-10\">\n              <RotateLoader\n                loading={loading}\n                color=\"#ffffff\"\n                aria-label=\"Loading Voice\"\n                data-testid=\"loader\"\n              />\n            </div>\n          ) : (\n            <>\n              {/* Canvas for particle animation */}\n              <div className=\"absolute inset-0 pointer-events-none z-0\">\n                <Canvas />\n              </div>\n              \n              {/* Top-left settings display */}\n              <div className=\"absolute top-4 sm:top-6 md:top-8 left-4 sm:left-6 md:left-8 z-20 space-y-2\">\n                {/* Demo mode indicator */}\n                {isDemoMode && (\n                  <div className=\"bg-amber-500/20 backdrop-blur-sm rounded-lg px-3 py-2 text-amber-300 text-xs flex items-center gap-2 border border-amber-500/30\">\n                    <AlertTriangle className=\"w-3 h-3\" />\n                    <span className=\"font-medium\">Demo Mode</span>\n                  </div>\n                )}\n                \n                {/* Voice settings */}\n                <div className=\"bg-white/5 backdrop-blur-sm rounded-lg px-3 py-2 text-white/70 text-xs space-y-1\">\n                  <div>Voice: {selectedVoice}</div>\n                  <div>Persona: {selectedPersona}</div>\n                  <div>Model: {(() => {\n                    const currentAgentStore = useAgentStore.getState();\n                    const currentAgent = currentAgentStore.agents.find(a => a.id === parseInt(projectId));\n                    return currentAgent?.settings?.chatbot_model || 'gpt-3.5-turbo';\n                  })()}</div>\n                </div>\n              </div>\n\n              \n              \n\n              {/* Status display - mobile optimized with better text handling */}\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-center px-4 z-10 pointer-events-auto max-w-full\" style={{ maxHeight: '80vh', display: 'flex', flexDirection: 'column' }}>\n                <div className=\"relative\">\n                  {/* Main status text with state-based colors - no blinking */}\n                  <p className={`text-2xl sm:text-3xl md:text-4xl font-light mb-4 leading-tight transition-all duration-300 ${\n                    voiceState === 'recording' ? 'text-red-400' :\n                    voiceState === 'processing' ? 'text-purple-400' :\n                    voiceState === 'speaking' ? 'text-green-400' :\n                    voiceState === 'listening' ? 'text-blue-400' :\n                    'text-white/90'\n                  }`}>\n                    {isManualRecording \n                      ? 'Analyzing...' \n                      : voiceState === 'listening'\n                      ? 'Listening...'\n                      : voiceState === 'processing'\n                      ? 'Thinking...'\n                      : voiceState === 'speaking'\n                      ? 'Speaking...'\n                      : vad.loading\n                      ? 'Initializing...'\n                      : 'Ready to chat'}\n                  </p>\n                  \n                  {/* Animated dots for processing state */}\n                  {voiceState === 'processing' && (\n                    <div className=\"flex justify-center gap-1 mt-2\">\n                      <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }} />\n                      <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }} />\n                      <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }} />\n                    </div>\n                  )}\n                </div>\n                \n                {/* Show user's transcript - responsive */}\n                {transcript && (\n                  <div className=\"mb-4 sm:mb-6\">\n                    <p className=\"text-xs sm:text-sm text-white/70 mb-1\">You said:</p>\n                    <p className=\"text-sm sm:text-lg text-white/90 max-w-xs sm:max-w-md mx-auto px-2\">&ldquo;{transcript}&rdquo;</p>\n                  </div>\n                )}\n                \n                {/* Show agent's response - mobile optimized with scrollable area */}\n                {agentResponse && (\n                  <div className=\"animate-fade-in pointer-events-auto\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <p className=\"text-xs text-white/70\">Agent:</p>\n                      {isStreamingText && (\n                        <div className=\"flex items-center gap-1\">\n                          <div className=\"w-1.5 h-1.5 bg-blue-400 rounded-full animate-pulse\"></div>\n                          <span className=\"text-xs text-blue-400/70\">streaming...</span>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"voice-response-scroll max-h-[40vh] sm:max-h-[50vh] overflow-y-auto overflow-x-hidden px-4 py-2 -mx-2 rounded-lg bg-white/5 relative\">\n                      <p className=\"text-sm sm:text-base text-white max-w-xs sm:max-w-md mx-auto leading-relaxed break-words whitespace-pre-wrap\">\n                        {agentResponse}\n                        {isStreamingText && (\n                          <span className=\"inline-block w-2 h-4 bg-white/60 ml-1 animate-pulse\"></span>\n                        )}\n                      </p>\n                    </div>\n                    \n                    {/* Audio wave visualization for speaking state */}\n                    {voiceState === 'speaking' && (\n                      <div className=\"flex justify-center items-center gap-1 mt-4\">\n                        {[...Array(5)].map((_, i) => (\n                          <div\n                            key={i}\n                            className=\"w-1 bg-green-400 rounded-full audio-wave-bar\"\n                            style={{\n                              height: '20px',\n                              animationDelay: `${i * 0.1}s`\n                            }}\n                          />\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                )}\n                \n                \n              </div>\n\n              {/* Bottom control buttons - Mobile optimized */}\n              <div \n                className=\"absolute bottom-6 sm:bottom-8 md:bottom-12 left-1/2 transform -translate-x-1/2 flex flex-col items-center gap-4 px-4\"\n                style={{ pointerEvents: 'auto', zIndex: 10000 }}\n              >\n                {/* API Key error warning */}\n                {(() => {\n                  const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                  const showWarning = deploymentMode === 'demo' ? !openAIApiKey : false;\n                  if (!showWarning) return null;\n                  \n                  return (\n                    <div className=\"bg-red-500/20 backdrop-blur-sm rounded-lg px-4 py-3 text-red-300 text-sm flex items-center gap-2 border border-red-500/30 max-w-xs\">\n                      <AlertTriangle className=\"w-4 h-4 flex-shrink-0\" />\n                      <span>Voice requires OpenAI API key. Add it in demo settings.</span>\n                    </div>\n                  );\n                })()}\n                \n                {/* Main voice control button */}\n                <div className=\"flex items-center justify-center\">\n                  {/* Recording/Listening State */}\n                  {(isManualRecording || voiceState === 'listening') && (\n                    <button\n                      onClick={isManualRecording ? handleManualRecording : handleToggleListening}\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-red-500/20 hover:bg-red-500/30 active:bg-red-500/40 backdrop-blur-sm transition-all transform active:scale-95 pointer-events-auto shadow-lg border-2 border-red-500/50\"\n                      style={{ pointerEvents: 'auto' }}\n                      aria-label={isManualRecording ? \"Stop recording\" : \"Stop listening\"}\n                    >\n                      {/* Pulsing animation ring */}\n                      <div className=\"absolute inset-0 rounded-full bg-red-500/30 animate-ping\"></div>\n                      \n                      {/* Inner button content */}\n                      <div className=\"relative z-10 w-full h-full flex items-center justify-center\">\n                        <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-red-500 rounded-sm\"></div>\n                      </div>\n                    </button>\n                  )}\n\n                  {/* Processing State */}\n                  {voiceState === 'processing' && (\n                    <button\n                      disabled\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-purple-500/20 backdrop-blur-sm shadow-lg border-2 border-purple-500/50\"\n                      aria-label=\"Processing\"\n                    >\n                      {/* Processing animation */}\n                      <div className=\"absolute inset-3 border-4 border-purple-500/30 border-t-purple-500 rounded-full animate-spin\"></div>\n                      <div className=\"absolute inset-6 border-2 border-purple-500/20 border-t-purple-500/60 rounded-full animate-spin\" style={{ animationDirection: 'reverse', animationDuration: '1.5s' }}></div>\n                    </button>\n                  )}\n\n                  {/* Speaking State - Stop button */}\n                  {voiceState === 'speaking' && (\n                    <button\n                      onClick={handleStopSpeech}\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-orange-500/20 hover:bg-orange-500/30 active:bg-orange-500/40 backdrop-blur-sm transition-all transform active:scale-95 pointer-events-auto shadow-lg border-2 border-orange-500/50\"\n                      style={{ pointerEvents: 'auto' }}\n                      aria-label=\"Stop response\"\n                    >\n                      {/* Sound wave animation */}\n                      <div className=\"absolute inset-0 rounded-full\">\n                        {[...Array(3)].map((_, i) => (\n                          <div\n                            key={i}\n                            className=\"absolute inset-0 rounded-full border border-orange-500/30 animate-ping\"\n                            style={{\n                              animationDelay: `${i * 0.2}s`,\n                              animationDuration: '1.5s'\n                            }}\n                          />\n                        ))}\n                      </div>\n                      \n                      <div className=\"relative z-10 w-full h-full flex items-center justify-center\">\n                        <StopCircle className=\"w-8 h-8 sm:w-10 sm:h-10 text-orange-500\" />\n                      </div>\n                    </button>\n                  )}\n\n                  {/* Idle State - Start button */}\n                  {!vad.loading && !isManualRecording && voiceState !== 'speaking' && voiceState !== 'listening' && voiceState !== 'processing' && (\n                    <button\n                      onClick={vad.errored ? handleManualRecording : handleToggleListening}\n                      disabled={(() => {\n                        const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                        return deploymentMode === 'demo' && !openAIApiKey;\n                      })()}\n                      className={`relative w-20 h-20 sm:w-24 sm:h-24 rounded-full backdrop-blur-sm transition-all transform shadow-lg border-2 ${\n                        (() => {\n                          const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                          return deploymentMode === 'demo' && !openAIApiKey;\n                        })() \n                          ? 'bg-gray-500/20 border-gray-500/50 cursor-not-allowed opacity-50' \n                          : 'bg-blue-500/20 hover:bg-blue-500/30 active:bg-blue-500/40 hover:scale-105 active:scale-95 pointer-events-auto border-blue-500/50'\n                      }`}\n                      style={{ pointerEvents: 'auto' }}\n                      aria-label={(() => {\n                        const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                        return deploymentMode === 'demo' && !openAIApiKey ? \"Voice disabled - API key required\" : \"Start voice chat\";\n                      })()}\n                    >\n                      {/* Subtle glow effect */}\n                      <div className=\"absolute inset-0 rounded-full bg-blue-500/10 blur-sm\"></div>\n                      \n                      <div className=\"relative z-10 w-full h-full flex items-center justify-center\">\n                        <Mic className={`w-8 h-8 sm:w-10 sm:h-10 ${\n                          (() => {\n                            const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                            return deploymentMode === 'demo' && !openAIApiKey ? 'text-gray-500' : 'text-blue-500';\n                          })()\n                        }`} />\n                      </div>\n                    </button>\n                  )}\n\n                  {/* Loading State */}\n                  {vad.loading && (\n                    <button\n                      disabled\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-gray-500/20 backdrop-blur-sm shadow-lg border-2 border-gray-500/50\"\n                      aria-label=\"Loading\"\n                    >\n                      <div className=\"absolute inset-4 border-3 border-gray-500/30 border-t-gray-500 rounded-full animate-spin\"></div>\n                    </button>\n                  )}\n                </div>\n\n                {/* State indicator text (subtle) */}\n                <div className=\"text-xs text-white/60 text-center\">\n                  {(() => {\n                    const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                    return deploymentMode === 'demo' && !openAIApiKey ? 'API key required' : '';\n                  })() ||\n                   vad.loading ? 'Initializing...' :\n                   isManualRecording ? 'Tap to stop' :\n                   voiceState === 'listening' ? 'Listening...' :\n                   voiceState === 'processing' ? 'Processing...' :\n                   voiceState === 'speaking' ? 'Tap to stop' :\n                   'Tap to speak'}\n                </div>\n              </div>\n\n            </>\n          )}\n          </div>\n        </>\n      )}\n      \n      {/* Voice Settings Modal */}\n      <VoiceSettings \n        isOpen={isSettingsOpen} \n        onClose={() => setIsSettingsOpen(false)}\n        projectId={projectId}\n      />\n    </>\n  );\n}\n\n// Main component that conditionally renders the VAD component\nexport function VoiceModal(props: VoiceModalProps) {\n  const { setVoiceModalOpen } = useVoiceSettingsStore();\n  \n  // Ensure global state is synchronized with props\n  React.useEffect(() => {\n    setVoiceModalOpen(props.isOpen);\n  }, [props.isOpen, setVoiceModalOpen]);\n  \n  // Only render the content (and initialize VAD) when modal is open\n  if (!props.isOpen) {\n    return null;\n  }\n  \n  return <VoiceModalContent {...props} />;\n}","/**\n * ChatContainer Component\n * \n * Main chat interface component that manages the entire chat experience.\n * This is the primary component for integrating CustomGPT chat functionality.\n * \n * Features:\n * - Message display with streaming support\n * - Agent selection and switching\n * - Citation handling with modal details\n * - Multiple deployment modes (standalone, widget, floating)\n * - Welcome screen with example prompts\n * - Error handling and authorization checks\n * \n * For customization:\n * - Example questions are now fetched from agent settings API\n * - Modify DEFAULT_EXAMPLE_PROMPTS for fallback starter questions\n * - Customize WelcomeMessage for branding\n * - Adjust ChatHeader for different layouts\n * - Style using Tailwind classes throughout\n */\n\n'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Sparkles, Bot } from 'lucide-react';\nimport Link from 'next/link';\nimport { toast } from 'sonner';\n\nimport type { ChatMessage, Citation, Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Message } from './Message';\nimport { ChatInput } from './ChatInput';\nimport { TypingIndicator } from './TypingIndicator';\nimport { AgentSelector } from './AgentSelector';\nimport { CitationDetailsModal } from './CitationDetailsModal';\nimport { CitationFilePreview } from './CitationFilePreview';\nimport { ConversationManager } from './ConversationManager';\nimport { MessageErrorDisplay } from './MessageErrorDisplay';\nimport { logger } from '@/lib/logger';\nimport { useWidgetSafe } from '@/widget/WidgetContext';\nimport { useMessageStore, useConversationStore, useAgentStore } from '@/hooks/useWidgetStore';\nimport { MessageSkeleton, LoadingOverlay } from '@/components/ui/loading';\nimport { getClient } from '@/lib/api/client';\nimport { VoiceModal } from '@/components/voice/VoiceModal';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\nimport { useDemoStore } from '@/store/demo';\n\n/**\n * Default example prompts shown to users when starting a new conversation\n * These are used as fallback when API-sourced example questions are not available\n */\nconst DEFAULT_EXAMPLE_PROMPTS = [\n  \"What can you help me with?\",\n  \"Explain this document\", \n  \"Summarize key points\",\n  \"Answer my questions\",\n];\n\ninterface ExamplePromptCardProps {\n  /** The prompt text to display */\n  prompt: string;\n  /** Handler called when the prompt is clicked */\n  onClick: (prompt: string) => void;\n}\n\n/**\n * ExamplePromptCard Component\n * \n * Clickable card showing an example prompt that users can select\n * to quickly start a conversation\n */\nconst ExamplePromptCard: React.FC<ExamplePromptCardProps> = ({ prompt, onClick }) => {\n  return (\n    <button\n      onClick={() => onClick(prompt)}\n      className={cn(\n        \"text-left bg-card border border-border rounded-lg\",\n        \"hover:border-accent hover:shadow-sm transition-all\",\n        \"text-card-foreground\",\n        \"p-2.5\",\n        \"text-xs\",\n        \"min-h-[50px] flex items-center\",\n        \"w-full\" // Ensures button takes full width of grid cell\n      )}\n    >\n      {prompt}\n    </button>\n  );\n};\n\ninterface WelcomeMessageProps {\n  /** Handler called when an example prompt is clicked */\n  onPromptClick: (prompt: string) => void;\n}\n\n/**\n * WelcomeMessage Component\n * \n * Displays a welcome screen when no messages exist in the conversation.\n * Shows the agent name, welcome text, and example prompts.\n * Fetches agent-specific example questions from API with fallback to defaults.\n * Uses Framer Motion for smooth animations.\n */\nconst WelcomeMessage: React.FC<WelcomeMessageProps> = ({ onPromptClick }) => {\n  const { currentAgent } = useAgentStore();\n  const [exampleQuestions, setExampleQuestions] = useState<string[]>(DEFAULT_EXAMPLE_PROMPTS);\n  const [loading, setLoading] = useState(false);\n  \n  /**\n   * Fetch agent settings to get custom example questions\n   */\n  useEffect(() => {\n    const fetchExampleQuestions = async () => {\n      if (!currentAgent) {\n        return;\n      }\n\n      // If we already have example questions from settings, use them\n      if (currentAgent.settings?.example_questions && currentAgent.settings.example_questions.length > 0) {\n        setExampleQuestions(currentAgent.settings.example_questions);\n        return;\n      }\n\n      setLoading(true);\n      try {\n        const client = getClient();\n        const response = await client.getAgentSettings(currentAgent.id);\n        const settings = response.data || response;\n        \n        // Use API example questions if available, otherwise keep defaults\n        if (settings.example_questions && settings.example_questions.length > 0) {\n          setExampleQuestions(settings.example_questions);\n          \n          logger.info('UI', 'Loaded custom example questions from API', {\n            agentId: currentAgent.id,\n            questionCount: settings.example_questions.length\n          });\n        } else {\n          logger.info('UI', 'No custom example questions found, using defaults', {\n            agentId: currentAgent.id\n          });\n        }\n      } catch (error) {\n        logger.warn('UI', 'Failed to load agent settings for example questions', {\n          agentId: currentAgent.id,\n          error: error instanceof Error ? error.message : String(error)\n        });\n        // Keep default questions on error\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchExampleQuestions();\n  }, [currentAgent]);\n  \n  return (\n    <div className={cn(\n      \"flex flex-col items-center justify-center h-full py-8\",\n      \"px-4 md:px-8\"\n    )}>\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className={cn(\n          \"text-center w-full\",\n          \"max-w-sm sm:max-w-md md:max-w-lg\"\n        )}\n      >\n        {/* Agent Avatar */}\n        <div className=\"w-16 h-16 rounded-full flex items-center justify-center mb-6 mx-auto overflow-hidden bg-accent\">\n          {currentAgent?.settings?.chatbot_avatar ? (\n            <img \n              src={currentAgent.settings.chatbot_avatar} \n              alt={`${currentAgent.project_name} avatar`} \n              className=\"w-16 h-16 rounded-full object-cover\"\n            />\n          ) : (\n            <Bot className=\"w-8 h-8 text-muted-foreground\" />\n          )}\n        </div>\n        \n        {/* Welcome Text */}\n        <h3 className={cn(\n          \"font-semibold text-foreground mb-2\",\n          \"text-lg sm:text-xl md:text-2xl\"\n        )}>\n          Welcome to {currentAgent?.project_name || 'CustomGPT'}!\n        </h3>\n        <p className={cn(\n          \"text-muted-foreground mb-6 sm:mb-8\",\n          \"text-sm sm:text-base\"\n        )}>\n          I&apos;m here to help answer your questions and assist with your tasks. How can I help you today?\n        </p>\n        \n        {/* Example Prompts */}\n        <div className={cn(\n          \"grid gap-2 sm:gap-3 w-full\",\n          \"grid-cols-2\",\n          \"max-w-full sm:max-w-md md:max-w-lg\",\n          \"auto-cols-fr\" // Ensures equal column widths\n        )}>\n          {exampleQuestions.map((prompt, idx) => (\n            <motion.div\n              key={`${currentAgent?.id}-${idx}`} // Include agent ID to force re-render on agent change\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3, delay: 0.1 + (idx * 0.1) }}\n            >\n              <ExamplePromptCard\n                prompt={prompt}\n                onClick={onPromptClick}\n              />\n            </motion.div>\n          ))}\n        </div>\n        \n        {/* Loading indicator for example questions */}\n        {loading && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className=\"mt-4\"\n          >\n            <p className=\"text-xs text-muted-foreground\">Loading custom questions...</p>\n          </motion.div>\n        )}\n      </motion.div>\n    </div>\n  );\n};\n\ninterface MessageAreaProps {\n  /** Additional CSS classes for styling */\n  className?: string;\n  /** Deployment mode - affects behavior */\n  mode?: 'standalone' | 'widget' | 'floating';\n}\n\n/**\n * MessageArea Component\n * \n * Scrollable area that displays all messages in the current conversation.\n * Handles:\n * - Message rendering with streaming support\n * - Auto-scrolling to latest messages\n * - Citation click handling\n * - Error display\n * - Welcome message when empty\n * - Loading states with typing indicator\n */\nconst MessageArea: React.FC<MessageAreaProps> = ({ className, mode = 'standalone' }) => {\n  const { \n    messages, \n    streamingMessage, \n    isStreaming,\n    error,\n    sendMessage,\n    updateMessageFeedback,\n    loading,\n    clearError,\n    setMessagesForConversation\n  } = useMessageStore();\n  const { currentConversation } = useConversationStore();\n  const { currentAgent } = useAgentStore();\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMessages, setIsLoadingMessages] = React.useState(false);\n  const [prevConversationId, setPrevConversationId] = React.useState<string | null>(null);\n  \n  // Citation modal state - tracks which citation is being viewed\n  const [selectedCitationId, setSelectedCitationId] = React.useState<number | string | null>(null);\n  const [citationModalOpen, setCitationModalOpen] = React.useState(false);\n  \n  // Citation preview state\n  const [previewCitationId, setPreviewCitationId] = React.useState<string | null>(null);\n  const [previewModalOpen, setPreviewModalOpen] = React.useState(false);\n  \n  // Check if we're in free trial mode by looking at localStorage\n  const [isFreeTrialMode, setIsFreeTrialMode] = React.useState(false);\n  \n  React.useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const freeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n      setIsFreeTrialMode(freeTrialFlag === 'true');\n    }\n  }, []);\n  \n  const conversationMessages = currentConversation \n    ? messages.get(currentConversation.id.toString()) || []\n    : [];\n    \n  // Debug logging for widget mode\n  useEffect(() => {\n    if (mode === 'widget' || mode === 'floating') {\n      console.log('[ChatContainer] Widget conversation state:', {\n        currentConversation: currentConversation,\n        conversationId: currentConversation?.id,\n        messageCount: conversationMessages.length,\n        messagesMapSize: messages.size,\n        messagesMapKeys: Array.from(messages.keys()),\n        isLoadingMessages,\n        loading\n      });\n    }\n  }, [currentConversation, conversationMessages, mode, messages, isLoadingMessages, loading]);\n  \n  // Detect conversation change\n  useEffect(() => {\n    if (currentConversation && currentConversation.id.toString() !== prevConversationId) {\n      setIsLoadingMessages(true);\n      setPrevConversationId(currentConversation.id.toString());\n      \n      // Set a timeout to hide loading after a reasonable time\n      const timeout = setTimeout(() => {\n        setIsLoadingMessages(false);\n      }, 1000);\n      \n      return () => clearTimeout(timeout);\n    }\n  }, [currentConversation, prevConversationId]);\n  \n  // Hide loading when messages arrive OR when message loading completes\n  useEffect(() => {\n    if (isLoadingMessages && (conversationMessages.length > 0 || !loading)) {\n      setIsLoadingMessages(false);\n    }\n  }, [conversationMessages, isLoadingMessages, loading]);\n  \n  /**\n   * Auto-scroll effect\n   * Automatically scrolls to the bottom when new messages arrive\n   * or when streaming messages are updated\n   * \n   * Uses instant scroll for conversation switches to avoid annoying\n   * scroll animations when clicking on past chats with many messages.\n   * Uses smooth scroll for new messages and streaming updates.\n   */\n  useEffect(() => {\n    if (scrollRef.current) {\n      // Use instant scroll when loading messages (conversation switch)\n      // Use smooth scroll for real-time message additions and streaming\n      const scrollBehavior = isLoadingMessages ? 'auto' : 'smooth';\n      \n      scrollRef.current.scrollTo({\n        top: scrollRef.current.scrollHeight,\n        behavior: scrollBehavior,\n      });\n    }\n  }, [conversationMessages, streamingMessage, isLoadingMessages]);\n  \n  const handleExamplePrompt = (prompt: string) => {\n    // Check if in free trial mode\n    if (isFreeTrialMode) {\n      toast.error('Free Trial Limitation', {\n        description: 'Sending messages is not available in free trial mode. Please use your own API key to send messages.',\n        duration: 5000,\n      });\n      return;\n    }\n    \n    logger.info('UI', 'Example prompt clicked', { prompt });\n    sendMessage(prompt);\n  };\n  \n  const handleCitationClick = (citation: Citation) => {\n    logger.info('UI', 'Citation clicked', {\n      citationId: citation.id,\n      citationIndex: citation.index,\n      citationTitle: citation.title\n    });\n    \n    // Open citation details modal with the citation ID\n    if (citation.id) {\n      setSelectedCitationId(citation.id);\n      setCitationModalOpen(true);\n    }\n  };\n  \n  const handlePreviewClick = (citation: Citation) => {\n    logger.info('UI', 'Citation preview requested', {\n      citationId: citation.id,\n      citationTitle: citation.title\n    });\n    \n    // Open preview modal with the citation ID\n    if (citation.id) {\n      setPreviewCitationId(citation.id);\n      setPreviewModalOpen(true);\n    }\n  };\n  \n  const handleMessageFeedback = async (messageId: string, feedback: 'like' | 'dislike') => {\n    logger.info('UI', 'Message feedback provided', {\n      messageId,\n      feedback\n    });\n    \n    // Call the message store to update feedback\n    await updateMessageFeedback(messageId, feedback);\n  };\n  \n  return (\n    <div\n      ref={scrollRef}\n      className={cn(\n        'flex-1 overflow-y-auto scroll-smooth',\n        'bg-gradient-to-b from-muted/50 to-background',\n        className\n      )}\n    >\n      {/* Error Message */}\n      {error && (\n        <div className=\"p-4 m-4\">\n          <MessageErrorDisplay \n            error={error}\n            onRetry={() => {\n              // Clear error first\n              clearError();\n              \n              // Then retry sending last message if applicable\n              if (currentConversation) {\n                const conversationMessages = messages.get(currentConversation.id.toString()) || [];\n                const lastUserMessage = conversationMessages\n                  .filter(m => m.role === 'user')\n                  .pop();\n                \n                if (lastUserMessage) {\n                  // Remove the error message before retrying\n                  const filteredMessages = conversationMessages.filter(m => m.id !== lastUserMessage.id);\n                  setMessagesForConversation(\n                    currentConversation.id.toString(), \n                    filteredMessages\n                  );\n                  \n                  // Retry sending the message\n                  sendMessage(lastUserMessage.content);\n                }\n              }\n            }}\n          />\n        </div>\n      )}\n\n      {/* Loading state when switching conversations */}\n      {isLoadingMessages && (\n        <LoadingOverlay \n          visible={true} \n          message={conversationMessages.length > 0 ? \"Loading conversation...\" : \"Switching to conversation...\"}\n          blur={true}\n        />\n      )}\n      \n      {/* Message skeleton fallback for empty conversations */}\n      {isLoadingMessages && conversationMessages.length === 0 && !isStreaming && (\n        <div className=\"space-y-0 opacity-30\">\n          <MessageSkeleton isAssistant={false} lines={2} />\n          <MessageSkeleton isAssistant={true} lines={3} />\n          <MessageSkeleton isAssistant={false} lines={1} />\n          <MessageSkeleton isAssistant={true} lines={4} />\n        </div>\n      )}\n\n      {/* Welcome Message */}\n      {conversationMessages.length === 0 && !streamingMessage && !error && !isLoadingMessages && (\n        <WelcomeMessage onPromptClick={handleExamplePrompt} />\n      )}\n      \n      {/* Messages */}\n      {conversationMessages.length > 0 && (\n        <div className=\"space-y-0\">\n          {conversationMessages.map((message, index) => (\n            <Message\n              key={message.id}\n              message={message}\n              agent={currentAgent}\n              isLast={index === conversationMessages.length - 1}\n              onCitationClick={handleCitationClick}\n              onPreviewClick={handlePreviewClick}\n              onFeedback={(feedback) => handleMessageFeedback(message.id, feedback)}\n              mode={mode}\n            />\n          ))}\n        </div>\n      )}\n      \n      {/* Streaming Message */}\n      {streamingMessage && !conversationMessages.some(m => m.id === streamingMessage.id) && (\n        <Message\n          message={streamingMessage}\n          agent={currentAgent}\n          isStreaming={true}\n          isLast={true}\n          onCitationClick={handleCitationClick}\n          onPreviewClick={handlePreviewClick}\n          mode={mode}\n        />\n      )}\n      \n      {/* Typing Indicator */}\n      {isStreaming && !streamingMessage && (\n        <TypingIndicator />\n      )}\n      \n      {/* Citation Details Modal */}\n      {selectedCitationId && (\n        <CitationDetailsModal\n          isOpen={citationModalOpen}\n          onClose={() => {\n            setCitationModalOpen(false);\n            setSelectedCitationId(null);\n          }}\n          citationId={selectedCitationId}\n          projectId={currentAgent?.id || 0}\n        />\n      )}\n      \n      {/* Citation File Preview Modal */}\n      {previewCitationId && (\n        <CitationFilePreview\n          isOpen={previewModalOpen}\n          onClose={() => {\n            setPreviewModalOpen(false);\n            setPreviewCitationId(null);\n          }}\n          citationId={previewCitationId}\n          fileName={`Citation_${previewCitationId}.txt`}\n        />\n      )}\n    </div>\n  );\n};\n\ninterface ChatHeaderProps {\n  /** Deployment mode affects header layout */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler for agent settings button */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Current conversation ID */\n  currentConversationId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback to create new conversation */\n  onCreateConversation?: () => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n}\n\n/**\n * ChatHeader Component\n * \n * Header bar for the chat interface. Layout changes based on deployment mode:\n * - Standalone: Full header with agent selector\n * - Widget/Floating: Compact header with close button\n * \n * Shows agent status (online/offline) and provides agent switching\n */\nconst ChatHeader: React.FC<ChatHeaderProps> = ({ \n  mode = 'standalone', \n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  conversationRefreshKey\n}) => {\n  const { currentAgent } = useAgentStore();\n  const { isMobile } = useBreakpoint();\n  \n  if (mode === 'widget' || mode === 'floating') {\n    return (\n      <header className=\"border-b border-border bg-background\">\n        {/* Header Content */}\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            <div className=\"w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0 overflow-hidden bg-accent\">\n              {currentAgent?.settings?.chatbot_avatar ? (\n                <img \n                  src={currentAgent.settings.chatbot_avatar} \n                  alt={`${currentAgent.project_name} avatar`} \n                  className=\"w-8 h-8 rounded-lg object-cover\"\n                />\n              ) : (\n                <Bot className=\"w-5 h-5 text-accent-foreground\" />\n              )}\n            </div>\n            <div className=\"min-w-0 flex-1\">\n              <h2 className=\"font-semibold text-foreground truncate\">\n                {currentAgent?.project_name || 'CustomGPT Assistant'}\n              </h2>\n              <p className=\"text-xs text-muted-foreground\">\n                {currentAgent?.is_chat_active ? 'Online' : 'Offline'}\n              </p>\n            </div>\n          </div>\n          \n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"p-1.5 rounded-lg hover:bg-accent hover:text-accent-foreground transition-colors flex-shrink-0\"\n            >\n              <span className=\"sr-only\">Close</span>\n              ×\n            </button>\n          )}\n        </div>\n      </header>\n    );\n  }\n  \n  // For standalone mode, show agent selector header (but not on mobile)\n  if (mode === 'standalone' && !isMobile) {\n    return (\n      <header className=\"flex items-center justify-between px-4 py-3 border-b border-border bg-background\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-lg bg-brand-500 flex items-center justify-center\">\n            <Bot className=\"w-5 h-5 text-white\" />\n          </div>\n          <h1 className=\"text-lg font-semibold text-foreground\">\n            Agent Chat\n          </h1>\n        </div>\n        \n        <div className=\"flex-1 max-w-xs ml-4\">\n          <AgentSelector\n            onSettingsClick={onAgentSettings}\n            className=\"w-full\"\n          />\n        </div>\n      </header>\n    );\n  }\n  \n  return null;\n};\n\ninterface ChatContainerProps {\n  /** Deployment mode - affects layout and styling */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Additional CSS classes */\n  className?: string;\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler when agent settings are requested */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Specific conversation thread to load */\n  threadId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback when message is sent/received */\n  onMessage?: (message: any) => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n  /** Mobile optimization mode */\n  isMobile?: boolean;\n}\n\n/**\n * ChatContainer Component - Main Export\n * \n * The primary chat interface component. Can be deployed in three modes:\n * \n * 1. Standalone: Full-page chat interface\n *    - Use when chat is the main feature\n *    - No fixed dimensions, fills container\n * \n * 2. Widget: Embedded chat widget\n *    - Use for embedding in existing pages\n *    - Fixed dimensions with shadow\n * \n * 3. Floating: Floating chat bubble\n *    - Use for overlay chat interfaces\n *    - Fixed dimensions with stronger shadow\n * \n * @example\n * // Standalone mode\n * <ChatContainer mode=\"standalone\" />\n * \n * @example\n * // Widget mode with close handler\n * <ChatContainer \n *   mode=\"widget\" \n *   onClose={() => setShowChat(false)}\n * />\n */\nexport const ChatContainer: React.FC<ChatContainerProps> = ({ \n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  conversationRefreshKey,\n  isMobile = false\n}) => {\n  const { sendMessage, isStreaming, cancelStreaming } = useMessageStore();\n  const { fetchAgents, agents, currentAgent } = useAgentStore();\n  const { currentConversation } = useConversationStore();\n  \n  // Get widget instance from context\n  const widget = useWidgetSafe();\n  \n  // Track current conversation for the widget\n  const [currentConversationId, setCurrentConversationId] = React.useState<string | null>(null);\n  \n  // Voice modal state\n  const [isVoiceModalOpen, setIsVoiceModalOpen] = React.useState(false);\n  const [voiceError, setVoiceError] = React.useState<string | null>(null);\n  \n  // Get demo store state\n  const { isDemoMode, openAIApiKey } = useDemoStore();\n  \n  // Check if we're in free trial mode by looking at localStorage\n  const [isFreeTrialMode, setIsFreeTrialMode] = React.useState(false);\n  \n  React.useEffect(() => {\n    if (mode === 'standalone' && typeof window !== 'undefined') {\n      const freeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n      setIsFreeTrialMode(freeTrialFlag === 'true');\n    }\n  }, [mode]);\n  \n  // Check if OpenAI key is available\n  const checkVoiceAvailability = () => {\n    // In demo mode, check if user has provided OpenAI key\n    if (isDemoMode) {\n      if (!openAIApiKey) {\n        return {\n          available: false,\n          error: 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n        };\n      }\n      return { available: true };\n    }\n    \n    // In normal mode, check if OpenAI key is in environment\n    // We can't check server-side env vars from client, so we'll let the API handle it\n    return { available: true };\n  };\n  \n  // Handle voice button click\n  const handleVoiceClick = () => {\n    const { available, error } = checkVoiceAvailability();\n    \n    if (!available) {\n      toast.error(error || 'Voice feature is not available');\n      return;\n    }\n    \n    setIsVoiceModalOpen(true);\n  };\n  \n  // Handle conversation management\n  const handleConversationChange = (conversation: any) => {\n    setCurrentConversationId(conversation.id);\n    onConversationChange?.(conversation);\n    // The widget will handle the actual conversation switch\n    if (widget) {\n      widget.switchConversation(conversation.id);\n    }\n  };\n  \n  const handleCreateConversation = async () => {\n    if (widget) {\n      try {\n        const newConv = await widget.createConversation();\n        if (newConv) {\n          setCurrentConversationId(newConv.id);\n        } else {\n          // Show user-friendly message when conversation limit is reached\n          const maxConversations = widget.configuration?.maxConversations || 5;\n          toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n        }\n      } catch (error) {\n        console.error('Failed to create conversation:', error);\n        toast.error('Failed to create conversation. Please try again.');\n      }\n    }\n  };\n\n  /**\n   * Agent initialization effect\n   * Fetches available agents when the component first mounts\n   * Only runs if agents haven't been loaded yet\n   */\n  useEffect(() => {\n    const initializeAgents = async () => {\n      // Only fetch if we don't have agents and no current agent\n      if (agents.length === 0 && !currentAgent) {\n        logger.info('UI', 'Initializing agents on ChatContainer mount');\n        try {\n          await fetchAgents();\n          logger.info('UI', 'Agents initialized successfully', {\n            agentCount: agents.length\n          });\n        } catch (error) {\n          logger.error('UI', 'Failed to initialize agents', error, {\n            errorMessage: error instanceof Error ? error.message : String(error)\n          });\n          console.error('Failed to initialize agents:', error);\n        }\n      } else {\n        logger.info('UI', 'Agents already initialized', {\n          agentCount: agents.length,\n          hasCurrentAgent: !!currentAgent,\n          currentAgentName: currentAgent?.project_name\n        });\n      }\n    };\n\n    initializeAgents();\n  }, [agents.length, currentAgent, fetchAgents]); // Add dependencies for exhaustive deps\n  \n  const handleSendMessage = async (content: string, files?: File[]) => {\n    // Check if in free trial mode\n    if (isFreeTrialMode) {\n      toast.error('Free Trial Limitation', {\n        description: 'Sending messages is not available in free trial mode. Please use your own API key to send messages.',\n        duration: 5000,\n      });\n      return;\n    }\n    \n    logger.info('UI', 'Sending message from ChatContainer', {\n      contentLength: content.length,\n      hasFiles: files && files.length > 0,\n      fileCount: files?.length || 0,\n      currentAgent: currentAgent?.project_name,\n      agentId: currentAgent?.id\n    });\n    \n    try {\n      await sendMessage(content, files);\n      logger.info('UI', 'Message sent successfully');\n    } catch (error) {\n      logger.error('UI', 'Failed to send message from ChatContainer', error, {\n        errorMessage: error instanceof Error ? error.message : String(error),\n        isAuthError: error instanceof Error && (error.message.includes('403') || error.message.includes('unauthorized'))\n      });\n      console.error('Failed to send message:', error);\n    }\n  };\n  \n  const handleStopGeneration = () => {\n    logger.info('UI', 'User cancelled streaming generation');\n    cancelStreaming();\n  };\n  \n  const handleAgentSettings = (agent: Agent) => {\n    logger.info('UI', 'Agent settings requested', {\n      agentId: agent.id,\n      agentName: agent.project_name\n    });\n    onAgentSettings?.(agent);\n  };\n  \n  return (\n    <div\n      className={cn(\n        'flex flex-col bg-background',\n        mode === 'standalone' && 'h-full',\n        mode === 'widget' && !isMobile && 'h-[600px] w-[400px] rounded-lg shadow-xl border border-border',\n        mode === 'floating' && !isMobile && 'h-[600px] w-[400px] rounded-lg shadow-2xl border border-border',\n        isMobile && 'h-full w-full',\n        className\n      )}\n    >\n      <ChatHeader \n        mode={mode} \n        onClose={onClose}\n        onAgentSettings={handleAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        currentConversationId={currentConversationId || currentConversation?.id.toString()}\n        onConversationChange={handleConversationChange}\n        onCreateConversation={handleCreateConversation}\n        conversationRefreshKey={conversationRefreshKey}\n      />\n      <MessageArea className=\"flex-1 overflow-y-auto\" mode={mode} />\n      <div className={cn(\n        \"mt-auto\",\n        isMobile && mode === 'standalone' ? \"pb-[30px]\" : \"\"\n      )}>\n        <ChatInput\n          onSend={handleSendMessage}\n          disabled={isStreaming || isFreeTrialMode}\n          placeholder={\n            isFreeTrialMode \n              ? \"Free trial mode - Use your API key to send messages\" \n              : isStreaming \n                ? \"AI is thinking...\" \n                : \"Send a message...\"\n          }\n          onVoiceClick={handleVoiceClick}\n          isMobile={isMobile}\n          mode={mode}\n        />\n      </div>\n      \n      {/* Branding Footer */}\n      <div className={cn(\n        \"px-4 py-2 border-t border-border bg-muted\",\n        mode === 'standalone' && \"flex items-center justify-center\"\n      )}>\n        <a\n          href=\"https://customgpt.ai\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={cn(\n            \"text-xs text-muted-foreground hover:text-foreground transition-colors\",\n            mode === 'standalone' ? \"inline-flex items-center\" : \"block text-center\"\n          )}\n        >\n          Powered by CustomGPT.ai\n        </a>\n      </div>\n      \n      {/* Voice Modal */}\n      {currentAgent && currentAgent.id && (\n        <VoiceModal\n          isOpen={isVoiceModalOpen}\n          onClose={() => setIsVoiceModalOpen(false)}\n          projectId={currentAgent.id.toString()}\n          projectName={currentAgent.project_name}\n        />\n      )}\n    </div>\n  );\n};","\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-11 w-full items-center justify-between rounded-lg border border-input bg-background px-3.5 py-2 text-sm\",\n      \"transition-all duration-200 ease-out\",\n      \"hover:border-primary/30\",\n      \"focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary\",\n      \"focus:bg-primary/5\",\n      \"disabled:cursor-not-allowed disabled:opacity-50 disabled:bg-muted/50\",\n      \"text-foreground placeholder:text-muted-foreground\",\n      \"[&>span]:line-clamp-1\",\n      \"group\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50 transition-transform duration-200 group-data-[state=open]:rotate-180\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      \"border-b border-gray-200/30 dark:border-gray-800/20 bg-background/50\",\n      \"hover:bg-accent/50 transition-colors\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4 opacity-50\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      \"border-t border-gray-200/30 dark:border-gray-800/20 bg-background/50\",\n      \"hover:bg-accent/50 transition-colors\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4 opacity-50\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden\",\n        \"rounded-lg border border-gray-200/50 dark:border-gray-800/30\",\n        \"bg-background/95 backdrop-blur-md\",\n        \"text-foreground shadow-lg\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n        \"data-[side=bottom]:slide-in-from-top-2\",\n        \"data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2\",\n        \"data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" && [\n          \"data-[side=bottom]:translate-y-1\",\n          \"data-[side=left]:-translate-x-1\",\n          \"data-[side=right]:translate-x-1\",\n          \"data-[side=top]:-translate-y-1\",\n        ],\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1.5\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-pointer select-none items-center\",\n      \"rounded-md py-2 pl-8 pr-2 text-sm outline-none\",\n      \"transition-all duration-150\",\n      \"hover:bg-accent hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[state=checked]:bg-primary/10 data-[state=checked]:text-primary\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-4 w-4 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-3.5 w-3.5 animate-in fade-in-0 zoom-in-0\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","\"use client\"\n\nimport * as React from \"react\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  SelectGroup,\n  SelectLabel,\n  SelectSeparator,\n} from \"@/components/ui/select\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface SelectOption {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\ninterface SimpleSelectProps {\n  value: string;\n  onValueChange: (value: string) => void;\n  options: SelectOption[];\n  placeholder?: string;\n  className?: string;\n  disabled?: boolean;\n  name?: string;\n  id?: string;\n}\n\n/**\n * Simple Select Component\n * \n * A wrapper around the Radix UI Select component that provides a simpler API\n * similar to native HTML select elements, making migration easier.\n * \n * @example\n * ```tsx\n * <SimpleSelect\n *   value={dateRange}\n *   onValueChange={setDateRange}\n *   options={[\n *     { value: '7d', label: 'Last 7 days' },\n *     { value: '30d', label: 'Last 30 days' },\n *     { value: '90d', label: 'Last 90 days' },\n *     { value: '1y', label: 'Last year' }\n *   ]}\n *   placeholder=\"Select date range\"\n * />\n * ```\n */\nexport function SimpleSelect({\n  value,\n  onValueChange,\n  options,\n  placeholder = \"Select an option\",\n  className,\n  disabled = false,\n  name,\n  id,\n}: SimpleSelectProps) {\n  return (\n    <Select\n      value={value}\n      onValueChange={onValueChange}\n      disabled={disabled}\n      name={name}\n    >\n      <SelectTrigger className={cn(\"w-full\", className)} id={id}>\n        <SelectValue placeholder={placeholder} />\n      </SelectTrigger>\n      <SelectContent>\n        {options.map((option) => (\n          <SelectItem\n            key={option.value}\n            value={option.value}\n            disabled={option.disabled}\n          >\n            {option.label}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n\n/**\n * Grouped Select Component\n * \n * For selects with grouped options (like languages grouped by region)\n */\nexport interface SelectGroup {\n  label: string;\n  options: SelectOption[];\n}\n\ninterface GroupedSelectProps extends Omit<SimpleSelectProps, 'options'> {\n  groups: SelectGroup[];\n}\n\nexport function GroupedSelect({\n  value,\n  onValueChange,\n  groups,\n  placeholder = \"Select an option\",\n  className,\n  disabled = false,\n  name,\n  id,\n}: GroupedSelectProps) {\n  return (\n    <Select\n      value={value}\n      onValueChange={onValueChange}\n      disabled={disabled}\n      name={name}\n    >\n      <SelectTrigger className={cn(\"w-full\", className)} id={id}>\n        <SelectValue placeholder={placeholder} />\n      </SelectTrigger>\n      <SelectContent>\n        {groups.map((group, index) => (\n          <React.Fragment key={index}>\n            {index > 0 && <SelectSeparator />}\n            <SelectGroup>\n              <SelectLabel>{group.label}</SelectLabel>\n              {group.options.map((option) => (\n                <SelectItem\n                  key={option.value}\n                  value={option.value}\n                  disabled={option.disabled}\n                >\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectGroup>\n          </React.Fragment>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n\n","import React from 'react';\nimport { X, Calendar, User, Hash, Clock, AlertCircle, Copy } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { toast } from 'sonner';\nimport type { Conversation } from '@/types';\nimport { Button } from '@/components/ui/button';\nimport { formatTimestamp, cn } from '@/lib/utils';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\ninterface ConversationDetailsModalProps {\n  conversation: Conversation | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const ConversationDetailsModal: React.FC<ConversationDetailsModalProps> = ({\n  conversation,\n  isOpen,\n  onClose,\n}) => {\n  const { isMobile } = useBreakpoint();\n  \n  if (!isOpen || !conversation) return null;\n\n  const copyToClipboard = (text: string, label: string) => {\n    navigator.clipboard.writeText(text);\n    toast.success(`${label} copied to clipboard`);\n  };\n\n  const formatFullTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'short'\n    });\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black bg-opacity-50 z-50\"\n            onClick={onClose}\n          />\n\n          {/* Modal */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            className={cn(\n              \"fixed bg-background shadow-xl z-50\",\n              isMobile \n                ? \"inset-x-0 bottom-0 top-20 rounded-t-xl flex flex-col\" \n                : \"inset-x-0 top-[10%] mx-auto max-w-2xl rounded-lg max-h-[80vh] overflow-hidden\"\n            )}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {/* Header */}\n            <div className={cn(\n              \"flex items-center justify-between border-b border-border bg-background/95 backdrop-blur-sm flex-shrink-0\",\n              isMobile ? \"px-4 py-4\" : \"p-6\"\n            )}>\n              <h2 className={cn(\n                \"font-semibold text-foreground\",\n                isMobile ? \"text-base\" : \"text-xl\"\n              )}>Conversation Details</h2>\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={onClose}\n                className={cn(\n                  isMobile ? \"h-9 w-9 touch-target\" : \"h-8 w-8\"\n                )}\n              >\n                <X className={cn(\n                  isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n                )} />\n              </Button>\n            </div>\n\n            {/* Content */}\n            <div className={cn(\n              \"overflow-y-auto\",\n              isMobile \n                ? \"flex-1 px-4 py-4 pb-6 safe-area-pb space-y-6\" \n                : \"p-6 space-y-6 max-h-[calc(80vh-200px)]\"\n            )}>\n              {/* Basic Information */}\n              <div>\n                <h3 className={cn(\n                  \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                  isMobile ? \"text-xs\" : \"text-sm\"\n                )}>\n                  Basic Information\n                </h3>\n                <div className={cn(\n                  \"bg-muted rounded-lg space-y-4\",\n                  isMobile ? \"p-4\" : \"p-4 space-y-3\"\n                )}>\n                  {/* Conversation Name */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Conversation Name</span>\n                    </div>\n                    <span className={cn(\n                      \"text-foreground font-medium break-words\",\n                      isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                    )}>{conversation.name}</span>\n                  </div>\n\n                  {/* Conversation ID */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Conversation ID</span>\n                    </div>\n                    <div className={cn(\n                      \"flex items-center gap-2\",\n                      isMobile ? \"ml-6\" : \"\"\n                    )}>\n                      <span className={cn(\n                        \"text-foreground font-mono\",\n                        isMobile ? \"text-xs\" : \"text-sm\"\n                      )}>{conversation.id}</span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className={cn(\n                          isMobile ? \"h-8 w-8 touch-target\" : \"h-6 w-6\"\n                        )}\n                        onClick={() => copyToClipboard(conversation.id.toString(), 'Conversation ID')}\n                      >\n                        <Copy className={cn(\n                          isMobile ? \"h-4 w-4\" : \"h-3 w-3\"\n                        )} />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Session ID */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Session ID</span>\n                    </div>\n                    <div className={cn(\n                      \"flex items-center gap-2\",\n                      isMobile ? \"ml-6\" : \"\"\n                    )}>\n                      <span \n                        className={cn(\n                          \"text-foreground font-mono break-all\",\n                          isMobile ? \"text-sm\" : \"text-sm truncate max-w-[300px]\"\n                        )} \n                        title={conversation.session_id}\n                      >\n                        {conversation.session_id}\n                      </span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className={cn(\n                          isMobile ? \"h-8 w-8 touch-target flex-shrink-0\" : \"h-6 w-6\"\n                        )}\n                        onClick={() => copyToClipboard(conversation.session_id, 'Session ID')}\n                      >\n                        <Copy className={cn(\n                          isMobile ? \"h-4 w-4\" : \"h-3 w-3\"\n                        )} />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Project ID */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Project ID</span>\n                    </div>\n                    <span className={cn(\n                      \"text-foreground\",\n                      isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                    )}>{conversation.project_id}</span>\n                  </div>\n\n                  {/* Message Count */}\n                  {conversation.message_count !== undefined && (\n                    <div className={cn(\n                      isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                    )}>\n                      <div className=\"flex items-center gap-2\">\n                        <Hash className={cn(\n                          \"text-muted-foreground\",\n                          isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                        )} />\n                        <span className={cn(\n                          \"font-medium text-foreground\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>Message Count</span>\n                      </div>\n                      <span className={cn(\n                        \"text-foreground\",\n                        isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                      )}>{conversation.message_count} messages</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Timeline */}\n              <div>\n                <h3 className={cn(\n                  \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                  isMobile ? \"text-xs\" : \"text-sm\"\n                )}>\n                  Timeline\n                </h3>\n                <div className={cn(\n                  \"bg-muted rounded-lg space-y-4\",\n                  isMobile ? \"p-4\" : \"p-4 space-y-3\"\n                )}>\n                  {/* Created At */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Created At</span>\n                    </div>\n                    <div className={cn(\n                      isMobile ? \"ml-6 space-y-1\" : \"text-right\"\n                    )}>\n                      <span className={cn(\n                        \"text-foreground block\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>{formatFullTimestamp(conversation.created_at)}</span>\n                      <span className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"text-xs\" : \"text-xs\"\n                      )}>({formatTimestamp(conversation.created_at)})</span>\n                    </div>\n                  </div>\n\n                  {/* Last Updated */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Last Updated</span>\n                    </div>\n                    <div className={cn(\n                      isMobile ? \"ml-6 space-y-1\" : \"text-right\"\n                    )}>\n                      <span className={cn(\n                        \"text-foreground block\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>{formatFullTimestamp(conversation.updated_at)}</span>\n                      <span className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"text-xs\" : \"text-xs\"\n                      )}>({formatTimestamp(conversation.updated_at)})</span>\n                    </div>\n                  </div>\n\n                  {/* Deleted At */}\n                  {conversation.deleted_at && (\n                    <div className={cn(\n                      isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                    )}>\n                      <div className=\"flex items-center gap-2\">\n                        <AlertCircle className={cn(\n                          \"text-red-400\",\n                          isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                        )} />\n                        <span className={cn(\n                          \"font-medium text-red-700\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>Deleted At</span>\n                      </div>\n                      <div className={cn(\n                        isMobile ? \"ml-6 space-y-1\" : \"text-right\"\n                      )}>\n                        <span className={cn(\n                          \"text-red-900 block\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>{formatFullTimestamp(conversation.deleted_at)}</span>\n                        <span className={cn(\n                          \"text-red-500\",\n                          isMobile ? \"text-xs\" : \"text-xs\"\n                        )}>({formatTimestamp(conversation.deleted_at)})</span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* User Information */}\n              {conversation.created_by && (\n                <div>\n                  <h3 className={cn(\n                    \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                    isMobile ? \"text-xs\" : \"text-sm\"\n                  )}>\n                    User Information\n                  </h3>\n                  <div className={cn(\n                    \"bg-accent rounded-lg\",\n                    isMobile ? \"p-4\" : \"p-4\"\n                  )}>\n                    <div className={cn(\n                      isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                    )}>\n                      <div className=\"flex items-center gap-2\">\n                        <User className={cn(\n                          \"text-muted-foreground\",\n                          isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                        )} />\n                        <span className={cn(\n                          \"font-medium text-foreground\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>Created By</span>\n                      </div>\n                      <span className={cn(\n                        \"text-foreground\",\n                        isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                      )}>User ID: {conversation.created_by}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n            </div>\n\n            {/* Footer */}\n            {!isMobile && (\n              <div className=\"p-6 border-t border-border bg-accent\">\n                <div className=\"flex justify-end\">\n                  <Button onClick={onClose}>\n                    Close\n                  </Button>\n                </div>\n              </div>\n            )}\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};","import React, { useState } from 'react';\nimport { AlertTriangle, Trash2, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\ninterface DeleteConversationDialogProps {\n  isOpen: boolean;\n  conversationName: string;\n  messageCount?: number;\n  onConfirm: () => Promise<void>;\n  onCancel: () => void;\n}\n\nexport const DeleteConversationDialog: React.FC<DeleteConversationDialogProps> = ({\n  isOpen,\n  conversationName,\n  messageCount,\n  onConfirm,\n  onCancel,\n}) => {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { isMobile } = useBreakpoint();\n\n  const handleConfirm = async () => {\n    setIsDeleting(true);\n    setError(null);\n    \n    try {\n      await onConfirm();\n    } catch (err: any) {\n      console.error('Delete failed:', err);\n      \n      // Parse error message based on status code\n      let errorMessage = 'Failed to delete conversation';\n      \n      if (err.status === 400) {\n        errorMessage = 'Invalid request. Please try again.';\n      } else if (err.status === 401) {\n        errorMessage = 'Authentication failed. Please refresh the page and try again.';\n      } else if (err.status === 404) {\n        errorMessage = 'Conversation not found. It may have already been deleted.';\n      } else if (err.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      setIsDeleting(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-black bg-opacity-50\"\n            onClick={!isDeleting ? onCancel : undefined}\n          />\n\n          {/* Dialog */}\n          <motion.div\n            initial={{ opacity: 0, scale: isMobile ? 1 : 0.95, y: isMobile ? '100%' : 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: isMobile ? 1 : 0.95, y: isMobile ? '100%' : 0 }}\n            className={cn(\n              \"relative bg-background shadow-xl\",\n              isMobile \n                ? \"fixed inset-x-0 bottom-0 rounded-t-xl safe-area-pb\" \n                : \"w-full max-w-md rounded-lg\"\n            )}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className={cn(\n              isMobile ? \"p-4 pb-6\" : \"p-6\"\n            )}>\n              {/* Header */}\n              <div className={cn(\n                \"flex items-start\",\n                isMobile ? \"gap-3\" : \"gap-4\"\n              )}>\n                <div className={cn(\n                  \"bg-red-100 rounded-full flex-shrink-0\",\n                  isMobile ? \"p-2.5\" : \"p-3\"\n                )}>\n                  <AlertTriangle className={cn(\n                    \"text-red-600\",\n                    isMobile ? \"w-5 h-5\" : \"w-6 h-6\"\n                  )} />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className={cn(\n                    \"font-semibold text-foreground\",\n                    isMobile ? \"text-base\" : \"text-lg\"\n                  )}>\n                    Delete Conversation\n                  </h3>\n                  <p className={cn(\n                    \"mt-2 text-muted-foreground\",\n                    isMobile ? \"text-sm\" : \"text-sm\"\n                  )}>\n                    Are you sure you want to delete <strong>&ldquo;{conversationName}&rdquo;</strong>?\n                  </p>\n                  \n                  {messageCount !== undefined && messageCount > 0 && (\n                    <p className={cn(\n                      \"mt-2 text-muted-foreground\",\n                      isMobile ? \"text-sm\" : \"text-sm\"\n                    )}>\n                      This conversation contains {messageCount} message{messageCount !== 1 ? 's' : ''}.\n                    </p>\n                  )}\n                  \n                  <div className={cn(\n                    \"mt-3 bg-red-50 rounded-lg\",\n                    isMobile ? \"p-3\" : \"p-3\"\n                  )}>\n                    <p className={cn(\n                      \"text-red-800 font-medium\",\n                      isMobile ? \"text-sm\" : \"text-sm\"\n                    )}>\n                      ⚠️ This action cannot be undone\n                    </p>\n                    <p className={cn(\n                      \"text-red-700 mt-1\",\n                      isMobile ? \"text-xs\" : \"text-xs\"\n                    )}>\n                      All messages and data associated with this conversation will be permanently deleted.\n                    </p>\n                  </div>\n\n                  {/* Error Display */}\n                  {error && (\n                    <div className={cn(\n                      \"mt-3 bg-red-100 border border-red-200 rounded-lg\",\n                      isMobile ? \"p-3\" : \"p-3\"\n                    )}>\n                      <p className={cn(\n                        \"text-red-900 font-medium\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>\n                        Error: {error}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className={cn(\n                \"flex items-center gap-3\",\n                isMobile ? \"mt-6 flex-col-reverse\" : \"mt-6 justify-end\"\n              )}>\n                <Button\n                  variant=\"outline\"\n                  onClick={onCancel}\n                  disabled={isDeleting}\n                  className={cn(\n                    isMobile && \"w-full h-11 touch-target\"\n                  )}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleConfirm}\n                  disabled={isDeleting}\n                  className={cn(\n                    \"min-w-[100px]\",\n                    isMobile && \"w-full h-11 touch-target\"\n                  )}\n                >\n                  {isDeleting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                      Deleting...\n                    </>\n                  ) : (\n                    <>\n                      <Trash2 className={cn(\n                        \"mr-2\",\n                        isMobile ? \"w-4 h-4\" : \"w-4 h-4\"\n                      )} />\n                      Delete\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n      )}\n    </AnimatePresence>\n  );\n};","/**\n * Conversation Sidebar Component\n * \n * Manages the conversation list and provides quick navigation\n * between different chat sessions. Includes conversation management\n * features like create, rename, and delete.\n * \n * Features:\n * - Conversation list with search/filter\n * - Create new conversation\n * - Rename conversations inline\n * - Delete conversations with confirmation\n * - Agent management access\n * - Data source management\n * - Analytics dashboard access\n * - Collapsible sidebar\n * \n * State Management:\n * - Conversations from conversationStore\n * - Current conversation selection\n * - Search/filter state (local)\n * - Collapse state (passed from parent)\n * \n * UI/UX Features:\n * - Hover states and animations\n * - Keyboard shortcuts (future enhancement)\n * - Context menu for conversation actions\n * - Auto-scroll to selected conversation\n * - Responsive design for mobile\n * \n * Features:\n * - Advanced conversation organization with categories and search\n * - Bulk conversation management with export/import capabilities\n * - Customizable sidebar design with responsive layout\n * - Professional conversation management with templates and pinning\n * - Comprehensive conversation history and analytics\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport Link from 'next/link';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  MessageSquare, \n  Plus, \n  MoreHorizontal, \n  Trash2, \n  Edit3, \n  Calendar,\n  Search,\n  X,\n  Bot,\n  Filter,\n  ChevronDown,\n  ChevronUp,\n  Info,\n  Download,\n  Share2,\n  Clock,\n  User\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Conversation } from '@/types';\nimport { useConversationStore, useAgentStore, useMessageStore } from '@/hooks/useWidgetStore';\nimport { cn, formatTimestamp, generateConversationName } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { SimpleSelect } from '@/components/ui/simple-select';\nimport { logger } from '@/lib/logger';\nimport { ConversationDetailsModal } from './ConversationDetailsModal';\nimport { DeleteConversationDialog } from './DeleteConversationDialog';\nimport { ConversationSkeleton, Spinner } from '@/components/ui/loading';\nimport { useDemoModeContext } from '@/contexts/DemoModeContext';\n\n/**\n * Props for individual conversation item\n * \n * @property conversation - Conversation data object\n * @property isSelected - Whether this conversation is currently active\n * @property onSelect - Callback when conversation is clicked\n * @property onDelete - Callback for deleting conversation\n * @property onRename - Callback for renaming conversation\n */\ninterface ConversationItemProps {\n  conversation: Conversation;\n  isSelected: boolean;\n  onSelect: (conversation: Conversation) => void;\n  onDelete: (conversationId: string) => void;\n  onRename: (conversationId: string, newName: string) => void;\n}\n\n/**\n * Individual Conversation Item Component\n * \n * Renders a single conversation in the sidebar with actions.\n * Features inline editing and context menu for management.\n */\nconst ConversationItem: React.FC<ConversationItemProps> = ({\n  conversation,\n  isSelected,\n  onSelect,\n  onDelete,\n  onRename\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editName, setEditName] = useState(conversation.name);\n  const [showMenu, setShowMenu] = useState(false);\n  const [showDetails, setShowDetails] = useState(false);\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  // Close menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setShowMenu(false);\n      }\n    };\n\n    if (showMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [showMenu]);\n\n  // Focus input when editing starts\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n      inputRef.current.select();\n    }\n  }, [isEditing]);\n\n  const handleEdit = () => {\n    setIsEditing(true);\n    setShowMenu(false);\n  };\n\n  const handleSaveEdit = () => {\n    if (editName.trim() && editName.trim() !== conversation.name) {\n      onRename(conversation.id.toString(), editName.trim());\n    }\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSaveEdit();\n    } else if (e.key === 'Escape') {\n      handleCancelEdit();\n    }\n  };\n\n  const handleDelete = () => {\n    setShowDeleteDialog(true);\n    setShowMenu(false);\n  };\n\n  const handleConfirmDelete = async () => {\n    await onDelete(conversation.id.toString());\n    setShowDeleteDialog(false);\n  };\n\n  return (\n    <div\n      className={cn(\n        'group relative p-3 rounded-lg cursor-pointer transition-colors',\n        'hover:bg-accent',\n        isSelected && 'bg-accent/50 hover:bg-accent/70'\n      )}\n      onClick={async () => {\n        if (isEditing || isLoading) return;\n        setIsLoading(true);\n        try {\n          await onSelect(conversation);\n        } finally {\n          setIsLoading(false);\n        }\n      }}\n    >\n      {/* Loading overlay for individual conversation */}\n      {isLoading && (\n        <div className=\"absolute inset-0 bg-background/70 backdrop-blur-sm rounded-lg flex items-center justify-center z-10\">\n          <Spinner size=\"sm\" />\n        </div>\n      )}\n      \n      <div className=\"flex items-start justify-between gap-2\">\n        <div className=\"flex-1 min-w-0\">\n          {isEditing ? (\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={editName}\n              onChange={(e) => setEditName(e.target.value)}\n              onBlur={handleSaveEdit}\n              onKeyDown={handleKeyDown}\n              className=\"w-full px-2 py-1 text-sm font-medium text-foreground bg-background border border-input rounded focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent\"\n              maxLength={100}\n            />\n          ) : (\n            <h3 className=\"font-medium text-foreground text-sm truncate\">\n              {conversation.name}\n            </h3>\n          )}\n          \n          <div className=\"flex items-center gap-2 mt-1 text-xs text-muted-foreground\">\n            <Clock className=\"w-3 h-3\" />\n            <span title={new Date(conversation.updated_at).toLocaleString()}>\n              {formatTimestamp(conversation.updated_at)}\n            </span>\n            {conversation.message_count !== undefined && (\n              <>\n                <span>•</span>\n                <MessageSquare className=\"w-3 h-3\" />\n                <span>{conversation.message_count}</span>\n              </>\n            )}\n          </div>\n          \n          {/* More Details Button */}\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              setShowDetails(!showDetails);\n            }}\n            className=\"flex items-center gap-1 mt-2 text-xs text-muted-foreground hover:text-foreground transition-colors\"\n          >\n            {showDetails ? (\n              <>\n                <ChevronUp className=\"w-3 h-3\" />\n                Hide Details\n              </>\n            ) : (\n              <>\n                <ChevronDown className=\"w-3 h-3\" />\n                More Details\n              </>\n            )}\n          </button>\n          \n          {/* Expandable Details Section */}\n          <AnimatePresence>\n            {showDetails && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                exit={{ opacity: 0, height: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"mt-2 pt-2 border-t border-border\"\n              >\n                <div className=\"space-y-1 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Session ID:</span>\n                    <span className=\"font-mono text-foreground truncate max-w-[150px]\" title={conversation.session_id}>\n                      {conversation.session_id}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Created:</span>\n                    <span className=\"text-foreground\">{formatTimestamp(conversation.created_at)}</span>\n                  </div>\n                  {conversation.deleted_at && (\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-destructive\">Deleted:</span>\n                      <span className=\"text-destructive\">{formatTimestamp(conversation.deleted_at)}</span>\n                    </div>\n                  )}\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Menu Button */}\n        {!isEditing && (\n          <div className=\"relative\" ref={menuRef}>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setShowMenu(!showMenu);\n              }}\n              className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-muted-foreground hover:text-foreground\"\n            >\n              <MoreHorizontal className=\"h-3 w-3\" />\n            </Button>\n\n            {/* Dropdown Menu */}\n            <AnimatePresence>\n              {showMenu && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.95, y: -5 }}\n                  animate={{ opacity: 1, scale: 1, y: 0 }}\n                  exit={{ opacity: 0, scale: 0.95, y: -5 }}\n                  transition={{ duration: 0.1 }}\n                  className=\"absolute right-0 top-6 mt-1 w-40 bg-background border border-border rounded-lg shadow-lg z-50\"\n                >\n                  <div className=\"py-1\">\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setShowDetailsModal(true);\n                        setShowMenu(false);\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-foreground hover:bg-accent\"\n                    >\n                      <Info className=\"w-3 h-3\" />\n                      View Details\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEdit();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-foreground hover:bg-accent\"\n                    >\n                      <Edit3 className=\"w-3 h-3\" />\n                      Rename\n                    </button>\n                    <div className=\"border-t border-border my-1\" />\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDelete();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-destructive hover:bg-destructive/10\"\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                      Delete\n                    </button>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        )}\n      </div>\n\n      {/* Conversation Details Modal */}\n      <ConversationDetailsModal\n        conversation={conversation}\n        isOpen={showDetailsModal}\n        onClose={() => setShowDetailsModal(false)}\n      />\n\n      {/* Delete Conversation Dialog */}\n      <DeleteConversationDialog\n        isOpen={showDeleteDialog}\n        conversationName={conversation.name}\n        messageCount={conversation.message_count}\n        onConfirm={handleConfirmDelete}\n        onCancel={() => setShowDeleteDialog(false)}\n      />\n    </div>\n  );\n};\n\ninterface ConversationSidebarProps {\n  className?: string;\n  isCollapsed?: boolean;\n  onToggle?: () => void;\n  isMobile?: boolean;\n  onConversationSelect?: () => void;\n}\n\nexport const ConversationSidebar: React.FC<ConversationSidebarProps> = ({\n  className,\n  isCollapsed = false,\n  onToggle,\n  isMobile = false,\n  onConversationSelect\n}) => {\n  const [isCreating, setIsCreating] = useState(false);\n  const [showSortFilter, setShowSortFilter] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  \n  const { isFreeTrialMode } = useDemoModeContext();\n  \n  const { \n    conversations, \n    currentConversation, \n    loading, \n    error,\n    fetchConversations,\n    createConversation,\n    selectConversation,\n    deleteConversation,\n    updateConversation,\n    // Pagination state\n    currentPage,\n    totalPages,\n    totalConversations,\n    perPage,\n    // Sorting and filtering state\n    sortOrder,\n    sortBy,\n    userFilter,\n    // Client-side filtering state and methods\n    searchQuery: storeSearchQuery,\n    searchMode: storeSearchMode,\n    dateFilter: storeDateFilter,\n    setSearchQuery,\n    setSearchMode,\n    setDateFilter,\n    applyFilters\n  } = useConversationStore();\n  \n  const { currentAgent } = useAgentStore();\n  const { clearMessages, loadMessages } = useMessageStore();\n\n  // Fetch conversations when agent changes\n  useEffect(() => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (currentAgent && !isDemoMode) {\n      logger.info('UI', 'Agent changed in sidebar, fetching conversations', {\n        agentId: currentAgent.id,\n        agentName: currentAgent.project_name,\n        isActive: currentAgent.is_chat_active\n      });\n      fetchConversations(currentAgent.id);\n    } else if (!currentAgent) {\n      logger.warn('UI', 'No current agent selected in sidebar');\n    } else if (isDemoMode) {\n      logger.info('UI', 'Skipping conversation fetch in demo mode');\n    }\n  }, [currentAgent, fetchConversations]);\n\n  // Local search query for input handling\n  const [localSearchQuery, setLocalSearchQuery] = useState(storeSearchQuery);\n\n  // Update local state when store state changes\n  useEffect(() => {\n    setLocalSearchQuery(storeSearchQuery);\n  }, [storeSearchQuery]);\n\n  // Debounced search function\n  const debouncedSearch = useCallback(\n    (query: string) => {\n      setIsSearching(true);\n      try {\n        setSearchQuery(query.trim());\n      } catch (error) {\n        logger.error('UI', 'Failed to search conversations', error);\n      } finally {\n        setIsSearching(false);\n      }\n    },\n    [setSearchQuery]\n  );\n\n  // Debounce search calls\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (localSearchQuery !== storeSearchQuery) {\n        debouncedSearch(localSearchQuery);\n      }\n    }, 300); // 300ms debounce\n\n    return () => clearTimeout(timeoutId);\n  }, [localSearchQuery, storeSearchQuery, debouncedSearch]);\n\n  // Handle search input change\n  const handleSearch = (query: string) => {\n    setLocalSearchQuery(query);\n  };\n\n  // Handle date filter change\n  const handleDateFilterChange = (filter: 'all' | 'today' | 'week' | 'month') => {\n    setDateFilter(filter);\n  };\n\n  // Handle search mode change  \n  const handleSearchModeChange = (mode: 'name' | 'id' | 'session') => {\n    setSearchMode(mode);\n  };\n  \n  // Use conversations directly since filtering is now done server-side\n  const filteredConversations = Array.isArray(conversations) ? conversations : [];\n\n  const handleNewConversation = async () => {\n    if (!currentAgent || isCreating) return;\n    \n    if (isFreeTrialMode) {\n      toast.error('Creating new conversations is not available in free trial mode');\n      return;\n    }\n    \n    logger.info('UI', 'Creating new conversation', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n    \n    setIsCreating(true);\n    try {\n      const name = `New Chat ${new Date().toLocaleDateString()}`;\n      await createConversation(currentAgent.id, name);\n      clearMessages(); // Clear current messages when starting new conversation\n      logger.info('UI', 'New conversation created successfully', { name });\n      toast.success('New conversation created');\n      \n      // Call the onConversationSelect callback to close the mobile drawer\n      if (onConversationSelect) {\n        onConversationSelect();\n      }\n    } catch (error) {\n      logger.error('UI', 'Failed to create conversation', error, {\n        agentId: currentAgent.id,\n        errorMessage: error instanceof Error ? error.message : String(error)\n      });\n      toast.error('Failed to create new conversation');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const handleSelectConversation = async (conversation: Conversation) => {\n    // Prevent multiple clicks while switching\n    if (loading) return;\n    \n    logger.info('UI', 'Selecting conversation', {\n      conversationId: conversation.id,\n      conversationName: conversation.name,\n      projectId: conversation.project_id,\n      messageCount: conversation.message_count\n    });\n    \n    selectConversation(conversation);\n    \n    // Load messages for the selected conversation\n    try {\n      logger.info('UI', 'Loading messages for selected conversation', {\n        conversationId: conversation.id,\n        agentId: currentAgent?.id,\n        agentName: currentAgent?.project_name\n      });\n      \n      await loadMessages(conversation.id.toString());\n      \n      logger.info('UI', 'Messages loaded successfully for conversation', {\n        conversationId: conversation.id\n      });\n      \n      // Call the onConversationSelect callback to close the mobile drawer\n      if (onConversationSelect) {\n        onConversationSelect();\n      }\n    } catch (error) {\n      logger.error('UI', 'Failed to load messages for conversation', error, {\n        conversationId: conversation.id,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        errorType: error instanceof Error ? error.constructor.name : typeof error\n      });\n      toast.error('Failed to load conversation messages');\n    }\n  };\n\n  const handleDeleteConversation = async (conversationId: string) => {\n    if (isFreeTrialMode) {\n      toast.error('Deleting conversations is not available in free trial mode');\n      return;\n    }\n    \n    try {\n      await deleteConversation(conversationId);\n      toast.success('Conversation deleted');\n    } catch (error) {\n      toast.error('Failed to delete conversation');\n    }\n  };\n\n  const handleRenameConversation = async (conversationId: string, newName: string) => {\n    if (isFreeTrialMode) {\n      toast.error('Renaming conversations is not available in free trial mode');\n      return;\n    }\n    \n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) return;\n    \n    try {\n      await updateConversation(conversation.project_id, conversation.session_id, { name: newName });\n      toast.success('Conversation renamed');\n    } catch (error) {\n      toast.error('Failed to rename conversation');\n    }\n  };\n\n  // Use prop or fallback to viewport check if needed\n  // const isMobile = typeof window !== 'undefined' && window.innerWidth < 768;\n  \n  if (isCollapsed && !isMobile) {\n    return (\n      <div className={cn('w-12 bg-muted border-r border-border flex flex-col', className)}>\n        <div className=\"p-2\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggle}\n            className=\"w-8 h-8\"\n            title=\"Expand sidebar\"\n          >\n            <MessageSquare className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\n      'bg-muted flex flex-col',\n      isMobile ? 'w-full h-full' : 'w-80 border-r border-border',\n      className\n    )}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-border bg-background\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h2 className=\"font-semibold text-foreground\">Conversations</h2>\n          {!isMobile && (\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={onToggle}\n              className=\"h-8 w-8\"\n              title=\"Collapse sidebar\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n        \n        {/* Search */}\n        <div className=\"space-y-2\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <input\n              type=\"text\"\n              placeholder={isMobile ? \"Search conversations...\" : `Search by ${storeSearchMode}...`}\n              value={localSearchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              className={cn(\n                \"w-full pl-9 pr-12 py-2 text-sm border border-input bg-background text-foreground rounded-lg focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent placeholder:text-muted-foreground\",\n                isMobile && \"py-3\"\n              )}\n            />\n            {isSearching && (\n              <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-brand-600\"></div>\n              </div>\n            )}\n          </div>\n          \n          {/* Search Mode Selector - Hidden on mobile */}\n          {!isMobile && (\n            <div className=\"flex gap-1\">\n              <button\n                onClick={() => handleSearchModeChange('name')}\n                className={cn(\n                  \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                  storeSearchMode === 'name' \n                    ? \"bg-brand-500 text-white\" \n                    : \"bg-muted text-muted-foreground hover:bg-accent\"\n                )}\n              >\n                Name\n              </button>\n              <button\n                onClick={() => handleSearchModeChange('id')}\n                className={cn(\n                  \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                  storeSearchMode === 'id' \n                    ? \"bg-brand-500 text-white\" \n                    : \"bg-muted text-muted-foreground hover:bg-accent\"\n                )}\n              >\n                ID\n              </button>\n              <button\n                onClick={() => handleSearchModeChange('session')}\n                className={cn(\n                  \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                  storeSearchMode === 'session' \n                    ? \"bg-brand-500 text-white\" \n                    : \"bg-muted text-muted-foreground hover:bg-accent\"\n                )}\n              >\n                Session\n              </button>\n            </div>\n          )}\n        </div>\n        \n        {/* Sort and Filter Toggle - Hidden on mobile */}\n        {!isMobile && (\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setShowSortFilter(!showSortFilter)}\n            className=\"w-full mt-2 justify-center gap-2\"\n          >\n            <Filter className=\"h-3 w-3\" />\n            Sort & Filter\n            {showSortFilter ? <ChevronUp className=\"h-3 w-3\" /> : <ChevronDown className=\"h-3 w-3\" />}\n          </Button>\n        )}\n        \n        {/* Sort and Filter Options - Hidden on mobile */}\n        {!isMobile && showSortFilter && (\n          <AnimatePresence>\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"space-y-3 mt-3 overflow-hidden\"\n            >\n              {/* Sort Options */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Sort By</label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <SimpleSelect\n                    value={sortBy}\n                    onValueChange={(value) => {\n                      if (currentAgent) {\n                        // Update the sort state and apply filters client-side\n                        fetchConversations(currentAgent.id, { \n                          orderBy: value \n                        });\n                      }\n                    }}\n                    options={[\n                      { value: 'id', label: 'Date Created' },\n                      { value: 'updated_at', label: 'Last Updated' },\n                      { value: 'name', label: 'Name' }\n                    ]}\n                    className=\"text-xs\"\n                  />\n                  \n                  <SimpleSelect\n                    value={sortOrder}\n                    onValueChange={(value) => {\n                      if (currentAgent) {\n                        // Update the sort state and apply filters client-side\n                        fetchConversations(currentAgent.id, { \n                          order: value as 'asc' | 'desc' \n                        });\n                      }\n                    }}\n                    options={[\n                      { value: 'desc', label: 'Newest First' },\n                      { value: 'asc', label: 'Oldest First' }\n                    ]}\n                    className=\"text-xs\"\n                  />\n                </div>\n              </div>\n              \n              {/* Date Filter */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Filter By Date</label>\n                <SimpleSelect\n                  value={storeDateFilter}\n                  onValueChange={(value) => handleDateFilterChange(value as 'all' | 'today' | 'week' | 'month')}\n                  options={[\n                    { value: 'all', label: 'All Time' },\n                    { value: 'today', label: 'Today' },\n                    { value: 'week', label: 'Last 7 Days' },\n                    { value: 'month', label: 'Last 30 Days' }\n                  ]}\n                  className=\"w-full text-xs\"\n                />\n              </div>\n              \n              {/* User Filter */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Filter By User</label>\n                <SimpleSelect\n                  value={userFilter}\n                  onValueChange={(value) => {\n                    if (currentAgent) {\n                      // Update the user filter state and apply filters client-side\n                      fetchConversations(currentAgent.id, { \n                        userFilter: value \n                      });\n                    }\n                  }}\n                  options={[\n                    { value: 'all', label: 'All Users' },\n                    { value: 'me', label: 'My Conversations' }\n                    // Additional user options could be dynamically loaded\n                  ]}\n                  className=\"w-full text-xs\"\n                />\n              </div>\n            </motion.div>\n          </AnimatePresence>\n        )}\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"p-4 space-y-2\">\n        <Link href=\"/dashboard/projects/create\">\n          <Button\n            className=\"w-full justify-start gap-2\"\n            variant=\"default\"\n            disabled={isFreeTrialMode}\n            title={isFreeTrialMode ? 'Creating new agents is not available in free trial mode' : ''}\n          >\n            <Bot className=\"w-4 h-4\" />\n            Create New Agent\n          </Button>\n        </Link>\n        \n        <Button\n          onClick={handleNewConversation}\n          disabled={!currentAgent || isCreating || isFreeTrialMode}\n          className=\"w-full justify-start gap-2\"\n          variant=\"outline\"\n          title={isFreeTrialMode ? 'Creating new conversations is not available in free trial mode' : ''}\n        >\n          {isCreating ? (\n            <>\n              <Spinner size=\"sm\" />\n              <span>Creating...</span>\n            </>\n          ) : (\n            <>\n              <Plus className=\"w-4 h-4\" />\n              <span>New Chat</span>\n            </>\n          )}\n        </Button>\n      </div>\n\n      {/* Conversations List */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {loading && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <ConversationSkeleton count={5} />\n        ) : error && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <div className=\"p-4 text-center\">\n            <p className=\"text-sm text-destructive mb-2\">Failed to load conversations</p>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => currentAgent && fetchConversations(currentAgent.id)}\n            >\n              Try Again\n            </Button>\n          </div>\n        ) : filteredConversations.length === 0 ? (\n          <div className=\"p-4 text-center\">\n            <MessageSquare className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">\n              {storeSearchQuery ? 'No conversations found' : 'No conversations yet'}\n            </p>\n            {!storeSearchQuery && (\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Start a new conversation to get going\n              </p>\n            )}\n            {currentAgent && (\n              <div className=\"text-xs text-muted-foreground mt-2 space-y-1\">\n                <p>Agent: {currentAgent.project_name} (ID: {currentAgent.id})</p>\n                {error && (\n                  <p className=\"text-destructive\">Error: {error}</p>\n                )}\n                <p>Conversations loaded: {conversations.length}</p>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"p-2 space-y-1\">\n            {filteredConversations.map((conversation) => (\n              <ConversationItem\n                key={conversation.id}\n                conversation={conversation}\n                isSelected={currentConversation?.id === conversation.id}\n                onSelect={handleSelectConversation}\n                onDelete={(id) => handleDeleteConversation(id)}\n                onRename={handleRenameConversation}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Footer with Pagination */}\n      <div className=\"p-4 border-t border-border bg-background space-y-3\">\n        <div className=\"text-xs text-muted-foreground text-center\">\n          {storeSearchQuery ? (\n            <>\n              {filteredConversations.length} result{filteredConversations.length !== 1 ? 's' : ''}\n            </>\n          ) : (\n            <>\n              Showing {conversations.length} of {totalConversations} conversation{totalConversations !== 1 ? 's' : ''}\n            </>\n          )}\n          {currentAgent && (\n            <span className=\"block mt-1\">\n              Agent: {currentAgent.project_name}\n            </span>\n          )}\n        </div>\n        \n        {/* Pagination Controls */}\n        {totalPages > 1 && !storeSearchQuery && (\n          <div className=\"flex items-center justify-between gap-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                if (currentAgent && currentPage > 1) {\n                  fetchConversations(currentAgent.id, { page: currentPage - 1 });\n                }\n              }}\n              disabled={currentPage === 1 || loading}\n            >\n              <ChevronDown className=\"h-3 w-3 rotate-90\" />\n            </Button>\n            \n            <span className=\"text-xs text-muted-foreground\">\n              Page {currentPage} of {totalPages}\n            </span>\n            \n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                if (currentAgent && currentPage < totalPages) {\n                  fetchConversations(currentAgent.id, { page: currentPage + 1 });\n                }\n              }}\n              disabled={currentPage === totalPages || loading}\n            >\n              <ChevronDown className=\"h-3 w-3 -rotate-90\" />\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};","/**\n * Chat Layout Component\n * \n * Top-level layout component that orchestrates the chat interface.\n * Handles different deployment modes and manages the conversation sidebar.\n * \n * Deployment Modes:\n * - standalone: Full chat with sidebar (default for main app)\n * - widget: Embeddable chat without sidebar\n * - floating: Popup-style chat without sidebar\n * \n * Features:\n * - Responsive sidebar with collapse/expand\n * - Automatic message loading on conversation change\n * - Mode-specific rendering logic\n * - Clean separation of concerns\n * \n * Architecture:\n * - ChatLayout (this) - Layout orchestration\n *   - ConversationSidebar - Conversation list and management\n *   - ChatContainer - Main chat interface\n *     - Message - Individual messages\n *     - ChatInput - Message input area\n * \n * State Management:\n * - currentConversation from conversationStore\n * - loadMessages from messageStore\n * - Local state for sidebar collapse\n * \n * Features:\n * - Multiple deployment modes with flexible configuration\n * - Professional sidebar with persistent state and responsive design\n * - Full keyboard navigation and accessibility support\n * - Mobile-optimized interface with adaptive layout\n * - Customizable sidebar positioning and behavior options\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport type { Agent } from '@/types';\nimport { ChatContainer } from './ChatContainer';\nimport { ConversationSidebar } from './ConversationSidebar';\nimport { useConversationStore, useMessageStore } from '@/hooks/useWidgetStore';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\n/**\n * Props for ChatLayout component\n * \n * @property mode - Deployment mode: standalone (with sidebar), widget, or floating\n * @property className - Additional CSS classes for styling\n * @property onClose - Callback for closing chat (widget/floating modes)\n * @property onAgentSettings - Callback for opening agent settings\n * @property showSidebar - Whether to show sidebar (only applies to standalone mode)\n * @property enableConversationManagement - Enable conversation switching UI\n * @property maxConversations - Maximum conversations per session\n * @property sessionId - Session ID for conversation isolation\n * @property threadId - Specific conversation thread to load\n * @property onConversationChange - Callback when conversation changes\n * @property onMessage - Callback when message is sent/received\n */\ninterface ChatLayoutProps {\n  mode?: 'standalone' | 'widget' | 'floating';\n  className?: string;\n  onClose?: () => void;\n  onAgentSettings?: (agent: Agent) => void;\n  showSidebar?: boolean;\n  enableConversationManagement?: boolean;\n  maxConversations?: number;\n  sessionId?: string;\n  threadId?: string;\n  onConversationChange?: (conversation: any) => void;\n  onMessage?: (message: any) => void;\n  widgetInstance?: any; // Widget instance for isolated conversation management\n  conversations?: any[]; // Current conversations for isolated mode\n  currentConversation?: any; // Current conversation for isolated mode\n  conversationRefreshKey?: number; // Key to trigger ConversationManager refresh\n}\n\n/**\n * Chat Layout Component\n * \n * Orchestrates the overall chat interface layout based on deployment mode.\n * In standalone mode, includes a collapsible conversation sidebar.\n * In widget/floating modes, renders only the chat container.\n */\nexport const ChatLayout: React.FC<ChatLayoutProps> = ({\n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  showSidebar = true,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  widgetInstance,\n  conversations,\n  currentConversation,\n  conversationRefreshKey\n}) => {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [mobileSidebarOpen, setMobileSidebarOpen] = useState(false);\n  const { currentConversation: storeCurrentConversation } = useConversationStore();\n  const { loadMessages } = useMessageStore();\n\n  /**\n   * Load messages when conversation changes\n   * \n   * Automatically fetches messages from the store when user\n   * switches between conversations. This ensures the chat\n   * always shows the correct message history.\n   */\n  useEffect(() => {\n    // Skip API calls in demo mode to prevent errors\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    // In widget mode with isolated conversations, use the prop instead of store\n    const conversationToLoad = (mode === 'widget' || mode === 'floating') && currentConversation \n      ? currentConversation \n      : storeCurrentConversation;\n    \n    if (conversationToLoad && !isDemoMode) {\n      console.log('[ChatLayout] Loading messages for conversation:', {\n        conversationId: conversationToLoad.id,\n        mode,\n        isFromProp: !!(currentConversation && (mode === 'widget' || mode === 'floating'))\n      });\n      loadMessages(conversationToLoad.id.toString());\n    }\n  }, [storeCurrentConversation, currentConversation, loadMessages, mode]);\n\n  const { isMobile } = useBreakpoint();\n\n  // Hide sidebar for widget and floating modes\n  // Only standalone mode shows the conversation sidebar\n  const shouldShowSidebar = showSidebar && mode === 'standalone';\n\n  /**\n   * Toggle sidebar collapsed state\n   * \n   * Toggles sidebar visibility with potential for session persistence\n   * to enhance user experience across application sessions\n   */\n  const handleToggleSidebar = () => {\n    setSidebarCollapsed(!sidebarCollapsed);\n  };\n\n  if (!shouldShowSidebar) {\n    // For widget/floating modes, just show the chat container\n    return (\n      <ChatContainer\n        mode={mode}\n        className={className}\n        onClose={onClose}\n        onAgentSettings={onAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        threadId={threadId}\n        onConversationChange={onConversationChange}\n        onMessage={onMessage}\n        conversationRefreshKey={conversationRefreshKey}\n        isMobile={isMobile}\n      />\n    );\n  }\n\n  // On mobile, hide the sidebar and use drawer navigation instead\n  if (isMobile) {\n    return (\n      <div className=\"flex flex-col h-full bg-background\">\n        <ChatContainer\n          mode={mode}\n          className=\"flex-1\"\n          onClose={onClose}\n          onAgentSettings={onAgentSettings}\n          enableConversationManagement={enableConversationManagement}\n          maxConversations={maxConversations}\n          sessionId={sessionId}\n          threadId={threadId}\n          onConversationChange={onConversationChange}\n          onMessage={onMessage}\n          conversationRefreshKey={conversationRefreshKey}\n          isMobile={true}\n        />\n      </div>\n    );\n  }\n\n  // Desktop layout with sidebar\n  return (\n    <div className=\"flex h-full bg-background\">\n      {/* Sidebar */}\n      <ConversationSidebar\n        isCollapsed={sidebarCollapsed}\n        onToggle={handleToggleSidebar}\n        isMobile={false}\n      />\n      \n      {/* Main Chat Area */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        <ChatContainer\n          mode={mode}\n          className=\"h-full\"\n          onClose={onClose}\n          onAgentSettings={onAgentSettings}\n          enableConversationManagement={enableConversationManagement}\n          maxConversations={maxConversations}\n          sessionId={sessionId}\n          threadId={threadId}\n          onConversationChange={onConversationChange}\n          onMessage={onMessage}\n          conversationRefreshKey={conversationRefreshKey}\n          isMobile={false}\n        />\n      </div>\n    </div>\n  );\n};","import React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { MessageCircle, X, Minus } from 'lucide-react';\n\nimport { cn } from '../lib/utils';\n\ninterface FloatingButtonProps {\n  isOpen: boolean;\n  onToggle: () => void;\n  onMinimize?: () => void;\n  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n  primaryColor?: string;\n  size?: 'sm' | 'md' | 'lg';\n  showLabel?: boolean;\n  label?: string;\n  className?: string;\n  avatarUrl?: string;\n}\n\nexport const FloatingButton: React.FC<FloatingButtonProps> = ({\n  isOpen,\n  onToggle,\n  onMinimize,\n  position = 'bottom-right',\n  primaryColor = '#007acc',\n  size = 'md',\n  showLabel = true,\n  label = 'Chat with us',\n  className,\n  avatarUrl\n}) => {\n  const [isHovered, setIsHovered] = useState(false);\n\n  const sizeClasses = {\n    sm: 'w-12 h-12',\n    md: 'w-14 h-14',\n    lg: 'w-16 h-16',\n  };\n\n  const iconSizes = {\n    sm: 'w-5 h-5',\n    md: 'w-6 h-6',\n    lg: 'w-7 h-7',\n  };\n\n  const positionClasses = {\n    'bottom-right': 'bottom-6 right-6',\n    'bottom-left': 'bottom-6 left-6',\n    'top-right': 'top-6 right-6',\n    'top-left': 'top-6 left-6',\n  };\n\n  const labelPosition = {\n    'bottom-right': 'right-16 bottom-0',\n    'bottom-left': 'left-16 bottom-0',\n    'top-right': 'right-16 top-0',\n    'top-left': 'left-16 top-0',\n  };\n\n  if (isOpen) {\n    return null; // Hide button when widget is open\n  }\n\n  return (\n    <div\n      className={cn(\n        'fixed z-[9999] flex items-center',\n        positionClasses[position],\n        className\n      )}\n    >\n      {/* Chat Label - Hidden on mobile, visible on desktop */}\n      <AnimatePresence>\n        {showLabel && !isOpen && (\n          <motion.div\n            initial={{ opacity: 0, scale: 0.8, x: position.includes('right') ? 10 : -10 }}\n            animate={{ opacity: 1, scale: 1, x: 0 }}\n            exit={{ opacity: 0, scale: 0.8, x: position.includes('right') ? 10 : -10 }}\n            transition={{ duration: 0.2 }}\n            className={cn(\n              'absolute whitespace-nowrap px-3 py-2 bg-white text-gray-800 text-sm font-medium rounded-lg shadow-lg border border-gray-200',\n              'hidden sm:block', // Hide on mobile, show on desktop\n              labelPosition[position]\n            )}\n          >\n            {label}\n            {/* Arrow */}\n            <div\n              className={cn(\n                'absolute w-2 h-2 bg-white border transform rotate-45',\n                position.includes('right') \n                  ? 'left-[-4px] border-l-0 border-b-0 top-1/2 -translate-y-1/2' \n                  : 'right-[-4px] border-r-0 border-t-0 top-1/2 -translate-y-1/2'\n              )}\n            />\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Main Button */}\n      <motion.button\n        whileHover={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n        onClick={onToggle}\n        onMouseEnter={() => setIsHovered(true)}\n        onMouseLeave={() => setIsHovered(false)}\n        className={cn(\n          'relative flex items-center justify-center rounded-full shadow-lg transition-all duration-200 focus:outline-none focus:ring-4 focus:ring-opacity-50',\n          sizeClasses[size]\n        )}\n        style={{\n          backgroundColor: primaryColor,\n        }}\n        title={label}\n      >\n        {/* Pulse animation */}\n        <motion.div\n          animate={{\n            scale: [1, 1.2, 1],\n            opacity: [0.7, 0, 0.7],\n          }}\n          transition={{\n            duration: 2,\n            repeat: Infinity,\n            ease: \"easeInOut\",\n          }}\n          className=\"absolute inset-0 rounded-full\"\n          style={{ backgroundColor: primaryColor }}\n        />\n        \n        {/* Icon or Avatar */}\n        {avatarUrl ? (\n          <img\n            src={avatarUrl}\n            alt=\"Chat Avatar\"\n            className={cn(\n              iconSizes[size],\n              'relative z-10 rounded-full object-cover'\n            )}\n          />\n        ) : (\n          <MessageCircle \n            className={cn(iconSizes[size], 'text-white relative z-10')} \n          />\n        )}\n\n      </motion.button>\n    </div>\n  );\n};","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Toaster } from 'sonner';\n\nimport '../app/globals.css';\nimport './widget-styles.css';\nimport { WidgetConfig, Conversation } from '../types';\nimport type { ConversationStore } from '../store/widget-stores/conversations';\nimport { useConfigStore, useAgentStore } from '../store';\nimport { ChatLayout } from '../components/chat/ChatLayout';\nimport { getClient } from '../lib/api/client';\nimport { WidgetProvider } from './WidgetContext';\nimport { WidgetStoreProvider } from './WidgetStoreContext';\nimport { WidgetToaster } from './isolated-toast';\nimport { widgetDebugger } from './debug-utils';\nimport { FloatingButton } from './FloatingButton';\n\n/**\n * Widget Configuration Interface\n * \n * Defines all configuration options for CustomGPT widget initialization.\n * This interface is used by both embedded widgets and floating buttons.\n * \n * @property agentId - Required: Agent/Project ID from CustomGPT dashboard\n * @property apiKey - Optional: API key for direct mode (bypasses proxy server)\n * @property apiUrl - Optional: Base URL for API (proxy URL or CustomGPT API URL)\n * @property useProxy - Optional: Force proxy mode even with API key (default: false)\n * @property agentName - Optional: Custom name to display instead of \"Agent - {ID}\"\n * @property containerId - DOM element ID for embedded mode (ignored in floating mode)\n * @property mode - Widget deployment mode: 'embedded' | 'floating' | 'widget'\n * @property theme - Color theme: 'light' | 'dark'\n * @property position - Position for floating mode: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left'\n * @property width - Widget width (default: '400px')\n * @property height - Widget height (default: '600px')\n * @property enableCitations - Show citation sources in messages\n * @property enableFeedback - Show thumbs up/down feedback buttons\n * \n * Conversation Management Options:\n * @property enableConversationManagement - Enable conversation switching UI\n * @property maxConversations - Maximum conversations per session (default: 5)\n * @property sessionId - Custom session ID (auto-generated if not provided)\n * @property threadId - Specific conversation thread to load\n * @property isolateConversations - Whether to isolate conversations from other widgets (default: true)\n * \n * Event Callbacks:\n * @property onOpen - Called when widget opens\n * @property onClose - Called when widget closes\n * @property onMessage - Called when new message is sent/received\n * @property onConversationChange - Called when conversation switches\n */\nexport interface CustomGPTWidgetConfig {\n  // Required properties\n  agentId: number | string;\n  \n  // API Configuration\n  apiKey?: string; // API key for direct mode (bypasses proxy)\n  apiUrl?: string; // Base URL for the API server (defaults to CustomGPT API or proxy)\n  useProxy?: boolean; // Whether to use proxy mode (default: true if no apiKey)\n  \n  // Display properties\n  agentName?: string;\n  containerId?: string;\n  mode?: 'embedded' | 'floating' | 'widget';\n  theme?: 'light' | 'dark';\n  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n  width?: string;\n  height?: string;\n  \n  // Floating button properties\n  primaryColor?: string;\n  buttonSize?: 'sm' | 'md' | 'lg';\n  showLabel?: boolean;\n  label?: string;\n  \n  // Feature flags\n  enableCitations?: boolean;\n  enableFeedback?: boolean;\n  enableConversationManagement?: boolean;\n  \n  // Conversation management\n  maxConversations?: number;\n  sessionId?: string;\n  threadId?: string;\n  isolateConversations?: boolean; // New flag to isolate conversations\n  \n  // Event callbacks\n  onOpen?: () => void;\n  onClose?: () => void;\n  onMessage?: (message: any) => void;\n  onConversationChange?: (conversation: any) => void;\n}\n\n/**\n * CustomGPT Widget Class\n * \n * Main widget class that manages the lifecycle of CustomGPT chat instances.\n * Supports both embedded and floating deployment modes with full conversation management.\n * Can operate in two modes:\n * - Proxy mode (default): Communicates through a Next.js server proxy\n * - Direct mode: Communicates directly with CustomGPT API using provided API key\n * \n * @example\n * // Basic embedded widget (proxy mode)\n * const widget = CustomGPTWidget.init({\n *   agentId: '123',\n *   containerId: 'chat-container',\n *   apiUrl: 'https://your-nextjs-app.com'\n * });\n * \n * @example\n * // Direct mode with API key (no proxy needed)\n * const widget = CustomGPTWidget.init({\n *   agentId: '123',\n *   apiKey: 'your-api-key',\n *   mode: 'floating',\n *   enableConversationManagement: true\n * });\n * \n * @example\n * // Floating widget with conversation management\n * const widget = CustomGPTWidget.init({\n *   agentId: '123',\n *   mode: 'floating',\n *   enableConversationManagement: true,\n *   maxConversations: 10\n * });\n */\nclass CustomGPTWidget {\n  private container: HTMLElement | null = null;\n  private root: any = null;\n  private config: CustomGPTWidgetConfig;\n  private isOpen: boolean = false;\n  public sessionId: string;\n  private currentConversationId: string | null = null;\n  private instanceKey?: string;\n  private conversationRefreshKey: number = 0;\n  private floatingButtonContainer: HTMLElement | null = null;\n  private floatingButtonRoot: any = null;\n  private agentAvatar: string | null = null;\n\n  constructor(config: CustomGPTWidgetConfig) {\n    // Validate required fields\n    \n    if (!config.agentId) {\n      throw new Error('CustomGPT Widget: Agent ID is required');\n    }\n\n    // Merge with defaults\n    this.config = {\n      mode: 'embedded',\n      theme: 'light',\n      position: 'bottom-right',\n      width: '400px',\n      height: '600px',\n      enableCitations: true,\n      enableFeedback: true,\n      enableConversationManagement: false, // Always false for widget mode\n      ...config,\n    };\n\n    // Initialize session ID\n    // For widget mode, use a persistent session ID based on agentId to maintain conversations across refreshes\n    if ((this.config.mode === 'widget' || this.config.mode === 'floating') && this.config.isolateConversations !== false) {\n      // Create a stable session ID for widgets that persists across refreshes\n      this.sessionId = `widget_session_${this.config.agentId}`;\n      \n      // Also store this as the persistent session for this agent\n      localStorage.setItem(`customgpt_widget_session_${this.config.agentId}`, this.sessionId);\n    } else if (this.config.isolateConversations !== false) {\n      // For other modes with isolated conversations, create unique session\n      const modePrefix = this.config.mode || 'widget';\n      const containerId = this.config.containerId || 'default';\n      // Create a unique session ID that includes mode, container info, and a random component\n      // Use performance.now() for higher precision to avoid collisions\n      const timestamp = typeof performance !== 'undefined' ? performance.now() : Date.now();\n      const random = Math.random().toString(36).substr(2, 9);\n      const uniqueId = `${timestamp}_${random}_${Math.random().toString(36).substr(2, 5)}`;\n      this.sessionId = `session_${modePrefix}_${containerId}_${uniqueId}`;\n    } else if (this.config.sessionId) {\n      // Use provided session ID for sharing conversations\n      this.sessionId = this.config.sessionId;\n    } else {\n      // Generate a regular session ID\n      this.sessionId = this.generateSessionId();\n    }\n    \n    // Store widget instance reference for conversation management\n    // Use unique instance key to prevent conflicts between multiple widgets\n    if (typeof window !== 'undefined') {\n      const instanceKey = `__customgpt_widget_${this.sessionId}`;\n      (window as any)[instanceKey] = this;\n      \n      // Also store in instances object for easier access\n      if (!(window as any).__customgpt_widget_instances) {\n        (window as any).__customgpt_widget_instances = {};\n      }\n      (window as any).__customgpt_widget_instances[this.sessionId] = this;\n      \n      // DEPRECATED: Global reference kept for backward compatibility\n      // Don't overwrite if already exists to preserve first widget\n      if (!(window as any).__customgpt_widget_instance) {\n        (window as any).__customgpt_widget_instance = this;\n      }\n      \n      // Store instance key for later reference\n      this.instanceKey = instanceKey;\n    }\n\n    this.init();\n  }\n\n  /**\n   * Generates a unique session ID for conversation isolation\n   * @returns Unique session identifier\n   */\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private async init() {\n    // Initialize API client based on configuration\n    const { initializeClient } = require('../lib/api/client');\n    \n    // Determine if using direct mode or proxy mode\n    const useDirectMode = this.config.apiKey && (this.config.useProxy !== true);\n    \n    if (useDirectMode) {\n      // Direct mode - API key provided, communicate directly with CustomGPT\n      initializeClient({\n        mode: 'direct',\n        apiKey: this.config.apiKey,\n        apiUrl: this.config.apiUrl || 'https://app.customgpt.ai/api/v1'\n      });\n    } else {\n      // Proxy mode - use Next.js server proxy\n      const proxyUrl = this.config.apiUrl || '';\n      initializeClient({\n        mode: 'proxy',\n        apiUrl: proxyUrl\n      });\n      \n      // Store globally for the API client to pick up\n      if (proxyUrl) {\n        (window as any).__customgpt_api_url = proxyUrl;\n      }\n    }\n    \n    // Configure session for conversation isolation\n    if (this.config.enableConversationManagement) {\n      // Store session configuration for conversation management\n      // If isolateConversations is true, use instance-specific session storage\n      if (this.config.isolateConversations) {\n        // Create instance-specific session object\n        if (!(window as any).__customgpt_sessions) {\n          (window as any).__customgpt_sessions = {};\n        }\n        (window as any).__customgpt_sessions[this.sessionId] = {\n          sessionId: this.sessionId,\n          maxConversations: this.config.maxConversations,\n          enableConversationManagement: true\n        };\n      } else {\n        // Use shared session (old behavior)\n        (window as any).__customgpt_session = {\n          sessionId: this.sessionId,\n          maxConversations: this.config.maxConversations,\n          enableConversationManagement: true\n        };\n      }\n    }\n    \n    // Check if using demo/test API key\n    const isDemoMode = false; // Demo mode removed as API key is server-side\n    \n    // Store demo mode flag for preventing unnecessary API calls\n    if (isDemoMode) {\n      (window as any).__customgpt_demo_mode = true;\n    } else {\n      // Ensure demo mode is disabled for valid API keys\n      (window as any).__customgpt_demo_mode = false;\n    }\n    \n    // Agent initialization is now handled by the widget-specific store\n    // The WidgetStoreProvider will create and initialize the agent store\n    // which includes proper error handling and fallback mechanisms\n\n    // Create container based on mode\n    this.createContainer();\n    \n    // For floating mode, create the floating button first\n    if (this.config.mode === 'floating') {\n      this.createFloatingButton();\n    }\n    \n    // Render the widget first\n    this.render();\n    \n    // For widget mode, always ensure a single conversation exists and is persisted\n    const persistedConversationId = localStorage.getItem(`customgpt_widget_conversation_${this.config.agentId}`);\n    \n    // Load existing conversations for this session\n    const existingConversations = this.getConversations();\n    \n    if (persistedConversationId && existingConversations.length > 0) {\n      // Find the persisted conversation in our saved conversations\n      const persistedConversation = existingConversations.find(c => c.id === persistedConversationId);\n      \n      if (persistedConversation) {\n        // Load the persisted conversation\n        this.currentConversationId = persistedConversationId;\n        \n        // Update the widget conversation store after a delay to ensure components are mounted\n        setTimeout(async () => {\n          if (typeof window !== 'undefined') {\n            const widgetStores = (window as any).__customgpt_widget_stores;\n            if (widgetStores && widgetStores[this.sessionId]) {\n              const conversationStore = widgetStores[this.sessionId].conversationStore;\n              const messageStore = widgetStores[this.sessionId].messageStore;\n              \n              if (conversationStore) {\n                // First, ensure the conversation is in the store\n                const existingConvs = conversationStore.getState().conversations;\n                const convExists = existingConvs.some((c: Conversation) => c.id === persistedConversation.id);\n                \n                if (!convExists) {\n                  // Add the conversation to the store's list\n                  conversationStore.getState().setSearchQuery(''); // Clear any filters\n                  conversationStore.setState((state: ConversationStore) => ({\n                    allConversations: [...state.allConversations, persistedConversation],\n                    conversations: [...state.conversations, persistedConversation]\n                  }));\n                }\n                \n                const fullConversation = {\n                  ...persistedConversation,\n                  id: parseInt(persistedConversation.id) || persistedConversation.id,\n                  project_id: parseInt(this.config.agentId as string) || 0,\n                  session_id: this.sessionId,\n                  name: persistedConversation.title || persistedConversation.name || 'Chat'\n                };\n                \n                console.log('[Widget] Restoring persisted conversation:', fullConversation);\n                conversationStore.getState().selectConversation(fullConversation as any);\n                \n                // Load messages for the persisted conversation\n                if (messageStore) {\n                  // Wait a bit to ensure the conversation is selected\n                  setTimeout(() => {\n                    console.log('[Widget] Loading messages for conversation:', persistedConversationId);\n                    messageStore.getState().loadMessages(persistedConversationId);\n                  }, 100);\n                }\n              }\n            }\n          }\n        }, 300);\n      } else {\n        // Persisted ID exists but conversation not found, create new\n        setTimeout(async () => {\n          const newConversation = await this.createConversation('Chat');\n          if (newConversation) {\n            localStorage.setItem(`customgpt_widget_conversation_${this.config.agentId}`, newConversation.id.toString());\n          }\n        }, 100);\n      }\n    } else {\n      // No persisted conversation or no conversations exist, create a new one\n      setTimeout(async () => {\n        const newConversation = await this.createConversation('Chat');\n        if (newConversation) {\n          // Persist the conversation ID\n          localStorage.setItem(`customgpt_widget_conversation_${this.config.agentId}`, newConversation.id.toString());\n        }\n      }, 100);\n    }\n    \n    // For isolated widgets, we need to prevent the global store from being used\n    if (this.config.isolateConversations !== false && typeof window !== 'undefined') {\n      // Store the widget instance globally so components can access it\n      (window as any).__customgpt_widget_instances = (window as any).__customgpt_widget_instances || {};\n      (window as any).__customgpt_widget_instances[this.sessionId] = this;\n      \n      // Set the current active widget session\n      (window as any).__customgpt_active_widget_session = this.sessionId;\n    }\n  }\n\n  private createContainer() {\n    const { mode, containerId } = this.config;\n\n    if (mode === 'embedded' && containerId) {\n      // Use provided container\n      this.container = document.getElementById(containerId);\n      if (!this.container) {\n        throw new Error(`Container with id \"${containerId}\" not found`);\n      }\n    } else if (mode === 'floating') {\n      // Create floating container\n      this.container = document.createElement('div');\n      this.container.id = 'customgpt-floating-widget';\n      this.setupFloatingStyles();\n      document.body.appendChild(this.container);\n    } else {\n      // Create default container\n      this.container = document.createElement('div');\n      this.container.id = 'customgpt-widget';\n      document.body.appendChild(this.container);\n    }\n  }\n\n  private setupFloatingStyles() {\n    if (!this.container || this.config.mode !== 'floating') return;\n\n    const { position, width, height } = this.config;\n    \n    // Base floating styles\n    Object.assign(this.container.style, {\n      position: 'fixed',\n      zIndex: '9999',\n      width: width || '400px',\n      height: height || '600px',\n      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\n      borderRadius: '12px',\n      overflow: 'hidden',\n      transition: 'all 0.3s ease',\n      backgroundColor: 'white', // Ensure background is set\n    });\n    \n    // Add class for styling\n    this.container.classList.add('floating-mode');\n    this.container.classList.add('customgpt-floating-container');\n\n    // Position-specific styles\n    switch (position) {\n      case 'bottom-right':\n        Object.assign(this.container.style, {\n          bottom: '20px',\n          right: '20px',\n        });\n        break;\n      case 'bottom-left':\n        Object.assign(this.container.style, {\n          bottom: '20px',\n          left: '20px',\n        });\n        break;\n      case 'top-right':\n        Object.assign(this.container.style, {\n          top: '20px',\n          right: '20px',\n        });\n        break;\n      case 'top-left':\n        Object.assign(this.container.style, {\n          top: '20px',\n          left: '20px',\n        });\n        break;\n    }\n\n    // Initially hidden for floating mode with proper initial state\n    this.container.style.display = 'none';\n    this.container.style.opacity = '0';\n    this.container.style.transform = 'translateY(20px)';\n  }\n\n  private async fetchAgentAvatar() {\n    try {\n      const client = getClient();\n      // Convert agentId to number as required by the API\n      const agentId = typeof this.config.agentId === 'string' \n        ? parseInt(this.config.agentId, 10) \n        : this.config.agentId;\n      \n      const response = await client.getAgentSettings(agentId);\n      const settings = response.data || response;\n      \n      if (settings.chatbot_avatar) {\n        this.agentAvatar = settings.chatbot_avatar;\n        // Update floating button if it exists\n        if (this.floatingButtonRoot) {\n          this.createFloatingButton();\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to fetch agent avatar:', error);\n    }\n  }\n\n  private createFloatingButton() {\n    if (this.config.mode !== 'floating') return;\n\n    // Create button container if it doesn't exist\n    if (!this.floatingButtonContainer) {\n      this.floatingButtonContainer = document.createElement('div');\n      this.floatingButtonContainer.id = 'customgpt-floating-button-container';\n      document.body.appendChild(this.floatingButtonContainer);\n    }\n\n    // Create or update the button root\n    if (!this.floatingButtonRoot) {\n      this.floatingButtonRoot = createRoot(this.floatingButtonContainer);\n    }\n\n    const FloatingButtonApp = () => {\n      return (\n        <FloatingButton\n          isOpen={this.isOpen}\n          onToggle={() => this.toggle()}\n          position={this.config.position}\n          primaryColor={this.config.primaryColor || '#007acc'}\n          size={this.config.buttonSize || 'md'}\n          showLabel={this.config.showLabel !== false}\n          label={this.config.label || 'Chat with us'}\n          avatarUrl={this.agentAvatar || undefined}\n        />\n      );\n    };\n\n    this.floatingButtonRoot.render(<FloatingButtonApp />);\n    \n    // Also fetch avatar if we don't have it yet\n    if (!this.agentAvatar) {\n      this.fetchAgentAvatar();\n    }\n  }\n\n  private render() {\n    if (!this.container) return;\n\n    // Apply proper styling based on mode\n    if (this.config.mode === 'embedded') {\n      this.container.classList.add('customgpt-embedded-widget');\n      // Apply width and height styles directly to container\n      Object.assign(this.container.style, {\n        width: this.config.width || '400px',\n        height: this.config.height || '600px',\n        margin: '0 auto', // Center by default\n        display: 'block',\n      });\n    }\n\n    // Only create root once\n    if (!this.root) {\n      this.root = createRoot(this.container);\n    }\n    \n    const WidgetApp = () => {\n      // DEPRECATED: This global reference is kept for backward compatibility\n      // New code should use WidgetContext instead\n      // Only set if not already set to avoid overwriting first widget\n      if (typeof window !== 'undefined' && !(window as any).__customgpt_widget_instance) {\n        (window as any).__customgpt_widget_instance = this;\n      }\n      \n      const handleClose = () => {\n        this.close();\n        this.config.onClose?.();\n      };\n\n      // Get current conversation ID or use thread ID\n      const currentConvId = this.currentConversationId || this.config.threadId;\n      \n      // For isolated mode, pass the widget instance to manage conversations locally\n      const widgetRef = this;\n      \n      // Create a unique key for this widget's conversations\n      const widgetKey = `widget_${this.sessionId}`;\n\n      return (\n        <WidgetStoreProvider sessionId={this.sessionId}>\n          <WidgetProvider widgetInstance={widgetRef}>\n            <div className={`customgpt-widget-wrapper widget-mode ${this.config.mode}-mode`}>\n              <ChatLayout\n                mode={this.config.mode === 'embedded' ? 'widget' : 'floating'}\n                onClose={this.config.mode === 'floating' ? handleClose : undefined}\n                showSidebar={false} // Disable sidebar for widget mode\n                className=\"w-full h-full\"\n                // Pass conversation management configuration\n                enableConversationManagement={this.config.enableConversationManagement}\n                maxConversations={this.config.maxConversations}\n                sessionId={this.sessionId}\n                threadId={currentConvId} // Pass current conversation ID\n                onConversationChange={this.config.onConversationChange}\n                onMessage={this.config.onMessage}\n                // Pass widget instance for isolated conversation management\n                widgetInstance={this.config.isolateConversations !== false ? widgetRef : undefined}\n                // Pass current conversations for isolated mode\n                conversations={this.config.isolateConversations !== false ? this.getConversations() : undefined}\n                currentConversation={this.config.isolateConversations !== false && this.currentConversationId ? \n                  this.getConversations().find(c => c.id === this.currentConversationId) : undefined}\n                // Pass refresh key to trigger ConversationManager updates\n                conversationRefreshKey={this.conversationRefreshKey}\n              />\n              <WidgetToaster sessionId={this.sessionId} />\n            </div>\n          </WidgetProvider>\n        </WidgetStoreProvider>\n      );\n    };\n\n    this.root.render(<WidgetApp />);\n\n    // Auto-open for embedded mode\n    if (this.config.mode === 'embedded') {\n      this.open();\n    }\n  }\n\n  /**\n   * Get all conversations for current session\n   * @returns Array of conversations\n   */\n  public getConversations(): any[] {\n    const stored = localStorage.getItem(`customgpt_conversations_${this.sessionId}`);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (e) {\n        console.error('Failed to parse conversations:', e);\n      }\n    }\n    return [];\n  }\n\n  /**\n   * Switch to a different conversation\n   * @param conversationId - ID of conversation to switch to\n   */\n  public switchConversation(conversationId: string): void {\n    widgetDebugger.log('WIDGET', 'switchConversation called', {\n      conversationId,\n      conversationIdType: typeof conversationId,\n      sessionId: this.sessionId,\n      isolateConversations: this.config.isolateConversations,\n      currentConversations: this.getConversations().map(c => ({\n        id: c.id,\n        idType: typeof c.id,\n        title: c.title\n      }))\n    });\n    \n    const conversations = this.getConversations();\n    const conversation = conversations.find(c => c.id === conversationId || c.id === parseInt(conversationId));\n    \n    widgetDebugger.log('WIDGET', 'Found conversation', {\n      found: !!conversation,\n      conversationId,\n      searchedId: conversationId,\n      conversationDetails: conversation ? {\n        id: conversation.id,\n        idType: typeof conversation.id,\n        title: conversation.title,\n        session_id: conversation.session_id\n      } : null\n    });\n    \n    if (conversation) {\n      this.currentConversationId = conversationId;\n      \n      // Increment refresh key to trigger ConversationManager update\n      this.conversationRefreshKey++;\n      \n      // Load messages for the new conversation from widget store\n      if (this.config.isolateConversations !== false && typeof window !== 'undefined') {\n        // Get the widget's message store and load messages\n        const widgetStores = (window as any).__customgpt_widget_stores;\n        \n        widgetDebugger.log('WIDGET', 'Accessing widget stores', {\n          hasWidgetStores: !!widgetStores,\n          sessionId: this.sessionId,\n          hasSessionStore: widgetStores && !!widgetStores[this.sessionId],\n          availableSessions: widgetStores ? Object.keys(widgetStores) : []\n        });\n        \n        if (widgetStores && widgetStores[this.sessionId]) {\n          const messageStore = widgetStores[this.sessionId].messageStore;\n          const conversationStore = widgetStores[this.sessionId].conversationStore;\n          \n          if (messageStore) {\n            // Load messages for this conversation\n            widgetDebugger.log('WIDGET', 'Loading messages via store', {\n              conversationId,\n              storeHasLoadMessages: typeof messageStore.getState().loadMessages === 'function'\n            });\n            \n            widgetDebugger.traceMessageFlow('SWITCH_CONVERSATION', {\n              conversationId,\n              sessionId: this.sessionId,\n              action: 'Loading messages'\n            });\n            \n            // Ensure conversationId is a string for consistency\n            const convIdStr = String(conversationId);\n            widgetDebugger.log('WIDGET', 'Calling loadMessages with string ID', {\n              originalId: conversationId,\n              stringId: convIdStr,\n              typeOfOriginal: typeof conversationId\n            });\n            messageStore.getState().loadMessages(convIdStr);\n          }\n          \n          if (conversationStore) {\n            // Update the conversation store's currentConversation\n            widgetDebugger.log('WIDGET', 'Updating conversation store', {\n              conversationId: conversation.id,\n              conversationIdType: typeof conversation.id\n            });\n            \n            const fullConversation = {\n              ...conversation,\n              id: parseInt(conversation.id) || conversation.id, // Ensure proper ID type\n              project_id: parseInt(this.config.agentId as string) || 0,\n              session_id: this.sessionId,\n              name: conversation.title\n            };\n            conversationStore.getState().selectConversation(fullConversation as any);\n          }\n        } else {\n          widgetDebugger.log('WIDGET', 'Widget stores not found', {\n            sessionId: this.sessionId,\n            availableStores: Object.keys(widgetStores || {})\n          }, 'error');\n        }\n      }\n      \n      // Don't update the global store if we're in isolated mode\n      // The render() method will handle passing the correct conversation\n      if (!this.config.isolateConversations) {\n        // Only update global store if sharing conversations\n        if (typeof window !== 'undefined') {\n          const { useConversationStore } = require('../store');\n          \n          // Get all widget conversations\n          const allWidgetConversations = this.getConversations();\n          \n          // Convert all widget conversations to store format\n          const storeConversations = allWidgetConversations.map(conv => ({\n            ...conv,\n            project_id: parseInt(this.config.agentId as string) || 0,\n            session_id: this.sessionId,\n            name: conv.title\n          }));\n          \n          // Find the selected conversation with proper format\n          const fullConversation = storeConversations.find(c => c.id === conversationId);\n          \n          // Update store with all widget conversations\n          useConversationStore.setState({\n            conversations: storeConversations as any,\n            currentConversation: fullConversation as any\n          });\n        }\n      }\n      \n      // Trigger re-render with new conversation\n      this.render();\n      this.config.onConversationChange?.(conversation);\n    }\n  }\n\n  /**\n   * Create a new conversation\n   * @param title - Optional title for the conversation\n   * @returns The new conversation object\n   */\n  public async createConversation(title?: string): Promise<any> {\n    const conversations = this.getConversations();\n    \n    // Check max conversations limit (only if specified by user)\n    if (this.config.maxConversations && conversations.length >= this.config.maxConversations) {\n      console.warn(`Maximum conversation limit (${this.config.maxConversations}) reached`);\n      return null; // Return null instead of throwing error\n    }\n    \n    // Use the conversation store to create a proper API conversation\n    if (this.config.isolateConversations !== false && typeof window !== 'undefined') {\n      const widgetStores = (window as any).__customgpt_widget_stores;\n      if (widgetStores && widgetStores[this.sessionId]) {\n        const conversationStore = widgetStores[this.sessionId].conversationStore;\n        const messageStore = widgetStores[this.sessionId].messageStore;\n        \n        if (conversationStore) {\n          try {\n            // Create conversation via the store (which uses API)\n            await conversationStore.getState().createConversation(\n              parseInt(this.config.agentId as string) || 0,\n              title || `Conversation ${conversations.length + 1}`\n            );\n            \n            // Get the newly created conversation\n            const newConversation = conversationStore.getState().currentConversation;\n            \n            if (newConversation) {\n              // Add to widget's local conversation list\n              const widgetConversation = {\n                id: newConversation.id.toString(), // Ensure string ID for consistency\n                title: newConversation.name || title || `Conversation ${conversations.length + 1}`,\n                createdAt: newConversation.created_at || new Date().toISOString(),\n                messages: [],\n                project_id: newConversation.project_id,\n                session_id: newConversation.session_id,\n                name: newConversation.name\n              };\n              \n              conversations.unshift(widgetConversation);\n              this.saveConversations(conversations);\n              this.currentConversationId = widgetConversation.id;\n              \n              // Persist the conversation ID for widget mode\n              localStorage.setItem(`customgpt_widget_conversation_${this.config.agentId}`, widgetConversation.id.toString());\n              \n              // Don't clear messages - they should persist\n              \n              // Increment refresh key to trigger ConversationManager update\n              this.conversationRefreshKey++;\n              \n              // Trigger re-render with new conversation\n              this.render();\n              \n              return widgetConversation;\n            }\n          } catch (error) {\n            console.error('Failed to create conversation via API:', error);\n            // Fall back to local creation if API fails\n          }\n        }\n      }\n    }\n    \n    // Fallback: Create conversation locally if API creation fails\n    const newConversation = {\n      id: `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      title: title || `Conversation ${conversations.length + 1}`,\n      createdAt: new Date().toISOString(),\n      messages: [],\n      project_id: parseInt(this.config.agentId as string) || 0,\n      session_id: this.sessionId,\n      name: title || `Conversation ${conversations.length + 1}`\n    };\n    \n    conversations.unshift(newConversation);\n    this.saveConversations(conversations);\n    this.currentConversationId = newConversation.id;\n    \n    // Persist the conversation ID for widget mode\n    localStorage.setItem(`customgpt_widget_conversation_${this.config.agentId}`, newConversation.id.toString());\n    \n    // Increment refresh key to trigger ConversationManager update\n    this.conversationRefreshKey++;\n    \n    // Trigger re-render with new conversation\n    this.render();\n    \n    return newConversation;\n  }\n\n  /**\n   * Update conversation title\n   * @param conversationId - ID of conversation to update\n   * @param newTitle - New title for the conversation\n   */\n  public updateConversationTitle(conversationId: string, newTitle: string): void {\n    const conversations = this.getConversations();\n    const conversation = conversations.find(c => c.id === conversationId);\n    \n    if (conversation) {\n      conversation.title = newTitle;\n      this.saveConversations(conversations);\n      // Increment refresh key to trigger ConversationManager update\n      this.conversationRefreshKey++;\n      this.render();\n    }\n  }\n\n  /**\n   * Delete a conversation\n   * @param conversationId - ID of conversation to delete\n   */\n  public deleteConversation(conversationId: string): void {\n    const conversations = this.getConversations();\n    const filtered = conversations.filter(c => c.id !== conversationId);\n    \n    this.saveConversations(filtered);\n    \n    // Increment refresh key to trigger ConversationManager update\n    this.conversationRefreshKey++;\n    \n    // If deleting current conversation, switch to another or create new\n    if (this.currentConversationId === conversationId) {\n      if (filtered.length > 0) {\n        this.switchConversation(filtered[0].id);\n      } else {\n        this.createConversation().catch(err => \n          console.error('Failed to create conversation after deletion:', err)\n        );\n      }\n    } else {\n      // Still need to re-render to update the conversation list\n      this.render();\n    }\n  }\n\n  /**\n   * Save conversations to localStorage\n   * @param conversations - Array of conversations to save\n   */\n  private saveConversations(conversations: any[]): void {\n    try {\n      localStorage.setItem(\n        `customgpt_conversations_${this.sessionId}`,\n        JSON.stringify(conversations)\n      );\n    } catch (e) {\n      console.error('Failed to save conversations:', e);\n      // Handle quota exceeded error\n      if (e instanceof DOMException && e.name === 'QuotaExceededError') {\n        // Try to clean up old conversations\n        this.cleanupOldConversations();\n      }\n    }\n  }\n\n  /**\n   * Clean up old conversations to free up localStorage space\n   */\n  private cleanupOldConversations(): void {\n    const conversations = this.getConversations();\n    // Keep only the 3 most recent conversations\n    const recent = conversations.slice(0, 3);\n    this.saveConversations(recent);\n  }\n\n  // Public methods\n  public open() {\n    if (!this.container) return;\n\n    this.isOpen = true;\n    \n    if (this.config.mode === 'floating') {\n      this.container.style.display = 'block';\n      // Trigger animation\n      setTimeout(() => {\n        if (this.container) {\n          this.container.style.transform = 'translateY(0)';\n          this.container.style.opacity = '1';\n        }\n      }, 10);\n      \n      // Update floating button\n      if (this.floatingButtonRoot) {\n        this.createFloatingButton();\n      }\n    }\n\n    this.config.onOpen?.();\n  }\n\n  public close() {\n    if (!this.container) return;\n\n    this.isOpen = false;\n\n    if (this.config.mode === 'floating') {\n      this.container.style.transform = 'translateY(20px)';\n      this.container.style.opacity = '0';\n      \n      setTimeout(() => {\n        if (this.container) {\n          this.container.style.display = 'none';\n        }\n      }, 300);\n      \n      // Update floating button\n      if (this.floatingButtonRoot) {\n        this.createFloatingButton();\n      }\n    }\n  }\n\n  public toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  public destroy() {\n    if (this.root) {\n      this.root.unmount();\n    }\n    \n    if (this.container && this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container);\n    }\n    \n    // Clean up floating button\n    if (this.floatingButtonRoot) {\n      this.floatingButtonRoot.unmount();\n    }\n    \n    if (this.floatingButtonContainer && this.floatingButtonContainer.parentNode) {\n      this.floatingButtonContainer.parentNode.removeChild(this.floatingButtonContainer);\n    }\n    \n    // Clean up widget stores\n    if (typeof window !== 'undefined') {\n      const widgetStores = (window as any).__customgpt_widget_stores;\n      if (widgetStores && widgetStores[this.sessionId]) {\n        delete widgetStores[this.sessionId];\n      }\n      \n      // Clean up widget instance references\n      const instances = (window as any).__customgpt_widget_instances;\n      if (instances && instances[this.sessionId]) {\n        delete instances[this.sessionId];\n      }\n      \n      if (this.instanceKey) {\n        delete (window as any)[this.instanceKey];\n      }\n    }\n    \n    this.container = null;\n    this.root = null;\n    this.floatingButtonContainer = null;\n    this.floatingButtonRoot = null;\n  }\n\n  public updateConfig(newConfig: Partial<CustomGPTWidgetConfig>) {\n    this.config = { ...this.config, ...newConfig };\n    \n    // Re-render with new config\n    this.render();\n  }\n  \n  /**\n   * Force a re-render of the widget\n   * Useful for updating the UI after state changes\n   */\n  public refresh() {\n    this.render();\n  }\n\n  // Getters\n  public get isOpened() {\n    return this.isOpen;\n  }\n\n  public get configuration() {\n    return { ...this.config };\n  }\n}\n\n// Global API for the widget\ndeclare global {\n  interface Window {\n    CustomGPTWidget: {\n      init: (config: CustomGPTWidgetConfig) => CustomGPTWidget;\n      create: (config: CustomGPTWidgetConfig) => CustomGPTWidget;\n    };\n  }\n}\n\n// Export for UMD build\nconst CustomGPTWidgetAPI = {\n  init: (config: CustomGPTWidgetConfig): CustomGPTWidget => {\n    return new CustomGPTWidget(config);\n  },\n  \n  create: (config: CustomGPTWidgetConfig): CustomGPTWidget => {\n    return new CustomGPTWidget(config);\n  },\n};\n\n// Global assignment for browser usage\nif (typeof window !== 'undefined') {\n  window.CustomGPTWidget = CustomGPTWidgetAPI;\n}\n\n// For module usage\nexport { CustomGPTWidget, CustomGPTWidgetAPI };\nexport default CustomGPTWidgetAPI;","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConversationStore, Conversation } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateConversationName } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n// Session-based conversation isolation\nconst getSessionId = (): string => {\n  // Check if we're running on the server\n  if (typeof window === 'undefined') {\n    return 'server-session';\n  }\n  \n  // Use the current widget session if available\n  if ((window as any).__customgpt_current_session) {\n    return (window as any).__customgpt_current_session;\n  }\n  \n  // Check if we're in widget mode with session configuration\n  if ((window as any).__customgpt_session) {\n    return (window as any).__customgpt_session.sessionId;\n  }\n  \n  // Check for instance-specific sessions (for isolated widgets)\n  if ((window as any).__customgpt_sessions) {\n    // For isolated widgets, we need to determine which session to use\n    // This is tricky since stores are global - we'll use the most recent session\n    const sessions = (window as any).__customgpt_sessions;\n    const sessionIds = Object.keys(sessions);\n    if (sessionIds.length > 0) {\n      // Return the most recently created session\n      return sessionIds[sessionIds.length - 1];\n    }\n  }\n  \n  // Fallback to browser-based session ID\n  try {\n    let sessionId = sessionStorage.getItem('customgpt_session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      sessionStorage.setItem('customgpt_session_id', sessionId);\n    }\n    return sessionId;\n  } catch (e) {\n    // Fallback if sessionStorage is not available\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n};\n\nexport const useConversationStore = create<ConversationStore>()(\n  persist(\n    (set, get) => ({\n      conversations: [],\n      currentConversation: null,\n      loading: false,\n      error: null,\n      // Pagination state\n      currentPage: 1,\n      totalPages: 1,\n      totalConversations: 0,\n      perPage: 20,\n      // Sorting and filtering state\n      sortOrder: 'desc' as const,\n      sortBy: 'id',\n      userFilter: 'all' as const,\n      // Client-side filtering state\n      allConversations: [], // Raw conversations from API\n      searchQuery: '',\n      searchMode: 'name' as const,\n      dateFilter: 'all' as const,\n\n      // Client-side filtering helper function\n      applyFilters: () => {\n        const state = get();\n        let filtered = [...state.allConversations];\n        \n        // Apply search filter\n        if (state.searchQuery.trim()) {\n          const query = state.searchQuery.toLowerCase().trim();\n          filtered = filtered.filter(conv => {\n            switch (state.searchMode) {\n              case 'name':\n                return conv.name.toLowerCase().includes(query);\n              case 'id':\n                return conv.id.toString().includes(query);\n              case 'session':\n                return conv.session_id.toLowerCase().includes(query);\n              default:\n                return conv.name.toLowerCase().includes(query);\n            }\n          });\n        }\n        \n        // Apply date filter\n        if (state.dateFilter !== 'all') {\n          const now = new Date();\n          const filterDate = new Date();\n          \n          switch (state.dateFilter) {\n            case 'today':\n              filterDate.setHours(0, 0, 0, 0);\n              break;\n            case 'week':\n              filterDate.setDate(now.getDate() - 7);\n              break;\n            case 'month':\n              filterDate.setDate(now.getDate() - 30);\n              break;\n          }\n          \n          filtered = filtered.filter(conv => {\n            const convDate = new Date(conv.updated_at);\n            return convDate >= filterDate;\n          });\n        }\n        \n        // Note: User filter and sorting are handled server-side by the API\n        // We don't apply them client-side to avoid conflicts\n        \n        set({ conversations: filtered });\n      },\n\n      // Update search filters\n      setSearchQuery: (query: string) => {\n        set({ searchQuery: query });\n        get().applyFilters();\n      },\n\n      setSearchMode: (mode: 'name' | 'id' | 'session') => {\n        set({ searchMode: mode });\n        get().applyFilters();\n      },\n\n      setDateFilter: (filter: 'all' | 'today' | 'week' | 'month') => {\n        set({ dateFilter: filter });\n        get().applyFilters();\n      },\n\n      fetchConversations: async (projectId: number, params?: {\n        page?: number;\n        per_page?: number;\n        order?: 'asc' | 'desc';\n        orderBy?: string;\n        userFilter?: 'all' | 'me' | string;\n        searchQuery?: string;\n        searchMode?: 'name' | 'id' | 'session';\n        dateFilter?: 'today' | 'week' | 'month';\n      }) => {\n        logger.info('CONVERSATIONS', 'Fetching conversations', { projectId, params });\n        set({ loading: true, error: null });\n        \n        // Update client-side filter state if provided\n        if (params?.searchQuery !== undefined) {\n          set({ searchQuery: params.searchQuery });\n        }\n        if (params?.searchMode !== undefined) {\n          set({ searchMode: params.searchMode });\n        }\n        if (params?.dateFilter !== undefined) {\n          set({ dateFilter: params.dateFilter });\n        }\n        \n        try {\n          const client = getClient();\n          // Only send API-supported parameters\n          const apiParams = {\n            page: params?.page ?? get().currentPage,\n            per_page: params?.per_page ?? get().perPage,\n            order: params?.order ?? get().sortOrder,\n            orderBy: params?.orderBy ?? get().sortBy,\n            userFilter: params?.userFilter ?? get().userFilter,\n          };\n          \n          const response = await client.getConversations(projectId, apiParams);\n          logger.info('CONVERSATIONS', 'API response received', { \n            projectId,\n            responseType: typeof response,\n            hasData: !!(response as any)?.data,\n            dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n          });\n          \n          // Handle different response formats\n          let conversations = [];\n          let paginationData = null;\n          \n          if (response && typeof response === 'object') {\n            // Standard paginated response format\n            if ((response as any).data && (response as any).data.data) {\n              conversations = (response as any).data.data;\n              paginationData = (response as any).data;\n            } else if (Array.isArray((response as any).data)) {\n              conversations = (response as any).data;\n            } else if (Array.isArray(response)) {\n              conversations = response;\n            }\n          }\n          \n          logger.info('CONVERSATIONS', 'Processed conversations', {\n            count: conversations.length,\n            paginationData,\n            conversations: conversations.map((c: any) => ({ \n              id: c.id, \n              name: c.name,\n              messagesCount: c.messages?.length || 0 \n            }))\n          });\n          \n          // Update state with conversations and pagination data\n          set({ \n            allConversations: conversations, // Store raw conversations from API\n            loading: false,\n            // Update pagination state if available\n            currentPage: paginationData?.current_page ?? 1,\n            totalPages: paginationData?.last_page ?? 1,\n            totalConversations: paginationData?.total ?? conversations.length,\n            // Update sorting/filtering if params were provided\n            ...(params?.order && { sortOrder: params.order }),\n            ...(params?.orderBy && { sortBy: params.orderBy }),\n            ...(params?.userFilter && { userFilter: params.userFilter }),\n          });\n          \n          // Apply client-side filters\n          get().applyFilters();\n        } catch (error) {\n          logger.error('CONVERSATIONS', 'Failed to fetch conversations', error, {\n            projectId,\n            errorType: error instanceof Error ? error.constructor.name : typeof error,\n            status: (error as any)?.status,\n            message: (error as any)?.message\n          });\n          // Don't clear existing conversations on error - preserve local state\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to fetch conversations',\n            loading: false,\n            // Keep existing conversations instead of clearing them\n          });\n        }\n      },\n\n      createConversation: async (projectId: number, name?: string) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createConversation(projectId, name ? { name } : undefined);\n          const newConversation = response.data;\n          \n          set(state => ({ \n            allConversations: [newConversation, ...state.allConversations],\n            currentConversation: newConversation,\n            loading: false,\n          }));\n          \n          // Apply client-side filters\n          get().applyFilters();\n        } catch (error) {\n          console.error('Failed to create conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      selectConversation: (conversation: Conversation | null) => {\n        set({ currentConversation: conversation });\n      },\n\n      deleteConversation: async (conversationId: string | number) => {\n        const { conversations, currentConversation } = get();\n        const conversation = conversations.find(c => c.id.toString() === conversationId.toString());\n        \n        if (!conversation) return;\n\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteConversation(conversation.project_id, conversation.session_id);\n          \n          const updatedAllConversations = get().allConversations.filter(c => c.id.toString() !== conversationId.toString());\n          \n          set({ \n            allConversations: updatedAllConversations,\n            currentConversation: currentConversation?.id.toString() === conversationId.toString() \n              ? (updatedAllConversations.length > 0 ? updatedAllConversations[0] : null)\n              : currentConversation,\n            loading: false,\n          });\n          \n          // Apply client-side filters\n          get().applyFilters();\n        } catch (error) {\n          console.error('Failed to delete conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      updateConversation: async (conversationId: number, sessionId: string, data: { name: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateConversation(conversationId, sessionId, data);\n          const updatedConversation = response.data;\n          \n          set(state => ({ \n            allConversations: state.allConversations.map(c => \n              c.id === conversationId ? updatedConversation : c\n            ),\n            currentConversation: state.currentConversation?.id === conversationId \n              ? updatedConversation \n              : state.currentConversation,\n            loading: false,\n          }));\n          \n          // Apply client-side filters\n          get().applyFilters();\n        } catch (error) {\n          console.error('Failed to update conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      // Auto-create conversation if none exists\n      ensureConversation: async (projectId: number, firstMessage?: string) => {\n        const { currentConversation } = get();\n        \n        // If we have a current conversation for this project, use it\n        if (currentConversation && currentConversation.project_id === projectId) {\n          return currentConversation;\n        }\n        \n        // If no current conversation, always create a new one\n        // This ensures that seeing the welcome screen (currentConversation = null) \n        // always results in starting a fresh conversation\n        const name = firstMessage \n          ? generateConversationName(firstMessage)\n          : `Chat ${new Date().toLocaleDateString()}`;\n          \n        await get().createConversation(projectId, name);\n        return get().currentConversation!;\n      },\n    }),\n    {\n      name: `customgpt-conversations-${getSessionId()}`,\n      partialize: (state) => ({\n        conversations: state.conversations,\n        allConversations: state.allConversations,\n        searchQuery: state.searchQuery,\n        searchMode: state.searchMode,\n        dateFilter: state.dateFilter,\n        // Don't persist currentConversation to always start fresh\n      }),\n      onRehydrateStorage: () => (state) => {\n        if (state) {\n          // Ensure conversations is an array\n          if (!Array.isArray(state.conversations)) {\n            state.conversations = [];\n          }\n          \n          // Ensure allConversations is an array\n          if (!Array.isArray(state.allConversations)) {\n            state.allConversations = [];\n          }\n          \n          // Ensure filter state is initialized\n          if (!state.searchQuery) state.searchQuery = '';\n          if (!state.searchMode) state.searchMode = 'name';\n          if (!state.dateFilter) state.dateFilter = 'all';\n          \n          // Clear current conversation on fresh app load to start with welcome screen\n          state.currentConversation = null;\n        }\n      },\n    }\n  )\n);","/**\n * Utility Functions Library\n * \n * Common utility functions used throughout the application.\n * These utilities handle:\n * - CSS class merging for Tailwind\n * - ID generation\n * - File operations\n * - Date/time formatting\n * - Clipboard operations\n * - HTML sanitization\n * - API helpers\n * \n * Features:\n * - Pure, reusable utility functions with full TypeScript support\n * - Comprehensive JSDoc documentation with usage examples\n * - Robust edge case handling and error recovery\n * - Optimized performance with configurable options\n * - Production-ready implementations for common operations\n */\n\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\nimport DOMPurify from 'dompurify';\n\n/**\n * Utility function for combining Tailwind CSS classes\n * \n * This function combines clsx and tailwind-merge to:\n * 1. Support conditional classes (clsx)\n * 2. Properly merge Tailwind classes (tailwind-merge)\n * \n * @example\n * cn('px-2 py-1', 'px-4') // Returns: 'py-1 px-4'\n * cn('text-red-500', condition && 'text-blue-500')\n * cn(['text-sm', 'font-bold'], { 'opacity-50': isDisabled })\n * \n * @param inputs - Class strings, conditionals, arrays, or objects\n * @returns Merged class string\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Generate a unique ID\n * \n * Creates a unique identifier using random string and timestamp.\n * Not cryptographically secure - use for UI elements only.\n * \n * @example\n * generateId() // Returns: 'a1b2c3d41234567890'\n * \n * @returns Unique string ID\n */\nexport function generateId(): string {\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\n}\n\n/**\n * Format file size in bytes to human readable format\n * \n * Converts byte values to appropriate units (KB, MB, GB).\n * Always shows 2 decimal places except for bytes.\n * \n * @example\n * formatFileSize(0) // Returns: '0 Bytes'\n * formatFileSize(1024) // Returns: '1 KB'\n * formatFileSize(1536) // Returns: '1.5 KB'\n * formatFileSize(1048576) // Returns: '1 MB'\n * \n * @param bytes - File size in bytes\n * @returns Formatted string with appropriate unit\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * Get file icon based on file type\n * \n * Returns an emoji icon based on the MIME type or file extension.\n * Used in file upload UI components.\n * \n * @example\n * getFileIcon('application/pdf') // Returns: '📄'\n * getFileIcon('image/png') // Returns: '🖼️'\n * getFileIcon('text/plain') // Returns: '📝'\n * getFileIcon('unknown/type') // Returns: '📎' (default)\n * \n * @param fileType - MIME type or file extension\n * @returns Emoji icon representing the file type\n */\nexport function getFileIcon(fileType: string): string {\n  const type = fileType.toLowerCase();\n  \n  // Document types\n  if (type.includes('pdf')) return '📄';\n  if (type.includes('word') || type.includes('doc')) return '📄';\n  if (type.includes('text') || type.includes('txt')) return '📝';\n  \n  // Media types\n  if (type.includes('image')) return '🖼️';\n  if (type.includes('video')) return '🎥';\n  if (type.includes('audio')) return '🎵';\n  \n  // Data types\n  if (type.includes('excel') || type.includes('sheet')) return '📊';\n  if (type.includes('powerpoint') || type.includes('presentation')) return '📈';\n  if (type.includes('json')) return '📋';\n  if (type.includes('csv')) return '📊';\n  \n  // Archive types\n  if (type.includes('zip') || type.includes('rar')) return '🗜️';\n  \n  // Default icon\n  return '📎';\n}\n\n/**\n * Validate file type against allowed types\n * \n * Checks if a file type is in the allowed list.\n * Case-insensitive partial matching.\n * \n * @example\n * const allowed = ['image/', 'application/pdf'];\n * isFileTypeAllowed('image/png', allowed) // Returns: true\n * isFileTypeAllowed('IMAGE/JPEG', allowed) // Returns: true (case-insensitive)\n * isFileTypeAllowed('text/plain', allowed) // Returns: false\n * \n * @param fileType - MIME type to check\n * @param allowedTypes - List of allowed MIME types or patterns\n * @returns Whether the file type is allowed\n */\nexport function isFileTypeAllowed(fileType: string, allowedTypes: readonly string[]): boolean {\n  return allowedTypes.some(type => fileType.toLowerCase().includes(type.toLowerCase()));\n}\n\n/**\n * Format timestamp to human readable format\n * \n * Converts ISO timestamps to relative time strings.\n * Shows relative time for recent dates, absolute date for older.\n * \n * @example\n * // Assuming current time is 2024-01-01 12:00:00\n * formatTimestamp('2024-01-01T11:59:30Z') // Returns: 'Just now'\n * formatTimestamp('2024-01-01T11:30:00Z') // Returns: '30m ago'\n * formatTimestamp('2024-01-01T08:00:00Z') // Returns: '4h ago'\n * formatTimestamp('2023-12-25T12:00:00Z') // Returns: '7d ago'\n * formatTimestamp('2023-11-01T12:00:00Z') // Returns: '11/1/2023'\n * \n * @param timestamp - ISO date string\n * @returns Human-readable time difference or date\n */\nexport function formatTimestamp(timestamp: string): string {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diffInMs = now.getTime() - date.getTime();\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n  \n  // Recent times shown as relative\n  if (diffInMinutes < 1) return 'Just now';\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n  if (diffInHours < 24) return `${diffInHours}h ago`;\n  if (diffInDays < 7) return `${diffInDays}d ago`;\n  \n  // Older times shown as absolute date\n  return date.toLocaleDateString();\n}\n\n/**\n * Copy text to clipboard\n * \n * Uses the modern Clipboard API with fallback error handling.\n * Returns success/failure for UI feedback.\n * \n * @example\n * const success = await copyToClipboard('Hello, world!');\n * if (success) {\n *   toast.success('Copied to clipboard');\n * } else {\n *   toast.error('Failed to copy');\n * }\n * \n * @param text - Text to copy to clipboard\n * @returns Promise resolving to success boolean\n */\nexport async function copyToClipboard(text: string): Promise<boolean> {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch (error) {\n    // Copy failed, return false status\n    console.error('Failed to copy to clipboard:', error);\n    return false;\n  }\n}\n\n/**\n * Sanitize HTML content\n * \n * Removes dangerous HTML/JS to prevent XSS attacks.\n * Safe for rendering user-generated content.\n * Skips sanitization on server-side (SSR).\n * \n * @example\n * const dirty = '<script>alert(\"XSS\")</script><p>Hello</p>';\n * sanitizeHtml(dirty) // Returns: '<p>Hello</p>'\n * \n * const safe = '<p>Hello <strong>world</strong></p>';\n * sanitizeHtml(safe) // Returns: '<p>Hello <strong>world</strong></p>'\n * \n * @param html - Raw HTML string\n * @returns Sanitized HTML safe for rendering\n */\nexport function sanitizeHtml(html: string): string {\n  if (typeof window === 'undefined') {\n    return html; // Skip sanitization on server side (no DOM)\n  }\n  \n  return DOMPurify.sanitize(html, {\n    ALLOWED_TAGS: ['p', 'br', 'strong', 'em', 'code', 'pre', 'a', 'ul', 'ol', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n    ALLOWED_ATTR: ['href', 'target', 'rel', 'class'],\n  });\n}\n\n/**\n * Debounce function\n * \n * Delays function execution until after wait milliseconds have\n * elapsed since the last time it was invoked. Useful for search\n * inputs, window resize handlers, etc.\n * \n * @example\n * const debouncedSearch = debounce((query: string) => {\n *   console.log('Searching for:', query);\n * }, 300);\n * \n * // Rapid calls...\n * debouncedSearch('a');    // Won't execute\n * debouncedSearch('ab');   // Won't execute\n * debouncedSearch('abc');  // Will execute after 300ms\n * \n * @param func - Function to debounce\n * @param wait - Milliseconds to delay\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(null, args), wait);\n  };\n}\n\n/**\n * Throttle function\n * \n * Ensures function is called at most once per specified time period.\n * First call executes immediately, subsequent calls are ignored until\n * the time period expires.\n * \n * @example\n * const throttledScroll = throttle(() => {\n *   console.log('Scroll position:', window.scrollY);\n * }, 100);\n * \n * // During rapid scrolling:\n * // t=0ms: executes immediately\n * // t=50ms: ignored (still in throttle period)\n * // t=100ms: executes (throttle period expired)\n * \n * @param func - Function to throttle\n * @param limit - Minimum milliseconds between calls\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  \n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func.apply(null, args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n/**\n * Truncate text to specified length\n * \n * Cuts text at the specified length and adds ellipsis.\n * Trims whitespace from the cut point.\n * \n * @example\n * truncateText('Hello, world!', 5) // Returns: 'Hello...'\n * truncateText('Short', 10) // Returns: 'Short'\n * truncateText('Hello   ', 5) // Returns: 'Hello...' (trimmed)\n * \n * @param text - Text to truncate\n * @param maxLength - Maximum length before truncation\n * @returns Truncated text with ellipsis if needed\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength).trim() + '...';\n}\n\n/**\n * Validate CustomGPT API key format\n * \n * Checks if the provided string matches the CustomGPT API key format.\n * Format: {digits}|{alphanumeric_string}\n * - At least 3 digits before the pipe\n * - At least 20 alphanumeric characters after the pipe\n * \n * @example\n * isValidApiKey('123|abcdefghijklmnopqrst') // Returns: true\n * isValidApiKey('7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x') // Returns: true\n * isValidApiKey('12|short') // Returns: false (too few digits/chars)\n * isValidApiKey('no-pipe') // Returns: false (wrong format)\n * isValidApiKey('') // Returns: false (empty)\n * \n * @param apiKey - API key string to validate\n * @returns Whether the API key is valid\n */\nexport function isValidApiKey(apiKey: string): boolean {\n  if (!apiKey || typeof apiKey !== 'string') {\n    return false;\n  }\n  \n  // Trim whitespace\n  apiKey = apiKey.trim();\n  \n  // CustomGPT API key format: starts with digits followed by | then alphanumeric string\n  // Example: 7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x\n  // Must have at least 3 digits, pipe, and at least 20 characters after pipe\n  return /^\\d{3,}\\|[a-zA-Z0-9]{20,}$/.test(apiKey);\n}\n\n/**\n * Parse streaming response chunk\n * \n * Handles various SSE (Server-Sent Events) formats from the CustomGPT API.\n * Supports both standard SSE format and raw JSON lines.\n * \n * Formats handled:\n * - SSE events: \"event: progress\", \"event: finish\"\n * - SSE data: \"data: {json}\", \"data: [DONE]\"\n * - Raw JSON: {\"content\": \"...\", \"citations\": [...]}\n * - Plain text: \"data: plain text content\"\n * \n * @example\n * parseStreamChunk('data: {\"content\": \"Hello\"}') \n * // Returns: { type: 'content', content: 'Hello' }\n * \n * parseStreamChunk('data: [DONE]')\n * // Returns: { type: 'done' }\n * \n * parseStreamChunk('event: finish')\n * // Returns: { type: 'done' }\n * \n * @param chunk - Raw chunk from SSE stream\n * @returns Parsed chunk object or null if should be skipped\n */\nexport function parseStreamChunk(chunk: string): any | null {\n  try {\n    \n    // Skip event lines - CustomGPT sends \"event: progress\" etc.\n    if (chunk.startsWith('event: ')) {\n      const eventType = chunk.slice(7).trim();\n      \n      // Handle specific events if needed\n      if (eventType === 'finish') {\n        return { type: 'done' };\n      }\n      \n      // Skip other event types\n      return null;\n    }\n    \n    // Handle SSE format\n    if (chunk.startsWith('data: ')) {\n      const data = chunk.slice(6).trim();\n      \n      if (data === '[DONE]' || data === 'DONE') return { type: 'done' };\n      \n      // CustomGPT might send plain text data instead of JSON\n      // Try to parse as JSON first\n      try {\n        const parsed = JSON.parse(data);\n        \n        // Handle different response formats\n        if (typeof parsed === 'object') {\n          // If it already has a type, return as is\n          if (parsed.type) {\n            return parsed;\n          }\n          \n          // Handle CustomGPT format where content might be a direct property\n          if (parsed.content !== undefined) {\n            return { type: 'content', content: parsed.content, citations: parsed.citations };\n          }\n          \n          // Handle citation-only responses\n          if (parsed.citations && !parsed.content) {\n            return { type: 'citation', citations: parsed.citations };\n          }\n          \n          // Handle message field (some APIs use 'message' instead of 'content')\n          if (parsed.message !== undefined) {\n            return { type: 'content', content: parsed.message, citations: parsed.citations };\n          }\n          \n          // Handle delta format (some streaming APIs use delta.content)\n          if (parsed.delta && parsed.delta.content !== undefined) {\n            return { type: 'content', content: parsed.delta.content, citations: parsed.citations };\n          }\n          \n          // Handle choices format (OpenAI-style streaming)\n          if (parsed.choices && parsed.choices[0] && parsed.choices[0].delta) {\n            const delta = parsed.choices[0].delta;\n            if (delta.content !== undefined) {\n              return { type: 'content', content: delta.content, citations: parsed.citations };\n            }\n          }\n        }\n        \n        // Return the parsed data as is if we can't determine the format\n        return parsed;\n      } catch (jsonError) {\n        // If JSON parsing fails, treat it as plain text content\n        return { type: 'content', content: data };\n      }\n    }\n    \n    // Handle raw JSON lines (no \"data: \" prefix)\n    if (chunk.trim().startsWith('{')) {\n      try {\n        const parsed = JSON.parse(chunk.trim());\n        \n        if (parsed.content !== undefined || parsed.citations !== undefined) {\n          return { \n            type: parsed.content ? 'content' : 'citation', \n            content: parsed.content,\n            citations: parsed.citations \n          };\n        }\n        \n        // Handle message field\n        if (parsed.message !== undefined) {\n          return { type: 'content', content: parsed.message, citations: parsed.citations };\n        }\n        \n        return parsed;\n      } catch (parseError) {\n        console.warn('Failed to parse raw JSON chunk:', parseError);\n      }\n    }\n    \n    // Handle plain text responses (fallback)\n    if (chunk.trim() && !chunk.includes('data:') && !chunk.startsWith('{')) {\n      return { type: 'content', content: chunk.trim() };\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Failed to parse stream chunk:', chunk, error);\n    return null;\n  }\n}\n\n/**\n * Extract inline citations from text\n * \n * Finds all citation references in format [1], [2], etc.\n * Returns the original text and array of citation numbers.\n * \n * @example\n * extractInlineCitations('Hello [1] world [2]!')\n * // Returns: { text: 'Hello [1] world [2]!', citations: [1, 2] }\n * \n * extractInlineCitations('No citations here')\n * // Returns: { text: 'No citations here', citations: [] }\n * \n * @param text - Text potentially containing citations\n * @returns Object with text and citation numbers\n */\nexport function extractInlineCitations(text: string): { text: string; citations: number[] } {\n  const citationRegex = /\\[(\\d+)\\]/g;\n  const citations: number[] = [];\n  let match;\n  \n  while ((match = citationRegex.exec(text)) !== null) {\n    citations.push(parseInt(match[1]));\n  }\n  \n  return { text, citations };\n}\n\n/**\n * Create a delay promise\n * \n * Utility for adding delays in async functions.\n * Useful for retries, animations, or testing.\n * \n * @example\n * async function slowOperation() {\n *   console.log('Starting...');\n *   await delay(1000); // Wait 1 second\n *   console.log('Done!');\n * }\n * \n * @param ms - Milliseconds to delay\n * @returns Promise that resolves after delay\n */\nexport function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Retry a function with exponential backoff\n * \n * Retries a failing async function with increasing delays.\n * Delays: 1s, 2s, 4s, 8s, etc. (exponential)\n * \n * @example\n * // Retry API call up to 3 times\n * const data = await retryWithBackoff(\n *   () => fetch('/api/data').then(r => r.json()),\n *   3,    // max attempts\n *   1000  // base delay (1s)\n * );\n * \n * // Delays: attempt 1 = immediate, attempt 2 = 1s, attempt 3 = 2s\n * \n * @param fn - Async function to retry\n * @param maxAttempts - Maximum retry attempts (default: 3)\n * @param baseDelay - Base delay in ms (default: 1000)\n * @returns Result from successful function call\n * @throws Last error if all attempts fail\n */\nexport async function retryWithBackoff<T>(\n  fn: () => Promise<T>,\n  maxAttempts: number = 3,\n  baseDelay: number = 1000\n): Promise<T> {\n  let lastError: Error;\n  \n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n      \n      if (attempt === maxAttempts) {\n        throw lastError;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s, etc.\n      const delayTime = baseDelay * Math.pow(2, attempt - 1);\n      await delay(delayTime);\n    }\n  }\n  \n  throw lastError!;\n}\n\n/**\n * Check if device is mobile\n * \n * Based on viewport width (<768px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is mobile-sized\n */\nexport function isMobile(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth < 768;\n}\n\n/**\n * Check if device is tablet\n * \n * Based on viewport width (768px-1023px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is tablet-sized\n */\nexport function isTablet(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 768 && window.innerWidth < 1024;\n}\n\n/**\n * Check if device is desktop\n * \n * Based on viewport width (≥1024px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is desktop-sized\n */\nexport function isDesktop(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 1024;\n}\n\n/**\n * Get responsive container class\n * \n * Returns Tailwind classes for responsive container sizing.\n * - Mobile: Full width/height\n * - Tablet: Max 2xl width, centered\n * - Desktop: Max 4xl width, centered\n * \n * @returns Tailwind class string for container\n */\nexport function getResponsiveContainer(): string {\n  if (isMobile()) return 'w-full h-full';\n  if (isTablet()) return 'w-full max-w-2xl mx-auto';\n  return 'w-full max-w-4xl mx-auto';\n}\n\n/**\n * Format conversation name from first message\n * \n * Creates a conversation title from the first message.\n * Takes first 6 words, max 50 characters.\n * \n * @example\n * generateConversationName('Hello, can you help me with JavaScript?')\n * // Returns: 'Hello, can you help me with'\n * \n * generateConversationName('Short')\n * // Returns: 'Short'\n * \n * @param firstMessage - The first message in conversation\n * @returns Formatted conversation name\n */\nexport function generateConversationName(firstMessage: string): string {\n  // Remove common API/system prefixes\n  let cleanedMessage = firstMessage.trim();\n  \n  // Remove OpenAI- prefix or similar system prefixes\n  cleanedMessage = cleanedMessage.replace(/^(OpenAI-|System-|API-|Assistant:|User:)\\s*/i, '');\n  \n  const words = cleanedMessage.split(/\\s+/);\n  const title = words.slice(0, 6).join(' ');\n  return title.length > 50 ? title.substring(0, 50).trim() + '...' : title;\n}\n\n/**\n * Validate URL format\n * \n * Checks if string is a valid URL using URL constructor.\n * \n * @example\n * isValidUrl('https://example.com') // Returns: true\n * isValidUrl('http://localhost:3000/path') // Returns: true\n * isValidUrl('not a url') // Returns: false\n * isValidUrl('') // Returns: false\n * \n * @param url - String to validate\n * @returns Whether string is a valid URL\n */\nexport function isValidUrl(url: string): boolean {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get file extension from filename\n * \n * Extracts the file extension in lowercase.\n * \n * @example\n * getFileExtension('document.pdf') // Returns: 'pdf'\n * getFileExtension('image.PNG') // Returns: 'png'\n * getFileExtension('no-extension') // Returns: ''\n * getFileExtension('multi.part.name.txt') // Returns: 'txt'\n * \n * @param filename - Filename to extract extension from\n * @returns Lowercase extension or empty string\n */\nexport function getFileExtension(filename: string): string {\n  return filename.split('.').pop()?.toLowerCase() || '';\n}\n\n/**\n * Check if file is an image\n * \n * Checks MIME type for image/ prefix.\n * \n * @example\n * isImageFile('image/png') // Returns: true\n * isImageFile('image/jpeg') // Returns: true\n * isImageFile('application/pdf') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is an image\n */\nexport function isImageFile(fileType: string): boolean {\n  return fileType.startsWith('image/');\n}\n\n/**\n * Check if file is a document\n * \n * Checks against common document MIME types including:\n * - PDF files\n * - Microsoft Word documents\n * - Plain text files\n * - CSV spreadsheets\n * - JSON/XML data files\n * \n * @example\n * isDocumentFile('application/pdf') // Returns: true\n * isDocumentFile('text/plain') // Returns: true\n * isDocumentFile('image/png') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is a supported document type\n */\nexport function isDocumentFile(fileType: string): boolean {\n  const documentTypes = [\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n  ];\n  return documentTypes.includes(fileType);\n}\n\n/**\n * Create download link for file\n * \n * Programmatically downloads content as a file.\n * Creates a blob URL and triggers download.\n * \n * @example\n * // Download text file\n * downloadFile('Hello, world!', 'greeting.txt');\n * \n * // Download JSON file\n * const data = { name: 'John', age: 30 };\n * downloadFile(\n *   JSON.stringify(data, null, 2),\n *   'data.json',\n *   'application/json'\n * );\n * \n * @param content - File content as string\n * @param filename - Name for downloaded file\n * @param mimeType - MIME type (default: 'text/plain')\n */\nexport function downloadFile(content: string, filename: string, mimeType: string = 'text/plain'): void {\n  const blob = new Blob([content], { type: mimeType });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n}\n\n/**\n * Escape HTML entities\n * \n * Prevents XSS by escaping HTML special characters.\n * Use when displaying user input as HTML.\n * \n * @example\n * escapeHtml('<script>alert(\"XSS\")</script>')\n * // Returns: '&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;'\n * \n * escapeHtml('Hello & \"world\"')\n * // Returns: 'Hello &amp; &quot;world&quot;'\n * \n * @param unsafe - Raw string that may contain HTML\n * @returns HTML-escaped string\n */\nexport function escapeHtml(unsafe: string): string {\n  return unsafe\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\n/**\n * Handle API errors and extract error message\n * \n * Normalizes various error formats into consistent structure.\n * Handles:\n * - API response errors (4xx, 5xx)\n * - Network/connection errors\n * - Client-side errors\n * \n * @example\n * try {\n *   await apiCall();\n * } catch (error) {\n *   const { message, code } = handleApiError(error);\n *   toast.error(message);\n *   if (code === 401) {\n *     // Handle unauthorized\n *   }\n * }\n * \n * @param error - Error object from API call\n * @returns Normalized error with message and optional code\n */\nexport function handleApiError(error: any): { message: string; code?: number } {\n  console.error('API Error:', error);\n  \n  if (error.response) {\n    // API responded with an error\n    const data = error.response.data;\n    // Handle nested error formats\n    if (data && data.data && data.data.message) {\n      return {\n        message: data.data.message,\n        code: data.data.code || error.response.status\n      };\n    }\n    // Handle direct message format\n    if (data && data.message) {\n      return {\n        message: data.message,\n        code: error.response.status\n      };\n    }\n    // Fallback to status code\n    return {\n      message: `API Error: ${error.response.status}`,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    // Request was made but no response received\n    return {\n      message: 'No response from server. Please check your connection.',\n      code: 0\n    };\n  } else {\n    // Something else happened (e.g., request setup error)\n    return {\n      message: error.message || 'An unexpected error occurred',\n      code: 0\n    };\n  }\n}\n\n/**\n * Constants for file uploads and API\n * \n * Central configuration for limits and constraints.\n * Modify these values to customize behavior:\n * \n * - MAX_FILE_SIZE: Maximum upload size per file\n * - ACCEPTED_FILE_TYPES: MIME types allowed for upload\n * - MAX_MESSAGE_LENGTH: Character limit for messages\n * - API_TIMEOUT: Request timeout for regular API calls\n * - STREAM_TIMEOUT: Timeout for streaming responses\n * - RETRY_ATTEMPTS: Number of retries on failure\n * - RETRY_DELAY: Base delay between retries\n * \n * @example\n * // Check file size\n * if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n *   throw new Error('File too large');\n * }\n * \n * // Configure retry\n * await retryWithBackoff(\n *   apiCall,\n *   CONSTANTS.RETRY_ATTEMPTS,\n *   CONSTANTS.RETRY_DELAY\n * );\n */\nexport const CONSTANTS = {\n  /** Maximum file size in bytes (10MB) */\n  MAX_FILE_SIZE: 10 * 1024 * 1024,\n  \n  /** Accepted MIME types for file uploads */\n  ACCEPTED_FILE_TYPES: [\n    // Documents\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n    // Images\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n  ],\n  \n  /** Maximum characters per message */\n  MAX_MESSAGE_LENGTH: 4000,\n  \n  /** API request timeout in milliseconds (30s) */\n  API_TIMEOUT: 30000,\n  \n  /** Streaming request timeout in milliseconds (60s) */\n  STREAM_TIMEOUT: 60000,\n  \n  /** Number of retry attempts for failed requests */\n  RETRY_ATTEMPTS: 3,\n  \n  /** Base delay between retries in milliseconds (1s) */\n  RETRY_DELAY: 1000,\n} as const;","/**\n * Mathematical utilities for voice themes\n * \n * Common mathematical functions and helpers used across different voice themes\n */\n\n/**\n * Linear interpolation between two values\n */\nexport const lerp = (start: number, end: number, factor: number): number => {\n  return start + (end - start) * factor;\n};\n\n/**\n * Smooth step interpolation (ease in/out)\n */\nexport const smoothStep = (edge0: number, edge1: number, x: number): number => {\n  const t = Math.max(0, Math.min(1, (x - edge0) / (edge1 - edge0)));\n  return t * t * (3 - 2 * t);\n};\n\n/**\n * Clamp a value between min and max\n */\nexport const clamp = (value: number, min: number, max: number): number => {\n  return Math.max(min, Math.min(max, value));\n};\n\n/**\n * Map a value from one range to another\n */\nexport const map = (value: number, inMin: number, inMax: number, outMin: number, outMax: number): number => {\n  return ((value - inMin) / (inMax - inMin)) * (outMax - outMin) + outMin;\n};\n\n/**\n * Generate random number between min and max\n */\nexport const random = (min: number, max: number): number => {\n  return Math.random() * (max - min) + min;\n};\n\n/**\n * Generate random integer between min and max (inclusive)\n */\nexport const randomInt = (min: number, max: number): number => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Distance between two 2D points\n */\nexport const distance2D = (x1: number, y1: number, x2: number, y2: number): number => {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\n/**\n * Distance between two 3D points\n */\nexport const distance3D = (x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number => {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const dz = z2 - z1;\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n};\n\n/**\n * Normalize angle to 0-2π range\n */\nexport const normalizeAngle = (angle: number): number => {\n  while (angle < 0) angle += 2 * Math.PI;\n  while (angle >= 2 * Math.PI) angle -= 2 * Math.PI;\n  return angle;\n};\n\n/**\n * Convert degrees to radians\n */\nexport const degToRad = (degrees: number): number => {\n  return degrees * (Math.PI / 180);\n};\n\n/**\n * Convert radians to degrees\n */\nexport const radToDeg = (radians: number): number => {\n  return radians * (180 / Math.PI);\n};\n\n/**\n * Sine wave with customizable amplitude, frequency, and phase\n */\nexport const sineWave = (time: number, amplitude: number = 1, frequency: number = 1, phase: number = 0): number => {\n  return amplitude * Math.sin(frequency * time + phase);\n};\n\n/**\n * Cosine wave with customizable amplitude, frequency, and phase\n */\nexport const cosineWave = (time: number, amplitude: number = 1, frequency: number = 1, phase: number = 0): number => {\n  return amplitude * Math.cos(frequency * time + phase);\n};\n\n/**\n * 3D rotation around X axis\n */\nexport const rotateX = (x: number, y: number, z: number, angle: number): [number, number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return [\n    x,\n    y * cos - z * sin,\n    y * sin + z * cos\n  ];\n};\n\n/**\n * 3D rotation around Y axis\n */\nexport const rotateY = (x: number, y: number, z: number, angle: number): [number, number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return [\n    x * cos + z * sin,\n    y,\n    -x * sin + z * cos\n  ];\n};\n\n/**\n * 3D rotation around Z axis\n */\nexport const rotateZ = (x: number, y: number, z: number, angle: number): [number, number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return [\n    x * cos - y * sin,\n    x * sin + y * cos,\n    z\n  ];\n};\n\n/**\n * 3D to 2D projection\n */\nexport const project3D = (x: number, y: number, z: number, focalLength: number, centerX: number, centerY: number): [number, number] => {\n  const scale = focalLength / (focalLength - z);\n  return [\n    x * scale + centerX,\n    y * scale + centerY\n  ];\n};\n\n/**\n * Cubic bezier curve interpolation\n */\nexport const cubicBezier = (t: number, p0: number, p1: number, p2: number, p3: number): number => {\n  const oneMinusT = 1 - t;\n  return oneMinusT * oneMinusT * oneMinusT * p0 +\n         3 * oneMinusT * oneMinusT * t * p1 +\n         3 * oneMinusT * t * t * p2 +\n         t * t * t * p3;\n};\n\n/**\n * Noise function (simplified Perlin-like noise)\n */\nexport const noise = (x: number, y: number = 0): number => {\n  const n = Math.sin(x * 12.9898 + y * 78.233) * 43758.5453;\n  return (n - Math.floor(n)) * 2 - 1;\n};\n\n/**\n * HSL to RGB conversion\n */\nexport const hslToRgb = (h: number, s: number, l: number): [number, number, number] => {\n  h = h / 360;\n  s = s / 100;\n  l = l / 100;\n\n  const hue2rgb = (p: number, q: number, t: number): number => {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1/6) return p + (q - p) * 6 * t;\n    if (t < 1/2) return q;\n    if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n    return p;\n  };\n\n  if (s === 0) {\n    return [l * 255, l * 255, l * 255];\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    return [\n      Math.round(hue2rgb(p, q, h + 1/3) * 255),\n      Math.round(hue2rgb(p, q, h) * 255),\n      Math.round(hue2rgb(p, q, h - 1/3) * 255)\n    ];\n  }\n};\n\n/**\n * Easing functions - these are aliases for common easing patterns\n */\nexport const easeInOutQuart = (t: number): number => {\n  return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t;\n};\n\nexport const easeInOutCubic = (t: number): number => {\n  return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n};\n\nexport const easeOutBounce = (t: number): number => {\n  if (t < 1 / 2.75) {\n    return 7.5625 * t * t;\n  } else if (t < 2 / 2.75) {\n    return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;\n  } else if (t < 2.5 / 2.75) {\n    return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;\n  } else {\n    return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;\n  }\n};\n\nexport const easeInOutSine = (t: number): number => {\n  return -(Math.cos(Math.PI * t) - 1) / 2;\n};\n\nexport const easeInOutExpo = (t: number): number => {\n  if (t === 0) return 0;\n  if (t === 1) return 1;\n  return t < 0.5\n    ? Math.pow(2, 20 * t - 10) / 2\n    : (2 - Math.pow(2, -20 * t + 10)) / 2;\n};\n\n/**\n * 2D Perlin-like noise function\n */\nexport const noise2D = (x: number, y: number): number => {\n  const n = Math.sin(x * 12.9898 + y * 78.233) * 43758.5453;\n  return (n - Math.floor(n)) * 2 - 1;\n};\n\n/**\n * Alias for smoothStep to maintain compatibility\n */\nexport const smoothstep = smoothStep;","export type LogLevel = 'info' | 'warn' | 'error';\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  category: string;\n  message: string;\n  data?: any;\n  error?: any;\n  stack?: string;\n}\n\nclass Logger {\n  private static instance: Logger;\n  private isClient: boolean;\n  private logs: LogEntry[] = [];\n\n  private constructor() {\n    this.isClient = typeof window !== 'undefined';\n  }\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  private formatMessage(entry: LogEntry): string {\n    const { timestamp, level, category, message, data, error, stack } = entry;\n    let formatted = `[${timestamp}] [${level.toUpperCase()}] [${category}] ${message}`;\n    \n    if (data) {\n      formatted += `\\nData: ${JSON.stringify(data, null, 2)}`;\n    }\n    \n    if (error) {\n      formatted += `\\nError: ${error.message || error}`;\n      if (stack) {\n        formatted += `\\nStack: ${stack}`;\n      }\n    }\n    \n    return formatted;\n  }\n\n  private writeToFile(entry: LogEntry) {\n    // File writing is handled by the API route\n    // This method is kept for compatibility\n  }\n\n  private log(level: LogLevel, category: string, message: string, data?: any, error?: any) {\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      category,\n      message,\n      data,\n      error: error ? { message: error.message, code: error.code, status: error.status } : undefined,\n      stack: error?.stack,\n    };\n\n    // Store in memory for client access\n    this.logs.push(entry);\n    if (this.logs.length > 1000) {\n      this.logs = this.logs.slice(-500); // Keep last 500 entries\n    }\n\n    // Console output with styling\n    const styles = {\n      info: 'color: #3B82F6; font-weight: normal;',\n      warn: 'color: #F59E0B; font-weight: bold;',\n      error: 'color: #EF4444; font-weight: bold;',\n    };\n\n    const prefix = `[${entry.timestamp.split('T')[1].split('.')[0]}] [${category}]`;\n    \n    if (this.isClient) {\n      console.log(`%c${prefix} ${message}`, styles[level]);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    } else {\n      const colorCodes = {\n        info: '\\x1b[36m',\n        warn: '\\x1b[33m',\n        error: '\\x1b[31m',\n      };\n      const reset = '\\x1b[0m';\n      console.log(`${colorCodes[level]}${prefix}${reset} ${message}`);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    }\n\n    // Server logging removed - all logs go to console only\n  }\n\n\n  info(category: string, message: string, data?: any) {\n    this.log('info', category, message, data);\n  }\n\n  warn(category: string, message: string, data?: any) {\n    this.log('warn', category, message, data);\n  }\n\n  error(category: string, message: string, error?: any, data?: any) {\n    this.log('error', category, message, data, error);\n  }\n\n  getLogs(): LogEntry[] {\n    return this.logs;\n  }\n\n  clearLogs() {\n    this.logs = [];\n  }\n\n  // API-specific logging helpers\n  apiRequest(endpoint: string, method: string, data?: any) {\n    this.info('API_REQUEST', `${method} ${endpoint}`, data);\n  }\n\n  apiResponse(endpoint: string, status: number, data?: any) {\n    const level = status >= 400 ? 'error' : 'info';\n    this.log(level, 'API_RESPONSE', `${endpoint} - Status: ${status}`, data);\n  }\n\n  apiError(endpoint: string, error: any) {\n    this.error('API_ERROR', `Failed request to ${endpoint}`, error);\n  }\n\n  // Auth-specific logging\n  authCheck(message: string, data?: any) {\n    this.info('AUTH', message, data);\n  }\n\n  authError(message: string, error?: any) {\n    this.error('AUTH_ERROR', message, error);\n  }\n\n  // Navigation logging\n  navigation(route: string, params?: any) {\n    this.info('NAVIGATION', `Navigating to ${route}`, params);\n  }\n\n  // Store operation logging\n  storeAction(store: string, action: string, data?: any) {\n    this.info('STORE', `${store}.${action}`, data);\n  }\n}\n\nexport const logger = Logger.getInstance();","/**\n * Default Theme - Classic Particle Sphere\n * \n * The original particle sphere theme, refactored to use the new theme system.\n * Features a 3D rotating sphere of particles with smooth color transitions.\n */\n\nimport { BaseTheme } from './BaseTheme';\nimport { VoiceState } from './IVoiceTheme';\nimport { lerp } from '../utils/math';\nimport { ObjectPool } from '../utils/performance';\n\ninterface Particle {\n  x: number;\n  y: number;\n  z: number;\n  velX: number;\n  velY: number;\n  velZ: number;\n  age: number;\n  dead: boolean;\n  right: boolean;\n  projX: number;\n  projY: number;\n  alpha: number;\n  attack: number;\n  hold: number;\n  decay: number;\n  initValue: number;\n  holdValue: number;\n  lastValue: number;\n  stuckTime: number;\n  accelX: number;\n  accelY: number;\n  accelZ: number;\n  next?: Particle;\n  prev?: Particle;\n}\n\ninterface ColorPalette {\n  r: number;\n  g: number;\n  b: number;\n  gradient: number[];\n}\n\ninterface ColorScheme {\n  idle: ColorPalette;\n  userSpeaking: ColorPalette;\n  processing: ColorPalette;\n  aiSpeaking: ColorPalette;\n  hover: ColorPalette;\n}\n\nexport class DefaultTheme extends BaseTheme {\n  readonly id = 'default';\n  readonly name = 'Classic Sphere';\n  readonly description = 'The original 3D particle sphere with smooth color transitions';\n  readonly category = 'particle' as const;\n  readonly performanceProfile = 'medium' as const;\n\n  // Sphere configuration\n  private sphereRadius = 280;\n  private radiusScale = 1;\n  private framesPerRotation = 5000;\n  private focalLength = 320;\n  private zeroAlphaDepth = -750;\n  private sphereCenterY = 0;\n  private sphereCenterZ = -3 - this.sphereRadius;\n\n  // Particle system\n  private particlePool: ObjectPool<Particle>;\n  private particleList: { first?: Particle } = {};\n  private recycleBin: { first?: Particle } = {};\n  private currentParticleCount = 0;\n  private maxParticles = 200;\n\n  // Color system\n  private currentR = 52;\n  private currentG = 235;\n  private currentB = 222;\n  private targetR = 52;\n  private targetG = 235;\n  private targetB = 222;\n  private colorTransitionSpeed = 0.05;\n  private currentColorScheme = 'gemini';\n\n  // Animation parameters\n  private turnAngle = 1;\n  private wait = 2;\n  private count = 0;\n  private numToAddEachFrame = 3;\n  private particleAlpha = 1;\n  private particleRad = 2.5;\n  private gravity = 0;\n  private randAccelX = 0.1;\n  private randAccelY = 0.1;\n  private randAccelZ = 0.1;\n\n  // Color schemes\n  private colorSchemes: Record<string, ColorScheme> = {\n    gemini: {\n      idle: { r: 66, g: 133, b: 244, gradient: [66, 133, 244, 52, 168, 83] },\n      userSpeaking: { r: 234, g: 67, b: 53, gradient: [234, 67, 53, 251, 188, 5] },\n      processing: { r: 155, g: 64, b: 224, gradient: [155, 64, 224, 66, 133, 244] },\n      aiSpeaking: { r: 52, g: 168, b: 83, gradient: [52, 168, 83, 66, 133, 244] },\n      hover: { r: 251, g: 188, b: 5, gradient: [251, 188, 5, 234, 67, 53] }\n    },\n    instagram: {\n      idle: { r: 228, g: 64, b: 95, gradient: [228, 64, 95, 247, 119, 55] },\n      userSpeaking: { r: 247, g: 119, b: 55, gradient: [247, 119, 55, 252, 175, 69] },\n      processing: { r: 193, g: 53, b: 132, gradient: [193, 53, 132, 228, 64, 95] },\n      aiSpeaking: { r: 252, g: 175, b: 69, gradient: [252, 175, 69, 247, 119, 55] },\n      hover: { r: 131, g: 58, b: 180, gradient: [131, 58, 180, 193, 53, 132] }\n    },\n    ocean: {\n      idle: { r: 0, g: 119, b: 190, gradient: [0, 119, 190, 0, 168, 232] },\n      userSpeaking: { r: 0, g: 168, b: 232, gradient: [0, 168, 232, 0, 201, 255] },\n      processing: { r: 0, g: 201, b: 255, gradient: [0, 201, 255, 100, 255, 218] },\n      aiSpeaking: { r: 100, g: 255, b: 218, gradient: [100, 255, 218, 0, 168, 232] },\n      hover: { r: 0, g: 150, b: 199, gradient: [0, 150, 199, 0, 201, 255] }\n    },\n    sunset: {\n      idle: { r: 255, g: 107, b: 107, gradient: [255, 107, 107, 255, 193, 7] },\n      userSpeaking: { r: 255, g: 193, b: 7, gradient: [255, 193, 7, 255, 142, 83] },\n      processing: { r: 255, g: 142, b: 83, gradient: [255, 142, 83, 255, 107, 107] },\n      aiSpeaking: { r: 255, g: 230, b: 109, gradient: [255, 230, 109, 255, 193, 7] },\n      hover: { r: 255, g: 171, b: 64, gradient: [255, 171, 64, 255, 107, 107] }\n    },\n    aurora: {\n      idle: { r: 0, g: 201, b: 255, gradient: [0, 201, 255, 146, 254, 157] },\n      userSpeaking: { r: 146, g: 254, b: 157, gradient: [146, 254, 157, 0, 255, 193] },\n      processing: { r: 0, g: 255, b: 193, gradient: [0, 255, 193, 186, 85, 255] },\n      aiSpeaking: { r: 186, g: 85, b: 255, gradient: [186, 85, 255, 0, 201, 255] },\n      hover: { r: 120, g: 255, b: 214, gradient: [120, 255, 214, 186, 85, 255] }\n    }\n  };\n\n  constructor() {\n    super();\n    \n    // Initialize particle pool\n    this.particlePool = new ObjectPool<Particle>(\n      () => ({\n        x: 0, y: 0, z: 0, velX: 0, velY: 0, velZ: 0,\n        age: 0, dead: false, right: false, projX: 0, projY: 0, alpha: 0,\n        attack: 0, hold: 0, decay: 0, initValue: 0, holdValue: 0, lastValue: 0,\n        stuckTime: 0, accelX: 0, accelY: 0, accelZ: 0\n      }),\n      (particle) => {\n        particle.age = 0;\n        particle.dead = false;\n        particle.alpha = 0;\n        particle.next = undefined;\n        particle.prev = undefined;\n      },\n      50,\n      this.maxParticles\n    );\n\n    this.setColor(this.getColorPalette().idle);\n  }\n\n  protected onInit(): void {\n    this.maxParticles = this.getMaxParticles();\n  }\n\n  protected onDraw(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number,\n    deltaTime: number\n  ): void {\n    this.updateColors();\n    this.updateParticles(context, width, height, centerX, centerY);\n    this.renderParticles(context, width, height, centerX, centerY);\n  }\n\n  protected onStateChange(newState: VoiceState): void {\n    const palette = this.getColorPalette();\n    \n    switch (newState) {\n      case VoiceState.USER_SPEAKING:\n        this.framesPerRotation = 2000;\n        this.colorTransitionSpeed = 0.15;\n        this.setColor(palette.userSpeaking);\n        this.numToAddEachFrame = 5;\n        this.particleAlpha = 1.2;\n        this.particleRad = 3.5;\n        this.gravity = 0.1;\n        break;\n        \n      case VoiceState.PROCESSING:\n        this.framesPerRotation = 500;\n        this.colorTransitionSpeed = 0.2;\n        this.setColor(palette.processing);\n        this.numToAddEachFrame = 8;\n        this.particleAlpha = 1.5;\n        this.particleRad = 4;\n        this.gravity = 0;\n        break;\n        \n      case VoiceState.AI_SPEAKING:\n        this.framesPerRotation = 2500;\n        this.colorTransitionSpeed = 0.1;\n        this.setColor(palette.aiSpeaking);\n        this.numToAddEachFrame = 4;\n        this.particleAlpha = 1.3;\n        this.particleRad = 3;\n        this.gravity = -0.05;\n        break;\n        \n      case VoiceState.IDLE:\n      default:\n        this.framesPerRotation = 5000;\n        this.colorTransitionSpeed = 0.05;\n        this.setColor(palette.idle);\n        this.numToAddEachFrame = 3;\n        this.particleAlpha = 1;\n        this.particleRad = 2.5;\n        this.gravity = 0;\n        break;\n    }\n  }\n\n  protected getThemeSpecificMetrics() {\n    return {\n      particleCount: this.currentParticleCount,\n      maxParticles: this.maxParticles,\n      colorScheme: this.currentColorScheme\n    };\n  }\n\n  /**\n   * Set color scheme (public method for external use)\n   */\n  setColorScheme(scheme: string): void {\n    if (this.colorSchemes[scheme]) {\n      this.currentColorScheme = scheme;\n      // Update current color based on current state\n      const palette = this.getColorPalette();\n      this.setColor(palette.idle); // Will be overridden by current state\n    }\n  }\n\n  // Private methods - core particle system logic\n\n  private getColorPalette(): ColorScheme {\n    return this.colorSchemes[this.currentColorScheme] || this.colorSchemes.gemini;\n  }\n\n  private setColor(palette: ColorPalette): void {\n    this.targetR = palette.r;\n    this.targetG = palette.g;\n    this.targetB = palette.b;\n  }\n\n  private updateColors(): void {\n    this.currentR = lerp(this.currentR, this.targetR, this.colorTransitionSpeed);\n    this.currentG = lerp(this.currentG, this.targetG, this.colorTransitionSpeed);\n    this.currentB = lerp(this.currentB, this.targetB, this.colorTransitionSpeed);\n  }\n\n  private updateParticles(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number\n  ): void {\n    // Create new particles\n    this.count++;\n    if (this.count >= this.wait && this.currentParticleCount < this.maxParticles) {\n      this.count = 0;\n      const dynamicNumParticles = Math.floor(this.numToAddEachFrame * (1 + this.mouseInfluence * 0.5));\n      const particlesToCreate = Math.min(dynamicNumParticles, this.maxParticles - this.currentParticleCount);\n      \n      for (let i = 0; i < particlesToCreate; i++) {\n        this.createParticle();\n      }\n    }\n\n    // Update rotation\n    const turnSpeed = 2 * Math.PI / this.framesPerRotation;\n    const dynamicTurnSpeed = turnSpeed * (1 + this.mouseInfluence * 0.3);\n    this.turnAngle = (this.turnAngle + dynamicTurnSpeed) % (2 * Math.PI);\n  }\n\n  private createParticle(): void {\n    const theta = Math.random() * 2 * Math.PI;\n    const phi = Math.acos(Math.random() * 2 - 1);\n    \n    // Add mouse influence to particle positioning\n    const mouseDistortion = this.mouseInfluence * 0.3;\n    const mouseBias = {\n      x: this.normalizedMouseX * mouseDistortion * this.sphereRadius * 0.5,\n      y: this.normalizedMouseY * mouseDistortion * this.sphereRadius * 0.5,\n      z: 0\n    };\n    \n    const x0 = this.sphereRadius * Math.sin(phi) * Math.cos(theta) + mouseBias.x;\n    const y0 = this.sphereRadius * Math.sin(phi) * Math.sin(theta) + mouseBias.y;\n    const z0 = this.sphereRadius * Math.cos(phi) + mouseBias.z;\n\n    const velocityMultiplier = 0.002 * (1 + this.mouseInfluence * 0.5);\n    const particle = this.addParticle(\n      x0,\n      this.sphereCenterY + y0,\n      this.sphereCenterZ + z0,\n      velocityMultiplier * x0,\n      velocityMultiplier * y0,\n      velocityMultiplier * z0\n    );\n\n    // Set particle envelope parameters\n    const alphaMultiplier = 1 + this.mouseInfluence * 0.3;\n    particle.attack = Math.floor(30 / (1 + this.mouseInfluence * 0.5));\n    particle.hold = Math.floor(30 * (1 + this.mouseInfluence * 0.5));\n    particle.decay = 60;\n    particle.initValue = 0;\n    particle.holdValue = this.particleAlpha * alphaMultiplier;\n    particle.lastValue = 0;\n    particle.stuckTime = Math.floor((45 + Math.random() * 15) / (1 + this.mouseInfluence * 0.3));\n\n    // Enhanced acceleration with mouse influence\n    particle.accelX = this.normalizedMouseX * this.mouseInfluence * 0.001;\n    particle.accelY = this.gravity + (this.normalizedMouseY * this.mouseInfluence * 0.001);\n    particle.accelZ = 0;\n  }\n\n  private addParticle(x0: number, y0: number, z0: number, vx0: number, vy0: number, vz0: number): Particle {\n    const newParticle = this.particlePool.acquire();\n    this.currentParticleCount++;\n\n    // Add to beginning of particle list\n    if (this.particleList.first) {\n      newParticle.next = this.particleList.first;\n      this.particleList.first.prev = newParticle;\n    }\n    this.particleList.first = newParticle;\n    newParticle.prev = undefined;\n\n    // Initialize particle\n    newParticle.x = x0;\n    newParticle.y = y0;\n    newParticle.z = z0;\n    newParticle.velX = vx0;\n    newParticle.velY = vy0;\n    newParticle.velZ = vz0;\n    newParticle.age = 0;\n    newParticle.dead = false;\n    newParticle.right = Math.random() < 0.5;\n\n    return newParticle;\n  }\n\n  private renderParticles(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number\n  ): void {\n    const sinAngle = Math.sin(this.turnAngle);\n    const cosAngle = Math.cos(this.turnAngle);\n    const zMax = this.focalLength - 2;\n\n    let particle = this.particleList.first;\n    \n    while (particle) {\n      const nextParticle = particle.next;\n\n      // Update particle age\n      particle.age++;\n\n      // Move particle if not stuck\n      if (particle.age > particle.stuckTime) {\n        particle.velX += particle.accelX + this.randAccelX * (Math.random() * 2 - 1);\n        particle.velY += particle.accelY + this.randAccelY * (Math.random() * 2 - 1);\n        particle.velZ += particle.accelZ + this.randAccelZ * (Math.random() * 2 - 1);\n\n        particle.x += particle.velX;\n        particle.y += particle.velY;\n        particle.z += particle.velZ;\n      }\n\n      // Calculate 3D rotation and projection\n      const rotX = cosAngle * particle.x + sinAngle * (particle.z - this.sphereCenterZ);\n      const rotZ = -sinAngle * particle.x + cosAngle * (particle.z - this.sphereCenterZ) + this.sphereCenterZ;\n      const m = this.radiusScale * this.focalLength / (this.focalLength - rotZ);\n      \n      particle.projX = rotX * m + centerX;\n      particle.projY = particle.y * m + centerY;\n\n      // Update alpha based on envelope\n      this.updateParticleAlpha(particle);\n\n      // Check if particle should be rendered or recycled\n      const outsideTest = (\n        particle.projX > width || particle.projX < 0 ||\n        particle.projY < 0 || particle.projY > height ||\n        rotZ > zMax\n      );\n\n      if (outsideTest || particle.dead) {\n        this.recycleParticle(particle);\n      } else {\n        this.renderParticle(context, particle, rotZ, m);\n      }\n\n      particle = nextParticle;\n    }\n  }\n\n  private updateParticleAlpha(particle: Particle): void {\n    if (particle.age < particle.attack + particle.hold + particle.decay) {\n      if (particle.age < particle.attack) {\n        particle.alpha = (particle.holdValue - particle.initValue) / particle.attack * particle.age + particle.initValue;\n      } else if (particle.age < particle.attack + particle.hold) {\n        particle.alpha = particle.holdValue;\n      } else {\n        particle.alpha = (particle.lastValue - particle.holdValue) / particle.decay * (particle.age - particle.attack - particle.hold) + particle.holdValue;\n      }\n    } else {\n      particle.dead = true;\n    }\n  }\n\n  private renderParticle(context: CanvasRenderingContext2D, particle: Particle, rotZ: number, scale: number): void {\n    // Depth-dependent alpha\n    const depthAlphaFactor = Math.max(0, Math.min(1, 1 - rotZ / this.zeroAlphaDepth));\n    const finalAlpha = depthAlphaFactor * particle.alpha;\n    const particleSize = scale * this.particleRad * (1 + this.mouseInfluence * 0.2);\n\n    // Draw main particle\n    context.fillStyle = `rgba(${Math.floor(this.currentR)}, ${Math.floor(this.currentG)}, ${Math.floor(this.currentB)}, ${finalAlpha})`;\n    context.beginPath();\n    context.arc(particle.projX, particle.projY, particleSize, 0, 2 * Math.PI);\n    context.fill();\n\n    // Draw glow effect if enabled and appropriate\n    if (this.shouldEnableGlow() && this.mouseInfluence > 0.5 && finalAlpha > 0.3) {\n      context.fillStyle = `rgba(${Math.floor(this.currentR)}, ${Math.floor(this.currentG)}, ${Math.floor(this.currentB)}, ${finalAlpha * 0.3})`;\n      context.beginPath();\n      context.arc(particle.projX, particle.projY, particleSize * 1.5, 0, 2 * Math.PI);\n      context.fill();\n    }\n  }\n\n  private recycleParticle(particle: Particle): void {\n    this.currentParticleCount = Math.max(0, this.currentParticleCount - 1);\n\n    // Remove from particle list\n    if (this.particleList.first === particle) {\n      this.particleList.first = particle.next;\n      if (particle.next) {\n        particle.next.prev = undefined;\n      }\n    } else {\n      if (particle.prev) {\n        particle.prev.next = particle.next;\n      }\n      if (particle.next) {\n        particle.next.prev = particle.prev;\n      }\n    }\n\n    // Return to pool\n    this.particlePool.release(particle);\n  }\n\n  protected onDispose(): void {\n    // Clean up all particles\n    this.particleList.first = undefined;\n    this.currentParticleCount = 0;\n    this.particlePool.clear();\n  }\n}","/**\n * Agent Store - Chatbot Management\n * \n * This store manages all agent (chatbot) related state and operations.\n * Agents are the core entities in CustomGPT - each agent is a trained\n * chatbot with its own knowledge base and settings.\n * \n * Features:\n * - CRUD operations for agents\n * - Persistent state using localStorage\n * - Auto-selection of first agent\n * - Agent statistics fetching\n * - License management support\n * \n * State Persistence:\n * - Uses Zustand persist middleware\n * - Stores: agents list and current selection\n * - Survives page refreshes\n * \n * Features:\n * - Multi-format API response handling with backward compatibility\n * - Automatic agent state synchronization across operations\n * - Optimistic UI updates for seamless user experience\n * - Comprehensive error handling with graceful recovery\n */\n\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { AgentStore, Agent, AgentSettings } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useConversationStore } from './conversations';\nimport { useMessageStore } from './messages';\n\n/**\n * Agent Store Implementation\n * \n * Persisted to localStorage with key 'customgpt-agent-store'\n * Automatically hydrates on app load\n */\nexport const useAgentStore = create<AgentStore>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      agents: [],\n      currentAgent: null,\n      loading: false,\n      error: null,\n      paginationMeta: undefined,\n\n      /**\n       * Fetch agents from the API with enterprise-scale pagination\n       * \n       * Strategy for 1000+ projects:\n       * - Load first batch (100 items) immediately for UI responsiveness\n       * - Load additional batches as needed via loadMoreAgents()\n       * - Auto-selects first agent if none selected\n       * - Maintains total count for pagination UI\n       */\n      fetchAgents: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Load first batch with larger page size for better UX\n          const response = await client.getAgents({ page: 1, per_page: 100 });\n          \n          let agents: Agent[] = [];\n          let total = 0;\n          let hasMore = false;\n          \n          // Handle different response formats from the API\n          if (response && typeof response === 'object') {\n            // Check for nested pagination format: { data: { data: [...], total: ..., current_page: ... } }\n            if ('data' in response && (response as any).data && typeof (response as any).data === 'object' && 'data' in (response as any).data) {\n              const nestedData = (response as any).data;\n              agents = Array.isArray(nestedData.data) ? nestedData.data : [];\n              total = nestedData.total || agents.length;\n              const currentPage = nestedData.current_page || 1;\n              const perPage = nestedData.per_page || 100;\n              hasMore = nestedData.last_page ? currentPage < nestedData.last_page : false;\n            } else if ('data' in response && 'total' in response) {\n              // Flat paginated response format\n              const paginatedResponse = response as { data: Agent[]; total: number; page: number; per_page: number };\n              agents = paginatedResponse.data;\n              total = paginatedResponse.total;\n              hasMore = total > paginatedResponse.per_page;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              agents = (response as any).data;\n              total = agents.length;\n              hasMore = false;\n            } else if (Array.isArray(response)) {\n              // Legacy format: [...]\n              agents = response as Agent[];\n              total = agents.length;\n              hasMore = false;\n            }\n          }\n          \n          set({ \n            agents, \n            loading: false,\n            // Always update pagination metadata with fresh data\n            paginationMeta: { \n              currentPage: 1, \n              totalCount: total, \n              hasMore,\n              perPage: 100\n            },\n            // Auto-select first agent if none selected\n            currentAgent: get().currentAgent || (agents.length > 0 ? agents[0] : null)\n          });\n          \n          // Fetch settings for all agents to get avatars\n          const fetchSettingsForAgents = async () => {\n            const client = getClient();\n            const agentsWithoutSettings = agents.filter(agent => !agent.settings);\n            \n            if (agentsWithoutSettings.length === 0) return;\n            \n            // Process in batches of 5 to avoid overwhelming the API\n            const batchSize = 5;\n            for (let i = 0; i < agentsWithoutSettings.length; i += batchSize) {\n              const batch = agentsWithoutSettings.slice(i, i + batchSize);\n              \n              // Fetch settings in parallel for this batch\n              const settingsPromises = batch.map(async (agent) => {\n                try {\n                  const settingsResponse = await client.getAgentSettings(agent.id);\n                  if (settingsResponse && settingsResponse.data) {\n                    return { agent, settings: settingsResponse.data };\n                  }\n                } catch (error) {\n                  console.error(`Failed to fetch settings for agent ${agent.id}:`, error);\n                }\n                return null;\n              });\n              \n              const settingsResults = await Promise.all(settingsPromises);\n              const validResults = settingsResults.filter(result => result !== null);\n              \n              if (validResults.length > 0) {\n                // Update agents with their settings\n                set(state => ({\n                  agents: state.agents.map(a => {\n                    const result = validResults.find(r => r!.agent.id === a.id);\n                    return result ? { ...a, settings: result.settings } : a;\n                  }),\n                  // Also update current agent if it matches\n                  currentAgent: state.currentAgent \n                    ? (() => {\n                        const result = validResults.find(r => r!.agent.id === state.currentAgent!.id);\n                        return result ? { ...state.currentAgent, settings: result.settings } : state.currentAgent;\n                      })()\n                    : state.currentAgent\n                }));\n              }\n              \n              // Small delay between batches to be kind to the API\n              if (i + batchSize < agentsWithoutSettings.length) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n              }\n            }\n          };\n          \n          // Fetch settings in the background without blocking the UI\n          fetchSettingsForAgents().catch(error => {\n            console.error('Failed to fetch agent settings:', error);\n          });\n        } catch (error) {\n          console.error('Failed to fetch agents:', error);\n          set({ \n            agents: [], \n            error: error instanceof Error ? error.message : 'Failed to fetch agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Load more agents for large datasets (enterprise accounts)\n       * Appends to existing agents list\n       */\n      loadMoreAgents: async () => {\n        const state = get();\n        const paginationMeta = (state as any).paginationMeta;\n        \n        if (!paginationMeta?.hasMore || state.loading) return;\n        \n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const nextPage = paginationMeta.currentPage + 1;\n          \n          const response = await client.getAgents({ \n            page: nextPage, \n            per_page: paginationMeta.perPage \n          });\n          \n          if (response && 'data' in response) {\n            let newAgents: Agent[] = [];\n            let responseTotal = 0;\n            let responsePage = nextPage;\n            \n            // Handle nested format: { data: { data: [...] } }\n            if (response.data && typeof response.data === 'object' && 'data' in response.data) {\n              const nestedData = (response as any).data;\n              newAgents = Array.isArray(nestedData.data) ? nestedData.data : [];\n              responseTotal = nestedData.total || 0;\n              responsePage = nestedData.current_page || nextPage;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              newAgents = (response as any).data;\n              responseTotal = paginationMeta.totalCount;\n            }\n            \n            set(state => ({ \n              agents: [...state.agents, ...newAgents],\n              loading: false,\n              paginationMeta: {\n                ...paginationMeta,\n                currentPage: responsePage,\n                hasMore: (responsePage * paginationMeta.perPage + newAgents.length) < responseTotal\n              }\n            }));\n          }\n        } catch (error) {\n          console.error('Failed to load more agents:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to load more agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Search for a specific agent by ID or name\n       * Useful for enterprise accounts with many projects\n       */\n      findAgent: async (query: string | number) => {\n        try {\n          const client = getClient();\n          \n          // If query is numeric, assume it's an ID and try to fetch directly\n          if (typeof query === 'number' || /^\\d+$/.test(query.toString())) {\n            const id = typeof query === 'number' ? query : parseInt(query.toString());\n            try {\n              const response = await client.getAgent(id);\n              const agent = response.data;\n              \n              // Add to agents list if not already present\n              const state = get();\n              if (!state.agents.find(a => a.id === agent.id)) {\n                set(state => ({ \n                  agents: [agent, ...state.agents] \n                }));\n              }\n              \n              return agent;\n            } catch {\n              // ID not found or no access, fall through to search\n            }\n          }\n          \n          // For text search, we'd need a search endpoint (not implemented in current API)\n          // For now, search within loaded agents\n          const state = get();\n          const found = state.agents.find(agent => \n            agent.project_name.toLowerCase().includes(query.toString().toLowerCase()) ||\n            agent.id.toString() === query.toString()\n          );\n          \n          return found || null;\n        } catch (error) {\n          console.error('Failed to find agent:', error);\n          return null;\n        }\n      },\n\n      /**\n       * Create a new agent\n       * \n       * @param data - Agent creation data\n       * @param data.project_name - Display name for the agent\n       * @param data.sitemap_path - URL for sitemap-based training\n       * @param data.files - Files for file-based training\n       * @param data.is_shared - Whether agent is publicly accessible\n       * \n       * Behavior:\n       * - Adds new agent to beginning of list\n       * - Auto-selects the new agent\n       * - Returns the created agent\n       * - Throws error on failure\n       */\n      createAgent: async (data: {\n        project_name: string;\n        sitemap_path?: string;\n        files?: File[];\n        is_shared?: boolean;\n      }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createAgent(data);\n          const newAgent = response.data;\n          \n          // Optimistic update - add to list and select immediately\n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to create agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create agent',\n            loading: false \n          });\n          throw error; // Re-throw for component error handling\n        }\n      },\n\n      /**\n       * Select an agent as the current active agent\n       * This agent will be used for all chat operations\n       * \n       * @param agent - The agent to select\n       */\n      selectAgent: async (agent: Agent) => {\n        // Clear conversation state when switching agents\n        const conversationStore = useConversationStore.getState();\n        const messageStore = useMessageStore.getState();\n        \n        // Set the new agent first\n        set({ currentAgent: agent });\n        \n        // Clear current conversation to show welcome screen\n        conversationStore.selectConversation(null);\n        \n        // Clear all messages from the previous agent\n        messageStore.clearMessages();\n        \n        // Fetch agent settings to get avatar and other details\n        try {\n          const client = getClient();\n          const settingsResponse = await client.getAgentSettings(agent.id);\n          if (settingsResponse && settingsResponse.data) {\n            // Update the agent with settings\n            const agentWithSettings = { ...agent, settings: settingsResponse.data };\n            set({ currentAgent: agentWithSettings });\n            \n            // Also update in the agents list\n            set(state => ({\n              agents: state.agents.map(a => \n                a.id === agent.id ? agentWithSettings : a\n              )\n            }));\n          }\n        } catch (error) {\n          console.error('Failed to fetch agent settings:', error);\n          // Continue without settings\n        }\n        \n        // Fetch conversations for the new agent\n        try {\n          await conversationStore.fetchConversations(agent.id);\n        } catch (error) {\n          console.error('Failed to fetch conversations for new agent:', error);\n          // Even if fetch fails, we've already cleared the old state\n        }\n      },\n\n      /**\n       * Manually set the agents list\n       * Used for optimistic updates or manual state management\n       * \n       * Features:\n       * - Validates current agent still exists\n       * - Auto-selects first agent if current is removed\n       * - Maintains agent selection when possible\n       * \n       * @param agents - New list of agents\n       */\n      setAgents: (agents: Agent[]) => {\n        set({ \n          agents,\n          // Update current agent if it's no longer in the list\n          currentAgent: (() => {\n            const current = get().currentAgent;\n            if (!current) return agents.length > 0 ? agents[0] : null;\n            \n            // Check if current agent still exists in new list\n            const stillExists = agents.find(a => a.id === current.id);\n            return stillExists || (agents.length > 0 ? agents[0] : null);\n          })()\n        });\n      },\n      \n      updateAgent: async (id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateAgent(id, data);\n          console.log('[AgentStore] updateAgent response:', response);\n          const updatedAgent = response.data;\n          console.log('[AgentStore] updatedAgent data:', updatedAgent);\n          \n          set(state => ({\n            agents: state.agents.map(a => a.id === id ? updatedAgent : a),\n            currentAgent: state.currentAgent?.id === id ? updatedAgent : state.currentAgent,\n            loading: false,\n          }));\n          \n          return updatedAgent;\n        } catch (error) {\n          console.error('Failed to update agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      /**\n       * Update agent settings\n       * Updates configuration like chatbot model, appearance, behavior, etc.\n       */\n      updateSettings: async (id: number, settings: Partial<AgentSettings>) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Create FormData for the update\n          const formData = new FormData();\n          \n          // Only append the fields we want to update\n          Object.entries(settings).forEach(([key, value]) => {\n            if (value !== undefined && value !== null) {\n              formData.append(key, String(value));\n            }\n          });\n          \n          const response = await client.updateAgentSettings(id, formData);\n          console.log('[AgentStore] updateSettings response:', response);\n          const updatedSettings = response.data;\n          \n          // Update the agent with new settings\n          set(state => {\n            const updatedAgents = state.agents.map(agent => {\n              if (agent.id === id) {\n                return { ...agent, settings: { ...agent.settings, ...updatedSettings } };\n              }\n              return agent;\n            });\n            \n            const updatedCurrentAgent = state.currentAgent?.id === id \n              ? { ...state.currentAgent, settings: { ...state.currentAgent.settings, ...updatedSettings } }\n              : state.currentAgent;\n            \n            return {\n              agents: updatedAgents,\n              currentAgent: updatedCurrentAgent,\n              loading: false,\n            };\n          });\n          \n          return updatedSettings;\n        } catch (error) {\n          console.error('Failed to update agent settings:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update agent settings',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      deleteAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteAgent(id);\n          \n          set(state => {\n            const filteredAgents = state.agents.filter(a => a.id !== id);\n            return {\n              agents: filteredAgents,\n              currentAgent: state.currentAgent?.id === id \n                ? (filteredAgents.length > 0 ? filteredAgents[0] : null)\n                : state.currentAgent,\n              loading: false,\n            };\n          });\n        } catch (error) {\n          console.error('Failed to delete agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      replicateAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.replicateAgent(id);\n          const newAgent = response.data;\n          \n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to replicate agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to replicate agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      getAgentStats: async (id: number) => {\n        try {\n          const client = getClient();\n          const response = await client.getAgentStats(id);\n          return response.data;\n        } catch (error) {\n          console.error('Failed to get agent stats:', error);\n          throw error;\n        }\n      },\n    }),\n    {\n      name: 'customgpt-agents',\n      partialize: (state) => ({\n        currentAgent: state.currentAgent,\n      }),\n    }\n  )\n);","/**\n * Performance monitoring utilities for voice themes\n * \n * Provides performance tracking, FPS monitoring, and device capability detection\n */\n\nexport interface PerformanceMetrics {\n  fps: number;\n  frameTime: number;\n  memoryUsage?: number;\n  particleCount?: number;\n  objectCount?: number;\n  drawCalls?: number;\n}\n\nexport interface DeviceCapabilities {\n  isMobile: boolean;\n  isLowPowerDevice: boolean;\n  supportsWebGL: boolean;\n  hardwareConcurrency: number;\n  memoryGB?: number;\n  performanceLevel: 'low' | 'medium' | 'high';\n}\n\n/**\n * Performance monitor for tracking FPS and frame timing\n */\nexport class PerformanceMonitor {\n  private frameCount = 0;\n  private lastTime = 0;\n  private currentFPS = 60;\n  private frameTime = 16.67;\n  private fpsHistory: number[] = [];\n  private frameTimeHistory: number[] = [];\n  private maxHistorySize = 60; // Keep 1 second of history at 60fps\n  private warningThreshold = 0.8;\n  private criticalThreshold = 0.6;\n\n  private callbacks: {\n    onFPSUpdate?: (fps: number) => void;\n    onPerformanceWarning?: (metrics: PerformanceMetrics) => void;\n    onPerformanceCritical?: (metrics: PerformanceMetrics) => void;\n  } = {};\n\n  constructor(targetFPS = 60) {\n    this.lastTime = performance.now();\n  }\n\n  /**\n   * Call this every frame to update performance metrics\n   */\n  update(): PerformanceMetrics {\n    const currentTime = performance.now();\n    const deltaTime = currentTime - this.lastTime;\n    this.frameTime = deltaTime;\n    \n    // Update FPS calculation\n    this.frameCount++;\n    const fps = 1000 / deltaTime;\n    this.fpsHistory.push(fps);\n    this.frameTimeHistory.push(deltaTime);\n\n    // Keep history size manageable\n    if (this.fpsHistory.length > this.maxHistorySize) {\n      this.fpsHistory.shift();\n      this.frameTimeHistory.shift();\n    }\n\n    // Calculate average FPS over recent history\n    const avgFPS = this.fpsHistory.reduce((sum, fps) => sum + fps, 0) / this.fpsHistory.length;\n    this.currentFPS = avgFPS;\n\n    // Check for performance issues\n    const targetFPS = 30; // Conservative target for voice themes\n    const performanceRatio = avgFPS / targetFPS;\n\n    if (performanceRatio < this.criticalThreshold) {\n      this.callbacks.onPerformanceCritical?.({\n        fps: avgFPS,\n        frameTime: deltaTime\n      });\n    } else if (performanceRatio < this.warningThreshold) {\n      this.callbacks.onPerformanceWarning?.({\n        fps: avgFPS,\n        frameTime: deltaTime\n      });\n    }\n\n    // Update callbacks\n    if (this.frameCount % 30 === 0) { // Update every 30 frames (~0.5 seconds)\n      this.callbacks.onFPSUpdate?.(avgFPS);\n    }\n\n    this.lastTime = currentTime;\n\n    return {\n      fps: avgFPS,\n      frameTime: deltaTime\n    };\n  }\n\n  /**\n   * Set performance monitoring callbacks\n   */\n  setCallbacks(callbacks: typeof this.callbacks) {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Get current performance metrics\n   */\n  getCurrentMetrics(): PerformanceMetrics {\n    return {\n      fps: this.currentFPS,\n      frameTime: this.frameTime\n    };\n  }\n\n  /**\n   * Reset performance tracking\n   */\n  reset() {\n    this.frameCount = 0;\n    this.fpsHistory = [];\n    this.frameTimeHistory = [];\n    this.lastTime = performance.now();\n  }\n}\n\n/**\n * Detect device capabilities for performance optimization\n */\nexport class DeviceCapabilityDetector {\n  private static instance: DeviceCapabilityDetector;\n  private capabilities: DeviceCapabilities | null = null;\n\n  static getInstance(): DeviceCapabilityDetector {\n    if (!DeviceCapabilityDetector.instance) {\n      DeviceCapabilityDetector.instance = new DeviceCapabilityDetector();\n    }\n    return DeviceCapabilityDetector.instance;\n  }\n\n  /**\n   * Detect and cache device capabilities\n   */\n  async detectCapabilities(): Promise<DeviceCapabilities> {\n    if (this.capabilities) {\n      return this.capabilities;\n    }\n\n    const isMobile = this.detectMobile();\n    const supportsWebGL = this.detectWebGL();\n    const hardwareConcurrency = navigator.hardwareConcurrency || 4;\n    \n    let memoryGB: number | undefined;\n    if ('memory' in (navigator as any)) {\n      memoryGB = (navigator as any).memory.jsHeapSizeLimit / (1024 ** 3);\n    }\n\n    // Performance benchmarking\n    const performanceLevel = await this.benchmarkPerformance();\n    const isLowPowerDevice = this.detectLowPowerDevice(hardwareConcurrency, memoryGB, performanceLevel);\n\n    this.capabilities = {\n      isMobile,\n      isLowPowerDevice,\n      supportsWebGL,\n      hardwareConcurrency,\n      memoryGB,\n      performanceLevel\n    };\n\n    return this.capabilities;\n  }\n\n  private detectMobile(): boolean {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n  }\n\n  private detectWebGL(): boolean {\n    try {\n      const canvas = document.createElement('canvas');\n      return !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n    } catch {\n      return false;\n    }\n  }\n\n  private detectLowPowerDevice(cores: number, memoryGB?: number, performanceLevel?: string): boolean {\n    // Heuristics for low-power device detection\n    if (cores <= 2) return true;\n    if (memoryGB && memoryGB < 2) return true;\n    if (performanceLevel === 'low') return true;\n    return false;\n  }\n\n  private async benchmarkPerformance(): Promise<'low' | 'medium' | 'high'> {\n    return new Promise((resolve) => {\n      const startTime = performance.now();\n      let operations = 0;\n      const maxTime = 50; // 50ms benchmark window\n\n      const benchmark = () => {\n        const currentTime = performance.now();\n        if (currentTime - startTime >= maxTime) {\n          // Classify performance based on operations completed\n          if (operations < 100000) {\n            resolve('low');\n          } else if (operations < 500000) {\n            resolve('medium');\n          } else {\n            resolve('high');\n          }\n          return;\n        }\n\n        // Simple mathematical operations\n        for (let i = 0; i < 1000; i++) {\n          Math.sin(Math.random() * Math.PI * 2);\n          operations++;\n        }\n\n        requestAnimationFrame(benchmark);\n      };\n\n      requestAnimationFrame(benchmark);\n    });\n  }\n\n  /**\n   * Get cached capabilities or detect if not available\n   */\n  getCapabilities(): DeviceCapabilities | null {\n    return this.capabilities;\n  }\n}\n\n/**\n * Memory pool for efficient particle/object management\n */\nexport class ObjectPool<T> {\n  private available: T[] = [];\n  private inUse = new Set<T>();\n  private createFn: () => T;\n  private resetFn?: (obj: T) => void;\n  private maxSize: number;\n\n  constructor(createFn: () => T, resetFn?: (obj: T) => void, initialSize = 10, maxSize = 1000) {\n    this.createFn = createFn;\n    this.resetFn = resetFn;\n    this.maxSize = maxSize;\n\n    // Pre-populate pool\n    for (let i = 0; i < initialSize; i++) {\n      this.available.push(this.createFn());\n    }\n  }\n\n  /**\n   * Get an object from the pool\n   */\n  acquire(): T {\n    let obj: T;\n\n    if (this.available.length > 0) {\n      obj = this.available.pop()!;\n    } else if (this.inUse.size < this.maxSize) {\n      obj = this.createFn();\n    } else {\n      // Pool is full, reuse oldest object\n      const oldest = this.inUse.values().next().value;\n      if (oldest) {\n        this.release(oldest);\n        obj = oldest;\n      } else {\n        // Fallback: create new object if somehow there's nothing to reuse\n        obj = this.createFn();\n      }\n    }\n\n    this.inUse.add(obj);\n    return obj;\n  }\n\n  /**\n   * Return an object to the pool\n   */\n  release(obj: T): void {\n    if (this.inUse.has(obj)) {\n      this.inUse.delete(obj);\n      if (this.resetFn) {\n        this.resetFn(obj);\n      }\n      this.available.push(obj);\n    }\n  }\n\n  /**\n   * Get pool statistics\n   */\n  getStats() {\n    return {\n      available: this.available.length,\n      inUse: this.inUse.size,\n      total: this.available.length + this.inUse.size\n    };\n  }\n\n  /**\n   * Clear the entire pool\n   */\n  clear(): void {\n    this.available = [];\n    this.inUse.clear();\n  }\n}\n\n/**\n * Utility to get optimal performance settings based on device capabilities\n */\nexport const getOptimalSettings = async (): Promise<{\n  targetFPS: number;\n  maxParticles: number;\n  enableEffects: boolean;\n  enableGlow: boolean;\n  qualityLevel: 'low' | 'medium' | 'high';\n}> => {\n  const detector = DeviceCapabilityDetector.getInstance();\n  const capabilities = await detector.detectCapabilities();\n\n  if (capabilities.performanceLevel === 'low' || capabilities.isLowPowerDevice) {\n    return {\n      targetFPS: 24,\n      maxParticles: 50,\n      enableEffects: false,\n      enableGlow: false,\n      qualityLevel: 'low'\n    };\n  } else if (capabilities.performanceLevel === 'medium') {\n    return {\n      targetFPS: 30,\n      maxParticles: 150,\n      enableEffects: true,\n      enableGlow: false,\n      qualityLevel: 'medium'\n    };\n  } else {\n    return {\n      targetFPS: 60,\n      maxParticles: 300,\n      enableEffects: true,\n      enableGlow: true,\n      qualityLevel: 'high'\n    };\n  }\n};","import type { StreamChunk, Citation, StreamCallbacks, StreamHandlerConfig } from '@/types';\nimport { parseStreamChunk } from '@/lib/utils';\n\nexport interface StreamMessage {\n  id: string;\n  content: string;\n  citations: Citation[];\n  isComplete: boolean;\n}\n\nexport class StreamHandler {\n  private config: Required<StreamHandlerConfig>;\n  private abortController: AbortController | null = null;\n  private currentMessage: StreamMessage | null = null;\n\n  constructor(config: StreamHandlerConfig = {}) {\n    this.config = {\n      timeout: config.timeout || 60000,\n      retryAttempts: config.retryAttempts || 3,\n      retryDelay: config.retryDelay || 1000,\n    };\n  }\n\n  /**\n   * Process a streaming response\n   */\n  async processStream(\n    stream: ReadableStream,\n    callbacks: StreamCallbacks\n  ): Promise<StreamMessage> {\n    this.abortController = new AbortController();\n    this.currentMessage = {\n      id: this.generateId(),\n      content: '',\n      citations: [],\n      isComplete: false,\n    };\n\n    const reader = stream.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    // Set timeout\n    const timeoutId = setTimeout(() => {\n      this.cancel();\n      callbacks.onError?.(new Error('Stream timeout'));\n    }, this.config.timeout);\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) {\n          this.currentMessage.isComplete = true;\n          callbacks.onComplete?.();\n          break;\n        }\n\n        // Decode chunk and add to buffer\n        buffer += decoder.decode(value, { stream: true });\n        \n        // Process complete lines\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n        for (const line of lines) {\n          if (line.trim()) {\n            await this.processLine(line, callbacks);\n          }\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        callbacks.onError?.(new Error('Stream cancelled'));\n      } else {\n        callbacks.onError?.(error instanceof Error ? error : new Error('Unknown streaming error'));\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      reader.releaseLock();\n      this.abortController = null;\n    }\n\n    return this.currentMessage;\n  }\n\n  /**\n   * Process a single line from the stream\n   */\n  private async processLine(line: string, callbacks: StreamCallbacks): Promise<void> {\n    const chunk = parseStreamChunk(line);\n    \n    if (!chunk || !this.currentMessage) return;\n\n    switch (chunk.type) {\n      case 'content':\n        if (chunk.content) {\n          this.currentMessage.content += chunk.content;\n          callbacks.onChunk?.(chunk.content);\n        }\n        break;\n\n      case 'citation':\n        if (chunk.citations) {\n          this.currentMessage.citations.push(...chunk.citations);\n          chunk.citations.forEach((citation: Citation) => {\n            callbacks.onCitation?.(citation);\n          });\n        }\n        break;\n\n      case 'done':\n        this.currentMessage.isComplete = true;\n        callbacks.onComplete?.();\n        return;\n\n      case 'error':\n        callbacks.onError?.(new Error(chunk.error || 'Stream error'));\n        return;\n\n      default:\n        // Handle unknown chunk types gracefully\n        console.warn('Unknown stream chunk type:', chunk.type);\n    }\n  }\n\n  /**\n   * Cancel the current stream\n   */\n  cancel(): void {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n  }\n\n  /**\n   * Get current message state\n   */\n  getCurrentMessage(): StreamMessage | null {\n    return this.currentMessage;\n  }\n\n  /**\n   * Check if streaming is active\n   */\n  isStreaming(): boolean {\n    return this.abortController !== null && this.currentMessage !== null && !this.currentMessage.isComplete;\n  }\n\n  private generateId(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n}\n\n/**\n * Utility class for managing multiple concurrent streams\n */\nexport class StreamManager {\n  private streams: Map<string, StreamHandler> = new Map();\n  private maxConcurrentStreams: number;\n\n  constructor(maxConcurrentStreams: number = 3) {\n    this.maxConcurrentStreams = maxConcurrentStreams;\n  }\n\n  /**\n   * Start a new stream\n   */\n  async startStream(\n    streamId: string,\n    stream: ReadableStream,\n    callbacks: StreamCallbacks,\n    config?: StreamHandlerConfig\n  ): Promise<StreamMessage> {\n    // Check if we're at the concurrent limit\n    if (this.streams.size >= this.maxConcurrentStreams) {\n      throw new Error(`Maximum concurrent streams (${this.maxConcurrentStreams}) reached`);\n    }\n\n    // Cancel existing stream with same ID if it exists\n    if (this.streams.has(streamId)) {\n      this.cancelStream(streamId);\n    }\n\n    const handler = new StreamHandler(config);\n    this.streams.set(streamId, handler);\n\n    try {\n      const result = await handler.processStream(stream, {\n        ...callbacks,\n        onComplete: () => {\n          this.streams.delete(streamId);\n          callbacks.onComplete?.();\n        },\n        onError: (error) => {\n          this.streams.delete(streamId);\n          callbacks.onError?.(error);\n        },\n      });\n\n      return result;\n    } catch (error) {\n      this.streams.delete(streamId);\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel a specific stream\n   */\n  cancelStream(streamId: string): void {\n    const handler = this.streams.get(streamId);\n    if (handler) {\n      handler.cancel();\n      this.streams.delete(streamId);\n    }\n  }\n\n  /**\n   * Cancel all active streams\n   */\n  cancelAllStreams(): void {\n    this.streams.forEach(handler => handler.cancel());\n    this.streams.clear();\n  }\n\n  /**\n   * Get active stream IDs\n   */\n  getActiveStreams(): string[] {\n    return Array.from(this.streams.keys());\n  }\n\n  /**\n   * Get stream status\n   */\n  getStreamStatus(streamId: string): {\n    exists: boolean;\n    isStreaming: boolean;\n    message: StreamMessage | null;\n  } {\n    const handler = this.streams.get(streamId);\n    \n    if (!handler) {\n      return { exists: false, isStreaming: false, message: null };\n    }\n\n    return {\n      exists: true,\n      isStreaming: handler.isStreaming(),\n      message: handler.getCurrentMessage(),\n    };\n  }\n\n  /**\n   * Get number of active streams\n   */\n  getActiveStreamCount(): number {\n    return this.streams.size;\n  }\n}\n\n/**\n * Parse Server-Sent Events (SSE) data\n */\nexport function parseSSEData(data: string): any | null {\n  try {\n    if (data === '[DONE]') {\n      return { type: 'done' };\n    }\n    \n    const parsed = JSON.parse(data);\n    \n    // Handle different response formats\n    if (parsed.choices && parsed.choices[0]) {\n      const choice = parsed.choices[0];\n      \n      if (choice.delta && choice.delta.content) {\n        return {\n          type: 'content',\n          content: choice.delta.content,\n        };\n      }\n      \n      if (choice.message && choice.message.content) {\n        return {\n          type: 'content',\n          content: choice.message.content,\n        };\n      }\n    }\n    \n    // Handle CustomGPT format\n    if (parsed.content) {\n      return {\n        type: 'content',\n        content: parsed.content,\n        citations: parsed.citations || [],\n      };\n    }\n    \n    return parsed;\n  } catch (error) {\n    console.error('Failed to parse SSE data:', error);\n    return null;\n  }\n}\n\n\n/**\n * Validate stream format\n */\nexport function validateStreamChunk(chunk: any): boolean {\n  if (!chunk || typeof chunk !== 'object') {\n    return false;\n  }\n\n  // Must have a type\n  if (!chunk.type || typeof chunk.type !== 'string') {\n    return false;\n  }\n\n  // Validate specific types\n  switch (chunk.type) {\n    case 'content':\n      return typeof chunk.content === 'string';\n    \n    case 'citation':\n      return Array.isArray(chunk.citations);\n    \n    case 'done':\n    case 'error':\n      return true;\n    \n    default:\n      return false;\n  }\n}\n\n// Global stream manager instance\nexport const globalStreamManager = new StreamManager();","/**\n * Voice Theme Interface\n * \n * Defines the contract that all voice interaction themes must implement.\n * Each theme provides unique visual feedback for different voice states.\n */\n\nexport interface IVoiceTheme {\n  /**\n   * Unique identifier for the theme\n   */\n  readonly id: string;\n\n  /**\n   * Display name for the theme\n   */\n  readonly name: string;\n\n  /**\n   * Theme description\n   */\n  readonly description: string;\n\n  /**\n   * Theme category for UI organization\n   */\n  readonly category: 'particle' | 'geometric' | 'advanced' | 'artistic';\n\n  /**\n   * Performance profile for mobile optimization\n   */\n  readonly performanceProfile: 'light' | 'medium' | 'heavy';\n\n  /**\n   * Initialize the theme with canvas context and dimensions\n   */\n  init(context: CanvasRenderingContext2D, width: number, height: number): void;\n\n  /**\n   * Main drawing function called every frame\n   */\n  draw(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void;\n\n  /**\n   * User is speaking state\n   */\n  onUserSpeaking(): void;\n\n  /**\n   * Processing/analyzing speech state\n   */\n  onProcessing(): void;\n\n  /**\n   * AI is responding state\n   */\n  onAiSpeaking(): void;\n\n  /**\n   * Reset to idle state\n   */\n  reset(): void;\n\n  /**\n   * Handle mouse/touch position updates\n   */\n  setMousePosition(x: number, y: number, canvasWidth: number, canvasHeight: number): void;\n\n  /**\n   * Handle mouse/touch hover state\n   */\n  setHovering(hovering: boolean): void;\n\n  /**\n   * Cleanup resources when theme is deactivated\n   */\n  dispose(): void;\n\n  /**\n   * Get current performance metrics\n   */\n  getPerformanceMetrics(): {\n    particleCount?: number;\n    objectCount?: number;\n    memoryUsage?: number;\n    averageFPS?: number;\n  };\n}\n\n/**\n * Theme metadata for UI display\n */\nexport interface ThemeMetadata {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  performanceProfile: string;\n  previewColors: string[];\n  previewDescription: string;\n}\n\n/**\n * Voice state enumeration\n */\nexport enum VoiceState {\n  IDLE = 'idle',\n  USER_SPEAKING = 'userSpeaking',\n  PROCESSING = 'processing',\n  AI_SPEAKING = 'aiSpeaking'\n}\n\n/**\n * Performance settings for different device types\n */\nexport interface PerformanceSettings {\n  targetFPS: number;\n  maxParticles: number;\n  enableEffects: boolean;\n  enableGlow: boolean;\n  qualityLevel: 'low' | 'medium' | 'high';\n}\n\n/**\n * Theme factory function type\n */\nexport type ThemeFactory = () => IVoiceTheme;","/**\n * Theme utilities for persistent theme management\n * \n * Uses cookies for theme persistence to ensure the theme\n * is available during server-side rendering and prevents\n * flash of incorrect theme on page load.\n */\n\nexport type Theme = 'light' | 'dark';\n\nconst THEME_COOKIE_NAME = 'customgpt-theme';\nconst THEME_COOKIE_MAX_AGE = 365 * 24 * 60 * 60; // 1 year in seconds\n\n/**\n * Get theme from cookie\n */\nexport function getThemeFromCookie(): Theme {\n  if (typeof window === 'undefined') return 'light';\n  \n  const cookies = document.cookie.split(';');\n  const themeCookie = cookies.find(cookie => \n    cookie.trim().startsWith(`${THEME_COOKIE_NAME}=`)\n  );\n  \n  if (themeCookie) {\n    const value = themeCookie.split('=')[1].trim();\n    return value === 'dark' ? 'dark' : 'light';\n  }\n  \n  return 'light';\n}\n\n/**\n * Set theme in cookie\n */\nexport function setThemeCookie(theme: Theme) {\n  if (typeof window === 'undefined') return;\n  \n  // Set cookie with max age and path\n  document.cookie = `${THEME_COOKIE_NAME}=${theme}; max-age=${THEME_COOKIE_MAX_AGE}; path=/; SameSite=Lax`;\n}\n\n/**\n * Apply theme to document\n */\nexport function applyThemeToDocument(theme: Theme) {\n  if (typeof window === 'undefined') return;\n  \n  if (theme === 'dark') {\n    document.documentElement.classList.add('dark');\n  } else {\n    document.documentElement.classList.remove('dark');\n  }\n}\n\n/**\n * Initialize theme from cookie and apply to document\n */\nexport function initializeTheme(): Theme {\n  const theme = getThemeFromCookie();\n  applyThemeToDocument(theme);\n  return theme;\n}\n\n/**\n * Set theme and persist to cookie\n */\nexport function setTheme(theme: Theme) {\n  setThemeCookie(theme);\n  applyThemeToDocument(theme);\n}","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConfigStore } from '@/types';\nimport { setTheme as setThemeUtil, getThemeFromCookie, initializeTheme } from '@/lib/theme';\n\n/**\n * Configuration Store\n * \n * Updated to remove API key storage for security.\n * API key is now stored securely on the server.\n * Theme is persisted using cookies for better SSR support.\n */\nexport const useConfigStore = create<ConfigStore>()(\n  persist(\n    (set, get) => ({\n      apiKey: null, // Deprecated - kept for interface compatibility\n      baseURL: 'https://app.customgpt.ai/api/v1', // Not used anymore, server handles this\n      theme: (typeof window !== 'undefined' ? getThemeFromCookie() : 'light') as 'light' | 'dark',\n\n      setApiKey: (key: string) => {\n        // No-op - API key is not stored client-side anymore\n        // This method is kept for backward compatibility\n        console.warn('API key storage has been disabled for security. Configure API key in server environment variables.');\n      },\n\n      setBaseURL: (url: string) => {\n        // No-op - base URL is configured on server\n        console.warn('Base URL configuration has been moved to server. Update CUSTOMGPT_API_BASE_URL in environment variables.');\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Update cookie and document class for theme\n        if (typeof window !== 'undefined') {\n          setThemeUtil(theme);\n        }\n      },\n    }),\n    {\n      name: 'customgpt-config',\n      // Only persist non-sensitive data\n      partialize: (state) => ({\n        theme: state.theme,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Initialize theme from cookie on rehydration\n        if (typeof window !== 'undefined') {\n          const theme = initializeTheme();\n          if (state && state.theme !== theme) {\n            state.theme = theme;\n          }\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { UIStore } from '@/types';\n\nexport const useUIStore = create<UIStore>()(\n  persist(\n    (set) => ({\n      sidebarOpen: true,\n      settingsOpen: false,\n      theme: 'light',\n      fontSize: 'md',\n\n      setSidebarOpen: (open: boolean) => {\n        set({ sidebarOpen: open });\n      },\n\n      setSettingsOpen: (open: boolean) => {\n        set({ settingsOpen: open });\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Apply theme to document\n        if (typeof window !== 'undefined') {\n          document.documentElement.className = theme;\n        }\n      },\n\n      setFontSize: (size: 'sm' | 'md' | 'lg') => {\n        set({ fontSize: size });\n        \n        // Apply font size to document\n        if (typeof window !== 'undefined') {\n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (size) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }),\n    {\n      name: 'customgpt-ui',\n      partialize: (state) => ({\n        sidebarOpen: state.sidebarOpen,\n        theme: state.theme,\n        fontSize: state.fontSize,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Apply theme and font size on rehydration\n        if (typeof window !== 'undefined' && state) {\n          document.documentElement.className = state.theme;\n          \n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (state.fontSize) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface AnalyticsData {\n  conversations: {\n    total: number;\n    active: number;\n    trend: number;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  queries: {\n    total: number;\n    successful: number;\n    failed: number;\n    avgResponseTime: number;\n    topQueries: Array<{\n      query: string;\n      count: number;\n    }>;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  traffic: {\n    uniqueUsers: number;\n    pageViews: number;\n    avgSessionDuration: number;\n    bounceRate: number;\n    data: Array<{\n      date: string;\n      users: number;\n      pageViews: number;\n    }>;\n  };\n  statistics: {\n    totalMessages: number;\n    totalConversations: number;\n    avgMessagesPerConversation: number;\n    satisfactionRate: number;\n    responseAccuracy: number;\n  };\n}\n\ninterface AnalyticsState {\n  analytics: AnalyticsData | null;\n  loading: boolean;\n  error: string | null;\n  dateRange: {\n    startDate: string;\n    endDate: string;\n  };\n  \n  // Actions\n  fetchAnalytics: (projectId: number) => Promise<void>;\n  setDateRange: (startDate: string, endDate: string) => void;\n  exportAnalytics: (format: 'csv' | 'json' | 'pdf') => Promise<void>;\n  reset: () => void;\n}\n\n// Helper function to format dates for API\nconst formatDate = (date: Date): string => {\n  return date.toISOString().split('T')[0];\n};\n\n// Get default date range (last 30 days)\nconst getDefaultDateRange = () => {\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - 30);\n  \n  return {\n    startDate: formatDate(startDate),\n    endDate: formatDate(endDate),\n  };\n};\n\nexport const useAnalyticsStore = create<AnalyticsState>((set, get) => ({\n  analytics: null,\n  loading: false,\n  error: null,\n  dateRange: getDefaultDateRange(),\n\n  fetchAnalytics: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Fetch all reports data in parallel using documented endpoints\n      const [trafficReport, queriesReport, conversationsReport, analysisReport] = await Promise.all([\n        client.getTrafficReport(projectId),\n        client.getQueriesReport(projectId),\n        client.getConversationsReport(projectId),\n        client.getAnalysisReport(projectId, 'daily'),\n      ]);\n\n      // Transform the data to match our interface using actual API response structure\n      // Handle cases where API returns empty arrays instead of numbers\n      const conversationsTotal = Array.isArray(conversationsReport.data?.total) ? 0 : (conversationsReport.data?.total || 0);\n      const queriesTotal = Array.isArray(queriesReport.data?.total) ? 0 : (queriesReport.data?.total || 0);\n      const avgQueriesPerConv = Array.isArray(conversationsReport.data?.average_queries_per_conversation) \n        ? 0 \n        : (Number(conversationsReport.data?.average_queries_per_conversation) || 0);\n\n      const analyticsData: AnalyticsData = {\n        conversations: {\n          total: conversationsTotal,\n          active: Math.floor(conversationsTotal * 0.7), // Estimate active conversations\n          trend: 0, // Calculate trend from data if needed\n          data: Array.isArray(analysisReport.data?.conversations) \n            ? analysisReport.data.conversations.map((item: any) => ({\n                date: item.created_at_interval,\n                count: Number(item.queries_number) || 0,\n              }))\n            : [],\n        },\n        queries: {\n          total: queriesTotal,\n          successful: Array.isArray(queriesReport.data?.query_status) \n            ? (queriesReport.data.query_status.find((s: any) => s.status === 'success')?.count || 0)\n            : 0,\n          failed: Array.isArray(queriesReport.data?.query_status)\n            ? (queriesReport.data.query_status.find((s: any) => s.status === 'failed')?.count || 0)\n            : 0,\n          avgResponseTime: 0, // Not provided by API\n          topQueries: [], // Not provided by these endpoints\n          data: Array.isArray(analysisReport.data?.queries)\n            ? analysisReport.data.queries.map((item: any) => ({\n                date: item.created_at_interval,\n                count: Number(item.queries_number) || 0,\n              }))\n            : [],\n        },\n        traffic: {\n          uniqueUsers: Array.isArray(trafficReport.data?.sources)\n            ? trafficReport.data.sources.reduce((acc: number, source: any) => acc + (source.request_source_number || 0), 0)\n            : 0,\n          pageViews: Array.isArray(trafficReport.data?.sources)\n            ? trafficReport.data.sources.reduce((acc: number, source: any) => acc + (source.request_source_number || 0), 0)\n            : 0,\n          avgSessionDuration: 0, // Not provided by API\n          bounceRate: 0, // Not provided by API\n          data: Array.isArray(trafficReport.data?.sources)\n            ? trafficReport.data.sources.map((source: any) => ({\n                date: new Date().toISOString().split('T')[0], // Current date as traffic report doesn't have dates\n                users: source.request_source_number || 0,\n                pageViews: source.request_source_number || 0,\n              }))\n            : [],\n        },\n        statistics: {\n          totalMessages: queriesTotal,\n          totalConversations: conversationsTotal,\n          avgMessagesPerConversation: avgQueriesPerConv,\n          satisfactionRate: 0, // Not provided by API\n          responseAccuracy: 0, // Not provided by API\n        },\n      };\n\n      set({ analytics: analyticsData, loading: false });\n    } catch (error: any) {\n      console.error('Failed to fetch analytics:', error);\n      \n      let errorMessage = 'Failed to fetch analytics';\n      if (error.status === 401) {\n        const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : 'production';\n        const isDemoMode = deploymentMode === 'demo';\n        if (isDemoMode) {\n          errorMessage = 'API key authentication failed. Please check your API key.';\n          toast.error('Authentication failed. Please check your API key in demo settings.');\n        } else {\n          errorMessage = 'Authentication required. Please check your API key configuration.';\n          toast.error('Authentication failed. Please check your API key configuration.');\n        }\n      } else if (error.status === 404) {\n        errorMessage = 'Analytics data not found for this project.';\n        toast.error('No analytics data available yet.');\n      } else if (error.status === 500) {\n        errorMessage = 'Server error occurred. Please try again later.';\n        toast.error('Server error. Please try again later.');\n      } else {\n        toast.error('Failed to fetch analytics data');\n      }\n      \n      set({ \n        analytics: null,\n        error: errorMessage,\n        loading: false,\n      });\n    }\n  },\n\n  setDateRange: (startDate: string, endDate: string) => {\n    set({ dateRange: { startDate, endDate } });\n  },\n\n  exportAnalytics: async (format: 'csv' | 'json' | 'pdf') => {\n    const analytics = get().analytics;\n    if (!analytics) {\n      toast.error('No analytics data to export');\n      return;\n    }\n\n    try {\n      // Implementation would depend on the format\n      switch (format) {\n        case 'json':\n          const jsonData = JSON.stringify(analytics, null, 2);\n          const blob = new Blob([jsonData], { type: 'application/json' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `analytics-${new Date().toISOString()}.json`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          URL.revokeObjectURL(url);\n          toast.success('Analytics exported successfully');\n          break;\n          \n        case 'csv':\n          // Would need a CSV conversion library or custom implementation\n          toast.info('CSV export not yet implemented');\n          break;\n          \n        case 'pdf':\n          // Would need a PDF generation library\n          toast.info('PDF export not yet implemented');\n          break;\n      }\n    } catch (error) {\n      console.error('Failed to export analytics:', error);\n      toast.error('Failed to export analytics');\n    }\n  },\n\n  reset: () => {\n    set({\n      analytics: null,\n      loading: false,\n      error: null,\n      dateRange: getDefaultDateRange(),\n    });\n  },\n}));","import { create } from 'zustand';\nimport { getClient, isClientInitialized } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { Page, PagesQueryParams } from '@/types/pages.types';\n\ninterface PagesState {\n  pages: Page[];\n  loading: boolean;\n  error: string | null;\n  paginationInfo: {\n    current_page: number;\n    total: number;\n    per_page: number;\n    last_page: number;\n  };\n  queryParams: PagesQueryParams;\n  \n  // Actions\n  fetchPages: (projectId: number) => Promise<void>;\n  deletePage: (projectId: number, pageId: number) => Promise<void>;\n  reindexPage: (projectId: number, pageId: number) => Promise<void>;\n  \n  // UI State\n  setQueryParams: (params: Partial<PagesQueryParams>) => void;\n  reset: () => void;\n}\n\nexport const usePageStore = create<PagesState>((set, get) => ({\n  pages: [],\n  loading: false,\n  error: null,\n  paginationInfo: {\n    current_page: 1,\n    total: 0,\n    per_page: 20,\n    last_page: 1\n  },\n  queryParams: {\n    page: 1,\n    limit: 20,\n    order: 'desc',\n    crawl_status: 'all',\n    index_status: 'all'\n  },\n\n  fetchPages: async (projectId: number) => {\n    if (!isClientInitialized()) {\n      set({ error: 'API client not initialized' });\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const { queryParams } = get();\n      const response = await client.getPages(projectId, queryParams);\n      \n      set({ \n        pages: response.data.pages.data,\n        paginationInfo: {\n          current_page: response.data.pages.current_page,\n          total: response.data.pages.total,\n          per_page: response.data.pages.per_page,\n          last_page: response.data.pages.last_page\n        },\n        loading: false \n      });\n    } catch (error: any) {\n      console.error('Failed to fetch pages:', error);\n      \n      let errorMessage = 'Failed to fetch pages';\n      if (error.status === 400) {\n        errorMessage = 'Invalid request. Please check the project ID.';\n      } else if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Project not found.';\n      } else if (error.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  deletePage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deletePage(projectId, pageId);\n      \n      set(state => ({\n        pages: state.pages.filter(page => page.id !== pageId),\n        loading: false,\n      }));\n      \n      toast.success('Page deleted successfully');\n    } catch (error: any) {\n      console.error('Failed to delete page:', error);\n      \n      let errorMessage = 'Failed to delete page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Page not found.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  reindexPage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.reindexPage(projectId, pageId);\n      \n      // Update local state to show queued status\n      set(state => ({\n        pages: state.pages.map(page => \n          page.id === pageId \n            ? { ...page, crawl_status: 'queued', index_status: 'queued' }\n            : page\n        ),\n        loading: false,\n      }));\n      \n      toast.success('Page reindexing started');\n    } catch (error: any) {\n      console.error('Failed to reindex page:', error);\n      \n      let errorMessage = 'Failed to reindex page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 403) {\n        errorMessage = 'The page could not be reindexed.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  setQueryParams: (params: Partial<PagesQueryParams>) => {\n    set(state => ({\n      queryParams: { ...state.queryParams, ...params },\n    }));\n  },\n\n  reset: () => {\n    set({\n      pages: [],\n      loading: false,\n      error: null,\n      paginationInfo: {\n        current_page: 1,\n        total: 0,\n        per_page: 20,\n        last_page: 1\n      },\n      queryParams: {\n        page: 1,\n        limit: 20,\n        order: 'desc',\n        crawl_status: 'all',\n        index_status: 'all'\n      },\n    });\n  },\n}));","// Sources store - provides state management for source data\n// Currently uses direct API calls in components\n\nimport { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface Source {\n  id: string;\n  project_id: number;\n  name: string;\n  type: 'file' | 'url' | 'text' | 'api';\n  status: 'active' | 'inactive' | 'processing' | 'error';\n  size?: number;\n  file_type?: string;\n  url?: string;\n  content?: string;\n  metadata?: {\n    description?: string;\n    tags?: string[];\n    author?: string;\n    lastIndexed?: string;\n    [key: string]: any;\n  };\n  created_at: string;\n  updated_at: string;\n  indexed_at?: string;\n  error_message?: string;\n}\n\ninterface SourcesState {\n  sources: Source[];\n  currentSource: Source | null;\n  loading: boolean;\n  error: string | null;\n  searchQuery: string;\n  filter: {\n    status?: 'active' | 'inactive' | 'processing' | 'error' | 'all';\n    type?: 'file' | 'url' | 'text' | 'api' | 'all';\n    sortBy?: 'name' | 'created_at' | 'updated_at' | 'size';\n    sortOrder?: 'asc' | 'desc';\n  };\n  syncStatus: {\n    syncing: boolean;\n    lastSync?: string;\n    progress?: number;\n  };\n  \n  // Actions\n  fetchSources: (projectId: number) => Promise<void>;\n  fetchSource: (projectId: number, sourceId: string) => Promise<void>;\n  uploadSources: (projectId: number, files: File[]) => Promise<void>;\n  updateSource: (projectId: number, sourceId: string, updates: Partial<Source>) => Promise<void>;\n  deleteSource: (projectId: number, sourceId: string) => Promise<void>;\n  bulkDelete: (projectId: number, sourceIds: string[]) => Promise<void>;\n  syncSources: (projectId: number) => Promise<void>;\n  \n  // UI State\n  setSearchQuery: (query: string) => void;\n  setFilter: (filter: Partial<SourcesState['filter']>) => void;\n  selectSource: (source: Source | null) => void;\n  reset: () => void;\n}\n\n// Store implementation for source management\nexport const useSourceStore = create<SourcesState>((set, get) => ({\n  sources: [],\n  currentSource: null,\n  loading: false,\n  error: null,\n  searchQuery: '',\n  filter: {\n    status: 'all',\n    type: 'all',\n    sortBy: 'updated_at',\n    sortOrder: 'desc',\n  },\n  syncStatus: {\n    syncing: false,\n  },\n\n  fetchSources: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getSources(projectId);\n      \n      // Extract all sources from sitemaps and uploads\n      const allSources: Source[] = [];\n      \n      if (response.data.sitemaps) {\n        // Map API source structure to store's Source interface\n        response.data.sitemaps.forEach((apiSource: any) => {\n          allSources.push({\n            id: apiSource.id.toString(),\n            project_id: projectId,\n            name: apiSource.settings.sitemap_path || `Source ${apiSource.id}`,\n            type: 'url', // Map 'sitemap' to 'url'\n            status: 'active',\n            metadata: {\n              ...apiSource.settings,\n              pages: apiSource.pages,\n            },\n            created_at: apiSource.created_at,\n            updated_at: apiSource.updated_at,\n          });\n        });\n      }\n      \n      if (response.data.uploads) {\n        const uploads = Array.isArray(response.data.uploads) \n          ? response.data.uploads \n          : [response.data.uploads];\n          \n        uploads.forEach((apiSource: any) => {\n          allSources.push({\n            id: apiSource.id.toString(),\n            project_id: projectId,\n            name: `Upload ${apiSource.id}`,\n            type: 'file',\n            status: 'active',\n            metadata: {\n              ...apiSource.settings,\n              pages: apiSource.pages,\n            },\n            created_at: apiSource.created_at,\n            updated_at: apiSource.updated_at,\n          });\n        });\n      }\n      \n      set({ sources: allSources, loading: false });\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch sources',\n        loading: false,\n      });\n      toast.error('Failed to load sources');\n    }\n  },\n\n  fetchSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      // const client = getClient();\n      // const response = await client.getSource(projectId, sourceId);\n      \n      // const source = response.data;\n      // set({ currentSource: source, loading: false });\n      throw new Error('getSource API method not available');\n      \n      // Update in the list as well\n      // set(state => ({\n      //   sources: state.sources.map(s => s.id === sourceId ? source : s),\n      // }));\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch source',\n        loading: false,\n      });\n      toast.error('Failed to load source details');\n    }\n  },\n\n  uploadSources: async (projectId: number, files: File[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Upload files one by one for better progress tracking\n      const uploadPromises = files.map(file => \n        Promise.reject(new Error('uploadFile API method not available'))\n      );\n      \n      const responses = await Promise.all(uploadPromises);\n      \n      // Refresh sources list\n      await get().fetchSources(projectId);\n      \n      toast.success(`Successfully uploaded ${files.length} file(s)`);\n      set({ loading: false });\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to upload sources',\n        loading: false,\n      });\n      toast.error('Failed to upload files');\n      throw error;\n    }\n  },\n\n  updateSource: async (projectId: number, sourceId: string, updates: Partial<Source>) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      // await client.updateSource(projectId, sourceId, {\n      throw new Error('updateSource API method not available');\n      /*\n        name: updates.name,\n        metadata: updates.metadata,\n        status: updates.status,\n      }); */\n      \n      set(state => ({\n        sources: state.sources.map(source => \n          source.id === sourceId \n            ? { ...source, ...updates, updated_at: new Date().toISOString() } \n            : source\n        ),\n        currentSource: state.currentSource?.id === sourceId \n          ? { ...state.currentSource, ...updates, updated_at: new Date().toISOString() }\n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source updated successfully');\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to update source',\n        loading: false,\n      });\n      toast.error('Failed to update source');\n      throw error;\n    }\n  },\n\n  deleteSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteSource(projectId, parseInt(sourceId));\n      \n      set(state => ({\n        sources: state.sources.filter(source => source.id !== sourceId),\n        currentSource: state.currentSource?.id === sourceId ? null : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source deleted successfully');\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete source',\n        loading: false,\n      });\n      toast.error('Failed to delete source');\n      throw error;\n    }\n  },\n\n  bulkDelete: async (projectId: number, sourceIds: string[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Delete sources in parallel\n      await Promise.all(\n        sourceIds.map(sourceId => client.deleteSource(projectId, parseInt(sourceId)))\n      );\n      \n      set(state => ({\n        sources: state.sources.filter(source => !sourceIds.includes(source.id)),\n        currentSource: sourceIds.includes(state.currentSource?.id || '') \n          ? null \n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success(`Successfully deleted ${sourceIds.length} source(s)`);\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete sources',\n        loading: false,\n      });\n      toast.error('Failed to delete sources');\n      throw error;\n    }\n  },\n\n  syncSources: async (projectId: number) => {\n    set(state => ({\n      syncStatus: { ...state.syncStatus, syncing: true, progress: 0 }\n    }));\n    \n    try {\n      const client = getClient();\n      // await client.syncSources(projectId);\n      throw new Error('syncSources API method not available');\n      \n      // Refresh sources after sync\n      await get().fetchSources(projectId);\n      \n      set(state => ({\n        syncStatus: {\n          syncing: false,\n          lastSync: new Date().toISOString(),\n          progress: 100,\n        }\n      }));\n      \n      toast.success('Sources synchronized successfully');\n    } catch (error) {\n      set(state => ({\n        syncStatus: { ...state.syncStatus, syncing: false },\n        error: error instanceof Error ? error.message : 'Failed to sync sources',\n      }));\n      toast.error('Failed to sync sources');\n      throw error;\n    }\n  },\n\n  setSearchQuery: (query: string) => {\n    set({ searchQuery: query });\n  },\n\n  setFilter: (filter: Partial<SourcesState['filter']>) => {\n    set(state => ({\n      filter: { ...state.filter, ...filter },\n    }));\n  },\n\n  selectSource: (source: Source | null) => {\n    set({ currentSource: source });\n  },\n\n  reset: () => {\n    set({\n      sources: [],\n      currentSource: null,\n      loading: false,\n      error: null,\n      searchQuery: '',\n      filter: {\n        status: 'all',\n        type: 'all',\n        sortBy: 'updated_at',\n        sortOrder: 'desc',\n      },\n      syncStatus: {\n        syncing: false,\n      },\n    });\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { UserProfileStore, UserProfile } from '@/types';\n\n// CustomGPT.ai API Response format\ninterface CustomGPTResponse<T> {\n  status: 'success' | 'error';\n  data: T;\n}\n\nexport const useProfileStore = create<UserProfileStore>()(\n  persist(\n    (set, get) => ({\n      // Initial State\n      profile: null,\n      loading: false,\n      error: null,\n\n      // Profile Management - GET /api/v1/user\n      fetchProfile: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.getUserProfile();\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n          } else {\n            throw new Error('Failed to fetch profile');\n          }\n        } catch (error: any) {\n          console.error('Failed to fetch profile:', error);\n          \n          let errorMessage = 'Failed to fetch profile';\n          \n          if (error.status === 401) {\n            const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : null;\n            const isDemoMode = deploymentMode === 'demo';\n            if (isDemoMode) {\n              errorMessage = 'API key authentication failed. Please check your API key.';\n              toast.error('Authentication failed. Please check your API key in demo settings.');\n            } else {\n              errorMessage = 'Authentication required. Please check your API key configuration.';\n              toast.error('Authentication failed. Please check your API key configuration.');\n            }\n          } else if (error.status === 500) {\n            errorMessage = 'Server error occurred. Please try again later.';\n            toast.error('Server error. Please try again later.');\n          } else {\n            toast.error('Failed to load profile');\n          }\n          \n          set({ \n            error: errorMessage,\n            loading: false \n          });\n        }\n      },\n\n      // Profile Update - POST /api/v1/user (multipart/form-data)\n      updateProfile: async (name: string, profilePhoto?: File) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Create FormData for multipart request\n          const formData = new FormData();\n          formData.append('name', name);\n          \n          if (profilePhoto) {\n            formData.append('profile_photo', profilePhoto);\n          }\n          \n          const response = await client.updateUserProfile(formData);\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n            toast.success('Profile updated successfully');\n          } else {\n            throw new Error('Failed to update profile');\n          }\n        } catch (error: any) {\n          console.error('Failed to update profile:', error);\n          \n          let errorMessage = 'Failed to update profile';\n          \n          if (error.status === 401) {\n            const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : null;\n            const isDemoMode = deploymentMode === 'demo';\n            if (isDemoMode) {\n              errorMessage = 'API key authentication failed. Please check your API key.';\n              toast.error('Authentication failed. Please check your API key in demo settings.');\n            } else {\n              errorMessage = 'Authentication required. Please check your API key configuration.';\n              toast.error('Authentication failed. Please check your API key configuration.');\n            }\n          } else if (error.status === 422 || error.status === 400) {\n            // Handle validation errors\n            if (error.data?.data?.errors) {\n              const errors = error.data.data.errors;\n              if (errors.profile_photo && Array.isArray(errors.profile_photo)) {\n                errorMessage = errors.profile_photo[0];\n                toast.error(errorMessage);\n              } else {\n                // Handle other validation errors\n                const firstError = Object.values(errors).flat()[0] as string;\n                errorMessage = firstError || 'Validation error occurred';\n                toast.error(errorMessage);\n              }\n            } else {\n              errorMessage = error.message || 'Validation error occurred';\n              toast.error(errorMessage);\n            }\n          } else if (error.status === 500) {\n            errorMessage = 'Server error occurred. Please try again later.';\n            toast.error('Server error. Please try again later.');\n          } else {\n            errorMessage = error.message || 'Failed to update profile';\n            toast.error(errorMessage);\n          }\n          \n          set({ \n            error: errorMessage,\n            loading: false \n          });\n        }\n      },\n\n      // Utility\n      reset: () => {\n        set({\n          profile: null,\n          loading: false,\n          error: null,\n        });\n      },\n    }),\n    {\n      name: 'profile-store',\n      partialize: (state) => ({\n        profile: state.profile,\n      }),\n    }\n  )\n);","import { create } from 'zustand';\nimport { toast } from 'sonner';\nimport { getClient } from '@/lib/api/client';\nimport type { APIResponse, AgentStats } from '@/types';\n\nexport interface ProjectSettings {\n  // Appearance\n  chatbot_avatar?: string;\n  chatbot_background_type?: 'image' | 'color';\n  chatbot_background?: string;\n  chatbot_background_color?: string;\n  chatbot_color?: string;\n  chatbot_toolbar_color?: string;\n  chatbot_title?: string;\n  chatbot_title_color?: string;\n  user_avatar?: string;\n  user_avatar_enabled?: boolean;\n  spotlight_avatar_enabled?: boolean;\n  spotlight_avatar?: string;\n  spotlight_avatar_shape?: 'rectangle' | 'circle';\n  spotlight_avatar_type?: 'default' | 'image';\n  user_avatar_orientation?: 'agent-left-user-right' | 'agent-right-user-left' | 'both-left' | 'both-right';\n  \n  // Messages & Behavior\n  default_prompt?: string;\n  example_questions?: string[];\n  persona_instructions?: string;\n  response_source?: 'default' | 'own_content' | 'openai_content';\n  chatbot_model?: string;\n  custom_persona?: string;\n  agent_capability?: 'fastest-responses' | 'optimal-choice' | 'advanced-reasoning' | 'complex-tasks';\n  chatbot_msg_lang?: string;\n  input_field_addendum?: string;\n  \n  // Messages\n  hang_in_there_msg?: string;\n  chatbot_siesta_msg?: string;\n  no_answer_message?: string;\n  ending_message?: string;\n  try_asking_questions_msg?: string;\n  view_more_msg?: string;\n  view_less_msg?: string;\n  \n  // Citations\n  enable_citations?: number;\n  citations_view_type?: 'user' | 'show' | 'hide';\n  citations_answer_source_label_msg?: string;\n  citations_sources_label_msg?: string;\n  image_citation_display?: 'default' | 'first_only';\n  enable_inline_citations_api?: boolean;\n  hide_sources_from_responses?: boolean;\n  \n  // Features\n  enable_feedbacks?: boolean;\n  is_loading_indicator_enabled?: boolean;\n  remove_branding?: boolean;\n  private_deployment?: boolean;\n  use_context_aware_starter_question?: boolean;\n  enable_recaptcha_for_public_chatbots?: boolean;\n  is_selling_enabled?: boolean;\n  license_slug?: boolean;\n  selling_url?: string;\n  can_share_conversation?: boolean;\n  can_export_conversation?: boolean;\n  conversation_time_window?: boolean;\n  conversation_retention_period?: 'day' | 'week' | 'month' | 'quarter' | 'year' | 'custom' | 'never';\n  conversation_retention_days?: number;\n  enable_agent_knowledge_base_awareness?: boolean;\n  markdown_enabled?: boolean;\n}\n\nexport interface ProjectPlugin {\n  id: string;\n  name: string;\n  enabled: boolean;\n  description?: string;\n  category?: string;\n  settings?: Record<string, any>;\n}\n\n// Using AgentStats from the API instead of custom ProjectStats\nexport type ProjectStats = AgentStats;\n\nexport interface ProjectSettingsStore {\n  // Settings\n  settings: ProjectSettings | null;\n  settingsLoading: boolean;\n  settingsError: string | null;\n\n  // Plugins\n  plugins: ProjectPlugin[];\n  pluginsLoading: boolean;\n  pluginsError: string | null;\n\n  // Stats\n  stats: ProjectStats | null;\n  statsLoading: boolean;\n  statsError: string | null;\n\n  // Actions\n  fetchSettings: (projectId: number) => Promise<void>;\n  updateSettings: (projectId: number, settings: Partial<ProjectSettings>) => Promise<void>;\n  fetchPlugins: (projectId: number) => Promise<void>;\n  updatePlugin: (projectId: number, pluginId: string, enabled: boolean) => Promise<void>;\n  fetchStats: (projectId: number) => Promise<void>;\n  reset: () => void;\n}\n\n// Track active requests to prevent duplicates\nconst activeRequests = new Map<string, boolean>();\n\nexport const useProjectSettingsStore = create<ProjectSettingsStore>((set, get) => ({\n  // Initial state\n  settings: null,\n  settingsLoading: false,\n  settingsError: null,\n  plugins: [],\n  pluginsLoading: false,\n  pluginsError: null,\n  stats: null,\n  statsLoading: false,\n  statsError: null,\n\n  // Fetch project settings\n  fetchSettings: async (projectId: number) => {\n    const requestKey = `settings-${projectId}`;\n    \n    // Prevent duplicate requests\n    if (activeRequests.get(requestKey)) {\n      return;\n    }\n    \n    activeRequests.set(requestKey, true);\n    \n    // Clear previous errors and set loading state\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      const response = await getClient().getAgentSettings(projectId);\n\n      // The API client returns the data directly, not wrapped with status\n      if (response && response.data) {\n        set({ \n          settings: response.data, \n          settingsLoading: false,\n          settingsError: null // Explicitly clear error on success\n        });\n      } else if (response) {\n        // If response exists but doesn't have data property, it might be the direct data\n        set({ \n          settings: response as any, \n          settingsLoading: false,\n          settingsError: null\n        });\n      } else {\n        throw new Error('Failed to fetch project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      // Only show toast for actual errors, not for expected scenarios\n      if (error instanceof Error && !error.message.includes('404')) {\n        toast.error(errorMessage);\n      }\n    } finally {\n      activeRequests.delete(requestKey);\n    }\n  },\n\n  // Update project settings\n  updateSettings: async (projectId: number, settingsUpdate: Partial<ProjectSettings>) => {\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      // Create FormData for multipart/form-data\n      const formData = new FormData();\n      \n      // Default values for fields that API requires to have a value\n      const defaultValues: Record<string, string> = {\n        ending_message: 'Please email us for further support',\n        no_answer_message: 'Sorry, I don\\'t have an answer for that.',\n        try_asking_questions_msg: 'Try asking these questions...',\n        view_more_msg: 'View more',\n        view_less_msg: 'View less',\n        citations_answer_source_label_msg: 'Where did this answer come from?',\n        citations_sources_label_msg: 'Sources',\n        hang_in_there_msg: 'Hang in there! I\\'m thinking..',\n        chatbot_siesta_msg: 'Oops! The agent is taking a siesta. We are aware of this and will get it back soon! Please try again later.'\n      };\n\n      Object.entries(settingsUpdate).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          if (key === 'example_questions' && Array.isArray(value)) {\n            // Handle array fields - use bracket notation without index\n            value.forEach((question) => {\n              formData.append(`example_questions[]`, question);\n            });\n          } else if (value instanceof File) {\n            // Handle file uploads\n            formData.append(key, value);\n          } else {\n            // Handle regular fields\n            // If the value is empty and there's a default, use the default\n            const stringValue = String(value);\n            if (stringValue === '' && defaultValues[key]) {\n              formData.append(key, defaultValues[key]);\n            } else {\n              formData.append(key, stringValue);\n            }\n          }\n        }\n      });\n\n      const response = await getClient().updateAgentSettings(projectId, formData);\n\n      // The API client returns the data directly\n      if (response) {\n        // Instead of merging, re-fetch the settings to ensure we have the latest data\n        set({ settingsLoading: false });\n        \n        // Re-fetch settings to get the updated data from server\n        await get().fetchSettings(projectId);\n        \n        toast.success('Project settings updated successfully');\n      } else {\n        throw new Error('Failed to update project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project plugins\n  fetchPlugins: async (projectId: number) => {\n    set({ pluginsLoading: true, pluginsError: null });\n\n    try {\n      const response = await getClient().getProjectPlugins(projectId);\n\n      // The API client returns the data directly\n      if (response) {\n        const pluginsData = response.data || response;\n        set({ \n          plugins: Array.isArray(pluginsData) ? pluginsData : [], \n          pluginsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project plugins');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project plugins';\n      set({ \n        pluginsError: errorMessage, \n        pluginsLoading: false,\n        plugins: [] // Fallback to empty array\n      });\n      console.warn('Plugins not available:', errorMessage);\n    }\n  },\n\n  // Update project plugin\n  updatePlugin: async (projectId: number, pluginId: string, enabled: boolean) => {\n    try {\n      // This endpoint might not exist yet, so we'll implement it as a placeholder\n      const response = await getClient().updateProjectPlugin(projectId, pluginId, { enabled });\n\n      // The API client returns the data directly\n      if (response) {\n        // Update plugin in store\n        const plugins = get().plugins.map(plugin =>\n          plugin.id === pluginId ? { ...plugin, enabled } : plugin\n        );\n        \n        set({ plugins });\n        toast.success(`Plugin ${enabled ? 'enabled' : 'disabled'} successfully`);\n      } else {\n        throw new Error('Failed to update plugin');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update plugin';\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project stats\n  fetchStats: async (projectId: number) => {\n    set({ statsLoading: true, statsError: null });\n\n    try {\n      const response = await getClient().getAgentStats(projectId);\n\n      // The API client returns the data directly\n      if (response) {\n        const statsData = response.data || response;\n        set({ \n          stats: statsData, \n          statsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project stats');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project stats';\n      set({ \n        statsError: errorMessage, \n        statsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Reset store\n  reset: () => {\n    set({\n      settings: null,\n      settingsLoading: false,\n      settingsError: null,\n      plugins: [],\n      pluginsLoading: false,\n      pluginsError: null,\n      stats: null,\n      statsLoading: false,\n      statsError: null,\n    });\n  },\n}));","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport type { AgentLicense } from '@/types';\n\ninterface LicenseStore {\n  licenses: AgentLicense[];\n  loading: boolean;\n  error: string | null;\n  \n  fetchLicenses: (projectId: number) => Promise<void>;\n  createLicense: (projectId: number, name: string) => Promise<AgentLicense>;\n  updateLicense: (projectId: number, licenseId: string, name: string) => Promise<void>;\n  deleteLicense: (projectId: number, licenseId: string) => Promise<void>;\n  clearError: () => void;\n}\n\nexport const useLicenseStore = create<LicenseStore>((set, get) => ({\n  licenses: [],\n  loading: false,\n  error: null,\n\n  fetchLicenses: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getLicenses(projectId);\n      \n      logger.info('LICENSES', 'API Response', {\n        projectId,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataType: Array.isArray(response?.data) ? 'array' : typeof response?.data,\n        dataLength: Array.isArray(response?.data) ? response.data.length : 0\n      });\n      \n      // Handle response format based on API documentation\n      const licenses = Array.isArray(response.data) ? response.data : [];\n      \n      logger.info('LICENSES', 'Processed licenses', {\n        count: licenses.length,\n        licenses: licenses.map((l: any) => ({ \n          name: l.name, \n          key: l.key?.substring(0, 8) + '...', \n          project_id: l.project_id \n        }))\n      });\n      \n      set({ \n        licenses,\n        loading: false \n      });\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to fetch licenses', {\n        projectId,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        responseText: error?.responseText || 'No response text'\n      });\n      \n      // Handle JSON parsing errors specifically\n      let errorMessage = 'Failed to fetch licenses';\n      if (error?.status === 403 || error?.data?.message?.includes('not allowed')) {\n        // This is expected for some projects - don't show an error\n        errorMessage = '';\n        set({ \n          error: null,\n          loading: false,\n          licenses: []\n        });\n        throw error; // Still throw to handle in component\n      } else if (error?.message?.includes('Unexpected token')) {\n        errorMessage = 'API returned invalid response format. This may be a server configuration issue.';\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      \n      if (errorMessage) {\n        set({ \n          error: errorMessage,\n          loading: false,\n          licenses: []\n        });\n      }\n    }\n  },\n\n  createLicense: async (projectId: number, name: string) => {\n    set({ loading: true, error: null });\n    \n    logger.info('LICENSES', 'Creating license', {\n      projectId,\n      name\n    });\n    \n    try {\n      const client = getClient();\n      const response = await client.createLicense(projectId, { name });\n      \n      logger.info('LICENSES', 'Create license API response', {\n        projectId,\n        name,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataStructure: response?.data ? Object.keys(response.data) : [],\n        licenseKey: response.data?.licenseKey?.substring(0, 8) + '...'\n      });\n      \n      // Handle response format based on API documentation\n      // Response contains { license: {...}, licenseKey: \"...\" }\n      const newLicense = response.data?.license || response.data;\n      \n      if (newLicense) {\n        logger.info('LICENSES', 'New license created', {\n          licenseName: newLicense.name,\n          licenseKey: newLicense.key?.substring(0, 8) + '...',\n          project_id: newLicense.project_id\n        });\n        \n        set(state => ({\n          licenses: [...state.licenses, newLicense],\n          loading: false\n        }));\n      }\n      \n      return newLicense;\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to create license', {\n        projectId,\n        name,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        responseText: error?.responseText || 'No response text'\n      });\n      \n      // Handle JSON parsing errors specifically\n      let errorMessage = 'Failed to create license';\n      if (error?.message?.includes('Unexpected token')) {\n        errorMessage = 'API returned invalid response format. This may be a server configuration issue.';\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  updateLicense: async (projectId: number, licenseId: string, name: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.updateLicense(projectId, licenseId, { name });\n      \n      logger.info('LICENSES', 'Updated license', {\n        projectId,\n        licenseId,\n        name\n      });\n      \n      // Handle response format based on API documentation\n      const updatedLicense = (response as any).license || response.data;\n      \n      if (updatedLicense) {\n        set(state => ({\n          licenses: state.licenses.map(license => \n            license.key === licenseId ? { ...license, name, updated_at: new Date().toISOString() } : license\n          ),\n          loading: false\n        }));\n      }\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to update license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to update license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  deleteLicense: async (projectId: number, licenseId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteLicense(projectId, licenseId);\n      \n      logger.info('LICENSES', 'Deleted license', {\n        projectId,\n        licenseId\n      });\n      \n      set(state => ({\n        licenses: state.licenses.filter(license => license.key !== licenseId),\n        loading: false\n      }));\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to delete license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to delete license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  clearError: () => {\n    set({ error: null });\n  }\n}));","/**\n * Store Index - Central State Management\n * \n * This file exports all Zustand stores used in the application.\n * Each store manages a specific domain of the application state.\n * \n * Architecture:\n * - Uses Zustand for lightweight state management\n * - Each store is independent but can interact via imports\n * - Stores handle both state and async operations (API calls)\n * - All stores use TypeScript for type safety\n * \n * Store Overview:\n * - config: API keys, base URLs, theme settings\n * - agents: Agent/chatbot management and CRUD operations\n * - conversations: Chat session management\n * - messages: Message handling, streaming, and history\n * - ui: UI preferences and layout state\n * - analytics: Usage tracking and metrics\n * - pages: Agent knowledge base pages\n * - sources: Citation sources and references\n * - profile: User profile and limits\n * - project-settings: Agent-specific settings\n * - licenses: License key management\n * \n * Features:\n * - Centralized state management with TypeScript support\n * - Domain-specific stores for organized architecture\n * - Automated error handling and recovery\n * - Cross-store communication and data consistency\n */\n\n// Export all stores from a single entry point\nexport { useConfigStore } from './config';\nexport { useAgentStore } from './agents';\nexport { useConversationStore } from './conversations';\nexport { useMessageStore } from './messages';\nexport { useUIStore } from './ui';\nexport { useAnalyticsStore } from './analytics';\nexport { usePageStore } from './pages';\nexport { useSourceStore } from './sources';\nexport { useProfileStore } from './profile';\nexport { useProjectSettingsStore } from './project-settings';\nexport { useLicenseStore } from './licenses';\n\n/**\n * Store initialization helper\n * \n * Currently, Zustand stores auto-initialize on first access.\n * This function is provided for future use cases where\n * manual initialization might be needed (e.g., SSR, testing).\n * \n * @example\n * // In your app initialization\n * initializeStores();\n */\nexport function initializeStores() {\n  // Stores will auto-initialize when first accessed\n  // This function can be used for any additional setup if needed\n}\n\n/**\n * Store cleanup helper\n * \n * Zustand automatically handles cleanup when components unmount.\n * This function is provided for manual cleanup scenarios\n * (e.g., user logout, testing teardown).\n * \n * To implement cleanup:\n * 1. Add a reset() method to each store\n * 2. Call each store's reset() method here\n * \n * @example\n * // On user logout\n * cleanupStores();\n */\nexport function cleanupStores() {\n  // Add any cleanup logic if needed\n  // Currently, Zustand handles cleanup automatically\n}","/**\n * Performance Optimizations for Voice Themes\n * \n * Advanced performance optimizations including LOD system, render culling,\n * batch rendering, and memory management for maintaining 30+ FPS on all devices.\n */\n\nimport { PerformanceMetrics, DeviceCapabilities } from '../utils/performance';\n\nexport interface LODSettings {\n  level: 0 | 1 | 2; // 0 = high, 1 = medium, 2 = low\n  particleReduction: number; // 0-1, percentage reduction\n  effectsDisabled: boolean;\n  glowDisabled: boolean;\n  simplifiedRendering: boolean;\n  skipFrames: number; // Skip every N frames for heavy operations\n}\n\nexport interface CullingBounds {\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n  near?: number;\n  far?: number;\n}\n\nexport interface RenderBatch {\n  color: string;\n  particles: Array<{ x: number; y: number; size: number; alpha: number }>;\n  glowEnabled: boolean;\n  effectsEnabled: boolean;\n}\n\n/**\n * Level-of-Detail Manager for Performance Scaling\n */\nexport class LODManager {\n  private currentLOD: LODSettings;\n  private frameCount = 0;\n  private lastPerformanceCheck = 0;\n  private performanceHistory: number[] = [];\n  \n  private lodProfiles: Record<number, LODSettings> = {\n    0: { // High quality\n      level: 0,\n      particleReduction: 0,\n      effectsDisabled: false,\n      glowDisabled: false,\n      simplifiedRendering: false,\n      skipFrames: 0\n    },\n    1: { // Medium quality\n      level: 1,\n      particleReduction: 0.3,\n      effectsDisabled: false,\n      glowDisabled: true,\n      simplifiedRendering: false,\n      skipFrames: 1\n    },\n    2: { // Low quality\n      level: 2,\n      particleReduction: 0.6,\n      effectsDisabled: true,\n      glowDisabled: true,\n      simplifiedRendering: true,\n      skipFrames: 2\n    }\n  };\n\n  constructor(initialLOD = 1) {\n    this.currentLOD = this.lodProfiles[initialLOD];\n  }\n\n  /**\n   * Update LOD based on performance metrics\n   */\n  updateLOD(metrics: PerformanceMetrics): LODSettings {\n    this.frameCount++;\n    \n    // Check performance every 30 frames (0.5 seconds at 60fps)\n    if (this.frameCount - this.lastPerformanceCheck >= 30) {\n      this.performanceHistory.push(metrics.fps);\n      \n      // Keep only last 5 measurements (2.5 seconds)\n      if (this.performanceHistory.length > 5) {\n        this.performanceHistory.shift();\n      }\n      \n      const avgFPS = this.performanceHistory.reduce((sum, fps) => sum + fps, 0) / this.performanceHistory.length;\n      this.adjustLODBasedOnFPS(avgFPS);\n      \n      this.lastPerformanceCheck = this.frameCount;\n    }\n    \n    return this.currentLOD;\n  }\n\n  private adjustLODBasedOnFPS(avgFPS: number): void {\n    const targetFPS = 30;\n    \n    if (avgFPS < targetFPS * 0.7 && this.currentLOD.level < 2) {\n      // Performance is poor, reduce quality\n      this.currentLOD = this.lodProfiles[Math.min(2, this.currentLOD.level + 1)];\n      console.log(`[LOD] Reducing quality to level ${this.currentLOD.level} (FPS: ${avgFPS.toFixed(1)})`);\n    } else if (avgFPS > targetFPS * 1.2 && this.currentLOD.level > 0) {\n      // Performance is good, can increase quality\n      this.currentLOD = this.lodProfiles[Math.max(0, this.currentLOD.level - 1)];\n      console.log(`[LOD] Increasing quality to level ${this.currentLOD.level} (FPS: ${avgFPS.toFixed(1)})`);\n    }\n  }\n\n  getCurrentLOD(): LODSettings {\n    return this.currentLOD;\n  }\n\n  shouldSkipFrame(): boolean {\n    return this.currentLOD.skipFrames > 0 && \n           this.frameCount % (this.currentLOD.skipFrames + 1) !== 0;\n  }\n}\n\n/**\n * Frustum Culling for Off-screen Particle Elimination\n */\nexport class FrustumCuller {\n  private bounds!: CullingBounds;\n  private margin = 50; // Extra margin to prevent pop-in\n  \n  constructor(width: number, height: number, margin = 50) {\n    this.margin = margin;\n    this.updateBounds(width, height);\n  }\n\n  updateBounds(width: number, height: number): void {\n    this.bounds = {\n      left: -this.margin,\n      right: width + this.margin,\n      top: -this.margin,\n      bottom: height + this.margin,\n      near: -200,\n      far: 200\n    };\n  }\n\n  /**\n   * Check if a particle is within visible bounds\n   */\n  isVisible(x: number, y: number, z = 0, size = 0): boolean {\n    return (\n      x + size >= this.bounds.left &&\n      x - size <= this.bounds.right &&\n      y + size >= this.bounds.top &&\n      y - size <= this.bounds.bottom &&\n      (this.bounds.near === undefined || z >= this.bounds.near) &&\n      (this.bounds.far === undefined || z <= this.bounds.far)\n    );\n  }\n\n  /**\n   * Filter array of particles to only visible ones\n   */\n  cullParticles<T extends { x: number; y: number; z?: number; size?: number }>(particles: T[]): T[] {\n    return particles.filter(particle => \n      this.isVisible(\n        particle.x, \n        particle.y, \n        particle.z || 0, \n        particle.size || 0\n      )\n    );\n  }\n\n  /**\n   * Get culling statistics\n   */\n  getCullingStats<T extends { x: number; y: number }>(particles: T[]): {\n    total: number;\n    visible: number;\n    culled: number;\n    cullingRatio: number;\n  } {\n    const visible = this.cullParticles(particles);\n    const culled = particles.length - visible.length;\n    \n    return {\n      total: particles.length,\n      visible: visible.length,\n      culled,\n      cullingRatio: particles.length > 0 ? culled / particles.length : 0\n    };\n  }\n}\n\n/**\n * Batch Renderer for Optimized Drawing\n */\nexport class BatchRenderer {\n  private batches: Map<string, RenderBatch> = new Map();\n  private maxBatchSize = 1000;\n  \n  /**\n   * Add particle to appropriate batch\n   */\n  addToBatch(\n    color: string, \n    x: number, \n    y: number, \n    size: number, \n    alpha: number,\n    glowEnabled = false,\n    effectsEnabled = false\n  ): void {\n    const batchKey = `${color}_${glowEnabled}_${effectsEnabled}`;\n    \n    if (!this.batches.has(batchKey)) {\n      this.batches.set(batchKey, {\n        color,\n        particles: [],\n        glowEnabled,\n        effectsEnabled\n      });\n    }\n    \n    const batch = this.batches.get(batchKey)!;\n    if (batch.particles.length < this.maxBatchSize) {\n      batch.particles.push({ x, y, size, alpha });\n    }\n  }\n\n  /**\n   * Render all batches efficiently\n   */\n  renderBatches(context: CanvasRenderingContext2D, lodSettings: LODSettings): void {\n    Array.from(this.batches.entries()).forEach(([batchKey, batch]) => {\n      if (batch.particles.length === 0) return;\n      \n      context.save();\n      context.fillStyle = batch.color;\n      \n      // Skip effects if disabled by LOD\n      const shouldRenderEffects = batch.effectsEnabled && !lodSettings.effectsDisabled;\n      const shouldRenderGlow = batch.glowEnabled && !lodSettings.glowDisabled;\n      \n      if (lodSettings.simplifiedRendering) {\n        // Simplified rendering: draw all particles as simple circles\n        this.renderSimplifiedBatch(context, batch);\n      } else {\n        // Full rendering: individual particles with effects\n        this.renderFullBatch(context, batch, shouldRenderEffects, shouldRenderGlow);\n      }\n      \n      context.restore();\n    });\n  }\n\n  private renderSimplifiedBatch(context: CanvasRenderingContext2D, batch: RenderBatch): void {\n    context.beginPath();\n    batch.particles.forEach(particle => {\n      context.globalAlpha = particle.alpha;\n      context.moveTo(particle.x + particle.size, particle.y);\n      context.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n    });\n    context.fill();\n  }\n\n  private renderFullBatch(\n    context: CanvasRenderingContext2D, \n    batch: RenderBatch,\n    renderEffects: boolean,\n    renderGlow: boolean\n  ): void {\n    batch.particles.forEach(particle => {\n      context.save();\n      context.globalAlpha = particle.alpha;\n      \n      // Render glow first if enabled\n      if (renderGlow && particle.alpha > 0.5) {\n        const glowGradient = context.createRadialGradient(\n          particle.x, particle.y, 0,\n          particle.x, particle.y, particle.size * 3\n        );\n        glowGradient.addColorStop(0, batch.color);\n        glowGradient.addColorStop(1, 'transparent');\n        \n        context.fillStyle = glowGradient;\n        context.globalAlpha = particle.alpha * 0.3;\n        context.beginPath();\n        context.arc(particle.x, particle.y, particle.size * 3, 0, Math.PI * 2);\n        context.fill();\n      }\n      \n      // Render main particle\n      context.globalAlpha = particle.alpha;\n      context.fillStyle = batch.color;\n      context.beginPath();\n      context.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n      context.fill();\n      \n      context.restore();\n    });\n  }\n\n  /**\n   * Clear all batches\n   */\n  clearBatches(): void {\n    Array.from(this.batches.values()).forEach(batch => {\n      batch.particles = [];\n    });\n  }\n\n  /**\n   * Get batch statistics\n   */\n  getBatchStats(): {\n    batchCount: number;\n    totalParticles: number;\n    avgBatchSize: number;\n    largestBatch: number;\n  } {\n    const batchCount = this.batches.size;\n    let totalParticles = 0;\n    let largestBatch = 0;\n    \n    Array.from(this.batches.values()).forEach(batch => {\n      totalParticles += batch.particles.length;\n      largestBatch = Math.max(largestBatch, batch.particles.length);\n    });\n    \n    return {\n      batchCount,\n      totalParticles,\n      avgBatchSize: batchCount > 0 ? totalParticles / batchCount : 0,\n      largestBatch\n    };\n  }\n}\n\n/**\n * Memory Usage Monitor and Optimizer\n */\nexport class MemoryOptimizer {\n  private lastGCTime = 0;\n  private gcInterval = 10000; // 10 seconds\n  private memoryPressureThreshold = 0.85; // 85% of heap limit\n  \n  /**\n   * Check memory usage and trigger cleanup if needed\n   */\n  checkMemoryPressure(): { pressure: number; shouldCleanup: boolean } {\n    const currentTime = performance.now();\n    let pressure = 0;\n    let shouldCleanup = false;\n    \n    // Check if memory API is available\n    if ('memory' in (performance as any)) {\n      const memInfo = (performance as any).memory;\n      pressure = memInfo.usedJSHeapSize / memInfo.jsHeapSizeLimit;\n      shouldCleanup = pressure > this.memoryPressureThreshold;\n    }\n    \n    // Force cleanup based on time interval\n    if (currentTime - this.lastGCTime > this.gcInterval) {\n      shouldCleanup = true;\n      this.lastGCTime = currentTime;\n    }\n    \n    return { pressure, shouldCleanup };\n  }\n\n  /**\n   * Suggest memory optimization actions\n   */\n  getOptimizationSuggestions(pressure: number): {\n    reduceParticles: boolean;\n    clearCaches: boolean;\n    disableEffects: boolean;\n    simplifyRendering: boolean;\n  } {\n    return {\n      reduceParticles: pressure > 0.7,\n      clearCaches: pressure > 0.8,\n      disableEffects: pressure > 0.75,\n      simplifyRendering: pressure > 0.85\n    };\n  }\n}\n\n/**\n * Animation Frame Controller for Battery Optimization\n */\nexport class AnimationController {\n  private isVisible = true;\n  private targetFPS = 30;\n  private actualInterval = 1000 / 30; // ~33ms\n  private lastFrameTime = 0;\n  private frameBudget = 16.67; // ~60fps budget, but we target lower\n  \n  constructor(targetFPS = 30) {\n    this.setTargetFPS(targetFPS);\n    this.setupVisibilityHandling();\n  }\n\n  /**\n   * Set target FPS and update timing\n   */\n  setTargetFPS(fps: number): void {\n    this.targetFPS = Math.max(10, Math.min(60, fps)); // Clamp between 10-60\n    this.actualInterval = 1000 / this.targetFPS;\n  }\n\n  /**\n   * Check if frame should be rendered\n   */\n  shouldRenderFrame(): boolean {\n    if (!this.isVisible) return false;\n    \n    const currentTime = performance.now();\n    const deltaTime = currentTime - this.lastFrameTime;\n    \n    if (deltaTime >= this.actualInterval) {\n      this.lastFrameTime = currentTime;\n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * Get frame timing info\n   */\n  getFrameTiming(): {\n    targetFPS: number;\n    interval: number;\n    isVisible: boolean;\n    shouldThrottle: boolean;\n  } {\n    return {\n      targetFPS: this.targetFPS,\n      interval: this.actualInterval,\n      isVisible: this.isVisible,\n      shouldThrottle: !this.isVisible || this.targetFPS < 30\n    };\n  }\n\n  private setupVisibilityHandling(): void {\n    // Handle page visibility for battery optimization\n    document.addEventListener('visibilitychange', () => {\n      this.isVisible = !document.hidden;\n      \n      // Reduce FPS when not visible\n      if (!this.isVisible) {\n        this.setTargetFPS(10); // Very low FPS when hidden\n      } else {\n        this.setTargetFPS(30); // Normal FPS when visible\n      }\n    });\n    \n    // Handle focus/blur for additional optimization\n    window.addEventListener('focus', () => {\n      this.isVisible = true;\n      this.setTargetFPS(30);\n    });\n    \n    window.addEventListener('blur', () => {\n      this.setTargetFPS(20); // Reduced but not hidden\n    });\n  }\n}\n\n/**\n * Complete Performance Optimization Suite\n */\nexport class ThemePerformanceManager {\n  private lodManager: LODManager;\n  private culler: FrustumCuller;\n  private batchRenderer: BatchRenderer;\n  private memoryOptimizer: MemoryOptimizer;\n  private animationController: AnimationController;\n  \n  constructor(canvasWidth: number, canvasHeight: number) {\n    this.lodManager = new LODManager();\n    this.culler = new FrustumCuller(canvasWidth, canvasHeight);\n    this.batchRenderer = new BatchRenderer();\n    this.memoryOptimizer = new MemoryOptimizer();\n    this.animationController = new AnimationController();\n  }\n\n  /**\n   * Update all performance systems\n   */\n  update(metrics: PerformanceMetrics, canvasWidth?: number, canvasHeight?: number): {\n    lodSettings: LODSettings;\n    shouldRender: boolean;\n    memoryPressure: number;\n    optimizationActive: boolean;\n  } {\n    // Update LOD based on performance\n    const lodSettings = this.lodManager.updateLOD(metrics);\n    \n    // Update culling bounds if canvas size changed\n    if (canvasWidth && canvasHeight) {\n      this.culler.updateBounds(canvasWidth, canvasHeight);\n    }\n    \n    // Check memory pressure\n    const { pressure, shouldCleanup } = this.memoryOptimizer.checkMemoryPressure();\n    \n    // Check if we should render this frame\n    const shouldRender = this.animationController.shouldRenderFrame() && !this.lodManager.shouldSkipFrame();\n    \n    return {\n      lodSettings,\n      shouldRender,\n      memoryPressure: pressure,\n      optimizationActive: lodSettings.level > 0 || pressure > 0.7 || !shouldRender\n    };\n  }\n\n  /**\n   * Get all performance managers for direct access\n   */\n  getManagers() {\n    return {\n      lod: this.lodManager,\n      culler: this.culler,\n      batchRenderer: this.batchRenderer,\n      memory: this.memoryOptimizer,\n      animation: this.animationController\n    };\n  }\n\n  /**\n   * Get comprehensive performance report\n   */\n  getPerformanceReport(): {\n    lod: LODSettings;\n    culling: any;\n    batching: any;\n    memory: { pressure: number; shouldCleanup: boolean };\n    animation: any;\n  } {\n    const { pressure, shouldCleanup } = this.memoryOptimizer.checkMemoryPressure();\n    \n    return {\n      lod: this.lodManager.getCurrentLOD(),\n      culling: {}, // Will be populated when particles are processed\n      batching: this.batchRenderer.getBatchStats(),\n      memory: { pressure, shouldCleanup },\n      animation: this.animationController.getFrameTiming()\n    };\n  }\n}","/**\n * Base Theme Class\n * \n * Provides common functionality and structure for all voice themes.\n * Themes can extend this class to inherit shared behavior.\n */\n\nimport { IVoiceTheme, VoiceState, PerformanceSettings } from './IVoiceTheme';\nimport { PerformanceMonitor, DeviceCapabilityDetector } from '../utils/performance';\nimport { ThemePerformanceManager, LODSettings } from './PerformanceOptimizations';\nimport { lerp, clamp } from '../utils/math';\n\nexport abstract class BaseTheme implements IVoiceTheme {\n  // Abstract properties that must be implemented\n  abstract readonly id: string;\n  abstract readonly name: string;\n  abstract readonly description: string;\n  abstract readonly category: 'particle' | 'geometric' | 'advanced' | 'artistic';\n  abstract readonly performanceProfile: 'light' | 'medium' | 'heavy';\n\n  // Common state management\n  protected currentState: VoiceState = VoiceState.IDLE;\n  protected targetState: VoiceState = VoiceState.IDLE;\n  protected stateTransition = 0;\n  protected stateTransitionSpeed = 0.1;\n\n  // Mouse/touch interaction\n  protected mouseX = 0;\n  protected mouseY = 0;\n  protected normalizedMouseX = 0; // -1 to 1\n  protected normalizedMouseY = 0; // -1 to 1\n  protected mouseInfluence = 0;\n  protected targetMouseInfluence = 0;\n  protected isHovering = false;\n\n  // Canvas context and dimensions\n  protected context: CanvasRenderingContext2D | null = null;\n  protected canvasWidth = 0;\n  protected canvasHeight = 0;\n  protected centerX = 0;\n  protected centerY = 0;\n\n  // Performance monitoring\n  protected performanceMonitor: PerformanceMonitor;\n  protected performanceManager: ThemePerformanceManager | null = null;\n  protected performanceSettings: PerformanceSettings;\n  protected currentLODSettings: LODSettings | null = null;\n  protected lastFrameTime = 0;\n\n  // Animation timing\n  protected animationTime = 0;\n  protected deltaTimeAccumulator = 0;\n\n  constructor() {\n    this.performanceMonitor = new PerformanceMonitor();\n    \n    // Default performance settings (will be overridden by capability detection)\n    this.performanceSettings = {\n      targetFPS: 30,\n      maxParticles: 100,\n      enableEffects: true,\n      enableGlow: false,\n      qualityLevel: 'medium'\n    };\n\n    this.initializePerformanceCallbacks();\n  }\n\n  /**\n   * Initialize the theme with canvas context and dimensions\n   */\n  init(context: CanvasRenderingContext2D, width: number, height: number): void {\n    this.context = context;\n    this.updateDimensions(width, height);\n    this.initializePerformanceManager();\n    this.setupPerformanceSettings();\n    this.onInit();\n  }\n\n  /**\n   * Update canvas dimensions\n   */\n  protected updateDimensions(width: number, height: number): void {\n    this.canvasWidth = width;\n    this.canvasHeight = height;\n    this.centerX = width / 2;\n    this.centerY = height / 2;\n    \n    // Update performance manager with new dimensions\n    if (this.performanceManager) {\n      this.performanceManager.getManagers().culler.updateBounds(width, height);\n    }\n  }\n\n  /**\n   * Main drawing function called every frame\n   */\n  draw(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void {\n    // Update performance monitoring\n    const metrics = this.performanceMonitor.update();\n    \n    // Update performance manager and check if we should render\n    if (this.performanceManager) {\n      const perfUpdate = this.performanceManager.update(metrics, displayWidth, displayHeight);\n      this.currentLODSettings = perfUpdate.lodSettings;\n      \n      // Skip rendering if performance manager suggests it\n      if (!perfUpdate.shouldRender) {\n        return;\n      }\n    }\n    \n    // Update dimensions if changed\n    if (this.canvasWidth !== displayWidth || this.canvasHeight !== displayHeight) {\n      this.updateDimensions(displayWidth, displayHeight);\n    }\n\n    // Update animation timing\n    this.updateTiming(deltaTime);\n\n    // Update state transitions\n    this.updateStateTransition();\n\n    // Update mouse influence\n    this.updateMouseInfluence();\n\n    // Clear canvas with theme-specific background\n    this.clearCanvas(context, displayWidth, displayHeight);\n\n    // Delegate to theme-specific drawing\n    this.onDraw(context, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n\n    // Draw performance overlay if enabled\n    if (this.shouldShowPerformanceOverlay()) {\n      this.drawPerformanceOverlay(context, metrics);\n    }\n  }\n\n  /**\n   * Handle state changes with smooth transitions\n   */\n  onUserSpeaking(): void {\n    this.setTargetState(VoiceState.USER_SPEAKING);\n    this.onStateChange(VoiceState.USER_SPEAKING);\n  }\n\n  onProcessing(): void {\n    this.setTargetState(VoiceState.PROCESSING);\n    this.onStateChange(VoiceState.PROCESSING);\n  }\n\n  onAiSpeaking(): void {\n    this.setTargetState(VoiceState.AI_SPEAKING);\n    this.onStateChange(VoiceState.AI_SPEAKING);\n  }\n\n  reset(): void {\n    this.setTargetState(VoiceState.IDLE);\n    this.onStateChange(VoiceState.IDLE);\n    this.onReset();\n  }\n\n  /**\n   * Handle mouse/touch position updates\n   */\n  setMousePosition(x: number, y: number, canvasWidth: number, canvasHeight: number): void {\n    this.mouseX = x;\n    this.mouseY = y;\n    this.normalizedMouseX = (x / canvasWidth) * 2 - 1; // -1 to 1\n    this.normalizedMouseY = (y / canvasHeight) * 2 - 1; // -1 to 1\n    this.targetMouseInfluence = this.isHovering ? 1 : 0.3;\n    this.onMouseMove(x, y, this.normalizedMouseX, this.normalizedMouseY);\n  }\n\n  /**\n   * Handle hover state changes\n   */\n  setHovering(hovering: boolean): void {\n    this.isHovering = hovering;\n    this.targetMouseInfluence = hovering ? 1 : 0;\n    this.onHoverChange(hovering);\n  }\n\n  /**\n   * Cleanup resources\n   */\n  dispose(): void {\n    this.onDispose();\n  }\n\n  /**\n   * Get performance metrics\n   */\n  getPerformanceMetrics() {\n    const baseMetrics = this.performanceMonitor.getCurrentMetrics();\n    const themeMetrics = this.getThemeSpecificMetrics();\n    return { ...baseMetrics, ...themeMetrics };\n  }\n\n  // Protected methods for subclasses to override\n\n  /**\n   * Theme-specific initialization\n   */\n  protected onInit(): void {}\n\n  /**\n   * Theme-specific drawing logic\n   */\n  protected abstract onDraw(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number,\n    deltaTime: number\n  ): void;\n\n  /**\n   * Called when state changes\n   */\n  protected onStateChange(newState: VoiceState): void {}\n\n  /**\n   * Called when reset\n   */\n  protected onReset(): void {}\n\n  /**\n   * Called when mouse moves\n   */\n  protected onMouseMove(x: number, y: number, normalizedX: number, normalizedY: number): void {}\n\n  /**\n   * Called when hover state changes\n   */\n  protected onHoverChange(hovering: boolean): void {}\n\n  /**\n   * Called when disposing\n   */\n  protected onDispose(): void {}\n\n  /**\n   * Get theme-specific performance metrics\n   */\n  protected getThemeSpecificMetrics(): Record<string, any> {\n    return {};\n  }\n\n  /**\n   * Clear canvas with theme-specific background\n   */\n  protected clearCanvas(context: CanvasRenderingContext2D, width: number, height: number): void {\n    context.clearRect(0, 0, width, height);\n  }\n\n  // Private helper methods\n\n  private async setupPerformanceSettings(): Promise<void> {\n    try {\n      const detector = DeviceCapabilityDetector.getInstance();\n      const capabilities = await detector.detectCapabilities();\n      \n      // Adjust performance settings based on device capabilities\n      if (capabilities.performanceLevel === 'low' || capabilities.isLowPowerDevice) {\n        this.performanceSettings = {\n          targetFPS: 24,\n          maxParticles: this.getOptimalParticleCount('low'),\n          enableEffects: false,\n          enableGlow: false,\n          qualityLevel: 'low'\n        };\n      } else if (capabilities.performanceLevel === 'medium') {\n        this.performanceSettings = {\n          targetFPS: 30,\n          maxParticles: this.getOptimalParticleCount('medium'),\n          enableEffects: true,\n          enableGlow: false,\n          qualityLevel: 'medium'\n        };\n      } else {\n        this.performanceSettings = {\n          targetFPS: 60,\n          maxParticles: this.getOptimalParticleCount('high'),\n          enableEffects: true,\n          enableGlow: true,\n          qualityLevel: 'high'\n        };\n      }\n    } catch (error) {\n      console.warn('Failed to detect device capabilities, using default settings:', error);\n    }\n  }\n\n  private initializePerformanceManager(): void {\n    this.performanceManager = new ThemePerformanceManager(this.canvasWidth, this.canvasHeight);\n  }\n\n  private getOptimalParticleCount(quality: 'low' | 'medium' | 'high'): number {\n    const baseCount = {\n      light: { low: 30, medium: 80, high: 150 },\n      medium: { low: 50, medium: 120, high: 250 },\n      heavy: { low: 20, medium: 60, high: 120 }\n    };\n\n    return baseCount[this.performanceProfile][quality];\n  }\n\n  private initializePerformanceCallbacks(): void {\n    this.performanceMonitor.setCallbacks({\n      onPerformanceWarning: (metrics) => {\n        console.warn(`[${this.id}] Performance warning:`, metrics);\n        this.adjustPerformanceSettings(0.8);\n      },\n      onPerformanceCritical: (metrics) => {\n        console.error(`[${this.id}] Critical performance:`, metrics);\n        this.adjustPerformanceSettings(0.6);\n      }\n    });\n  }\n\n  private adjustPerformanceSettings(factor: number): void {\n    this.performanceSettings.maxParticles = Math.floor(this.performanceSettings.maxParticles * factor);\n    this.performanceSettings.enableEffects = false;\n    this.performanceSettings.enableGlow = false;\n  }\n\n  private setTargetState(state: VoiceState): void {\n    if (this.targetState !== state) {\n      this.targetState = state;\n      this.stateTransition = 0;\n    }\n  }\n\n  private updateStateTransition(): void {\n    if (this.currentState !== this.targetState) {\n      this.stateTransition += this.stateTransitionSpeed;\n      if (this.stateTransition >= 1) {\n        this.currentState = this.targetState;\n        this.stateTransition = 1;\n      }\n    }\n  }\n\n  private updateMouseInfluence(): void {\n    this.mouseInfluence = lerp(this.mouseInfluence, this.targetMouseInfluence, 0.1);\n  }\n\n  private updateTiming(deltaTime: number): void {\n    this.deltaTimeAccumulator += deltaTime;\n    this.animationTime += deltaTime;\n  }\n\n  private shouldShowPerformanceOverlay(): boolean {\n    // Only show in development or when explicitly enabled\n    return process.env.NODE_ENV === 'development' && \n           localStorage.getItem('voice-performance-overlay') === 'true';\n  }\n\n  private drawPerformanceOverlay(context: CanvasRenderingContext2D, metrics: any): void {\n    context.save();\n    context.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    context.fillRect(10, 10, 200, 80);\n    context.fillStyle = 'white';\n    context.font = '12px monospace';\n    context.fillText(`Theme: ${this.name}`, 15, 25);\n    context.fillText(`FPS: ${Math.round(metrics.fps)}`, 15, 40);\n    context.fillText(`Frame: ${Math.round(metrics.frameTime)}ms`, 15, 55);\n    context.fillText(`State: ${this.currentState}`, 15, 70);\n    context.fillText(`Mouse: ${Math.round(this.mouseInfluence * 100)}%`, 15, 85);\n    context.restore();\n  }\n\n  // Protected utility methods for subclasses\n\n  /**\n   * Get color interpolated between states\n   */\n  protected getStateColor(idleColor: string, activeColor: string): string {\n    if (this.stateTransition === 0) return idleColor;\n    if (this.stateTransition === 1) return activeColor;\n    \n    // Simple color interpolation (for more complex colors, use Color class)\n    return activeColor; // Simplified for now\n  }\n\n  /**\n   * Get value interpolated by mouse influence\n   */\n  protected getMouseInfluencedValue(baseValue: number, influencedValue: number): number {\n    return lerp(baseValue, influencedValue, this.mouseInfluence);\n  }\n\n  /**\n   * Check if effects should be enabled based on performance settings\n   */\n  protected shouldEnableEffects(): boolean {\n    if (this.currentLODSettings) {\n      return !this.currentLODSettings.effectsDisabled;\n    }\n    return this.performanceSettings.enableEffects;\n  }\n\n  /**\n   * Check if glow effects should be enabled\n   */\n  protected shouldEnableGlow(): boolean {\n    if (this.currentLODSettings) {\n      return !this.currentLODSettings.glowDisabled;\n    }\n    return this.performanceSettings.enableGlow;\n  }\n\n  /**\n   * Get maximum particle count for performance\n   */\n  protected getMaxParticles(): number {\n    const baseMax = this.performanceSettings.maxParticles;\n    if (this.currentLODSettings) {\n      return Math.floor(baseMax * (1 - this.currentLODSettings.particleReduction));\n    }\n    return baseMax;\n  }\n\n  /**\n   * Get current LOD level for theme-specific optimizations\n   */\n  protected getCurrentLODLevel(): number {\n    return this.currentLODSettings?.level || 1;\n  }\n\n  /**\n   * Check if simplified rendering should be used\n   */\n  protected shouldUseSimplifiedRendering(): boolean {\n    return this.currentLODSettings?.simplifiedRendering || false;\n  }\n\n  /**\n   * Get performance managers for advanced optimizations\n   */\n  protected getPerformanceManagers() {\n    return this.performanceManager?.getManagers() || null;\n  }\n\n  /**\n   * Check if a particle is visible (for culling)\n   */\n  protected isParticleVisible(x: number, y: number, z = 0, size = 0): boolean {\n    const managers = this.getPerformanceManagers();\n    if (managers?.culler) {\n      return managers.culler.isVisible(x, y, z, size);\n    }\n    return true; // No culling available, assume visible\n  }\n\n  /**\n   * Filter particles to only visible ones\n   */\n  protected cullParticles<T extends { x: number; y: number; z?: number; size?: number }>(particles: T[]): T[] {\n    const managers = this.getPerformanceManagers();\n    if (managers?.culler) {\n      return managers.culler.cullParticles(particles);\n    }\n    return particles; // No culling available, return all\n  }\n\n  /**\n   * Add particle to batch renderer for optimized drawing\n   */\n  protected addToBatch(\n    color: string,\n    x: number,\n    y: number, \n    size: number,\n    alpha: number,\n    glowEnabled = false,\n    effectsEnabled = false\n  ): void {\n    const managers = this.getPerformanceManagers();\n    if (managers?.batchRenderer) {\n      managers.batchRenderer.addToBatch(color, x, y, size, alpha, glowEnabled, effectsEnabled);\n    }\n  }\n\n  /**\n   * Render all batches (call at end of draw)\n   */\n  protected renderBatches(context: CanvasRenderingContext2D): void {\n    const managers = this.getPerformanceManagers();\n    if (managers?.batchRenderer && this.currentLODSettings) {\n      managers.batchRenderer.renderBatches(context, this.currentLODSettings);\n      managers.batchRenderer.clearBatches();\n    }\n  }\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 70396;\nmodule.exports = webpackEmptyContext;","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { AgentSettings } from '@/types';\n\ninterface ChatSettingsState {\n  // Current chat settings per agent\n  settings: Record<number, Partial<AgentSettings>>;\n  \n  // Get settings for a specific agent\n  getSettings: (agentId: number) => Partial<AgentSettings>;\n  \n  // Update settings for a specific agent\n  updateSettings: (agentId: number, updates: Partial<AgentSettings>) => void;\n  \n  // Clear settings for an agent\n  clearSettings: (agentId: number) => void;\n}\n\nexport const useChatSettingsStore = create<ChatSettingsState>()(\n  persist(\n    (set, get) => ({\n      settings: {},\n\n      getSettings: (agentId: number) => {\n        const settings = get().settings[agentId] || {};\n        return {\n          response_source: settings.response_source || 'own_content',\n          chatbot_model: settings.chatbot_model || 'gpt-4-o',\n          custom_persona: settings.custom_persona || 'professional',\n          agent_capability: settings.agent_capability || 'optimal-choice',\n          ...settings,\n        };\n      },\n\n      updateSettings: (agentId: number, updates: Partial<AgentSettings>) => {\n        set((state) => ({\n          settings: {\n            ...state.settings,\n            [agentId]: {\n              ...state.settings[agentId],\n              ...updates,\n            },\n          },\n        }));\n      },\n\n      clearSettings: (agentId: number) => {\n        set((state) => {\n          const newSettings = { ...state.settings };\n          delete newSettings[agentId];\n          return { settings: newSettings };\n        });\n      },\n    }),\n    {\n      name: 'customgpt-chat-settings',\n    }\n  )\n);","/**\n * Demo Mode Usage Limits Constants\n * \n * Central configuration for all demo mode restrictions and limits.\n * Modify these values to adjust demo mode behavior.\n */\n\n// Free Trial Mode Limits (No API Key)\nexport const FREE_TRIAL_LIMITS = {\n  // Resource Limits\n  MAX_PROJECTS: 1,\n  MAX_CONVERSATIONS: 2,\n  MAX_MESSAGES_PER_CONVERSATION: 2,\n  \n  // Time Limits (in milliseconds)\n  SESSION_DURATION: 10 * 60 * 1000, // 10 minutes\n  SESSION_WARNING_TIME: 5 * 60 * 1000, // Show warning 5 minutes before expiry\n  \n  // Rate Limits\n  MAX_REQUESTS_PER_MINUTE: 10,\n  COOLDOWN_BETWEEN_MESSAGES: 2000, // 2 seconds between messages\n  \n  // Feature Restrictions\n  ALLOW_FILE_UPLOAD: false,\n  ALLOW_SITEMAP_UPLOAD: false,\n  ALLOW_DELETE_OPERATIONS: false,\n  ALLOW_PROJECT_SETTINGS: false,\n  ALLOW_VOICE_MODE: false,\n  \n  // UI Messages\n  SESSION_EXPIRY_WARNING: \"Your free trial session will expire in 5 minutes\",\n  SESSION_EXPIRED_MESSAGE: \"Your free trial session has expired. Please refresh to start a new session.\",\n  LIMIT_REACHED_MESSAGE: {\n    projects: \"Free trial limit reached: Maximum 1 project allowed\",\n    conversations: \"Free trial limit reached: Maximum 2 conversations allowed\",\n    messages: \"Free trial limit reached: Maximum 2 messages per conversation\"\n  }\n} as const;\n\n// User API Key Demo Mode Limits\nexport const USER_DEMO_LIMITS = {\n  // Time Limits (in milliseconds)\n  SESSION_DURATION: 120 * 60 * 1000, // 120 minutes (2 hours)\n  SESSION_WARNING_TIME: 10 * 60 * 1000, // Show warning 10 minutes before expiry\n  \n  // No resource limits for user API key mode\n  MAX_PROJECTS: Infinity,\n  MAX_CONVERSATIONS: Infinity,\n  MAX_MESSAGES_PER_CONVERSATION: Infinity,\n  \n  // Features all enabled\n  ALLOW_FILE_UPLOAD: true,\n  ALLOW_SITEMAP_UPLOAD: true,\n  ALLOW_DELETE_OPERATIONS: true,\n  ALLOW_PROJECT_SETTINGS: true,\n  ALLOW_VOICE_MODE: true,\n  \n  // UI Messages\n  SESSION_EXPIRY_WARNING: \"Your demo session will expire in 10 minutes\",\n  SESSION_EXPIRED_MESSAGE: \"Your demo session has expired. Please refresh to start a new session.\"\n} as const;\n\n// Session Storage Keys\nexport const DEMO_STORAGE_KEYS = {\n  DEPLOYMENT_MODE: 'customgpt.deploymentMode',\n  FREE_TRIAL_MODE: 'customgpt.freeTrialMode',\n  FREE_TRIAL_SESSION: 'customgpt.freeTrialSession',\n  DEMO_SESSION: 'customgpt.demoSession',\n  API_KEY: 'customgpt.apiKey',\n  OPENAI_KEY: 'customgpt.openAIApiKey',\n  SESSION_START: 'customgpt.sessionStart',\n  AUTO_DETECTED: 'customgpt.autoDetected'\n} as const;\n\n// API Headers\nexport const DEMO_API_HEADERS = {\n  DEPLOYMENT_MODE: 'X-Deployment-Mode',\n  API_KEY: 'X-CustomGPT-API-Key',\n  SESSION_ID: 'X-Demo-Session-ID',\n  FREE_TRIAL: 'X-Free-Trial-Mode'\n} as const;\n\n// Type definitions for session data\nexport interface FreeTrialSession {\n  sessionId: string;\n  startTime: number;\n  projectCount: number;\n  conversationCount: number;\n  messageCount: number;\n  lastActivity: number;\n}\n\nexport interface DemoSession {\n  sessionId: string;\n  startTime: number;\n  lastActivity: number;\n}\n\n// Helper functions\nexport function isSessionExpired(startTime: number, duration: number): boolean {\n  return Date.now() - startTime > duration;\n}\n\nexport function getTimeRemaining(startTime: number, duration: number): number {\n  const elapsed = Date.now() - startTime;\n  const remaining = duration - elapsed;\n  return Math.max(0, remaining);\n}\n\nexport function shouldShowWarning(startTime: number, duration: number, warningTime: number): boolean {\n  const remaining = getTimeRemaining(startTime, duration);\n  return remaining > 0 && remaining <= warningTime;\n}","/**\n * Usage Analytics Tracker\n * \n * Tracks usage across different deployment modes and sends analytics\n * to your backend for monitoring and analysis.\n */\n\nimport { DEMO_STORAGE_KEYS } from '@/lib/constants/demo-limits';\n\nexport interface UsageEvent {\n  // Event identification\n  eventType: 'api_call' | 'session_start' | 'session_end' | 'limit_reached' | 'error';\n  eventName: string;\n  timestamp: number;\n  \n  // Deployment information\n  deploymentMode: 'production' | 'demo';\n  demoType?: 'free-trial' | 'user-api-key' | 'none';\n  \n  // Session information\n  sessionId?: string;\n  userId?: string; // If available from your auth system\n  \n  // Request details\n  endpoint?: string;\n  method?: string;\n  statusCode?: number;\n  \n  // Usage metrics\n  projectCount?: number;\n  conversationCount?: number;\n  messageCount?: number;\n  \n  // Client information\n  clientVersion?: string;\n  userAgent?: string;\n  referrer?: string;\n  \n  // Additional metadata\n  metadata?: Record<string, any>;\n}\n\nclass UsageTracker {\n  private static instance: UsageTracker;\n  private analyticsEndpoint: string = process.env.NEXT_PUBLIC_ANALYTICS_ENDPOINT || '/api/analytics';\n  private batchSize: number = 10;\n  private flushInterval: number = 30000; // 30 seconds\n  private eventQueue: UsageEvent[] = [];\n  private flushTimer: NodeJS.Timeout | null = null;\n\n  private constructor() {\n    // Start flush timer\n    this.startFlushTimer();\n  }\n\n  static getInstance(): UsageTracker {\n    if (!UsageTracker.instance) {\n      UsageTracker.instance = new UsageTracker();\n    }\n    return UsageTracker.instance;\n  }\n\n  /**\n   * Track a usage event\n   */\n  track(event: Partial<UsageEvent>): void {\n    const fullEvent: UsageEvent = {\n      eventType: event.eventType || 'api_call',\n      eventName: event.eventName || 'unknown',\n      timestamp: Date.now(),\n      deploymentMode: this.getDeploymentMode(),\n      demoType: this.getDemoType(),\n      sessionId: this.getSessionId(),\n      clientVersion: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',\n      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined,\n      referrer: typeof window !== 'undefined' ? document.referrer : undefined,\n      ...event\n    };\n\n    this.eventQueue.push(fullEvent);\n\n    // Flush if batch size reached\n    if (this.eventQueue.length >= this.batchSize) {\n      this.flush();\n    }\n  }\n\n  /**\n   * Track API call\n   */\n  trackApiCall(endpoint: string, method: string, statusCode?: number): void {\n    this.track({\n      eventType: 'api_call',\n      eventName: `${method} ${endpoint}`,\n      endpoint,\n      method,\n      statusCode\n    });\n  }\n\n  /**\n   * Track session start\n   */\n  trackSessionStart(): void {\n    this.track({\n      eventType: 'session_start',\n      eventName: 'session_started',\n      metadata: {\n        mode: this.getDemoType() || 'production'\n      }\n    });\n  }\n\n  /**\n   * Track session end\n   */\n  trackSessionEnd(reason?: string): void {\n    this.track({\n      eventType: 'session_end',\n      eventName: 'session_ended',\n      metadata: {\n        reason,\n        mode: this.getDemoType() || 'production'\n      }\n    });\n  }\n\n  /**\n   * Track limit reached\n   */\n  trackLimitReached(limitType: 'projects' | 'conversations' | 'messages'): void {\n    this.track({\n      eventType: 'limit_reached',\n      eventName: `${limitType}_limit_reached`,\n      metadata: {\n        limitType\n      }\n    });\n  }\n\n  /**\n   * Track error\n   */\n  trackError(error: string, context?: any): void {\n    this.track({\n      eventType: 'error',\n      eventName: 'error_occurred',\n      metadata: {\n        error,\n        context\n      }\n    });\n  }\n\n  /**\n   * Get deployment mode\n   */\n  private getDeploymentMode(): 'production' | 'demo' {\n    if (typeof window === 'undefined') return 'production';\n    \n    const mode = localStorage.getItem(DEMO_STORAGE_KEYS.DEPLOYMENT_MODE);\n    return mode === 'demo' ? 'demo' : 'production';\n  }\n\n  /**\n   * Get demo type\n   */\n  private getDemoType(): 'free-trial' | 'user-api-key' | 'none' {\n    if (typeof window === 'undefined') return 'none';\n    \n    const deploymentMode = localStorage.getItem(DEMO_STORAGE_KEYS.DEPLOYMENT_MODE);\n    if (deploymentMode !== 'demo') return 'none';\n    \n    const isFreeTrialMode = localStorage.getItem(DEMO_STORAGE_KEYS.FREE_TRIAL_MODE) === 'true';\n    return isFreeTrialMode ? 'free-trial' : 'user-api-key';\n  }\n\n  /**\n   * Get session ID\n   */\n  private getSessionId(): string | undefined {\n    if (typeof window === 'undefined') return undefined;\n    \n    // Try to get from session storage (for free trial)\n    const sessionData = sessionStorage.getItem(DEMO_STORAGE_KEYS.FREE_TRIAL_SESSION);\n    if (sessionData) {\n      try {\n        const session = JSON.parse(sessionData);\n        return session.sessionId;\n      } catch (e) {\n        // Ignore parse errors\n      }\n    }\n    \n    // Try to get from regular demo session\n    const demoSession = sessionStorage.getItem(DEMO_STORAGE_KEYS.DEMO_SESSION);\n    if (demoSession) {\n      try {\n        const session = JSON.parse(demoSession);\n        return session.sessionId;\n      } catch (e) {\n        // Ignore parse errors\n      }\n    }\n    \n    return undefined;\n  }\n\n  /**\n   * Start flush timer\n   */\n  private startFlushTimer(): void {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n    }\n    \n    this.flushTimer = setInterval(() => {\n      if (this.eventQueue.length > 0) {\n        this.flush();\n      }\n    }, this.flushInterval);\n  }\n\n  /**\n   * Flush events to backend\n   */\n  private async flush(): Promise<void> {\n    if (this.eventQueue.length === 0) return;\n    \n    const events = [...this.eventQueue];\n    this.eventQueue = [];\n    \n    try {\n      // If you have a custom analytics endpoint, send the data there\n      if (process.env.NEXT_PUBLIC_ANALYTICS_ENDPOINT) {\n        await fetch(this.analyticsEndpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ events }),\n        });\n      } else {\n        // Otherwise, just log to console for now\n        console.log('[UsageTracker] Analytics events:', events);\n      }\n    } catch (error) {\n      console.error('[UsageTracker] Failed to send analytics:', error);\n      // Re-queue events on failure\n      this.eventQueue.unshift(...events);\n    }\n  }\n\n  /**\n   * Force flush all pending events\n   */\n  async forceFlush(): Promise<void> {\n    await this.flush();\n  }\n}\n\n// Export singleton instance\nexport const usageTracker = UsageTracker.getInstance();\n\n// Add event listeners for automatic tracking\nif (typeof window !== 'undefined') {\n  // Track page visibility changes\n  document.addEventListener('visibilitychange', () => {\n    if (document.hidden) {\n      usageTracker.forceFlush();\n    }\n  });\n  \n  // Track before unload\n  window.addEventListener('beforeunload', () => {\n    usageTracker.forceFlush();\n  });\n}","/**\n * Error Messages for Demo Mode\n */\n\nexport const DEMO_ERROR_MESSAGES = {\n  RATE_LIMIT: {\n    title: 'Rate Limit Reached',\n    message: 'The free trial is experiencing high demand. Please wait a moment and try again.',\n    retryAfter: 60, // seconds\n  },\n  SESSION_EXPIRED: {\n    title: 'Session Expired',\n    message: 'Your free trial session has expired. Please refresh the page to start a new session.',\n  },\n  LIMIT_REACHED: {\n    title: 'Limit Reached',\n    message: 'You have reached the maximum allowed for this free trial session.',\n  },\n  API_ERROR: {\n    title: 'Service Error',\n    message: 'Unable to process your request. Please try again later.',\n  },\n};\n\nexport function getErrorMessage(status: number, isFreeTrialMode: boolean): { title: string; message: string } {\n  if (status === 429 && isFreeTrialMode) {\n    return DEMO_ERROR_MESSAGES.RATE_LIMIT;\n  }\n  \n  if (status === 403 && isFreeTrialMode) {\n    return DEMO_ERROR_MESSAGES.LIMIT_REACHED;\n  }\n  \n  if (status >= 500) {\n    return DEMO_ERROR_MESSAGES.API_ERROR;\n  }\n  \n  return {\n    title: 'Error',\n    message: 'An unexpected error occurred. Please try again.',\n  };\n}","/**\n * Proxy API Client\n * \n * This client communicates with our Next.js API routes which proxy\n * requests to CustomGPT. The API key is stored securely on the server.\n */\n\nimport type {\n  Agent,\n  AgentStats,\n  AgentSettings,\n  Conversation,\n  ChatMessage,\n  Citation,\n  APIResponse,\n  AgentsResponse,\n  ConversationsResponse,\n  MessagesResponse,\n  MessageResponse,\n  CitationResponse,\n  StreamChunk,\n  LimitsResponse,\n  UserProfile,\n  CustomerIntelligenceResponse,\n} from '@/types';\nimport type { APIMessageResponse } from '@/types/message.types';\nimport type { \n  PagesListResponse, \n  DeletePageResponse, \n  ReindexPageResponse, \n  PagesQueryParams,\n  PageMetadata,\n  PageMetadataResponse\n} from '@/types/pages.types';\nimport type { \n  TrafficReportResponse, \n  QueriesReportResponse, \n  ConversationsReportResponse, \n  AnalysisReportResponse,\n  AnalysisInterval\n} from '@/types/reports.types';\nimport type { \n  SourcesListResponse, \n  SourceResponse, \n  DeleteSourceResponse,\n  UpdateSourceSettingsRequest,\n  CreateSitemapSourceRequest\n} from '@/types/sources.types';\nimport { parseStreamChunk, retryWithBackoff } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\nimport { usageTracker } from '@/lib/analytics/usage-tracker';\nimport { getErrorMessage } from '@/lib/constants/error-messages';\n\ninterface UserProfileResponse {\n  status: 'success' | 'error';\n  data: UserProfile;\n}\n\n/**\n * ProxyCustomGPTClient\n * \n * Client that communicates with our server-side proxy endpoints.\n * No API key is needed client-side as it's stored on the server.\n */\nexport class ProxyCustomGPTClient {\n  private baseURL: string = '/api/proxy';\n  private timeout: number = 30000;\n  private abortControllers: Map<string, AbortController> = new Map();\n  private isDemoMode: boolean = false;\n  private demoApiKey: string | null = null;\n\n  constructor() {\n    // Demo mode is determined at runtime from localStorage\n    if (typeof window !== 'undefined') {\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode');\n      this.isDemoMode = deploymentMode === 'demo';\n      \n      // Check if there's a global API URL configuration for widgets\n      const globalApiUrl = (window as any).__customgpt_api_url;\n      if (globalApiUrl) {\n        this.baseURL = `${globalApiUrl}/api/proxy`;\n      }\n    }\n    \n    logger.info('PROXY_CLIENT', 'Proxy API Client initialized', {\n      baseURL: this.baseURL,\n      timeout: this.timeout,\n      isDemoMode: this.isDemoMode,\n    });\n  }\n  \n  /**\n   * Set the base API URL (for widget usage)\n   */\n  public setApiUrl(apiUrl: string) {\n    this.baseURL = `${apiUrl}/api/proxy`;\n    logger.info('PROXY_CLIENT', 'API URL updated', { baseURL: this.baseURL });\n  }\n  \n  /**\n   * Set demo mode API key\n   */\n  public setDemoApiKey(apiKey: string | null) {\n    this.demoApiKey = apiKey;\n  }\n\n  /**\n   * Make a request to the proxy API\n   */\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    const requestId = `${options.method || 'GET'}-${endpoint}-${Date.now()}`;\n    \n    logger.apiRequest(endpoint, options.method || 'GET', options.body);\n\n    try {\n      const controller = new AbortController();\n      this.abortControllers.set(requestId, controller);\n\n      const timeoutId = setTimeout(() => {\n        controller.abort();\n      }, this.timeout);\n\n      // Don't set Content-Type for FormData - let browser set it with boundary\n      const isFormData = options.body instanceof FormData;\n      const baseHeaders: Record<string, string> = {\n        ...(options.headers as Record<string, string> || {})\n      };\n      \n      // Add deployment mode header\n      const deploymentMode = typeof window !== 'undefined' \n        ? localStorage.getItem('customgpt.deploymentMode') || 'production'\n        : 'production';\n      baseHeaders['X-Deployment-Mode'] = deploymentMode;\n      \n      // Check if free trial mode\n      const isFreeTrialMode = typeof window !== 'undefined' \n        ? localStorage.getItem('customgpt.freeTrialMode') === 'true'\n        : false;\n      \n      if (isFreeTrialMode) {\n        baseHeaders['X-Free-Trial-Mode'] = 'true';\n        \n        // Add session ID from session storage\n        const sessionData = sessionStorage.getItem('customgpt.freeTrialSession');\n        if (sessionData) {\n          try {\n            const session = JSON.parse(sessionData);\n            if (session.sessionId) {\n              baseHeaders['X-Demo-Session-ID'] = session.sessionId;\n            }\n          } catch (e) {\n            console.error('[ProxyClient] Failed to parse session data:', e);\n          }\n        }\n        \n        console.log('[ProxyClient] Free trial mode - using server-side demo key');\n      } else if (deploymentMode === 'demo' && this.demoApiKey) {\n        // Add demo mode API key if available\n        baseHeaders['X-CustomGPT-API-Key'] = this.demoApiKey;\n        console.log('[ProxyClient] Added demo API key to request headers');\n      } else if (deploymentMode === 'demo' && !this.demoApiKey) {\n        console.warn('[ProxyClient] Demo mode but no API key available for request');\n      }\n      \n      const headers: HeadersInit = isFormData \n        ? baseHeaders\n        : { \n            'Content-Type': 'application/json',\n            ...baseHeaders\n          };\n      \n      const response = await fetch(url, {\n        ...options,\n        headers,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n      this.abortControllers.delete(requestId);\n\n      // Check if response has content before trying to parse JSON\n      let responseData;\n      const contentLength = response.headers.get('content-length');\n      const contentType = response.headers.get('content-type');\n      \n      if (contentLength === '0' || (!contentType?.includes('application/json') && response.status === 200)) {\n        // Empty response or non-JSON success response\n        responseData = { status: 'success', data: { updated: true } };\n      } else {\n        try {\n          const text = await response.text();\n          if (text.trim() === '') {\n            // Empty response body\n            responseData = { status: 'success', data: { updated: true } };\n          } else {\n            responseData = JSON.parse(text);\n          }\n        } catch (jsonError) {\n          // Failed to parse JSON, but response was successful\n          if (response.ok) {\n            responseData = { status: 'success', data: { updated: true } };\n          } else {\n            throw new Error(`Failed to parse response: ${jsonError}`);\n          }\n        }\n      }\n\n      // Track API call\n      usageTracker.trackApiCall(endpoint, options.method || 'GET', response.status);\n\n      if (!response.ok) {\n        // Track error\n        usageTracker.trackError(`API Error: ${response.status}`, {\n          endpoint,\n          method: options.method || 'GET',\n          error: responseData.error\n        });\n        \n        // Get user-friendly error message for demo mode\n        const isFreeTrialMode = baseHeaders['X-Free-Trial-Mode'] === 'true';\n        const errorInfo = getErrorMessage(response.status, isFreeTrialMode);\n        \n        throw {\n          message: responseData.error || errorInfo.message,\n          status: response.status,\n          data: responseData,\n          title: errorInfo.title,\n          isFreeTrialError: isFreeTrialMode && response.status === 429,\n        };\n      }\n\n      logger.apiResponse(endpoint, response.status, responseData);\n      return responseData;\n    } catch (error: any) {\n      this.abortControllers.delete(requestId);\n      \n      if (error.name === 'AbortError') {\n        logger.apiError(endpoint, { message: 'Request timeout', code: 'TIMEOUT' });\n        throw new Error('Request timeout');\n      }\n\n      logger.apiError(endpoint, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Make a streaming request to the proxy API\n   */\n  private async streamRequest(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ReadableStream<Uint8Array>> {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    logger.apiRequest(endpoint, 'POST-STREAM', options.body);\n\n    // Build headers with demo mode support\n    const baseHeaders: Record<string, string> = {\n      'Content-Type': 'application/json',\n      'Accept': 'text/event-stream',\n      ...(options.headers as Record<string, string> || {})\n    };\n    \n    // Add deployment mode header\n    const deploymentMode = typeof window !== 'undefined' \n      ? localStorage.getItem('customgpt.deploymentMode') || 'production'\n      : 'production';\n    baseHeaders['X-Deployment-Mode'] = deploymentMode;\n    \n    // Check if free trial mode\n    const isFreeTrialMode = typeof window !== 'undefined' \n      ? localStorage.getItem('customgpt.freeTrialMode') === 'true'\n      : false;\n    \n    if (isFreeTrialMode) {\n      baseHeaders['X-Free-Trial-Mode'] = 'true';\n      \n      // Add session ID from session storage\n      const sessionData = sessionStorage.getItem('customgpt.freeTrialSession');\n      if (sessionData) {\n        try {\n          const session = JSON.parse(sessionData);\n          if (session.sessionId) {\n            baseHeaders['X-Demo-Session-ID'] = session.sessionId;\n          }\n        } catch (e) {\n          console.error('[ProxyClient] Failed to parse session data:', e);\n        }\n      }\n      \n      console.log('[ProxyClient] Free trial mode - using server-side demo key for streaming');\n    } else if (deploymentMode === 'demo' && this.demoApiKey) {\n      // Add demo mode API key if available\n      baseHeaders['X-CustomGPT-API-Key'] = this.demoApiKey;\n      console.log('[ProxyClient] Added demo API key to streaming request headers');\n    } else if (deploymentMode === 'demo' && !this.demoApiKey) {\n      console.warn('[ProxyClient] Demo mode but no API key available for streaming request');\n    }\n\n    const response = await fetch(url, {\n      ...options,\n      headers: baseHeaders,\n    });\n\n    if (!response.ok) {\n      let errorMessage = `Stream request failed: ${response.status}`;\n      try {\n        const errorText = await response.text();\n        const errorData = JSON.parse(errorText);\n        errorMessage = errorData.error || errorData.message || errorMessage;\n      } catch {\n        // If not JSON, use the status message\n      }\n      logger.apiError(endpoint, { message: errorMessage, status: response.status });\n      throw new Error(errorMessage);\n    }\n\n    logger.apiResponse(endpoint, response.status, 'Stream started');\n\n    return response.body!;\n  }\n\n  /**\n   * Cancel a specific request\n   */\n  cancelRequest(endpoint: string, method: string = 'GET'): void {\n    const controllers = Array.from(this.abortControllers.entries());\n    controllers.forEach(([key, controller]) => {\n      if (key.includes(`${method}-${endpoint}`)) {\n        controller.abort();\n        this.abortControllers.delete(key);\n      }\n    });\n  }\n\n  /**\n   * Cancel all pending requests\n   */\n  cancelAllRequests(): void {\n    this.abortControllers.forEach(controller => controller.abort());\n    this.abortControllers.clear();\n  }\n\n  // Agent Management\n  async getAgents(params?: {\n    page?: number;\n    per_page?: number;\n  }): Promise<AgentsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async createAgent(data: {\n    project_name: string;\n    sitemap_path?: string;\n    file_upload?: boolean;\n    webpage_url?: string;\n  }): Promise<APIResponse<Agent>> {\n    return this.request('/projects', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}`);\n  }\n\n  async updateAgent(id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }): Promise<APIResponse<Agent>> {\n    console.log('[ProxyClient] updateAgent called with:', { id, data });\n    \n    // Use FormData for multipart/form-data as specified in OpenAPI\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]) => {\n      if (value !== undefined) {\n        formData.append(key, String(value));\n        console.log('[ProxyClient] FormData append:', key, value);\n      }\n    });\n\n    const response = await this.request<APIResponse<Agent>>(`/projects/${id}`, {\n      method: 'POST', // Changed from PUT to POST as per OpenAPI spec\n      body: formData,\n    });\n    \n    console.log('[ProxyClient] updateAgent response:', response);\n    return response;\n  }\n\n  async deleteAgent(id: number): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async replicateAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}/replicate`, {\n      method: 'POST',\n    });\n  }\n\n  async getAgentStats(id: number): Promise<APIResponse<AgentStats>> {\n    return this.request(`/projects/${id}/stats`);\n  }\n\n  async getAgentSettings(id: number): Promise<APIResponse<AgentSettings>> {\n    return this.request(`/projects/${id}/settings`);\n  }\n\n  async updateAgentSettings(id: number, settings: Partial<AgentSettings> | FormData): Promise<APIResponse<AgentSettings>> {\n    const isFormData = settings instanceof FormData;\n    return this.request(`/projects/${id}/settings`, {\n      method: 'POST',\n      body: isFormData ? settings : JSON.stringify(settings),\n      headers: isFormData ? {} : { 'Content-Type': 'application/json' },\n    });\n  }\n\n  // Plugin Management\n  async getProjectPlugins(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request(`/projects/${projectId}/plugins`);\n  }\n\n  async updateProjectPlugin(\n    projectId: number,\n    pluginId: string,\n    data: { enabled: boolean }\n  ): Promise<APIResponse<{ updated: boolean }>> {\n    return this.request(`/projects/${projectId}/plugins/${pluginId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  // Conversation Management\n  async getConversations(projectId: number, params?: {\n    page?: number;\n    per_page?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: string;\n    userFilter?: 'all' | 'me' | string;\n  }): Promise<ConversationsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.orderBy) queryParams.append('orderBy', params.orderBy);\n    if (params?.userFilter) queryParams.append('userFilter', params.userFilter);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async createConversation(projectId: number, data?: { name?: string }): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations`, {\n      method: 'POST',\n      body: JSON.stringify(data || {}),\n    });\n  }\n\n  async updateConversation(\n    projectId: number,\n    sessionId: string,\n    data: { name?: string }\n  ): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteConversation(projectId: number, sessionId: string): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Message Management\n  async getMessages(\n    projectId: number,\n    sessionId: string,\n    params?: {\n      page?: number;\n      per_page?: number;\n    }\n  ): Promise<MessagesResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async sendMessage(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      stream?: boolean;\n      source_ids?: string[];\n      response_source?: string;\n      chatbot_model?: string;\n      custom_persona?: string;\n      agent_capability?: string;\n    }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n\n  async sendMessageStream(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      source_ids?: string[];\n      response_source?: string;\n      chatbot_model?: string;\n      custom_persona?: string;\n      agent_capability?: string;\n    },\n    onChunk: (chunk: StreamChunk) => void,\n    onError?: (error: Error) => void,\n    onComplete?: () => void\n  ): Promise<void> {\n    try {\n      // Try the standard messages endpoint with stream=true parameter\n      const stream = await this.streamRequest(\n        `/projects/${projectId}/conversations/${sessionId}/messages`,\n        {\n          method: 'POST',\n          body: JSON.stringify({ ...data, stream: true }),\n        }\n      );\n\n      const reader = stream.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          onComplete?.();\n          break;\n        }\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const data = line.slice(6);\n              if (data === '[DONE]') {\n                onComplete?.();\n                return;\n              }\n              // parseStreamChunk expects the full line with \"data: \" prefix\n              const chunk = parseStreamChunk(line);\n              if (chunk) {\n                onChunk(chunk);\n              }\n            } catch (e) {\n              console.error('Failed to parse chunk:', e);\n            }\n          }\n        }\n      }\n    } catch (error: any) {\n      onError?.(error);\n      throw error;\n    }\n  }\n\n  async getMessageById(\n    projectId: number,\n    sessionId: string,\n    messageId: number\n  ): Promise<APIMessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}`);\n  }\n\n  async updateMessageFeedback(\n    projectId: number,\n    sessionId: string,\n    messageId: number,\n    feedback: { feedback: 'thumbs_up' | 'thumbs_down' }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}/feedback`, {\n      method: 'PUT',\n      body: JSON.stringify(feedback),\n    });\n  }\n\n  // Citations\n  async getCitation(projectId: number, citationId: number): Promise<CitationResponse> {\n    return this.request(`/projects/${projectId}/citations/${citationId}`);\n  }\n\n  async previewCitationFile(id: string): Promise<any> {\n    return this.request(`/preview/${id}`);\n  }\n\n  // File Upload\n  async uploadFile(projectId: number, file: File, options?: {\n    onProgress?: (progress: number) => void;\n  }): Promise<SourceResponse> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // Use the correct /sources endpoint for file uploads\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  // Reports\n  async getTrafficReport(projectId: number): Promise<TrafficReportResponse> {\n    return this.request(`/projects/${projectId}/reports/traffic`);\n  }\n\n  async getQueriesReport(projectId: number): Promise<QueriesReportResponse> {\n    return this.request(`/projects/${projectId}/reports/queries`);\n  }\n\n  async getConversationsReport(projectId: number): Promise<ConversationsReportResponse> {\n    return this.request(`/projects/${projectId}/reports/conversations`);\n  }\n\n  async getAnalysisReport(projectId: number, interval?: AnalysisInterval): Promise<AnalysisReportResponse> {\n    const queryParams = new URLSearchParams();\n    if (interval) queryParams.append('interval', interval);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/reports/analysis${queryString ? `?${queryString}` : ''}`);\n  }\n\n  // Pages\n  async getPages(\n    projectId: number,\n    params?: PagesQueryParams\n  ): Promise<PagesListResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.crawl_status) queryParams.append('crawl_status', params.crawl_status);\n    if (params?.index_status) queryParams.append('index_status', params.index_status);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/pages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async deletePage(projectId: number, pageId: number): Promise<DeletePageResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async reindexPage(projectId: number, pageId: number): Promise<ReindexPageResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/reindex`, {\n      method: 'POST',\n    });\n  }\n\n  async getPageMetadata(projectId: number, pageId: number): Promise<PageMetadataResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/metadata`);\n  }\n\n  async updatePageMetadata(\n    projectId: number,\n    pageId: number,\n    metadata: Partial<PageMetadata>\n  ): Promise<PageMetadataResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/metadata`, {\n      method: 'PUT',\n      body: JSON.stringify(metadata),\n    });\n  }\n\n  // NOTE: This endpoint is not documented in the API\n  // Commenting out until we confirm it exists\n  // async previewFile(pageId: number): Promise<any> {\n  //   return this.request(`/page_file/${pageId}`);\n  // }\n\n  // Licenses\n  async getLicenses(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request(`/projects/${projectId}/license_keys`);\n  }\n\n  async createLicense(projectId: number, data: { name: string }): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`);\n  }\n\n  async updateLicense(\n    projectId: number,\n    licenseId: string,\n    data: { name?: string; is_active?: boolean }\n  ): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Sources\n  async getSources(projectId: number): Promise<SourcesListResponse> {\n    return this.request(`/projects/${projectId}/sources`);\n  }\n\n  async createSitemapSource(\n    projectId: number,\n    data: CreateSitemapSourceRequest\n  ): Promise<SourceResponse> {\n    // Convert JSON data to FormData as the API expects multipart/form-data\n    const formData = new FormData();\n    formData.append('sitemap_path', data.sitemap_path);\n    if (data.executive_js !== undefined) {\n      formData.append('executive_js', String(data.executive_js));\n    }\n    if (data.data_refresh_frequency !== undefined) {\n      formData.append('data_refresh_frequency', data.data_refresh_frequency);\n    }\n    if (data.create_new_pages !== undefined) {\n      formData.append('create_new_pages', String(data.create_new_pages));\n    }\n    if (data.remove_unexist_pages !== undefined) {\n      formData.append('remove_unexist_pages', String(data.remove_unexist_pages));\n    }\n    if (data.refresh_existing_pages !== undefined) {\n      formData.append('refresh_existing_pages', data.refresh_existing_pages);\n    }\n\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  async uploadFileSource(projectId: number, formData: FormData): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  /**\n   * Update source settings\n   * Updates the settings for an existing source.\n   * API endpoint: PUT /projects/{projectId}/sources/{sourceId}\n   */\n  async updateSourceSettings(\n    projectId: number,\n    sourceId: number,\n    settings: UpdateSourceSettingsRequest\n  ): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'PUT',\n      body: JSON.stringify(settings),\n    });\n  }\n\n  async deleteSource(projectId: number, sourceId: number): Promise<DeleteSourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async instantSyncSource(projectId: number, sourceId: number): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}/instant-sync`, {\n      method: 'PUT',\n    });\n  }\n\n  // Customer Intelligence\n  async getCustomerIntelligence(\n    projectId: number,\n    page: number = 1,\n    limit: number = 100\n  ): Promise<CustomerIntelligenceResponse> {\n    return this.request(`/projects/${projectId}/reports/intelligence?page=${page}&limit=${limit}`);\n  }\n\n  // User\n  async getUserLimits(): Promise<LimitsResponse> {\n    return this.request('/user/limits');\n  }\n\n  async getUserProfile(): Promise<UserProfileResponse> {\n    return this.request('/user');\n  }\n\n  async updateUserProfile(formData: FormData): Promise<UserProfileResponse> {\n    return this.request('/user', {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  // Demo Mode\n  async getDemoUsageStats(): Promise<{\n    status: string;\n    data: {\n      usage: {\n        projects: { used: number; limit: number; remaining: number };\n        conversations: { used: number; limit: number; remaining: number };\n        messages: { total: number; limitPerConversation: number; byConversation: Record<string, number> };\n      };\n      session: {\n        sessionId: string;\n        startTime: number;\n        expiresAt: number;\n        remainingTime: number;\n      };\n    };\n  }> {\n    // Add session start time header\n    const sessionData = sessionStorage.getItem('customgpt.freeTrialSession');\n    let startTime = Date.now();\n    \n    if (sessionData) {\n      try {\n        const session = JSON.parse(sessionData);\n        startTime = session.startTime || Date.now();\n      } catch (e) {\n        console.error('[ProxyClient] Failed to parse session data:', e);\n      }\n    }\n    \n    return this.request('/demo/usage', {\n      headers: {\n        'X-Session-Start-Time': startTime.toString()\n      }\n    });\n  }\n  \n  async cleanupDemoSession(): Promise<{\n    status: string;\n    data: {\n      sessionId: string;\n      totalResources: number;\n      successCount: number;\n      failureCount: number;\n      results: Array<{\n        success: boolean;\n        resourceId: string;\n        resourceType: string;\n        error?: string;\n      }>;\n    };\n  }> {\n    return this.request('/demo/cleanup', {\n      method: 'POST'\n    });\n  }\n}\n\n// Export singleton instance\nexport const proxyClient = new ProxyCustomGPTClient();","/**\n * Direct API Client for CustomGPT\n * \n * This client communicates directly with the CustomGPT API using an API key.\n * Used for standalone widget deployments where a proxy server is not available.\n * \n * SECURITY WARNING: This exposes your API key in the browser. Only use this\n * for trusted environments or with restricted API keys.\n */\n\nimport type {\n  Agent,\n  AgentStats,\n  AgentSettings,\n  Conversation,\n  ChatMessage,\n  Citation,\n  APIResponse,\n  AgentsResponse,\n  ConversationsResponse,\n  MessagesResponse,\n  MessageResponse,\n  APIMessageResponse,\n  CitationResponse,\n  StreamChunk,\n  LimitsResponse,\n} from '@/types';\nimport type { \n  PagesListResponse, \n  DeletePageResponse, \n  ReindexPageResponse, \n  PagesQueryParams,\n  PageMetadata,\n  PageMetadataResponse\n} from '@/types/pages.types';\nimport type { \n  TrafficReportResponse, \n  QueriesReportResponse, \n  ConversationsReportResponse, \n  AnalysisReportResponse,\n  AnalysisInterval\n} from '@/types/reports.types';\nimport type { \n  SourcesListResponse, \n  SourceResponse, \n  DeleteSourceResponse,\n  UpdateSourceSettingsRequest,\n  CreateSitemapSourceRequest\n} from '@/types/sources.types';\nimport { parseStreamChunk } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\nimport type { UserProfile } from '@/types';\n\n/**\n * DirectCustomGPTClient\n * \n * Client that communicates directly with CustomGPT API using an API key.\n * This is used for standalone widget deployments without a proxy server.\n */\nexport class DirectCustomGPTClient {\n  private baseURL: string = 'https://app.customgpt.ai/api/v1';\n  private apiKey: string;\n  private timeout: number = 30000;\n  private abortControllers: Map<string, AbortController> = new Map();\n  private demoApiKey: string | null = null;\n\n  constructor(apiKey: string, baseURL?: string) {\n    if (!apiKey) {\n      throw new Error('API key is required for direct client');\n    }\n    \n    this.apiKey = apiKey;\n    if (baseURL) {\n      this.baseURL = baseURL;\n    }\n    \n    logger.info('DIRECT_CLIENT', 'Direct API Client initialized', {\n      baseURL: this.baseURL,\n      hasApiKey: !!apiKey,\n    });\n  }\n\n  /**\n   * Make a request to the CustomGPT API\n   */\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    const requestId = `${options.method || 'GET'}-${endpoint}-${Date.now()}`;\n    \n    logger.apiRequest(endpoint, options.method || 'GET', options.body);\n\n    try {\n      const controller = new AbortController();\n      this.abortControllers.set(requestId, controller);\n\n      const timeoutId = setTimeout(() => {\n        controller.abort();\n      }, this.timeout);\n\n      // Don't set Content-Type for FormData - let browser set it with boundary\n      const isFormData = options.body instanceof FormData;\n      const headers: HeadersInit = {\n        'accept': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n        ...(options.headers as Record<string, string> || {}),\n      };\n      \n      if (!isFormData) {\n        headers['Content-Type'] = 'application/json';\n      }\n      \n      const response = await fetch(url, {\n        ...options,\n        headers,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n      this.abortControllers.delete(requestId);\n\n      let responseData;\n      const contentType = response.headers.get('content-type');\n      \n      if (contentType?.includes('application/json')) {\n        responseData = await response.json();\n      } else {\n        // Non-JSON response, wrap it\n        const text = await response.text();\n        responseData = { \n          status: response.ok ? 'success' : 'error', \n          data: text,\n          message: text \n        };\n      }\n\n      if (!response.ok) {\n        throw {\n          message: responseData.error || responseData.message || `Request failed: ${response.status}`,\n          status: response.status,\n          data: responseData,\n        };\n      }\n\n      logger.apiResponse(endpoint, response.status, responseData);\n      return responseData;\n    } catch (error: any) {\n      this.abortControllers.delete(requestId);\n      \n      if (error.name === 'AbortError') {\n        logger.apiError(endpoint, { message: 'Request timeout', code: 'TIMEOUT' });\n        throw new Error('Request timeout');\n      }\n\n      logger.apiError(endpoint, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Make a streaming request to the API\n   */\n  private async streamRequest(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ReadableStream<Uint8Array>> {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    logger.apiRequest(endpoint, 'POST-STREAM', options.body);\n\n    const headers: HeadersInit = {\n      'Content-Type': 'application/json',\n      'Accept': 'text/event-stream',\n      'Authorization': `Bearer ${this.apiKey}`,\n      ...(options.headers as Record<string, string> || {})\n    };\n\n    const response = await fetch(url, {\n      ...options,\n      headers,\n    });\n\n    if (!response.ok) {\n      let errorMessage = `Stream request failed: ${response.status}`;\n      try {\n        const errorText = await response.text();\n        const errorData = JSON.parse(errorText);\n        errorMessage = errorData.error || errorData.message || errorMessage;\n      } catch {\n        // If not JSON, use the status message\n      }\n      logger.apiError(endpoint, { message: errorMessage, status: response.status });\n      throw new Error(errorMessage);\n    }\n\n    logger.apiResponse(endpoint, response.status, 'Stream started');\n\n    return response.body!;\n  }\n\n  /**\n   * Cancel a specific request\n   */\n  cancelRequest(endpoint: string, method: string = 'GET'): void {\n    const controllers = Array.from(this.abortControllers.entries());\n    controllers.forEach(([key, controller]) => {\n      if (key.includes(`${method}-${endpoint}`)) {\n        controller.abort();\n        this.abortControllers.delete(key);\n      }\n    });\n  }\n\n  /**\n   * Cancel all pending requests\n   */\n  cancelAllRequests(): void {\n    this.abortControllers.forEach(controller => controller.abort());\n    this.abortControllers.clear();\n  }\n\n  /**\n   * Set demo mode API key\n   */\n  public setDemoApiKey(apiKey: string | null) {\n    this.demoApiKey = apiKey;\n  }\n\n  // Agent Management\n  async getAgents(params?: {\n    page?: number;\n    per_page?: number;\n  }): Promise<AgentsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async getAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}`);\n  }\n\n  async createAgent(data: {\n    project_name: string;\n    sitemap_path?: string;\n    file_upload?: boolean;\n    webpage_url?: string;\n  }): Promise<APIResponse<Agent>> {\n    return this.request('/projects', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getAgentSettings(id: number): Promise<APIResponse<AgentSettings>> {\n    return this.request(`/projects/${id}/settings`);\n  }\n\n  async updateAgentSettings(id: number, settings: Partial<AgentSettings> | FormData): Promise<APIResponse<AgentSettings>> {\n    const isFormData = settings instanceof FormData;\n    return this.request(`/projects/${id}/settings`, {\n      method: 'POST',\n      body: isFormData ? settings : JSON.stringify(settings),\n      headers: isFormData ? {} : { 'Content-Type': 'application/json' },\n    });\n  }\n\n  // Conversation Management\n  async getConversations(projectId: number, params?: {\n    page?: number;\n    per_page?: number;\n  }): Promise<ConversationsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async createConversation(projectId: number, data?: { name?: string }): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations`, {\n      method: 'POST',\n      body: JSON.stringify(data || {}),\n    });\n  }\n\n  async updateConversation(\n    projectId: number,\n    sessionId: string,\n    data: { name?: string }\n  ): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteConversation(projectId: number, sessionId: string): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Message Management\n  async getMessages(\n    projectId: number,\n    sessionId: string,\n    params?: {\n      page?: number;\n      per_page?: number;\n    }\n  ): Promise<MessagesResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async getMessageById(\n    projectId: number,\n    sessionId: string,\n    messageId: number\n  ): Promise<APIMessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}`);\n  }\n\n  async sendMessage(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      stream?: boolean;\n      source_ids?: string[];\n      response_source?: string;\n      chatbot_model?: string;\n      custom_persona?: string;\n      agent_capability?: string;\n    }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async sendMessageStream(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      source_ids?: string[];\n      response_source?: string;\n      chatbot_model?: string;\n      custom_persona?: string;\n      agent_capability?: string;\n    },\n    onChunk: (chunk: StreamChunk) => void,\n    onError?: (error: Error) => void,\n    onComplete?: () => void\n  ): Promise<void> {\n    try {\n      const stream = await this.streamRequest(\n        `/projects/${projectId}/conversations/${sessionId}/messages`,\n        {\n          method: 'POST',\n          body: JSON.stringify({ ...data, stream: true }),\n        }\n      );\n\n      const reader = stream.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          onComplete?.();\n          break;\n        }\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const data = line.slice(6);\n              if (data === '[DONE]') {\n                onComplete?.();\n                return;\n              }\n              const chunk = parseStreamChunk(data);\n              if (chunk) {\n                onChunk(chunk);\n              }\n            } catch (e) {\n              console.error('Failed to parse chunk:', e);\n            }\n          }\n        }\n      }\n    } catch (error: any) {\n      onError?.(error);\n      throw error;\n    }\n  }\n\n  async updateMessageFeedback(\n    projectId: number,\n    sessionId: string,\n    messageId: number,\n    feedback: { feedback: 'thumbs_up' | 'thumbs_down' }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}/feedback`, {\n      method: 'PUT',\n      body: JSON.stringify(feedback),\n    });\n  }\n\n  // Citations\n  async getCitation(projectId: number, citationId: number): Promise<CitationResponse> {\n    return this.request(`/projects/${projectId}/citations/${citationId}`);\n  }\n\n  async previewCitationFile(id: string): Promise<any> {\n    // Note: This endpoint might need authentication adjustments\n    return this.request(`/preview/${id}`);\n  }\n\n  // Reports\n  async getTrafficReport(projectId: number): Promise<TrafficReportResponse> {\n    return this.request(`/projects/${projectId}/reports/traffic`);\n  }\n\n  async getQueriesReport(projectId: number): Promise<QueriesReportResponse> {\n    return this.request(`/projects/${projectId}/reports/queries`);\n  }\n\n  async getConversationsReport(projectId: number): Promise<ConversationsReportResponse> {\n    return this.request(`/projects/${projectId}/reports/conversations`);\n  }\n\n  async getAnalysisReport(projectId: number, interval?: AnalysisInterval): Promise<AnalysisReportResponse> {\n    const queryParams = new URLSearchParams();\n    if (interval) queryParams.append('interval', interval);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/reports/analysis${queryString ? `?${queryString}` : ''}`);\n  }\n\n  // Pages\n  async getPages(\n    projectId: number,\n    params?: PagesQueryParams\n  ): Promise<PagesListResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.crawl_status) queryParams.append('crawl_status', params.crawl_status);\n    if (params?.index_status) queryParams.append('index_status', params.index_status);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/pages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async deletePage(projectId: number, pageId: number): Promise<DeletePageResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async reindexPage(projectId: number, pageId: number): Promise<ReindexPageResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/reindex`, {\n      method: 'POST',\n    });\n  }\n\n  async getPageMetadata(projectId: number, pageId: number): Promise<PageMetadataResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/metadata`);\n  }\n\n  async updatePageMetadata(\n    projectId: number,\n    pageId: number,\n    metadata: Partial<PageMetadata>\n  ): Promise<PageMetadataResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/metadata`, {\n      method: 'PUT',\n      body: JSON.stringify(metadata),\n    });\n  }\n\n  // Sources\n  async getSources(projectId: number): Promise<SourcesListResponse> {\n    return this.request(`/projects/${projectId}/sources`);\n  }\n\n  async createSitemapSource(\n    projectId: number,\n    data: CreateSitemapSourceRequest\n  ): Promise<SourceResponse> {\n    const formData = new FormData();\n    formData.append('sitemap_path', data.sitemap_path);\n    if (data.executive_js !== undefined) {\n      formData.append('executive_js', String(data.executive_js));\n    }\n    if (data.data_refresh_frequency !== undefined) {\n      formData.append('data_refresh_frequency', data.data_refresh_frequency);\n    }\n    if (data.create_new_pages !== undefined) {\n      formData.append('create_new_pages', String(data.create_new_pages));\n    }\n    if (data.remove_unexist_pages !== undefined) {\n      formData.append('remove_unexist_pages', String(data.remove_unexist_pages));\n    }\n    if (data.refresh_existing_pages !== undefined) {\n      formData.append('refresh_existing_pages', data.refresh_existing_pages);\n    }\n\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {},\n    });\n  }\n\n  async uploadFileSource(projectId: number, formData: FormData): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {},\n    });\n  }\n\n  async updateSourceSettings(\n    projectId: number,\n    sourceId: number,\n    settings: UpdateSourceSettingsRequest\n  ): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'PUT',\n      body: JSON.stringify(settings),\n    });\n  }\n\n  async deleteSource(projectId: number, sourceId: number): Promise<DeleteSourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async instantSyncSource(projectId: number, sourceId: number): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}/instant-sync`, {\n      method: 'PUT',\n    });\n  }\n\n  // File Upload\n  async uploadFile(projectId: number, file: File): Promise<any> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  // User\n  async getUserLimits(): Promise<LimitsResponse> {\n    return this.request('/user/limits');\n  }\n\n  async getUserProfile(): Promise<{ status: 'success' | 'error'; data: UserProfile }> {\n    return this.request('/user');\n  }\n\n  async updateUserProfile(formData: FormData): Promise<{ status: 'success' | 'error'; data: UserProfile }> {\n    return this.request('/user', {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  // Additional methods for full compatibility\n  async updateAgent(id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }): Promise<APIResponse<Agent>> {\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]) => {\n      if (value !== undefined) {\n        formData.append(key, String(value));\n      }\n    });\n\n    return this.request(`/projects/${id}`, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n\n  async deleteAgent(id: number): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async getAgentStats(id: number): Promise<APIResponse<AgentStats>> {\n    return this.request(`/projects/${id}/stats`);\n  }\n\n  async replicateAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}/replicate`, {\n      method: 'POST',\n    });\n  }\n\n  // Licenses\n  async getLicenses(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request(`/projects/${projectId}/license_keys`);\n  }\n\n  async createLicense(projectId: number, data: { name: string }): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`);\n  }\n\n  async updateLicense(\n    projectId: number,\n    licenseId: string,\n    data: { name?: string; is_active?: boolean }\n  ): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Plugin Management\n  async getProjectPlugins(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request(`/projects/${projectId}/plugins`);\n  }\n\n  async updateProjectPlugin(\n    projectId: number,\n    pluginId: string,\n    data: { enabled: boolean }\n  ): Promise<APIResponse<{ updated: boolean }>> {\n    return this.request(`/projects/${projectId}/plugins/${pluginId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n}\n\n// Export singleton factory\nexport const createDirectClient = (apiKey: string, baseURL?: string) => {\n  return new DirectCustomGPTClient(apiKey, baseURL);\n};","/**\n * API Client Abstraction\n * \n * This module provides the appropriate API client based on the configuration.\n * It can switch between:\n * - Proxy mode: For Next.js app (API key stored server-side)\n * - Direct mode: For widget deployments (API key provided client-side)\n */\n\nimport { ProxyCustomGPTClient, proxyClient } from './proxy-client';\nimport { DirectCustomGPTClient } from './direct-client';\n\n// Type that represents either client\nexport type CustomGPTClient = ProxyCustomGPTClient | DirectCustomGPTClient;\n\n// Configuration interface\ninterface ClientConfig {\n  mode?: 'proxy' | 'direct';\n  apiKey?: string;\n  apiUrl?: string;\n}\n\n// Singleton instance\nlet clientInstance: CustomGPTClient | null = null;\nlet initialized = false;\n\n/**\n * Initialize the API client\n * @param config Configuration object with mode, apiKey, and optional apiUrl\n */\nexport function initializeClient(config?: ClientConfig): void {\n  if (config) {\n    if (config.mode === 'direct' && config.apiKey) {\n      // Direct mode for widget deployments\n      clientInstance = new DirectCustomGPTClient(config.apiKey, config.apiUrl);\n      initialized = true;\n    } else {\n      // Proxy mode (default)\n      clientInstance = proxyClient;\n      if (config.apiUrl) {\n        proxyClient.setApiUrl(config.apiUrl);\n      }\n      initialized = true;\n    }\n  } else {\n    // Default to proxy client\n    clientInstance = proxyClient;\n    initialized = true;\n  }\n}\n\n/**\n * Get the API client instance\n */\nexport function getClient(): CustomGPTClient {\n  if (!clientInstance) {\n    // Default to proxy client if not initialized\n    clientInstance = proxyClient;\n  }\n  return clientInstance;\n}\n\n/**\n * Get or create the API client instance\n * @deprecated Use getClient() instead\n */\nexport function getApiClient(config?: ClientConfig): CustomGPTClient {\n  if (config) {\n    initializeClient(config);\n  }\n  return getClient();\n}\n\n/**\n * Check if client is initialized\n */\nexport function isClientInitialized(): boolean {\n  return initialized || clientInstance !== null;\n}\n\n/**\n * Reset the client instance\n */\nexport function resetApiClient(): void {\n  clientInstance = null;\n  initialized = false;\n}\n\n// Export default client getter for backward compatibility\nexport const apiClient = getClient();","/**\n * Message Store - Core Chat Functionality\n * \n * This store manages all message-related state and operations.\n * It's the heart of the chat system, handling:\n * - Message sending and receiving\n * - Real-time streaming responses\n * - Message history management\n * - Local storage fallback\n * - Error handling and retries\n * \n * Architecture:\n * - Uses Map for efficient conversation-based message storage\n * - Integrates with agent and conversation stores\n * - Handles both streaming and non-streaming API responses\n * - Provides local storage backup for offline access\n * \n * Key Features:\n * - Automatic conversation creation if needed\n * - Streaming with fallback to non-streaming\n * - Optimistic UI updates\n * - Message feedback tracking\n * - File upload support\n * \n * Features:\n * - Real-time streaming with local storage persistence\n * - Robust error handling with graceful fallbacks\n * - Comprehensive logging and debugging support\n * - Optimistic UI updates with consistent message ordering\n */\n\nimport { create } from 'zustand';\nimport type { MessageStore, ChatMessage, Citation, FeedbackType, MessageDetails, MessageMetadata } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useAgentStore } from './agents';\nimport { useConversationStore } from './conversations';\nimport { useChatSettingsStore } from './chat-settings';\nimport { generateId } from '@/lib/utils';\nimport { globalStreamManager } from '@/lib/streaming/handler';\nimport { logger } from '@/lib/logger';\nimport { toast } from 'sonner';\n\n/**\n * Local storage configuration\n * Provides offline access and caching for better UX\n */\nconst MESSAGES_STORAGE_KEY = 'customgpt-messages-cache';\n\n/**\n * Save messages to local storage\n * Provides a fallback when API is unavailable\n * @param conversationId - The conversation to save messages for\n * @param messages - Array of messages to save\n */\nfunction saveMessagesToStorage(conversationId: string, messages: ChatMessage[]) {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    const cache = stored ? JSON.parse(stored) : {};\n    cache[conversationId] = messages;\n    localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n  } catch (error) {\n    // Silent fail - storage is optional\n  }\n}\n\n/**\n * Load messages from local storage\n * Used as fallback when API is unavailable\n * @param conversationId - The conversation to load messages for\n * @returns Array of messages or null if not found\n */\nfunction loadMessagesFromStorage(conversationId: string): ChatMessage[] | null {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    if (!stored) return null;\n    const cache = JSON.parse(stored);\n    return cache[conversationId] || null;\n  } catch (error) {\n    // Silent fail - storage is optional\n    return null;\n  }\n}\n\n/**\n * Fetch citation details by IDs\n * \n * Converts citation IDs to full citation objects with title, source, content\n * \n * @param citationIds - Array of citation IDs\n * @param projectId - The project/agent ID\n * @returns Array of citation objects with details\n */\n/**\n * Validate and filter citation IDs\n * \n * @param citationIds - Raw citation IDs from API\n * @returns Filtered array of valid citation IDs\n */\nfunction validateCitationIds(citationIds: any[]): number[] {\n  if (!Array.isArray(citationIds)) {\n    logger.warn('MESSAGES', 'Citation IDs is not an array', { citationIds });\n    return [];\n  }\n  \n  const validIds = citationIds\n    .filter(id => typeof id === 'number' && !isNaN(id) && id > 0)\n    .filter((id, index, arr) => arr.indexOf(id) === index); // Remove duplicates\n  \n  if (validIds.length !== citationIds.length) {\n    logger.warn('MESSAGES', 'Filtered out invalid citation IDs', {\n      original: citationIds,\n      valid: validIds,\n      filtered: citationIds.length - validIds.length\n    });\n  }\n  \n  return validIds;\n}\n\nasync function fetchCitationDetails(citationIds: number[], projectId: number): Promise<Citation[]> {\n  // Validate input citation IDs\n  const validCitationIds = validateCitationIds(citationIds);\n  \n  if (validCitationIds.length === 0) {\n    logger.warn('MESSAGES', 'No valid citation IDs to fetch', { citationIds });\n    return [];\n  }\n  \n  logger.info('MESSAGES', 'Fetching citation details', {\n    projectId,\n    citationIds: validCitationIds,\n    count: validCitationIds.length\n  });\n  \n  const client = getClient();\n  const citations: Citation[] = [];\n  \n  for (let i = 0; i < validCitationIds.length; i++) {\n    const citationId = validCitationIds[i];\n    \n    try {\n      const response = await client.getCitation(projectId, citationId);\n      \n      if (response.data) {\n        const citation = {\n          id: citationId.toString(), // Convert to string as per Citation interface\n          index: i + 1, // 1-based index for display\n          title: response.data.title || `Citation ${i + 1}`,\n          source: response.data.url,\n          url: response.data.url,\n          content: response.data.description || '',\n        };\n        citations.push(citation);\n        \n        logger.info('MESSAGES', 'Citation fetched successfully', {\n          citationId,\n          title: citation.title,\n          hasContent: !!citation.content,\n          hasUrl: !!citation.url\n        });\n      } else {\n        logger.warn('MESSAGES', 'Citation API returned empty data', {\n          citationId,\n          response\n        });\n      }\n    } catch (error) {\n      logger.warn('MESSAGES', 'Failed to fetch citation details', {\n        citationId,\n        projectId,\n        error: error instanceof Error ? error.message : String(error),\n        errorType: error instanceof Error ? error.constructor.name : typeof error\n      });\n      // Only create fallback citations for actual errors, not empty responses\n      // This reduces wrong citations from appearing\n      if (error instanceof Error && error.message.includes('404')) {\n        logger.info('MESSAGES', 'Citation not found, skipping fallback', { citationId });\n        // Skip creating fallback for 404 errors - citation simply doesn't exist\n        continue;\n      } else {\n        // Create fallback only for network/server errors\n        citations.push({\n          id: citationId.toString(), // Convert to string\n          index: i + 1,\n          title: `Citation ${i + 1}`,\n          source: '',\n          url: '',\n          content: 'Citation details unavailable',\n        });\n      }\n    }\n  }\n  \n  logger.info('MESSAGES', 'Citation fetching completed', {\n    requested: validCitationIds.length,\n    fetched: citations.length,\n    success: citations.filter(c => c.content !== 'Citation details unavailable').length\n  });\n  \n  return citations;\n}\n\n/**\n * Message Store Implementation\n * \n * State Structure:\n * - messages: Map<conversationId, ChatMessage[]> - All messages grouped by conversation\n * - streamingMessage: Current message being streamed (null when not streaming)\n * - isStreaming: Whether a message is currently being streamed\n * - loading: General loading state for message operations\n * - error: Current error message if any\n */\nexport const useMessageStore = create<MessageStore>((set, get) => ({\n  // Initialize with empty state\n  messages: new Map(),\n  streamingMessage: null,\n  isStreaming: false,\n  loading: false,\n  error: null,\n\n  /**\n   * Send a message to the current agent\n   * \n   * Flow:\n   * 1. Validate agent selection\n   * 2. Ensure conversation exists (create if needed)\n   * 3. Create and add user message (optimistic update)\n   * 4. Upload files if present\n   * 5. Start streaming response\n   * 6. Fall back to non-streaming if streaming fails\n   * 7. Handle errors gracefully\n   * \n   * \n   * @param content - Message text\n   * @param files - Optional file attachments\n   */\n  sendMessage: async (content: string, files?: File[]) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    if (!currentAgent) {\n      logger.error('MESSAGES', 'No agent selected when trying to send message');\n      \n      // Check if this is due to missing API keys\n      const response = await fetch('/api/proxy/user/limits').catch(() => null);\n      if (!response || response.status === 401 || response.status === 500) {\n        throw new Error('API key not configured. Please add CUSTOMGPT_API_KEY to your .env.local file and restart the server.');\n      }\n      \n      throw new Error('No agent selected. Please select or create an agent first.');\n    }\n\n    logger.info('MESSAGES', 'Sending message', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name,\n      messageLength: content.length,\n      hasFiles: files && files.length > 0\n    });\n\n    // Ensure we have a conversation\n    const conversation = await conversationStore.ensureConversation(\n      currentAgent.id,\n      content\n    );\n\n    logger.info('MESSAGES', 'Conversation ensured', {\n      conversationId: conversation.id,\n      sessionId: conversation.session_id,\n      hasSessionId: !!conversation.session_id,\n      isNew: !conversation.message_count || conversation.message_count === 0\n    });\n\n    if (!conversation.session_id) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversation });\n      throw new Error('Conversation missing session_id');\n    }\n\n    set({ loading: true, error: null });\n\n    // Create user message\n    const userMessage: ChatMessage = {\n      id: generateId(),\n      role: 'user',\n      content,\n      timestamp: new Date().toISOString(),\n      status: 'sending',\n    };\n\n    // Add user message to store\n    get().addMessage(conversation.id.toString(), userMessage);\n\n    // Create assistant message placeholder\n    const assistantMessage: ChatMessage = {\n      id: generateId(),\n      role: 'assistant',\n      content: '',\n      timestamp: new Date().toISOString(),\n      citations: [],\n    };\n\n    set({ \n      streamingMessage: assistantMessage,\n      isStreaming: true,\n      loading: false,\n    });\n\n    try {\n      // Handle file uploads if present\n      let sourceIds: string[] = [];\n      if (files && files.length > 0) {\n        const client = getClient();\n        const uploadResponses = await Promise.all(\n          files.map(file => client.uploadFile(currentAgent.id, file))\n        );\n        \n        // Extract source IDs from upload responses\n        sourceIds = uploadResponses\n          .filter(response => response?.data?.id)\n          .map(response => response.data.id.toString());\n          \n        logger.info('MESSAGES', 'Files uploaded successfully', {\n          fileCount: files.length,\n          sourceIds: sourceIds\n        });\n      }\n\n      // Update user message status\n      userMessage.status = 'sent';\n      get().addMessage(conversation.id.toString(), userMessage);\n\n      // Start streaming with correct parameters\n      const client = getClient();\n      \n      logger.info('MESSAGES', 'Starting message stream', {\n        agentId: currentAgent.id,\n        sessionId: conversation.session_id,\n        messageContent: content.substring(0, 50),\n        hasSourceIds: sourceIds.length > 0,\n        sourceIds: sourceIds\n      });\n      \n      try {\n        // Get chat settings for current agent\n        const chatSettings = useChatSettingsStore.getState().getSettings(currentAgent.id);\n        \n        // Prepare the request data - only send fields that the API accepts\n        const requestData: { \n          prompt: string; \n          source_ids?: string[];\n          response_source?: string;\n        } = { \n          prompt: content || '', // Ensure we always have a prompt, even if empty\n          response_source: chatSettings.response_source || 'default',\n        };\n        \n        // Add source_ids if we have uploaded files\n        if (sourceIds.length > 0) {\n          requestData.source_ids = sourceIds;\n          \n          // If no text prompt was provided, add a default prompt for file analysis\n          if (!content.trim()) {\n            requestData.prompt = 'Please analyze the uploaded file(s).';\n          }\n        }\n        \n        await client.sendMessageStream(\n          currentAgent.id,\n          conversation.session_id,  // Use session_id instead of id\n          requestData,\n          (chunk) => {\n              logger.info('MESSAGES', 'Received stream chunk', { \n                type: chunk.type, \n                hasContent: !!chunk.content,\n                contentLength: chunk.content?.length,\n                contentPreview: chunk.content?.substring(0, 50)\n              });\n              \n              if (chunk.type === 'content' && chunk.content) {\n                get().updateStreamingMessage(chunk.content, chunk.citations);\n              } else if (chunk.type === 'citation' && chunk.citations) {\n                // Handle citation-only chunks\n                const current = get().streamingMessage;\n                if (current && chunk.citations && Array.isArray(chunk.citations)) {\n                  // Check if citations are IDs or objects\n                  if (chunk.citations.length > 0 && typeof chunk.citations[0] === 'number') {\n                    // Fetch citation details asynchronously\n                    fetchCitationDetails(chunk.citations as any as number[], currentAgent.id).then(citationDetails => {\n                      const updatedCurrent = get().streamingMessage;\n                      if (updatedCurrent) {\n                        set({\n                          streamingMessage: {\n                            ...updatedCurrent,\n                            citations: citationDetails\n                          }\n                        });\n                      }\n                    });\n                  } else {\n                    // Citations might already be objects\n                    set({\n                      streamingMessage: {\n                        ...current,\n                        citations: chunk.citations\n                      }\n                    });\n                  }\n                }\n              }\n            },\n            async (streamError) => {\n              logger.error('MESSAGES', 'Streaming failed, attempting fallback to non-streaming', streamError, {\n                errorMessage: streamError.message,\n                agentId: currentAgent.id,\n                sessionId: conversation.session_id\n              });\n              \n              // Try fallback to non-streaming API\n              try {\n                logger.info('MESSAGES', 'Using non-streaming fallback');\n                \n                const response = await client.sendMessage(\n                  currentAgent.id,\n                  conversation.session_id,\n                  { \n                    prompt: requestData.prompt,\n                    stream: false,\n                    source_ids: requestData.source_ids\n                  }\n                );\n                \n                // Update streaming message with the complete response\n                const finalMessage = get().streamingMessage;\n                if (finalMessage && response) {\n                  // Handle different response formats from API\n                  let messageData: any;\n                  if (response.data) {\n                    messageData = response.data;\n                  } else {\n                    // Direct response format - cast to any to handle the actual API structure\n                    messageData = response as any;\n                  }\n                  \n                  finalMessage.content = messageData?.openai_response || messageData?.content || 'No response received';\n                  \n                  // Fetch citation details if needed\n                  if (messageData?.citations && Array.isArray(messageData.citations) && messageData.citations.length > 0) {\n                    if (typeof messageData.citations[0] === 'number') {\n                      // Citations are IDs, fetch details\n                      finalMessage.citations = await fetchCitationDetails(messageData.citations, currentAgent.id);\n                    } else {\n                      // Citations might already be objects\n                      finalMessage.citations = messageData.citations;\n                    }\n                  } else {\n                    finalMessage.citations = [];\n                  }\n                  \n                  finalMessage.status = 'sent';\n                  \n                  // Update the message ID to include the prompt ID if available\n                  if (messageData?.id) {\n                    finalMessage.id = `${messageData.id}-assistant`;\n                    // Also update the user message ID\n                    const conversationMessages = get().messages.get(conversation.id.toString()) || [];\n                    const lastUserMessage = conversationMessages.filter(m => m.role === 'user').pop();\n                    if (lastUserMessage && lastUserMessage.id === userMessage.id) {\n                      lastUserMessage.id = `${messageData.id}-user`;\n                      get().addMessage(conversation.id.toString(), lastUserMessage);\n                    }\n                  }\n                  \n                  // Add details from the API response\n                  finalMessage.details = {\n                    user_id: messageData?.user_id,\n                    conversation_id: messageData?.conversation_id,\n                    updated_at: messageData?.updated_at,\n                    prompt_id: messageData?.id,\n                    metadata: messageData?.metadata ? {\n                      user_ip: messageData.metadata.user_ip,\n                      user_agent: messageData.metadata.user_agent,\n                      external_id: messageData.metadata.external_id,\n                      request_source: messageData.metadata.request_source,\n                    } : undefined,\n                  };\n                  get().addMessage(conversation.id.toString(), finalMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                logger.info('MESSAGES', 'Fallback to non-streaming successful');\n                \n              } catch (fallbackError: any) {\n                logger.error('MESSAGES', 'Both streaming and non-streaming failed', fallbackError);\n                \n                // Update assistant message with error\n                const errorMessage = get().streamingMessage;\n                if (errorMessage) {\n                  errorMessage.content = 'Sorry, I encountered an error while processing your message. Please try again.';\n                  errorMessage.status = 'error';\n                  get().addMessage(conversation.id.toString(), errorMessage);\n                }\n                \n                // Extract error details including status code\n                let errorText = 'Communication error';\n                if (fallbackError.status) {\n                  switch (fallbackError.status) {\n                    case 429:\n                      errorText = 'You have exhausted your current query credits. Please contact customer service for assistance.';\n                      break;\n                    case 401:\n                      errorText = 'API Token is either missing or invalid';\n                      break;\n                    case 404:\n                      errorText = 'Agent or conversation not found';\n                      break;\n                    case 400:\n                      errorText = 'Invalid request format';\n                      break;\n                    default:\n                      errorText = fallbackError.message || `Error ${fallbackError.status}`;\n                  }\n                } else if (fallbackError.message) {\n                  errorText = fallbackError.message;\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                  error: errorText,\n                });\n              }\n            },\n            async () => {\n              // onComplete callback - enrich streaming message with API data\n              const finalMessage = get().streamingMessage;\n              if (finalMessage) {\n                finalMessage.status = 'sent';\n                \n                // Clear streaming state FIRST to prevent duplication\n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                // Then add message to ensure it's visible\n                get().addMessage(conversation.id.toString(), finalMessage);\n                \n                // Fetch latest messages to enrich the streaming message with API metadata\n                try {\n                  logger.info('MESSAGES', 'Enriching streaming message with API data');\n                  const client = getClient();\n                  const response = await client.getMessages(currentAgent.id, conversation.session_id);\n                  \n                  // Process API response to find messages\n                  let apiMessages = [];\n                  if (response && typeof response === 'object') {\n                    if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n                      apiMessages = (response as any).data.messages.data;\n                    } else if (Array.isArray((response as any).data)) {\n                      apiMessages = (response as any).data;\n                    } else if (Array.isArray(response)) {\n                      apiMessages = response;\n                    } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n                      apiMessages = (response as any).data.data;\n                    }\n                  }\n                  \n                  if (apiMessages.length > 0) {\n                    // Find the most recent assistant message (should be our streaming message)\n                    const latestApiMessage = apiMessages[apiMessages.length - 1];\n                    \n                    if (latestApiMessage && latestApiMessage.openai_response) {\n                      // Enrich the streaming message with API data\n                      finalMessage.id = `${latestApiMessage.id}-assistant`;\n                      finalMessage.timestamp = latestApiMessage.created_at || latestApiMessage.timestamp || finalMessage.timestamp;\n                      \n                      // Add full message details\n                      finalMessage.details = {\n                        user_id: latestApiMessage.user_id,\n                        conversation_id: latestApiMessage.conversation_id,\n                        updated_at: latestApiMessage.updated_at,\n                        prompt_id: latestApiMessage.id,\n                        metadata: latestApiMessage.metadata ? {\n                          user_ip: latestApiMessage.metadata.user_ip,\n                          user_agent: latestApiMessage.metadata.user_agent,\n                          external_id: latestApiMessage.metadata.external_id,\n                          request_source: latestApiMessage.metadata.request_source,\n                        } : undefined,\n                      };\n                      \n                      // Also enrich the user message with proper ID and details\n                      const conversationMessages = get().messages.get(conversation.id.toString()) || [];\n                      const lastUserMessage = conversationMessages.filter(m => m.role === 'user').pop();\n                      if (lastUserMessage && lastUserMessage.id === userMessage.id && latestApiMessage.user_query) {\n                        lastUserMessage.id = `${latestApiMessage.id}-user`;\n                        lastUserMessage.timestamp = latestApiMessage.created_at || latestApiMessage.timestamp || lastUserMessage.timestamp;\n                        lastUserMessage.details = {\n                          user_id: latestApiMessage.user_id,\n                          conversation_id: latestApiMessage.conversation_id,\n                          updated_at: latestApiMessage.updated_at,\n                          prompt_id: latestApiMessage.id,\n                          metadata: latestApiMessage.metadata ? {\n                            user_ip: latestApiMessage.metadata.user_ip,\n                            user_agent: latestApiMessage.metadata.user_agent,\n                            external_id: latestApiMessage.metadata.external_id,\n                            request_source: latestApiMessage.metadata.request_source,\n                          } : undefined,\n                        };\n                        get().addMessage(conversation.id.toString(), lastUserMessage);\n                      }\n                      \n                      // Enrich citations if they exist\n                      // Preserve existing citations from streaming if API doesn't provide them\n                      const existingCitations = finalMessage.citations || [];\n                      \n                      if (latestApiMessage.citations && Array.isArray(latestApiMessage.citations) && latestApiMessage.citations.length > 0) {\n                        if (typeof latestApiMessage.citations[0] === 'number') {\n                          // Citations are IDs, fetch details\n                          const citationDetails = await fetchCitationDetails(latestApiMessage.citations, currentAgent.id);\n                          finalMessage.citations = citationDetails;\n                        } else {\n                          // Citations might already be objects\n                          finalMessage.citations = latestApiMessage.citations;\n                        }\n                      } else {\n                        // Keep existing citations from streaming if API doesn't provide any\n                        finalMessage.citations = existingCitations;\n                      }\n                      \n                      // Update feedback if present\n                      if (latestApiMessage.response_feedback?.reaction) {\n                        finalMessage.feedback = latestApiMessage.response_feedback.reaction === 'liked' ? 'like' : \n                                               latestApiMessage.response_feedback.reaction === 'disliked' ? 'dislike' : \n                                               undefined;\n                      }\n                      \n                      // Update the enriched message in the store (it's already added, so this updates it)\n                      get().addMessage(conversation.id.toString(), finalMessage);\n                      \n                      logger.info('MESSAGES', 'Successfully enriched streaming message with API data', {\n                        messageId: finalMessage.id,\n                        hasDetails: !!finalMessage.details,\n                        citationCount: finalMessage.citations?.length || 0\n                      });\n                    } else {\n                      // API message exists but doesn't have expected format\n                      logger.info('MESSAGES', 'API message format mismatch, keeping original message');\n                    }\n                  } else {\n                    // No API messages found\n                    logger.info('MESSAGES', 'No API messages found for enrichment');\n                  }\n                } catch (enrichmentError) {\n                  logger.warn('MESSAGES', 'Failed to enrich streaming message, keeping basic version', enrichmentError);\n                  // Message is already added, enrichment failed but user can still see the response\n                }\n              }\n            }\n        );\n      } catch (setupError) {\n        logger.error('MESSAGES', 'Failed to setup streaming', setupError);\n        throw setupError;\n      }\n    } catch (error: any) {\n      logger.error('MESSAGES', 'Failed to send message', error, {\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n        status: error.status,\n        agentId: currentAgent.id,\n        conversationId: conversation.id,\n        sessionId: conversation.session_id\n      });\n      \n      // Update user message status\n      userMessage.status = 'error';\n      get().addMessage(conversation.id.toString(), userMessage);\n      \n      // Extract error details including status code\n      let errorText = 'Failed to send message';\n      if (error.status) {\n        switch (error.status) {\n          case 429:\n            errorText = 'You have exhausted your current query credits. Please contact customer service for assistance.';\n            break;\n          case 401:\n            errorText = 'API Token is either missing or invalid';\n            break;\n          case 403:\n            // Check if agent is inactive by looking at current agent status\n            const agentStore = useAgentStore.getState();\n            const { currentAgent: currentAgentFor403 } = agentStore;\n            if (currentAgentFor403 && !currentAgentFor403.is_chat_active) {\n              errorText = 'Agent is inactive - no documents uploaded. Please add documents to activate the agent.';\n            } else {\n              errorText = 'Access denied. You don\\'t have permission to access this resource.';\n            }\n            break;\n          case 404:\n            errorText = 'Agent or conversation not found';\n            break;\n          case 400:\n            errorText = 'Invalid request format';\n            break;\n          case 500:\n            errorText = 'Internal server error. Please try again later.';\n            break;\n          default:\n            errorText = error.message || `Error ${error.status}`;\n        }\n      } else if (error.message) {\n        errorText = error.message;\n      }\n      \n      set({ \n        streamingMessage: null,\n        isStreaming: false,\n        error: errorText,\n        loading: false,\n      });\n      \n      throw error;\n    }\n  },\n\n  /**\n   * Add or update a message in the store\n   * \n   * Features:\n   * - Handles both new messages and updates\n   * - Maintains message order\n   * - Automatically saves to local storage\n   * - Efficient update using message ID lookup\n   * \n   * @param conversationId - The conversation to add the message to\n   * @param message - The message to add or update\n   */\n  addMessage: (conversationId: string, message: ChatMessage) => {\n    set(state => {\n      const newMessages = new Map(state.messages);\n      const conversationMessages = newMessages.get(conversationId) || [];\n      \n      // Check if message already exists and update it\n      const existingIndex = conversationMessages.findIndex(m => m.id === message.id);\n      if (existingIndex >= 0) {\n        // Update existing message\n        conversationMessages[existingIndex] = message;\n      } else {\n        // Add new message\n        conversationMessages.push(message);\n      }\n      \n      newMessages.set(conversationId, conversationMessages);\n      \n      // Save to local storage as fallback\n      saveMessagesToStorage(conversationId, conversationMessages);\n      \n      return { messages: newMessages };\n    });\n  },\n\n  /**\n   * Update the currently streaming message\n   * \n   * Used during streaming to append content chunks\n   * and update citations as they arrive\n   * \n   * @param content - Content chunk to append\n   * @param citations - Updated citations (optional)\n   */\n  updateStreamingMessage: (content: string, citations?: Citation[]) => {\n    set(state => {\n      if (!state.streamingMessage) return state;\n      \n      return {\n        streamingMessage: {\n          ...state.streamingMessage,\n          content: state.streamingMessage.content + content, // Append content\n          citations: citations || state.streamingMessage.citations, // Update citations if provided\n        },\n      };\n    });\n  },\n\n  clearMessages: (conversationId?: string) => {\n    set(state => {\n      if (conversationId) {\n        const newMessages = new Map(state.messages);\n        newMessages.delete(conversationId);\n        return { messages: newMessages };\n      } else {\n        // Clear all messages\n        return { messages: new Map() };\n      }\n    });\n  },\n\n  updateMessageFeedback: async (messageId: string, feedback: FeedbackType) => {\n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    const { currentConversation } = conversationStore;\n    \n    if (!currentAgent || !currentConversation) {\n      logger.warn('MESSAGES', 'Cannot update feedback - missing agent or conversation');\n      return;\n    }\n\n    // Find the message\n    const conversationMessages = get().messages.get(currentConversation.id.toString()) || [];\n    const message = conversationMessages.find(m => m.id === messageId);\n    \n    if (!message) {\n      logger.warn('MESSAGES', 'Message not found for feedback update', { messageId });\n      return;\n    }\n\n    // Get the prompt ID from message details or try to extract from message ID\n    let promptId: number | undefined;\n    \n    if (message.details?.prompt_id) {\n      promptId = message.details.prompt_id;\n    } else {\n      // Try to extract from message ID format \"{promptId}-assistant\" or \"{promptId}-user\"\n      const promptIdMatch = message.id.match(/^(\\d+)-/);\n      if (promptIdMatch) {\n        promptId = parseInt(promptIdMatch[1]);\n      }\n    }\n    \n    if (!promptId) {\n      logger.error('MESSAGES', 'Could not determine prompt ID for message', { messageId, details: message.details });\n      toast.error('Unable to update feedback. Message ID not found.');\n      return;\n    }\n    const sessionId = currentConversation.session_id;\n    \n    if (!sessionId) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversationId: currentConversation.id });\n      return;\n    }\n\n    try {\n      // Update local state immediately (optimistic update)\n      const updatedMessage = { ...message, feedback };\n      get().addMessage(currentConversation.id.toString(), updatedMessage);\n\n      // Send to API\n      const client = getClient();\n      \n      // Map feedback directly to API format (no neutral option)\n      const feedbackValue = feedback === 'like' ? 'thumbs_up' : 'thumbs_down';\n      \n      logger.info('MESSAGES', 'Updating message feedback', {\n        projectId: currentAgent.id,\n        sessionId,\n        promptId,\n        feedback: feedbackValue\n      });\n      \n      const response = await client.updateMessageFeedback(\n        currentAgent.id,\n        sessionId,\n        promptId,\n        { feedback: feedbackValue }\n      );\n      \n      // The feedback was already updated optimistically above\n      // The response doesn't include the updated message data in the expected format\n      logger.info('MESSAGES', 'Message feedback updated successfully');\n      \n      // Show success toast\n      toast.success('Thanks for your feedback!');\n      \n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to update message feedback', error);\n      \n      // Revert local state on error\n      get().addMessage(currentConversation.id.toString(), message);\n      \n      // Show error toast\n      if ((error as any)?.status === 401) {\n        toast.error('Authentication failed. Please log in again.');\n      } else if ((error as any)?.status === 404) {\n        toast.error('Message not found.');\n      } else {\n        toast.error('Failed to update feedback. Please try again.');\n      }\n    }\n  },\n\n  // Utility methods\n  getMessagesForConversation: (conversationId: string): ChatMessage[] => {\n    return get().messages.get(conversationId) || [];\n  },\n\n  cancelStreaming: () => {\n    globalStreamManager.cancelAllStreams();\n    set({ \n      streamingMessage: null,\n      isStreaming: false,\n    });\n  },\n\n  /**\n   * Load message history for a conversation\n   * \n   * API Response Handling:\n   * - Supports multiple response formats from the API\n   * - Converts API format to internal ChatMessage format\n   * - Falls back to local storage if API fails\n   * - Handles both user_query and openai_response fields\n   * - Fetches citation details for citation IDs\n   * \n   * @param conversationId - The conversation to load messages for\n   */\n  loadMessages: async (conversationId: string) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    if (isDemoMode) {\n      logger.info('MESSAGES', 'Skipping message load in demo mode', { conversationId });\n      // Just ensure the conversation has an entry in the messages map\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    // Skip API calls for locally created conversations (they don't exist on server)\n    if (conversationId.startsWith('conv_')) {\n      logger.info('MESSAGES', 'Skipping API load for local conversation', { conversationId });\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    const { currentAgent } = agentStore;\n    const { conversations } = conversationStore;\n    \n    if (!currentAgent) {\n      logger.warn('MESSAGES', 'No current agent when loading messages', { conversationId });\n      return;\n    }\n\n    // Find the conversation to get its session_id\n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) {\n      logger.error('MESSAGES', 'Conversation not found in store', { \n        conversationId,\n        availableConversations: conversations.map(c => c.id)\n      });\n      // Don't set error, just ensure empty message array exists\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n\n    logger.info('MESSAGES', 'Loading messages for conversation', {\n      conversationId,\n      sessionId: conversation.session_id,\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n\n    set({ loading: true, error: null });\n\n    try {\n      const client = getClient();\n      const response = await client.getMessages(currentAgent.id, conversation.session_id);\n      logger.info('MESSAGES', 'Messages API response received', {\n        conversationId,\n        responseType: typeof response,\n        hasData: !!(response as any)?.data,\n        dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n      });\n      \n      // Handle different response formats from the API\n      let messages = [];\n      if (response && typeof response === 'object') {\n        // API documentation shows response format: { status: \"success\", data: { conversation: {...}, messages: { data: [...] } } }\n        if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n          messages = (response as any).data.messages.data;\n        } else if (Array.isArray((response as any).data)) {\n          messages = (response as any).data;\n        } else if (Array.isArray(response)) {\n          messages = response;\n        } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n          messages = (response as any).data.data;\n        }\n      }\n      \n      logger.info('MESSAGES', 'Processing messages', {\n        conversationId,\n        messagesCount: messages.length,\n        messageTypes: messages.map((m: any) => m.role || 'unknown')\n      });\n      \n      // Convert API messages to our format\n      // Each API message contains both user_query and openai_response, so we need to create two ChatMessage objects\n      const formattedMessages: ChatMessage[] = [];\n      \n      if (Array.isArray(messages)) {\n        // Process messages and fetch citation details\n        for (const msg of messages) {\n          const baseTimestamp = msg.created_at || msg.timestamp || new Date().toISOString();\n          \n          // Add user message\n          if (msg.user_query) {\n            formattedMessages.push({\n              id: `${msg.id}-user` || `user-${Math.random()}`,\n              role: 'user',\n              content: msg.user_query,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              details: {\n                user_id: msg.user_id,\n                conversation_id: msg.conversation_id,\n                updated_at: msg.updated_at,\n                prompt_id: msg.id,\n                metadata: msg.metadata ? {\n                  user_ip: msg.metadata.user_ip,\n                  user_agent: msg.metadata.user_agent,\n                  external_id: msg.metadata.external_id,\n                  request_source: msg.metadata.request_source,\n                } : undefined,\n              },\n            });\n          }\n          \n          // Add assistant message\n          if (msg.openai_response) {\n            // Fetch citation details if citations exist\n            let citationDetails: Citation[] = [];\n            if (msg.citations && Array.isArray(msg.citations) && msg.citations.length > 0) {\n              // Check if citations are already objects (future-proofing) or just IDs\n              if (typeof msg.citations[0] === 'number') {\n                // Citations are IDs, fetch details\n                citationDetails = await fetchCitationDetails(msg.citations, currentAgent.id);\n              } else {\n                // Citations might already be objects, use as is\n                citationDetails = msg.citations;\n              }\n            }\n            \n            formattedMessages.push({\n              id: `${msg.id}-assistant` || `assistant-${Math.random()}`,\n              role: 'assistant',\n              content: msg.openai_response,\n              citations: citationDetails,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              feedback: msg.response_feedback?.reaction === 'liked' ? 'like' : \n                       msg.response_feedback?.reaction === 'disliked' ? 'dislike' : \n                       undefined,\n              details: {\n                user_id: msg.user_id,\n                conversation_id: msg.conversation_id,\n                updated_at: msg.updated_at,\n                prompt_id: msg.id,\n                metadata: msg.metadata ? {\n                  user_ip: msg.metadata.user_ip,\n                  user_agent: msg.metadata.user_agent,\n                  external_id: msg.metadata.external_id,\n                  request_source: msg.metadata.request_source,\n                } : undefined,\n              },\n            });\n          }\n        }\n      }\n\n      logger.info('MESSAGES', 'Messages formatted successfully', {\n        conversationId,\n        formattedCount: formattedMessages.length\n      });\n\n      // Sort messages by timestamp to ensure chronological order\n      formattedMessages.sort((a, b) => {\n        const dateA = new Date(a.timestamp).getTime();\n        const dateB = new Date(b.timestamp).getTime();\n        return dateA - dateB; // Ascending order (oldest first)\n      });\n\n      logger.info('MESSAGES', 'Messages sorted by timestamp', {\n        conversationId,\n        firstMessageTime: formattedMessages[0]?.timestamp,\n        lastMessageTime: formattedMessages[formattedMessages.length - 1]?.timestamp\n      });\n\n      set(state => {\n        const newMessages = new Map(state.messages);\n        \n        // Preserve any local messages that might be in sending state\n        const existingMessages = state.messages.get(conversationId) || [];\n        const localSendingMessages = existingMessages.filter(msg => \n          msg.status === 'sending' || \n          (msg.role === 'user' && \n           new Date(msg.timestamp).getTime() > Date.now() - 5000) // Messages sent in last 5 seconds\n        );\n        \n        // Merge local sending messages with API messages\n        const mergedMessages = [...formattedMessages];\n        for (const localMsg of localSendingMessages) {\n          if (!mergedMessages.find(m => m.id === localMsg.id)) {\n            // Insert local message at the appropriate position based on timestamp\n            const insertIndex = mergedMessages.findIndex(m => \n              new Date(m.timestamp).getTime() > new Date(localMsg.timestamp).getTime()\n            );\n            if (insertIndex === -1) {\n              mergedMessages.push(localMsg);\n            } else {\n              mergedMessages.splice(insertIndex, 0, localMsg);\n            }\n          }\n        }\n        \n        newMessages.set(conversationId, mergedMessages);\n        \n        // Save to local storage as fallback\n        saveMessagesToStorage(conversationId, mergedMessages);\n        \n        return { \n          messages: newMessages,\n          loading: false,\n        };\n      });\n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to load messages', error, {\n        conversationId,\n        agentId: currentAgent.id,\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        status: (error as any)?.status,\n        message: (error as any)?.message\n      });\n      \n      // Try to load from local storage as fallback\n      const cachedMessages = loadMessagesFromStorage(conversationId);\n      if (cachedMessages && cachedMessages.length > 0) {\n        logger.info('MESSAGES', 'Using cached messages as fallback', {\n          conversationId,\n          messageCount: cachedMessages.length\n        });\n        \n        // Sort cached messages by timestamp to ensure chronological order\n        cachedMessages.sort((a, b) => {\n          const dateA = new Date(a.timestamp).getTime();\n          const dateB = new Date(b.timestamp).getTime();\n          return dateA - dateB; // Ascending order (oldest first)\n        });\n        \n        set(state => {\n          const newMessages = new Map(state.messages);\n          newMessages.set(conversationId, cachedMessages);\n          return { \n            messages: newMessages,\n            loading: false,\n            error: 'Using cached messages (API unavailable)'\n          };\n        });\n      } else {\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to load messages',\n          loading: false,\n        });\n      }\n    }\n  },\n  \n  /**\n   * Clear the error state\n   */\n  clearError: () => {\n    set({ error: null });\n  },\n  \n  /**\n   * Set messages for a specific conversation\n   * Used for updating conversation messages directly\n   */\n  setMessagesForConversation: (conversationId: string, messages: ChatMessage[]) => {\n    set(state => {\n      const newMessages = new Map(state.messages);\n      newMessages.set(conversationId, messages);\n      return { messages: newMessages };\n    });\n  },\n\n  /**\n   * Regenerate the last assistant response\n   * \n   * Flow:\n   * 1. Find the last user message in the conversation\n   * 2. Remove the last assistant message\n   * 3. Resend the user message to get a new response\n   */\n  regenerateLastResponse: async () => {\n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    const { currentConversation } = conversationStore;\n    \n    if (!currentAgent || !currentConversation) {\n      logger.error('MESSAGES', 'Cannot regenerate - missing agent or conversation');\n      toast.error('Cannot regenerate response. Please select a conversation.');\n      return;\n    }\n\n    const conversationId = currentConversation.id.toString();\n    const messages = get().getMessagesForConversation(conversationId);\n    \n    if (messages.length < 2) {\n      logger.warn('MESSAGES', 'Not enough messages to regenerate');\n      toast.error('No response to regenerate.');\n      return;\n    }\n\n    // Find the last user message and last assistant message\n    let lastUserMessage: ChatMessage | null = null;\n    let lastAssistantMessage: ChatMessage | null = null;\n    let lastAssistantIndex = -1;\n\n    // Iterate backwards to find the last assistant and user messages\n    for (let i = messages.length - 1; i >= 0; i--) {\n      const msg = messages[i];\n      if (!lastAssistantMessage && msg.role === 'assistant' && msg.status !== 'error') {\n        lastAssistantMessage = msg;\n        lastAssistantIndex = i;\n      }\n      if (!lastUserMessage && msg.role === 'user' && lastAssistantMessage) {\n        lastUserMessage = msg;\n        break;\n      }\n    }\n\n    if (!lastUserMessage || !lastAssistantMessage) {\n      logger.warn('MESSAGES', 'Could not find valid user/assistant message pair to regenerate');\n      toast.error('No valid response to regenerate.');\n      return;\n    }\n\n    logger.info('MESSAGES', 'Regenerating response', {\n      conversationId,\n      userMessageId: lastUserMessage.id,\n      assistantMessageId: lastAssistantMessage.id,\n      userContent: lastUserMessage.content.substring(0, 50)\n    });\n\n    // Remove the last assistant message\n    const updatedMessages = [...messages];\n    updatedMessages.splice(lastAssistantIndex, 1);\n    get().setMessagesForConversation(conversationId, updatedMessages);\n\n    // Save to local storage\n    saveMessagesToStorage(conversationId, updatedMessages);\n\n    try {\n      // Resend the last user message\n      await get().sendMessage(lastUserMessage.content);\n      \n      logger.info('MESSAGES', 'Response regenerated successfully');\n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to regenerate response', error);\n      \n      // Restore the original assistant message on error\n      get().setMessagesForConversation(conversationId, messages);\n      saveMessagesToStorage(conversationId, messages);\n      \n      toast.error('Failed to regenerate response. Please try again.');\n    }\n  },\n}));","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + {\"135\":\"300cf3128c7b3899f41e\",\"139\":\"b5b36620976f04410283\",\"236\":\"f4f1e2e8242e227a0fbf\",\"258\":\"088a5955ad60da7b0eac\",\"352\":\"932975b3c3dcb3907cb8\",\"365\":\"f366977150fc0db74e96\",\"404\":\"d6cb89542ef4f6025d04\",\"482\":\"61ff49824d046d57452e\",\"613\":\"3f83b3c90df78f917118\",\"638\":\"e1c53d34514d703a4e96\",\"964\":\"7561879d4b6c10001d9e\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t30: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = Object(typeof self !== 'undefined' ? self : this)[\"webpackChunkCustomGPTWidget\"] = Object(typeof self !== 'undefined' ? self : this)[\"webpackChunkCustomGPTWidget\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","__webpack_require__.nc = undefined;","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [96], () => (__webpack_require__(4398)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["root","factory","exports","module","define","amd","self","this","deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","buttonVariants","cva","variants","variant","default","join","destructive","outline","secondary","ghost","link","premium","size","sm","lg","xl","icon","defaultVariants","Button","React","className","asChild","loading","loadingText","children","disabled","onClick","props","ref","ripples","setRipples","handleClick","e","rect","currentTarget","getBoundingClientRect","rippleX","clientX","left","rippleY","clientY","top","rippleId","Date","now","prev","x","y","id","setTimeout","filter","ripple","_jsxs","cn","map","_jsx","style","transform","width","height","animation","xmlns","fill","viewBox","cx","cy","r","stroke","strokeWidth","d","displayName","sizeVariants","xs","container","md","shapeVariants","circle","rounded","square","Avatar","agent","src","alt","shape","fallback","isSelected","imageError","setImageError","avatarUrl","settings","chatbot_avatar","altText","project_name","sizeClasses","shapeClass","backgroundClass","onError","handleImageError","renderFallbackIcon","iconClass","User","Bot","AgentAvatar","UserAvatar","CitationCard","citation","index","isExpanded","onToggle","onPreviewClick","title","source","url","ChevronDown","AnimatePresence","motion","div","initial","opacity","animate","exit","transition","duration","content","href","target","rel","ExternalLink","FileText","CitationList","citations","onCitationClick","maxVisible","expanded","setExpanded","useState","Set","showAll","setShowAll","visibleCitations","slice","hasMore","length","BookOpen","idx","delay","has","citationId","newExpanded","delete","add","toggleExpanded","MessageDetails","details","setIsExpanded","handleCopyValue","async","copyToClipboard","value","toast","success","Info","ChevronUp","detailsText","JSON","stringify","Copy","undefined","user_id","DetailRow","label","String","onCopy","conversation_id","updated_at","toLocaleString","metadata","user_ip","user_agent","truncate","external_id","request_source","CodeBlock","language","copied","setCopied","SyntaxHighlighter","oneDark","customStyle","margin","borderRadius","fontSize","StreamingCursor","MessageContent","isStreaming","cleanedContent","replace","trim","ReactMarkdown","remarkPlugins","remarkGfm","components","code","match","exec","a","MessageActions","message","onFeedback","isLastAssistant","feedback","setFeedback","handleFeedback","type","regenerateLastResponse","useMessageStore","state","ThumbsUp","ThumbsDown","error","RotateCw","Message","isLast","mode","isUser","role","messages","currentConversation","useConversationStore","getState","getMessagesForConversation","toString","status","formatTimestamp","timestamp","DemoModeContext","createContext","isRuntimeDemoMode","deploymentMode","isInitialized","isFreeTrialMode","useDemoModeContext","context","useContext","Error","Spinner","Loader2","Skeleton","LoadingOverlay","visible","blur","MessageSkeleton","isAssistant","lines","Array","from","_","i","ConversationSkeleton","count","TooltipProvider","TooltipPrimitive","Tooltip","TooltipTrigger","TooltipContent","sideOffset","SpeechToTextButton","onTranscription","onTranscriptionStart","onTranscriptionEnd","isMobile","isRecording","setIsRecording","isProcessing","setIsProcessing","recordingDuration","setRecordingDuration","mediaRecorderRef","useRef","audioChunksRef","recordingTimeoutRef","durationIntervalRef","stopRecording","useCallback","current","stop","clearTimeout","clearInterval","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","mimeType","MediaRecorder","isTypeSupported","mediaRecorder","ondataavailable","event","data","push","onstop","audioBlob","Blob","getTracks","forEach","track","processAudio","start","startTime","setInterval","elapsed","Math","floor","info","reader","FileReader","readAsDataURL","onloadend","base64Data","result","split","headers","localStorage","getItem","window","__demoOpenAIKey","response","fetch","method","body","ok","errorData","json","catch","includes","text","onerror","isActive","formatDuration","seconds","padStart","MicOff","Mic","AnimatedVoiceIcon","barHeights","bars","gap","animationDelay","background","DropdownMenu","DropdownMenuPrimitive","DropdownMenuTrigger","inset","ChevronRight","DropdownMenuContent","DropdownMenuItem","checked","Check","Circle","DropdownMenuLabel","DropdownMenuSeparator","FileChip","file","onRemove","fileIcon","getFileIcon","scale","name","formatFileSize","_Fragment","progress","AlertCircle","X","FileUploadButton","onUpload","fileInputRef","multiple","accept","CONSTANTS","ACCEPTED_FILE_TYPES","onChange","files","click","Paperclip","RESPONSE_SOURCES","description","MessageSquare","Brain","Settings","CHATBOT_MODELS","capabilities","Sparkles","Zap","COMMON_PERSONAS","AGENT_CAPABILITIES","enterprise","ChatInput","onSend","placeholder","maxLength","MAX_MESSAGE_LENGTH","onVoiceClick","input","setInput","setFiles","isTranscribing","setIsTranscribing","isLoadingSettings","setIsLoadingSettings","showSettings","setShowSettings","textareaRef","currentAgent","useAgentStore","getSettings","updateSettings","updateLocalSettings","useChatSettingsStore","response_source","chatbot_model","custom_persona","agent_capability","loadAgentSettings","client","getClient","getAgentSettings","loadedSettings","useEffect","updateSetting","key","updates","validModels","m","some","find","c","updateAgentSettings","adjustTextareaHeight","textarea","scrollHeight","maxHeight","min","handleSubmit","preventDefault","fileObjects","f","focus","handleFileUpload","newFiles","uploadFiles","MAX_FILE_SIZE","isFileTypeAllowed","generateId","uploadFile","simulateUpload","interval","random","round","getRootProps","getInputProps","isDragActive","useDropzone","onDrop","noClick","noKeyboard","reduce","acc","maxSize","canSend","handleTranscription","prevInput","newInput","handleTranscriptionStart","handleTranscriptionEnd","Upload","removeFile","fileId","onSubmit","onKeyDown","shiftKey","rows","overflowY","Send","SlidersHorizontal","align","Icon","model","persona","capability","TypingIndicator","iconSizeClasses","display","parent","parentElement","document","createElement","innerHTML","appendChild","AgentItem","onSelect","onSettingsClick","is_chat_active","stopPropagation","AgentSelector","isOpen","setIsOpen","isSelectingAgent","setIsSelectingAgent","loadingSettings","setLoadingSettings","dropdownRef","agents","fetchAgents","loadMoreAgents","selectAgent","setAgents","paginationMeta","fetchAgentSettings","agentsNeedingSettings","agentsToLoad","newSet","settingsPromises","agentId","results","Promise","all","updatedAgents","handleClickOutside","contains","addEventListener","removeEventListener","handleRefresh","handleSelectAgent","RefreshCw","willOpen","location","BarChart3","isArray","totalCount","useMediaQuery","query","matches","setMatches","media","matchMedia","listener","useBreakpoint","isTablet","isDesktop","isLargeScreen","isTouchDevice","isMobileOrTablet","isTabletOrDesktop","widgetToastQueues","Map","WidgetToaster","sessionId","Toaster","position","closeButton","toastOptions","zIndex","marginTop","richColors","theme","getWidgetToast","set","options","globalToast","widgetSessionId","warning","dismiss","WidgetContext","WidgetProvider","widgetInstance","useMemo","widget","Provider","useWidgetSafe","WidgetDebugger","constructor","_defineProperty","getInstance","instance","log","category","level","debugEnabled","logEntry","toISOString","logHistory","inspectLocalStorage","allKeys","Object","keys","widgetKeys","messageKeys","conversationKeys","contents","parse","allKeysCount","widgetKeysCount","getDebugInfo","conversations","getConversations","currentConversationId","widgetStores","__customgpt_widget_stores","messageStore","config","conversationCount","messagesMapSize","messagesMapKeys","hasMessageStore","hasConversationStore","conversationStore","hasAgentStore","agentStore","debugConversation","conversationId","get","traceMessageFlow","action","exportLogs","clearLogs","setDebugEnabled","enabled","__customgpt_debug","instances","__customgpt_widget_instances","instanceKeys","widgetDebugger","__customgpt_debug_trace","__customgpt_debug_storage","__customgpt_debug_clear","confirm","removeItem","createMessageStore","MESSAGES_STORAGE_KEY","saveMessagesToStorage","storageKey","setItem","stored","cache","messageCount","cacheKey","actualKeys","messageIds","storageKeys","create","streamingMessage","sendMessage","isDemoMode","__customgpt_demo_mode","logger","agentName","messageLength","hasFiles","conversation","ensureConversation","parseInt","session_id","hasSessionId","isNew","message_count","userMessage","conversationIdType","messageId","currentMapKeys","substring","addMessage","assistantMessage","messageContent","resolve","demoResponse","updateStreamingMessage","finalMessage","sendMessageStream","prompt","chunk","hasContent","contentLength","contentPreview","streamError","messageData","openai_response","fallbackError","updateConversation","loadMessages","currentMapSize","cachedMessages","sessionStorageKey","sessionStored","hasSessionStored","sessionStoredLength","fromKey","hasCache","cacheSize","foundMessages","cacheKeys","cacheKeyTypes","k","checkedKeys","allLocalStorageKeys","reason","loadMessagesFromStorage","hasMessages","firstMessage","newMap","newMapSize","newMapKeys","mapNowHasConversation","messageRole","newMessages","existingMessageCount","mapHasConversation","existingIndex","findIndex","newMessageCount","clearMessages","cancelStreaming","globalStreamManager","cancelAllStreams","updateMessageFeedback","convId","messageIndex","updatedMessages","reset","clearError","setMessagesForConversation","createConversationStore","CONVERSATIONS_STORAGE_KEY","ACTIVITY_STORAGE_KEY","saveConversationsToStorage","loadConversationsFromStorage","loadActivityFromStorage","allConversations","lastConversationActivity","currentPage","totalPages","totalConversations","perPage","sortOrder","sortBy","userFilter","searchQuery","searchMode","dateFilter","fetchConversations","projectId","params","loadConversations","widgetConvKey","widgetConvIds","queryParams","page","per_page","order","orderBy","paginationData","widgetConversations","conv","totalFromAPI","widgetSpecific","current_page","last_page","applyFilters","cached","cachedConversations","sessionConversations","totalCached","sessionSpecific","createConversation","sessionIdForConv","newConversation","project_id","created_at","deleted_at","existingConvIds","deleteConversation","selectConversation","activity","saveActivityToStorage","existingConversation","filtered","toLowerCase","filterDate","setHours","setDate","getDate","setSearchQuery","setSearchMode","setDateFilter","createAgentStore","AGENTS_STORAGE_KEY","SELECTED_AGENT_KEY","saveAgentsToStorage","saveSelectedAgentToStorage","loadAgents","__customgpt_widget_instance","hasWidget","configuredAgentId","fallbackAgent","is_shared","team_id","getAgent","settingsResponse","hasAvatar","settingsError","warn","hasSettings","demoAgent","getAgents","total","selectedAgentId","loadSelectedAgentFromStorage","selectedAgent","demoAgents","widgetKey","updateAgent","updatedAgent","deleteAgent","createAgent","replicateAgent","getAgentStats","messages_sent","users_interacted","last_message_at","WidgetStoreContext","WidgetStoreProvider","storesRef","stores","CitationDetailsModal","onClose","setLoading","setError","citationData","setCitationData","globalStore","widgetStoreContext","effectiveProjectId","fetchCitationDetails","getCitation","hasImage","image","err","errorMessage","Loader","Globe","ImageIcon","CitationFilePreview","fileName","fileContent","setFileContent","contentType","setContentType","fetchFilePreview","previewCitationFile","content_type","clipboard","writeText","handleDownload","blob","URL","createObjectURL","download","removeChild","revokeObjectURL","Download","MessageErrorDisplay","statusCode","propStatusCode","onRetry","parsedStatusCode","statusMatch","parseError","finalStatusCode","errorDetails","getErrorDetails","iconClassName","textClassName","UserX","showSupport","Search","CreditCard","supportUrl","ServerCrash","showRetry","XCircle","useIsInWidgetContext","useWidgetStores","isInWidget","useGlobalMessageStore","widgetStore","useStore","useGlobalConversationStore","useGlobalAgentStore","ThemeManager","easing","crossfade","registerBuiltInThemes","initialize","canvas","currentTheme","init","registerTheme","registration","registeredThemes","unregisterTheme","themeId","getAvailableThemes","values","reg","getThemeMetadata","switchTheme","transitionOptions","isTransitioning","callbacks","onThemeError","newTheme","performThemeTransition","getCurrentTheme","getCurrentThemeId","setCallbacks","draw","displayWidth","displayHeight","projCenterX","projCenterY","deltaTime","drawTransition","onUserSpeaking","transitionTheme","onProcessing","onAiSpeaking","setMousePosition","canvasWidth","canvasHeight","setHovering","hovering","getPerformanceMetrics","dispose","then","DefaultTheme","performanceProfile","previewColors","previewDescription","StarfieldTheme","JarvisTheme","LegoTheme","StarWarsTheme","OceanWaveTheme","NFTTheme","NothingPhoneTheme","MinecraftTheme","FuturisticTheme","VintageModernTheme","AuroraTheme","oldTheme","oldThemeId","transitionProgress","onTransitionStart","performance","currentTime","applyEasing","completeTransition","requestAnimationFrame","onThemeChange","onTransitionComplete","tempCanvas1","tempCanvas2","tempCtx1","getContext","tempCtx2","clearRect","globalAlpha","drawImage","t","Canvas","forwardRef","internalRef","canvasRef","themeManagerRef","isInitializedRef","themeManager","resizeCanvas","innerWidth","innerHeight","debouncedResize","func","timeoutId","args","debounce","handleMouseMove","lastCall","timeSinceLastCall","throttle","handleMouseEnter","handleMouseLeave","animationFrameId","lastTime","frameInterval","frameCount","fpsTime","currentFPS","render","currentWidth","currentHeight","currentProjCenterX","currentProjCenterY","cancelAnimationFrame","getThemeManager","useVoiceSettingsStore","persist","selectedVoice","selectedPersona","isVoiceModalOpen","setVoice","voice","setPersona","setVoiceModalOpen","partialize","VoiceSettings","useRouter","previewVoice","setPreviewVoice","previewPersona","setPreviewPersona","previewModel","setPreviewModel","desc","StreamingTTSManager","initAudioContext","audioContext","AudioContext","webkitAudioContext","resume","addTextChunk","audioBuffer","textToSpeech","audioQueue","isPlaying","playNextChunk","addAudioBuffer","addAudioBufferWithId","chunkId","pendingChunks","nextExpectedChunkId","response_format","arrayBuffer","decodeAudioData","onPlaybackComplete","shift","currentSource","createBufferSource","buffer","connect","destination","onended","stopPlayback","clear","resetChunkCounter","isCurrentlyPlaying","getQueueLength","onPlaybackCompleted","callback","onStreamingError","destroy","close","speechManager","debug","stopSourceIfNeeded","audioLength","audioDuration","onReset","sourceIsStarted","streamingTTS","toFixed","validate","sendData","createAudioBlob","wavBuffer","utils","encodeWAV","samples","sendStreamingData","formData","FormData","append","voiceSettings","conversationLength","conversationThusFar","audioSize","lastMessages","preview","base64Encode","__demoCustomGPTKey","errorText","processStreamingResponse","handleError","getReader","decoder","TextDecoder","fullResponse","transcript","currentStreamingActive","done","read","decode","line","startsWith","parsed","onStreamingTextChunk","audioUrl","audioId","queueAudioChunk","queueAudioChunkById","responseLength","onTranscriptReceived","onResponseReceived","onStreamingComplete","releaseLock","audioDataUrl","numericChunkId","sampleRate","numberOfChannels","clonedBlob","minDuration","valid","hasCallbacks","setProjectId","setSessionId","setVoiceSettings","setChatbotModel","chatbotModel","onDebug","str","TextEncoder","encode","btoa","fromCharCode","Uint8Array","base64Decode","base64","binaryStr","atob","bytes","char","charCodeAt","clearConversation","getConversationThusFar","getSessionId","setConversationHistory","cleanedMessages","msg","originalCount","stopAudio","parseMarkdownForVoice","encrypt","decrypt","encrypted","isValidApiKey","trimmedKey","apiKey","test","STORAGE_KEY","OPENAI_STORAGE_KEY","ENCRYPTION_KEY","SESSION_KEY","SESSION_TIMEOUT","useDemoStore","openAIApiKey","encryptionKey","isAuthenticated","sessionStartTime","sessionTimeout","setApiKey","encKey","array","crypto","getRandomValues","byte","generateKey","sessionStorage","sessionInfo","setOpenAIApiKey","clearApiKey","validateSession","initializeFromStorage","restoreSession","sessionData","encryptedOpenAI","openAIKey","hidden","VoiceModalContent","projectName","setTranscript","agentResponse","setAgentResponse","isManualRecording","setIsManualRecording","setMediaRecorder","apiKeyError","setApiKeyError","isAgentSpeaking","setIsAgentSpeaking","isSettingsOpen","setIsSettingsOpen","voiceState","setVoiceState","isStreamingText","setIsStreamingText","streamingResponse","setStreamingResponse","currentUserMessageId","setCurrentUserMessageId","voiceConversation","setVoiceConversation","conversationSetupRef","checkOpenAIKeyAvailability","vad","useMicVAD","preSpeechPadFrames","positiveSpeechThreshold","negativeSpeechThreshold","minSpeechFrames","startOnLoad","workletURL","modelURL","onSpeechStart","onSpeechEnd","onVADMisfire","onMisfire","demoApiKey","sort","b","getTime","setupConversation","placeholderUserMessage","targetConversation","errorMsg","currentTitle","voiceTitle","cleanTranscript","words","updatedUserMessage","textChunk","newText","cleanResponse","onStreamingAudioReady","listening","pause","errored","handleToggleListening","recoveryError","permissionError","vadError","handleManualRecording","echoCancellation","noiseSuppression","autoGainControl","recorder","chunks","decodedAudio","channelData","getChannelData","audioArray","resampleRatio","newLength","Float32Array","srcIndex","srcIndexFloor","srcIndexCeil","fraction","hasAutoStarted","setHasAutoStarted","handleStopSpeech","jsx","global","pointerEvents","RotateLoader","color","AlertTriangle","flexDirection","animationDirection","animationDuration","StopCircle","VoiceModal","DEFAULT_EXAMPLE_PROMPTS","ExamplePromptCard","WelcomeMessage","onPromptClick","exampleQuestions","setExampleQuestions","example_questions","questionCount","fetchExampleQuestions","MessageArea","scrollRef","isLoadingMessages","setIsLoadingMessages","prevConversationId","setPrevConversationId","selectedCitationId","setSelectedCitationId","citationModalOpen","setCitationModalOpen","previewCitationId","setPreviewCitationId","previewModalOpen","setPreviewModalOpen","setIsFreeTrialMode","freeTrialFlag","conversationMessages","timeout","scrollBehavior","scrollTo","behavior","handleCitationClick","citationIndex","citationTitle","handlePreviewClick","lastUserMessage","pop","filteredMessages","handleMessageFeedback","ChatHeader","onAgentSettings","enableConversationManagement","maxConversations","onConversationChange","onCreateConversation","conversationRefreshKey","ChatContainer","threadId","onMessage","setCurrentConversationId","setIsVoiceModalOpen","voiceError","setVoiceError","agentCount","hasCurrentAgent","currentAgentName","initializeAgents","switchConversation","newConv","configuration","fileCount","isAuthError","handleVoiceClick","available","Select","SelectPrimitive","SelectValue","SelectTrigger","SelectScrollUpButton","SelectScrollDownButton","SelectContent","SelectItem","SimpleSelect","onValueChange","option","ConversationDetailsModal","formatFullTimestamp","weekday","year","month","day","hour","minute","second","timeZoneName","Hash","Calendar","Clock","created_by","DeleteConversationDialog","conversationName","onConfirm","onCancel","isDeleting","setIsDeleting","Trash2","ConversationItem","onDelete","onRename","isEditing","setIsEditing","editName","setEditName","showMenu","setShowMenu","showDetails","setShowDetails","showDetailsModal","setShowDetailsModal","showDeleteDialog","setShowDeleteDialog","isLoading","setIsLoading","inputRef","menuRef","select","handleSaveEdit","onBlur","MoreHorizontal","Edit3","ConversationSidebar","isCollapsed","onConversationSelect","isCreating","setIsCreating","showSortFilter","setShowSortFilter","isSearching","setIsSearching","storeSearchQuery","storeSearchMode","storeDateFilter","localSearchQuery","setLocalSearchQuery","debouncedSearch","handleSearchModeChange","filteredConversations","handleSelectConversation","errorType","handleRenameConversation","newName","handleSearch","Filter","handleDateFilterChange","Link","toLocaleDateString","Plus","handleDeleteConversation","ChatLayout","showSidebar","sidebarCollapsed","setSidebarCollapsed","mobileSidebarOpen","setMobileSidebarOpen","storeCurrentConversation","conversationToLoad","handleToggleSidebar","FloatingButton","onMinimize","primaryColor","showLabel","isHovered","setIsHovered","iconSizes","button","whileHover","whileTap","onMouseEnter","onMouseLeave","backgroundColor","repeat","Infinity","ease","MessageCircle","CustomGPTWidget","enableCitations","enableFeedback","isolateConversations","modePrefix","containerId","uniqueId","substr","generateSessionId","instanceKey","initializeClient","require","useProxy","apiUrl","proxyUrl","__customgpt_api_url","__customgpt_sessions","__customgpt_session","createContainer","createFloatingButton","persistedConversationId","existingConversations","persistedConversation","setState","fullConversation","__customgpt_active_widget_session","getElementById","setupFloatingStyles","assign","boxShadow","overflow","classList","bottom","right","fetchAgentAvatar","agentAvatar","floatingButtonRoot","floatingButtonContainer","createRoot","FloatingButtonApp","toggle","buttonSize","WidgetApp","currentConvId","handleClose","open","currentConversations","idType","found","searchedId","conversationDetails","hasWidgetStores","hasSessionStore","availableSessions","storeHasLoadMessages","convIdStr","originalId","stringId","typeOfOriginal","availableStores","storeConversations","widgetConversation","createdAt","unshift","saveConversations","updateConversationTitle","newTitle","DOMException","cleanupOldConversations","recent","onOpen","unmount","parentNode","updateConfig","newConfig","refresh","isOpened","CustomGPTWidgetAPI","apiParams","responseType","hasData","dataLength","messagesCount","updatedAllConversations","updatedConversation","generateConversationName","__customgpt_current_session","sessions","sessionIds","onRehydrateStorage","inputs","twMerge","clsx","parseFloat","pow","fileType","allowedTypes","date","diffInMs","diffInMinutes","diffInHours","diffInDays","parseStreamChunk","delta","choices","jsonError","cleanedMessage","API_TIMEOUT","STREAM_TIMEOUT","RETRY_ATTEMPTS","RETRY_DELAY","lerp","end","factor","clamp","max","distance2D","x1","y1","x2","y2","dx","dy","sqrt","hslToRgb","h","s","l","hue2rgb","p","q","Logger","isClient","formatMessage","entry","stack","formatted","toUpperCase","writeToFile","logs","getLogs","apiRequest","endpoint","apiResponse","apiError","authCheck","authError","navigation","route","storeAction","store","BaseTheme","super","sphereRadius","gemini","idle","g","gradient","userSpeaking","processing","aiSpeaking","hover","instagram","ocean","sunset","aurora","particlePool","ObjectPool","z","velX","velY","velZ","age","dead","projX","projY","alpha","attack","hold","decay","initValue","holdValue","lastValue","stuckTime","accelX","accelY","accelZ","particle","next","maxParticles","setColor","getColorPalette","onInit","getMaxParticles","onDraw","centerX","centerY","updateColors","updateParticles","renderParticles","onStateChange","newState","palette","VoiceState","USER_SPEAKING","framesPerRotation","colorTransitionSpeed","numToAddEachFrame","particleAlpha","particleRad","gravity","PROCESSING","AI_SPEAKING","IDLE","getThemeSpecificMetrics","particleCount","currentParticleCount","colorScheme","currentColorScheme","setColorScheme","scheme","colorSchemes","targetR","targetG","targetB","currentR","currentG","currentB","wait","dynamicNumParticles","mouseInfluence","particlesToCreate","createParticle","dynamicTurnSpeed","PI","turnAngle","theta","phi","acos","mouseDistortion","mouseBias","normalizedMouseX","normalizedMouseY","x0","sin","cos","y0","z0","velocityMultiplier","addParticle","sphereCenterY","sphereCenterZ","alphaMultiplier","vx0","vy0","vz0","newParticle","acquire","particleList","first","sinAngle","cosAngle","zMax","focalLength","nextParticle","randAccelX","randAccelY","randAccelZ","rotX","rotZ","radiusScale","updateParticleAlpha","recycleParticle","renderParticle","finalAlpha","zeroAlphaDepth","particleSize","fillStyle","beginPath","arc","shouldEnableGlow","release","onDispose","nestedData","paginatedResponse","fetchSettingsForAgents","agentsWithoutSettings","validResults","nextPage","newAgents","responseTotal","responsePage","findAgent","newAgent","agentWithSettings","entries","updatedSettings","filteredAgents","PerformanceMonitor","targetFPS","update","frameTime","fps","fpsHistory","frameTimeHistory","maxHistorySize","avgFPS","sum","performanceRatio","criticalThreshold","onPerformanceCritical","warningThreshold","onPerformanceWarning","onFPSUpdate","getCurrentMetrics","DeviceCapabilityDetector","detectCapabilities","detectMobile","supportsWebGL","detectWebGL","hardwareConcurrency","memoryGB","memory","jsHeapSizeLimit","performanceLevel","benchmarkPerformance","isLowPowerDevice","detectLowPowerDevice","userAgent","cores","operations","benchmark","getCapabilities","createFn","resetFn","initialSize","obj","inUse","oldest","getStats","StreamHandler","retryAttempts","retryDelay","processStream","abortController","AbortController","currentMessage","isComplete","cancel","onComplete","processLine","onChunk","onCitation","abort","getCurrentMessage","maxConcurrentStreams","startStream","streamId","streams","cancelStream","handler","getActiveStreams","getStreamStatus","exists","getActiveStreamCount","THEME_COOKIE_NAME","getThemeFromCookie","themeCookie","cookie","applyThemeToDocument","documentElement","remove","setTheme","setThemeCookie","useConfigStore","baseURL","setBaseURL","setThemeUtil","initializeTheme","useUIStore","sidebarOpen","settingsOpen","setSidebarOpen","setSettingsOpen","setFontSize","formatDate","getDefaultDateRange","endDate","startDate","useAnalyticsStore","analytics","dateRange","fetchAnalytics","trafficReport","queriesReport","conversationsReport","analysisReport","getTrafficReport","getQueriesReport","getConversationsReport","getAnalysisReport","conversationsTotal","queriesTotal","avgQueriesPerConv","average_queries_per_conversation","Number","analyticsData","active","trend","item","created_at_interval","queries_number","queries","successful","query_status","failed","avgResponseTime","topQueries","traffic","uniqueUsers","sources","request_source_number","pageViews","avgSessionDuration","bounceRate","users","statistics","totalMessages","avgMessagesPerConversation","satisfactionRate","responseAccuracy","setDateRange","exportAnalytics","format","jsonData","usePageStore","pages","paginationInfo","limit","crawl_status","index_status","fetchPages","isClientInitialized","getPages","deletePage","pageId","reindexPage","setQueryParams","useSourceStore","syncStatus","syncing","fetchSources","getSources","allSources","sitemaps","apiSource","sitemap_path","uploads","fetchSource","sourceId","uploadSources","uploadPromises","reject","updateSource","deleteSource","bulkDelete","sourceIds","syncSources","setFilter","selectSource","useProfileStore","profile","fetchProfile","getUserProfile","updateProfile","profilePhoto","updateUserProfile","errors","profile_photo","flat","activeRequests","useProjectSettingsStore","settingsLoading","plugins","pluginsLoading","pluginsError","stats","statsLoading","statsError","fetchSettings","requestKey","settingsUpdate","defaultValues","ending_message","no_answer_message","try_asking_questions_msg","view_more_msg","view_less_msg","citations_answer_source_label_msg","citations_sources_label_msg","hang_in_there_msg","chatbot_siesta_msg","question","File","stringValue","fetchPlugins","getProjectPlugins","pluginsData","updatePlugin","pluginId","updateProjectPlugin","plugin","fetchStats","statsData","useLicenseStore","licenses","fetchLicenses","getLicenses","dataType","errorStatus","errorCode","responseText","createLicense","dataStructure","licenseKey","newLicense","license","licenseName","updateLicense","licenseId","deleteLicense","initializeStores","cleanupStores","LODManager","initialLOD","particleReduction","effectsDisabled","glowDisabled","simplifiedRendering","skipFrames","currentLOD","lodProfiles","updateLOD","metrics","lastPerformanceCheck","performanceHistory","adjustLODBasedOnFPS","getCurrentLOD","shouldSkipFrame","FrustumCuller","updateBounds","bounds","near","far","isVisible","cullParticles","particles","getCullingStats","culled","cullingRatio","BatchRenderer","addToBatch","glowEnabled","effectsEnabled","batchKey","batches","batch","maxBatchSize","renderBatches","lodSettings","save","shouldRenderEffects","shouldRenderGlow","renderSimplifiedBatch","renderFullBatch","restore","moveTo","renderEffects","renderGlow","glowGradient","createRadialGradient","addColorStop","clearBatches","getBatchStats","batchCount","totalParticles","largestBatch","avgBatchSize","MemoryOptimizer","checkMemoryPressure","pressure","shouldCleanup","memInfo","usedJSHeapSize","memoryPressureThreshold","lastGCTime","gcInterval","getOptimizationSuggestions","reduceParticles","clearCaches","disableEffects","simplifyRendering","AnimationController","setTargetFPS","setupVisibilityHandling","actualInterval","shouldRenderFrame","lastFrameTime","getFrameTiming","shouldThrottle","ThemePerformanceManager","lodManager","culler","batchRenderer","memoryOptimizer","animationController","shouldRender","memoryPressure","optimizationActive","getManagers","lod","getPerformanceReport","culling","batching","performanceMonitor","performanceSettings","enableEffects","enableGlow","qualityLevel","initializePerformanceCallbacks","updateDimensions","initializePerformanceManager","setupPerformanceSettings","performanceManager","perfUpdate","currentLODSettings","updateTiming","updateStateTransition","updateMouseInfluence","clearCanvas","shouldShowPerformanceOverlay","drawPerformanceOverlay","setTargetState","mouseX","mouseY","targetMouseInfluence","isHovering","onMouseMove","onHoverChange","normalizedX","normalizedY","detector","getOptimalParticleCount","quality","light","low","medium","high","heavy","adjustPerformanceSettings","targetState","stateTransition","currentState","stateTransitionSpeed","deltaTimeAccumulator","animationTime","process","fillRect","font","fillText","getStateColor","idleColor","activeColor","getMouseInfluencedValue","baseValue","influencedValue","shouldEnableEffects","baseMax","getCurrentLODLevel","shouldUseSimplifiedRendering","getPerformanceManagers","isParticleVisible","managers","webpackEmptyContext","req","clearSettings","newSettings","DEMO_STORAGE_KEYS","UsageTracker","NEXT_PUBLIC_ANALYTICS_ENDPOINT","startFlushTimer","fullEvent","eventType","eventName","getDeploymentMode","demoType","getDemoType","clientVersion","NEXT_PUBLIC_APP_VERSION","referrer","eventQueue","batchSize","flush","trackApiCall","trackSessionStart","trackSessionEnd","trackLimitReached","limitType","trackError","demoSession","flushTimer","flushInterval","events","analyticsEndpoint","forceFlush","usageTracker","DEMO_ERROR_MESSAGES","retryAfter","proxyClient","globalApiUrl","setApiUrl","setDemoApiKey","request","requestId","controller","abortControllers","isFormData","baseHeaders","session","signal","responseData","updated","errorInfo","getErrorMessage","isFreeTrialError","streamRequest","cancelRequest","cancelAllRequests","URLSearchParams","queryString","getMessages","getMessageById","getPageMetadata","updatePageMetadata","getLicense","createSitemapSource","executive_js","data_refresh_frequency","create_new_pages","remove_unexist_pages","refresh_existing_pages","uploadFileSource","updateSourceSettings","instantSyncSource","getCustomerIntelligence","getUserLimits","getDemoUsageStats","cleanupDemoSession","DirectCustomGPTClient","hasApiKey","clientInstance","initialized","getApiClient","resetApiClient","apiClient","citationIds","validCitationIds","validIds","isNaN","arr","indexOf","original","validateCitationIds","hasUrl","requested","fetched","hasSourceIds","requestData","source_ids","citationDetails","updatedCurrent","prompt_id","apiMessages","latestApiMessage","user_query","existingCitations","response_feedback","reaction","hasDetails","citationCount","enrichmentError","setupError","currentAgentFor403","promptId","promptIdMatch","updatedMessage","feedbackValue","availableConversations","messageTypes","formattedMessages","baseTimestamp","formattedCount","firstMessageTime","lastMessageTime","localSendingMessages","mergedMessages","localMsg","insertIndex","splice","lastAssistantMessage","lastAssistantIndex","userMessageId","assistantMessageId","userContent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","O","chunkIds","fn","priority","notFulfilled","fulfilled","j","every","n","getter","__esModule","getPrototypeOf","ns","def","getOwnPropertyNames","definition","o","defineProperty","enumerable","promises","u","miniCssF","globalThis","Function","prop","prototype","hasOwnProperty","script","needAttach","scripts","getElementsByTagName","getAttribute","charset","nc","setAttribute","onScriptComplete","onload","doneFns","bind","head","Symbol","toStringTag","installedChunks","installedChunkData","promise","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}