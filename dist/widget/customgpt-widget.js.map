{"version":3,"file":"customgpt-widget.js","mappings":"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","sources":["webpack://CustomGPTWidget/webpack/universalModuleDefinition","webpack://CustomGPTWidget/webpack/runtime/chunk loaded","webpack://CustomGPTWidget/webpack/runtime/create fake namespace object","webpack://CustomGPTWidget/./node_modules/.pnpm/onnxruntime-web@1.22.0/node_modules/onnxruntime-web/dist/ sync","webpack://CustomGPTWidget/./src/store/messages.ts","webpack://CustomGPTWidget/./src/store/config.ts","webpack://CustomGPTWidget/./src/store/ui.ts","webpack://CustomGPTWidget/./src/store/analytics.ts","webpack://CustomGPTWidget/./src/store/pages.ts","webpack://CustomGPTWidget/./src/store/sources.ts","webpack://CustomGPTWidget/./src/store/profile.ts","webpack://CustomGPTWidget/./src/store/project-settings.ts","webpack://CustomGPTWidget/./src/store/licenses.ts","webpack://CustomGPTWidget/./src/store/index.ts","webpack://CustomGPTWidget/./src/lib/streaming/handler.ts","webpack://CustomGPTWidget/./src/lib/api/proxy-client.ts","webpack://CustomGPTWidget/./src/lib/api/client.ts","webpack://CustomGPTWidget/./src/components/ui/button.tsx","webpack://CustomGPTWidget/./src/components/ui/avatar.tsx","webpack://CustomGPTWidget/./src/components/chat/CitationList.tsx","webpack://CustomGPTWidget/./src/components/chat/MessageDetails.tsx","webpack://CustomGPTWidget/./src/components/chat/Message.tsx","webpack://CustomGPTWidget/./src/components/ui/loading.tsx","webpack://CustomGPTWidget/./src/components/ui/tooltip.tsx","webpack://CustomGPTWidget/./src/components/voice/VoiceButton.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatInput.tsx","webpack://CustomGPTWidget/./src/components/chat/TypingIndicator.tsx","webpack://CustomGPTWidget/./src/components/chat/AgentSelector.tsx","webpack://CustomGPTWidget/./src/components/chat/CitationDetailsModal.tsx","webpack://CustomGPTWidget/./src/components/chat/CitationFilePreview.tsx","webpack://CustomGPTWidget/./src/components/chat/ConversationManager.tsx","webpack://CustomGPTWidget/./src/components/chat/MessageErrorDisplay.tsx","webpack://CustomGPTWidget/./src/widget/WidgetContext.tsx","webpack://CustomGPTWidget/./src/store/widget-stores/messages.ts","webpack://CustomGPTWidget/./src/store/widget-stores/conversations.ts","webpack://CustomGPTWidget/./src/store/widget-stores/agents.ts","webpack://CustomGPTWidget/./src/widget/WidgetStoreContext.tsx","webpack://CustomGPTWidget/./src/hooks/useWidgetStore.ts","webpack://CustomGPTWidget/./src/components/voice/Canvas.tsx","webpack://CustomGPTWidget/./src/lib/voice/speech-manager.ts","webpack://CustomGPTWidget/./src/lib/voice/particle-manager.ts","webpack://CustomGPTWidget/./src/components/voice/VoiceModal.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatContainer.tsx","webpack://CustomGPTWidget/./src/components/chat/ConversationDetailsModal.tsx","webpack://CustomGPTWidget/./src/components/chat/DeleteConversationDialog.tsx","webpack://CustomGPTWidget/./src/components/chat/ConversationSidebar.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatLayout.tsx","webpack://CustomGPTWidget/./src/widget/index.tsx","webpack://CustomGPTWidget/./src/lib/logger.ts","webpack://CustomGPTWidget/./src/lib/utils.ts","webpack://CustomGPTWidget/./src/store/agents.ts","webpack://CustomGPTWidget/./src/store/conversations.ts","webpack://CustomGPTWidget/webpack/bootstrap","webpack://CustomGPTWidget/webpack/runtime/compat get default export","webpack://CustomGPTWidget/webpack/runtime/define property getters","webpack://CustomGPTWidget/webpack/runtime/global","webpack://CustomGPTWidget/webpack/runtime/hasOwnProperty shorthand","webpack://CustomGPTWidget/webpack/runtime/make namespace object","webpack://CustomGPTWidget/webpack/runtime/jsonp chunk loading","webpack://CustomGPTWidget/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"CustomGPTWidget\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CustomGPTWidget\"] = factory();\n\telse\n\t\troot[\"CustomGPTWidget\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; (typeof current == 'object' || typeof current == 'function') && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 396;\nmodule.exports = webpackEmptyContext;","/**\n * Message Store - Core Chat Functionality\n * \n * This store manages all message-related state and operations.\n * It's the heart of the chat system, handling:\n * - Message sending and receiving\n * - Real-time streaming responses\n * - Message history management\n * - Local storage fallback\n * - Error handling and retries\n * \n * Architecture:\n * - Uses Map for efficient conversation-based message storage\n * - Integrates with agent and conversation stores\n * - Handles both streaming and non-streaming API responses\n * - Provides local storage backup for offline access\n * \n * Key Features:\n * - Automatic conversation creation if needed\n * - Streaming with fallback to non-streaming\n * - Optimistic UI updates\n * - Message feedback tracking\n * - File upload support\n * \n * Features:\n * - Real-time streaming with local storage persistence\n * - Robust error handling with graceful fallbacks\n * - Comprehensive logging and debugging support\n * - Optimistic UI updates with consistent message ordering\n */\n\nimport { create } from 'zustand';\nimport type { MessageStore, ChatMessage, Citation, FeedbackType, MessageDetails, MessageMetadata } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useAgentStore } from './agents';\nimport { useConversationStore } from './conversations';\nimport { generateId } from '@/lib/utils';\nimport { globalStreamManager } from '@/lib/streaming/handler';\nimport { logger } from '@/lib/logger';\nimport { toast } from 'sonner';\n\n/**\n * Local storage configuration\n * Provides offline access and caching for better UX\n */\nconst MESSAGES_STORAGE_KEY = 'customgpt-messages-cache';\n\n/**\n * Save messages to local storage\n * Provides a fallback when API is unavailable\n * @param conversationId - The conversation to save messages for\n * @param messages - Array of messages to save\n */\nfunction saveMessagesToStorage(conversationId: string, messages: ChatMessage[]) {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    const cache = stored ? JSON.parse(stored) : {};\n    cache[conversationId] = messages;\n    localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n  } catch (error) {\n    // Silent fail - storage is optional\n  }\n}\n\n/**\n * Load messages from local storage\n * Used as fallback when API is unavailable\n * @param conversationId - The conversation to load messages for\n * @returns Array of messages or null if not found\n */\nfunction loadMessagesFromStorage(conversationId: string): ChatMessage[] | null {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    if (!stored) return null;\n    const cache = JSON.parse(stored);\n    return cache[conversationId] || null;\n  } catch (error) {\n    // Silent fail - storage is optional\n    return null;\n  }\n}\n\n/**\n * Fetch citation details by IDs\n * \n * Converts citation IDs to full citation objects with title, source, content\n * \n * @param citationIds - Array of citation IDs\n * @param projectId - The project/agent ID\n * @returns Array of citation objects with details\n */\nasync function fetchCitationDetails(citationIds: number[], projectId: number): Promise<Citation[]> {\n  const client = getClient();\n  const citations: Citation[] = [];\n  \n  for (let i = 0; i < citationIds.length; i++) {\n    const citationId = citationIds[i];\n    \n    try {\n      const response = await client.getCitation(projectId, citationId);\n      \n      if (response.data) {\n        citations.push({\n          id: citationId.toString(), // Convert to string as per Citation interface\n          index: i + 1, // 1-based index for display\n          title: response.data.title || `Citation ${i + 1}`,\n          source: response.data.url,\n          url: response.data.url,\n          content: response.data.description || '',\n        });\n      }\n    } catch (error) {\n      logger.warn('MESSAGES', 'Failed to fetch citation details', {\n        citationId,\n        error: error instanceof Error ? error.message : String(error)\n      });\n      // Fallback citation object if fetch fails\n      citations.push({\n        id: citationId.toString(), // Convert to string\n        index: i + 1,\n        title: `Citation ${i + 1}`,\n        source: '',\n        url: '',\n        content: 'Citation details unavailable',\n      });\n    }\n  }\n  \n  return citations;\n}\n\n/**\n * Message Store Implementation\n * \n * State Structure:\n * - messages: Map<conversationId, ChatMessage[]> - All messages grouped by conversation\n * - streamingMessage: Current message being streamed (null when not streaming)\n * - isStreaming: Whether a message is currently being streamed\n * - loading: General loading state for message operations\n * - error: Current error message if any\n */\nexport const useMessageStore = create<MessageStore>((set, get) => ({\n  // Initialize with empty state\n  messages: new Map(),\n  streamingMessage: null,\n  isStreaming: false,\n  loading: false,\n  error: null,\n\n  /**\n   * Send a message to the current agent\n   * \n   * Flow:\n   * 1. Validate agent selection\n   * 2. Ensure conversation exists (create if needed)\n   * 3. Create and add user message (optimistic update)\n   * 4. Upload files if present\n   * 5. Start streaming response\n   * 6. Fall back to non-streaming if streaming fails\n   * 7. Handle errors gracefully\n   * \n   * \n   * @param content - Message text\n   * @param files - Optional file attachments\n   */\n  sendMessage: async (content: string, files?: File[]) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    if (!currentAgent) {\n      logger.error('MESSAGES', 'No agent selected when trying to send message');\n      throw new Error('No agent selected');\n    }\n\n    logger.info('MESSAGES', 'Sending message', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name,\n      messageLength: content.length,\n      hasFiles: files && files.length > 0\n    });\n\n    // Ensure we have a conversation\n    const conversation = await conversationStore.ensureConversation(\n      currentAgent.id,\n      content\n    );\n\n    logger.info('MESSAGES', 'Conversation ensured', {\n      conversationId: conversation.id,\n      sessionId: conversation.session_id,\n      hasSessionId: !!conversation.session_id,\n      isNew: !conversation.message_count || conversation.message_count === 0\n    });\n\n    if (!conversation.session_id) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversation });\n      throw new Error('Conversation missing session_id');\n    }\n\n    set({ loading: true, error: null });\n\n    // Create user message\n    const userMessage: ChatMessage = {\n      id: generateId(),\n      role: 'user',\n      content,\n      timestamp: new Date().toISOString(),\n      status: 'sending',\n    };\n\n    // Add user message to store\n    get().addMessage(conversation.id.toString(), userMessage);\n\n    // Create assistant message placeholder\n    const assistantMessage: ChatMessage = {\n      id: generateId(),\n      role: 'assistant',\n      content: '',\n      timestamp: new Date().toISOString(),\n      citations: [],\n    };\n\n    set({ \n      streamingMessage: assistantMessage,\n      isStreaming: true,\n      loading: false,\n    });\n\n    try {\n      // Handle file uploads if present\n      let sourceIds: string[] = [];\n      if (files && files.length > 0) {\n        const client = getClient();\n        const uploadResponses = await Promise.all(\n          files.map(file => client.uploadFile(currentAgent.id, file))\n        );\n        \n        // Extract source IDs from upload responses\n        sourceIds = uploadResponses\n          .filter(response => response?.data?.id)\n          .map(response => response.data.id.toString());\n          \n        logger.info('MESSAGES', 'Files uploaded successfully', {\n          fileCount: files.length,\n          sourceIds: sourceIds\n        });\n      }\n\n      // Update user message status\n      userMessage.status = 'sent';\n      get().addMessage(conversation.id.toString(), userMessage);\n\n      // Start streaming with correct parameters\n      const client = getClient();\n      \n      logger.info('MESSAGES', 'Starting message stream', {\n        agentId: currentAgent.id,\n        sessionId: conversation.session_id,\n        messageContent: content.substring(0, 50),\n        hasSourceIds: sourceIds.length > 0,\n        sourceIds: sourceIds\n      });\n      \n      try {\n        // Prepare the request data\n        const requestData: { prompt: string; source_ids?: string[] } = { \n          prompt: content || '' // Ensure we always have a prompt, even if empty\n        };\n        \n        // Add source_ids if we have uploaded files\n        if (sourceIds.length > 0) {\n          requestData.source_ids = sourceIds;\n          \n          // If no text prompt was provided, add a default prompt for file analysis\n          if (!content.trim()) {\n            requestData.prompt = 'Please analyze the uploaded file(s).';\n          }\n        }\n        \n        await client.sendMessageStream(\n          currentAgent.id,\n          conversation.session_id,  // Use session_id instead of id\n          requestData,\n          (chunk) => {\n              logger.info('MESSAGES', 'Received stream chunk', { \n                type: chunk.type, \n                hasContent: !!chunk.content,\n                contentLength: chunk.content?.length,\n                contentPreview: chunk.content?.substring(0, 50)\n              });\n              \n              if (chunk.type === 'content' && chunk.content) {\n                get().updateStreamingMessage(chunk.content, chunk.citations);\n              } else if (chunk.type === 'citation' && chunk.citations) {\n                // Handle citation-only chunks\n                const current = get().streamingMessage;\n                if (current && chunk.citations && Array.isArray(chunk.citations)) {\n                  // Check if citations are IDs or objects\n                  if (chunk.citations.length > 0 && typeof chunk.citations[0] === 'number') {\n                    // Fetch citation details asynchronously\n                    fetchCitationDetails(chunk.citations as any as number[], currentAgent.id).then(citationDetails => {\n                      const updatedCurrent = get().streamingMessage;\n                      if (updatedCurrent) {\n                        set({\n                          streamingMessage: {\n                            ...updatedCurrent,\n                            citations: citationDetails\n                          }\n                        });\n                      }\n                    });\n                  } else {\n                    // Citations might already be objects\n                    set({\n                      streamingMessage: {\n                        ...current,\n                        citations: chunk.citations\n                      }\n                    });\n                  }\n                }\n              }\n            },\n            async (streamError) => {\n              logger.error('MESSAGES', 'Streaming failed, attempting fallback to non-streaming', streamError, {\n                errorMessage: streamError.message,\n                agentId: currentAgent.id,\n                sessionId: conversation.session_id\n              });\n              \n              // Try fallback to non-streaming API\n              try {\n                logger.info('MESSAGES', 'Using non-streaming fallback');\n                \n                const response = await client.sendMessage(\n                  currentAgent.id,\n                  conversation.session_id,\n                  { \n                    prompt: requestData.prompt,\n                    stream: false,\n                    source_ids: requestData.source_ids\n                  }\n                );\n                \n                // Update streaming message with the complete response\n                const finalMessage = get().streamingMessage;\n                if (finalMessage && response) {\n                  // Handle different response formats from API\n                  let messageData: any;\n                  if (response.data) {\n                    messageData = response.data;\n                  } else {\n                    // Direct response format - cast to any to handle the actual API structure\n                    messageData = response as any;\n                  }\n                  \n                  finalMessage.content = messageData?.openai_response || messageData?.content || 'No response received';\n                  \n                  // Fetch citation details if needed\n                  if (messageData?.citations && Array.isArray(messageData.citations) && messageData.citations.length > 0) {\n                    if (typeof messageData.citations[0] === 'number') {\n                      // Citations are IDs, fetch details\n                      finalMessage.citations = await fetchCitationDetails(messageData.citations, currentAgent.id);\n                    } else {\n                      // Citations might already be objects\n                      finalMessage.citations = messageData.citations;\n                    }\n                  } else {\n                    finalMessage.citations = [];\n                  }\n                  \n                  finalMessage.status = 'sent';\n                  \n                  // Update the message ID to include the prompt ID if available\n                  if (messageData?.id) {\n                    finalMessage.id = `${messageData.id}-assistant`;\n                    // Also update the user message ID\n                    const conversationMessages = get().messages.get(conversation.id.toString()) || [];\n                    const lastUserMessage = conversationMessages.filter(m => m.role === 'user').pop();\n                    if (lastUserMessage && lastUserMessage.id === userMessage.id) {\n                      lastUserMessage.id = `${messageData.id}-user`;\n                      get().addMessage(conversation.id.toString(), lastUserMessage);\n                    }\n                  }\n                  \n                  // Add details from the API response\n                  finalMessage.details = {\n                    user_id: messageData?.user_id,\n                    conversation_id: messageData?.conversation_id,\n                    updated_at: messageData?.updated_at,\n                    prompt_id: messageData?.id,\n                    metadata: messageData?.metadata ? {\n                      user_ip: messageData.metadata.user_ip,\n                      user_agent: messageData.metadata.user_agent,\n                      external_id: messageData.metadata.external_id,\n                      request_source: messageData.metadata.request_source,\n                    } : undefined,\n                  };\n                  get().addMessage(conversation.id.toString(), finalMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                logger.info('MESSAGES', 'Fallback to non-streaming successful');\n                \n              } catch (fallbackError: any) {\n                logger.error('MESSAGES', 'Both streaming and non-streaming failed', fallbackError);\n                \n                // Update assistant message with error\n                const errorMessage = get().streamingMessage;\n                if (errorMessage) {\n                  errorMessage.content = 'Sorry, I encountered an error while processing your message. Please try again.';\n                  errorMessage.status = 'error';\n                  get().addMessage(conversation.id.toString(), errorMessage);\n                }\n                \n                // Extract error details including status code\n                let errorText = 'Communication error';\n                if (fallbackError.status) {\n                  switch (fallbackError.status) {\n                    case 429:\n                      errorText = 'You have exhausted your current query credits. Please contact customer service for assistance.';\n                      break;\n                    case 401:\n                      errorText = 'API Token is either missing or invalid';\n                      break;\n                    case 404:\n                      errorText = 'Agent or conversation not found';\n                      break;\n                    case 400:\n                      errorText = 'Invalid request format';\n                      break;\n                    default:\n                      errorText = fallbackError.message || `Error ${fallbackError.status}`;\n                  }\n                } else if (fallbackError.message) {\n                  errorText = fallbackError.message;\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                  error: errorText,\n                });\n              }\n            },\n            async () => {\n              // onComplete callback - enrich streaming message with API data\n              const finalMessage = get().streamingMessage;\n              if (finalMessage) {\n                finalMessage.status = 'sent';\n                \n                // Add message immediately to ensure it's visible\n                get().addMessage(conversation.id.toString(), finalMessage);\n                \n                // Clear streaming state now that message is added\n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                // Fetch latest messages to enrich the streaming message with API metadata\n                try {\n                  logger.info('MESSAGES', 'Enriching streaming message with API data');\n                  const client = getClient();\n                  const response = await client.getMessages(currentAgent.id, conversation.session_id);\n                  \n                  // Process API response to find messages\n                  let apiMessages = [];\n                  if (response && typeof response === 'object') {\n                    if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n                      apiMessages = (response as any).data.messages.data;\n                    } else if (Array.isArray((response as any).data)) {\n                      apiMessages = (response as any).data;\n                    } else if (Array.isArray(response)) {\n                      apiMessages = response;\n                    } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n                      apiMessages = (response as any).data.data;\n                    }\n                  }\n                  \n                  if (apiMessages.length > 0) {\n                    // Find the most recent assistant message (should be our streaming message)\n                    const latestApiMessage = apiMessages[apiMessages.length - 1];\n                    \n                    if (latestApiMessage && latestApiMessage.openai_response) {\n                      // Enrich the streaming message with API data\n                      finalMessage.id = `${latestApiMessage.id}-assistant`;\n                      finalMessage.timestamp = latestApiMessage.created_at || latestApiMessage.timestamp || finalMessage.timestamp;\n                      \n                      // Add full message details\n                      finalMessage.details = {\n                        user_id: latestApiMessage.user_id,\n                        conversation_id: latestApiMessage.conversation_id,\n                        updated_at: latestApiMessage.updated_at,\n                        prompt_id: latestApiMessage.id,\n                        metadata: latestApiMessage.metadata ? {\n                          user_ip: latestApiMessage.metadata.user_ip,\n                          user_agent: latestApiMessage.metadata.user_agent,\n                          external_id: latestApiMessage.metadata.external_id,\n                          request_source: latestApiMessage.metadata.request_source,\n                        } : undefined,\n                      };\n                      \n                      // Also enrich the user message with proper ID and details\n                      const conversationMessages = get().messages.get(conversation.id.toString()) || [];\n                      const lastUserMessage = conversationMessages.filter(m => m.role === 'user').pop();\n                      if (lastUserMessage && lastUserMessage.id === userMessage.id && latestApiMessage.user_query) {\n                        lastUserMessage.id = `${latestApiMessage.id}-user`;\n                        lastUserMessage.timestamp = latestApiMessage.created_at || latestApiMessage.timestamp || lastUserMessage.timestamp;\n                        lastUserMessage.details = {\n                          user_id: latestApiMessage.user_id,\n                          conversation_id: latestApiMessage.conversation_id,\n                          updated_at: latestApiMessage.updated_at,\n                          prompt_id: latestApiMessage.id,\n                          metadata: latestApiMessage.metadata ? {\n                            user_ip: latestApiMessage.metadata.user_ip,\n                            user_agent: latestApiMessage.metadata.user_agent,\n                            external_id: latestApiMessage.metadata.external_id,\n                            request_source: latestApiMessage.metadata.request_source,\n                          } : undefined,\n                        };\n                        get().addMessage(conversation.id.toString(), lastUserMessage);\n                      }\n                      \n                      // Enrich citations if they exist\n                      // Preserve existing citations from streaming if API doesn't provide them\n                      const existingCitations = finalMessage.citations || [];\n                      \n                      if (latestApiMessage.citations && Array.isArray(latestApiMessage.citations) && latestApiMessage.citations.length > 0) {\n                        if (typeof latestApiMessage.citations[0] === 'number') {\n                          // Citations are IDs, fetch details\n                          const citationDetails = await fetchCitationDetails(latestApiMessage.citations, currentAgent.id);\n                          finalMessage.citations = citationDetails;\n                        } else {\n                          // Citations might already be objects\n                          finalMessage.citations = latestApiMessage.citations;\n                        }\n                      } else {\n                        // Keep existing citations from streaming if API doesn't provide any\n                        finalMessage.citations = existingCitations;\n                      }\n                      \n                      // Update feedback if present\n                      if (latestApiMessage.response_feedback?.reaction) {\n                        finalMessage.feedback = latestApiMessage.response_feedback.reaction === 'liked' ? 'like' : \n                                               latestApiMessage.response_feedback.reaction === 'disliked' ? 'dislike' : \n                                               undefined;\n                      }\n                      \n                      // Update the enriched message in the store (it's already added, so this updates it)\n                      get().addMessage(conversation.id.toString(), finalMessage);\n                      \n                      logger.info('MESSAGES', 'Successfully enriched streaming message with API data', {\n                        messageId: finalMessage.id,\n                        hasDetails: !!finalMessage.details,\n                        citationCount: finalMessage.citations?.length || 0\n                      });\n                    } else {\n                      // API message exists but doesn't have expected format\n                      logger.info('MESSAGES', 'API message format mismatch, keeping original message');\n                    }\n                  } else {\n                    // No API messages found\n                    logger.info('MESSAGES', 'No API messages found for enrichment');\n                  }\n                } catch (enrichmentError) {\n                  logger.warn('MESSAGES', 'Failed to enrich streaming message, keeping basic version', enrichmentError);\n                  // Message is already added, enrichment failed but user can still see the response\n                }\n              }\n            }\n        );\n      } catch (setupError) {\n        logger.error('MESSAGES', 'Failed to setup streaming', setupError);\n        throw setupError;\n      }\n    } catch (error: any) {\n      logger.error('MESSAGES', 'Failed to send message', error, {\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n        status: error.status,\n        agentId: currentAgent.id,\n        conversationId: conversation.id,\n        sessionId: conversation.session_id\n      });\n      \n      // Update user message status\n      userMessage.status = 'error';\n      get().addMessage(conversation.id.toString(), userMessage);\n      \n      // Extract error details including status code\n      let errorText = 'Failed to send message';\n      if (error.status) {\n        switch (error.status) {\n          case 429:\n            errorText = 'You have exhausted your current query credits. Please contact customer service for assistance.';\n            break;\n          case 401:\n            errorText = 'API Token is either missing or invalid';\n            break;\n          case 403:\n            // Check if agent is inactive by looking at current agent status\n            const agentStore = useAgentStore.getState();\n            const { currentAgent: currentAgentFor403 } = agentStore;\n            if (currentAgentFor403 && !currentAgentFor403.is_chat_active) {\n              errorText = 'Agent is inactive - no documents uploaded. Please add documents to activate the agent.';\n            } else {\n              errorText = 'Access denied. You don\\'t have permission to access this resource.';\n            }\n            break;\n          case 404:\n            errorText = 'Agent or conversation not found';\n            break;\n          case 400:\n            errorText = 'Invalid request format';\n            break;\n          case 500:\n            errorText = 'Internal server error. Please try again later.';\n            break;\n          default:\n            errorText = error.message || `Error ${error.status}`;\n        }\n      } else if (error.message) {\n        errorText = error.message;\n      }\n      \n      set({ \n        streamingMessage: null,\n        isStreaming: false,\n        error: errorText,\n        loading: false,\n      });\n      \n      throw error;\n    }\n  },\n\n  /**\n   * Add or update a message in the store\n   * \n   * Features:\n   * - Handles both new messages and updates\n   * - Maintains message order\n   * - Automatically saves to local storage\n   * - Efficient update using message ID lookup\n   * \n   * @param conversationId - The conversation to add the message to\n   * @param message - The message to add or update\n   */\n  addMessage: (conversationId: string, message: ChatMessage) => {\n    set(state => {\n      const newMessages = new Map(state.messages);\n      const conversationMessages = newMessages.get(conversationId) || [];\n      \n      // Check if message already exists and update it\n      const existingIndex = conversationMessages.findIndex(m => m.id === message.id);\n      if (existingIndex >= 0) {\n        // Update existing message\n        conversationMessages[existingIndex] = message;\n      } else {\n        // Add new message\n        conversationMessages.push(message);\n      }\n      \n      newMessages.set(conversationId, conversationMessages);\n      \n      // Save to local storage as fallback\n      saveMessagesToStorage(conversationId, conversationMessages);\n      \n      return { messages: newMessages };\n    });\n  },\n\n  /**\n   * Update the currently streaming message\n   * \n   * Used during streaming to append content chunks\n   * and update citations as they arrive\n   * \n   * @param content - Content chunk to append\n   * @param citations - Updated citations (optional)\n   */\n  updateStreamingMessage: (content: string, citations?: Citation[]) => {\n    set(state => {\n      if (!state.streamingMessage) return state;\n      \n      return {\n        streamingMessage: {\n          ...state.streamingMessage,\n          content: state.streamingMessage.content + content, // Append content\n          citations: citations || state.streamingMessage.citations, // Update citations if provided\n        },\n      };\n    });\n  },\n\n  clearMessages: (conversationId?: string) => {\n    set(state => {\n      if (conversationId) {\n        const newMessages = new Map(state.messages);\n        newMessages.delete(conversationId);\n        return { messages: newMessages };\n      } else {\n        // Clear all messages\n        return { messages: new Map() };\n      }\n    });\n  },\n\n  updateMessageFeedback: async (messageId: string, feedback: FeedbackType) => {\n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    const { currentConversation } = conversationStore;\n    \n    if (!currentAgent || !currentConversation) {\n      logger.warn('MESSAGES', 'Cannot update feedback - missing agent or conversation');\n      return;\n    }\n\n    // Find the message\n    const conversationMessages = get().messages.get(currentConversation.id.toString()) || [];\n    const message = conversationMessages.find(m => m.id === messageId);\n    \n    if (!message) {\n      logger.warn('MESSAGES', 'Message not found for feedback update', { messageId });\n      return;\n    }\n\n    // Get the prompt ID from message details or try to extract from message ID\n    let promptId: number | undefined;\n    \n    if (message.details?.prompt_id) {\n      promptId = message.details.prompt_id;\n    } else {\n      // Try to extract from message ID format \"{promptId}-assistant\" or \"{promptId}-user\"\n      const promptIdMatch = message.id.match(/^(\\d+)-/);\n      if (promptIdMatch) {\n        promptId = parseInt(promptIdMatch[1]);\n      }\n    }\n    \n    if (!promptId) {\n      logger.error('MESSAGES', 'Could not determine prompt ID for message', { messageId, details: message.details });\n      toast.error('Unable to update feedback. Message ID not found.');\n      return;\n    }\n    const sessionId = currentConversation.session_id;\n    \n    if (!sessionId) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversationId: currentConversation.id });\n      return;\n    }\n\n    try {\n      // Update local state immediately (optimistic update)\n      const updatedMessage = { ...message, feedback };\n      get().addMessage(currentConversation.id.toString(), updatedMessage);\n\n      // Send to API\n      const client = getClient();\n      \n      // Map feedback directly to API format (no neutral option)\n      const feedbackValue = feedback === 'like' ? 'thumbs_up' : 'thumbs_down';\n      \n      logger.info('MESSAGES', 'Updating message feedback', {\n        projectId: currentAgent.id,\n        sessionId,\n        promptId,\n        feedback: feedbackValue\n      });\n      \n      const response = await client.updateMessageFeedback(\n        currentAgent.id,\n        sessionId,\n        promptId,\n        { feedback: feedbackValue }\n      );\n      \n      // The feedback was already updated optimistically above\n      // The response doesn't include the updated message data in the expected format\n      logger.info('MESSAGES', 'Message feedback updated successfully');\n      \n      // Show success toast\n      toast.success('Thanks for your feedback!');\n      \n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to update message feedback', error);\n      \n      // Revert local state on error\n      get().addMessage(currentConversation.id.toString(), message);\n      \n      // Show error toast\n      if ((error as any)?.status === 401) {\n        toast.error('Authentication failed. Please log in again.');\n      } else if ((error as any)?.status === 404) {\n        toast.error('Message not found.');\n      } else {\n        toast.error('Failed to update feedback. Please try again.');\n      }\n    }\n  },\n\n  // Utility methods\n  getMessagesForConversation: (conversationId: string): ChatMessage[] => {\n    return get().messages.get(conversationId) || [];\n  },\n\n  cancelStreaming: () => {\n    globalStreamManager.cancelAllStreams();\n    set({ \n      streamingMessage: null,\n      isStreaming: false,\n    });\n  },\n\n  /**\n   * Load message history for a conversation\n   * \n   * API Response Handling:\n   * - Supports multiple response formats from the API\n   * - Converts API format to internal ChatMessage format\n   * - Falls back to local storage if API fails\n   * - Handles both user_query and openai_response fields\n   * - Fetches citation details for citation IDs\n   * \n   * @param conversationId - The conversation to load messages for\n   */\n  loadMessages: async (conversationId: string) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    if (isDemoMode) {\n      logger.info('MESSAGES', 'Skipping message load in demo mode', { conversationId });\n      // Just ensure the conversation has an entry in the messages map\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    // Skip API calls for locally created conversations (they don't exist on server)\n    if (conversationId.startsWith('conv_')) {\n      logger.info('MESSAGES', 'Skipping API load for local conversation', { conversationId });\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    const { currentAgent } = agentStore;\n    const { conversations } = conversationStore;\n    \n    if (!currentAgent) {\n      logger.warn('MESSAGES', 'No current agent when loading messages', { conversationId });\n      return;\n    }\n\n    // Find the conversation to get its session_id\n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) {\n      logger.error('MESSAGES', 'Conversation not found in store', { \n        conversationId,\n        availableConversations: conversations.map(c => c.id)\n      });\n      // Don't set error, just ensure empty message array exists\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n\n    logger.info('MESSAGES', 'Loading messages for conversation', {\n      conversationId,\n      sessionId: conversation.session_id,\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n\n    set({ loading: true, error: null });\n\n    try {\n      const client = getClient();\n      const response = await client.getMessages(currentAgent.id, conversation.session_id);\n      logger.info('MESSAGES', 'Messages API response received', {\n        conversationId,\n        responseType: typeof response,\n        hasData: !!(response as any)?.data,\n        dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n      });\n      \n      // Handle different response formats from the API\n      let messages = [];\n      if (response && typeof response === 'object') {\n        // API documentation shows response format: { status: \"success\", data: { conversation: {...}, messages: { data: [...] } } }\n        if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n          messages = (response as any).data.messages.data;\n        } else if (Array.isArray((response as any).data)) {\n          messages = (response as any).data;\n        } else if (Array.isArray(response)) {\n          messages = response;\n        } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n          messages = (response as any).data.data;\n        }\n      }\n      \n      logger.info('MESSAGES', 'Processing messages', {\n        conversationId,\n        messagesCount: messages.length,\n        messageTypes: messages.map((m: any) => m.role || 'unknown')\n      });\n      \n      // Convert API messages to our format\n      // Each API message contains both user_query and openai_response, so we need to create two ChatMessage objects\n      const formattedMessages: ChatMessage[] = [];\n      \n      if (Array.isArray(messages)) {\n        // Process messages and fetch citation details\n        for (const msg of messages) {\n          const baseTimestamp = msg.created_at || msg.timestamp || new Date().toISOString();\n          \n          // Add user message\n          if (msg.user_query) {\n            formattedMessages.push({\n              id: `${msg.id}-user` || `user-${Math.random()}`,\n              role: 'user',\n              content: msg.user_query,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              details: {\n                user_id: msg.user_id,\n                conversation_id: msg.conversation_id,\n                updated_at: msg.updated_at,\n                prompt_id: msg.id,\n                metadata: msg.metadata ? {\n                  user_ip: msg.metadata.user_ip,\n                  user_agent: msg.metadata.user_agent,\n                  external_id: msg.metadata.external_id,\n                  request_source: msg.metadata.request_source,\n                } : undefined,\n              },\n            });\n          }\n          \n          // Add assistant message\n          if (msg.openai_response) {\n            // Fetch citation details if citations exist\n            let citationDetails: Citation[] = [];\n            if (msg.citations && Array.isArray(msg.citations) && msg.citations.length > 0) {\n              // Check if citations are already objects (future-proofing) or just IDs\n              if (typeof msg.citations[0] === 'number') {\n                // Citations are IDs, fetch details\n                citationDetails = await fetchCitationDetails(msg.citations, currentAgent.id);\n              } else {\n                // Citations might already be objects, use as is\n                citationDetails = msg.citations;\n              }\n            }\n            \n            formattedMessages.push({\n              id: `${msg.id}-assistant` || `assistant-${Math.random()}`,\n              role: 'assistant',\n              content: msg.openai_response,\n              citations: citationDetails,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              feedback: msg.response_feedback?.reaction === 'liked' ? 'like' : \n                       msg.response_feedback?.reaction === 'disliked' ? 'dislike' : \n                       undefined,\n              details: {\n                user_id: msg.user_id,\n                conversation_id: msg.conversation_id,\n                updated_at: msg.updated_at,\n                prompt_id: msg.id,\n                metadata: msg.metadata ? {\n                  user_ip: msg.metadata.user_ip,\n                  user_agent: msg.metadata.user_agent,\n                  external_id: msg.metadata.external_id,\n                  request_source: msg.metadata.request_source,\n                } : undefined,\n              },\n            });\n          }\n        }\n      }\n\n      logger.info('MESSAGES', 'Messages formatted successfully', {\n        conversationId,\n        formattedCount: formattedMessages.length\n      });\n\n      // Sort messages by timestamp to ensure chronological order\n      formattedMessages.sort((a, b) => {\n        const dateA = new Date(a.timestamp).getTime();\n        const dateB = new Date(b.timestamp).getTime();\n        return dateA - dateB; // Ascending order (oldest first)\n      });\n\n      logger.info('MESSAGES', 'Messages sorted by timestamp', {\n        conversationId,\n        firstMessageTime: formattedMessages[0]?.timestamp,\n        lastMessageTime: formattedMessages[formattedMessages.length - 1]?.timestamp\n      });\n\n      set(state => {\n        const newMessages = new Map(state.messages);\n        \n        // Preserve any local messages that might be in sending state\n        const existingMessages = state.messages.get(conversationId) || [];\n        const localSendingMessages = existingMessages.filter(msg => \n          msg.status === 'sending' || \n          (msg.role === 'user' && \n           new Date(msg.timestamp).getTime() > Date.now() - 5000) // Messages sent in last 5 seconds\n        );\n        \n        // Merge local sending messages with API messages\n        const mergedMessages = [...formattedMessages];\n        for (const localMsg of localSendingMessages) {\n          if (!mergedMessages.find(m => m.id === localMsg.id)) {\n            // Insert local message at the appropriate position based on timestamp\n            const insertIndex = mergedMessages.findIndex(m => \n              new Date(m.timestamp).getTime() > new Date(localMsg.timestamp).getTime()\n            );\n            if (insertIndex === -1) {\n              mergedMessages.push(localMsg);\n            } else {\n              mergedMessages.splice(insertIndex, 0, localMsg);\n            }\n          }\n        }\n        \n        newMessages.set(conversationId, mergedMessages);\n        \n        // Save to local storage as fallback\n        saveMessagesToStorage(conversationId, mergedMessages);\n        \n        return { \n          messages: newMessages,\n          loading: false,\n        };\n      });\n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to load messages', error, {\n        conversationId,\n        agentId: currentAgent.id,\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        status: (error as any)?.status,\n        message: (error as any)?.message\n      });\n      \n      // Try to load from local storage as fallback\n      const cachedMessages = loadMessagesFromStorage(conversationId);\n      if (cachedMessages && cachedMessages.length > 0) {\n        logger.info('MESSAGES', 'Using cached messages as fallback', {\n          conversationId,\n          messageCount: cachedMessages.length\n        });\n        \n        // Sort cached messages by timestamp to ensure chronological order\n        cachedMessages.sort((a, b) => {\n          const dateA = new Date(a.timestamp).getTime();\n          const dateB = new Date(b.timestamp).getTime();\n          return dateA - dateB; // Ascending order (oldest first)\n        });\n        \n        set(state => {\n          const newMessages = new Map(state.messages);\n          newMessages.set(conversationId, cachedMessages);\n          return { \n            messages: newMessages,\n            loading: false,\n            error: 'Using cached messages (API unavailable)'\n          };\n        });\n      } else {\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to load messages',\n          loading: false,\n        });\n      }\n    }\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConfigStore } from '@/types';\n\n/**\n * Configuration Store\n * \n * Updated to remove API key storage for security.\n * API key is now stored securely on the server.\n * Only theme and other non-sensitive settings are persisted.\n */\nexport const useConfigStore = create<ConfigStore>()(\n  persist(\n    (set, get) => ({\n      apiKey: null, // Deprecated - kept for interface compatibility\n      baseURL: 'https://app.customgpt.ai/api/v1', // Not used anymore, server handles this\n      theme: 'light',\n\n      setApiKey: (key: string) => {\n        // No-op - API key is not stored client-side anymore\n        // This method is kept for backward compatibility\n        console.warn('API key storage has been disabled for security. Configure API key in server environment variables.');\n      },\n\n      setBaseURL: (url: string) => {\n        // No-op - base URL is configured on server\n        console.warn('Base URL configuration has been moved to server. Update CUSTOMGPT_API_BASE_URL in environment variables.');\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Update document class for theme\n        if (typeof window !== 'undefined') {\n          document.documentElement.className = theme;\n        }\n      },\n    }),\n    {\n      name: 'customgpt-config',\n      // Only persist non-sensitive data\n      partialize: (state) => ({\n        theme: state.theme,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Apply theme on rehydration\n        if (state?.theme && typeof window !== 'undefined') {\n          document.documentElement.className = state.theme;\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { UIStore } from '@/types';\n\nexport const useUIStore = create<UIStore>()(\n  persist(\n    (set) => ({\n      sidebarOpen: true,\n      settingsOpen: false,\n      theme: 'light',\n      fontSize: 'md',\n\n      setSidebarOpen: (open: boolean) => {\n        set({ sidebarOpen: open });\n      },\n\n      setSettingsOpen: (open: boolean) => {\n        set({ settingsOpen: open });\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Apply theme to document\n        if (typeof window !== 'undefined') {\n          document.documentElement.className = theme;\n        }\n      },\n\n      setFontSize: (size: 'sm' | 'md' | 'lg') => {\n        set({ fontSize: size });\n        \n        // Apply font size to document\n        if (typeof window !== 'undefined') {\n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (size) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }),\n    {\n      name: 'customgpt-ui',\n      partialize: (state) => ({\n        sidebarOpen: state.sidebarOpen,\n        theme: state.theme,\n        fontSize: state.fontSize,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Apply theme and font size on rehydration\n        if (typeof window !== 'undefined' && state) {\n          document.documentElement.className = state.theme;\n          \n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (state.fontSize) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface AnalyticsData {\n  conversations: {\n    total: number;\n    active: number;\n    trend: number;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  queries: {\n    total: number;\n    successful: number;\n    failed: number;\n    avgResponseTime: number;\n    topQueries: Array<{\n      query: string;\n      count: number;\n    }>;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  traffic: {\n    uniqueUsers: number;\n    pageViews: number;\n    avgSessionDuration: number;\n    bounceRate: number;\n    data: Array<{\n      date: string;\n      users: number;\n      pageViews: number;\n    }>;\n  };\n  statistics: {\n    totalMessages: number;\n    totalConversations: number;\n    avgMessagesPerConversation: number;\n    satisfactionRate: number;\n    responseAccuracy: number;\n  };\n}\n\ninterface AnalyticsState {\n  analytics: AnalyticsData | null;\n  loading: boolean;\n  error: string | null;\n  dateRange: {\n    startDate: string;\n    endDate: string;\n  };\n  \n  // Actions\n  fetchAnalytics: (projectId: number) => Promise<void>;\n  setDateRange: (startDate: string, endDate: string) => void;\n  exportAnalytics: (format: 'csv' | 'json' | 'pdf') => Promise<void>;\n  reset: () => void;\n}\n\n// Helper function to format dates for API\nconst formatDate = (date: Date): string => {\n  return date.toISOString().split('T')[0];\n};\n\n// Get default date range (last 30 days)\nconst getDefaultDateRange = () => {\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - 30);\n  \n  return {\n    startDate: formatDate(startDate),\n    endDate: formatDate(endDate),\n  };\n};\n\nexport const useAnalyticsStore = create<AnalyticsState>((set, get) => ({\n  analytics: null,\n  loading: false,\n  error: null,\n  dateRange: getDefaultDateRange(),\n\n  fetchAnalytics: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Fetch all reports data in parallel using documented endpoints\n      const [trafficReport, queriesReport, conversationsReport, analysisReport] = await Promise.all([\n        client.getTrafficReport(projectId),\n        client.getQueriesReport(projectId),\n        client.getConversationsReport(projectId),\n        client.getAnalysisReport(projectId, 'daily'),\n      ]);\n\n      // Transform the data to match our interface using actual API response structure\n      const analyticsData: AnalyticsData = {\n        conversations: {\n          total: conversationsReport.data?.total || 0,\n          active: Math.floor((conversationsReport.data?.total || 0) * 0.7), // Estimate active conversations\n          trend: 0, // Calculate trend from data if needed\n          data: analysisReport.data?.conversations?.map((item: any) => ({\n            date: item.created_at_interval,\n            count: Number(item.queries_number) || 0,\n          })) || [],\n        },\n        queries: {\n          total: queriesReport.data?.total || 0,\n          successful: queriesReport.data?.query_status?.find((s: any) => s.status === 'success')?.count || 0,\n          failed: queriesReport.data?.query_status?.find((s: any) => s.status === 'failed')?.count || 0,\n          avgResponseTime: 0, // Not provided by API\n          topQueries: [], // Not provided by these endpoints\n          data: analysisReport.data?.queries?.map((item: any) => ({\n            date: item.created_at_interval,\n            count: Number(item.queries_number) || 0,\n          })) || [],\n        },\n        traffic: {\n          uniqueUsers: trafficReport.data?.sources?.reduce((acc: number, source: any) => acc + (source.request_source_number || 0), 0) || 0,\n          pageViews: trafficReport.data?.sources?.reduce((acc: number, source: any) => acc + (source.request_source_number || 0), 0) || 0,\n          avgSessionDuration: 0, // Not provided by API\n          bounceRate: 0, // Not provided by API\n          data: trafficReport.data?.sources?.map((source: any) => ({\n            date: new Date().toISOString().split('T')[0], // Current date as traffic report doesn't have dates\n            users: source.request_source_number || 0,\n            pageViews: source.request_source_number || 0,\n          })) || [],\n        },\n        statistics: {\n          totalMessages: queriesReport.data?.total || 0,\n          totalConversations: conversationsReport.data?.total || 0,\n          avgMessagesPerConversation: Number(conversationsReport.data?.average_queries_per_conversation) || 0,\n          satisfactionRate: 0, // Not provided by API\n          responseAccuracy: 0, // Not provided by API\n        },\n      };\n\n      set({ analytics: analyticsData, loading: false });\n    } catch (error: any) {\n      console.error('Failed to fetch analytics:', error);\n      \n      let errorMessage = 'Failed to fetch analytics';\n      if (error.status === 401) {\n        errorMessage = 'Authentication required. Please log in again.';\n        toast.error('Your session has expired. Please log in again.');\n      } else if (error.status === 404) {\n        errorMessage = 'Analytics data not found for this project.';\n        toast.error('No analytics data available yet.');\n      } else if (error.status === 500) {\n        errorMessage = 'Server error occurred. Please try again later.';\n        toast.error('Server error. Please try again later.');\n      } else {\n        toast.error('Failed to fetch analytics data');\n      }\n      \n      set({ \n        analytics: null,\n        error: errorMessage,\n        loading: false,\n      });\n    }\n  },\n\n  setDateRange: (startDate: string, endDate: string) => {\n    set({ dateRange: { startDate, endDate } });\n  },\n\n  exportAnalytics: async (format: 'csv' | 'json' | 'pdf') => {\n    const analytics = get().analytics;\n    if (!analytics) {\n      toast.error('No analytics data to export');\n      return;\n    }\n\n    try {\n      // Implementation would depend on the format\n      switch (format) {\n        case 'json':\n          const jsonData = JSON.stringify(analytics, null, 2);\n          const blob = new Blob([jsonData], { type: 'application/json' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `analytics-${new Date().toISOString()}.json`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          URL.revokeObjectURL(url);\n          toast.success('Analytics exported successfully');\n          break;\n          \n        case 'csv':\n          // Would need a CSV conversion library or custom implementation\n          toast.info('CSV export not yet implemented');\n          break;\n          \n        case 'pdf':\n          // Would need a PDF generation library\n          toast.info('PDF export not yet implemented');\n          break;\n      }\n    } catch (error) {\n      console.error('Failed to export analytics:', error);\n      toast.error('Failed to export analytics');\n    }\n  },\n\n  reset: () => {\n    set({\n      analytics: null,\n      loading: false,\n      error: null,\n      dateRange: getDefaultDateRange(),\n    });\n  },\n}));","import { create } from 'zustand';\nimport { getClient, isClientInitialized } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { Page, PagesQueryParams } from '@/types/pages.types';\n\ninterface PagesState {\n  pages: Page[];\n  loading: boolean;\n  error: string | null;\n  paginationInfo: {\n    current_page: number;\n    total: number;\n    per_page: number;\n    last_page: number;\n  };\n  queryParams: PagesQueryParams;\n  \n  // Actions\n  fetchPages: (projectId: number) => Promise<void>;\n  deletePage: (projectId: number, pageId: number) => Promise<void>;\n  reindexPage: (projectId: number, pageId: number) => Promise<void>;\n  \n  // UI State\n  setQueryParams: (params: Partial<PagesQueryParams>) => void;\n  reset: () => void;\n}\n\nexport const usePageStore = create<PagesState>((set, get) => ({\n  pages: [],\n  loading: false,\n  error: null,\n  paginationInfo: {\n    current_page: 1,\n    total: 0,\n    per_page: 20,\n    last_page: 1\n  },\n  queryParams: {\n    page: 1,\n    limit: 20,\n    order: 'desc',\n    crawl_status: 'all',\n    index_status: 'all'\n  },\n\n  fetchPages: async (projectId: number) => {\n    if (!isClientInitialized()) {\n      set({ error: 'API client not initialized' });\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const { queryParams } = get();\n      const response = await client.getPages(projectId, queryParams);\n      \n      set({ \n        pages: response.data.pages.data,\n        paginationInfo: {\n          current_page: response.data.pages.current_page,\n          total: response.data.pages.total,\n          per_page: response.data.pages.per_page,\n          last_page: response.data.pages.last_page\n        },\n        loading: false \n      });\n    } catch (error: any) {\n      console.error('Failed to fetch pages:', error);\n      \n      let errorMessage = 'Failed to fetch pages';\n      if (error.status === 400) {\n        errorMessage = 'Invalid request. Please check the project ID.';\n      } else if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Project not found.';\n      } else if (error.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  deletePage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deletePage(projectId, pageId);\n      \n      set(state => ({\n        pages: state.pages.filter(page => page.id !== pageId),\n        loading: false,\n      }));\n      \n      toast.success('Page deleted successfully');\n    } catch (error: any) {\n      console.error('Failed to delete page:', error);\n      \n      let errorMessage = 'Failed to delete page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Page not found.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  reindexPage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.reindexPage(projectId, pageId);\n      \n      // Update local state to show queued status\n      set(state => ({\n        pages: state.pages.map(page => \n          page.id === pageId \n            ? { ...page, crawl_status: 'queued', index_status: 'queued' }\n            : page\n        ),\n        loading: false,\n      }));\n      \n      toast.success('Page reindexing started');\n    } catch (error: any) {\n      console.error('Failed to reindex page:', error);\n      \n      let errorMessage = 'Failed to reindex page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 403) {\n        errorMessage = 'The page could not be reindexed.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  setQueryParams: (params: Partial<PagesQueryParams>) => {\n    set(state => ({\n      queryParams: { ...state.queryParams, ...params },\n    }));\n  },\n\n  reset: () => {\n    set({\n      pages: [],\n      loading: false,\n      error: null,\n      paginationInfo: {\n        current_page: 1,\n        total: 0,\n        per_page: 20,\n        last_page: 1\n      },\n      queryParams: {\n        page: 1,\n        limit: 20,\n        order: 'desc',\n        crawl_status: 'all',\n        index_status: 'all'\n      },\n    });\n  },\n}));","// Sources store - provides state management for source data\n// Currently uses direct API calls in components\n\nimport { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface Source {\n  id: string;\n  project_id: number;\n  name: string;\n  type: 'file' | 'url' | 'text' | 'api';\n  status: 'active' | 'inactive' | 'processing' | 'error';\n  size?: number;\n  file_type?: string;\n  url?: string;\n  content?: string;\n  metadata?: {\n    description?: string;\n    tags?: string[];\n    author?: string;\n    lastIndexed?: string;\n    [key: string]: any;\n  };\n  created_at: string;\n  updated_at: string;\n  indexed_at?: string;\n  error_message?: string;\n}\n\ninterface SourcesState {\n  sources: Source[];\n  currentSource: Source | null;\n  loading: boolean;\n  error: string | null;\n  searchQuery: string;\n  filter: {\n    status?: 'active' | 'inactive' | 'processing' | 'error' | 'all';\n    type?: 'file' | 'url' | 'text' | 'api' | 'all';\n    sortBy?: 'name' | 'created_at' | 'updated_at' | 'size';\n    sortOrder?: 'asc' | 'desc';\n  };\n  syncStatus: {\n    syncing: boolean;\n    lastSync?: string;\n    progress?: number;\n  };\n  \n  // Actions\n  fetchSources: (projectId: number) => Promise<void>;\n  fetchSource: (projectId: number, sourceId: string) => Promise<void>;\n  uploadSources: (projectId: number, files: File[]) => Promise<void>;\n  updateSource: (projectId: number, sourceId: string, updates: Partial<Source>) => Promise<void>;\n  deleteSource: (projectId: number, sourceId: string) => Promise<void>;\n  bulkDelete: (projectId: number, sourceIds: string[]) => Promise<void>;\n  syncSources: (projectId: number) => Promise<void>;\n  \n  // UI State\n  setSearchQuery: (query: string) => void;\n  setFilter: (filter: Partial<SourcesState['filter']>) => void;\n  selectSource: (source: Source | null) => void;\n  reset: () => void;\n}\n\n// Store implementation for source management\nexport const useSourceStore = create<SourcesState>((set, get) => ({\n  sources: [],\n  currentSource: null,\n  loading: false,\n  error: null,\n  searchQuery: '',\n  filter: {\n    status: 'all',\n    type: 'all',\n    sortBy: 'updated_at',\n    sortOrder: 'desc',\n  },\n  syncStatus: {\n    syncing: false,\n  },\n\n  fetchSources: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getSources(projectId);\n      \n      // Extract all sources from sitemaps and uploads\n      const allSources: Source[] = [];\n      \n      if (response.data.sitemaps) {\n        // Map API source structure to store's Source interface\n        response.data.sitemaps.forEach((apiSource: any) => {\n          allSources.push({\n            id: apiSource.id.toString(),\n            project_id: projectId,\n            name: apiSource.settings.sitemap_path || `Source ${apiSource.id}`,\n            type: 'url', // Map 'sitemap' to 'url'\n            status: 'active',\n            metadata: {\n              ...apiSource.settings,\n              pages: apiSource.pages,\n            },\n            created_at: apiSource.created_at,\n            updated_at: apiSource.updated_at,\n          });\n        });\n      }\n      \n      if (response.data.uploads) {\n        const uploads = Array.isArray(response.data.uploads) \n          ? response.data.uploads \n          : [response.data.uploads];\n          \n        uploads.forEach((apiSource: any) => {\n          allSources.push({\n            id: apiSource.id.toString(),\n            project_id: projectId,\n            name: `Upload ${apiSource.id}`,\n            type: 'file',\n            status: 'active',\n            metadata: {\n              ...apiSource.settings,\n              pages: apiSource.pages,\n            },\n            created_at: apiSource.created_at,\n            updated_at: apiSource.updated_at,\n          });\n        });\n      }\n      \n      set({ sources: allSources, loading: false });\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch sources',\n        loading: false,\n      });\n      toast.error('Failed to load sources');\n    }\n  },\n\n  fetchSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      // const client = getClient();\n      // const response = await client.getSource(projectId, sourceId);\n      \n      // const source = response.data;\n      // set({ currentSource: source, loading: false });\n      throw new Error('getSource API method not available');\n      \n      // Update in the list as well\n      // set(state => ({\n      //   sources: state.sources.map(s => s.id === sourceId ? source : s),\n      // }));\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch source',\n        loading: false,\n      });\n      toast.error('Failed to load source details');\n    }\n  },\n\n  uploadSources: async (projectId: number, files: File[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Upload files one by one for better progress tracking\n      const uploadPromises = files.map(file => \n        Promise.reject(new Error('uploadFile API method not available'))\n      );\n      \n      const responses = await Promise.all(uploadPromises);\n      \n      // Refresh sources list\n      await get().fetchSources(projectId);\n      \n      toast.success(`Successfully uploaded ${files.length} file(s)`);\n      set({ loading: false });\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to upload sources',\n        loading: false,\n      });\n      toast.error('Failed to upload files');\n      throw error;\n    }\n  },\n\n  updateSource: async (projectId: number, sourceId: string, updates: Partial<Source>) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      // await client.updateSource(projectId, sourceId, {\n      throw new Error('updateSource API method not available');\n      /*\n        name: updates.name,\n        metadata: updates.metadata,\n        status: updates.status,\n      }); */\n      \n      set(state => ({\n        sources: state.sources.map(source => \n          source.id === sourceId \n            ? { ...source, ...updates, updated_at: new Date().toISOString() } \n            : source\n        ),\n        currentSource: state.currentSource?.id === sourceId \n          ? { ...state.currentSource, ...updates, updated_at: new Date().toISOString() }\n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source updated successfully');\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to update source',\n        loading: false,\n      });\n      toast.error('Failed to update source');\n      throw error;\n    }\n  },\n\n  deleteSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteSource(projectId, parseInt(sourceId));\n      \n      set(state => ({\n        sources: state.sources.filter(source => source.id !== sourceId),\n        currentSource: state.currentSource?.id === sourceId ? null : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source deleted successfully');\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete source',\n        loading: false,\n      });\n      toast.error('Failed to delete source');\n      throw error;\n    }\n  },\n\n  bulkDelete: async (projectId: number, sourceIds: string[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Delete sources in parallel\n      await Promise.all(\n        sourceIds.map(sourceId => client.deleteSource(projectId, parseInt(sourceId)))\n      );\n      \n      set(state => ({\n        sources: state.sources.filter(source => !sourceIds.includes(source.id)),\n        currentSource: sourceIds.includes(state.currentSource?.id || '') \n          ? null \n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success(`Successfully deleted ${sourceIds.length} source(s)`);\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete sources',\n        loading: false,\n      });\n      toast.error('Failed to delete sources');\n      throw error;\n    }\n  },\n\n  syncSources: async (projectId: number) => {\n    set(state => ({\n      syncStatus: { ...state.syncStatus, syncing: true, progress: 0 }\n    }));\n    \n    try {\n      const client = getClient();\n      // await client.syncSources(projectId);\n      throw new Error('syncSources API method not available');\n      \n      // Refresh sources after sync\n      await get().fetchSources(projectId);\n      \n      set(state => ({\n        syncStatus: {\n          syncing: false,\n          lastSync: new Date().toISOString(),\n          progress: 100,\n        }\n      }));\n      \n      toast.success('Sources synchronized successfully');\n    } catch (error) {\n      set(state => ({\n        syncStatus: { ...state.syncStatus, syncing: false },\n        error: error instanceof Error ? error.message : 'Failed to sync sources',\n      }));\n      toast.error('Failed to sync sources');\n      throw error;\n    }\n  },\n\n  setSearchQuery: (query: string) => {\n    set({ searchQuery: query });\n  },\n\n  setFilter: (filter: Partial<SourcesState['filter']>) => {\n    set(state => ({\n      filter: { ...state.filter, ...filter },\n    }));\n  },\n\n  selectSource: (source: Source | null) => {\n    set({ currentSource: source });\n  },\n\n  reset: () => {\n    set({\n      sources: [],\n      currentSource: null,\n      loading: false,\n      error: null,\n      searchQuery: '',\n      filter: {\n        status: 'all',\n        type: 'all',\n        sortBy: 'updated_at',\n        sortOrder: 'desc',\n      },\n      syncStatus: {\n        syncing: false,\n      },\n    });\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { UserProfileStore, UserProfile } from '@/types';\n\n// CustomGPT.ai API Response format\ninterface CustomGPTResponse<T> {\n  status: 'success' | 'error';\n  data: T;\n}\n\nexport const useProfileStore = create<UserProfileStore>()(\n  persist(\n    (set, get) => ({\n      // Initial State\n      profile: null,\n      loading: false,\n      error: null,\n\n      // Profile Management - GET /api/v1/user\n      fetchProfile: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.getUserProfile();\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n          } else {\n            throw new Error('Failed to fetch profile');\n          }\n        } catch (error: any) {\n          console.error('Failed to fetch profile:', error);\n          \n          let errorMessage = 'Failed to fetch profile';\n          \n          if (error.status === 401) {\n            errorMessage = 'Authentication required. Please log in again.';\n            toast.error('Your session has expired. Please log in again.');\n          } else if (error.status === 500) {\n            errorMessage = 'Server error occurred. Please try again later.';\n            toast.error('Server error. Please try again later.');\n          } else {\n            toast.error('Failed to load profile');\n          }\n          \n          set({ \n            error: errorMessage,\n            loading: false \n          });\n        }\n      },\n\n      // Profile Update - POST /api/v1/user (multipart/form-data)\n      updateProfile: async (name: string, profilePhoto?: File) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Create FormData for multipart request\n          const formData = new FormData();\n          formData.append('name', name);\n          \n          if (profilePhoto) {\n            formData.append('profile_photo', profilePhoto);\n          }\n          \n          const response = await client.updateUserProfile(formData);\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n            toast.success('Profile updated successfully');\n          } else {\n            throw new Error('Failed to update profile');\n          }\n        } catch (error: any) {\n          console.error('Failed to update profile:', error);\n          \n          let errorMessage = 'Failed to update profile';\n          \n          if (error.status === 401) {\n            errorMessage = 'Authentication required. Please log in again.';\n            toast.error('Your session has expired. Please log in again.');\n          } else if (error.status === 500) {\n            errorMessage = 'Server error occurred. Please try again later.';\n            toast.error('Server error. Please try again later.');\n          } else {\n            toast.error('Failed to update profile');\n          }\n          \n          set({ \n            error: errorMessage,\n            loading: false \n          });\n        }\n      },\n\n      // Utility\n      reset: () => {\n        set({\n          profile: null,\n          loading: false,\n          error: null,\n        });\n      },\n    }),\n    {\n      name: 'profile-store',\n      partialize: (state) => ({\n        profile: state.profile,\n      }),\n    }\n  )\n);","import { create } from 'zustand';\nimport { toast } from 'sonner';\nimport { getClient } from '@/lib/api/client';\nimport type { APIResponse, AgentStats } from '@/types';\n\nexport interface ProjectSettings {\n  // Appearance\n  chatbot_avatar?: string;\n  chatbot_background_type?: 'image' | 'color';\n  chatbot_background?: string;\n  chatbot_background_color?: string;\n  chatbot_color?: string;\n  chatbot_toolbar_color?: string;\n  chatbot_title?: string;\n  chatbot_title_color?: string;\n  user_avatar?: string;\n  spotlight_avatar_enabled?: boolean;\n  spotlight_avatar?: string;\n  spotlight_avatar_shape?: 'rectangle' | 'circle' | 'rounded' | 'square';\n  spotlight_avatar_type?: 'default' | 'animated' | '3d' | 'custom';\n  user_avatar_orientation?: 'agent-left-user-right' | 'agent-right-user-left' | 'both-left' | 'both-right';\n  \n  // Messages & Behavior\n  default_prompt?: string;\n  example_questions?: string[];\n  persona_instructions?: string;\n  response_source?: 'default' | 'own_content' | 'openai_content';\n  chatbot_model?: string;\n  chatbot_msg_lang?: string;\n  input_field_addendum?: string;\n  \n  // Messages\n  hang_in_there_msg?: string;\n  chatbot_siesta_msg?: string;\n  no_answer_message?: string;\n  ending_message?: string;\n  try_asking_questions_msg?: string;\n  view_more_msg?: string;\n  view_less_msg?: string;\n  \n  // Citations\n  enable_citations?: number;\n  citations_view_type?: 'user' | 'show' | 'hide';\n  citations_answer_source_label_msg?: string;\n  citations_sources_label_msg?: string;\n  image_citation_display?: 'default' | 'inline' | 'none';\n  enable_inline_citations_api?: boolean;\n  hide_sources_from_responses?: boolean;\n  \n  // Features\n  enable_feedbacks?: boolean;\n  is_loading_indicator_enabled?: boolean;\n  remove_branding?: boolean;\n  private_deployment?: boolean;\n  enable_recaptcha_for_public_chatbots?: boolean;\n  is_selling_enabled?: boolean;\n  license_slug?: boolean;\n  selling_url?: string;\n  can_share_conversation?: boolean;\n  can_export_conversation?: boolean;\n  conversation_time_window?: boolean;\n  conversation_retention_period?: 'day' | 'week' | 'month' | 'quarter' | 'year' | 'custom';\n  conversation_retention_days?: number;\n  enable_agent_knowledge_base_awareness?: boolean;\n  markdown_enabled?: boolean;\n}\n\nexport interface ProjectPlugin {\n  id: string;\n  name: string;\n  enabled: boolean;\n  description?: string;\n  category?: string;\n  settings?: Record<string, any>;\n}\n\n// Using AgentStats from the API instead of custom ProjectStats\nexport type ProjectStats = AgentStats;\n\nexport interface ProjectSettingsStore {\n  // Settings\n  settings: ProjectSettings | null;\n  settingsLoading: boolean;\n  settingsError: string | null;\n\n  // Plugins\n  plugins: ProjectPlugin[];\n  pluginsLoading: boolean;\n  pluginsError: string | null;\n\n  // Stats\n  stats: ProjectStats | null;\n  statsLoading: boolean;\n  statsError: string | null;\n\n  // Actions\n  fetchSettings: (projectId: number) => Promise<void>;\n  updateSettings: (projectId: number, settings: Partial<ProjectSettings>) => Promise<void>;\n  fetchPlugins: (projectId: number) => Promise<void>;\n  updatePlugin: (projectId: number, pluginId: string, enabled: boolean) => Promise<void>;\n  fetchStats: (projectId: number) => Promise<void>;\n  reset: () => void;\n}\n\n// Track active requests to prevent duplicates\nconst activeRequests = new Map<string, boolean>();\n\nexport const useProjectSettingsStore = create<ProjectSettingsStore>((set, get) => ({\n  // Initial state\n  settings: null,\n  settingsLoading: false,\n  settingsError: null,\n  plugins: [],\n  pluginsLoading: false,\n  pluginsError: null,\n  stats: null,\n  statsLoading: false,\n  statsError: null,\n\n  // Fetch project settings\n  fetchSettings: async (projectId: number) => {\n    const requestKey = `settings-${projectId}`;\n    \n    // Prevent duplicate requests\n    if (activeRequests.get(requestKey)) {\n      return;\n    }\n    \n    activeRequests.set(requestKey, true);\n    \n    // Clear previous errors and set loading state\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      const response = await getClient().getAgentSettings(projectId);\n\n      // The API client returns the data directly, not wrapped with status\n      if (response && response.data) {\n        set({ \n          settings: response.data, \n          settingsLoading: false,\n          settingsError: null // Explicitly clear error on success\n        });\n      } else if (response) {\n        // If response exists but doesn't have data property, it might be the direct data\n        set({ \n          settings: response as any, \n          settingsLoading: false,\n          settingsError: null\n        });\n      } else {\n        throw new Error('Failed to fetch project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      // Only show toast for actual errors, not for expected scenarios\n      if (error instanceof Error && !error.message.includes('404')) {\n        toast.error(errorMessage);\n      }\n    } finally {\n      activeRequests.delete(requestKey);\n    }\n  },\n\n  // Update project settings\n  updateSettings: async (projectId: number, settingsUpdate: Partial<ProjectSettings>) => {\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      // Create FormData for multipart/form-data\n      const formData = new FormData();\n      \n      Object.entries(settingsUpdate).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          if (key === 'example_questions' && Array.isArray(value)) {\n            // Handle array fields - use bracket notation without index\n            value.forEach((question) => {\n              formData.append(`example_questions[]`, question);\n            });\n          } else if (value instanceof File) {\n            // Handle file uploads\n            formData.append(key, value);\n          } else {\n            // Handle regular fields\n            formData.append(key, String(value));\n          }\n        }\n      });\n\n      const response = await getClient().updateAgentSettings(projectId, formData);\n\n      // The API client returns the data directly\n      if (response) {\n        // Instead of merging, re-fetch the settings to ensure we have the latest data\n        set({ settingsLoading: false });\n        \n        // Re-fetch settings to get the updated data from server\n        await get().fetchSettings(projectId);\n        \n        toast.success('Project settings updated successfully');\n      } else {\n        throw new Error('Failed to update project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project plugins\n  fetchPlugins: async (projectId: number) => {\n    set({ pluginsLoading: true, pluginsError: null });\n\n    try {\n      const response = await getClient().getProjectPlugins(projectId);\n\n      // The API client returns the data directly\n      if (response) {\n        const pluginsData = response.data || response;\n        set({ \n          plugins: Array.isArray(pluginsData) ? pluginsData : [], \n          pluginsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project plugins');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project plugins';\n      set({ \n        pluginsError: errorMessage, \n        pluginsLoading: false,\n        plugins: [] // Fallback to empty array\n      });\n      console.warn('Plugins not available:', errorMessage);\n    }\n  },\n\n  // Update project plugin\n  updatePlugin: async (projectId: number, pluginId: string, enabled: boolean) => {\n    try {\n      // This endpoint might not exist yet, so we'll implement it as a placeholder\n      const response = await getClient().updateProjectPlugin(projectId, pluginId, { enabled });\n\n      // The API client returns the data directly\n      if (response) {\n        // Update plugin in store\n        const plugins = get().plugins.map(plugin =>\n          plugin.id === pluginId ? { ...plugin, enabled } : plugin\n        );\n        \n        set({ plugins });\n        toast.success(`Plugin ${enabled ? 'enabled' : 'disabled'} successfully`);\n      } else {\n        throw new Error('Failed to update plugin');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update plugin';\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project stats\n  fetchStats: async (projectId: number) => {\n    set({ statsLoading: true, statsError: null });\n\n    try {\n      const response = await getClient().getAgentStats(projectId);\n\n      // The API client returns the data directly\n      if (response) {\n        const statsData = response.data || response;\n        set({ \n          stats: statsData, \n          statsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project stats');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project stats';\n      set({ \n        statsError: errorMessage, \n        statsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Reset store\n  reset: () => {\n    set({\n      settings: null,\n      settingsLoading: false,\n      settingsError: null,\n      plugins: [],\n      pluginsLoading: false,\n      pluginsError: null,\n      stats: null,\n      statsLoading: false,\n      statsError: null,\n    });\n  },\n}));","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport type { AgentLicense } from '@/types';\n\ninterface LicenseStore {\n  licenses: AgentLicense[];\n  loading: boolean;\n  error: string | null;\n  \n  fetchLicenses: (projectId: number) => Promise<void>;\n  createLicense: (projectId: number, name: string) => Promise<AgentLicense>;\n  updateLicense: (projectId: number, licenseId: string, name: string) => Promise<void>;\n  deleteLicense: (projectId: number, licenseId: string) => Promise<void>;\n  clearError: () => void;\n}\n\nexport const useLicenseStore = create<LicenseStore>((set, get) => ({\n  licenses: [],\n  loading: false,\n  error: null,\n\n  fetchLicenses: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getLicenses(projectId);\n      \n      logger.info('LICENSES', 'API Response', {\n        projectId,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataType: Array.isArray(response?.data) ? 'array' : typeof response?.data,\n        dataLength: Array.isArray(response?.data) ? response.data.length : 0,\n        fullResponse: response\n      });\n      \n      // Handle response format based on API documentation\n      const licenses = Array.isArray(response.data) ? response.data : [];\n      \n      logger.info('LICENSES', 'Processed licenses', {\n        count: licenses.length,\n        licenses: licenses.map((l: any) => ({ \n          name: l.name, \n          key: l.key?.substring(0, 8) + '...', \n          project_id: l.project_id \n        }))\n      });\n      \n      set({ \n        licenses,\n        loading: false \n      });\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to fetch licenses', {\n        projectId,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        fullError: error\n      });\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch licenses';\n      set({ \n        error: errorMessage,\n        loading: false,\n        licenses: []\n      });\n    }\n  },\n\n  createLicense: async (projectId: number, name: string) => {\n    set({ loading: true, error: null });\n    \n    logger.info('LICENSES', 'Creating license', {\n      projectId,\n      name\n    });\n    \n    try {\n      const client = getClient();\n      const response = await client.createLicense(projectId, { name });\n      \n      logger.info('LICENSES', 'Create license API response', {\n        projectId,\n        name,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataStructure: response?.data ? Object.keys(response.data) : [],\n        licenseKey: response.data?.licenseKey?.substring(0, 8) + '...',\n        fullResponse: response\n      });\n      \n      // Handle response format based on API documentation\n      // Response contains { license: {...}, licenseKey: \"...\" }\n      const newLicense = response.data?.license || response.data;\n      \n      if (newLicense) {\n        logger.info('LICENSES', 'New license created', {\n          licenseName: newLicense.name,\n          licenseKey: newLicense.key?.substring(0, 8) + '...',\n          project_id: newLicense.project_id\n        });\n        \n        set(state => ({\n          licenses: [...state.licenses, newLicense],\n          loading: false\n        }));\n      }\n      \n      return newLicense;\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to create license', {\n        projectId,\n        name,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        fullError: error\n      });\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to create license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  updateLicense: async (projectId: number, licenseId: string, name: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.updateLicense(projectId, licenseId, { name });\n      \n      logger.info('LICENSES', 'Updated license', {\n        projectId,\n        licenseId,\n        name\n      });\n      \n      // Handle response format based on API documentation\n      const updatedLicense = (response as any).license || response.data;\n      \n      if (updatedLicense) {\n        set(state => ({\n          licenses: state.licenses.map(license => \n            license.key === licenseId ? { ...license, name, updated_at: new Date().toISOString() } : license\n          ),\n          loading: false\n        }));\n      }\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to update license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to update license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  deleteLicense: async (projectId: number, licenseId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteLicense(projectId, licenseId);\n      \n      logger.info('LICENSES', 'Deleted license', {\n        projectId,\n        licenseId\n      });\n      \n      set(state => ({\n        licenses: state.licenses.filter(license => license.key !== licenseId),\n        loading: false\n      }));\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to delete license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to delete license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  clearError: () => {\n    set({ error: null });\n  }\n}));","/**\n * Store Index - Central State Management\n * \n * This file exports all Zustand stores used in the application.\n * Each store manages a specific domain of the application state.\n * \n * Architecture:\n * - Uses Zustand for lightweight state management\n * - Each store is independent but can interact via imports\n * - Stores handle both state and async operations (API calls)\n * - All stores use TypeScript for type safety\n * \n * Store Overview:\n * - config: API keys, base URLs, theme settings\n * - agents: Agent/chatbot management and CRUD operations\n * - conversations: Chat session management\n * - messages: Message handling, streaming, and history\n * - ui: UI preferences and layout state\n * - analytics: Usage tracking and metrics\n * - pages: Agent knowledge base pages\n * - sources: Citation sources and references\n * - profile: User profile and limits\n * - project-settings: Agent-specific settings\n * - licenses: License key management\n * \n * Features:\n * - Centralized state management with TypeScript support\n * - Domain-specific stores for organized architecture\n * - Automated error handling and recovery\n * - Cross-store communication and data consistency\n */\n\n// Export all stores from a single entry point\nexport { useConfigStore } from './config';\nexport { useAgentStore } from './agents';\nexport { useConversationStore } from './conversations';\nexport { useMessageStore } from './messages';\nexport { useUIStore } from './ui';\nexport { useAnalyticsStore } from './analytics';\nexport { usePageStore } from './pages';\nexport { useSourceStore } from './sources';\nexport { useProfileStore } from './profile';\nexport { useProjectSettingsStore } from './project-settings';\nexport { useLicenseStore } from './licenses';\n\n/**\n * Store initialization helper\n * \n * Currently, Zustand stores auto-initialize on first access.\n * This function is provided for future use cases where\n * manual initialization might be needed (e.g., SSR, testing).\n * \n * @example\n * // In your app initialization\n * initializeStores();\n */\nexport function initializeStores() {\n  // Stores will auto-initialize when first accessed\n  // This function can be used for any additional setup if needed\n}\n\n/**\n * Store cleanup helper\n * \n * Zustand automatically handles cleanup when components unmount.\n * This function is provided for manual cleanup scenarios\n * (e.g., user logout, testing teardown).\n * \n * To implement cleanup:\n * 1. Add a reset() method to each store\n * 2. Call each store's reset() method here\n * \n * @example\n * // On user logout\n * cleanupStores();\n */\nexport function cleanupStores() {\n  // Add any cleanup logic if needed\n  // Currently, Zustand handles cleanup automatically\n}","import type { StreamChunk, Citation, StreamCallbacks, StreamHandlerConfig } from '@/types';\nimport { parseStreamChunk } from '@/lib/utils';\n\nexport interface StreamMessage {\n  id: string;\n  content: string;\n  citations: Citation[];\n  isComplete: boolean;\n}\n\nexport class StreamHandler {\n  private config: Required<StreamHandlerConfig>;\n  private abortController: AbortController | null = null;\n  private currentMessage: StreamMessage | null = null;\n\n  constructor(config: StreamHandlerConfig = {}) {\n    this.config = {\n      timeout: config.timeout || 60000,\n      retryAttempts: config.retryAttempts || 3,\n      retryDelay: config.retryDelay || 1000,\n    };\n  }\n\n  /**\n   * Process a streaming response\n   */\n  async processStream(\n    stream: ReadableStream,\n    callbacks: StreamCallbacks\n  ): Promise<StreamMessage> {\n    this.abortController = new AbortController();\n    this.currentMessage = {\n      id: this.generateId(),\n      content: '',\n      citations: [],\n      isComplete: false,\n    };\n\n    const reader = stream.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    // Set timeout\n    const timeoutId = setTimeout(() => {\n      this.cancel();\n      callbacks.onError?.(new Error('Stream timeout'));\n    }, this.config.timeout);\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) {\n          this.currentMessage.isComplete = true;\n          callbacks.onComplete?.();\n          break;\n        }\n\n        // Decode chunk and add to buffer\n        buffer += decoder.decode(value, { stream: true });\n        \n        // Process complete lines\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n        for (const line of lines) {\n          if (line.trim()) {\n            await this.processLine(line, callbacks);\n          }\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        callbacks.onError?.(new Error('Stream cancelled'));\n      } else {\n        callbacks.onError?.(error instanceof Error ? error : new Error('Unknown streaming error'));\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      reader.releaseLock();\n      this.abortController = null;\n    }\n\n    return this.currentMessage;\n  }\n\n  /**\n   * Process a single line from the stream\n   */\n  private async processLine(line: string, callbacks: StreamCallbacks): Promise<void> {\n    const chunk = parseStreamChunk(line);\n    \n    if (!chunk || !this.currentMessage) return;\n\n    switch (chunk.type) {\n      case 'content':\n        if (chunk.content) {\n          this.currentMessage.content += chunk.content;\n          callbacks.onChunk?.(chunk.content);\n        }\n        break;\n\n      case 'citation':\n        if (chunk.citations) {\n          this.currentMessage.citations.push(...chunk.citations);\n          chunk.citations.forEach((citation: Citation) => {\n            callbacks.onCitation?.(citation);\n          });\n        }\n        break;\n\n      case 'done':\n        this.currentMessage.isComplete = true;\n        callbacks.onComplete?.();\n        return;\n\n      case 'error':\n        callbacks.onError?.(new Error(chunk.error || 'Stream error'));\n        return;\n\n      default:\n        // Handle unknown chunk types gracefully\n        console.warn('Unknown stream chunk type:', chunk.type);\n    }\n  }\n\n  /**\n   * Cancel the current stream\n   */\n  cancel(): void {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n  }\n\n  /**\n   * Get current message state\n   */\n  getCurrentMessage(): StreamMessage | null {\n    return this.currentMessage;\n  }\n\n  /**\n   * Check if streaming is active\n   */\n  isStreaming(): boolean {\n    return this.abortController !== null && this.currentMessage !== null && !this.currentMessage.isComplete;\n  }\n\n  private generateId(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n}\n\n/**\n * Utility class for managing multiple concurrent streams\n */\nexport class StreamManager {\n  private streams: Map<string, StreamHandler> = new Map();\n  private maxConcurrentStreams: number;\n\n  constructor(maxConcurrentStreams: number = 3) {\n    this.maxConcurrentStreams = maxConcurrentStreams;\n  }\n\n  /**\n   * Start a new stream\n   */\n  async startStream(\n    streamId: string,\n    stream: ReadableStream,\n    callbacks: StreamCallbacks,\n    config?: StreamHandlerConfig\n  ): Promise<StreamMessage> {\n    // Check if we're at the concurrent limit\n    if (this.streams.size >= this.maxConcurrentStreams) {\n      throw new Error(`Maximum concurrent streams (${this.maxConcurrentStreams}) reached`);\n    }\n\n    // Cancel existing stream with same ID if it exists\n    if (this.streams.has(streamId)) {\n      this.cancelStream(streamId);\n    }\n\n    const handler = new StreamHandler(config);\n    this.streams.set(streamId, handler);\n\n    try {\n      const result = await handler.processStream(stream, {\n        ...callbacks,\n        onComplete: () => {\n          this.streams.delete(streamId);\n          callbacks.onComplete?.();\n        },\n        onError: (error) => {\n          this.streams.delete(streamId);\n          callbacks.onError?.(error);\n        },\n      });\n\n      return result;\n    } catch (error) {\n      this.streams.delete(streamId);\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel a specific stream\n   */\n  cancelStream(streamId: string): void {\n    const handler = this.streams.get(streamId);\n    if (handler) {\n      handler.cancel();\n      this.streams.delete(streamId);\n    }\n  }\n\n  /**\n   * Cancel all active streams\n   */\n  cancelAllStreams(): void {\n    this.streams.forEach(handler => handler.cancel());\n    this.streams.clear();\n  }\n\n  /**\n   * Get active stream IDs\n   */\n  getActiveStreams(): string[] {\n    return Array.from(this.streams.keys());\n  }\n\n  /**\n   * Get stream status\n   */\n  getStreamStatus(streamId: string): {\n    exists: boolean;\n    isStreaming: boolean;\n    message: StreamMessage | null;\n  } {\n    const handler = this.streams.get(streamId);\n    \n    if (!handler) {\n      return { exists: false, isStreaming: false, message: null };\n    }\n\n    return {\n      exists: true,\n      isStreaming: handler.isStreaming(),\n      message: handler.getCurrentMessage(),\n    };\n  }\n\n  /**\n   * Get number of active streams\n   */\n  getActiveStreamCount(): number {\n    return this.streams.size;\n  }\n}\n\n/**\n * Parse Server-Sent Events (SSE) data\n */\nexport function parseSSEData(data: string): any | null {\n  try {\n    if (data === '[DONE]') {\n      return { type: 'done' };\n    }\n    \n    const parsed = JSON.parse(data);\n    \n    // Handle different response formats\n    if (parsed.choices && parsed.choices[0]) {\n      const choice = parsed.choices[0];\n      \n      if (choice.delta && choice.delta.content) {\n        return {\n          type: 'content',\n          content: choice.delta.content,\n        };\n      }\n      \n      if (choice.message && choice.message.content) {\n        return {\n          type: 'content',\n          content: choice.message.content,\n        };\n      }\n    }\n    \n    // Handle CustomGPT format\n    if (parsed.content) {\n      return {\n        type: 'content',\n        content: parsed.content,\n        citations: parsed.citations || [],\n      };\n    }\n    \n    return parsed;\n  } catch (error) {\n    console.error('Failed to parse SSE data:', error);\n    return null;\n  }\n}\n\n\n/**\n * Validate stream format\n */\nexport function validateStreamChunk(chunk: any): boolean {\n  if (!chunk || typeof chunk !== 'object') {\n    return false;\n  }\n\n  // Must have a type\n  if (!chunk.type || typeof chunk.type !== 'string') {\n    return false;\n  }\n\n  // Validate specific types\n  switch (chunk.type) {\n    case 'content':\n      return typeof chunk.content === 'string';\n    \n    case 'citation':\n      return Array.isArray(chunk.citations);\n    \n    case 'done':\n    case 'error':\n      return true;\n    \n    default:\n      return false;\n  }\n}\n\n// Global stream manager instance\nexport const globalStreamManager = new StreamManager();","/**\n * Proxy API Client\n * \n * This client communicates with our Next.js API routes which proxy\n * requests to CustomGPT. The API key is stored securely on the server.\n */\n\nimport type {\n  Agent,\n  AgentStats,\n  AgentSettings,\n  Conversation,\n  ChatMessage,\n  Citation,\n  APIResponse,\n  AgentsResponse,\n  ConversationsResponse,\n  MessagesResponse,\n  MessageResponse,\n  CitationResponse,\n  StreamChunk,\n  LimitsResponse,\n  UserProfile,\n} from '@/types';\nimport type { APIMessageResponse } from '@/types/message.types';\nimport type { \n  PagesListResponse, \n  DeletePageResponse, \n  ReindexPageResponse, \n  PagesQueryParams,\n  PageMetadata,\n  PageMetadataResponse\n} from '@/types/pages.types';\nimport type { \n  TrafficReportResponse, \n  QueriesReportResponse, \n  ConversationsReportResponse, \n  AnalysisReportResponse,\n  AnalysisInterval\n} from '@/types/reports.types';\nimport type { \n  SourcesListResponse, \n  SourceResponse, \n  DeleteSourceResponse,\n  UpdateSourceSettingsRequest,\n  CreateSitemapSourceRequest\n} from '@/types/sources.types';\nimport { parseStreamChunk, retryWithBackoff } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\ninterface UserProfileResponse {\n  status: 'success' | 'error';\n  data: UserProfile;\n}\n\n/**\n * ProxyCustomGPTClient\n * \n * Client that communicates with our server-side proxy endpoints.\n * No API key is needed client-side as it's stored on the server.\n */\nexport class ProxyCustomGPTClient {\n  private baseURL: string = '/api/proxy';\n  private timeout: number = 30000;\n  private abortControllers: Map<string, AbortController> = new Map();\n\n  constructor() {\n    logger.info('PROXY_CLIENT', 'Proxy API Client initialized', {\n      baseURL: this.baseURL,\n      timeout: this.timeout,\n    });\n  }\n\n  /**\n   * Make a request to the proxy API\n   */\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    const requestId = `${options.method || 'GET'}-${endpoint}-${Date.now()}`;\n    \n    logger.apiRequest(endpoint, options.method || 'GET', options.body);\n\n    try {\n      const controller = new AbortController();\n      this.abortControllers.set(requestId, controller);\n\n      const timeoutId = setTimeout(() => {\n        controller.abort();\n      }, this.timeout);\n\n      // Don't set Content-Type for FormData - let browser set it with boundary\n      const isFormData = options.body instanceof FormData;\n      const headers: HeadersInit = isFormData \n        ? { ...(options.headers as Record<string, string> || {}) }\n        : { \n            'Content-Type': 'application/json',\n            ...(options.headers as Record<string, string> || {})\n          };\n      \n      const response = await fetch(url, {\n        ...options,\n        headers,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n      this.abortControllers.delete(requestId);\n\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        throw {\n          message: responseData.error || `Request failed with status ${response.status}`,\n          status: response.status,\n          data: responseData,\n        };\n      }\n\n      logger.apiResponse(endpoint, response.status, responseData);\n      return responseData;\n    } catch (error: any) {\n      this.abortControllers.delete(requestId);\n      \n      if (error.name === 'AbortError') {\n        logger.apiError(endpoint, { message: 'Request timeout', code: 'TIMEOUT' });\n        throw new Error('Request timeout');\n      }\n\n      logger.apiError(endpoint, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Make a streaming request to the proxy API\n   */\n  private async streamRequest(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ReadableStream<Uint8Array>> {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    logger.apiRequest(endpoint, 'POST-STREAM', options.body);\n\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'text/event-stream',\n        ...options.headers,\n      },\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      logger.apiError(endpoint, { message: error, status: response.status });\n      throw new Error(`Stream request failed: ${response.status}`);\n    }\n\n    logger.apiResponse(endpoint, response.status, 'Stream started');\n\n    return response.body!;\n  }\n\n  /**\n   * Cancel a specific request\n   */\n  cancelRequest(endpoint: string, method: string = 'GET'): void {\n    const controllers = Array.from(this.abortControllers.entries());\n    controllers.forEach(([key, controller]) => {\n      if (key.includes(`${method}-${endpoint}`)) {\n        controller.abort();\n        this.abortControllers.delete(key);\n      }\n    });\n  }\n\n  /**\n   * Cancel all pending requests\n   */\n  cancelAllRequests(): void {\n    this.abortControllers.forEach(controller => controller.abort());\n    this.abortControllers.clear();\n  }\n\n  // Agent Management\n  async getAgents(params?: {\n    page?: number;\n    per_page?: number;\n  }): Promise<AgentsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async createAgent(data: {\n    project_name: string;\n    sitemap_path?: string;\n    file_upload?: boolean;\n    webpage_url?: string;\n  }): Promise<APIResponse<Agent>> {\n    return this.request('/projects', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}`);\n  }\n\n  async updateAgent(id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }): Promise<APIResponse<Agent>> {\n    // Use FormData for multipart/form-data as specified in OpenAPI\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]) => {\n      if (value !== undefined) {\n        formData.append(key, String(value));\n      }\n    });\n\n    return this.request(`/projects/${id}`, {\n      method: 'POST', // Changed from PUT to POST as per OpenAPI spec\n      body: formData,\n    });\n  }\n\n  async deleteAgent(id: number): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async replicateAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}/replicate`, {\n      method: 'POST',\n    });\n  }\n\n  async getAgentStats(id: number): Promise<APIResponse<AgentStats>> {\n    return this.request(`/projects/${id}/stats`);\n  }\n\n  async getAgentSettings(id: number): Promise<APIResponse<AgentSettings>> {\n    return this.request(`/projects/${id}/settings`);\n  }\n\n  async updateAgentSettings(id: number, settings: Partial<AgentSettings> | FormData): Promise<APIResponse<AgentSettings>> {\n    const isFormData = settings instanceof FormData;\n    return this.request(`/projects/${id}/settings`, {\n      method: 'POST',\n      body: isFormData ? settings : JSON.stringify(settings),\n      headers: isFormData ? {} : { 'Content-Type': 'application/json' },\n    });\n  }\n\n  // Plugin Management\n  async getProjectPlugins(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request(`/projects/${projectId}/plugins`);\n  }\n\n  async updateProjectPlugin(\n    projectId: number,\n    pluginId: string,\n    data: { enabled: boolean }\n  ): Promise<APIResponse<{ updated: boolean }>> {\n    return this.request(`/projects/${projectId}/plugins/${pluginId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  // Conversation Management\n  async getConversations(projectId: number, params?: {\n    page?: number;\n    per_page?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: string;\n    userFilter?: 'all' | string;\n  }): Promise<ConversationsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.orderBy) queryParams.append('orderBy', params.orderBy);\n    if (params?.userFilter) queryParams.append('userFilter', params.userFilter);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async createConversation(projectId: number, data?: { name?: string }): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations`, {\n      method: 'POST',\n      body: JSON.stringify(data || {}),\n    });\n  }\n\n  async updateConversation(\n    projectId: number,\n    sessionId: string,\n    data: { name?: string }\n  ): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteConversation(projectId: number, sessionId: string): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Message Management\n  async getMessages(\n    projectId: number,\n    sessionId: string,\n    params?: {\n      page?: number;\n      per_page?: number;\n    }\n  ): Promise<MessagesResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async sendMessage(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      stream?: boolean;\n      source_ids?: string[];\n    }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async sendMessageStream(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      source_ids?: string[];\n    },\n    onChunk: (chunk: StreamChunk) => void,\n    onError?: (error: Error) => void,\n    onComplete?: () => void\n  ): Promise<void> {\n    try {\n      // Try the standard messages endpoint with stream=true parameter\n      const stream = await this.streamRequest(\n        `/projects/${projectId}/conversations/${sessionId}/messages`,\n        {\n          method: 'POST',\n          body: JSON.stringify({ ...data, stream: true }),\n        }\n      );\n\n      const reader = stream.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          onComplete?.();\n          break;\n        }\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const data = line.slice(6);\n              if (data === '[DONE]') {\n                onComplete?.();\n                return;\n              }\n              const chunk = parseStreamChunk(data);\n              if (chunk) {\n                onChunk(chunk);\n              }\n            } catch (e) {\n              console.error('Failed to parse chunk:', e);\n            }\n          }\n        }\n      }\n    } catch (error: any) {\n      onError?.(error);\n      throw error;\n    }\n  }\n\n  async getMessageById(\n    projectId: number,\n    sessionId: string,\n    messageId: number\n  ): Promise<APIMessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}`);\n  }\n\n  async updateMessageFeedback(\n    projectId: number,\n    sessionId: string,\n    messageId: number,\n    feedback: { feedback: 'thumbs_up' | 'thumbs_down' }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}/feedback`, {\n      method: 'PUT',\n      body: JSON.stringify(feedback),\n    });\n  }\n\n  // Citations\n  async getCitation(projectId: number, citationId: number): Promise<CitationResponse> {\n    return this.request(`/projects/${projectId}/citations/${citationId}`);\n  }\n\n  async previewCitationFile(id: string): Promise<any> {\n    return this.request(`/preview/${id}`);\n  }\n\n  // File Upload\n  async uploadFile(projectId: number, file: File, options?: {\n    onProgress?: (progress: number) => void;\n  }): Promise<SourceResponse> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // Use the correct /sources endpoint for file uploads\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  // Reports\n  async getTrafficReport(projectId: number): Promise<TrafficReportResponse> {\n    return this.request(`/projects/${projectId}/reports/traffic`);\n  }\n\n  async getQueriesReport(projectId: number): Promise<QueriesReportResponse> {\n    return this.request(`/projects/${projectId}/reports/queries`);\n  }\n\n  async getConversationsReport(projectId: number): Promise<ConversationsReportResponse> {\n    return this.request(`/projects/${projectId}/reports/conversations`);\n  }\n\n  async getAnalysisReport(projectId: number, interval?: AnalysisInterval): Promise<AnalysisReportResponse> {\n    const queryParams = new URLSearchParams();\n    if (interval) queryParams.append('interval', interval);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/reports/analysis${queryString ? `?${queryString}` : ''}`);\n  }\n\n  // Pages\n  async getPages(\n    projectId: number,\n    params?: PagesQueryParams\n  ): Promise<PagesListResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.crawl_status) queryParams.append('crawl_status', params.crawl_status);\n    if (params?.index_status) queryParams.append('index_status', params.index_status);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/pages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async deletePage(projectId: number, pageId: number): Promise<DeletePageResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async reindexPage(projectId: number, pageId: number): Promise<ReindexPageResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/reindex`, {\n      method: 'POST',\n    });\n  }\n\n  async getPageMetadata(projectId: number, pageId: number): Promise<PageMetadataResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/metadata`);\n  }\n\n  async updatePageMetadata(\n    projectId: number,\n    pageId: number,\n    metadata: Partial<PageMetadata>\n  ): Promise<PageMetadataResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/metadata`, {\n      method: 'PUT',\n      body: JSON.stringify(metadata),\n    });\n  }\n\n  // NOTE: This endpoint is not documented in the API\n  // Commenting out until we confirm it exists\n  // async previewFile(pageId: number): Promise<any> {\n  //   return this.request(`/page_file/${pageId}`);\n  // }\n\n  // Licenses\n  async getLicenses(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request(`/projects/${projectId}/licenses`);\n  }\n\n  async createLicense(projectId: number, data: { name: string }): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/licenses`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/licenses/${licenseId}`);\n  }\n\n  async updateLicense(\n    projectId: number,\n    licenseId: string,\n    data: { name?: string; is_active?: boolean }\n  ): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/licenses/${licenseId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/licenses/${licenseId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Sources\n  async getSources(projectId: number): Promise<SourcesListResponse> {\n    return this.request(`/projects/${projectId}/sources`);\n  }\n\n  async createSitemapSource(\n    projectId: number,\n    data: CreateSitemapSourceRequest\n  ): Promise<SourceResponse> {\n    // Convert JSON data to FormData as the API expects multipart/form-data\n    const formData = new FormData();\n    formData.append('sitemap_path', data.sitemap_path);\n    if (data.executive_js !== undefined) {\n      formData.append('executive_js', String(data.executive_js));\n    }\n    if (data.data_refresh_frequency !== undefined) {\n      formData.append('data_refresh_frequency', data.data_refresh_frequency);\n    }\n    if (data.create_new_pages !== undefined) {\n      formData.append('create_new_pages', String(data.create_new_pages));\n    }\n    if (data.remove_unexist_pages !== undefined) {\n      formData.append('remove_unexist_pages', String(data.remove_unexist_pages));\n    }\n    if (data.refresh_existing_pages !== undefined) {\n      formData.append('refresh_existing_pages', data.refresh_existing_pages);\n    }\n\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  async uploadFileSource(projectId: number, formData: FormData): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  /**\n   * Update source settings\n   * Updates the settings for an existing source.\n   * API endpoint: PUT /projects/{projectId}/sources/{sourceId}\n   */\n  async updateSourceSettings(\n    projectId: number,\n    sourceId: number,\n    settings: UpdateSourceSettingsRequest\n  ): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'PUT',\n      body: JSON.stringify(settings),\n    });\n  }\n\n  async deleteSource(projectId: number, sourceId: number): Promise<DeleteSourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async instantSyncSource(projectId: number, sourceId: number): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}/instant-sync`, {\n      method: 'PUT',\n    });\n  }\n\n  // User\n  async getUserLimits(): Promise<LimitsResponse> {\n    return this.request('/user/limits');\n  }\n\n  async getUserProfile(): Promise<UserProfileResponse> {\n    return this.request('/user');\n  }\n\n  async updateUserProfile(formData: FormData): Promise<UserProfileResponse> {\n    return this.request('/user', {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n}\n\n// Export singleton instance\nexport const proxyClient = new ProxyCustomGPTClient();","/**\n * CustomGPT API Client\n * \n * This file now uses the proxy client that communicates with our Next.js API routes.\n * The API key is stored securely on the server and never exposed to the client.\n * \n * Migration from direct API calls to proxy:\n * - All API calls now go through /api/proxy/* endpoints\n * - No API key is needed or stored client-side\n * - Server handles authentication with CustomGPT\n */\n\n// Re-export everything from the proxy client\nexport { proxyClient as apiClient } from './proxy-client';\nexport type { ProxyCustomGPTClient as CustomGPTClient } from './proxy-client';\n\n// Export a singleton instance getter\nimport { proxyClient } from './proxy-client';\n\nlet initialized = false;\n\n/**\n * Initialize the API client\n * No longer needs API key as it's handled server-side\n */\nexport function initializeClient(config?: any): void {\n  // Mark as initialized without needing API key\n  initialized = true;\n}\n\n/**\n * Get the API client instance\n */\nexport function getClient() {\n  return proxyClient;\n}\n\n/**\n * Check if client is initialized\n */\nexport function isClientInitialized(): boolean {\n  // Always return true since proxy client doesn't need initialization\n  return true;\n}","/**\n * Button Component\n * \n * Reusable button component with multiple variants and sizes.\n * Built with class-variance-authority for type-safe styling.\n * \n * Variants:\n * - default: Primary brand button with shadow\n * - destructive: Red danger button for destructive actions\n * - outline: Secondary button with border\n * - secondary: Gray background button\n * - ghost: Transparent button with hover state\n * - link: Text-only button styled as link\n * \n * Sizes:\n * - default: Standard size (h-10)\n * - sm: Small size (h-8)\n * - lg: Large size (h-12)\n * - icon: Square icon button (10x10)\n * \n * Features:\n * - Full keyboard accessibility\n * - Focus ring for keyboard navigation\n * - Disabled state handling\n * - Smooth transitions\n * - Responsive to all button HTML attributes\n * \n * Usage examples:\n * <Button>Click me</Button>\n * <Button variant=\"destructive\">Delete</Button>\n * <Button size=\"sm\" variant=\"outline\">Cancel</Button>\n * <Button size=\"icon\" variant=\"ghost\"><Icon /></Button>\n * \n * Features:\n * - Comprehensive variant system with brand-consistent styling\n * - Professional color schemes aligned with design guidelines\n * - Loading states with integrated spinner animations\n * - Button group functionality for complex interfaces\n * - Full icon support with flexible positioning options\n */\n\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\n/**\n * Button variant configuration using class-variance-authority\n * \n * Base classes apply to all buttons, then variant-specific\n * classes are added based on the variant and size props.\n */\nconst buttonVariants = cva(\n  // Base classes for all buttons\n  'inline-flex items-center justify-center rounded-lg text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90 shadow-sm',\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-sm',\n        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 py-2 px-4',\n        sm: 'h-8 px-3 text-xs',\n        lg: 'h-12 px-8',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\n/**\n * Button component props\n * \n * Extends standard HTML button attributes with variant props\n * @property variant - Visual style variant\n * @property size - Button size preset\n * @property asChild - Whether to render as child component (for composition)\n */\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\n/**\n * Button Component\n * \n * Forward ref component for proper ref handling in forms\n * and other use cases requiring direct DOM access.\n */\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };","/**\n * Avatar Component\n * \n * Reusable avatar component that displays agent avatars with fallback to default icons.\n * Supports different sizes, shapes, and fallback icons for various use cases.\n * \n * Features:\n * - Image loading with error handling\n * - Multiple size variants\n * - Customizable fallback icons\n * - Consistent styling across the application\n * - Accessibility support\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot, User } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport type { Agent } from '@/types';\n\nexport interface AvatarProps {\n  /** Agent/project data containing avatar information */\n  agent?: Agent | null;\n  /** Avatar image URL (alternative to agent prop) */\n  src?: string;\n  /** Alt text for the image */\n  alt?: string;\n  /** Size variant */\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  /** Shape variant */\n  shape?: 'circle' | 'rounded' | 'square';\n  /** Fallback icon type */\n  fallback?: 'bot' | 'user' | 'none';\n  /** Whether this avatar represents a selected/active state */\n  isSelected?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Avatar size configurations\n */\nconst sizeVariants = {\n  xs: {\n    container: 'w-4 h-4',\n    icon: 'w-2 h-2'\n  },\n  sm: {\n    container: 'w-6 h-6', \n    icon: 'w-3 h-3'\n  },\n  md: {\n    container: 'w-8 h-8',\n    icon: 'w-4 h-4'\n  },\n  lg: {\n    container: 'w-10 h-10',\n    icon: 'w-5 h-5'\n  },\n  xl: {\n    container: 'w-12 h-12',\n    icon: 'w-6 h-6'\n  }\n};\n\n/**\n * Avatar shape configurations\n */\nconst shapeVariants = {\n  circle: 'rounded-full',\n  rounded: 'rounded-lg', \n  square: 'rounded-none'\n};\n\n/**\n * Avatar Component\n * \n * Displays agent avatar with proper fallbacks and error handling.\n * \n * @param agent - Agent object containing avatar settings\n * @param src - Direct image URL (overrides agent avatar)\n * @param alt - Alt text for accessibility\n * @param size - Size variant (xs, sm, md, lg, xl)\n * @param shape - Shape variant (circle, rounded, square)\n * @param fallback - Fallback icon type\n * @param isSelected - Whether avatar represents selected state\n * @param className - Additional CSS classes\n */\nexport const Avatar: React.FC<AvatarProps> = ({\n  agent,\n  src,\n  alt,\n  size = 'md',\n  shape = 'circle',\n  fallback = 'bot',\n  isSelected = false,\n  className\n}) => {\n  const [imageError, setImageError] = React.useState(false);\n  \n  // Determine the avatar URL from props or agent settings\n  const avatarUrl = src || agent?.settings?.chatbot_avatar;\n  \n  // Generate alt text if not provided\n  const altText = alt || (agent?.project_name ? `${agent.project_name} avatar` : 'Avatar');\n  \n  // Get size and shape classes\n  const sizeClasses = sizeVariants[size];\n  const shapeClass = shapeVariants[shape];\n  \n  // Determine background color based on state\n  const backgroundClass = isSelected \n    ? 'bg-brand-600' \n    : 'bg-gray-200 hover:bg-gray-300 transition-colors';\n  \n  // Handle image load error\n  const handleImageError = () => {\n    setImageError(true);\n  };\n  \n  // Reset error state when avatar URL changes\n  React.useEffect(() => {\n    setImageError(false);\n  }, [avatarUrl]);\n  \n  // Render fallback icon\n  const renderFallbackIcon = () => {\n    if (fallback === 'none') return null;\n    \n    const iconClass = cn(\n      sizeClasses.icon,\n      isSelected ? 'text-white' : 'text-gray-600'\n    );\n    \n    switch (fallback) {\n      case 'user':\n        return <User className={iconClass} />;\n      case 'bot':\n      default:\n        return <Bot className={iconClass} />;\n    }\n  };\n  \n  return (\n    <div className={cn(\n      'flex items-center justify-center flex-shrink-0 overflow-hidden',\n      sizeClasses.container,\n      shapeClass,\n      backgroundClass,\n      className\n    )}>\n      {avatarUrl && !imageError ? (\n        <img\n          src={avatarUrl}\n          alt={altText}\n          className=\"w-full h-full object-cover\"\n          onError={handleImageError}\n          loading=\"lazy\"\n        />\n      ) : (\n        renderFallbackIcon()\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Avatar Component\n * \n * Specialized avatar component for agent/project displays.\n * Uses 'bot' fallback by default and extracts name for alt text.\n * \n * @param agent - Agent object\n * @param size - Size variant\n * @param isSelected - Selection state\n * @param className - Additional classes\n */\nexport const AgentAvatar: React.FC<{\n  agent?: Agent | null;\n  size?: AvatarProps['size'];\n  isSelected?: boolean;\n  className?: string;\n}> = ({ agent, size = 'md', isSelected = false, className }) => {\n  return (\n    <Avatar\n      agent={agent}\n      size={size}\n      shape=\"circle\"\n      fallback=\"bot\"\n      isSelected={isSelected}\n      alt={agent?.project_name ? `${agent.project_name} avatar` : 'Agent avatar'}\n      className={className}\n    />\n  );\n};\n\n/**\n * User Avatar Component\n * \n * Specialized avatar component for user displays.\n * Uses 'user' fallback by default.\n * \n * @param src - Avatar image URL\n * @param size - Size variant  \n * @param className - Additional classes\n */\nexport const UserAvatar: React.FC<{\n  src?: string;\n  size?: AvatarProps['size'];\n  className?: string;\n}> = ({ src, size = 'md', className }) => {\n  return (\n    <Avatar\n      src={src}\n      size={size}\n      shape=\"circle\"\n      fallback=\"user\"\n      alt=\"User avatar\"\n      className={className}\n    />\n  );\n};","/**\n * Citation List Component\n * \n * Displays a list of source citations from the AI's response.\n * Shows where the information came from with expandable details.\n * \n * Features:\n * - Expandable citation cards\n * - Confidence score visualization\n * - Direct source links\n * - Show more/less functionality\n * - Smooth expand/collapse animations\n * - Citation numbering\n * - View details modal integration\n * \n * UI/UX:\n * - Compact card design\n * - Progressive disclosure pattern\n * - Visual confidence indicators\n * - Hover states for interactivity\n * - Staggered animation on load\n * \n * Citation Display:\n * - Title and source URL\n * - Content preview\n * - Confidence percentage\n * - External link to source\n * - Details button for modal\n * \n * Features:\n * - Advanced citation filtering and intelligent search capabilities\n * - Professional export functionality for research workflows\n * - Enhanced confidence visualization with detailed analytics\n * - Smart citation grouping by domain and source type\n * - Interactive tooltips and one-click copy functionality\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  BookOpen, \n  ChevronDown, \n  ExternalLink,\n  FileText \n} from 'lucide-react';\n\nimport type { CitationProps, Citation } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\n/**\n * Props for individual citation card\n * \n * @property citation - Citation data object\n * @property index - Display index (1-based)\n * @property isExpanded - Whether card is expanded\n * @property onToggle - Toggle expansion callback\n * @property onClick - Optional click handler for details\n * @property onPreviewClick - Optional click handler for file preview\n */\ninterface CitationCardProps {\n  citation: Citation;\n  index: number;\n  isExpanded: boolean;\n  onToggle: () => void;\n  onClick?: (citation: Citation) => void;\n  onPreviewClick?: (citation: Citation) => void;\n}\n\n/**\n * Citation Card Component\n * \n * Individual citation with expandable details.\n * Shows title, source, content, and confidence score.\n */\nconst CitationCard: React.FC<CitationCardProps> = ({\n  citation,\n  index,\n  isExpanded,\n  onToggle,\n  onClick,\n  onPreviewClick,\n}) => {\n  return (\n    <div className=\"border border-gray-200 rounded-lg overflow-hidden transition-all hover:border-gray-300\">\n      <button\n        onClick={onToggle}\n        className=\"w-full px-3 py-2 flex items-center gap-3 hover:bg-gray-50 transition-colors text-left\"\n      >\n        {/* Citation Index */}\n        <div className=\"flex-shrink-0 w-6 h-6 rounded bg-brand-100 flex items-center justify-center\">\n          <span className=\"text-xs font-medium text-brand-700\">{index}</span>\n        </div>\n        \n        {/* Citation Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"font-medium text-sm text-gray-900 line-clamp-1\">\n            {citation.title}\n          </div>\n          <div className=\"text-xs text-gray-500 line-clamp-1\">\n            {citation.source || citation.url}\n          </div>\n        </div>\n        \n        {/* Expand Icon */}\n        <ChevronDown\n          className={cn(\n            'w-4 h-4 text-gray-400 transition-transform flex-shrink-0',\n            isExpanded && 'rotate-180'\n          )}\n        />\n      </button>\n      \n      {/* Expanded Content */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: 'auto', opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"px-3 py-2 border-t border-gray-100 bg-gray-50\">\n              <p className=\"text-sm text-gray-700 mb-2\">\n                {citation.content}\n              </p>\n              \n              \n              {/* Actions */}\n              <div className=\"flex items-center gap-2\">\n                {citation.url && (\n                  <a\n                    href={citation.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"inline-flex items-center gap-1 text-xs text-brand-600 hover:text-brand-700 transition-colors\"\n                  >\n                    View source\n                    <ExternalLink className=\"w-3 h-3\" />\n                  </a>\n                )}\n                \n                {onClick && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onClick(citation)}\n                    className=\"h-6 px-2 text-xs\"\n                  >\n                    View details\n                  </Button>\n                )}\n                \n                {onPreviewClick && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onPreviewClick(citation)}\n                    className=\"h-6 px-2 text-xs\"\n                  >\n                    <FileText className=\"w-3 h-3 mr-1\" />\n                    Preview file\n                  </Button>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\n/**\n * Citation List Component\n * \n * Main component that renders a list of citations with progressive disclosure.\n * Handles expansion state and show more/less functionality.\n * \n * @param citations - Array of citation objects to display\n * @param onCitationClick - Optional handler for citation detail clicks\n * @param maxVisible - Maximum citations to show initially (default: 5)\n * @param className - Additional CSS classes\n */\nexport const CitationList: React.FC<CitationProps & { onPreviewClick?: (citation: Citation) => void }> = ({ \n  citations, \n  onCitationClick,\n  onPreviewClick,\n  maxVisible = 5,\n  className \n}) => {\n  // Track which citations are expanded\n  const [expanded, setExpanded] = useState<Set<string>>(new Set());\n  // Track whether to show all citations or just maxVisible\n  const [showAll, setShowAll] = useState(false);\n  \n  const visibleCitations = showAll ? citations : citations.slice(0, maxVisible);\n  const hasMore = citations.length > maxVisible;\n\n  /**\n   * Toggle citation expansion state\n   * \n   * Uses Set for efficient lookup and update of expanded citations\n   */\n  const toggleExpanded = (citationId: string) => {\n    const newExpanded = new Set(expanded);\n    if (expanded.has(citationId)) {\n      newExpanded.delete(citationId);\n    } else {\n      newExpanded.add(citationId);\n    }\n    setExpanded(newExpanded);\n  };\n\n  if (citations.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={cn('mt-4 space-y-2', className)}>\n      {/* Header */}\n      <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n        <BookOpen className=\"w-4 h-4\" />\n        <span className=\"font-medium\">Sources</span>\n        <span className=\"text-gray-400\">({citations.length})</span>\n        \n        {hasMore && (\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => setShowAll(!showAll)}\n            className=\"ml-auto h-6 px-2 text-xs\"\n          >\n            {showAll ? 'Show less' : `Show all ${citations.length}`}\n          </Button>\n        )}\n      </div>\n      \n      {/* Citations */}\n      <div className=\"space-y-2\">\n        <AnimatePresence>\n          {visibleCitations.map((citation, idx) => (\n            <motion.div\n              key={citation.id}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.2, delay: idx * 0.05 }}\n            >\n              <CitationCard\n                citation={citation}\n                index={idx + 1}\n                isExpanded={expanded.has(citation.id)}\n                onToggle={() => toggleExpanded(citation.id)}\n                onClick={onCitationClick}\n                onPreviewClick={onPreviewClick}\n              />\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n      \n      {/* Load More Button */}\n      {hasMore && !showAll && (\n        <div className=\"pt-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setShowAll(true)}\n            className=\"w-full\"\n          >\n            Show {citations.length - maxVisible} more sources\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Message Details Component\n * \n * Displays additional metadata and information about a message\n * that's not shown in the main UI. Includes user ID, conversation ID,\n * metadata, and timestamps.\n * \n * Features:\n * - Collapsible details section\n * - Formatted metadata display\n * - Copy functionality for technical details\n * - Responsive layout\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { ChevronDown, ChevronUp, Copy, Info } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { cn, copyToClipboard } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport type { MessageDetails as MessageDetailsType } from '@/types';\n\ninterface MessageDetailsProps {\n  /** The message details to display */\n  details?: MessageDetailsType;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Format a key name to be more readable\n */\nconst formatKey = (key: string): string => {\n  return key\n    .split('_')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n};\n\n/**\n * Format a value for display\n */\nconst formatValue = (value: any): string => {\n  if (value === null || value === undefined) {\n    return 'N/A';\n  }\n  if (typeof value === 'object') {\n    return JSON.stringify(value, null, 2);\n  }\n  return String(value);\n};\n\nexport const MessageDetails: React.FC<MessageDetailsProps> = ({ details, className }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  if (!details) {\n    return null;\n  }\n\n  const handleCopyAll = async () => {\n    const detailsText = JSON.stringify(details, null, 2);\n    const success = await copyToClipboard(detailsText);\n    if (success) {\n      toast.success('Details copied to clipboard');\n    }\n  };\n\n  const handleCopyValue = async (value: string) => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      toast.success('Value copied to clipboard');\n    }\n  };\n\n  return (\n    <div className={cn('mt-2', className)}>\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"flex items-center gap-1 text-xs text-gray-500 hover:text-gray-700 transition-colors\"\n      >\n        <Info className=\"w-3 h-3\" />\n        <span>More Details</span>\n        {isExpanded ? (\n          <ChevronUp className=\"w-3 h-3\" />\n        ) : (\n          <ChevronDown className=\"w-3 h-3\" />\n        )}\n      </button>\n\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"mt-2 p-3 bg-gray-50 rounded-lg border border-gray-200\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className=\"text-xs font-semibold text-gray-700\">Message Details</h4>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={handleCopyAll}\n                  className=\"h-6 px-2 text-xs\"\n                >\n                  <Copy className=\"w-3 h-3 mr-1\" />\n                  Copy All\n                </Button>\n              </div>\n\n              <div className=\"space-y-2\">\n                {/* Basic Details */}\n                {details.user_id !== undefined && (\n                  <DetailRow\n                    label=\"User ID\"\n                    value={String(details.user_id)}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n                \n                {details.conversation_id !== undefined && (\n                  <DetailRow\n                    label=\"Conversation ID\"\n                    value={String(details.conversation_id)}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n                \n                {details.updated_at && (\n                  <DetailRow\n                    label=\"Updated At\"\n                    value={new Date(details.updated_at).toLocaleString()}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n\n                {/* Metadata Section */}\n                {details.metadata && (\n                  <div className=\"mt-3 pt-2 border-t border-gray-200\">\n                    <h5 className=\"text-xs font-semibold text-gray-600 mb-2\">Metadata</h5>\n                    \n                    {details.metadata.user_ip && (\n                      <DetailRow\n                        label=\"User IP\"\n                        value={details.metadata.user_ip}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                    \n                    {details.metadata.user_agent && (\n                      <DetailRow\n                        label=\"User Agent\"\n                        value={details.metadata.user_agent}\n                        onCopy={handleCopyValue}\n                        truncate\n                      />\n                    )}\n                    \n                    {details.metadata.external_id && (\n                      <DetailRow\n                        label=\"External ID\"\n                        value={details.metadata.external_id}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                    \n                    {details.metadata.request_source && (\n                      <DetailRow\n                        label=\"Request Source\"\n                        value={details.metadata.request_source}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\ninterface DetailRowProps {\n  label: string;\n  value: string;\n  onCopy: (value: string) => void;\n  truncate?: boolean;\n}\n\nconst DetailRow: React.FC<DetailRowProps> = ({ label, value, onCopy, truncate }) => {\n  return (\n    <div className=\"flex items-start justify-between gap-2 text-xs\">\n      <span className=\"text-gray-600 font-medium whitespace-nowrap\">{label}:</span>\n      <div className=\"flex items-center gap-1 flex-1 min-w-0\">\n        <span \n          className={cn(\n            \"text-gray-800 break-all\",\n            truncate && \"truncate\"\n          )}\n          title={truncate ? value : undefined}\n        >\n          {value}\n        </span>\n        <button\n          onClick={() => onCopy(value)}\n          className=\"p-1 text-gray-400 hover:text-gray-600 transition-colors flex-shrink-0\"\n          title=\"Copy value\"\n        >\n          <Copy className=\"w-3 h-3\" />\n        </button>\n      </div>\n    </div>\n  );\n};","/**\n * Message Component\n * \n * Displays individual chat messages with rich formatting support.\n * \n * Features:\n * - Markdown rendering with GitHub Flavored Markdown\n * - Syntax highlighting for code blocks\n * - Copy functionality for code and messages\n * - User feedback (thumbs up/down)\n * - Citation display and interaction\n * - Animated entrance and streaming cursor\n * - Different layouts for user vs assistant messages\n * \n * Customization:\n * - Modify avatar styles in the component\n * - Adjust markdown prose styles\n * - Customize code block themes (currently using oneDark)\n * - Change animation settings\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { motion } from 'framer-motion';\nimport { \n  Bot, \n  User, \n  Copy, \n  ThumbsUp, \n  ThumbsDown, \n  RotateCw,\n  ExternalLink \n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { MessageProps, Citation, ChatMessage } from '@/types';\nimport { cn, copyToClipboard, formatTimestamp } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { AgentAvatar, UserAvatar } from '@/components/ui/avatar';\nimport { CitationList } from './CitationList';\nimport { MessageDetails } from './MessageDetails';\n\ninterface CodeBlockProps {\n  /** Programming language for syntax highlighting */\n  language: string;\n  /** Code content to display */\n  value: string;\n}\n\n/**\n * CodeBlock Component\n * \n * Renders code with syntax highlighting and a copy button.\n * Uses react-syntax-highlighter with the oneDark theme.\n * Copy button appears on hover.\n */\nconst CodeBlock: React.FC<CodeBlockProps> = ({ language, value }) => {\n  const [copied, setCopied] = useState(false);\n  \n  const handleCopy = async () => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      setCopied(true);\n      toast.success('Code copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    }\n  };\n\n  return (\n    <div className=\"relative group\">\n      <div className=\"absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          onClick={handleCopy}\n          className=\"h-6 px-2 text-xs bg-foreground text-background hover:bg-foreground/90\"\n        >\n          {copied ? 'Copied!' : 'Copy'}\n        </Button>\n      </div>\n      <SyntaxHighlighter\n        language={language}\n        style={oneDark}\n        customStyle={{\n          margin: 0,\n          borderRadius: '0.5rem',\n          fontSize: '0.875rem',\n        }}\n      >\n        {value}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\n/**\n * StreamingCursor Component\n * \n * Animated blinking cursor shown at the end of streaming messages\n * to indicate the AI is still generating content\n */\nconst StreamingCursor: React.FC = () => (\n  <span className=\"inline-block w-0.5 h-4 bg-foreground animate-blink ml-0.5 align-middle\" />\n);\n\ninterface MessageContentProps {\n  /** Markdown content to render */\n  content: string;\n  /** Whether the message is currently being streamed */\n  isStreaming?: boolean;\n}\n\n/**\n * MessageContent Component\n * \n * Renders message content with full markdown support including:\n * - Headers, lists, tables (via GFM)\n * - Inline and block code with syntax highlighting\n * - Links that open in new tabs\n * - Streaming cursor when content is being generated\n */\nconst MessageContent: React.FC<MessageContentProps> = ({ content, isStreaming }) => {\n  // Remove <CONTEXT> and </CONTEXT> tags from the content\n  const cleanedContent = content.replace(/<CONTEXT>|<\\/CONTEXT>/g, '').trim();\n  \n  return (\n    <div className=\"prose prose-sm max-w-none text-foreground\">\n      <ReactMarkdown\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || '');\n            const isInline = !match;\n            return !isInline && match ? (\n              <CodeBlock\n                language={match[1]}\n                value={String(children).replace(/\\n$/, '')}\n                {...props}\n              />\n            ) : (\n              <code className=\"px-1 py-0.5 rounded bg-muted text-sm font-medium\" {...props}>\n                {children}\n              </code>\n            );\n          },\n          a({ href, children }) {\n            return (\n              <a\n                href={href}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-brand-600 hover:text-brand-700 no-underline hover:underline inline-flex items-center gap-1\"\n              >\n                {children}\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            );\n          },\n        }}\n      >\n        {cleanedContent}\n      </ReactMarkdown>\n      {isStreaming && <StreamingCursor />}\n    </div>\n  );\n};\n\ninterface MessageActionsProps {\n  /** The message object containing content and metadata */\n  message: ChatMessage;\n  /** Handler for user feedback */\n  onFeedback?: (feedback: 'like' | 'dislike') => void;\n}\n\n/**\n * MessageActions Component\n * \n * Action buttons for assistant messages:\n * - Copy message content\n * - Thumbs up/down feedback\n * - Regenerate response (placeholder)\n * \n * Only visible on hover for cleaner UI\n */\nconst MessageActions: React.FC<MessageActionsProps> = ({ message, onFeedback }) => {\n  const [feedback, setFeedback] = useState<'like' | 'dislike' | null>(\n    message.feedback || null\n  );\n\n  const handleCopy = async () => {\n    const success = await copyToClipboard(message.content);\n    if (success) {\n      toast.success('Message copied to clipboard');\n    }\n  };\n\n  const handleFeedback = (type: 'like' | 'dislike') => {\n    setFeedback(type);\n    onFeedback?.(type);\n    toast.success('Thanks for your feedback!');\n  };\n\n  const handleRegenerate = () => {\n    // This would trigger message regeneration\n    toast.info('Regenerating response...');\n  };\n\n  return (\n    <div className=\"mt-3 flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleCopy}\n        className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n        title=\"Copy message\"\n      >\n        <Copy className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('like')}\n        className={cn(\n          'h-8 w-8 text-muted-foreground hover:text-foreground',\n          feedback === 'like' && 'text-success hover:text-success/90'\n        )}\n        title=\"Good response\"\n      >\n        <ThumbsUp className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('dislike')}\n        className={cn(\n          'h-8 w-8 text-muted-foreground hover:text-foreground',\n          feedback === 'dislike' && 'text-destructive hover:text-destructive/90'\n        )}\n        title=\"Bad response\"\n      >\n        <ThumbsDown className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleRegenerate}\n        className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n        title=\"Regenerate response\"\n      >\n        <RotateCw className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n};\n\n/**\n * Message Component - Main Export\n * \n * Renders a complete message with avatar, content, citations, and actions.\n * \n * Layout:\n * - User messages: White background, user avatar, plain text\n * - Assistant messages: Gray background, bot avatar, markdown content\n * \n * Features:\n * - Smooth entrance animation with Framer Motion\n * - Hover effects for action visibility\n * - Status indicators (sending, error)\n * - Timestamp display\n * - Citation list integration\n * \n * @param message - The message data to display\n * @param isStreaming - Whether this message is being streamed\n * @param isLast - Whether this is the last message (affects scrolling)\n * @param onCitationClick - Handler for citation interactions\n * @param onFeedback - Handler for user feedback\n * @param className - Additional CSS classes\n */\nexport const Message: React.FC<MessageProps> = ({ \n  message,\n  agent,\n  isStreaming = false, \n  isLast = false,\n  onCitationClick,\n  onPreviewClick,\n  onFeedback,\n  className \n}) => {\n  const isUser = message.role === 'user';\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n      className={cn(\n        'group relative px-4 py-6 transition-colors',\n        isUser ? 'bg-background' : 'bg-muted border-y border-border',\n        'hover:bg-opacity-80',\n        className\n      )}\n    >\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"flex-shrink-0\">\n          {isUser ? (\n            <UserAvatar \n              size=\"md\" \n              className=\"bg-secondary\"\n            />\n          ) : (\n            <AgentAvatar \n              agent={agent}\n              size=\"md\"\n              className=\"bg-background border border-border\"\n            />\n          )}\n        </div>\n        \n        {/* Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          {/* Message Status */}\n          {message.status && message.status !== 'sent' && (\n            <div className=\"mb-2 text-xs text-muted-foreground\">\n              {message.status === 'sending' && 'Sending...'}\n              {message.status === 'error' && (\n                <span className=\"text-red-500\">Failed to send</span>\n              )}\n            </div>\n          )}\n          \n          {/* Message Content */}\n          {isUser ? (\n            <p className=\"text-foreground whitespace-pre-wrap\">{message.content}</p>\n          ) : (\n            <MessageContent \n              content={message.content} \n              isStreaming={isStreaming}\n            />\n          )}\n          \n          {/* Citations */}\n          {message.citations && message.citations.length > 0 && (\n            <CitationList \n              citations={message.citations}\n              onCitationClick={onCitationClick}\n              onPreviewClick={onPreviewClick}\n            />\n          )}\n          \n          {/* Timestamp */}\n          <div className=\"mt-2 text-xs text-muted-foreground\">\n            {formatTimestamp(message.timestamp)}\n          </div>\n          \n          {/* Message Details (hidden by default) */}\n          <MessageDetails details={message.details} />\n          \n          {/* Actions */}\n          {!isUser && !isStreaming && (\n            <MessageActions \n              message={message}\n              onFeedback={onFeedback}\n            />\n          )}\n        </div>\n      </div>\n    </motion.div>\n  );\n};","/**\n * Loading Components\n * \n * Reusable loading indicators for consistent loading states across the app.\n * Includes spinner, skeleton loaders, and full-page loading states.\n */\n\nimport React from 'react';\nimport { cn } from '@/lib/utils';\nimport { Loader2 } from 'lucide-react';\n\ninterface SpinnerProps {\n  /** Size of the spinner */\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  /** Additional CSS classes */\n  className?: string;\n  /** Label for accessibility */\n  label?: string;\n}\n\n/**\n * Spinner Component\n * \n * Animated spinning loader for inline and overlay loading states\n */\nexport const Spinner: React.FC<SpinnerProps> = ({ \n  size = 'md', \n  className,\n  label = 'Loading...'\n}) => {\n  const sizeClasses = {\n    sm: 'h-4 w-4',\n    md: 'h-6 w-6',\n    lg: 'h-8 w-8',\n    xl: 'h-12 w-12'\n  };\n\n  return (\n    <Loader2 \n      className={cn(\n        'animate-spin text-primary',\n        sizeClasses[size],\n        className\n      )}\n      aria-label={label}\n    />\n  );\n};\n\ninterface SkeletonProps {\n  /** Additional CSS classes */\n  className?: string;\n  /** Whether to animate the skeleton */\n  animate?: boolean;\n}\n\n/**\n * Skeleton Component\n * \n * Placeholder loading state for content\n */\nexport const Skeleton: React.FC<SkeletonProps> = ({ \n  className,\n  animate = true\n}) => {\n  return (\n    <div\n      className={cn(\n        'bg-muted rounded',\n        animate && 'animate-pulse',\n        className\n      )}\n    />\n  );\n};\n\ninterface LoadingDotsProps {\n  /** Size of the dots */\n  size?: 'sm' | 'md' | 'lg';\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * LoadingDots Component\n * \n * Three animated dots for typing/processing indicators\n */\nexport const LoadingDots: React.FC<LoadingDotsProps> = ({ \n  size = 'md',\n  className \n}) => {\n  const sizeClasses = {\n    sm: 'h-1 w-1',\n    md: 'h-1.5 w-1.5',\n    lg: 'h-2 w-2'\n  };\n\n  return (\n    <div className={cn('flex space-x-1', className)}>\n      <div className={cn(\n        'bg-muted-foreground rounded-full animate-bounce',\n        sizeClasses[size],\n        '[animation-delay:-0.3s]'\n      )} />\n      <div className={cn(\n        'bg-muted-foreground rounded-full animate-bounce',\n        sizeClasses[size],\n        '[animation-delay:-0.15s]'\n      )} />\n      <div className={cn(\n        'bg-muted-foreground rounded-full animate-bounce',\n        sizeClasses[size]\n      )} />\n    </div>\n  );\n};\n\ninterface LoadingOverlayProps {\n  /** Whether the overlay is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Whether to blur the background */\n  blur?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * LoadingOverlay Component\n * \n * Full-screen or container overlay with loading indicator\n */\nexport const LoadingOverlay: React.FC<LoadingOverlayProps> = ({ \n  visible,\n  message,\n  blur = true,\n  className\n}) => {\n  if (!visible) return null;\n\n  return (\n    <div className={cn(\n      'absolute inset-0 z-50 flex items-center justify-center',\n      'bg-background/80 transition-opacity duration-200',\n      blur && 'backdrop-blur-sm',\n      className\n    )}>\n      <div className=\"flex flex-col items-center space-y-3\">\n        <Spinner size=\"lg\" />\n        {message && (\n          <p className=\"text-sm text-muted-foreground\">{message}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface MessageSkeletonProps {\n  /** Whether this represents an assistant message */\n  isAssistant?: boolean;\n  /** Number of lines to show */\n  lines?: number;\n}\n\n/**\n * MessageSkeleton Component\n * \n * Skeleton loader specifically for chat messages\n */\nexport const MessageSkeleton: React.FC<MessageSkeletonProps> = ({ \n  isAssistant = false,\n  lines = 3\n}) => {\n  return (\n    <div className={cn(\n      'flex gap-3 p-4',\n      isAssistant ? 'bg-muted' : 'bg-background'\n    )}>\n      {/* Avatar */}\n      <Skeleton className=\"h-8 w-8 rounded-full flex-shrink-0\" />\n      \n      {/* Message content */}\n      <div className=\"flex-1 space-y-2\">\n        {Array.from({ length: lines }).map((_, i) => (\n          <Skeleton \n            key={i}\n            className={cn(\n              'h-4',\n              i === lines - 1 ? 'w-3/4' : 'w-full'\n            )}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\ninterface ConversationSkeletonProps {\n  /** Number of conversation items to show */\n  count?: number;\n}\n\n/**\n * ConversationSkeleton Component\n * \n * Skeleton loader for conversation list items\n */\nexport const ConversationSkeleton: React.FC<ConversationSkeletonProps> = ({ \n  count = 3 \n}) => {\n  return (\n    <div className=\"space-y-2 p-2\">\n      {Array.from({ length: count }).map((_, i) => (\n        <div key={i} className=\"p-3 rounded-lg\">\n          <Skeleton className=\"h-4 w-3/4 mb-2\" />\n          <Skeleton className=\"h-3 w-1/2\" />\n        </div>\n      ))}\n    </div>\n  );\n};\n\ninterface LoadingButtonProps {\n  /** Whether the button is in loading state */\n  loading: boolean;\n  /** Button content when not loading */\n  children: React.ReactNode;\n  /** Loading text to display */\n  loadingText?: string;\n  /** Additional CSS classes */\n  className?: string;\n  /** Other button props */\n  [key: string]: any;\n}\n\n/**\n * LoadingButton Component\n * \n * Button with integrated loading state\n */\nexport const LoadingButton: React.FC<LoadingButtonProps> = ({ \n  loading,\n  children,\n  loadingText = 'Loading...',\n  className,\n  disabled,\n  ...props\n}) => {\n  return (\n    <button\n      className={cn(\n        'relative',\n        loading && 'cursor-not-allowed opacity-70',\n        className\n      )}\n      disabled={disabled || loading}\n      {...props}\n    >\n      {loading ? (\n        <span className=\"flex items-center justify-center gap-2\">\n          <Spinner size=\"sm\" />\n          <span>{loadingText}</span>\n        </span>\n      ) : (\n        children\n      )}\n    </button>\n  );\n};\n\ninterface ScreenLoadingProps {\n  /** Whether the screen loading is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Optional icon to show with the loading message */\n  icon?: React.ReactNode;\n  /** Background opacity (0-100) */\n  opacity?: number;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * ScreenLoading Component\n * \n * Full-screen loading overlay for page/screen transitions\n * with customizable message and icon\n */\nexport const ScreenLoading: React.FC<ScreenLoadingProps> = ({\n  visible,\n  message = 'Loading...',\n  icon,\n  opacity = 95,\n  className\n}) => {\n  if (!visible) return null;\n\n  return (\n    <div className={cn(\n      'fixed inset-0 z-[100] flex items-center justify-center',\n      'transition-all duration-300',\n      className\n    )}\n    style={{ backgroundColor: `rgba(255, 255, 255, ${opacity / 100})` }}>\n      <div className=\"flex flex-col items-center space-y-4 p-8\">\n        <div className=\"relative\">\n          {icon ? (\n            <div className=\"flex items-center justify-center w-16 h-16 bg-brand-50 rounded-full mb-2\">\n              {icon}\n            </div>\n          ) : (\n            <Spinner size=\"xl\" />\n          )}\n        </div>\n        {message && (\n          <div className=\"text-center\">\n            <p className=\"text-lg font-medium text-gray-900 mb-1\">{message}</p>\n            <div className=\"flex items-center justify-center space-x-1\">\n              <LoadingDots size=\"md\" />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface PageLoadingProps {\n  /** Whether the page loading is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Show skeleton content instead of spinner */\n  showSkeleton?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * PageLoading Component\n * \n * In-page loading state for content areas\n * with optional skeleton loading\n */\nexport const PageLoading: React.FC<PageLoadingProps> = ({\n  visible,\n  message = 'Loading page...',\n  showSkeleton = false,\n  className\n}) => {\n  if (!visible) return null;\n\n  if (showSkeleton) {\n    return (\n      <div className={cn('space-y-4 p-6', className)}>\n        <div className=\"space-y-3\">\n          <Skeleton className=\"h-8 w-1/3\" />\n          <Skeleton className=\"h-4 w-2/3\" />\n          <Skeleton className=\"h-4 w-1/2\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <div key={i} className=\"space-y-3\">\n              <Skeleton className=\"h-32 w-full rounded-lg\" />\n              <Skeleton className=\"h-4 w-3/4\" />\n              <Skeleton className=\"h-3 w-1/2\" />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\n      'flex flex-col items-center justify-center p-12',\n      className\n    )}>\n      <Spinner size=\"lg\" />\n      <p className=\"mt-4 text-gray-600\">{message}</p>\n    </div>\n  );\n};","\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md bg-gray-900 px-3 py-1.5 text-xs text-gray-50 animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }","'use client';\n\nimport { Mic } from 'lucide-react';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n\ninterface VoiceButtonProps {\n  onClick: () => void;\n  disabled?: boolean;\n}\n\nexport function VoiceButton({ onClick, disabled }: VoiceButtonProps) {\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <button\n            type=\"button\"\n            onClick={onClick}\n            disabled={disabled}\n            className=\"\n              relative h-10 w-10 flex-shrink-0 rounded-full\n              bg-gradient-to-br from-purple-500 via-pink-500 to-red-500\n              hover:from-purple-600 hover:via-pink-600 hover:to-red-600\n              active:from-purple-700 active:via-pink-700 active:to-red-700\n              disabled:from-gray-400 disabled:via-gray-500 disabled:to-gray-600\n              shadow-lg hover:shadow-xl active:shadow-md\n              transition-all duration-200 ease-in-out\n              hover:scale-105 active:scale-95\n              disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100\n              group\n              flex items-center justify-center\n              border-2 border-white/20 hover:border-white/30\n            \"\n          >\n            {/* Animated background glow */}\n            <div className=\"\n              absolute inset-0 rounded-full\n              bg-gradient-to-br from-purple-400/30 via-pink-400/30 to-red-400/30\n              opacity-0 group-hover:opacity-100\n              animate-pulse\n              transition-opacity duration-300\n              blur-sm\n            \" />\n            \n            {/* Mic icon with enhanced styling */}\n            <Mic className=\"\n              h-5 w-5 text-white relative z-10\n              drop-shadow-sm\n              group-hover:drop-shadow-md\n              transition-all duration-200\n            \" />\n          </button>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p>Try voice mode</p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}","/**\n * ChatInput Component\n * \n * Rich input field for sending messages and uploading files.\n * \n * Features:\n * - Auto-expanding textarea (up to 200px height)\n * - File upload with drag-and-drop support\n * - File type and size validation\n * - Progress tracking for uploads\n * - Character count display\n * - Keyboard shortcuts (Enter to send, Shift+Enter for newline)\n * - Animated file chips and drag overlay\n * \n * Customization:\n * - Modify CONSTANTS in utils for file limits\n * - Adjust max textarea height (line 144)\n * - Customize accepted file types\n * - Style the drag overlay and file chips\n */\n\n'use client';\n\nimport React, { useState, useRef, useCallback, KeyboardEvent, FormEvent } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Send, \n  Square, \n  Paperclip, \n  X,\n  Upload,\n  AlertCircle \n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { InputProps, FileUpload } from '@/types';\nimport { cn, formatFileSize, getFileIcon, isFileTypeAllowed, generateId, CONSTANTS } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Spinner } from '@/components/ui/loading';\nimport { VoiceButton } from '@/components/voice/VoiceButton';\n\ninterface FileChipProps {\n  /** File upload object with metadata */\n  file: FileUpload;\n  /** Handler to remove this file */\n  onRemove: () => void;\n}\n\n/**\n * FileChip Component\n * \n * Displays an uploaded or uploading file with:\n * - File icon based on type\n * - Name and size\n * - Upload progress bar\n * - Remove button\n * - Error state indication\n */\nconst FileChip: React.FC<FileChipProps> = ({ file, onRemove }) => {\n  const fileIcon = getFileIcon(file.type);\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"flex items-center gap-2 px-3 py-1.5 bg-muted hover:bg-accent rounded-lg transition-colors\"\n    >\n      <div className=\"text-muted-foreground\">{fileIcon}</div>\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"text-sm font-medium text-foreground truncate\">\n          {file.name}\n        </div>\n        <div className=\"text-xs text-muted-foreground flex items-center gap-2\">\n          <span>{formatFileSize(file.size)}</span>\n          {file.status === 'uploading' && (\n            <>\n              <span>•</span>\n              <span>{file.progress}%</span>\n            </>\n          )}\n          {file.status === 'error' && (\n            <>\n              <span>•</span>\n              <span className=\"text-destructive flex items-center gap-1\">\n                <AlertCircle className=\"w-3 h-3\" />\n                Error\n              </span>\n            </>\n          )}\n        </div>\n      </div>\n      \n      {/* Progress Bar */}\n      {file.status === 'uploading' && (\n        <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-muted rounded-b\">\n          <div \n            className=\"h-full bg-brand-500 rounded-b transition-all duration-300\"\n            style={{ width: `${file.progress}%` }}\n          />\n        </div>\n      )}\n      \n      <button\n        onClick={onRemove}\n        className=\"p-0.5 rounded hover:bg-accent-foreground/20 transition-colors\"\n        disabled={file.status === 'uploading'}\n      >\n        <X className=\"w-3 h-3 text-muted-foreground\" />\n      </button>\n    </motion.div>\n  );\n};\n\ninterface FileUploadButtonProps {\n  /** Handler called when files are selected */\n  onUpload: (files: File[]) => void;\n  /** Whether the button is disabled */\n  disabled?: boolean;\n}\n\n/**\n * FileUploadButton Component\n * \n * Hidden file input with visible button trigger.\n * Accepts multiple files based on ACCEPTED_FILE_TYPES.\n */\nconst FileUploadButton: React.FC<FileUploadButtonProps> = ({ onUpload, disabled }) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    if (files.length > 0) {\n      onUpload(files);\n      e.target.value = '';\n    }\n  };\n  \n  return (\n    <>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept={CONSTANTS.ACCEPTED_FILE_TYPES.join(',')}\n        onChange={handleChange}\n        className=\"hidden\"\n      />\n      <Button\n        type=\"button\"\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleClick}\n        disabled={disabled}\n        className=\"h-10 w-10 text-muted-foreground hover:text-foreground\"\n        title=\"Upload files\"\n      >\n        <Paperclip className=\"h-5 w-5\" />\n      </Button>\n    </>\n  );\n};\n\n/**\n * ChatInput Component - Main Export\n * \n * Complete chat input with message composition and file upload.\n * \n * Props:\n * @param onSend - Handler called with message content and files\n * @param disabled - Disables input during message sending\n * @param placeholder - Placeholder text for the textarea\n * @param maxLength - Maximum message length (default from CONSTANTS)\n * @param className - Additional CSS classes\n * @param onVoiceClick - Handler for voice mode button click\n * \n * State Management:\n * - input: Current message text\n * - files: Array of uploaded/uploading files\n * - isDragOver: Drag-and-drop state\n * \n * @example\n * <ChatInput \n *   onSend={(message, files) => handleSend(message, files)}\n *   disabled={isLoading}\n *   onVoiceClick={() => setVoiceModalOpen(true)}\n * />\n */\nexport const ChatInput: React.FC<InputProps> = ({ \n  onSend,\n  disabled = false,\n  placeholder = \"Send a message...\",\n  maxLength = CONSTANTS.MAX_MESSAGE_LENGTH,\n  className,\n  onVoiceClick\n}) => {\n  const [input, setInput] = useState('');\n  const [files, setFiles] = useState<FileUpload[]>([]);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \n  /**\n   * Auto-resize textarea based on content\n   * Grows up to maxHeight (200px) then scrolls\n   */\n  const adjustTextareaHeight = useCallback(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      const scrollHeight = textarea.scrollHeight;\n      const maxHeight = 200; // Max height in pixels - customize as needed\n      textarea.style.height = `${Math.min(scrollHeight, maxHeight)}px`;\n    }\n  }, []);\n  \n  // Handle text input changes\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    if (value.length <= maxLength) {\n      setInput(value);\n      adjustTextareaHeight();\n    }\n  };\n  \n  // Handle key presses\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e as any);\n    }\n  };\n  \n  // Handle form submission\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    \n    if (disabled) return;\n    if (!input.trim() && files.length === 0) return;\n    \n    // Convert FileUpload objects to File objects\n    const fileObjects = files\n      .filter(f => f.status === 'uploaded')\n      .map(f => f.file); // Use the actual File object\n    \n    onSend(input.trim(), fileObjects);\n    \n    // Reset form\n    setInput('');\n    setFiles([]);\n    \n    // Reset textarea height\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n    }\n    \n    // Focus textarea\n    setTimeout(() => {\n      textareaRef.current?.focus();\n    }, 0);\n  };\n  \n  /**\n   * Handle file uploads with validation\n   * Checks file size and type before accepting\n   * Shows toast notifications for validation errors\n   */\n  const handleFileUpload = useCallback((newFiles: File[]) => {\n    const validFiles = newFiles.filter(file => {\n      // Check file size against MAX_FILE_SIZE constant\n      if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n        toast.error(`File \"${file.name}\" is too large. Maximum size is ${formatFileSize(CONSTANTS.MAX_FILE_SIZE)}`);\n        return false;\n      }\n      \n      // Check file type against ACCEPTED_FILE_TYPES\n      if (!isFileTypeAllowed(file.type, CONSTANTS.ACCEPTED_FILE_TYPES)) {\n        toast.error(`File type \"${file.type}\" is not supported`);\n        return false;\n      }\n      \n      return true;\n    });\n    \n    const uploadFiles: FileUpload[] = validFiles.map(file => ({\n      id: generateId(),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      status: 'uploading',\n      progress: 0,\n      file: file, // Store the actual File object\n    }));\n    \n    setFiles(prev => [...prev, ...uploadFiles]);\n    \n    // Simulate file upload\n    uploadFiles.forEach(uploadFile => {\n      simulateUpload(uploadFile);\n    });\n    \n  }, []);\n  \n  /**\n   * Simulate file upload progress\n   * In production, replace with actual upload logic\n   * Updates progress in 100ms intervals\n   */\n  const simulateUpload = (uploadFile: FileUpload) => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 20;\n      \n      if (progress >= 100) {\n        progress = 100;\n        clearInterval(interval);\n        \n        // Mark file as uploaded\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, status: 'uploaded' as const, progress: 100 }\n            : f\n        ));\n      } else {\n        // Update progress\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, progress: Math.round(progress) }\n            : f\n        ));\n      }\n    }, 100);\n  };\n  \n  // Remove file\n  const removeFile = (fileId: string) => {\n    setFiles(prev => prev.filter(f => f.id !== fileId));\n  };\n  \n  /**\n   * Dropzone configuration for drag-and-drop\n   * - Accepts files based on ACCEPTED_FILE_TYPES\n   * - Validates file size\n   * - Shows overlay on drag\n   * - Disabled click/keyboard to use custom button\n   */\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: handleFileUpload,\n    noClick: true, // Use custom button instead\n    noKeyboard: true,\n    accept: CONSTANTS.ACCEPTED_FILE_TYPES.reduce((acc, type) => {\n      acc[type] = [];\n      return acc;\n    }, {} as Record<string, string[]>),\n    maxSize: CONSTANTS.MAX_FILE_SIZE,\n    onDragEnter: () => setIsDragOver(true),\n    onDragLeave: () => setIsDragOver(false),\n  });\n  \n  const canSend = !disabled && (input.trim() || files.some(f => f.status === 'uploaded'));\n  \n  return (\n    <div \n      {...getRootProps()}\n      className={cn(\n        'border-t border-border bg-background px-4 py-3 relative',\n        isDragActive && 'bg-brand-50',\n        className\n      )}\n    >\n      <input {...getInputProps()} />\n      \n      {/* Drag Overlay */}\n      <AnimatePresence>\n        {isDragActive && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-brand-50 border-2 border-dashed border-brand-300 rounded-lg flex items-center justify-center z-10\"\n          >\n            <div className=\"text-center\">\n              <Upload className=\"w-8 h-8 text-brand-600 mx-auto mb-2\" />\n              <p className=\"text-brand-700 font-medium\">Drop files here to upload</p>\n              <p className=\"text-brand-600 text-sm\">\n                Supports PDF, DOC, TXT, and more\n              </p>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* File Preview */}\n      <AnimatePresence>\n        {files.length > 0 && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"mb-2 flex flex-wrap gap-2\"\n          >\n            {files.map((file) => (\n              <FileChip\n                key={file.id}\n                file={file}\n                onRemove={() => removeFile(file.id)}\n              />\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      <form onSubmit={handleSubmit} className=\"flex items-end gap-2\">\n        {/* File Upload Button */}\n        <FileUploadButton\n          onUpload={handleFileUpload}\n          disabled={disabled}\n        />\n        \n        {/* Voice Button */}\n        {onVoiceClick && (\n          <VoiceButton\n            onClick={onVoiceClick}\n            disabled={disabled}\n          />\n        )}\n        \n        {/* Text Input */}\n        <div className=\"flex-1 relative\">\n          <textarea\n            ref={textareaRef}\n            value={input}\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            placeholder={placeholder}\n            disabled={disabled}\n            rows={1}\n            className={cn(\n              'w-full resize-none rounded-lg border border-input bg-background',\n              'px-3 py-2 pr-12',\n              'focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-transparent',\n              'disabled:opacity-50 disabled:cursor-not-allowed',\n              'min-h-[44px] max-h-[200px]',\n              'placeholder:text-muted-foreground text-foreground'\n            )}\n            style={{\n              height: 'auto',\n              overflowY: input.split('\\n').length > 5 ? 'auto' : 'hidden',\n            }}\n          />\n          \n          {/* Character Count */}\n          {input.length > 0 && (\n            <div className=\"absolute bottom-2 right-2 text-xs text-muted-foreground pointer-events-none\">\n              {input.length}/{maxLength}\n            </div>\n          )}\n        </div>\n        \n        {/* Send Button */}\n        <Button\n          type=\"submit\"\n          size=\"icon\"\n          disabled={!canSend}\n          className={cn(\n            'h-10 w-10 flex-shrink-0',\n            'transition-all duration-200'\n          )}\n          title={disabled ? 'Sending message...' : 'Send message'}\n        >\n          {disabled ? (\n            <Spinner size=\"sm\" className=\"text-white\" />\n          ) : (\n            <Send className=\"h-5 w-5\" />\n          )}\n        </Button>\n      </form>\n      \n      {/* Input Hints */}\n      <div className=\"mt-2 flex items-center justify-between text-xs text-muted-foreground\">\n        <span>Press Enter to send, Shift+Enter for new line</span>\n      </div>\n    </div>\n  );\n};","/**\n * Typing Indicator Component\n * \n * Shows animated typing indicator when AI is generating a response.\n * Provides visual feedback that the system is processing.\n * \n * Features:\n * - Three-dot bouncing animation\n * - AI avatar display\n * - Staggered animation delays\n * - Consistent styling with messages\n * - Subtle bounce effect\n * \n * Animation:\n * - Uses CSS animations defined in globals.css\n * - animate-bounce-subtle class for smooth motion\n * - Staggered delays (0ms, 100ms, 200ms)\n * - Creates wave-like effect\n * \n * Design:\n * - Matches message component layout\n * - Gray background for distinction\n * - Centered in chat container\n * - Responsive max-width\n * \n * Features:\n * - Multiple animation styles for enhanced visual feedback\n * - Contextual status messages for different AI processing states\n * - Progress indicators with time estimation for long operations\n * - Professional avatar customization with brand consistency\n * - Advanced loading patterns including skeleton alternatives\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n/**\n * Props for TypingIndicator\n * \n * @property className - Additional CSS classes for styling\n */\ninterface TypingIndicatorProps {\n  className?: string;\n}\n\n/**\n * Typing Indicator Component\n * \n * Displays animated dots to indicate AI is typing/processing.\n * Maintains visual consistency with message components.\n */\nexport const TypingIndicator: React.FC<TypingIndicatorProps> = ({ className }) => {\n  return (\n    <div className={cn(\n      'px-4 py-6 bg-muted border-y border-border',\n      className\n    )}>\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"w-8 h-8 rounded-full bg-background border border-border flex items-center justify-center flex-shrink-0\">\n          <Bot className=\"w-4 h-4 text-brand-600\" />\n        </div>\n        \n        {/* Typing Animation */}\n        <div className=\"flex items-center gap-1 py-2\">\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle\" />\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle delay-100\" />\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle delay-200\" />\n        </div>\n      </div>\n    </div>\n  );\n};","/**\n * Agent Selector Component\n * \n * Dropdown selector for switching between different CustomGPT agents.\n * Displays the current agent and allows users to select from available agents.\n * \n * Features:\n * - Current agent display with avatar\n * - Dropdown list of all available agents\n * - Agent metadata display (model, status)\n * - Quick settings access per agent\n * - Refresh agents functionality\n * - Loading and error states\n * - Click-outside-to-close behavior\n * - Smooth animations\n * \n * State Management:\n * - Uses agentStore for agent data\n * - Local state for dropdown open/close\n * - Automatic agent fetching on dropdown open\n * \n * UI/UX:\n * - Visual selection indicator (checkmark)\n * - Hover states for better interactivity\n * - Loading skeleton for initial load\n * - Error state with retry option\n * - Empty state guidance\n * \n * Features:\n * - Comprehensive agent selection with real-time filtering\n * - Intelligent agent management with favorites and categories\n * - Quick agent creation workflow integration\n * - Professional avatar display with status indicators\n * - Full keyboard navigation and accessibility support\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Bot, \n  ChevronDown, \n  Settings, \n  RefreshCw,\n  AlertCircle,\n  Check,\n  BarChart3,\n  User\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { useAgentStore } from '@/store';\nimport { Spinner } from '@/components/ui/loading';\nimport { getClient } from '@/lib/api/client';\n\n/**\n * Props for AgentSelector component\n * \n * @property className - Additional CSS classes\n * @property showSettings - Whether to show settings button for each agent\n * @property onSettingsClick - Callback when settings button is clicked\n */\ninterface AgentSelectorProps {\n  className?: string;\n  showSettings?: boolean;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Props for agent avatar component\n */\ninterface AgentAvatarProps {\n  agent: Agent | null;\n  size?: 'sm' | 'md';\n  isSelected?: boolean;\n  className?: string;\n}\n\n/**\n * Props for individual agent item in dropdown\n * \n * @property agent - Agent data object\n * @property isSelected - Whether this agent is currently selected\n * @property onSelect - Callback when agent is selected\n * @property onSettingsClick - Optional callback for settings button\n */\ninterface AgentItemProps {\n  agent: Agent;\n  isSelected: boolean;\n  onSelect: (agent: Agent) => void;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Agent Avatar Component\n * \n * Displays agent avatar with fallback to default icon\n */\nconst AgentAvatar: React.FC<AgentAvatarProps> = ({ \n  agent, \n  size = 'md', \n  isSelected = false, \n  className \n}) => {\n  const sizeClasses = {\n    sm: 'w-6 h-6',\n    md: 'w-8 h-8'\n  };\n  \n  const iconSizeClasses = {\n    sm: 'w-3 h-3',\n    md: 'w-4 h-4'\n  };\n\n  const avatarUrl = agent?.settings?.chatbot_avatar;\n\n  return (\n    <div className={cn(\n      'rounded-full flex items-center justify-center flex-shrink-0 overflow-hidden',\n      sizeClasses[size],\n      isSelected ? 'bg-brand-600' : 'bg-gray-200',\n      className\n    )}>\n      {avatarUrl ? (\n        <img\n          src={avatarUrl}\n          alt={`${agent?.project_name} avatar`}\n          className=\"w-full h-full object-cover\"\n          onError={(e) => {\n            // Fallback to icon if image fails to load\n            const target = e.target as HTMLImageElement;\n            target.style.display = 'none';\n            const parent = target.parentElement;\n            if (parent) {\n              const icon = document.createElement('div');\n              icon.className = `w-full h-full flex items-center justify-center`;\n              icon.innerHTML = `<svg class=\"${iconSizeClasses[size]} ${isSelected ? 'text-white' : 'text-gray-600'}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"></path></svg>`;\n              parent.appendChild(icon);\n            }\n          }}\n        />\n      ) : (\n        <User className={cn(\n          iconSizeClasses[size],\n          isSelected ? 'text-white' : 'text-gray-600'\n        )} />\n      )}\n    </div>\n  );\n};\n\n/**\n * Individual Agent Item Component\n * \n * Renders a single agent in the dropdown list with:\n * - Agent avatar and name\n * - Selection indicator\n * - Metadata (model, status)\n * - Settings button (optional)\n */\nconst AgentItem: React.FC<AgentItemProps> = ({ \n  agent, \n  isSelected, \n  onSelect, \n  onSettingsClick \n}) => {\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-between p-3 rounded-lg cursor-pointer transition-colors group',\n        'hover:bg-gray-50',\n        isSelected && 'bg-brand-50 hover:bg-brand-100'\n      )}\n      onClick={() => onSelect(agent)}\n    >\n      <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n        {/* Avatar */}\n        <AgentAvatar \n          agent={agent}\n          size=\"md\"\n          isSelected={isSelected}\n        />\n        \n        {/* Agent Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"font-medium text-gray-900 truncate\">\n              {agent.project_name}\n            </h3>\n            {isSelected && (\n              <Check className=\"w-4 h-4 text-brand-600 flex-shrink-0\" />\n            )}\n          </div>\n          \n          {/* Status */}\n          <div className=\"mt-1 text-xs text-gray-400\">\n            <span>Status: {agent.is_chat_active ? 'Active' : 'Inactive'}</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Settings Button */}\n      {onSettingsClick && (\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onSettingsClick(agent);\n          }}\n          className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-gray-400 hover:text-gray-600\"\n          title=\"Agent Settings\"\n        >\n          <Settings className=\"h-3 w-3\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Selector Component\n * \n * Main component that provides agent switching functionality.\n * Manages dropdown state and handles agent selection.\n * \n * @param className - Additional CSS classes for styling\n * @param showSettings - Whether to show settings buttons (default: true)\n * @param onSettingsClick - Handler for agent settings clicks\n */\nexport const AgentSelector: React.FC<AgentSelectorProps> = ({ \n  className,\n  showSettings = true,\n  onSettingsClick\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isSelectingAgent, setIsSelectingAgent] = useState(false);\n  const [loadingSettings, setLoadingSettings] = useState<Set<number>>(new Set());\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  \n  const { \n    agents, \n    currentAgent, \n    loading, \n    error, \n    fetchAgents, \n    loadMoreAgents,\n    selectAgent,\n    setAgents,\n    paginationMeta\n  } = useAgentStore();\n\n  /**\n   * Fetch settings for agents that don't have them loaded\n   */\n  const fetchAgentSettings = async (agentsToLoad: Agent[]) => {\n    const agentsNeedingSettings = agentsToLoad.filter(agent => \n      !agent.settings && !loadingSettings.has(agent.id)\n    );\n\n    if (agentsNeedingSettings.length === 0) return;\n\n    // Mark agents as loading\n    setLoadingSettings(prev => {\n      const newSet = new Set(prev);\n      agentsNeedingSettings.forEach(agent => newSet.add(agent.id));\n      return newSet;\n    });\n\n    try {\n      const client = getClient();\n      const settingsPromises = agentsNeedingSettings.map(async (agent) => {\n        try {\n          const response = await client.getAgentSettings(agent.id);\n          return {\n            agentId: agent.id,\n            settings: response.data || response\n          };\n        } catch (error) {\n          console.warn(`Failed to load settings for agent ${agent.id}:`, error);\n          return {\n            agentId: agent.id,\n            settings: null\n          };\n        }\n      });\n\n      const results = await Promise.all(settingsPromises);\n      \n      // Update agents with their settings\n      const updatedAgents = agents.map(agent => {\n        const result = results.find(r => r.agentId === agent.id);\n        if (result && result.settings) {\n          return { ...agent, settings: result.settings };\n        }\n        return agent;\n      });\n\n      setAgents(updatedAgents);\n\n    } catch (error) {\n      console.error('Failed to fetch agent settings:', error);\n    } finally {\n      // Clear loading state\n      setLoadingSettings(prev => {\n        const newSet = new Set(prev);\n        agentsNeedingSettings.forEach(agent => newSet.delete(agent.id));\n        return newSet;\n      });\n    }\n  };\n\n  /**\n   * Close dropdown when clicking outside\n   * \n   * Uses mousedown event for better UX (closes before click completes)\n   */\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [isOpen]);\n\n  /**\n   * Refresh agents list\n   * \n   * Fetches latest agents from the API and shows toast feedback.\n   * This will temporarily cause avatars to flicker as settings are reloaded.\n   */\n  const handleRefresh = async () => {\n    try {\n      await fetchAgents();\n      toast.success('Agents refreshed');\n    } catch (error) {\n      toast.error('Failed to refresh agents');\n    }\n  };\n\n  /**\n   * Handle agent selection\n   * \n   * Updates the current agent, closes dropdown, and shows confirmation\n   */\n  const handleSelectAgent = async (agent: Agent) => {\n    if (isSelectingAgent) return; // Prevent multiple selections\n    \n    setIsSelectingAgent(true);\n    try {\n      await selectAgent(agent);\n      setIsOpen(false);\n      toast.success(`Switched to ${agent.project_name}`);\n    } catch (error) {\n      toast.error('Failed to switch agent');\n    } finally {\n      // Add a small delay to show the loading state briefly\n      setTimeout(() => {\n        setIsSelectingAgent(false);\n      }, 300);\n    }\n  };\n\n  /**\n   * Fetch settings when agents are loaded and dropdown is open\n   * Only runs when needed to prevent unnecessary API calls\n   */\n  useEffect(() => {\n    if (isOpen && agents.length > 0) {\n      // Only fetch if there are agents without settings\n      const agentsNeedingSettings = agents.some(agent => !agent.settings);\n      if (agentsNeedingSettings) {\n        fetchAgentSettings(agents);\n      }\n    }\n  }, [isOpen, agents.length]);\n\n  /**\n   * Toggle dropdown and conditionally fetch agents\n   * \n   * Only fetches agents if the array is empty to prevent flickering.\n   * Settings are fetched via useEffect when agents are loaded.\n   */\n  const handleToggleDropdown = async () => {\n    const willOpen = !isOpen;\n    setIsOpen(willOpen);\n    \n    // Only fetch agents if we don't have any yet\n    // This prevents flickering caused by replacing agents that have settings\n    // with fresh agents that don't have settings loaded\n    if (willOpen && agents.length === 0) {\n      try {\n        await fetchAgents();\n      } catch (error) {\n        // Don't show error toast here as it might be annoying\n      }\n    }\n  };\n\n  if (loading && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-muted animate-pulse\" />\n          <div className=\"flex-1\">\n            <div className=\"h-4 bg-muted rounded animate-pulse mb-2\" />\n            <div className=\"h-3 bg-muted/50 rounded animate-pulse w-3/4\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-red-100 flex items-center justify-center flex-shrink-0\">\n            <AlertCircle className=\"w-4 h-4 text-red-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-red-600 font-medium\">Failed to load agents</p>\n            <p className=\"text-xs text-red-500\">{error}</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            className=\"text-red-600 hover:text-red-700\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentAgent && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center flex-shrink-0\">\n            <Bot className=\"w-4 h-4 text-gray-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-gray-600 font-medium\">No agents available</p>\n            <p className=\"text-xs text-gray-500\">Check your API configuration</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            disabled={loading}\n          >\n            <RefreshCw className={cn('w-4 h-4', loading && 'animate-spin')} />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('relative', className)} ref={dropdownRef}>\n      {/* Loading overlay when selecting agent */}\n      {isSelectingAgent && (\n        <div className=\"absolute inset-0 bg-background/80 backdrop-blur-sm rounded-lg flex items-center justify-center z-50\">\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <Spinner size=\"sm\" />\n            <span className=\"text-foreground\">Switching agent...</span>\n          </div>\n        </div>\n      )}\n      {/* Selected Agent Display */}\n      <button\n        onClick={handleToggleDropdown}\n        className={cn(\n          'w-full p-3 bg-background border border-border rounded-lg text-left transition-colors',\n          'hover:bg-accent focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent',\n          isOpen && 'ring-2 ring-ring border-transparent'\n        )}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            {/* Avatar */}\n            <AgentAvatar \n              agent={currentAgent}\n              size=\"md\"\n              isSelected={true}\n            />\n            \n            {/* Agent Info */}\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-medium text-gray-900 truncate\">\n                {currentAgent?.project_name || 'Select Agent'}\n              </h3>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {/* Analytics Button */}\n            {currentAgent && (\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  // Navigate to projects page with analytics tab\n                  window.location.href = `/projects?id=${currentAgent.id}&tab=analytics`;\n                }}\n                title=\"View Analytics\"\n                className=\"text-gray-600 hover:text-gray-900\"\n              >\n                <BarChart3 className=\"w-4 h-4\" />\n              </Button>\n            )}\n            \n            {/* Refresh Button */}\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleRefresh();\n              }}\n              disabled={loading}\n              className=\"h-6 w-6 text-gray-400 hover:text-gray-600\"\n              title=\"Refresh Agents\"\n            >\n              <RefreshCw className={cn('h-3 w-3', loading && 'animate-spin')} />\n            </Button>\n            \n            {/* Dropdown Arrow */}\n            <ChevronDown className={cn(\n              'w-4 h-4 text-gray-400 transition-transform',\n              isOpen && 'rotate-180'\n            )} />\n          </div>\n        </div>\n      </button>\n\n      {/* Dropdown */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-background border border-border rounded-lg shadow-lg z-50 max-h-80 overflow-y-auto\"\n          >\n            <div className=\"p-2\">\n              {/* Header */}\n              <div className=\"px-2 py-1 mb-2\">\n                <h4 className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">\n                  Available Agents ({Array.isArray(agents) ? agents.length : 0}\n                  {paginationMeta?.totalCount && paginationMeta.totalCount !== agents.length && (\n                    <span> of {paginationMeta.totalCount}</span>\n                  )})\n                </h4>\n              </div>\n              \n              {/* Agent List */}\n              <div className=\"space-y-1\">\n                {Array.isArray(agents) && agents.length > 0 ? (\n                  agents.map((agent) => (\n                    <AgentItem\n                      key={agent.id}\n                      agent={agent}\n                      isSelected={currentAgent?.id === agent.id}\n                      onSelect={handleSelectAgent}\n                      onSettingsClick={showSettings ? onSettingsClick : undefined}\n                    />\n                  ))\n                ) : (\n                  <div className=\"px-2 py-4 text-center\">\n                    <p className=\"text-sm text-gray-500\">No agents found</p>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={handleRefresh}\n                      className=\"mt-2\"\n                    >\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Refresh\n                    </Button>\n                  </div>\n                )}\n              </div>\n              \n              {/* Load More Button */}\n              {Array.isArray(agents) && agents.length > 0 && paginationMeta?.hasMore && (\n                <div className=\"px-2 py-2 border-t\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={async () => {\n                      try {\n                        await loadMoreAgents();\n                      } catch (error) {\n                        console.error('Failed to load more agents:', error);\n                      }\n                    }}\n                    disabled={loading}\n                    className=\"w-full\"\n                  >\n                    {loading ? (\n                      <>\n                        <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Loading...\n                      </>\n                    ) : (\n                      <>\n                        <ChevronDown className=\"w-4 h-4 mr-2\" />\n                        Load More Agents\n                      </>\n                    )}\n                  </Button>\n                </div>\n              )}\n              \n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","/**\n * Citation Details Modal Component\n * \n * Modal dialog that displays detailed information about a citation,\n * including Open Graph data fetched from the cited source.\n * \n * Features:\n * - Open Graph data display (title, description, image)\n * - Loading and error states\n * - Responsive modal design\n * - Image preview with error handling\n * - Direct link to source\n * - Citation metadata display\n * - Smooth animations\n * \n * API Integration:\n * - Fetches citation details via getCitation API\n * - Handles Open Graph data response\n * - Graceful error handling\n * - Automatic retry on prop changes\n * \n * UI/UX:\n * - Backdrop click to close\n * - Escape key support (via close button)\n * - Loading spinner during fetch\n * - Error message display\n * - Image fallback on load error\n * \n * Features:\n * - Advanced citation caching for improved performance\n * - Professional sharing and bookmarking functionality\n * - Enhanced image preview with zoom and gallery modes\n * - Citation analytics and usage tracking\n * - Comprehensive export options and related citation discovery\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  ExternalLink,\n  Loader,\n  AlertCircle,\n  Globe,\n  Image as ImageIcon\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { useAgentStore } from '@/store/agents';\n\n/**\n * Open Graph data structure for citations\n * \n * @property id - Citation ID\n * @property url - Source URL\n * @property title - Page title from Open Graph\n * @property description - Page description\n * @property image - Optional preview image URL\n */\ninterface CitationOpenGraphData {\n  id: number;\n  url: string;\n  title: string;\n  description: string;\n  image?: string;\n}\n\n/**\n * Props for CitationDetailsModal\n * \n * @property isOpen - Whether modal is visible\n * @property onClose - Callback to close modal\n * @property citationId - ID of citation to display\n * @property projectId - Optional project ID (uses current agent if not provided)\n */\ninterface CitationDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: number | string;\n  projectId?: number;\n}\n\n/**\n * Citation Details Modal Component\n * \n * Displays rich preview of citation with Open Graph data.\n * Fetches citation details from API when opened.\n */\nexport const CitationDetailsModal: React.FC<CitationDetailsModalProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  projectId\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [citationData, setCitationData] = useState<CitationOpenGraphData | null>(null);\n  const [imageError, setImageError] = useState(false);\n  \n  const { currentAgent } = useAgentStore();\n  const effectiveProjectId = projectId || currentAgent?.id;\n\n  /**\n   * Fetch citation details when modal opens\n   * \n   * Triggers API call when modal becomes visible and required data is available\n   */\n  useEffect(() => {\n    if (isOpen && effectiveProjectId && citationId) {\n      fetchCitationDetails();\n    }\n  }, [isOpen, effectiveProjectId, citationId]);\n\n  /**\n   * Fetch citation Open Graph data from API\n   * \n   * Handles:\n   * - Parameter validation\n   * - API call with proper typing\n   * - Error handling with user-friendly messages\n   * - Loading state management\n   * - Logging for debugging\n   */\n  const fetchCitationDetails = async () => {\n    if (!effectiveProjectId || !citationId) {\n      setError('Missing project or citation information');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    setImageError(false);\n\n    try {\n      const client = getClient();\n      const response = await client.getCitation(\n        effectiveProjectId, \n        typeof citationId === 'string' ? parseInt(citationId, 10) : citationId\n      );\n      \n      if (response.data) {\n        setCitationData(response.data as unknown as CitationOpenGraphData);\n        logger.info('CITATION', 'Citation details fetched', {\n          citationId,\n          projectId: effectiveProjectId,\n          hasImage: !!response.data.image\n        });\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch citation details';\n      setError(errorMessage);\n      logger.error('CITATION', 'Failed to fetch citation details', {\n        error: err,\n        citationId,\n        projectId: effectiveProjectId\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        {/* Backdrop */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onClick={onClose}\n          className=\"absolute inset-0 bg-black/50\"\n        />\n\n        {/* Modal */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.95 }}\n          className=\"relative bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-hidden\"\n        >\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">\n              Citation Details\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className=\"h-8 w-8\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-4 overflow-y-auto max-h-[calc(90vh-120px)]\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-gray-400\" />\n              </div>\n            ) : error ? (\n              <div className=\"flex items-center gap-3 p-4 bg-red-50 rounded-lg\">\n                <AlertCircle className=\"h-5 w-5 text-red-600 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-red-900\">Error loading citation</p>\n                  <p className=\"text-sm text-red-700 mt-1\">{error}</p>\n                </div>\n              </div>\n            ) : citationData ? (\n              <div className=\"space-y-4\">\n                {/* Open Graph Image */}\n                {citationData.image && !imageError && (\n                  <div className=\"relative rounded-lg overflow-hidden bg-gray-100\">\n                    <img\n                      src={citationData.image}\n                      alt={citationData.title}\n                      className=\"w-full h-auto\"\n                      onError={() => setImageError(true)}\n                    />\n                  </div>\n                )}\n\n                {/* Title */}\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900\">\n                    {citationData.title}\n                  </h3>\n                </div>\n\n                {/* URL */}\n                <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                  <Globe className=\"h-4 w-4\" />\n                  <a\n                    href={citationData.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"hover:text-brand-600 transition-colors truncate\"\n                  >\n                    {citationData.url}\n                  </a>\n                </div>\n\n                {/* Description */}\n                {citationData.description && (\n                  <div className=\"prose prose-gray max-w-none\">\n                    <p className=\"text-gray-700\">{citationData.description}</p>\n                  </div>\n                )}\n\n                {/* Metadata */}\n                <div className=\"pt-4 border-t space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-500\">Citation ID</span>\n                    <span className=\"font-mono text-gray-700\">#{citationData.id}</span>\n                  </div>\n                  {citationData.image && (\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-500\">Has preview image</span>\n                      <ImageIcon className=\"h-4 w-4 text-gray-400\" />\n                    </div>\n                  )}\n                </div>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t bg-gray-50\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-xs text-gray-500\">\n                Open Graph data from cited source\n              </div>\n              {citationData && (\n                <a\n                  href={citationData.url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"inline-flex items-center gap-2 px-3 py-1.5 text-sm font-medium text-brand-600 hover:text-brand-700 transition-colors\"\n                >\n                  Visit source\n                  <ExternalLink className=\"h-3.5 w-3.5\" />\n                </a>\n              )}\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};","'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  FileText,\n  Download,\n  Loader,\n  AlertCircle,\n  Copy,\n  Check\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { toast } from 'sonner';\n\ninterface CitationFilePreviewProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: string;\n  fileName?: string;\n}\n\nexport const CitationFilePreview: React.FC<CitationFilePreviewProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  fileName = 'Citation File'\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [fileContent, setFileContent] = useState<string | null>(null);\n  const [contentType, setContentType] = useState<string>('text/plain');\n  const [copied, setCopied] = useState(false);\n\n  useEffect(() => {\n    if (isOpen && citationId) {\n      fetchFilePreview();\n    }\n  }, [isOpen, citationId]);\n\n  const fetchFilePreview = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const client = getClient();\n      const response = await client.previewCitationFile(citationId);\n      \n      // Handle different response formats\n      if (typeof response === 'string') {\n        setFileContent(response);\n        setContentType('text/plain');\n      } else if (response.data) {\n        setFileContent(response.data.content || response.data);\n        setContentType(response.data.content_type || 'text/plain');\n      } else {\n        setFileContent(JSON.stringify(response, null, 2));\n        setContentType('application/json');\n      }\n      \n      logger.info('CITATION_PREVIEW', 'File preview fetched', {\n        citationId,\n        contentLength: fileContent?.length\n      });\n    } catch (err: any) {\n      logger.error('CITATION_PREVIEW', 'Failed to fetch file preview', {\n        error: err,\n        citationId\n      });\n      \n      if (err.status === 400) {\n        setError('Invalid citation ID.');\n      } else if (err.status === 401) {\n        setError('Authentication failed. Please log in again.');\n      } else if (err.status === 403) {\n        setError('Access denied. You do not have permission to view this file.');\n      } else if (err.status === 404) {\n        setError('Citation file not found.');\n      } else if (err.status === 500) {\n        setError('Server error. Please try again later.');\n      } else {\n        setError('Failed to load file preview.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCopy = async () => {\n    if (!fileContent) return;\n    \n    try {\n      await navigator.clipboard.writeText(fileContent);\n      setCopied(true);\n      toast.success('Content copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      toast.error('Failed to copy content');\n    }\n  };\n\n  const handleDownload = () => {\n    if (!fileContent) return;\n    \n    const blob = new Blob([fileContent], { type: contentType });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast.success('File downloaded');\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        {/* Backdrop */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onClick={onClose}\n          className=\"absolute inset-0 bg-black/50\"\n        />\n\n        {/* Modal */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.95 }}\n          className=\"relative bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden\"\n        >\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b\">\n            <div className=\"flex items-center gap-3\">\n              <FileText className=\"h-5 w-5 text-gray-600\" />\n              <h2 className=\"text-lg font-semibold text-gray-900\">\n                {fileName}\n              </h2>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleCopy}\n                disabled={!fileContent}\n              >\n                {copied ? (\n                  <>\n                    <Check className=\"h-4 w-4 mr-2\" />\n                    Copied\n                  </>\n                ) : (\n                  <>\n                    <Copy className=\"h-4 w-4 mr-2\" />\n                    Copy\n                  </>\n                )}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleDownload}\n                disabled={!fileContent}\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onClose}\n                className=\"h-8 w-8\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-4 overflow-y-auto max-h-[calc(90vh-120px)]\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-gray-400\" />\n              </div>\n            ) : error ? (\n              <div className=\"flex items-center gap-3 p-4 bg-red-50 rounded-lg\">\n                <AlertCircle className=\"h-5 w-5 text-red-600 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-red-900\">Error loading file</p>\n                  <p className=\"text-sm text-red-700 mt-1\">{error}</p>\n                </div>\n              </div>\n            ) : fileContent ? (\n              <div className=\"font-mono text-sm bg-gray-50 rounded-lg p-4\">\n                <pre className=\"whitespace-pre-wrap break-words\">\n                  {fileContent}\n                </pre>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t bg-gray-50\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-xs text-gray-500\">\n                Citation ID: {citationId}\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                {contentType}\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};","/**\n * Conversation Manager Component\n * \n * Provides conversation switching UI for widget and floating modes.\n * Shows a list of conversations with ability to create new ones and switch between them.\n * \n * Features:\n * - Conversation list with titles and timestamps\n * - Create new conversation button\n * - Switch between conversations\n * - Edit conversation titles inline\n * - Delete conversations\n * - Session-based isolation\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Plus, MessageCircle, Edit2, Trash2, Check, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils';\n\ninterface Conversation {\n  id: string;\n  title: string;\n  createdAt: string;\n  messages: any[];\n}\n\ninterface ConversationManagerProps {\n  sessionId: string;\n  maxConversations?: number;\n  currentConversationId?: string;\n  onConversationChange?: (conversation: Conversation) => void;\n  onCreateConversation?: () => void;\n  className?: string;\n  refreshKey?: number; // Add refresh key to force re-render\n}\n\nexport const ConversationManager: React.FC<ConversationManagerProps> = ({\n  sessionId,\n  maxConversations,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  className,\n  refreshKey,\n}) => {\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editTitle, setEditTitle] = useState('');\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Load conversations from localStorage\n  useEffect(() => {\n    const loadConversations = () => {\n      const stored = localStorage.getItem(`customgpt_conversations_${sessionId}`);\n      if (stored) {\n        try {\n          const parsed = JSON.parse(stored);\n          setConversations(parsed);\n        } catch (e) {\n          console.error('Failed to parse conversations:', e);\n        }\n      }\n    };\n\n    loadConversations();\n    // Listen for storage changes\n    window.addEventListener('storage', loadConversations);\n    return () => window.removeEventListener('storage', loadConversations);\n  }, [sessionId, refreshKey]); // Add refreshKey as dependency\n\n  const handleCreateConversation = () => {\n    if (maxConversations && conversations.length >= maxConversations) {\n      toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n      return;\n    }\n    onCreateConversation?.();\n  };\n\n  const handleSelectConversation = (conversation: Conversation) => {\n    onConversationChange?.(conversation);\n    setIsExpanded(false);\n  };\n\n  const handleEditStart = (conversation: Conversation) => {\n    setEditingId(conversation.id);\n    setEditTitle(conversation.title);\n  };\n\n  const handleEditSave = (conversationId: string) => {\n    const updated = conversations.map(c =>\n      c.id === conversationId ? { ...c, title: editTitle } : c\n    );\n    setConversations(updated);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(updated)\n    );\n    setEditingId(null);\n  };\n\n  const handleDelete = (conversationId: string) => {\n    if (conversations.length <= 1) {\n      toast.error('Cannot delete the last conversation');\n      return;\n    }\n    \n    const filtered = conversations.filter(c => c.id !== conversationId);\n    setConversations(filtered);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(filtered)\n    );\n    \n    // If deleting current conversation, switch to another\n    if (currentConversationId === conversationId && filtered.length > 0) {\n      onConversationChange?.(filtered[0]);\n    }\n  };\n\n  const currentConversation = conversations.find(c => c.id === currentConversationId);\n\n  return (\n    <div className={cn('relative', className)}>\n      {/* Collapsed View */}\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"flex items-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 rounded-lg transition-colors w-full\"\n      >\n        <MessageCircle className=\"w-4 h-4\" />\n        <span className=\"truncate flex-1 text-left\">\n          {currentConversation?.title || 'Select Conversation'}\n        </span>\n        <svg\n          className={cn('w-4 h-4 transition-transform', isExpanded && 'rotate-180')}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n        </svg>\n      </button>\n\n      {/* Expanded View */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-white rounded-lg shadow-lg border border-gray-200 z-50 max-h-80 overflow-y-auto\"\n          >\n            {/* New Conversation Button */}\n            <button\n              onClick={handleCreateConversation}\n              disabled={maxConversations ? conversations.length >= maxConversations : false}\n              className=\"flex items-center gap-2 w-full px-4 py-3 text-sm font-medium text-brand-600 hover:bg-brand-50 disabled:opacity-50 disabled:cursor-not-allowed border-b\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              New Conversation\n            </button>\n\n            {/* Conversation List */}\n            <div className=\"py-2\">\n              {conversations.map((conversation) => (\n                <div\n                  key={conversation.id}\n                  className={cn(\n                    'group flex items-center px-4 py-2 hover:bg-gray-50',\n                    currentConversationId === conversation.id && 'bg-brand-50'\n                  )}\n                >\n                  {editingId === conversation.id ? (\n                    // Edit Mode\n                    <div className=\"flex items-center gap-2 flex-1\">\n                      <input\n                        type=\"text\"\n                        value={editTitle}\n                        onChange={(e) => setEditTitle(e.target.value)}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') handleEditSave(conversation.id);\n                          if (e.key === 'Escape') setEditingId(null);\n                        }}\n                        className=\"flex-1 px-2 py-1 text-sm border rounded focus:outline-none focus:ring-1 focus:ring-brand-500\"\n                        autoFocus\n                      />\n                      <button\n                        onClick={() => handleEditSave(conversation.id)}\n                        className=\"p-1 text-green-600 hover:bg-green-50 rounded\"\n                      >\n                        <Check className=\"w-4 h-4\" />\n                      </button>\n                      <button\n                        onClick={() => setEditingId(null)}\n                        className=\"p-1 text-gray-400 hover:bg-gray-100 rounded\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  ) : (\n                    // View Mode\n                    <>\n                      <button\n                        onClick={() => handleSelectConversation(conversation)}\n                        className=\"flex-1 text-left\"\n                      >\n                        <div className=\"text-sm font-medium text-gray-900 truncate\">\n                          {conversation.title}\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          {new Date(conversation.createdAt).toLocaleDateString()}\n                        </div>\n                      </button>\n                      <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <button\n                          onClick={() => handleEditStart(conversation)}\n                          className=\"p-1 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded\"\n                        >\n                          <Edit2 className=\"w-3 h-3\" />\n                        </button>\n                        <button\n                          onClick={() => handleDelete(conversation.id)}\n                          className=\"p-1 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded\"\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </button>\n                      </div>\n                    </>\n                  )}\n                </div>\n              ))}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","/**\n * Message Error Display Component\n * \n * Displays error messages with appropriate styling and context based on HTTP status codes.\n * Provides user-friendly error messages and actionable guidance.\n */\n\nimport React from 'react';\nimport { AlertCircle, XCircle, CreditCard, UserX, Search, ServerCrash } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface MessageErrorDisplayProps {\n  error: string | Error;\n  statusCode?: number;\n  onRetry?: () => void;\n  className?: string;\n}\n\n/**\n * Parse error to extract status code and message\n */\nconst parseError = (error: string | Error): { statusCode?: number; message: string } => {\n  if (typeof error === 'string') {\n    // Try to extract status code from error message\n    const statusMatch = error.match(/(\\d{3})/);\n    const statusCode = statusMatch ? parseInt(statusMatch[1]) : undefined;\n    return { statusCode, message: error };\n  }\n  \n  return { \n    statusCode: (error as any).status || (error as any).statusCode,\n    message: error.message \n  };\n};\n\n/**\n * Get error details based on status code\n */\nconst getErrorDetails = (statusCode?: number, message?: string) => {\n  switch (statusCode) {\n    case 400:\n      return {\n        icon: AlertCircle,\n        title: 'Invalid Request',\n        description: 'The request format is invalid. Please check your input and try again.',\n        className: 'border-orange-200 bg-orange-50',\n        iconClassName: 'text-orange-600',\n        textClassName: 'text-orange-800',\n      };\n      \n    case 401:\n      return {\n        icon: UserX,\n        title: 'Authentication Failed',\n        description: 'Your API key is either missing or invalid. Please check your API key configuration.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showSupport: true,\n      };\n      \n    case 403:\n      // Check if this is an inactive agent error\n      const isInactiveAgent = message && (\n        message.toLowerCase().includes('inactive') ||\n        message.toLowerCase().includes('no documents') ||\n        message.toLowerCase().includes('agent is not active') ||\n        message.toLowerCase().includes('project is not active') ||\n        message.toLowerCase().includes('no documents uploaded')\n      );\n      \n      if (isInactiveAgent) {\n        return {\n          icon: AlertCircle,\n          title: 'Agent Inactive',\n          description: 'This agent is inactive. Please add documents to activate it before starting a conversation.',\n          className: 'border-orange-200 bg-orange-50',\n          iconClassName: 'text-orange-600',\n          textClassName: 'text-orange-800',\n        };\n      }\n      \n      return {\n        icon: UserX,\n        title: 'Access Denied',\n        description: 'You don\\'t have permission to access this resource. Please check your API key permissions.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showSupport: true,\n      };\n      \n    case 404:\n      return {\n        icon: Search,\n        title: 'Not Found',\n        description: 'The requested agent or conversation was not found. It may have been deleted or you may not have access.',\n        className: 'border-gray-200 bg-gray-50',\n        iconClassName: 'text-gray-600',\n        textClassName: 'text-gray-800',\n      };\n      \n    case 429:\n      return {\n        icon: CreditCard,\n        title: 'Query Credits Exhausted',\n        description: 'You have exhausted your current query credits. Please contact customer service for assistance.',\n        className: 'border-yellow-200 bg-yellow-50',\n        iconClassName: 'text-yellow-600',\n        textClassName: 'text-yellow-800',\n        showSupport: true,\n        supportUrl: 'https://customgpt.freshdesk.com/support/home',\n      };\n      \n    case 500:\n    case 502:\n    case 503:\n    case 504:\n      return {\n        icon: ServerCrash,\n        title: 'Server Error',\n        description: 'An internal server error occurred. Please try again later or contact support if the issue persists.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showRetry: true,\n      };\n      \n    default:\n      return {\n        icon: XCircle,\n        title: 'Error',\n        description: message || 'An unexpected error occurred. Please try again.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showRetry: true,\n      };\n  }\n};\n\nexport const MessageErrorDisplay: React.FC<MessageErrorDisplayProps> = ({\n  error,\n  statusCode: propStatusCode,\n  onRetry,\n  className,\n}) => {\n  const { statusCode: parsedStatusCode, message } = parseError(error);\n  const finalStatusCode = propStatusCode || parsedStatusCode;\n  \n  const errorDetails = getErrorDetails(finalStatusCode, message);\n  const Icon = errorDetails.icon;\n  \n  return (\n    <div\n      className={cn(\n        'p-4 rounded-lg border',\n        errorDetails.className,\n        className\n      )}\n    >\n      <div className=\"flex items-start gap-3\">\n        <Icon className={cn('w-5 h-5 mt-0.5 flex-shrink-0', errorDetails.iconClassName)} />\n        \n        <div className=\"flex-1 space-y-2\">\n          <div>\n            <h3 className={cn('font-medium', errorDetails.textClassName)}>\n              {errorDetails.title}\n              {finalStatusCode && ` (${finalStatusCode})`}\n            </h3>\n            <p className={cn('text-sm mt-1', errorDetails.textClassName, 'opacity-90')}>\n              {errorDetails.description}\n            </p>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"flex items-center gap-2 mt-3\">\n            {errorDetails.showRetry && onRetry && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={onRetry}\n                className=\"text-xs\"\n              >\n                Try Again\n              </Button>\n            )}\n            \n            {errorDetails.showSupport && (\n              <a\n                href={errorDetails.supportUrl || 'https://customgpt.freshdesk.com/support/home'}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-xs underline hover:no-underline\"\n              >\n                Contact Support\n              </a>\n            )}\n          </div>\n          \n          {/* Technical Details (collapsed by default) */}\n          {message && message !== errorDetails.description && (\n            <details className=\"mt-3\">\n              <summary className={cn('text-xs cursor-pointer', errorDetails.textClassName, 'opacity-70')}>\n                Technical Details\n              </summary>\n              <pre className={cn(\n                'mt-2 p-2 text-xs rounded bg-white bg-opacity-50 overflow-x-auto',\n                errorDetails.textClassName,\n                'opacity-80'\n              )}>\n                {message}\n              </pre>\n            </details>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","import React, { createContext, useContext } from 'react';\n\n// Widget instance type - we'll define the actual widget interface based on what we need\ninterface WidgetInstance {\n  sessionId: string;\n  createConversation: (title?: string) => any;\n  switchConversation: (conversationId: string) => void;\n  getConversations: () => any[];\n  updateConversationTitle: (conversationId: string, newTitle: string) => void;\n  deleteConversation: (conversationId: string) => void;\n  configuration?: any;\n}\n\n// Create the context with undefined default\nconst WidgetContext = createContext<WidgetInstance | undefined>(undefined);\n\n// Provider component props\ninterface WidgetProviderProps {\n  widgetInstance: WidgetInstance;\n  children: React.ReactNode;\n}\n\n// Provider component that will wrap the widget's React tree\nexport const WidgetProvider: React.FC<WidgetProviderProps> = ({ widgetInstance, children }) => {\n  return (\n    <WidgetContext.Provider value={widgetInstance}>\n      {children}\n    </WidgetContext.Provider>\n  );\n};\n\n// Custom hook to use the widget instance from any component\nexport const useWidget = (): WidgetInstance => {\n  const context = useContext(WidgetContext);\n  if (!context) {\n    throw new Error('useWidget must be used within a WidgetProvider');\n  }\n  return context;\n};\n\n// Optional: Hook that returns null instead of throwing if no widget context\nexport const useWidgetSafe = (): WidgetInstance | null => {\n  const context = useContext(WidgetContext);\n  return context || null;\n};","/**\n * Widget-specific Message Store Factory\n * \n * Creates an isolated message store instance for each widget.\n * This ensures messages are not shared between different widget instances.\n */\n\nimport { create, StoreApi } from 'zustand';\nimport type { ChatMessage, Citation, FeedbackType } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateId } from '@/lib/utils';\nimport { globalStreamManager } from '@/lib/streaming/handler';\nimport { logger } from '@/lib/logger';\nimport type { AgentStore } from './agents';\nimport type { ConversationStore } from './conversations';\n\n// Message Store interface - copied from original to maintain compatibility\nexport interface MessageStore {\n  messages: Map<string, ChatMessage[]>;\n  streamingMessage: ChatMessage | null;\n  isStreaming: boolean;\n  loading: boolean;\n  error: string | null;\n  \n  sendMessage: (content: string, files?: File[]) => Promise<void>;\n  loadMessages: (conversationId: string) => Promise<void>;\n  addMessage: (conversationId: string, message: ChatMessage) => void;\n  updateStreamingMessage: (content: string, citations?: Citation[]) => void;\n  clearMessages: (conversationId?: string) => void;\n  updateMessageFeedback: (messageId: string, feedback: FeedbackType) => void;\n  cancelStreaming: () => void;\n  getMessagesForConversation: (conversationId: string) => ChatMessage[];\n  reset: () => void;\n}\n\n/**\n * Create a message store instance for a specific widget\n * @param sessionId - The widget's session ID for isolation\n * @param agentStore - Reference to the agent store\n * @param conversationStore - Reference to the conversation store\n */\nexport function createMessageStore(\n  sessionId: string,\n  agentStore?: StoreApi<AgentStore>,\n  conversationStore?: StoreApi<ConversationStore>\n): StoreApi<MessageStore> {\n  const MESSAGES_STORAGE_KEY = `customgpt-messages-cache-${sessionId}`;\n  \n  // Local storage helpers scoped to this instance\n  function saveMessagesToStorage(conversationId: string, messages: ChatMessage[]) {\n    try {\n      const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n      const cache = stored ? JSON.parse(stored) : {};\n      cache[conversationId] = messages;\n      localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n    } catch (error) {\n      console.error('Failed to save messages to local storage:', error);\n    }\n  }\n\n  function loadMessagesFromStorage(conversationId: string): ChatMessage[] | null {\n    try {\n      const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n      if (!stored) return null;\n      const cache = JSON.parse(stored);\n      return cache[conversationId] || null;\n    } catch (error) {\n      console.error('Failed to load messages from local storage:', error);\n      return null;\n    }\n  }\n\n  return create<MessageStore>((set, get) => ({\n    messages: new Map(),\n    streamingMessage: null,\n    isStreaming: false,\n    loading: false,\n    error: null,\n\n    sendMessage: async (content: string, files?: File[]) => {\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      // Use the passed store references\n      if (!agentStore || !conversationStore) {\n        logger.error('MESSAGES', 'Store references not provided');\n        throw new Error('Store references not provided');\n      }\n      \n      const currentAgent = agentStore.getState().currentAgent;\n      if (!currentAgent) {\n        logger.error('MESSAGES', 'No agent selected');\n        throw new Error('No agent selected');\n      }\n\n      logger.info('MESSAGES', 'Sending message from widget store', {\n        sessionId,\n        agentId: currentAgent.id,\n        agentName: currentAgent.project_name,\n        messageLength: content.length,\n        hasFiles: files && files.length > 0\n      });\n\n      // Ensure we have a conversation\n      const conversation = await conversationStore.getState().ensureConversation(\n        typeof currentAgent.id === 'string' ? parseInt(currentAgent.id) : currentAgent.id,\n        content\n      );\n\n      logger.info('MESSAGES', 'Conversation ensured', {\n        conversationId: conversation.id,\n        sessionId: conversation.session_id,\n        hasSessionId: !!conversation.session_id,\n        isNew: !conversation.message_count || conversation.message_count === 0\n      });\n\n      if (!conversation.session_id) {\n        logger.error('MESSAGES', 'Conversation missing session_id', { conversation });\n        throw new Error('Conversation missing session_id');\n      }\n\n      set({ loading: true, error: null });\n\n      const conversationId = conversation.id.toString();\n\n      // Create user message\n      const userMessage: ChatMessage = {\n        id: generateId(),\n        role: 'user',\n        content,\n        timestamp: new Date().toISOString(),\n        status: 'sending',\n      };\n\n      // Add user message to store\n      get().addMessage(conversationId, userMessage);\n\n      // Create assistant message placeholder\n      const assistantMessage: ChatMessage = {\n        id: generateId(),\n        role: 'assistant',\n        content: '',\n        timestamp: new Date().toISOString(),\n        citations: [],\n      };\n\n      set({ \n        streamingMessage: assistantMessage,\n        isStreaming: true,\n        loading: false,\n      });\n\n      try {\n        // Handle file uploads if present\n        if (files && files.length > 0) {\n          const client = getClient();\n          await Promise.all(\n            files.map(file => client.uploadFile(currentAgent.id, file))\n          );\n        }\n\n        // Update user message status\n        userMessage.status = 'sent';\n        get().addMessage(conversationId, userMessage);\n\n        // Start streaming with correct parameters\n        const client = getClient();\n        \n        logger.info('MESSAGES', 'Starting message stream', {\n          agentId: currentAgent.id,\n          sessionId: conversation.session_id,\n          messageContent: content.substring(0, 50)\n        });\n        \n        if (isDemoMode) {\n          // Demo mode - simulate streaming response\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          const demoResponse = `This is a demo response to: \"${content}\"`;\n          get().updateStreamingMessage(demoResponse);\n          \n          await new Promise(resolve => setTimeout(resolve, 500));\n          \n          const finalMessage = get().streamingMessage;\n          if (finalMessage) {\n            finalMessage.status = 'sent';\n            get().addMessage(conversationId, finalMessage);\n          }\n          \n          set({ \n            streamingMessage: null,\n            isStreaming: false,\n          });\n          return;\n        }\n        \n        // Real API streaming\n        try {\n          await client.sendMessageStream(\n            currentAgent.id,\n            conversation.session_id,\n            { \n              prompt: content\n            },\n            (chunk) => {\n                logger.info('MESSAGES', 'Received stream chunk', { \n                  type: chunk.type, \n                  hasContent: !!chunk.content,\n                  contentLength: chunk.content?.length,\n                  contentPreview: chunk.content?.substring(0, 50)\n                });\n                \n                if (chunk.type === 'content' && chunk.content) {\n                  get().updateStreamingMessage(chunk.content, chunk.citations);\n                } else if (chunk.type === 'citation' && chunk.citations) {\n                  // Handle citation-only chunks\n                  const current = get().streamingMessage;\n                  if (current) {\n                    set({\n                      streamingMessage: {\n                        ...current,\n                        citations: chunk.citations\n                      }\n                    });\n                  }\n                }\n              },\n            async (streamError) => {\n                logger.error('MESSAGES', 'Streaming failed, attempting fallback to non-streaming', streamError);\n                \n                // Try fallback to non-streaming API\n                try {\n                  const response = await client.sendMessage(\n                    currentAgent.id,\n                    conversation.session_id,\n                    { \n                      prompt: content,\n                      stream: false\n                    }\n                  );\n                  \n                  // Update streaming message with the complete response\n                  const finalMessage = get().streamingMessage;\n                  if (finalMessage && response) {\n                    let messageData: any;\n                    if (response.data) {\n                      messageData = response.data;\n                    } else {\n                      messageData = response as any;\n                    }\n                    \n                    finalMessage.content = messageData?.openai_response || messageData?.content || 'No response received';\n                    finalMessage.citations = messageData?.citations || [];\n                    finalMessage.status = 'sent';\n                    get().addMessage(conversationId, finalMessage);\n                  }\n                  \n                  set({ \n                    streamingMessage: null,\n                    isStreaming: false,\n                  });\n                  \n                } catch (fallbackError) {\n                  logger.error('MESSAGES', 'Both streaming and non-streaming failed', fallbackError);\n                  throw fallbackError;\n                }\n              },\n            () => {\n                // onComplete callback\n                const finalMessage = get().streamingMessage;\n                if (finalMessage) {\n                  finalMessage.status = 'sent';\n                  get().addMessage(conversationId, finalMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                // Update conversation message count\n                conversationStore.getState().updateConversation(\n                  conversation.id,\n                  conversation.session_id,\n                  { name: conversation.name }\n                );\n              }\n          );\n        } catch (error) {\n          logger.error('MESSAGES', 'Failed to send message', error);\n          \n          // Remove assistant message placeholder on error\n          set({ \n            streamingMessage: null,\n            isStreaming: false,\n            error: error instanceof Error ? error.message : 'Failed to send message'\n          });\n          \n          throw error;\n        }\n      } catch (error) {\n        logger.error('MESSAGES', 'Error in sendMessage', error);\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to send message',\n          streamingMessage: null,\n          isStreaming: false,\n          loading: false,\n        });\n        throw error;\n      }\n    },\n\n    loadMessages: async (conversationId: string) => {\n      set({ loading: true, error: null });\n\n      try {\n        // Try to load from storage first\n        const cachedMessages = loadMessagesFromStorage(conversationId);\n        if (cachedMessages) {\n          set(state => ({\n            messages: new Map(state.messages).set(conversationId, cachedMessages),\n            loading: false,\n          }));\n          return;\n        }\n\n        // In a real implementation, would load from API\n        set(state => ({\n          messages: new Map(state.messages).set(conversationId, []),\n          loading: false,\n        }));\n      } catch (error) {\n        logger.error('MESSAGES', 'Failed to load messages', error);\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to load messages',\n          loading: false \n        });\n      }\n    },\n\n    addMessage: (conversationId: string, message: ChatMessage) => {\n      set(state => {\n        const newMessages = new Map(state.messages);\n        const messages = newMessages.get(conversationId) || [];\n        \n        // Check if message already exists\n        const existingIndex = messages.findIndex(m => m.id === message.id);\n        if (existingIndex >= 0) {\n          messages[existingIndex] = message;\n        } else {\n          messages.push(message);\n        }\n        \n        newMessages.set(conversationId, messages);\n        \n        // Save to storage\n        saveMessagesToStorage(conversationId, messages);\n        \n        return { messages: newMessages };\n      });\n    },\n\n    updateStreamingMessage: (content: string, citations?: Citation[]) => {\n      set(state => {\n        if (!state.streamingMessage) return state;\n        \n        return {\n          streamingMessage: {\n            ...state.streamingMessage,\n            content: state.streamingMessage.content + content,\n            citations: citations || state.streamingMessage.citations,\n          },\n        };\n      });\n    },\n\n    clearMessages: (conversationId?: string) => {\n      if (conversationId) {\n        set(state => {\n          const newMessages = new Map(state.messages);\n          newMessages.delete(conversationId);\n          return { messages: newMessages };\n        });\n        \n        // Clear from storage\n        try {\n          const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n          if (stored) {\n            const cache = JSON.parse(stored);\n            delete cache[conversationId];\n            localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n          }\n        } catch (error) {\n          console.error('Failed to clear messages from storage:', error);\n        }\n      } else {\n        // Clear all messages\n        set({ messages: new Map() });\n        \n        // Clear all from storage\n        try {\n          localStorage.removeItem(MESSAGES_STORAGE_KEY);\n        } catch (error) {\n          console.error('Failed to clear all messages from storage:', error);\n        }\n      }\n    },\n\n    cancelStreaming: () => {\n      globalStreamManager.cancelAllStreams();\n      set({ isStreaming: false, streamingMessage: null });\n    },\n\n    getMessagesForConversation: (conversationId: string): ChatMessage[] => {\n      return get().messages.get(conversationId) || [];\n    },\n\n    updateMessageFeedback: (messageId: string, feedback: FeedbackType) => {\n      set(state => {\n        const newMessages = new Map(state.messages);\n        \n        for (const [convId, messages] of newMessages) {\n          const messageIndex = messages.findIndex(m => m.id === messageId);\n          if (messageIndex !== -1) {\n            const updatedMessages = [...messages];\n            updatedMessages[messageIndex] = {\n              ...updatedMessages[messageIndex],\n              feedback,\n            };\n            newMessages.set(convId, updatedMessages);\n            saveMessagesToStorage(convId, updatedMessages);\n            break;\n          }\n        }\n        \n        return { messages: newMessages };\n      });\n    },\n\n    reset: () => {\n      set({\n        messages: new Map(),\n        streamingMessage: null,\n        isStreaming: false,\n        loading: false,\n        error: null,\n      });\n    },\n  }));\n}","/**\n * Widget-specific Conversation Store Factory\n * \n * Creates an isolated conversation store instance for each widget.\n * This ensures conversations are not shared between different widget instances.\n */\n\nimport { create, StoreApi } from 'zustand';\nimport type { Conversation } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateId } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n// Conversation Store interface - widget-specific version\nexport interface ConversationStore {\n  conversations: Conversation[];\n  currentConversation: Conversation | null;\n  loading: boolean;\n  error: string | null;\n  lastConversationActivity: Record<string, string>;\n  \n  // Pagination state\n  currentPage: number;\n  totalPages: number;\n  totalConversations: number;\n  perPage: number;\n  \n  // Sorting and filtering state\n  sortOrder: 'asc' | 'desc';\n  sortBy: string;\n  userFilter: 'all' | string;\n  \n  fetchConversations: (projectId: number, params?: {\n    page?: number;\n    per_page?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: string;\n    userFilter?: 'all' | string;\n  }) => Promise<void>;\n  loadConversations: (agentId: string) => Promise<void>; // Keep for compatibility\n  createConversation: (projectId: number, name?: string) => Promise<void>;\n  updateConversation: (conversationId: number, sessionId: string, data: { name: string }) => Promise<void>;\n  deleteConversation: (conversationId: string | number) => Promise<void>;\n  selectConversation: (conversation: Conversation) => void;\n  ensureConversation: (projectId: number, firstMessage?: string) => Promise<Conversation>;\n  reset: () => void;\n}\n\n/**\n * Create a conversation store instance for a specific widget\n * @param sessionId - The widget's session ID for isolation\n */\nexport function createConversationStore(sessionId: string): StoreApi<ConversationStore> {\n  const CONVERSATIONS_STORAGE_KEY = `customgpt-conversations-cache-${sessionId}`;\n  const ACTIVITY_STORAGE_KEY = `customgpt-conversation-activity-${sessionId}`;\n  \n  // Local storage helpers scoped to this instance\n  function saveConversationsToStorage(agentId: string, conversations: Conversation[]) {\n    try {\n      const stored = localStorage.getItem(CONVERSATIONS_STORAGE_KEY);\n      const cache = stored ? JSON.parse(stored) : {};\n      cache[agentId] = conversations;\n      localStorage.setItem(CONVERSATIONS_STORAGE_KEY, JSON.stringify(cache));\n    } catch (error) {\n      console.error('Failed to save conversations to storage:', error);\n    }\n  }\n\n  function loadConversationsFromStorage(agentId: string): Conversation[] | null {\n    try {\n      const stored = localStorage.getItem(CONVERSATIONS_STORAGE_KEY);\n      if (!stored) return null;\n      const cache = JSON.parse(stored);\n      return cache[agentId] || null;\n    } catch (error) {\n      console.error('Failed to load conversations from storage:', error);\n      return null;\n    }\n  }\n\n  function saveActivityToStorage(activity: Record<string, string>) {\n    try {\n      localStorage.setItem(ACTIVITY_STORAGE_KEY, JSON.stringify(activity));\n    } catch (error) {\n      console.error('Failed to save activity to storage:', error);\n    }\n  }\n\n  function loadActivityFromStorage(): Record<string, string> {\n    try {\n      const stored = localStorage.getItem(ACTIVITY_STORAGE_KEY);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.error('Failed to load activity from storage:', error);\n      return {};\n    }\n  }\n\n  return create<ConversationStore>((set, get) => ({\n    conversations: [],\n    currentConversation: null,\n    loading: false,\n    error: null,\n    lastConversationActivity: loadActivityFromStorage(),\n    // Pagination state\n    currentPage: 1,\n    totalPages: 1,\n    totalConversations: 0,\n    perPage: 20,\n    // Sorting and filtering state\n    sortOrder: 'desc' as const,\n    sortBy: 'id',\n    userFilter: 'all' as const,\n\n    fetchConversations: async (projectId: number, params?: {\n      page?: number;\n      per_page?: number;\n      order?: 'asc' | 'desc';\n      orderBy?: string;\n      userFilter?: 'all' | string;\n    }) => {\n      // For widgets, we load conversations differently\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      logger.info('CONVERSATIONS', 'Fetching conversations for widget', {\n        sessionId,\n        projectId,\n        isDemoMode\n      });\n\n      set({ loading: true, error: null });\n\n      try {\n        if (isDemoMode) {\n          // In demo mode, just load from local storage\n          return get().loadConversations(projectId.toString());\n        }\n        \n        // Get the list of conversation IDs that belong to this widget session\n        const widgetConvKey = `widget_conversations_${sessionId}`;\n        const widgetConvIds = JSON.parse(localStorage.getItem(widgetConvKey) || '[]');\n        \n        if (widgetConvIds.length === 0) {\n          // No conversations created yet in this widget session\n          set({\n            conversations: [],\n            loading: false,\n          });\n          return;\n        }\n        \n        // Fetch conversations from API but only keep ones created in this widget session\n        const client = getClient();\n        \n        // Merge params with current state\n        const queryParams = {\n          page: params?.page ?? get().currentPage,\n          per_page: params?.per_page ?? get().perPage,\n          order: params?.order ?? get().sortOrder,\n          orderBy: params?.orderBy ?? get().sortBy,\n          userFilter: params?.userFilter ?? get().userFilter,\n        };\n        \n        const response = await client.getConversations(projectId, queryParams);\n        \n        // Handle different response formats\n        let allConversations = [];\n        let paginationData = null;\n        \n        if (response && typeof response === 'object') {\n          // Standard paginated response format\n          if ((response as any).data && (response as any).data.data) {\n            allConversations = (response as any).data.data;\n            paginationData = (response as any).data;\n          } else if (Array.isArray((response as any).data)) {\n            allConversations = (response as any).data;\n          } else if (Array.isArray(response)) {\n            allConversations = response;\n          }\n        }\n        \n        // Filter to only include conversations created in this widget session\n        const widgetConversations = allConversations.filter((conv: Conversation) => \n          widgetConvIds.includes(conv.id)\n        );\n        \n        logger.info('CONVERSATIONS', 'Filtered widget conversations', {\n          totalFromAPI: allConversations.length,\n          widgetSpecific: widgetConversations.length,\n          widgetConvIds,\n          paginationData\n        });\n        \n        // Update state with conversations and pagination data\n        set({ \n          conversations: widgetConversations, \n          loading: false,\n          // Update pagination state if available\n          currentPage: paginationData?.current_page ?? 1,\n          totalPages: paginationData?.last_page ?? 1,\n          totalConversations: widgetConvIds.length, // Total widget conversations, not API total\n          // Update sorting/filtering if params were provided\n          ...(params?.order && { sortOrder: params.order }),\n          ...(params?.orderBy && { sortBy: params.orderBy }),\n          ...(params?.userFilter && { userFilter: params.userFilter }),\n        });\n        \n        // Save to local storage\n        saveConversationsToStorage(projectId.toString(), widgetConversations);\n      } catch (error) {\n        logger.error('CONVERSATIONS', 'Failed to fetch conversations', error);\n        // On error, try to load from local storage\n        const cached = loadConversationsFromStorage(projectId.toString());\n        set({ \n          conversations: cached || [],\n          error: error instanceof Error ? error.message : 'Failed to fetch conversations',\n          loading: false,\n        });\n      }\n    },\n\n    loadConversations: async (agentId: string) => {\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      logger.info('CONVERSATIONS', 'Loading conversations for widget store', {\n        sessionId,\n        agentId,\n        isDemoMode\n      });\n\n      set({ loading: true, error: null });\n\n      try {\n        // For widgets, we only load conversations from local storage that were created in this session\n        // We do NOT fetch from the API to ensure complete isolation\n        const cachedConversations = loadConversationsFromStorage(agentId);\n        \n        if (cachedConversations) {\n          // Filter to only include conversations created in this widget session\n          const sessionConversations = cachedConversations.filter(conv => \n            conv.session_id && conv.session_id.includes(sessionId)\n          );\n          \n          set({\n            conversations: sessionConversations,\n            loading: false,\n          });\n          \n          logger.info('CONVERSATIONS', 'Loaded session-specific conversations', {\n            totalCached: cachedConversations.length,\n            sessionSpecific: sessionConversations.length,\n            sessionId\n          });\n        } else {\n          // No conversations yet - start with empty array\n          set({\n            conversations: [],\n            loading: false,\n          });\n        }\n      } catch (error) {\n        logger.error('CONVERSATIONS', 'Failed to load conversations', error);\n        set({\n          error: error instanceof Error ? error.message : 'Failed to load conversations',\n          loading: false,\n          conversations: [] // Start with empty on error\n        });\n      }\n    },\n\n    createConversation: async (projectId: number, name?: string): Promise<void> => {\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      logger.info('CONVERSATIONS', 'Creating conversation in widget store', {\n        sessionId,\n        projectId,\n        name\n      });\n\n      set({ loading: true, error: null });\n\n      try {\n        // Use the API to create the conversation\n        const client = getClient();\n        \n        if (isDemoMode) {\n          // Demo mode - create locally only\n          const timestamp = Date.now();\n          const random = Math.floor(Math.random() * 1000000);\n          const sessionIdForConv = `demo_session_${timestamp}_${random}_${sessionId}`;\n\n          const newConversation: Conversation = {\n            id: Math.floor(Math.random() * 1000000),\n            session_id: sessionIdForConv,\n            project_id: projectId,\n            name: name || 'New Conversation',\n            message_count: 0,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            deleted_at: null,\n          };\n\n          set(state => ({\n            conversations: [...state.conversations, newConversation],\n            currentConversation: newConversation,\n            loading: false,\n          }));\n          \n          saveConversationsToStorage(projectId.toString(), [...get().conversations]);\n          return;\n        }\n        \n        // Create conversation via API\n        const response = await client.createConversation(projectId, name ? { name } : undefined);\n        const newConversation = response.data;\n        \n        // Ensure the conversation has our widget session ID in it for filtering\n        // Store the widget session ID in localStorage to track which conversations belong to this widget\n        const widgetConvKey = `widget_conversations_${sessionId}`;\n        const existingConvIds = JSON.parse(localStorage.getItem(widgetConvKey) || '[]');\n        existingConvIds.push(newConversation.id);\n        localStorage.setItem(widgetConvKey, JSON.stringify(existingConvIds));\n        \n        logger.info('CONVERSATIONS', 'Created conversation via API', {\n          conversationId: newConversation.id,\n          sessionId: newConversation.session_id,\n          projectId: newConversation.project_id,\n          widgetSessionId: sessionId\n        });\n        \n        set(state => ({ \n          conversations: [...state.conversations, newConversation],\n          currentConversation: newConversation,\n          loading: false,\n        }));\n        \n        // Save to local storage for this widget session\n        saveConversationsToStorage(projectId.toString(), get().conversations);\n      } catch (error) {\n        logger.error('CONVERSATIONS', 'Failed to create conversation', error);\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to create conversation',\n          loading: false \n        });\n        throw error;\n      }\n    },\n\n    updateConversation: async (conversationId: number, sessionId: string, data: { name: string }) => {\n      logger.info('CONVERSATIONS', 'Updating conversation in widget store', {\n        sessionId: sessionId,\n        conversationId,\n        data\n      });\n\n      set(state => ({\n        conversations: state.conversations.map(conv =>\n          conv.id.toString() === conversationId.toString()\n            ? { ...conv, name: data.name, updated_at: new Date().toISOString() }\n            : conv\n        ),\n      }));\n\n      // Update current conversation if it's the one being updated\n      const current = get().currentConversation;\n      if (current && current.id.toString() === conversationId.toString()) {\n        set({\n          currentConversation: { ...current, name: data.name, updated_at: new Date().toISOString() },\n        });\n      }\n\n      // Save to storage\n      const projectId = get().conversations.find(c => c.id.toString() === conversationId.toString())?.project_id;\n      if (projectId) {\n        saveConversationsToStorage(projectId.toString(), get().conversations);\n      }\n    },\n\n    deleteConversation: async (conversationId: string | number) => {\n      logger.info('CONVERSATIONS', 'Deleting conversation from widget store', {\n        sessionId,\n        conversationId\n      });\n\n      const conversation = get().conversations.find(c => c.id.toString() === conversationId);\n      if (!conversation) return;\n\n      set(state => ({\n        conversations: state.conversations.filter(conv => conv.id.toString() !== conversationId),\n        currentConversation: state.currentConversation?.id.toString() === conversationId\n          ? null\n          : state.currentConversation,\n      }));\n\n      // Save to storage\n      saveConversationsToStorage(conversation.project_id.toString(), get().conversations);\n    },\n\n    selectConversation: (conversation: Conversation) => {\n      logger.info('CONVERSATIONS', 'Selecting conversation in widget store', {\n        sessionId,\n        conversationId: conversation?.id\n      });\n\n      set({ currentConversation: conversation });\n\n      // Update activity tracking\n      if (conversation) {\n        const activity = { ...get().lastConversationActivity };\n        activity[conversation.project_id.toString()] = conversation.id.toString();\n        set({ lastConversationActivity: activity });\n        saveActivityToStorage(activity);\n      }\n    },\n\n    ensureConversation: async (projectId: number, firstMessage?: string) => {\n      const { currentConversation } = get();\n      \n      // If we have a current conversation for this agent, use it\n      if (currentConversation && currentConversation.project_id === projectId) {\n        return currentConversation;\n      }\n\n      // If no current conversation, always create a new one\n      // This ensures that seeing the welcome screen (currentConversation = null) \n      // always results in starting a fresh conversation\n      const title = firstMessage\n        ? firstMessage.substring(0, 50) + (firstMessage.length > 50 ? '...' : '')\n        : 'New Conversation';\n      \n      await get().createConversation(projectId, title);\n      \n      // Get the newly created conversation\n      const newConversation = get().conversations[get().conversations.length - 1];\n      set({ currentConversation: newConversation });\n      \n      return newConversation;\n    },\n\n    reset: () => {\n      set({\n        conversations: [],\n        currentConversation: null,\n        loading: false,\n        error: null,\n        lastConversationActivity: {},\n      });\n    },\n  }));\n}","/**\n * Widget-specific Agent Store Factory\n * \n * Creates an isolated agent store instance for each widget.\n * This ensures agent selection is not shared between different widget instances.\n */\n\nimport { create, StoreApi } from 'zustand';\nimport type { Agent } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\n\n// Agent Store interface - widget-specific version with minimal methods\nexport interface AgentStore {\n  agents: Agent[];\n  currentAgent: Agent | null;\n  loading: boolean;\n  error: string | null;\n  \n  loadAgents: () => Promise<void>;\n  fetchAgents: () => Promise<void>; // Alias for compatibility\n  selectAgent: (agent: Agent) => void;\n  setAgents: (agents: Agent[]) => void;\n  updateAgent: (id: number, data: { are_licenses_allowed?: boolean }) => Promise<Agent>;\n  deleteAgent: (id: number) => Promise<void>;\n  createAgent: (data: any) => Promise<Agent>;\n  replicateAgent: (id: number) => Promise<Agent>;\n  getAgentStats: (id: number) => Promise<any>;\n  reset: () => void;\n}\n\n/**\n * Create an agent store instance for a specific widget\n * @param sessionId - The widget's session ID for isolation\n */\nexport function createAgentStore(sessionId: string): StoreApi<AgentStore> {\n  const AGENTS_STORAGE_KEY = `customgpt-agents-cache-${sessionId}`;\n  const SELECTED_AGENT_KEY = `customgpt-selected-agent-${sessionId}`;\n  \n  // Local storage helpers scoped to this instance\n  function saveAgentsToStorage(agents: Agent[]) {\n    try {\n      localStorage.setItem(AGENTS_STORAGE_KEY, JSON.stringify(agents));\n    } catch (error) {\n      console.error('Failed to save agents to storage:', error);\n    }\n  }\n\n  function loadAgentsFromStorage(): Agent[] | null {\n    try {\n      const stored = localStorage.getItem(AGENTS_STORAGE_KEY);\n      return stored ? JSON.parse(stored) : null;\n    } catch (error) {\n      console.error('Failed to load agents from storage:', error);\n      return null;\n    }\n  }\n\n  function saveSelectedAgentToStorage(agentId: string | null) {\n    try {\n      if (agentId) {\n        localStorage.setItem(SELECTED_AGENT_KEY, agentId);\n      } else {\n        localStorage.removeItem(SELECTED_AGENT_KEY);\n      }\n    } catch (error) {\n      console.error('Failed to save selected agent to storage:', error);\n    }\n  }\n\n  function loadSelectedAgentFromStorage(): string | null {\n    try {\n      return localStorage.getItem(SELECTED_AGENT_KEY);\n    } catch (error) {\n      console.error('Failed to load selected agent from storage:', error);\n      return null;\n    }\n  }\n\n  return create<AgentStore>((set, get) => ({\n    agents: [],\n    currentAgent: null,\n    loading: false,\n    error: null,\n\n    fetchAgents: async () => {\n      // Alias for loadAgents for compatibility\n      return get().loadAgents();\n    },\n\n    loadAgents: async () => {\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      // Get widget instance from window using session ID\n      const widgetKey = `__customgpt_widget_${sessionId}`;\n      const widget = typeof window !== 'undefined' ? (window as any)[widgetKey] : null;\n      \n      logger.info('AGENTS', 'Loading agents for widget store', {\n        sessionId,\n        isDemoMode,\n        hasWidget: !!widget,\n        configuredAgentId: widget?.config?.agentId\n      });\n\n      set({ loading: true, error: null });\n\n      try {\n        // If widget has a configured agentId, fetch that specific agent from API\n        if (widget?.config?.agentId) {\n          const client = getClient();\n          \n          if (isDemoMode) {\n            // Demo mode - create fake agent\n            const singleAgent: Agent = {\n              id: widget.config.agentId,\n              project_name: widget.config.name || 'CustomGPT Assistant',\n              type: 'WIDGET',\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString(),\n              is_chat_active: true,\n              is_shared: false,\n              user_id: 0,\n              team_id: 0,\n            };\n\n            set({\n              agents: [singleAgent],\n              currentAgent: singleAgent,\n              loading: false,\n            });\n\n            saveAgentsToStorage([singleAgent]);\n            saveSelectedAgentToStorage(singleAgent.id.toString());\n            return;\n          }\n          \n          try {\n            // Fetch the specific agent from API\n            const response = await client.getAgent(widget.config.agentId);\n            const agent = response.data || response;\n            \n            logger.info('AGENTS', 'Fetched specific agent from API', {\n              agentId: agent.id,\n              agentName: agent.project_name\n            });\n            \n            set({\n              agents: [agent],\n              currentAgent: agent,\n              loading: false,\n            });\n\n            saveAgentsToStorage([agent]);\n            saveSelectedAgentToStorage(agent.id.toString());\n            return;\n          } catch (error) {\n            logger.error('AGENTS', 'Failed to fetch specific agent', error);\n            // Fall back to cached data if available\n            const cachedAgents = loadAgentsFromStorage();\n            if (cachedAgents && cachedAgents.length > 0) {\n              const agent = cachedAgents.find(a => a.id === widget.config.agentId) || cachedAgents[0];\n              set({\n                agents: cachedAgents,\n                currentAgent: agent,\n                loading: false,\n              });\n              return;\n            }\n            throw error;\n          }\n        }\n\n        // No specific agent ID - fetch agents from API with enterprise-scale pagination\n        if (!isDemoMode) {\n          const client = getClient();\n          // Load first batch with larger page size for better widget performance\n          const response = await client.getAgents({ page: 1, per_page: 100 });\n          \n          // Handle different response formats\n          let agents: Agent[] = [];\n          if (response && typeof response === 'object') {\n            if ('data' in response && 'total' in response) {\n              // Paginated response format\n              agents = (response as { data: Agent[] }).data;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              agents = (response as any).data;\n            } else if (Array.isArray(response)) {\n              // Legacy format: [...]\n              agents = response as Agent[];\n            }\n          }\n          \n          logger.info('AGENTS', 'Fetched agents from API (first page)', {\n            count: agents.length,\n            total: (response as any)?.total || agents.length\n          });\n          \n          // Select first agent or previously selected\n          const selectedAgentId = loadSelectedAgentFromStorage();\n          const selectedAgent = selectedAgentId \n            ? agents.find(a => a.id.toString() === selectedAgentId) || agents[0]\n            : agents[0];\n          \n          set({\n            agents,\n            currentAgent: selectedAgent || null,\n            loading: false,\n          });\n          \n          saveAgentsToStorage(agents);\n          if (selectedAgent) {\n            saveSelectedAgentToStorage(selectedAgent.id.toString());\n          }\n          return;\n        }\n\n        // Demo mode without specific agent ID\n        if (isDemoMode) {\n          // Create demo agents\n          const demoAgents: Agent[] = [\n            {\n              id: 1,\n              project_name: 'Demo Assistant',\n              type: 'DEMO',\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString(),\n              is_chat_active: true,\n              is_shared: false,\n              user_id: 0,\n              team_id: 0,\n            },\n          ];\n          \n          set({\n            agents: demoAgents,\n            currentAgent: demoAgents[0],\n            loading: false,\n          });\n          \n          saveAgentsToStorage(demoAgents);\n          saveSelectedAgentToStorage(demoAgents[0].id.toString());\n          return;\n        }\n\n        // Should not reach here\n        set({\n          agents: [],\n          currentAgent: null,\n          loading: false,\n        });\n      } catch (error) {\n        logger.error('AGENTS', 'Failed to load agents', error);\n        set({\n          error: error instanceof Error ? error.message : 'Failed to load agents',\n          loading: false,\n        });\n      }\n    },\n\n    selectAgent: (agent: Agent) => {\n      logger.info('AGENTS', 'Selecting agent in widget store', {\n        sessionId,\n        agentId: agent?.id,\n        agentName: agent?.project_name\n      });\n\n      set({ currentAgent: agent });\n      saveSelectedAgentToStorage(agent?.id.toString() || null);\n\n      // Update widget instance if available\n      const widgetKey = `__customgpt_widget_${sessionId}`;\n      const widget = typeof window !== 'undefined' ? (window as any)[widgetKey] : null;\n      \n      if (widget && agent) {\n        widget.config.agentId = agent.id;\n        widget.config.name = agent.project_name;\n      }\n    },\n\n    setAgents: (agents: Agent[]) => {\n      set({ agents });\n      saveAgentsToStorage(agents);\n    },\n\n    updateAgent: async (id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }) => {\n      logger.info('AGENTS', 'Updating agent in widget store', {\n        sessionId,\n        agentId: id,\n        data\n      });\n\n      const agent = get().agents.find(a => a.id === id);\n      if (!agent) {\n        throw new Error('Agent not found');\n      }\n\n      const updatedAgent = { ...agent, ...data };\n      \n      set(state => ({\n        agents: state.agents.map(a =>\n          a.id === id ? updatedAgent : a\n        ),\n        currentAgent: state.currentAgent?.id === id\n          ? updatedAgent\n          : state.currentAgent,\n      }));\n\n      // Save to storage\n      saveAgentsToStorage(get().agents);\n      \n      return updatedAgent;\n    },\n\n    deleteAgent: async (id: number) => {\n      logger.info('AGENTS', 'Deleting agent from widget store', {\n        sessionId,\n        agentId: id\n      });\n\n      set(state => ({\n        agents: state.agents.filter(a => a.id !== id),\n        currentAgent: state.currentAgent?.id === id ? null : state.currentAgent,\n      }));\n\n      // Save to storage\n      saveAgentsToStorage(get().agents);\n    },\n\n    createAgent: async (data: any) => {\n      // Widgets typically don't create agents, but we need this for compatibility\n      throw new Error('Creating agents is not supported in widget mode');\n    },\n\n    replicateAgent: async (id: number) => {\n      // Widgets typically don't replicate agents\n      throw new Error('Replicating agents is not supported in widget mode');\n    },\n\n    getAgentStats: async (id: number) => {\n      // Return empty stats for widget mode\n      return {\n        messages_sent: 0,\n        users_interacted: 0,\n        last_message_at: null\n      };\n    },\n\n    reset: () => {\n      set({\n        agents: [],\n        currentAgent: null,\n        loading: false,\n        error: null,\n      });\n      \n      // Clear storage\n      try {\n        localStorage.removeItem(AGENTS_STORAGE_KEY);\n        localStorage.removeItem(SELECTED_AGENT_KEY);\n      } catch (error) {\n        console.error('Failed to clear agent storage:', error);\n      }\n    },\n  }));\n}","import React, { createContext, useContext, useRef, ReactNode } from 'react';\nimport { StoreApi } from 'zustand';\nimport { createMessageStore, MessageStore } from '../store/widget-stores/messages';\nimport { createConversationStore, ConversationStore } from '../store/widget-stores/conversations';\nimport { createAgentStore, AgentStore } from '../store/widget-stores/agents';\n\n/**\n * Widget Store Context\n * \n * Provides instance-specific Zustand stores for each widget.\n * This ensures complete data isolation between multiple widgets.\n * \n * Each widget instance gets its own:\n * - Message store (for chat messages)\n * - Conversation store (for conversation management)\n * - Agent store (for agent selection)\n * \n * The config store remains global as API configuration should be shared.\n */\n\ninterface WidgetStores {\n  messageStore: StoreApi<MessageStore>;\n  conversationStore: StoreApi<ConversationStore>;\n  agentStore: StoreApi<AgentStore>;\n}\n\ninterface WidgetStoreContextValue {\n  stores: WidgetStores;\n}\n\nexport const WidgetStoreContext = createContext<WidgetStoreContextValue | null>(null);\n\ninterface WidgetStoreProviderProps {\n  children: ReactNode;\n  sessionId: string;\n}\n\n/**\n * Widget Store Provider\n * \n * Creates and provides instance-specific stores for a widget.\n * Stores are created once per widget instance and reused.\n */\nexport const WidgetStoreProvider: React.FC<WidgetStoreProviderProps> = ({ \n  children, \n  sessionId \n}) => {\n  // Use ref to ensure stores are only created once per widget instance\n  const storesRef = useRef<WidgetStores | null>(null);\n  \n  if (!storesRef.current) {\n    // Create stores in the correct order, passing references to dependent stores\n    const agentStore = createAgentStore(sessionId);\n    const conversationStore = createConversationStore(sessionId);\n    const messageStore = createMessageStore(sessionId, agentStore, conversationStore);\n    \n    storesRef.current = {\n      messageStore,\n      conversationStore,\n      agentStore,\n    };\n  }\n  \n  return (\n    <WidgetStoreContext.Provider value={{ stores: storesRef.current }}>\n      {children}\n    </WidgetStoreContext.Provider>\n  );\n};\n\n/**\n * Hook to access widget-specific stores\n */\nexport const useWidgetStores = (): WidgetStores => {\n  const context = useContext(WidgetStoreContext);\n  if (!context) {\n    throw new Error('useWidgetStores must be used within WidgetStoreProvider');\n  }\n  return context.stores;\n};\n\n/**\n * Individual store hooks for easier access\n */\nexport const useWidgetMessageStore = () => {\n  const { messageStore } = useWidgetStores();\n  return messageStore;\n};\n\nexport const useWidgetConversationStore = () => {\n  const { conversationStore } = useWidgetStores();\n  return conversationStore;\n};\n\nexport const useWidgetAgentStore = () => {\n  const { agentStore } = useWidgetStores();\n  return agentStore;\n};","/**\n * Widget Store Hooks\n * \n * These hooks automatically select between global and widget-specific stores\n * based on whether the component is rendered inside a widget context.\n */\n\nimport { useContext } from 'react';\nimport { useStore } from 'zustand';\nimport { WidgetStoreContext } from '../widget/WidgetStoreContext';\nimport { useMessageStore as useGlobalMessageStore } from '../store';\nimport { useConversationStore as useGlobalConversationStore } from '../store';\nimport { useAgentStore as useGlobalAgentStore } from '../store';\nimport type { MessageStore } from '../store/widget-stores/messages';\nimport type { ConversationStore } from '../store/widget-stores/conversations';\nimport type { AgentStore } from '../store/widget-stores/agents';\n\n/**\n * Check if we're inside a widget context\n */\nfunction useIsInWidgetContext(): boolean {\n  try {\n    const context = useContext(WidgetStoreContext);\n    return context !== null;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get widget stores if inside widget context\n */\nfunction useWidgetStores() {\n  const context = useContext(WidgetStoreContext);\n  return context?.stores;\n}\n\n/**\n * Message store hook that automatically selects the correct store\n */\nexport function useMessageStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  \n  if (isInWidget && widgetStores) {\n    // Use widget-specific store\n    return useStore(widgetStores.messageStore);\n  }\n  \n  // Use global store\n  return useGlobalMessageStore();\n}\n\n/**\n * Conversation store hook that automatically selects the correct store\n */\nexport function useConversationStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  \n  if (isInWidget && widgetStores) {\n    // Use widget-specific store\n    return useStore(widgetStores.conversationStore);\n  }\n  \n  // Use global store\n  return useGlobalConversationStore();\n}\n\n/**\n * Agent store hook that automatically selects the correct store\n */\nexport function useAgentStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  \n  if (isInWidget && widgetStores) {\n    // Use widget-specific store\n    return useStore(widgetStores.agentStore);\n  }\n  \n  // Use global store\n  return useGlobalAgentStore();\n}\n\n/**\n * Export convenience functions to check store source\n */\nexport function useIsUsingWidgetStore(): boolean {\n  return useIsInWidgetContext();\n}\n\n/**\n * Get the current session ID if in widget context\n */\nexport function useWidgetSessionId(): string | null {\n  const context = useContext(WidgetStoreContext);\n  if (!context) return null;\n  \n  // Extract session ID from the store's localStorage key\n  const messageStore = context.stores.messageStore;\n  const state = messageStore.getState();\n  \n  // Session ID would need to be added to context for retrieval\n  return null;\n}","import { useEffect, useRef, forwardRef } from \"react\";\n\ninterface CanvasProps {\n  draw: (context: CanvasRenderingContext2D, displayWidth: number, displayHeight: number, projCenterX: number, projCenterY: number) => void;\n}\n\nconst Canvas = forwardRef<HTMLCanvasElement, CanvasProps>(({ draw }, ref) => {\n  const internalRef = useRef<HTMLCanvasElement>(null);\n  const canvasRef = (ref as any) || internalRef;\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const context = canvas.getContext('2d');\n    if (!context) return;\n\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Set up projection center coordinates at the center of the canvas\n    const displayWidth = canvas.width;\n    const displayHeight = canvas.height;\n    const projCenterX = displayWidth / 2;\n    const projCenterY = displayHeight / 2;\n\n    let animationFrameId: number;\n\n    const render = () => {\n      draw(context, displayWidth, displayHeight, projCenterX, projCenterY);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    \n    render();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n      window.removeEventListener('resize', resizeCanvas);\n    };\n  }, [draw]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"absolute inset-0 w-full h-full\"\n      style={{ background: '#000000' }}\n    />\n  );\n});\n\nCanvas.displayName = 'Canvas';\n\nexport default Canvas;","import { utils } from \"@ricky0123/vad-react\";\n\nexport interface VoiceCallbacks {\n  onUserSpeaking?: () => void;\n  onProcessing?: () => void;\n  onAiSpeaking?: () => void;\n  onReset?: () => void;\n  onError?: (error: string) => void;\n  onDebug?: (message: string, data?: any) => void;\n  // New callbacks for message store integration\n  onTranscriptReceived?: (transcript: string) => void;\n  onResponseReceived?: (response: string) => void;\n}\n\nclass SpeechManager {\n  private source: AudioBufferSourceNode | null = null;\n  private sourceIsStarted = false;\n  private conversationThusFar: any[] = [];\n  private callbacks: VoiceCallbacks = {};\n  private projectId: string | null = null;\n\n  setCallbacks(callbacks: VoiceCallbacks) {\n    this.callbacks = callbacks;\n    this.debug(\"Callbacks set\", { hasCallbacks: Object.keys(callbacks) });\n  }\n\n  setProjectId(projectId: string) {\n    this.projectId = projectId;\n    this.debug(\"Project ID set\", { projectId });\n  }\n\n  private debug(message: string, data?: any) {\n    const timestamp = new Date().toISOString();\n    console.log(`🎯 [SPEECH-MANAGER ${timestamp}] ${message}`, data || '');\n    this.callbacks.onDebug?.(message, data);\n  }\n\n  private error(message: string, error?: any) {\n    const timestamp = new Date().toISOString();\n    console.error(`❌ [SPEECH-MANAGER ${timestamp}] ${message}`, error || '');\n    this.callbacks.onError?.(message);\n  }\n\n  onSpeechStart = () => {\n    this.debug(\"Speech started - user is speaking\");\n    this.callbacks.onUserSpeaking?.();\n    this.stopSourceIfNeeded();\n  };\n\n  onSpeechEnd = async (audio: Float32Array) => {\n    this.debug(\"Speech ended\", { \n      audioLength: audio.length,\n      audioDuration: `${audio.length / 16000}s` // Assuming 16kHz sample rate\n    });\n    await this.processAudio(audio);\n  };\n\n  onMisfire = () => {\n    this.debug(\"VAD misfire - noise detected but not speech\");\n    this.callbacks.onReset?.();\n  };\n\n  private stopSourceIfNeeded = () => {\n    if (this.source && this.sourceIsStarted) {\n      this.debug(\"Stopping current audio playback\");\n      this.source.stop(0);\n      this.sourceIsStarted = false;\n    }\n  };\n\n  private processAudio = async (audio: Float32Array) => {\n    this.debug(\"Processing audio started\");\n    this.callbacks.onProcessing?.();\n    \n    try {\n      const blob = this.createAudioBlob(audio);\n      await this.validate(blob);\n      await this.sendData(blob);\n    } catch (error) {\n      this.error('Error processing audio', error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private createAudioBlob = (audio: Float32Array): Blob => {\n    const wavBuffer = utils.encodeWAV(audio);\n    const blob = new Blob([wavBuffer], { type: 'audio/wav' });\n    this.debug(\"Created audio blob\", { \n      size: `${(blob.size / 1024).toFixed(2)}KB`,\n      type: blob.type \n    });\n    return blob;\n  };\n\n  private sendData = async (blob: Blob) => {\n    this.debug(\"Preparing to send audio data to server\");\n    \n    if (!this.projectId) {\n      this.error('No project ID set - cannot send audio');\n      this.callbacks.onReset?.();\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"audio\", blob, \"audio.wav\");\n    formData.append(\"projectId\", this.projectId);\n\n    this.debug(\"Sending request to voice API\", {\n      projectId: this.projectId,\n      conversationLength: this.conversationThusFar.length,\n      audioSize: `${(blob.size / 1024).toFixed(2)}KB`\n    });\n\n    try {\n      const response = await fetch(\"/api/proxy/voice/inference\", {\n        method: \"POST\",\n        body: formData,\n        headers: {\n          'conversation': this.base64Encode(JSON.stringify(this.conversationThusFar))\n        }\n      });\n\n      this.debug(\"Response received\", {\n        status: response.status,\n        ok: response.ok,\n        headers: Object.fromEntries(response.headers.entries())\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(`API Error (${response.status}): ${error}`);\n      }\n\n      const textHeader = response.headers.get(\"text\");\n      if (!textHeader) {\n        throw new Error(\"No text header in response\");\n      }\n\n      const newMessages = JSON.parse(this.base64Decode(textHeader));\n      this.debug(\"Messages decoded\", { newMessages });\n      \n      // Extract user transcript and AI response for conversation store\n      if (newMessages.length > 0) {\n        if (newMessages[0].role === 'user') {\n          const transcript = newMessages[0].content;\n          this.callbacks.onDebug?.(`You said: \"${transcript}\"`, newMessages[0]);\n          this.callbacks.onTranscriptReceived?.(transcript);\n        }\n        \n        if (newMessages.length > 1 && newMessages[1].role === 'assistant') {\n          const response = newMessages[1].content;\n          this.callbacks.onResponseReceived?.(response);\n        } else if (newMessages.length === 1 && newMessages[0].role === 'assistant') {\n          // Sometimes only the assistant response is returned\n          const response = newMessages[0].content;\n          this.callbacks.onResponseReceived?.(response);\n        }\n      }\n      \n      this.conversationThusFar.push(...newMessages);\n      \n      const audioBlob = await response.blob();\n      this.debug(\"Audio blob received\", {\n        size: `${(audioBlob.size / 1024).toFixed(2)}KB`,\n        type: audioBlob.type\n      });\n      \n      await this.handleSuccess(audioBlob);\n    } catch (error) {\n      this.error(\"Failed to send audio data\", error);\n      this.handleError(error);\n    }\n  };\n\n  private base64Encode(str: string): string {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(str);\n    return window.btoa(String.fromCharCode(...new Uint8Array(data)));\n  }\n\n  private base64Decode(base64: string): string {\n    const binaryStr = window.atob(base64);\n    const bytes = new Uint8Array([...binaryStr].map((char) => char.charCodeAt(0)));\n    return new TextDecoder().decode(bytes);\n  }\n\n  private handleSuccess = async (blob: Blob) => {\n    this.debug(\"Playing AI response audio\");\n    \n    try {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      this.stopSourceIfNeeded();\n\n      const arrayBuffer = await blob.arrayBuffer();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      this.debug(\"Audio decoded\", {\n        duration: `${audioBuffer.duration.toFixed(2)}s`,\n        sampleRate: audioBuffer.sampleRate,\n        numberOfChannels: audioBuffer.numberOfChannels\n      });\n\n      this.source = audioContext.createBufferSource();\n      this.source.buffer = audioBuffer;\n      this.source.connect(audioContext.destination);\n      this.source.start(0);\n      this.sourceIsStarted = true;\n      \n      this.source.onended = () => {\n        this.debug(\"Audio playback ended\");\n        this.callbacks.onReset?.();\n      };\n\n      this.callbacks.onAiSpeaking?.();\n    } catch (error) {\n      this.error(\"Failed to play audio\", error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private handleError = (error: any) => {\n    this.error(`Error encountered: ${error.message}`, error);\n    this.callbacks.onReset?.();\n  };\n\n  private validate = async (data: Blob) => {\n    this.debug(\"Validating audio duration\");\n    \n    try {\n      // Clone the blob to avoid consuming the arrayBuffer\n      const clonedBlob = new Blob([data], { type: data.type });\n      const arrayBuffer = await clonedBlob.arrayBuffer();\n      const audioContext = new AudioContext();\n      const decodedData = await audioContext.decodeAudioData(arrayBuffer);\n      const duration = decodedData.duration;\n      const minDuration = 0.4;\n\n      this.debug(\"Audio validation\", {\n        duration: `${duration.toFixed(2)}s`,\n        minDuration: `${minDuration}s`,\n        valid: duration >= minDuration\n      });\n\n      if (duration < minDuration) {\n        throw new Error(`Duration is ${duration}s, which is less than minimum of ${minDuration}s`);\n      }\n    } catch (error) {\n      this.error(\"Audio validation failed\", error);\n      throw error;\n    }\n  };\n\n  clearConversation() {\n    this.conversationThusFar = [];\n  }\n\n  getConversationThusFar() {\n    return this.conversationThusFar;\n  }\n}\n\nexport const speechManager = new SpeechManager();","const sphereRad = 280 // 20..500\nconst radius_sp = 1 // 1..2\nlet framesPerRotation = 5000\nlet r: number, g: number, b: number  // particle color\n\nconst setLightBlue = () => {\n    r = 52\n    g = 235\n    b = 222\n}\nconst setOrange = () => {\n    r = 255\n    g = 191\n    b = 0\n}\nconst setViolet = () => {\n    r = 235\n    g = 67\n    b = 250\n}\nconst setFuchsia = () => {\n    r = 201\n    g = 10\n    b = 144\n}\n\nsetLightBlue()\n\nconst turnSpeed = () => 2 * Math.PI / framesPerRotation //the sphere will rotate at this speed (one complete rotation every 1600 frames).\n\nconst onUserSpeaking = () => {\n    console.log(\"🎤 [PARTICLE] User speaking - changing to orange\")\n    framesPerRotation = 5000\n    setOrange()\n}\nconst onProcessing = () => {\n    console.log(\"⚙️ [PARTICLE] Processing - changing to violet, spinning faster\")\n    framesPerRotation = 1000\n    setViolet()\n}\nconst onAiSpeaking = () => {\n    console.log(\"🤖 [PARTICLE] AI speaking - changing to fuchsia\")\n    framesPerRotation = 5000\n    setFuchsia()\n}\nconst reset = () => {\n    console.log(\"🔄 [PARTICLE] Reset - back to light blue\")\n    framesPerRotation = 5000\n    setLightBlue()\n}\n\nconst wait = 1\nlet count = wait - 1\nconst numToAddEachFrame = 8\nconst particleList: any = {\n    first: undefined\n}\nconst recycleBin: any = {\n    first: undefined\n}\nconst particleAlpha = 1 // maximum alpha\nconst fLen = 320 // represents the distance from the viewer to z=0 depth.\nlet m: number\n\n// we will not draw coordinates if they have too large of a z-coordinate (which means they are very close to the observer).\nconst zMax = fLen - 2\nlet turnAngle = 1 //initial angle\nconst sphereCenterY = 0, sphereCenterZ = -3 - sphereRad\nconst particleRad = 2.5\n\n//alpha values will lessen as particles move further back, causing depth-based darkening:\nconst zeroAlphaDepth = -750\n\n//random acceleration factors - causes some random motion\nconst randAccelX = 0.1, randAccelY = 0.1, randAccelZ = 0.1\nconst gravity = -0 //try changing to a positive number (not too large, for example 0.3), or negative for floating upwards.\nconst rgbString = () => \"rgba(\" + r + \",\" + g + \",\" + b + \",\" //partial string for color which will be completed by appending alpha value.\n//we are defining a lot of variables used in the screen update functions globally so that they don't have to be redefined every frame.\nlet p: any\nlet outsideTest: boolean\nlet nextParticle: any\nlet sinAngle: number\nlet cosAngle: number\nlet rotX: number, rotZ: number\nlet depthAlphaFactor: number\nlet i: number\nlet theta: number, phi: number\nlet x0: number, y0: number, z0: number\n\nfunction draw(context: CanvasRenderingContext2D, displayWidth: number, displayHeight: number, projCenterX: number, projCenterY: number) {\n    //if enough time has elapsed, we will add new particles.\n    count++\n    if (count >= wait) {\n\n        count = 0\n        for (i = 0; i < numToAddEachFrame; i++) {\n            theta = Math.random() * 2 * Math.PI\n            phi = Math.acos(Math.random() * 2 - 1)\n            x0 = sphereRad * Math.sin(phi) * Math.cos(theta)\n            y0 = sphereRad * Math.sin(phi) * Math.sin(theta)\n            z0 = sphereRad * Math.cos(phi)\n\n            //We use the addParticle function to add a new particle. The parameters set the position and velocity components.\n            //Note that the velocity parameters will cause the particle to initially fly outwards away from the sphere center (after\n            //it becomes unstuck).\n            const p = addParticle(x0, sphereCenterY + y0, sphereCenterZ + z0, 0.002 * x0, 0.002 * y0, 0.002 * z0)\n\n            //we set some \"envelope\" parameters which will control the evolving alpha of the particles.\n            p.attack = 50\n            p.hold = 50\n            p.decay = 100\n            p.initValue = 0\n            p.holdValue = particleAlpha\n            p.lastValue = 0\n\n            //the particle will be stuck in one place until this time has elapsed:\n            p.stuckTime = 90 + Math.random() * 20\n\n            p.accelX = 0\n            p.accelY = gravity\n            p.accelZ = 0\n        }\n    }\n\n    //update viewing angle\n    turnAngle = (turnAngle + turnSpeed()) % (2 * Math.PI)\n    sinAngle = Math.sin(turnAngle)\n    cosAngle = Math.cos(turnAngle)\n\n    //background fill\n    context.fillStyle = \"#000000\"\n    context.fillRect(0, 0, displayWidth, displayHeight)\n\n    //update and draw particles\n    p = particleList.first\n    while (p != null) {\n        //before list is altered record next particle\n        nextParticle = p.next\n\n        //update age\n        p.age++\n\n        //if the particle is past its \"stuck\" time, it will begin to move.\n        if (p.age > p.stuckTime) {\n            p.velX += p.accelX + randAccelX * (Math.random() * 2 - 1)\n            p.velY += p.accelY + randAccelY * (Math.random() * 2 - 1)\n            p.velZ += p.accelZ + randAccelZ * (Math.random() * 2 - 1)\n\n            p.x += p.velX\n            p.y += p.velY\n            p.z += p.velZ\n        }\n\n        /*\n        We are doing two things here to calculate display coordinates.\n        The whole display is being rotated around a vertical axis, so we first calculate rotated coordinates for\n        x and z (but the y coordinate will not change).\n        Then, we take the new coordinates (rotX, y, rotZ), and project these onto the 2D view plane.\n        */\n        rotX = cosAngle * p.x + sinAngle * (p.z - sphereCenterZ)\n        rotZ = -sinAngle * p.x + cosAngle * (p.z - sphereCenterZ) + sphereCenterZ\n        m = radius_sp * fLen / (fLen - rotZ)\n        p.projX = rotX * m + projCenterX\n        p.projY = p.y * m + projCenterY\n\n        //update alpha according to envelope parameters.\n        if (p.age < p.attack + p.hold + p.decay) {\n            if (p.age < p.attack) {\n                p.alpha = (p.holdValue - p.initValue) / p.attack * p.age + p.initValue\n            } else if (p.age < p.attack + p.hold) {\n                p.alpha = p.holdValue\n            } else if (p.age < p.attack + p.hold + p.decay) {\n                p.alpha = (p.lastValue - p.holdValue) / p.decay * (p.age - p.attack - p.hold) + p.holdValue\n            }\n        } else {\n            p.dead = true\n        }\n\n        //see if the particle is still within the viewable range.\n        outsideTest = (p.projX > displayWidth) || (p.projX < 0) || (p.projY < 0) || (p.projY > displayHeight) || (rotZ > zMax);\n\n        if (outsideTest || p.dead) {\n            recycle(p)\n        } else {\n            //depth-dependent darkening\n            depthAlphaFactor = (1 - rotZ / zeroAlphaDepth)\n            depthAlphaFactor = (depthAlphaFactor > 1) ? 1 : ((depthAlphaFactor < 0) ? 0 : depthAlphaFactor)\n            context.fillStyle = rgbString() + depthAlphaFactor * p.alpha + \")\"\n\n            //draw\n            context.beginPath()\n            context.arc(p.projX, p.projY, m * particleRad, 0, 2 * Math.PI, false)\n            context.closePath()\n            context.fill()\n        }\n\n        p = nextParticle\n    }\n}\n\nfunction addParticle(x0: number, y0: number, z0: number, vx0: number, vy0: number, vz0: number) {\n    let newParticle: any\n\n    //check recycle bin for available drop:\n    if (recycleBin.first != null) {\n        newParticle = recycleBin.first\n        //remove from bin\n        if (newParticle.next != null) {\n            recycleBin.first = newParticle.next\n            newParticle.next.prev = null\n        } else {\n            recycleBin.first = null\n        }\n    }\n    //if the recycle bin is empty, create a new particle (a new empty object):\n    else {\n        newParticle = {}\n    }\n\n    //add to beginning of particle list\n    if (particleList.first == null) {\n        particleList.first = newParticle\n        newParticle.prev = null\n        newParticle.next = null\n    } else {\n        newParticle.next = particleList.first\n        particleList.first.prev = newParticle\n        particleList.first = newParticle\n        newParticle.prev = null\n    }\n\n    //initialize\n    newParticle.x = x0\n    newParticle.y = y0\n    newParticle.z = z0\n    newParticle.velX = vx0\n    newParticle.velY = vy0\n    newParticle.velZ = vz0\n    newParticle.age = 0\n    newParticle.dead = false\n    newParticle.right = Math.random() < 0.5;\n    return newParticle\n}\n\nfunction recycle(p: any) {\n    //remove from particleList\n    if (particleList.first === p) {\n        if (p.next != null) {\n            p.next.prev = null\n            particleList.first = p.next\n        } else {\n            particleList.first = null\n        }\n    } else {\n        if (p.next == null) {\n            p.prev.next = null\n        } else {\n            p.prev.next = p.next\n            p.next.prev = p.prev\n        }\n    }\n    //add to recycle bin\n    if (recycleBin.first == null) {\n        recycleBin.first = p\n        p.prev = null\n        p.next = null\n    } else {\n        p.next = recycleBin.first\n        recycleBin.first.prev = p\n        recycleBin.first = p\n        p.prev = null\n    }\n}\n\nexport const particleActions = {\n    onUserSpeaking,\n    onProcessing,\n    onAiSpeaking,\n    reset,\n    draw,\n    init: () => {} // No initialization needed for this implementation\n};","'use client';\n\nimport { useEffect, useState, useRef, useCallback } from 'react';\nimport { useMicVAD } from '@ricky0123/vad-react';\nimport RotateLoader from 'react-spinners/RotateLoader';\nimport { X } from 'lucide-react';\nimport Canvas from './Canvas';\nimport { speechManager } from '@/lib/voice/speech-manager';\nimport { particleActions } from '@/lib/voice/particle-manager';\nimport { useMessageStore, useConversationStore } from '@/hooks/useWidgetStore';\nimport { generateId } from '@/lib/utils';\n\ninterface VoiceModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  projectId: string;\n  projectName?: string;\n}\n\nexport function VoiceModal({ isOpen, onClose, projectId, projectName }: VoiceModalProps) {\n  const [loading, setLoading] = useState(true);\n  const [transcript, setTranscript] = useState('');\n  const [debugMessages, setDebugMessages] = useState<string[]>([]);\n  const [isManualRecording, setIsManualRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  \n  // Message store integration\n  const { addMessage } = useMessageStore();\n  const { currentConversation, ensureConversation } = useConversationStore();\n  const [currentUserMessageId, setCurrentUserMessageId] = useState<string | null>(null);\n\n  const vad = useMicVAD({\n    preSpeechPadFrames: 5,\n    positiveSpeechThreshold: 0.90,  // Back to AIUI settings\n    negativeSpeechThreshold: 0.75,   // Back to AIUI settings\n    minSpeechFrames: 4,              // Back to AIUI settings\n    startOnLoad: false,              // Start manually to handle permissions properly\n    workletURL: '/vad.worklet.bundle.min.js',\n    modelURL: '/silero_vad.onnx',\n    onSpeechStart: () => {\n      console.log('🎤 [VAD] Speech started detected');\n      const debugMsg = `${new Date().toLocaleTimeString()} - VAD: Speech started`;\n      setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n      speechManager.onSpeechStart();\n    },\n    onSpeechEnd: (audio) => {\n      console.log('🎤 [VAD] Speech ended, audio length:', audio.length);\n      const debugMsg = `${new Date().toLocaleTimeString()} - VAD: Speech ended, audio length: ${audio.length}`;\n      setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n      speechManager.onSpeechEnd(audio);\n    },\n    onVADMisfire: () => {\n      console.log('🎤 [VAD] Misfire detected');\n      const debugMsg = `${new Date().toLocaleTimeString()} - VAD: Misfire (noise detected)`;\n      setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n      speechManager.onMisfire();\n    }\n  });\n\n  // Set up speech manager when modal opens\n  useEffect(() => {\n    if (isOpen && projectId) {\n      console.log('🔧 [VOICE-MODAL] Setting up speech manager');\n      speechManager.setProjectId(projectId);\n      speechManager.setCallbacks({\n        onUserSpeaking: () => {\n          particleActions.onUserSpeaking();\n          setTranscript('');\n        },\n        onProcessing: () => {\n          particleActions.onProcessing();\n        },\n        onAiSpeaking: () => particleActions.onAiSpeaking(),\n        onReset: () => particleActions.reset(),\n        onDebug: (message: string, data?: any) => {\n          const debugMsg = `${new Date().toLocaleTimeString()} - ${message}`;\n          setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n        },\n        onError: (error: string) => {\n          const errorMsg = `${new Date().toLocaleTimeString()} - ERROR: ${error}`;\n          setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n        },\n        onTranscriptReceived: async (transcript: string) => {\n          console.log('🎯 [VOICE-MODAL] Transcript received:', transcript);\n          setTranscript(transcript);\n          \n          // Ensure we have a conversation\n          const conversation = await ensureConversation(parseInt(projectId), transcript);\n          \n          // Create and add user message to chat\n          const userMessage = {\n            id: generateId(),\n            role: 'user' as const,\n            content: transcript,\n            timestamp: new Date().toISOString(),\n            status: 'sent' as const,\n          };\n          \n          setCurrentUserMessageId(userMessage.id);\n          addMessage(conversation.id.toString(), userMessage);\n          \n          const debugMsg = `${new Date().toLocaleTimeString()} - Added user message to chat: \"${transcript}\"`;\n          setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n        },\n        onResponseReceived: async (response: string) => {\n          console.log('🎯 [VOICE-MODAL] Response received:', response);\n          \n          if (currentConversation) {\n            // Create and add assistant message to chat\n            const assistantMessage = {\n              id: generateId(),\n              role: 'assistant' as const,\n              content: response,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n              citations: [], // Voice responses typically don't have citations\n            };\n            \n            addMessage(currentConversation.id.toString(), assistantMessage);\n            \n            const debugMsg = `${new Date().toLocaleTimeString()} - Added AI response to chat: \"${response.substring(0, 50)}...\"`;\n            setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n          }\n        }\n      });\n    }\n    \n    // Clean up when modal closes\n    if (!isOpen) {\n      speechManager.clearConversation();\n      setTranscript('');\n      setDebugMessages([]);\n    }\n  }, [isOpen, projectId]);\n\n  // Define handleToggleListening before useEffect that uses it\n  const handleToggleListening = useCallback(async () => {\n    console.log('🔘 [VOICE-MODAL] Toggle listening clicked', { \n      vadLoading: vad.loading,\n      vadListening: vad.listening,\n      vadErrored: vad.errored\n    });\n    \n    // Enhanced error handling for VAD\n    if (vad.errored) {\n      console.error('❌ [VOICE-MODAL] VAD is in error state, attempting recovery...');\n      const errorMsg = `${new Date().toLocaleTimeString()} - VAD ERROR: Attempting to recover. Check browser console.`;\n      setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n      \n      // Try to restart VAD after error\n      try {\n        console.log('🔄 [VOICE-MODAL] Attempting VAD recovery...');\n        // Wait a moment then try to start\n        setTimeout(() => {\n          if (!vad.listening && !vad.loading) {\n            console.log('🔄 [VOICE-MODAL] Retry VAD start after error');\n            vad.start();\n          }\n        }, 1000);\n        return;\n      } catch (recoveryError) {\n        console.error('❌ [VOICE-MODAL] VAD recovery failed:', recoveryError);\n        const errorMsg = `${new Date().toLocaleTimeString()} - ERROR: VAD recovery failed. Try refreshing the page.`;\n        setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n        return;\n      }\n    }\n    \n    try {\n      if (vad.listening) {\n        console.log('⏸️ [VOICE-MODAL] Pausing VAD');\n        vad.pause();\n        const debugMsg = `${new Date().toLocaleTimeString()} - VAD paused`;\n        setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n      } else {\n        console.log('▶️ [VOICE-MODAL] Starting VAD');\n        \n        // Enhanced microphone permission check\n        try {\n          console.log('🎤 [VOICE-MODAL] Checking microphone permissions...');\n          const stream = await navigator.mediaDevices.getUserMedia({ \n            audio: {\n              channelCount: 1,\n              echoCancellation: true,\n              noiseSuppression: true,\n              sampleRate: 16000\n            } \n          });\n          \n          // Test the stream briefly\n          const audioContext = new AudioContext();\n          const source = audioContext.createMediaStreamSource(stream);\n          console.log('🎯 [VOICE-MODAL] Audio context created successfully');\n          \n          // Clean up test resources\n          source.disconnect();\n          audioContext.close();\n          stream.getTracks().forEach(track => track.stop());\n          \n          console.log('🎯 [VOICE-MODAL] Microphone permission granted and tested');\n        } catch (permissionError) {\n          console.error('❌ [VOICE-MODAL] Microphone permission or setup failed:', permissionError);\n          const errorMessage = permissionError instanceof Error ? permissionError.message : 'Check permissions.';\n          const errorMsg = `${new Date().toLocaleTimeString()} - ERROR: Microphone setup failed. ${errorMessage}`;\n          setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n          return;\n        }\n        \n        // Start VAD with additional error handling\n        try {\n          vad.start();\n          const debugMsg = `${new Date().toLocaleTimeString()} - VAD started successfully`;\n          setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n        } catch (vadError) {\n          console.error('❌ [VOICE-MODAL] VAD start failed:', vadError);\n          const errorMessage = vadError instanceof Error ? vadError.message : 'Unknown error';\n          const errorMsg = `${new Date().toLocaleTimeString()} - ERROR: VAD failed to start. ${errorMessage}`;\n          setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n        }\n      }\n    } catch (error) {\n      console.error('❌ [VOICE-MODAL] Error in toggle listening:', error);\n      const errorMsg = `${new Date().toLocaleTimeString()} - ERROR: ${error instanceof Error ? error.message : 'Failed to toggle VAD'}`;\n      setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n    }\n  }, [vad]);\n\n  // Manual recording fallback when VAD fails\n  const handleManualRecording = useCallback(async () => {\n    console.log('🎤 [MANUAL] Starting manual recording fallback');\n    \n    try {\n      if (!isManualRecording) {\n        // Start manual recording\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        const recorder = new MediaRecorder(stream);\n        const chunks: Blob[] = [];\n        \n        recorder.ondataavailable = (event) => {\n          if (event.data.size > 0) {\n            chunks.push(event.data);\n          }\n        };\n        \n        recorder.onstop = async () => {\n          console.log('🎤 [MANUAL] Recording stopped, processing audio...');\n          const audioBlob = new Blob(chunks, { type: 'audio/wav' });\n          \n          try {\n            // Create audio context for decoding compressed audio\n            const audioContext = new AudioContext();\n            \n            // Convert blob to ArrayBuffer\n            const audioBuffer = await audioBlob.arrayBuffer();\n            \n            // Decode the compressed audio to get raw PCM data\n            const decodedAudio = await audioContext.decodeAudioData(audioBuffer);\n            console.log('🎯 [MANUAL] Audio decoded:', {\n              sampleRate: decodedAudio.sampleRate,\n              channels: decodedAudio.numberOfChannels,\n              duration: decodedAudio.duration,\n              length: decodedAudio.length\n            });\n            \n            // Convert to mono Float32Array (match VAD format)\n            const channelData = decodedAudio.getChannelData(0); // Get first channel\n            const audioArray = new Float32Array(channelData);\n            \n            console.log('🎯 [MANUAL] Audio converted to Float32Array:', audioArray.length, 'samples');\n            \n            // Process through speech manager\n            speechManager.onSpeechStart();\n            await speechManager.onSpeechEnd(audioArray);\n            \n            // Clean up audio context\n            await audioContext.close();\n            \n          } catch (error) {\n            console.error('❌ [MANUAL] Audio decoding failed:', error);\n            const errorMsg = `${new Date().toLocaleTimeString()} - Manual recording audio decode failed: ${error instanceof Error ? error.message : 'Unknown error'}`;\n            setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n          }\n          \n          // Clean up recording resources\n          stream.getTracks().forEach(track => track.stop());\n          setIsManualRecording(false);\n          setMediaRecorder(null);\n        };\n        \n        setMediaRecorder(recorder);\n        setIsManualRecording(true);\n        recorder.start();\n        \n        const debugMsg = `${new Date().toLocaleTimeString()} - Manual recording started (VAD fallback)`;\n        setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n        \n      } else {\n        // Stop manual recording\n        if (mediaRecorder) {\n          mediaRecorder.stop();\n        }\n      }\n    } catch (error) {\n      console.error('❌ [MANUAL] Manual recording failed:', error);\n      const errorMsg = `${new Date().toLocaleTimeString()} - Manual recording failed: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n    }\n  }, [isManualRecording, mediaRecorder]);\n\n  // Track if we've already auto-started to prevent loops\n  const [hasAutoStarted, setHasAutoStarted] = useState(false);\n\n  // Handle VAD state updates with comprehensive error checking\n  useEffect(() => {\n    console.log('🔄 [VOICE-MODAL] VAD state changed', { \n      isOpen,\n      vadLoading: vad.loading, \n      vadListening: vad.listening,\n      vadUserSpeaking: vad.userSpeaking,\n      vadErrored: vad.errored,\n      hasAutoStarted\n    });\n    \n    // Check for VAD errors\n    if (vad.errored) {\n      console.error('❌ [VOICE-MODAL] VAD encountered an error');\n      const errorMsg = `${new Date().toLocaleTimeString()} - VAD ERROR: Check console and microphone permissions`;\n      setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n      return;\n    }\n    \n    // Auto-start VAD when it finishes loading (like AIUI behavior) - but only once\n    if (isOpen && !vad.loading && !vad.listening && !vad.errored && !hasAutoStarted) {\n      console.log('🎯 [VOICE-MODAL] VAD loaded successfully, attempting auto-start...');\n      const debugMsg = `${new Date().toLocaleTimeString()} - VAD loaded, attempting auto-start`;\n      setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n      \n      setHasAutoStarted(true);\n      // Use setTimeout to break the synchronous cycle and allow for proper initialization\n      setTimeout(() => {\n        handleToggleListening();\n      }, 300); // Increased delay for better stability\n    }\n    \n    // If VAD is in error state but we haven't tried recovery, attempt recovery\n    if (isOpen && !vad.loading && vad.errored && hasAutoStarted) {\n      console.log('🔄 [VOICE-MODAL] VAD in error state, scheduling recovery attempt...');\n      const debugMsg = `${new Date().toLocaleTimeString()} - VAD error detected, will attempt recovery`;\n      setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n      \n      // Don't continuously retry, just once more after a delay\n      setTimeout(() => {\n        if (vad.errored && !vad.listening) {\n          console.log('🔄 [VOICE-MODAL] Executing VAD recovery attempt');\n          handleToggleListening();\n        }\n      }, 1500);\n    }\n    \n    // Pause when modal closes\n    if (!isOpen && vad.listening) {\n      console.log('🛑 [VOICE-MODAL] Pausing VAD (modal closed)');\n      vad.pause();\n    }\n  }, [isOpen, vad.loading, vad.listening, vad.errored, hasAutoStarted]);\n\n  // Reset auto-start flag when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setHasAutoStarted(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setLoading(vad.loading);\n  }, [vad.loading]);\n\n  return (\n    <>\n      {isOpen && (\n        <div className=\"fixed inset-0 z-50 bg-black\">\n          {loading ? (\n            <div className=\"flex items-center justify-center h-full\">\n              <RotateLoader\n                loading={loading}\n                color=\"#27eab6\"\n                aria-label=\"Loading Voice\"\n                data-testid=\"loader\"\n              />\n            </div>\n          ) : (\n            <>\n              {/* Canvas for particle animation */}\n              <Canvas draw={particleActions.draw} />\n              \n              {/* Close button */}\n              <button\n                onClick={onClose}\n                className=\"absolute top-8 right-8 w-12 h-12 rounded-full bg-white/10 hover:bg-white/20 backdrop-blur-sm flex items-center justify-center transition-colors\"\n                aria-label=\"Close voice mode\"\n              >\n                <X className=\"w-6 h-6 text-white\" />\n              </button>\n              \n              {/* Control buttons */}\n              <div className=\"absolute bottom-12 left-1/2 transform -translate-x-1/2 flex gap-4\">\n                <button\n                  onClick={handleToggleListening}\n                  className={`px-8 py-4 rounded-full font-medium transition-all transform hover:scale-105 ${\n                    vad.listening\n                      ? 'bg-red-500 hover:bg-red-600 text-white shadow-lg shadow-red-500/50'\n                      : 'bg-white/10 hover:bg-white/20 text-white backdrop-blur-sm'\n                  }`}\n                >\n                  {vad.listening ? 'Pause' : 'Resume'}\n                </button>\n                \n                {/* Manual recording fallback if VAD fails */}\n                {vad.errored && (\n                  <>\n                    <button\n                      onClick={handleManualRecording}\n                      className={`px-6 py-4 rounded-full font-medium transition-all transform hover:scale-105 ${\n                        isManualRecording\n                          ? 'bg-red-500 hover:bg-red-600 text-white shadow-lg shadow-red-500/50'\n                          : 'bg-green-500 hover:bg-green-600 text-white'\n                      }`}\n                    >\n                      {isManualRecording ? 'Stop Recording' : 'Manual Record'}\n                    </button>\n                    <button\n                      onClick={() => window.location.reload()}\n                      className=\"px-6 py-4 rounded-full font-medium bg-blue-500 hover:bg-blue-600 text-white transition-all transform hover:scale-105\"\n                    >\n                      Reload & Retry\n                    </button>\n                  </>\n                )}\n              </div>\n\n              {/* Status display */}\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-center pointer-events-none\">\n                <p className=\"text-2xl font-light mb-2\">\n                  {isManualRecording \n                    ? 'Recording...' \n                    : vad.errored \n                    ? 'Error - Try Manual Mode' \n                    : vad.listening \n                    ? 'Listening...' \n                    : 'Paused'}\n                </p>\n                {vad.errored && !isManualRecording && (\n                  <p className=\"text-sm text-red-300 max-w-md mx-auto mb-2\">\n                    VAD worklet failed to load. Use \"Manual Record\" button below or reload page.\n                  </p>\n                )}\n                {isManualRecording && (\n                  <p className=\"text-sm text-green-300 max-w-md mx-auto mb-2\">\n                    Press \"Stop Recording\" when you finish speaking.\n                  </p>\n                )}\n                {transcript && (\n                  <p className=\"text-lg text-white/70 max-w-md mx-auto\">\"{transcript}\"</p>\n                )}\n              </div>\n\n              {/* Debug console - Always visible for debugging */}\n              <div className=\"absolute bottom-32 left-8 right-8 max-w-2xl mx-auto max-h-40 overflow-y-auto bg-black/30 backdrop-blur-sm rounded-lg p-4\">\n                <div className=\"text-xs text-green-400 font-mono space-y-1\">\n                  <div className={`${vad.errored ? 'text-red-400' : 'text-yellow-400'}`}>\n                    VAD Status: {vad.loading ? 'Loading...' : vad.errored ? 'ERROR' : vad.listening ? 'Listening' : 'Paused'}\n                  </div>\n                  <div className=\"text-yellow-400\">User Speaking: {vad.userSpeaking ? 'Yes' : 'No'}</div>\n                  <div className=\"text-yellow-400\">Project ID: {projectId || 'Not Set'}</div>\n                  <div className={`${vad.errored ? 'text-red-400' : 'text-blue-400'}`}>\n                    VAD Error: {vad.errored ? 'Yes - Check microphone permissions' : 'No'}\n                  </div>\n                  <div className=\"text-blue-400\">Model Files: /silero_vad.onnx, /vad.worklet.bundle.min.js</div>\n                  {debugMessages.length > 0 ? (\n                    debugMessages.slice(-6).map((msg, i) => (\n                      <div key={i} className={`opacity-90 ${msg.includes('ERROR') ? 'text-red-300' : ''}`}>{msg}</div>\n                    ))\n                  ) : (\n                    <div className=\"text-gray-400\">Initializing VAD... Check console for details</div>\n                  )}\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      )}\n    </>\n  );\n}","/**\n * ChatContainer Component\n * \n * Main chat interface component that manages the entire chat experience.\n * This is the primary component for integrating CustomGPT chat functionality.\n * \n * Features:\n * - Message display with streaming support\n * - Agent selection and switching\n * - Citation handling with modal details\n * - Multiple deployment modes (standalone, widget, floating)\n * - Welcome screen with example prompts\n * - Error handling and authorization checks\n * \n * For customization:\n * - Example questions are now fetched from agent settings API\n * - Modify DEFAULT_EXAMPLE_PROMPTS for fallback starter questions\n * - Customize WelcomeMessage for branding\n * - Adjust ChatHeader for different layouts\n * - Style using Tailwind classes throughout\n */\n\n'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Sparkles, Bot } from 'lucide-react';\nimport Link from 'next/link';\nimport { toast } from 'sonner';\n\nimport type { ChatMessage, Citation, Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Message } from './Message';\nimport { ChatInput } from './ChatInput';\nimport { TypingIndicator } from './TypingIndicator';\nimport { AgentSelector } from './AgentSelector';\nimport { CitationDetailsModal } from './CitationDetailsModal';\nimport { CitationFilePreview } from './CitationFilePreview';\nimport { ConversationManager } from './ConversationManager';\nimport { MessageErrorDisplay } from './MessageErrorDisplay';\nimport { logger } from '@/lib/logger';\nimport { useWidgetSafe } from '@/widget/WidgetContext';\nimport { useMessageStore, useConversationStore, useAgentStore } from '@/hooks/useWidgetStore';\nimport { MessageSkeleton, LoadingOverlay } from '@/components/ui/loading';\nimport { getClient } from '@/lib/api/client';\nimport { VoiceModal } from '@/components/voice/VoiceModal';\n\n/**\n * Default example prompts shown to users when starting a new conversation\n * These are used as fallback when API-sourced example questions are not available\n */\nconst DEFAULT_EXAMPLE_PROMPTS = [\n  \"What can you help me with?\",\n  \"Explain this document\", \n  \"Summarize key points\",\n  \"Answer my questions\",\n];\n\ninterface ExamplePromptCardProps {\n  /** The prompt text to display */\n  prompt: string;\n  /** Handler called when the prompt is clicked */\n  onClick: (prompt: string) => void;\n}\n\n/**\n * ExamplePromptCard Component\n * \n * Clickable card showing an example prompt that users can select\n * to quickly start a conversation\n */\nconst ExamplePromptCard: React.FC<ExamplePromptCardProps> = ({ prompt, onClick }) => {\n  return (\n    <button\n      onClick={() => onClick(prompt)}\n      className=\"p-3 text-left bg-card border border-border rounded-lg hover:border-accent hover:shadow-sm transition-all text-sm text-card-foreground\"\n    >\n      {prompt}\n    </button>\n  );\n};\n\ninterface WelcomeMessageProps {\n  /** Handler called when an example prompt is clicked */\n  onPromptClick: (prompt: string) => void;\n}\n\n/**\n * WelcomeMessage Component\n * \n * Displays a welcome screen when no messages exist in the conversation.\n * Shows the agent name, welcome text, and example prompts.\n * Fetches agent-specific example questions from API with fallback to defaults.\n * Uses Framer Motion for smooth animations.\n */\nconst WelcomeMessage: React.FC<WelcomeMessageProps> = ({ onPromptClick }) => {\n  const { currentAgent } = useAgentStore();\n  const [exampleQuestions, setExampleQuestions] = useState<string[]>(DEFAULT_EXAMPLE_PROMPTS);\n  const [loading, setLoading] = useState(false);\n  \n  /**\n   * Fetch agent settings to get custom example questions\n   */\n  useEffect(() => {\n    const fetchExampleQuestions = async () => {\n      if (!currentAgent) {\n        return;\n      }\n\n      // If we already have example questions from settings, use them\n      if (currentAgent.settings?.example_questions && currentAgent.settings.example_questions.length > 0) {\n        setExampleQuestions(currentAgent.settings.example_questions);\n        return;\n      }\n\n      setLoading(true);\n      try {\n        const client = getClient();\n        const response = await client.getAgentSettings(currentAgent.id);\n        const settings = response.data || response;\n        \n        // Use API example questions if available, otherwise keep defaults\n        if (settings.example_questions && settings.example_questions.length > 0) {\n          setExampleQuestions(settings.example_questions);\n          \n          logger.info('UI', 'Loaded custom example questions from API', {\n            agentId: currentAgent.id,\n            questionCount: settings.example_questions.length\n          });\n        } else {\n          logger.info('UI', 'No custom example questions found, using defaults', {\n            agentId: currentAgent.id\n          });\n        }\n      } catch (error) {\n        logger.warn('UI', 'Failed to load agent settings for example questions', {\n          agentId: currentAgent.id,\n          error: error instanceof Error ? error.message : String(error)\n        });\n        // Keep default questions on error\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchExampleQuestions();\n  }, [currentAgent]);\n  \n  return (\n    <div className=\"flex flex-col items-center justify-center h-full px-4 py-8\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"text-center max-w-md\"\n      >\n        {/* Logo */}\n        <div className=\"w-16 h-16 rounded-full flex items-center justify-center mb-6 mx-auto\">\n          <img \n            src=\"/logo.png\" \n            alt=\"CustomGPT.ai Logo\" \n            className=\"w-16 h-16 rounded-full\"\n          />\n        </div>\n        \n        {/* Welcome Text */}\n        <h3 className=\"text-xl font-semibold text-foreground mb-2\">\n          Welcome to {currentAgent?.project_name || 'CustomGPT'}!\n        </h3>\n        <p className=\"text-muted-foreground mb-8\">\n          I'm here to help answer your questions and assist with your tasks. How can I help you today?\n        </p>\n        \n        {/* Example Prompts */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 w-full\">\n          {exampleQuestions.map((prompt, idx) => (\n            <motion.div\n              key={`${currentAgent?.id}-${idx}`} // Include agent ID to force re-render on agent change\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3, delay: 0.1 + (idx * 0.1) }}\n            >\n              <ExamplePromptCard\n                prompt={prompt}\n                onClick={onPromptClick}\n              />\n            </motion.div>\n          ))}\n        </div>\n        \n        {/* Loading indicator for example questions */}\n        {loading && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className=\"mt-4\"\n          >\n            <p className=\"text-xs text-muted-foreground\">Loading custom questions...</p>\n          </motion.div>\n        )}\n      </motion.div>\n    </div>\n  );\n};\n\ninterface MessageAreaProps {\n  /** Additional CSS classes for styling */\n  className?: string;\n}\n\n/**\n * MessageArea Component\n * \n * Scrollable area that displays all messages in the current conversation.\n * Handles:\n * - Message rendering with streaming support\n * - Auto-scrolling to latest messages\n * - Citation click handling\n * - Error display\n * - Welcome message when empty\n * - Loading states with typing indicator\n */\nconst MessageArea: React.FC<MessageAreaProps> = ({ className }) => {\n  const { \n    messages, \n    streamingMessage, \n    isStreaming,\n    error,\n    sendMessage,\n    updateMessageFeedback,\n    loading \n  } = useMessageStore();\n  const { currentConversation } = useConversationStore();\n  const { currentAgent } = useAgentStore();\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMessages, setIsLoadingMessages] = React.useState(false);\n  const [prevConversationId, setPrevConversationId] = React.useState<string | null>(null);\n  \n  // Citation modal state - tracks which citation is being viewed\n  const [selectedCitationId, setSelectedCitationId] = React.useState<number | string | null>(null);\n  const [citationModalOpen, setCitationModalOpen] = React.useState(false);\n  \n  // Citation preview state\n  const [previewCitationId, setPreviewCitationId] = React.useState<string | null>(null);\n  const [previewModalOpen, setPreviewModalOpen] = React.useState(false);\n  \n  const conversationMessages = currentConversation \n    ? messages.get(currentConversation.id.toString()) || []\n    : [];\n  \n  // Detect conversation change\n  useEffect(() => {\n    if (currentConversation && currentConversation.id.toString() !== prevConversationId) {\n      setIsLoadingMessages(true);\n      setPrevConversationId(currentConversation.id.toString());\n      \n      // Set a timeout to hide loading after a reasonable time\n      const timeout = setTimeout(() => {\n        setIsLoadingMessages(false);\n      }, 1000);\n      \n      return () => clearTimeout(timeout);\n    }\n  }, [currentConversation, prevConversationId]);\n  \n  // Hide loading when messages arrive OR when message loading completes\n  useEffect(() => {\n    if (isLoadingMessages && (conversationMessages.length > 0 || !loading)) {\n      setIsLoadingMessages(false);\n    }\n  }, [conversationMessages, isLoadingMessages, loading]);\n  \n  /**\n   * Auto-scroll effect\n   * Automatically scrolls to the bottom when new messages arrive\n   * or when streaming messages are updated\n   * \n   * Uses instant scroll for conversation switches to avoid annoying\n   * scroll animations when clicking on past chats with many messages.\n   * Uses smooth scroll for new messages and streaming updates.\n   */\n  useEffect(() => {\n    if (scrollRef.current) {\n      // Use instant scroll when loading messages (conversation switch)\n      // Use smooth scroll for real-time message additions and streaming\n      const scrollBehavior = isLoadingMessages ? 'auto' : 'smooth';\n      \n      scrollRef.current.scrollTo({\n        top: scrollRef.current.scrollHeight,\n        behavior: scrollBehavior,\n      });\n    }\n  }, [conversationMessages, streamingMessage, isLoadingMessages]);\n  \n  const handleExamplePrompt = (prompt: string) => {\n    logger.info('UI', 'Example prompt clicked', { prompt });\n    sendMessage(prompt);\n  };\n  \n  const handleCitationClick = (citation: Citation) => {\n    logger.info('UI', 'Citation clicked', {\n      citationId: citation.id,\n      citationIndex: citation.index,\n      citationTitle: citation.title\n    });\n    \n    // Open citation details modal with the citation ID\n    if (citation.id) {\n      setSelectedCitationId(citation.id);\n      setCitationModalOpen(true);\n    }\n  };\n  \n  const handlePreviewClick = (citation: Citation) => {\n    logger.info('UI', 'Citation preview requested', {\n      citationId: citation.id,\n      citationTitle: citation.title\n    });\n    \n    // Open preview modal with the citation ID\n    if (citation.id) {\n      setPreviewCitationId(citation.id);\n      setPreviewModalOpen(true);\n    }\n  };\n  \n  const handleMessageFeedback = async (messageId: string, feedback: 'like' | 'dislike') => {\n    logger.info('UI', 'Message feedback provided', {\n      messageId,\n      feedback\n    });\n    \n    // Call the message store to update feedback\n    await updateMessageFeedback(messageId, feedback);\n  };\n  \n  return (\n    <div\n      ref={scrollRef}\n      className={cn(\n        'flex-1 overflow-y-auto scroll-smooth',\n        'bg-gradient-to-b from-muted/50 to-background',\n        className\n      )}\n    >\n      {/* Error Message */}\n      {error && (\n        <div className=\"p-4 m-4\">\n          <MessageErrorDisplay \n            error={error}\n            onRetry={() => {\n              // Clear error and retry sending last message if applicable\n              const conversationMessages = currentConversation \n                ? messages.get(currentConversation.id.toString()) || []\n                : [];\n              const lastUserMessage = conversationMessages\n                .filter(m => m.role === 'user')\n                .pop();\n              \n              if (lastUserMessage && lastUserMessage.status === 'error') {\n                sendMessage(lastUserMessage.content);\n              }\n            }}\n          />\n        </div>\n      )}\n\n      {/* Loading state when switching conversations */}\n      {isLoadingMessages && (\n        <LoadingOverlay \n          visible={true} \n          message={conversationMessages.length > 0 ? \"Loading conversation...\" : \"Switching to conversation...\"}\n          blur={true}\n        />\n      )}\n      \n      {/* Message skeleton fallback for empty conversations */}\n      {isLoadingMessages && conversationMessages.length === 0 && !isStreaming && (\n        <div className=\"space-y-0 opacity-30\">\n          <MessageSkeleton isAssistant={false} lines={2} />\n          <MessageSkeleton isAssistant={true} lines={3} />\n          <MessageSkeleton isAssistant={false} lines={1} />\n          <MessageSkeleton isAssistant={true} lines={4} />\n        </div>\n      )}\n\n      {/* Welcome Message */}\n      {conversationMessages.length === 0 && !streamingMessage && !error && !isLoadingMessages && (\n        <WelcomeMessage onPromptClick={handleExamplePrompt} />\n      )}\n      \n      {/* Messages */}\n      {conversationMessages.length > 0 && (\n        <div className=\"space-y-0\">\n          {conversationMessages.map((message, index) => (\n            <Message\n              key={message.id}\n              message={message}\n              agent={currentAgent}\n              isLast={index === conversationMessages.length - 1}\n              onCitationClick={handleCitationClick}\n              onPreviewClick={handlePreviewClick}\n              onFeedback={(feedback) => handleMessageFeedback(message.id, feedback)}\n            />\n          ))}\n        </div>\n      )}\n      \n      {/* Streaming Message */}\n      {streamingMessage && (\n        <Message\n          message={streamingMessage}\n          agent={currentAgent}\n          isStreaming={true}\n          isLast={true}\n          onCitationClick={handleCitationClick}\n          onPreviewClick={handlePreviewClick}\n        />\n      )}\n      \n      {/* Typing Indicator */}\n      {isStreaming && !streamingMessage && (\n        <TypingIndicator />\n      )}\n      \n      {/* Citation Details Modal */}\n      {selectedCitationId && (\n        <CitationDetailsModal\n          isOpen={citationModalOpen}\n          onClose={() => {\n            setCitationModalOpen(false);\n            setSelectedCitationId(null);\n          }}\n          citationId={selectedCitationId}\n          projectId={currentAgent?.id}\n        />\n      )}\n      \n      {/* Citation File Preview Modal */}\n      {previewCitationId && (\n        <CitationFilePreview\n          isOpen={previewModalOpen}\n          onClose={() => {\n            setPreviewModalOpen(false);\n            setPreviewCitationId(null);\n          }}\n          citationId={previewCitationId}\n          fileName={`Citation_${previewCitationId}.txt`}\n        />\n      )}\n    </div>\n  );\n};\n\ninterface ChatHeaderProps {\n  /** Deployment mode affects header layout */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler for agent settings button */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Current conversation ID */\n  currentConversationId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback to create new conversation */\n  onCreateConversation?: () => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n}\n\n/**\n * ChatHeader Component\n * \n * Header bar for the chat interface. Layout changes based on deployment mode:\n * - Standalone: Full header with agent selector\n * - Widget/Floating: Compact header with close button\n * \n * Shows agent status (online/offline) and provides agent switching\n */\nconst ChatHeader: React.FC<ChatHeaderProps> = ({ \n  mode = 'standalone', \n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  conversationRefreshKey\n}) => {\n  const { currentAgent } = useAgentStore();\n  \n  if (mode === 'widget' || mode === 'floating') {\n    return (\n      <header className=\"border-b border-border bg-background\">\n        {/* Conversation Manager */}\n        {enableConversationManagement && sessionId && (\n          <div className=\"px-4 py-2 border-b border-border\">\n            <ConversationManager\n              sessionId={sessionId}\n              maxConversations={maxConversations}\n              currentConversationId={currentConversationId}\n              onConversationChange={onConversationChange}\n              onCreateConversation={onCreateConversation}\n              className=\"w-full\"\n              refreshKey={conversationRefreshKey}\n            />\n          </div>\n        )}\n        \n        {/* Header Content */}\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            <div className=\"w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0\">\n              <img \n                src=\"/logo.png\" \n                alt=\"CustomGPT.ai Logo\" \n                className=\"w-8 h-8 rounded-lg\"\n              />\n            </div>\n            <div className=\"min-w-0 flex-1\">\n              <h2 className=\"font-semibold text-foreground truncate\">\n                {currentAgent?.project_name || 'CustomGPT Assistant'}\n              </h2>\n              <p className=\"text-xs text-muted-foreground\">\n                {currentAgent?.is_chat_active ? 'Online' : 'Offline'}\n              </p>\n            </div>\n          </div>\n          \n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"p-1.5 rounded-lg hover:bg-accent hover:text-accent-foreground transition-colors flex-shrink-0\"\n            >\n              <span className=\"sr-only\">Close</span>\n              ×\n            </button>\n          )}\n        </div>\n      </header>\n    );\n  }\n  \n  // For standalone mode, show agent selector header\n  if (mode === 'standalone') {\n    return (\n      <header className=\"flex items-center justify-between px-4 py-3 border-b border-border bg-background\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-lg bg-brand-500 flex items-center justify-center\">\n            <Bot className=\"w-5 h-5 text-white\" />\n          </div>\n          <h1 className=\"text-lg font-semibold text-foreground\">\n            Agent Chat\n          </h1>\n        </div>\n        \n        <div className=\"flex-1 max-w-xs ml-4\">\n          <AgentSelector\n            onSettingsClick={onAgentSettings}\n            className=\"w-full\"\n          />\n        </div>\n      </header>\n    );\n  }\n  \n  return null;\n};\n\ninterface ChatContainerProps {\n  /** Deployment mode - affects layout and styling */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Additional CSS classes */\n  className?: string;\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler when agent settings are requested */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Specific conversation thread to load */\n  threadId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback when message is sent/received */\n  onMessage?: (message: any) => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n}\n\n/**\n * ChatContainer Component - Main Export\n * \n * The primary chat interface component. Can be deployed in three modes:\n * \n * 1. Standalone: Full-page chat interface\n *    - Use when chat is the main feature\n *    - No fixed dimensions, fills container\n * \n * 2. Widget: Embedded chat widget\n *    - Use for embedding in existing pages\n *    - Fixed dimensions with shadow\n * \n * 3. Floating: Floating chat bubble\n *    - Use for overlay chat interfaces\n *    - Fixed dimensions with stronger shadow\n * \n * @example\n * // Standalone mode\n * <ChatContainer mode=\"standalone\" />\n * \n * @example\n * // Widget mode with close handler\n * <ChatContainer \n *   mode=\"widget\" \n *   onClose={() => setShowChat(false)}\n * />\n */\nexport const ChatContainer: React.FC<ChatContainerProps> = ({ \n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  conversationRefreshKey\n}) => {\n  const { sendMessage, isStreaming, cancelStreaming } = useMessageStore();\n  const { fetchAgents, agents, currentAgent } = useAgentStore();\n  const { currentConversation } = useConversationStore();\n  \n  // Get widget instance from context\n  const widget = useWidgetSafe();\n  \n  // Track current conversation for the widget\n  const [currentConversationId, setCurrentConversationId] = React.useState<string | null>(null);\n  \n  // Voice modal state\n  const [isVoiceModalOpen, setIsVoiceModalOpen] = React.useState(false);\n  \n  // Handle conversation management\n  const handleConversationChange = (conversation: any) => {\n    setCurrentConversationId(conversation.id);\n    onConversationChange?.(conversation);\n    // The widget will handle the actual conversation switch\n    if (widget) {\n      widget.switchConversation(conversation.id);\n    }\n  };\n  \n  const handleCreateConversation = () => {\n    if (widget) {\n      const newConv = widget.createConversation();\n      if (newConv) {\n        setCurrentConversationId(newConv.id);\n      } else {\n        // Show user-friendly message when conversation limit is reached\n        const maxConversations = widget.configuration?.maxConversations || 5;\n        toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n      }\n    }\n  };\n\n  /**\n   * Agent initialization effect\n   * Fetches available agents when the component first mounts\n   * Only runs if agents haven't been loaded yet\n   */\n  useEffect(() => {\n    const initializeAgents = async () => {\n      // Only fetch if we don't have agents and no current agent\n      if (agents.length === 0 && !currentAgent) {\n        logger.info('UI', 'Initializing agents on ChatContainer mount');\n        try {\n          await fetchAgents();\n          logger.info('UI', 'Agents initialized successfully', {\n            agentCount: agents.length\n          });\n        } catch (error) {\n          logger.error('UI', 'Failed to initialize agents', error, {\n            errorMessage: error instanceof Error ? error.message : String(error)\n          });\n          console.error('Failed to initialize agents:', error);\n        }\n      } else {\n        logger.info('UI', 'Agents already initialized', {\n          agentCount: agents.length,\n          hasCurrentAgent: !!currentAgent,\n          currentAgentName: currentAgent?.project_name\n        });\n      }\n    };\n\n    initializeAgents();\n  }, []); // Empty dependency array to run only once on mount\n  \n  const handleSendMessage = async (content: string, files?: File[]) => {\n    logger.info('UI', 'Sending message from ChatContainer', {\n      contentLength: content.length,\n      hasFiles: files && files.length > 0,\n      fileCount: files?.length || 0,\n      currentAgent: currentAgent?.project_name,\n      agentId: currentAgent?.id\n    });\n    \n    try {\n      await sendMessage(content, files);\n      logger.info('UI', 'Message sent successfully');\n    } catch (error) {\n      logger.error('UI', 'Failed to send message from ChatContainer', error, {\n        errorMessage: error instanceof Error ? error.message : String(error),\n        isAuthError: error instanceof Error && (error.message.includes('403') || error.message.includes('unauthorized'))\n      });\n      console.error('Failed to send message:', error);\n    }\n  };\n  \n  const handleStopGeneration = () => {\n    logger.info('UI', 'User cancelled streaming generation');\n    cancelStreaming();\n  };\n  \n  const handleAgentSettings = (agent: Agent) => {\n    logger.info('UI', 'Agent settings requested', {\n      agentId: agent.id,\n      agentName: agent.project_name\n    });\n    onAgentSettings?.(agent);\n  };\n  \n  return (\n    <div\n      className={cn(\n        'flex flex-col bg-background',\n        mode === 'standalone' && 'h-full',\n        mode === 'widget' && 'h-[600px] w-[400px] rounded-lg shadow-xl border border-border',\n        mode === 'floating' && 'h-[600px] w-[400px] rounded-lg shadow-2xl border border-border',\n        className\n      )}\n    >\n      <ChatHeader \n        mode={mode} \n        onClose={onClose}\n        onAgentSettings={handleAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        currentConversationId={currentConversationId || currentConversation?.id.toString()}\n        onConversationChange={handleConversationChange}\n        onCreateConversation={handleCreateConversation}\n        conversationRefreshKey={conversationRefreshKey}\n      />\n      <MessageArea className=\"flex-1\" />\n      <ChatInput\n        onSend={handleSendMessage}\n        disabled={isStreaming}\n        placeholder={isStreaming ? \"AI is thinking...\" : \"Send a message...\"}\n        onVoiceClick={() => setIsVoiceModalOpen(true)}\n      />\n      \n      {/* Branding Footer */}\n      {(mode === 'widget' || mode === 'floating') && (\n        <div className=\"px-4 py-2 border-t border-border bg-muted\">\n          <a\n            href=\"https://customgpt.ai\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"text-xs text-muted-foreground hover:text-foreground transition-colors block text-center\"\n          >\n            Powered by CustomGPT.ai\n          </a>\n        </div>\n      )}\n      \n      {/* Voice Modal */}\n      {currentAgent && (\n        <VoiceModal\n          isOpen={isVoiceModalOpen}\n          onClose={() => setIsVoiceModalOpen(false)}\n          projectId={currentAgent.id.toString()}\n          projectName={currentAgent.project_name}\n        />\n      )}\n    </div>\n  );\n};","import React from 'react';\nimport { X, Calendar, User, Hash, Clock, AlertCircle, Copy, Download, Share2 } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { toast } from 'sonner';\nimport type { Conversation } from '@/types';\nimport { Button } from '@/components/ui/button';\nimport { formatTimestamp } from '@/lib/utils';\n\ninterface ConversationDetailsModalProps {\n  conversation: Conversation | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onExport?: (conversation: Conversation) => void;\n  onShare?: (conversation: Conversation) => void;\n}\n\nexport const ConversationDetailsModal: React.FC<ConversationDetailsModalProps> = ({\n  conversation,\n  isOpen,\n  onClose,\n  onExport,\n  onShare,\n}) => {\n  if (!isOpen || !conversation) return null;\n\n  const copyToClipboard = (text: string, label: string) => {\n    navigator.clipboard.writeText(text);\n    toast.success(`${label} copied to clipboard`);\n  };\n\n  const formatFullTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'short'\n    });\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black bg-opacity-50 z-50\"\n            onClick={onClose}\n          />\n\n          {/* Modal */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.95 }}\n            className=\"fixed inset-x-0 top-[10%] mx-auto max-w-2xl bg-white rounded-lg shadow-xl z-50 max-h-[80vh] overflow-hidden\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            {/* Header */}\n            <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Conversation Details</h2>\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={onClose}\n                className=\"h-8 w-8\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            {/* Content */}\n            <div className=\"p-6 space-y-6 overflow-y-auto max-h-[calc(80vh-200px)]\">\n              {/* Basic Information */}\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-500 uppercase tracking-wider mb-3\">\n                  Basic Information\n                </h3>\n                <div className=\"bg-gray-50 rounded-lg p-4 space-y-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-sm font-medium text-gray-700\">Conversation Name</span>\n                    </div>\n                    <span className=\"text-sm text-gray-900 font-medium\">{conversation.name}</span>\n                  </div>\n\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-sm font-medium text-gray-700\">Conversation ID</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-sm text-gray-900 font-mono\">{conversation.id}</span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"h-6 w-6\"\n                        onClick={() => copyToClipboard(conversation.id.toString(), 'Conversation ID')}\n                      >\n                        <Copy className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-sm font-medium text-gray-700\">Session ID</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-sm text-gray-900 font-mono truncate max-w-[300px]\" title={conversation.session_id}>\n                        {conversation.session_id}\n                      </span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"h-6 w-6\"\n                        onClick={() => copyToClipboard(conversation.session_id, 'Session ID')}\n                      >\n                        <Copy className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-sm font-medium text-gray-700\">Project ID</span>\n                    </div>\n                    <span className=\"text-sm text-gray-900\">{conversation.project_id}</span>\n                  </div>\n\n                  {conversation.message_count !== undefined && (\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <Hash className=\"h-4 w-4 text-gray-400\" />\n                        <span className=\"text-sm font-medium text-gray-700\">Message Count</span>\n                      </div>\n                      <span className=\"text-sm text-gray-900\">{conversation.message_count} messages</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Timestamps */}\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-500 uppercase tracking-wider mb-3\">\n                  Timeline\n                </h3>\n                <div className=\"bg-gray-50 rounded-lg p-4 space-y-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-sm font-medium text-gray-700\">Created At</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <span className=\"text-sm text-gray-900 block\">{formatFullTimestamp(conversation.created_at)}</span>\n                      <span className=\"text-xs text-gray-500\">({formatTimestamp(conversation.created_at)})</span>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-sm font-medium text-gray-700\">Last Updated</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <span className=\"text-sm text-gray-900 block\">{formatFullTimestamp(conversation.updated_at)}</span>\n                      <span className=\"text-xs text-gray-500\">({formatTimestamp(conversation.updated_at)})</span>\n                    </div>\n                  </div>\n\n                  {conversation.deleted_at && (\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <AlertCircle className=\"h-4 w-4 text-red-400\" />\n                        <span className=\"text-sm font-medium text-red-700\">Deleted At</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <span className=\"text-sm text-red-900 block\">{formatFullTimestamp(conversation.deleted_at)}</span>\n                        <span className=\"text-xs text-red-500\">({formatTimestamp(conversation.deleted_at)})</span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* User Information */}\n              {conversation.created_by && (\n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-500 uppercase tracking-wider mb-3\">\n                    User Information\n                  </h3>\n                  <div className=\"bg-gray-50 rounded-lg p-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4 text-gray-400\" />\n                        <span className=\"text-sm font-medium text-gray-700\">Created By</span>\n                      </div>\n                      <span className=\"text-sm text-gray-900\">User ID: {conversation.created_by}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Actions */}\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-500 uppercase tracking-wider mb-3\">\n                  Actions\n                </h3>\n                <div className=\"flex gap-3\">\n                  {onExport && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => onExport(conversation)}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Download className=\"h-4 w-4\" />\n                      Export Conversation\n                    </Button>\n                  )}\n                  {onShare && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => onShare(conversation)}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Share2 className=\"h-4 w-4\" />\n                      Share Conversation\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Footer */}\n            <div className=\"p-6 border-t border-gray-200 bg-gray-50\">\n              <div className=\"flex justify-end\">\n                <Button onClick={onClose}>\n                  Close\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};","import React, { useState } from 'react';\nimport { AlertTriangle, Trash2, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface DeleteConversationDialogProps {\n  isOpen: boolean;\n  conversationName: string;\n  messageCount?: number;\n  onConfirm: () => Promise<void>;\n  onCancel: () => void;\n}\n\nexport const DeleteConversationDialog: React.FC<DeleteConversationDialogProps> = ({\n  isOpen,\n  conversationName,\n  messageCount,\n  onConfirm,\n  onCancel,\n}) => {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleConfirm = async () => {\n    setIsDeleting(true);\n    setError(null);\n    \n    try {\n      await onConfirm();\n    } catch (err: any) {\n      console.error('Delete failed:', err);\n      \n      // Parse error message based on status code\n      let errorMessage = 'Failed to delete conversation';\n      \n      if (err.status === 400) {\n        errorMessage = 'Invalid request. Please try again.';\n      } else if (err.status === 401) {\n        errorMessage = 'Authentication failed. Please refresh the page and try again.';\n      } else if (err.status === 404) {\n        errorMessage = 'Conversation not found. It may have already been deleted.';\n      } else if (err.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      setIsDeleting(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black bg-opacity-50 z-50\"\n            onClick={!isDeleting ? onCancel : undefined}\n          />\n\n          {/* Dialog */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.95 }}\n            className=\"fixed left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-full max-w-md bg-white rounded-lg shadow-xl z-50\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"p-6\">\n              {/* Header */}\n              <div className=\"flex items-start gap-4\">\n                <div className=\"p-3 bg-red-100 rounded-full\">\n                  <AlertTriangle className=\"w-6 h-6 text-red-600\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">\n                    Delete Conversation\n                  </h3>\n                  <p className=\"mt-2 text-sm text-gray-600\">\n                    Are you sure you want to delete <strong>\"{conversationName}\"</strong>?\n                  </p>\n                  \n                  {messageCount !== undefined && messageCount > 0 && (\n                    <p className=\"mt-2 text-sm text-gray-500\">\n                      This conversation contains {messageCount} message{messageCount !== 1 ? 's' : ''}.\n                    </p>\n                  )}\n                  \n                  <div className=\"mt-3 p-3 bg-red-50 rounded-lg\">\n                    <p className=\"text-sm text-red-800 font-medium\">\n                      ⚠️ This action cannot be undone\n                    </p>\n                    <p className=\"text-xs text-red-700 mt-1\">\n                      All messages and data associated with this conversation will be permanently deleted.\n                    </p>\n                  </div>\n\n                  {/* Error Display */}\n                  {error && (\n                    <div className=\"mt-3 p-3 bg-red-100 border border-red-200 rounded-lg\">\n                      <p className=\"text-sm text-red-900 font-medium\">\n                        Error: {error}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"mt-6 flex items-center gap-3 justify-end\">\n                <Button\n                  variant=\"outline\"\n                  onClick={onCancel}\n                  disabled={isDeleting}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleConfirm}\n                  disabled={isDeleting}\n                  className=\"min-w-[100px]\"\n                >\n                  {isDeleting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                      Deleting...\n                    </>\n                  ) : (\n                    <>\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Delete\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};","/**\n * Conversation Sidebar Component\n * \n * Manages the conversation list and provides quick navigation\n * between different chat sessions. Includes conversation management\n * features like create, rename, and delete.\n * \n * Features:\n * - Conversation list with search/filter\n * - Create new conversation\n * - Rename conversations inline\n * - Delete conversations with confirmation\n * - Agent management access\n * - Data source management\n * - Analytics dashboard access\n * - Collapsible sidebar\n * \n * State Management:\n * - Conversations from conversationStore\n * - Current conversation selection\n * - Search/filter state (local)\n * - Collapse state (passed from parent)\n * \n * UI/UX Features:\n * - Hover states and animations\n * - Keyboard shortcuts (future enhancement)\n * - Context menu for conversation actions\n * - Auto-scroll to selected conversation\n * - Responsive design for mobile\n * \n * Features:\n * - Advanced conversation organization with categories and search\n * - Bulk conversation management with export/import capabilities\n * - Customizable sidebar design with responsive layout\n * - Professional conversation management with templates and pinning\n * - Comprehensive conversation history and analytics\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport Link from 'next/link';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  MessageSquare, \n  Plus, \n  MoreHorizontal, \n  Trash2, \n  Edit3, \n  Calendar,\n  Search,\n  X,\n  Bot,\n  Filter,\n  ChevronDown,\n  ChevronUp,\n  Info,\n  Download,\n  Share2,\n  Clock,\n  User\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Conversation } from '@/types';\nimport { useConversationStore, useAgentStore, useMessageStore } from '@/hooks/useWidgetStore';\nimport { cn, formatTimestamp, generateConversationName } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { logger } from '@/lib/logger';\nimport { ConversationDetailsModal } from './ConversationDetailsModal';\nimport { DeleteConversationDialog } from './DeleteConversationDialog';\nimport { ConversationSkeleton, Spinner } from '@/components/ui/loading';\n\n/**\n * Props for individual conversation item\n * \n * @property conversation - Conversation data object\n * @property isSelected - Whether this conversation is currently active\n * @property onSelect - Callback when conversation is clicked\n * @property onDelete - Callback for deleting conversation\n * @property onRename - Callback for renaming conversation\n */\ninterface ConversationItemProps {\n  conversation: Conversation;\n  isSelected: boolean;\n  onSelect: (conversation: Conversation) => void;\n  onDelete: (conversationId: string) => void;\n  onRename: (conversationId: string, newName: string) => void;\n}\n\n/**\n * Individual Conversation Item Component\n * \n * Renders a single conversation in the sidebar with actions.\n * Features inline editing and context menu for management.\n */\nconst ConversationItem: React.FC<ConversationItemProps> = ({\n  conversation,\n  isSelected,\n  onSelect,\n  onDelete,\n  onRename\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editName, setEditName] = useState(conversation.name);\n  const [showMenu, setShowMenu] = useState(false);\n  const [showDetails, setShowDetails] = useState(false);\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  // Close menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setShowMenu(false);\n      }\n    };\n\n    if (showMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [showMenu]);\n\n  // Focus input when editing starts\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n      inputRef.current.select();\n    }\n  }, [isEditing]);\n\n  const handleEdit = () => {\n    setIsEditing(true);\n    setShowMenu(false);\n  };\n\n  const handleSaveEdit = () => {\n    if (editName.trim() && editName.trim() !== conversation.name) {\n      onRename(conversation.id.toString(), editName.trim());\n    }\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSaveEdit();\n    } else if (e.key === 'Escape') {\n      handleCancelEdit();\n    }\n  };\n\n  const handleDelete = () => {\n    setShowDeleteDialog(true);\n    setShowMenu(false);\n  };\n\n  const handleConfirmDelete = async () => {\n    await onDelete(conversation.id.toString());\n    setShowDeleteDialog(false);\n  };\n\n  return (\n    <div\n      className={cn(\n        'group relative p-3 rounded-lg cursor-pointer transition-colors',\n        'hover:bg-accent',\n        isSelected && 'bg-accent/50 hover:bg-accent/70'\n      )}\n      onClick={async () => {\n        if (isEditing || isLoading) return;\n        setIsLoading(true);\n        try {\n          await onSelect(conversation);\n        } finally {\n          setIsLoading(false);\n        }\n      }}\n    >\n      {/* Loading overlay for individual conversation */}\n      {isLoading && (\n        <div className=\"absolute inset-0 bg-background/70 backdrop-blur-sm rounded-lg flex items-center justify-center z-10\">\n          <Spinner size=\"sm\" />\n        </div>\n      )}\n      \n      <div className=\"flex items-start justify-between gap-2\">\n        <div className=\"flex-1 min-w-0\">\n          {isEditing ? (\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={editName}\n              onChange={(e) => setEditName(e.target.value)}\n              onBlur={handleSaveEdit}\n              onKeyDown={handleKeyDown}\n              className=\"w-full px-2 py-1 text-sm font-medium text-foreground bg-background border border-input rounded focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent\"\n              maxLength={100}\n            />\n          ) : (\n            <h3 className=\"font-medium text-foreground text-sm truncate\">\n              {conversation.name}\n            </h3>\n          )}\n          \n          <div className=\"flex items-center gap-2 mt-1 text-xs text-muted-foreground\">\n            <Clock className=\"w-3 h-3\" />\n            <span title={new Date(conversation.updated_at).toLocaleString()}>\n              {formatTimestamp(conversation.updated_at)}\n            </span>\n            {conversation.message_count !== undefined && (\n              <>\n                <span>•</span>\n                <MessageSquare className=\"w-3 h-3\" />\n                <span>{conversation.message_count}</span>\n              </>\n            )}\n          </div>\n          \n          {/* More Details Button */}\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              setShowDetails(!showDetails);\n            }}\n            className=\"flex items-center gap-1 mt-2 text-xs text-muted-foreground hover:text-foreground transition-colors\"\n          >\n            {showDetails ? (\n              <>\n                <ChevronUp className=\"w-3 h-3\" />\n                Hide Details\n              </>\n            ) : (\n              <>\n                <ChevronDown className=\"w-3 h-3\" />\n                More Details\n              </>\n            )}\n          </button>\n          \n          {/* Expandable Details Section */}\n          <AnimatePresence>\n            {showDetails && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                exit={{ opacity: 0, height: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"mt-2 pt-2 border-t border-border\"\n              >\n                <div className=\"space-y-1 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Session ID:</span>\n                    <span className=\"font-mono text-foreground truncate max-w-[150px]\" title={conversation.session_id}>\n                      {conversation.session_id}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Created:</span>\n                    <span className=\"text-foreground\">{formatTimestamp(conversation.created_at)}</span>\n                  </div>\n                  {conversation.deleted_at && (\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-destructive\">Deleted:</span>\n                      <span className=\"text-destructive\">{formatTimestamp(conversation.deleted_at)}</span>\n                    </div>\n                  )}\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Menu Button */}\n        {!isEditing && (\n          <div className=\"relative\" ref={menuRef}>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setShowMenu(!showMenu);\n              }}\n              className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-muted-foreground hover:text-foreground\"\n            >\n              <MoreHorizontal className=\"h-3 w-3\" />\n            </Button>\n\n            {/* Dropdown Menu */}\n            <AnimatePresence>\n              {showMenu && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.95, y: -5 }}\n                  animate={{ opacity: 1, scale: 1, y: 0 }}\n                  exit={{ opacity: 0, scale: 0.95, y: -5 }}\n                  transition={{ duration: 0.1 }}\n                  className=\"absolute right-0 top-6 mt-1 w-40 bg-background border border-border rounded-lg shadow-lg z-50\"\n                >\n                  <div className=\"py-1\">\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setShowDetailsModal(true);\n                        setShowMenu(false);\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-foreground hover:bg-accent\"\n                    >\n                      <Info className=\"w-3 h-3\" />\n                      View Details\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEdit();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-foreground hover:bg-accent\"\n                    >\n                      <Edit3 className=\"w-3 h-3\" />\n                      Rename\n                    </button>\n                    <div className=\"border-t border-border my-1\" />\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDelete();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-destructive hover:bg-destructive/10\"\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                      Delete\n                    </button>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        )}\n      </div>\n\n      {/* Conversation Details Modal */}\n      <ConversationDetailsModal\n        conversation={conversation}\n        isOpen={showDetailsModal}\n        onClose={() => setShowDetailsModal(false)}\n        onExport={(conv) => {\n          // Export functionality\n          const data = JSON.stringify(conv, null, 2);\n          const blob = new Blob([data], { type: 'application/json' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `conversation-${conv.id}-${new Date().toISOString().split('T')[0]}.json`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          URL.revokeObjectURL(url);\n          toast.success('Conversation exported successfully');\n        }}\n        onShare={(conv) => {\n          // Share functionality\n          const shareUrl = `${window.location.origin}/chat/${conv.session_id}`;\n          navigator.clipboard.writeText(shareUrl);\n          toast.success('Share link copied to clipboard');\n        }}\n      />\n\n      {/* Delete Conversation Dialog */}\n      <DeleteConversationDialog\n        isOpen={showDeleteDialog}\n        conversationName={conversation.name}\n        messageCount={conversation.message_count}\n        onConfirm={handleConfirmDelete}\n        onCancel={() => setShowDeleteDialog(false)}\n      />\n    </div>\n  );\n};\n\ninterface ConversationSidebarProps {\n  className?: string;\n  isCollapsed?: boolean;\n  onToggle?: () => void;\n}\n\nexport const ConversationSidebar: React.FC<ConversationSidebarProps> = ({\n  className,\n  isCollapsed = false,\n  onToggle\n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isCreating, setIsCreating] = useState(false);\n  const [showSortFilter, setShowSortFilter] = useState(false);\n  const [searchMode, setSearchMode] = useState<'name' | 'id' | 'session'>('name');\n  const [dateFilter, setDateFilter] = useState<'all' | 'today' | 'week' | 'month'>('all');\n  \n  const { \n    conversations, \n    currentConversation, \n    loading, \n    error,\n    fetchConversations,\n    createConversation,\n    selectConversation,\n    deleteConversation,\n    updateConversation,\n    // Pagination state\n    currentPage,\n    totalPages,\n    totalConversations,\n    perPage,\n    // Sorting and filtering state\n    sortOrder,\n    sortBy,\n    userFilter\n  } = useConversationStore();\n  \n  const { currentAgent } = useAgentStore();\n  const { clearMessages, loadMessages } = useMessageStore();\n\n  // Fetch conversations when agent changes\n  useEffect(() => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (currentAgent && !isDemoMode) {\n      logger.info('UI', 'Agent changed in sidebar, fetching conversations', {\n        agentId: currentAgent.id,\n        agentName: currentAgent.project_name,\n        isActive: currentAgent.is_chat_active\n      });\n      fetchConversations(currentAgent.id);\n    } else if (!currentAgent) {\n      logger.warn('UI', 'No current agent selected in sidebar');\n    } else if (isDemoMode) {\n      logger.info('UI', 'Skipping conversation fetch in demo mode');\n    }\n  }, [currentAgent, fetchConversations]);\n\n  // Filter conversations based on search query and advanced filters\n  \n  const filteredConversations = Array.isArray(conversations) \n    ? conversations.filter(conversation => {\n        // Search filter\n        if (searchQuery) {\n          const query = searchQuery.toLowerCase();\n          switch (searchMode) {\n            case 'name':\n              if (!conversation.name.toLowerCase().includes(query)) return false;\n              break;\n            case 'id':\n              if (!conversation.id.toString().includes(query)) return false;\n              break;\n            case 'session':\n              if (!conversation.session_id.toLowerCase().includes(query)) return false;\n              break;\n          }\n        }\n        \n        // Date filter\n        if (dateFilter !== 'all') {\n          const convDate = new Date(conversation.updated_at);\n          const now = new Date();\n          const diffDays = Math.floor((now.getTime() - convDate.getTime()) / (1000 * 60 * 60 * 24));\n          \n          switch (dateFilter) {\n            case 'today':\n              if (diffDays > 0) return false;\n              break;\n            case 'week':\n              if (diffDays > 7) return false;\n              break;\n            case 'month':\n              if (diffDays > 30) return false;\n              break;\n          }\n        }\n        \n        return true;\n      })\n    : [];\n\n  const handleNewConversation = async () => {\n    if (!currentAgent || isCreating) return;\n    \n    logger.info('UI', 'Creating new conversation', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n    \n    setIsCreating(true);\n    try {\n      const name = `New Chat ${new Date().toLocaleDateString()}`;\n      await createConversation(currentAgent.id, name);\n      clearMessages(); // Clear current messages when starting new conversation\n      logger.info('UI', 'New conversation created successfully', { name });\n      toast.success('New conversation created');\n    } catch (error) {\n      logger.error('UI', 'Failed to create conversation', error, {\n        agentId: currentAgent.id,\n        errorMessage: error instanceof Error ? error.message : String(error)\n      });\n      toast.error('Failed to create new conversation');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const handleSelectConversation = async (conversation: Conversation) => {\n    // Prevent multiple clicks while switching\n    if (loading) return;\n    \n    logger.info('UI', 'Selecting conversation', {\n      conversationId: conversation.id,\n      conversationName: conversation.name,\n      projectId: conversation.project_id,\n      messageCount: conversation.message_count\n    });\n    \n    selectConversation(conversation);\n    \n    // Load messages for the selected conversation\n    try {\n      logger.info('UI', 'Loading messages for selected conversation', {\n        conversationId: conversation.id,\n        agentId: currentAgent?.id,\n        agentName: currentAgent?.project_name\n      });\n      \n      await loadMessages(conversation.id.toString());\n      \n      logger.info('UI', 'Messages loaded successfully for conversation', {\n        conversationId: conversation.id\n      });\n    } catch (error) {\n      logger.error('UI', 'Failed to load messages for conversation', error, {\n        conversationId: conversation.id,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        errorType: error instanceof Error ? error.constructor.name : typeof error\n      });\n      toast.error('Failed to load conversation messages');\n    }\n  };\n\n  const handleDeleteConversation = async (conversationId: string) => {\n    try {\n      await deleteConversation(conversationId);\n      toast.success('Conversation deleted');\n    } catch (error) {\n      toast.error('Failed to delete conversation');\n    }\n  };\n\n  const handleRenameConversation = async (conversationId: string, newName: string) => {\n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) return;\n    \n    try {\n      await updateConversation(conversation.project_id, conversation.session_id, { name: newName });\n      toast.success('Conversation renamed');\n    } catch (error) {\n      toast.error('Failed to rename conversation');\n    }\n  };\n\n  if (isCollapsed) {\n    return (\n      <div className={cn('w-12 bg-muted border-r border-border flex flex-col', className)}>\n        <div className=\"p-2\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggle}\n            className=\"w-8 h-8\"\n            title=\"Expand sidebar\"\n          >\n            <MessageSquare className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('w-80 bg-muted border-r border-border flex flex-col', className)}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-border bg-background\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h2 className=\"font-semibold text-foreground\">Conversations</h2>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggle}\n            className=\"h-8 w-8\"\n            title=\"Collapse sidebar\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        {/* Search */}\n        <div className=\"space-y-2\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <input\n              type=\"text\"\n              placeholder={`Search by ${searchMode}...`}\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full pl-9 pr-3 py-2 text-sm border border-input bg-background text-foreground rounded-lg focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent placeholder:text-muted-foreground\"\n            />\n          </div>\n          \n          {/* Search Mode Selector */}\n          <div className=\"flex gap-1\">\n            <button\n              onClick={() => setSearchMode('name')}\n              className={cn(\n                \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                searchMode === 'name' \n                  ? \"bg-brand-500 text-white\" \n                  : \"bg-muted text-muted-foreground hover:bg-accent\"\n              )}\n            >\n              Name\n            </button>\n            <button\n              onClick={() => setSearchMode('id')}\n              className={cn(\n                \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                searchMode === 'id' \n                  ? \"bg-brand-500 text-white\" \n                  : \"bg-muted text-muted-foreground hover:bg-accent\"\n              )}\n            >\n              ID\n            </button>\n            <button\n              onClick={() => setSearchMode('session')}\n              className={cn(\n                \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                searchMode === 'session' \n                  ? \"bg-brand-500 text-white\" \n                  : \"bg-muted text-muted-foreground hover:bg-accent\"\n              )}\n            >\n              Session\n            </button>\n          </div>\n        </div>\n        \n        {/* Sort and Filter Toggle */}\n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          onClick={() => setShowSortFilter(!showSortFilter)}\n          className=\"w-full mt-2 justify-center gap-2\"\n        >\n          <Filter className=\"h-3 w-3\" />\n          Sort & Filter\n          {showSortFilter ? <ChevronUp className=\"h-3 w-3\" /> : <ChevronDown className=\"h-3 w-3\" />}\n        </Button>\n        \n        {/* Sort and Filter Options */}\n        <AnimatePresence>\n          {showSortFilter && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"space-y-3 mt-3 overflow-hidden\"\n            >\n              {/* Sort Options */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Sort By</label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <select\n                    value={sortBy}\n                    onChange={(e) => {\n                      if (currentAgent) {\n                        fetchConversations(currentAgent.id, { \n                          page: 1, \n                          orderBy: e.target.value \n                        });\n                      }\n                    }}\n                    className=\"px-2 py-1 text-xs border border-input bg-background text-foreground rounded focus:outline-none focus:ring-2 focus:ring-ring\"\n                  >\n                    <option value=\"id\">Date Created</option>\n                    <option value=\"updated_at\">Last Updated</option>\n                    <option value=\"name\">Name</option>\n                  </select>\n                  \n                  <select\n                    value={sortOrder}\n                    onChange={(e) => {\n                      if (currentAgent) {\n                        fetchConversations(currentAgent.id, { \n                          page: 1, \n                          order: e.target.value as 'asc' | 'desc' \n                        });\n                      }\n                    }}\n                    className=\"px-2 py-1 text-xs border border-input bg-background text-foreground rounded focus:outline-none focus:ring-2 focus:ring-ring\"\n                  >\n                    <option value=\"desc\">Newest First</option>\n                    <option value=\"asc\">Oldest First</option>\n                  </select>\n                </div>\n              </div>\n              \n              {/* Date Filter */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Filter By Date</label>\n                <select\n                  value={dateFilter}\n                  onChange={(e) => setDateFilter(e.target.value as 'all' | 'today' | 'week' | 'month')}\n                  className=\"w-full px-2 py-1 text-xs border border-input bg-background text-foreground rounded focus:outline-none focus:ring-2 focus:ring-ring\"\n                >\n                  <option value=\"all\">All Time</option>\n                  <option value=\"today\">Today</option>\n                  <option value=\"week\">Last 7 Days</option>\n                  <option value=\"month\">Last 30 Days</option>\n                </select>\n              </div>\n              \n              {/* User Filter */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Filter By User</label>\n                <select\n                  value={userFilter}\n                  onChange={(e) => {\n                    if (currentAgent) {\n                      fetchConversations(currentAgent.id, { \n                        page: 1, \n                        userFilter: e.target.value \n                      });\n                    }\n                  }}\n                  className=\"w-full px-2 py-1 text-xs border border-input bg-background text-foreground rounded focus:outline-none focus:ring-2 focus:ring-ring\"\n                >\n                  <option value=\"all\">All Users</option>\n                  {/* Additional user options could be dynamically loaded */}\n                </select>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"p-4 space-y-2\">\n        <Link href=\"/dashboard/projects/create\">\n          <Button\n            className=\"w-full justify-start gap-2\"\n            variant=\"default\"\n          >\n            <Bot className=\"w-4 h-4\" />\n            Create New Agent\n          </Button>\n        </Link>\n        \n        <Button\n          onClick={handleNewConversation}\n          disabled={!currentAgent || isCreating}\n          className=\"w-full justify-start gap-2\"\n          variant=\"outline\"\n        >\n          {isCreating ? (\n            <>\n              <Spinner size=\"sm\" />\n              <span>Creating...</span>\n            </>\n          ) : (\n            <>\n              <Plus className=\"w-4 h-4\" />\n              <span>New Chat</span>\n            </>\n          )}\n        </Button>\n      </div>\n\n      {/* Conversations List */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {loading && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <ConversationSkeleton count={5} />\n        ) : error && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <div className=\"p-4 text-center\">\n            <p className=\"text-sm text-destructive mb-2\">Failed to load conversations</p>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => currentAgent && fetchConversations(currentAgent.id)}\n            >\n              Try Again\n            </Button>\n          </div>\n        ) : filteredConversations.length === 0 ? (\n          <div className=\"p-4 text-center\">\n            <MessageSquare className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">\n              {searchQuery ? 'No conversations found' : 'No conversations yet'}\n            </p>\n            {!searchQuery && (\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Start a new conversation to get going\n              </p>\n            )}\n            {currentAgent && (\n              <div className=\"text-xs text-muted-foreground mt-2 space-y-1\">\n                <p>Agent: {currentAgent.project_name} (ID: {currentAgent.id})</p>\n                {error && (\n                  <p className=\"text-destructive\">Error: {error}</p>\n                )}\n                <p>Conversations loaded: {conversations.length}</p>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"p-2 space-y-1\">\n            {filteredConversations.map((conversation) => (\n              <ConversationItem\n                key={conversation.id}\n                conversation={conversation}\n                isSelected={currentConversation?.id === conversation.id}\n                onSelect={handleSelectConversation}\n                onDelete={(id) => handleDeleteConversation(id)}\n                onRename={handleRenameConversation}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Footer with Pagination */}\n      <div className=\"p-4 border-t border-border bg-background space-y-3\">\n        <div className=\"text-xs text-muted-foreground text-center\">\n          {searchQuery ? (\n            <>\n              {filteredConversations.length} result{filteredConversations.length !== 1 ? 's' : ''}\n            </>\n          ) : (\n            <>\n              Showing {conversations.length} of {totalConversations} conversation{totalConversations !== 1 ? 's' : ''}\n            </>\n          )}\n          {currentAgent && (\n            <span className=\"block mt-1\">\n              Agent: {currentAgent.project_name}\n            </span>\n          )}\n        </div>\n        \n        {/* Pagination Controls */}\n        {totalPages > 1 && !searchQuery && (\n          <div className=\"flex items-center justify-between gap-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                if (currentAgent && currentPage > 1) {\n                  fetchConversations(currentAgent.id, { page: currentPage - 1 });\n                }\n              }}\n              disabled={currentPage === 1 || loading}\n            >\n              <ChevronDown className=\"h-3 w-3 rotate-90\" />\n            </Button>\n            \n            <span className=\"text-xs text-muted-foreground\">\n              Page {currentPage} of {totalPages}\n            </span>\n            \n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                if (currentAgent && currentPage < totalPages) {\n                  fetchConversations(currentAgent.id, { page: currentPage + 1 });\n                }\n              }}\n              disabled={currentPage === totalPages || loading}\n            >\n              <ChevronDown className=\"h-3 w-3 -rotate-90\" />\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};","/**\n * Chat Layout Component\n * \n * Top-level layout component that orchestrates the chat interface.\n * Handles different deployment modes and manages the conversation sidebar.\n * \n * Deployment Modes:\n * - standalone: Full chat with sidebar (default for main app)\n * - widget: Embeddable chat without sidebar\n * - floating: Popup-style chat without sidebar\n * \n * Features:\n * - Responsive sidebar with collapse/expand\n * - Automatic message loading on conversation change\n * - Mode-specific rendering logic\n * - Clean separation of concerns\n * \n * Architecture:\n * - ChatLayout (this) - Layout orchestration\n *   - ConversationSidebar - Conversation list and management\n *   - ChatContainer - Main chat interface\n *     - Message - Individual messages\n *     - ChatInput - Message input area\n * \n * State Management:\n * - currentConversation from conversationStore\n * - loadMessages from messageStore\n * - Local state for sidebar collapse\n * \n * Features:\n * - Multiple deployment modes with flexible configuration\n * - Professional sidebar with persistent state and responsive design\n * - Full keyboard navigation and accessibility support\n * - Mobile-optimized interface with adaptive layout\n * - Customizable sidebar positioning and behavior options\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport type { Agent } from '@/types';\nimport { ChatContainer } from './ChatContainer';\nimport { ConversationSidebar } from './ConversationSidebar';\nimport { useConversationStore, useMessageStore } from '@/hooks/useWidgetStore';\n\n/**\n * Props for ChatLayout component\n * \n * @property mode - Deployment mode: standalone (with sidebar), widget, or floating\n * @property className - Additional CSS classes for styling\n * @property onClose - Callback for closing chat (widget/floating modes)\n * @property onAgentSettings - Callback for opening agent settings\n * @property showSidebar - Whether to show sidebar (only applies to standalone mode)\n * @property enableConversationManagement - Enable conversation switching UI\n * @property maxConversations - Maximum conversations per session\n * @property sessionId - Session ID for conversation isolation\n * @property threadId - Specific conversation thread to load\n * @property onConversationChange - Callback when conversation changes\n * @property onMessage - Callback when message is sent/received\n */\ninterface ChatLayoutProps {\n  mode?: 'standalone' | 'widget' | 'floating';\n  className?: string;\n  onClose?: () => void;\n  onAgentSettings?: (agent: Agent) => void;\n  showSidebar?: boolean;\n  enableConversationManagement?: boolean;\n  maxConversations?: number;\n  sessionId?: string;\n  threadId?: string;\n  onConversationChange?: (conversation: any) => void;\n  onMessage?: (message: any) => void;\n  widgetInstance?: any; // Widget instance for isolated conversation management\n  conversations?: any[]; // Current conversations for isolated mode\n  currentConversation?: any; // Current conversation for isolated mode\n  conversationRefreshKey?: number; // Key to trigger ConversationManager refresh\n}\n\n/**\n * Chat Layout Component\n * \n * Orchestrates the overall chat interface layout based on deployment mode.\n * In standalone mode, includes a collapsible conversation sidebar.\n * In widget/floating modes, renders only the chat container.\n */\nexport const ChatLayout: React.FC<ChatLayoutProps> = ({\n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  showSidebar = true,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  widgetInstance,\n  conversations,\n  currentConversation,\n  conversationRefreshKey\n}) => {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const { currentConversation: storeCurrentConversation } = useConversationStore();\n  const { loadMessages } = useMessageStore();\n\n  /**\n   * Load messages when conversation changes\n   * \n   * Automatically fetches messages from the store when user\n   * switches between conversations. This ensures the chat\n   * always shows the correct message history.\n   */\n  useEffect(() => {\n    // Skip API calls in demo mode to prevent errors\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (storeCurrentConversation && !isDemoMode) {\n      loadMessages(storeCurrentConversation.id.toString());\n    }\n  }, [storeCurrentConversation, loadMessages]);\n\n  // Hide sidebar for widget and floating modes\n  // Only standalone mode shows the conversation sidebar\n  const shouldShowSidebar = showSidebar && mode === 'standalone';\n\n  /**\n   * Toggle sidebar collapsed state\n   * \n   * Toggles sidebar visibility with potential for session persistence\n   * to enhance user experience across application sessions\n   */\n  const handleToggleSidebar = () => {\n    setSidebarCollapsed(!sidebarCollapsed);\n  };\n\n  if (!shouldShowSidebar) {\n    // For widget/floating modes, just show the chat container\n    return (\n      <ChatContainer\n        mode={mode}\n        className={className}\n        onClose={onClose}\n        onAgentSettings={onAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        threadId={threadId}\n        onConversationChange={onConversationChange}\n        onMessage={onMessage}\n        conversationRefreshKey={conversationRefreshKey}\n      />\n    );\n  }\n\n  return (\n    <div className=\"flex h-full bg-white\">\n      {/* Sidebar */}\n      <ConversationSidebar\n        isCollapsed={sidebarCollapsed}\n        onToggle={handleToggleSidebar}\n      />\n      \n      {/* Main Chat Area */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        <ChatContainer\n          mode={mode}\n          className=\"h-full\"\n          onClose={onClose}\n          onAgentSettings={onAgentSettings}\n          enableConversationManagement={enableConversationManagement}\n          maxConversations={maxConversations}\n          sessionId={sessionId}\n          threadId={threadId}\n          onConversationChange={onConversationChange}\n          onMessage={onMessage}\n          conversationRefreshKey={conversationRefreshKey}\n        />\n      </div>\n    </div>\n  );\n};","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Toaster } from 'sonner';\n\nimport '../app/globals.css';\nimport './widget-styles.css';\nimport { WidgetConfig } from '../types';\nimport { useConfigStore, useAgentStore } from '../store';\nimport { ChatLayout } from '../components/chat/ChatLayout';\nimport { getClient } from '../lib/api/client';\nimport { WidgetProvider } from './WidgetContext';\nimport { WidgetStoreProvider } from './WidgetStoreContext';\n\n/**\n * Widget Configuration Interface\n * \n * Defines all configuration options for CustomGPT widget initialization.\n * This interface is used by both embedded widgets and floating buttons.\n * \n * @property agentId - Required: Agent/Project ID from CustomGPT dashboard\n * @property agentName - Optional: Custom name to display instead of \"Agent - {ID}\"\n * @property containerId - DOM element ID for embedded mode (ignored in floating mode)\n * @property mode - Widget deployment mode: 'embedded' | 'floating' | 'widget'\n * @property theme - Color theme: 'light' | 'dark'\n * @property position - Position for floating mode: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left'\n * @property width - Widget width (default: '400px')\n * @property height - Widget height (default: '600px')\n * @property enableCitations - Show citation sources in messages\n * @property enableFeedback - Show thumbs up/down feedback buttons\n * \n * Conversation Management Options:\n * @property enableConversationManagement - Enable conversation switching UI\n * @property maxConversations - Maximum conversations per session (default: 5)\n * @property sessionId - Custom session ID (auto-generated if not provided)\n * @property threadId - Specific conversation thread to load\n * @property isolateConversations - Whether to isolate conversations from other widgets (default: true)\n * \n * Event Callbacks:\n * @property onOpen - Called when widget opens\n * @property onClose - Called when widget closes\n * @property onMessage - Called when new message is sent/received\n * @property onConversationChange - Called when conversation switches\n */\nexport interface CustomGPTWidgetConfig {\n  // Required properties (API key no longer needed - handled by server)\n  agentId: number | string;\n  \n  // Display properties\n  agentName?: string;\n  containerId?: string;\n  mode?: 'embedded' | 'floating' | 'widget';\n  theme?: 'light' | 'dark';\n  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n  width?: string;\n  height?: string;\n  \n  // Feature flags\n  enableCitations?: boolean;\n  enableFeedback?: boolean;\n  enableConversationManagement?: boolean;\n  \n  // Conversation management\n  maxConversations?: number;\n  sessionId?: string;\n  threadId?: string;\n  isolateConversations?: boolean; // New flag to isolate conversations\n  \n  // Event callbacks\n  onOpen?: () => void;\n  onClose?: () => void;\n  onMessage?: (message: any) => void;\n  onConversationChange?: (conversation: any) => void;\n}\n\n/**\n * CustomGPT Widget Class\n * \n * Main widget class that manages the lifecycle of CustomGPT chat instances.\n * Supports both embedded and floating deployment modes with full conversation management.\n * \n * @example\n * // Basic embedded widget\n * const widget = CustomGPTWidget.init({\n *   agentId: '123',\n *   containerId: 'chat-container'\n * });\n * \n * @example\n * // Floating widget with conversation management\n * const widget = CustomGPTWidget.init({\n *   agentId: '123',\n *   mode: 'floating',\n *   enableConversationManagement: true,\n *   maxConversations: 10\n * });\n */\nclass CustomGPTWidget {\n  private container: HTMLElement | null = null;\n  private root: any = null;\n  private config: CustomGPTWidgetConfig;\n  private isOpen: boolean = false;\n  public sessionId: string;\n  private currentConversationId: string | null = null;\n  private instanceKey?: string;\n  private conversationRefreshKey: number = 0;\n\n  constructor(config: CustomGPTWidgetConfig) {\n    // Validate required fields\n    \n    if (!config.agentId) {\n      throw new Error('CustomGPT Widget: Agent ID is required');\n    }\n\n    // Merge with defaults\n    this.config = {\n      mode: 'embedded',\n      theme: 'light',\n      position: 'bottom-right',\n      width: '400px',\n      height: '600px',\n      enableCitations: true,\n      enableFeedback: true,\n      enableConversationManagement: false,\n      ...config,\n    };\n\n    // Initialize session ID\n    // If isolateConversations is true, ensure each widget has a unique session\n    if (this.config.isolateConversations !== false) {\n      // Default to isolated conversations - each widget gets its own session\n      const modePrefix = this.config.mode || 'widget';\n      const containerId = this.config.containerId || 'default';\n      // Create a unique session ID that includes mode, container info, and a random component\n      // Use performance.now() for higher precision to avoid collisions\n      const timestamp = typeof performance !== 'undefined' ? performance.now() : Date.now();\n      const random = Math.random().toString(36).substr(2, 9);\n      const uniqueId = `${timestamp}_${random}_${Math.random().toString(36).substr(2, 5)}`;\n      this.sessionId = `session_${modePrefix}_${containerId}_${uniqueId}`;\n    } else if (this.config.sessionId) {\n      // Use provided session ID for sharing conversations\n      this.sessionId = this.config.sessionId;\n    } else {\n      // Generate a regular session ID\n      this.sessionId = this.generateSessionId();\n    }\n    \n    // Store widget instance reference for conversation management\n    // Use unique instance key to prevent conflicts between multiple widgets\n    if (typeof window !== 'undefined') {\n      const instanceKey = `__customgpt_widget_${this.sessionId}`;\n      (window as any)[instanceKey] = this;\n      \n      // DEPRECATED: Global reference kept for backward compatibility\n      // Don't overwrite if already exists to preserve first widget\n      if (!(window as any).__customgpt_widget_instance) {\n        (window as any).__customgpt_widget_instance = this;\n      }\n      \n      // Store instance key for later reference\n      this.instanceKey = instanceKey;\n    }\n\n    this.init();\n  }\n\n  /**\n   * Generates a unique session ID for conversation isolation\n   * @returns Unique session identifier\n   */\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private async init() {\n    // Config store no longer needs API key setup\n    \n    // Configure session for conversation isolation\n    if (this.config.enableConversationManagement) {\n      // Store session configuration for conversation management\n      // If isolateConversations is true, use instance-specific session storage\n      if (this.config.isolateConversations) {\n        // Create instance-specific session object\n        if (!(window as any).__customgpt_sessions) {\n          (window as any).__customgpt_sessions = {};\n        }\n        (window as any).__customgpt_sessions[this.sessionId] = {\n          sessionId: this.sessionId,\n          maxConversations: this.config.maxConversations,\n          enableConversationManagement: true\n        };\n      } else {\n        // Use shared session (old behavior)\n        (window as any).__customgpt_session = {\n          sessionId: this.sessionId,\n          maxConversations: this.config.maxConversations,\n          enableConversationManagement: true\n        };\n      }\n    }\n    \n    // Check if using demo/test API key\n    const isDemoMode = false; // Demo mode removed as API key is server-side\n    \n    // Store demo mode flag for preventing unnecessary API calls\n    if (isDemoMode) {\n      (window as any).__customgpt_demo_mode = true;\n    } else {\n      // Ensure demo mode is disabled for valid API keys\n      (window as any).__customgpt_demo_mode = false;\n    }\n    \n    // Fetch the actual agent details\n    const agentId = typeof this.config.agentId === 'string' ? parseInt(this.config.agentId) : this.config.agentId;\n    \n    if (!isDemoMode) {\n      try {\n        // Try to fetch agent details to get the project name\n        const client = getClient();\n        const agentsResponse = await client.getAgents();\n        const agents = Array.isArray(agentsResponse) ? agentsResponse : (agentsResponse as any).data || [];\n        const agent = agents.find((a: any) => a.id === agentId);\n        \n        if (agent) {\n          // Use custom agent name if provided\n          if (this.config.agentName) {\n            agent.project_name = this.config.agentName;\n          }\n          \n          // Use the actual agent with proper project name\n          useAgentStore.getState().selectAgent(agent);\n          // Clear other agents to ensure only this one is available\n          useAgentStore.getState().setAgents([agent]);\n        } else {\n          // Fallback if agent not found\n          const fallbackAgent: any = {\n            id: agentId,\n            project_name: this.config.agentName || `Project ${agentId}`,\n            is_chat_active: true,\n          };\n          useAgentStore.getState().selectAgent(fallbackAgent);\n          useAgentStore.getState().setAgents([fallbackAgent]);\n        }\n      } catch (error) {\n        // Use fallback on error\n        const fallbackAgent: any = {\n          id: agentId,\n          project_name: this.config.agentName || `Project ${agentId}`,\n          is_chat_active: true,\n        };\n        useAgentStore.getState().selectAgent(fallbackAgent);\n        useAgentStore.getState().setAgents([fallbackAgent]);\n      }\n    } else {\n      // For demo mode, always use fallback agent\n      const fallbackAgent: any = {\n        id: agentId,\n        project_name: this.config.agentName || `Demo Assistant`,\n        is_chat_active: true,\n      };\n      useAgentStore.getState().selectAgent(fallbackAgent);\n      useAgentStore.getState().setAgents([fallbackAgent]);\n    }\n\n    // Create container based on mode\n    this.createContainer();\n    \n    // Render the widget first\n    this.render();\n    \n    // Initialize conversation after render to ensure ConversationManager is mounted\n    if (this.config.enableConversationManagement) {\n      const conversations = this.getConversations();\n      \n      if (conversations.length === 0) {\n        // Create initial conversation after a small delay to ensure components are mounted\n        setTimeout(() => {\n          this.createConversation('New Chat');\n        }, 100);\n      } else {\n        // Set current conversation to the first one\n        this.currentConversationId = conversations[0].id;\n        \n        // Only sync with global store if explicitly not isolated\n        if (this.config.isolateConversations === false && typeof window !== 'undefined') {\n          const { useConversationStore } = require('../store');\n          const currentConv = conversations[0];\n          const fullConversation = {\n            ...currentConv,\n            project_id: parseInt(this.config.agentId as string) || 0,\n            session_id: this.sessionId,\n            name: currentConv.title\n          };\n          \n          // Set only the current conversation\n          useConversationStore.setState({\n            conversations: [fullConversation as any],\n            currentConversation: fullConversation as any\n          });\n        }\n      }\n    }\n    \n    // For isolated widgets, we need to prevent the global store from being used\n    if (this.config.isolateConversations !== false && typeof window !== 'undefined') {\n      // Store the widget instance globally so components can access it\n      (window as any).__customgpt_widget_instances = (window as any).__customgpt_widget_instances || {};\n      (window as any).__customgpt_widget_instances[this.sessionId] = this;\n      \n      // Set the current active widget session\n      (window as any).__customgpt_active_widget_session = this.sessionId;\n    }\n  }\n\n  private createContainer() {\n    const { mode, containerId } = this.config;\n\n    if (mode === 'embedded' && containerId) {\n      // Use provided container\n      this.container = document.getElementById(containerId);\n      if (!this.container) {\n        throw new Error(`Container with id \"${containerId}\" not found`);\n      }\n    } else if (mode === 'floating') {\n      // Create floating container\n      this.container = document.createElement('div');\n      this.container.id = 'customgpt-floating-widget';\n      this.setupFloatingStyles();\n      document.body.appendChild(this.container);\n    } else {\n      // Create default container\n      this.container = document.createElement('div');\n      this.container.id = 'customgpt-widget';\n      document.body.appendChild(this.container);\n    }\n  }\n\n  private setupFloatingStyles() {\n    if (!this.container || this.config.mode !== 'floating') return;\n\n    const { position, width, height } = this.config;\n    \n    // Base floating styles\n    Object.assign(this.container.style, {\n      position: 'fixed',\n      zIndex: '9999',\n      width: width || '400px',\n      height: height || '600px',\n      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\n      borderRadius: '12px',\n      overflow: 'hidden',\n      transition: 'all 0.3s ease',\n      backgroundColor: 'white', // Ensure background is set\n    });\n    \n    // Add class for styling\n    this.container.classList.add('floating-mode');\n    this.container.classList.add('customgpt-floating-container');\n\n    // Position-specific styles\n    switch (position) {\n      case 'bottom-right':\n        Object.assign(this.container.style, {\n          bottom: '20px',\n          right: '20px',\n        });\n        break;\n      case 'bottom-left':\n        Object.assign(this.container.style, {\n          bottom: '20px',\n          left: '20px',\n        });\n        break;\n      case 'top-right':\n        Object.assign(this.container.style, {\n          top: '20px',\n          right: '20px',\n        });\n        break;\n      case 'top-left':\n        Object.assign(this.container.style, {\n          top: '20px',\n          left: '20px',\n        });\n        break;\n    }\n\n    // Initially hidden for floating mode with proper initial state\n    this.container.style.display = 'none';\n    this.container.style.opacity = '0';\n    this.container.style.transform = 'translateY(20px)';\n  }\n\n  private render() {\n    if (!this.container) return;\n\n    // Apply proper styling based on mode\n    if (this.config.mode === 'embedded') {\n      this.container.classList.add('customgpt-embedded-widget');\n      // Apply width and height styles directly to container\n      Object.assign(this.container.style, {\n        width: this.config.width || '400px',\n        height: this.config.height || '600px',\n        margin: '0 auto', // Center by default\n        display: 'block',\n      });\n    }\n\n    // Only create root once\n    if (!this.root) {\n      this.root = createRoot(this.container);\n    }\n    \n    const WidgetApp = () => {\n      // DEPRECATED: This global reference is kept for backward compatibility\n      // New code should use WidgetContext instead\n      // Only set if not already set to avoid overwriting first widget\n      if (typeof window !== 'undefined' && !(window as any).__customgpt_widget_instance) {\n        (window as any).__customgpt_widget_instance = this;\n      }\n      \n      const handleClose = () => {\n        this.close();\n        this.config.onClose?.();\n      };\n\n      // Get current conversation ID or use thread ID\n      const currentConvId = this.currentConversationId || this.config.threadId;\n      \n      // For isolated mode, pass the widget instance to manage conversations locally\n      const widgetRef = this;\n      \n      // Create a unique key for this widget's conversations\n      const widgetKey = `widget_${this.sessionId}`;\n\n      return (\n        <WidgetStoreProvider sessionId={this.sessionId}>\n          <WidgetProvider widgetInstance={widgetRef}>\n            <div className={`customgpt-widget-wrapper widget-mode ${this.config.mode}-mode`}>\n              <ChatLayout\n                mode={this.config.mode === 'embedded' ? 'widget' : 'floating'}\n                onClose={this.config.mode === 'floating' ? handleClose : undefined}\n                showSidebar={false} // Disable sidebar for widget mode\n                className=\"w-full h-full\"\n                // Pass conversation management configuration\n                enableConversationManagement={this.config.enableConversationManagement}\n                maxConversations={this.config.maxConversations}\n                sessionId={this.sessionId}\n                threadId={currentConvId} // Pass current conversation ID\n                onConversationChange={this.config.onConversationChange}\n                onMessage={this.config.onMessage}\n                // Pass widget instance for isolated conversation management\n                widgetInstance={this.config.isolateConversations !== false ? widgetRef : undefined}\n                // Pass current conversations for isolated mode\n                conversations={this.config.isolateConversations !== false ? this.getConversations() : undefined}\n                currentConversation={this.config.isolateConversations !== false && this.currentConversationId ? \n                  this.getConversations().find(c => c.id === this.currentConversationId) : undefined}\n                // Pass refresh key to trigger ConversationManager updates\n                conversationRefreshKey={this.conversationRefreshKey}\n              />\n              <Toaster \n                position=\"top-center\"\n                closeButton\n                toastOptions={{\n                  style: { \n                    zIndex: 10000\n                  }\n                }}\n              />\n            </div>\n          </WidgetProvider>\n        </WidgetStoreProvider>\n      );\n    };\n\n    this.root.render(<WidgetApp />);\n\n    // Auto-open for embedded mode\n    if (this.config.mode === 'embedded') {\n      this.open();\n    }\n  }\n\n  /**\n   * Get all conversations for current session\n   * @returns Array of conversations\n   */\n  public getConversations(): any[] {\n    const stored = localStorage.getItem(`customgpt_conversations_${this.sessionId}`);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (e) {\n        console.error('Failed to parse conversations:', e);\n      }\n    }\n    return [];\n  }\n\n  /**\n   * Switch to a different conversation\n   * @param conversationId - ID of conversation to switch to\n   */\n  public switchConversation(conversationId: string): void {\n    const conversations = this.getConversations();\n    const conversation = conversations.find(c => c.id === conversationId);\n    \n    if (conversation) {\n      this.currentConversationId = conversationId;\n      \n      // Increment refresh key to trigger ConversationManager update\n      this.conversationRefreshKey++;\n      \n      // Don't update the global store if we're in isolated mode\n      // The render() method will handle passing the correct conversation\n      if (!this.config.isolateConversations) {\n        // Only update global store if sharing conversations\n        if (typeof window !== 'undefined') {\n          const { useConversationStore } = require('../store');\n          \n          // Get all widget conversations\n          const allWidgetConversations = this.getConversations();\n          \n          // Convert all widget conversations to store format\n          const storeConversations = allWidgetConversations.map(conv => ({\n            ...conv,\n            project_id: parseInt(this.config.agentId as string) || 0,\n            session_id: this.sessionId,\n            name: conv.title\n          }));\n          \n          // Find the selected conversation with proper format\n          const fullConversation = storeConversations.find(c => c.id === conversationId);\n          \n          // Update store with all widget conversations\n          useConversationStore.setState({\n            conversations: storeConversations as any,\n            currentConversation: fullConversation as any\n          });\n        }\n      }\n      \n      // Trigger re-render with new conversation\n      this.render();\n      this.config.onConversationChange?.(conversation);\n    }\n  }\n\n  /**\n   * Create a new conversation\n   * @param title - Optional title for the conversation\n   * @returns The new conversation object\n   */\n  public createConversation(title?: string): any {\n    const conversations = this.getConversations();\n    \n    // Check max conversations limit (only if specified by user)\n    if (this.config.maxConversations && conversations.length >= this.config.maxConversations) {\n      console.warn(`Maximum conversation limit (${this.config.maxConversations}) reached`);\n      return null; // Return null instead of throwing error\n    }\n    \n    const newConversation = {\n      id: `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      title: title || `Conversation ${conversations.length + 1}`,\n      createdAt: new Date().toISOString(),\n      messages: [],\n      // Add required fields for conversation store compatibility\n      project_id: parseInt(this.config.agentId as string) || 0,\n      session_id: this.sessionId,\n      name: title || `Conversation ${conversations.length + 1}`\n    };\n    \n    conversations.unshift(newConversation);\n    this.saveConversations(conversations);\n    this.currentConversationId = newConversation.id;\n    \n    // Don't update the global store if we're in isolated mode\n    if (!this.config.isolateConversations) {\n      // Only update global store if sharing conversations\n      if (typeof window !== 'undefined') {\n        const { useConversationStore, useMessageStore } = require('../store');\n        const messageStore = useMessageStore.getState();\n        \n        // Get all widget conversations (local storage)\n        const allWidgetConversations = this.getConversations();\n        \n        // Convert all widget conversations to store format\n        const storeConversations = allWidgetConversations.map(conv => ({\n          ...conv,\n          project_id: parseInt(this.config.agentId as string) || 0,\n          session_id: this.sessionId,\n          name: conv.title\n        }));\n        \n        // Update store with all widget conversations, with new one as current\n        useConversationStore.setState({\n          conversations: storeConversations as any,\n          currentConversation: newConversation as any\n        });\n        \n        // Clear any existing messages for this conversation ID to ensure welcome message shows\n        messageStore.clearMessages(newConversation.id);\n      }\n    }\n    \n    // Increment refresh key to trigger ConversationManager update\n    this.conversationRefreshKey++;\n    \n    // Trigger re-render with new conversation\n    this.render();\n    \n    return newConversation;\n  }\n\n  /**\n   * Update conversation title\n   * @param conversationId - ID of conversation to update\n   * @param newTitle - New title for the conversation\n   */\n  public updateConversationTitle(conversationId: string, newTitle: string): void {\n    const conversations = this.getConversations();\n    const conversation = conversations.find(c => c.id === conversationId);\n    \n    if (conversation) {\n      conversation.title = newTitle;\n      this.saveConversations(conversations);\n      // Increment refresh key to trigger ConversationManager update\n      this.conversationRefreshKey++;\n      this.render();\n    }\n  }\n\n  /**\n   * Delete a conversation\n   * @param conversationId - ID of conversation to delete\n   */\n  public deleteConversation(conversationId: string): void {\n    const conversations = this.getConversations();\n    const filtered = conversations.filter(c => c.id !== conversationId);\n    \n    this.saveConversations(filtered);\n    \n    // Increment refresh key to trigger ConversationManager update\n    this.conversationRefreshKey++;\n    \n    // If deleting current conversation, switch to another or create new\n    if (this.currentConversationId === conversationId) {\n      if (filtered.length > 0) {\n        this.switchConversation(filtered[0].id);\n      } else {\n        this.createConversation();\n      }\n    } else {\n      // Still need to re-render to update the conversation list\n      this.render();\n    }\n  }\n\n  /**\n   * Save conversations to localStorage\n   * @param conversations - Array of conversations to save\n   */\n  private saveConversations(conversations: any[]): void {\n    try {\n      localStorage.setItem(\n        `customgpt_conversations_${this.sessionId}`,\n        JSON.stringify(conversations)\n      );\n    } catch (e) {\n      console.error('Failed to save conversations:', e);\n      // Handle quota exceeded error\n      if (e instanceof DOMException && e.name === 'QuotaExceededError') {\n        // Try to clean up old conversations\n        this.cleanupOldConversations();\n      }\n    }\n  }\n\n  /**\n   * Clean up old conversations to free up localStorage space\n   */\n  private cleanupOldConversations(): void {\n    const conversations = this.getConversations();\n    // Keep only the 3 most recent conversations\n    const recent = conversations.slice(0, 3);\n    this.saveConversations(recent);\n  }\n\n  // Public methods\n  public open() {\n    if (!this.container) return;\n\n    this.isOpen = true;\n    \n    if (this.config.mode === 'floating') {\n      this.container.style.display = 'block';\n      // Trigger animation\n      setTimeout(() => {\n        if (this.container) {\n          this.container.style.transform = 'translateY(0)';\n          this.container.style.opacity = '1';\n        }\n      }, 10);\n    }\n\n    this.config.onOpen?.();\n  }\n\n  public close() {\n    if (!this.container) return;\n\n    this.isOpen = false;\n\n    if (this.config.mode === 'floating') {\n      this.container.style.transform = 'translateY(20px)';\n      this.container.style.opacity = '0';\n      \n      setTimeout(() => {\n        if (this.container) {\n          this.container.style.display = 'none';\n        }\n      }, 300);\n    }\n  }\n\n  public toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  public destroy() {\n    if (this.root) {\n      this.root.unmount();\n    }\n    \n    if (this.container && this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container);\n    }\n    \n    this.container = null;\n    this.root = null;\n  }\n\n  public updateConfig(newConfig: Partial<CustomGPTWidgetConfig>) {\n    this.config = { ...this.config, ...newConfig };\n    \n    // Re-render with new config\n    this.render();\n  }\n  \n  /**\n   * Force a re-render of the widget\n   * Useful for updating the UI after state changes\n   */\n  public refresh() {\n    this.render();\n  }\n\n  // Getters\n  public get isOpened() {\n    return this.isOpen;\n  }\n\n  public get configuration() {\n    return { ...this.config };\n  }\n}\n\n// Global API for the widget\ndeclare global {\n  interface Window {\n    CustomGPTWidget: {\n      init: (config: CustomGPTWidgetConfig) => CustomGPTWidget;\n      create: (config: CustomGPTWidgetConfig) => CustomGPTWidget;\n    };\n  }\n}\n\n// Export for UMD build\nconst CustomGPTWidgetAPI = {\n  init: (config: CustomGPTWidgetConfig): CustomGPTWidget => {\n    return new CustomGPTWidget(config);\n  },\n  \n  create: (config: CustomGPTWidgetConfig): CustomGPTWidget => {\n    return new CustomGPTWidget(config);\n  },\n};\n\n// Global assignment for browser usage\nif (typeof window !== 'undefined') {\n  window.CustomGPTWidget = CustomGPTWidgetAPI;\n}\n\n// For module usage\nexport { CustomGPTWidget, CustomGPTWidgetAPI };\nexport default CustomGPTWidgetAPI;","export type LogLevel = 'info' | 'warn' | 'error';\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  category: string;\n  message: string;\n  data?: any;\n  error?: any;\n  stack?: string;\n}\n\nclass Logger {\n  private static instance: Logger;\n  private isClient: boolean;\n  private logs: LogEntry[] = [];\n\n  private constructor() {\n    this.isClient = typeof window !== 'undefined';\n  }\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  private formatMessage(entry: LogEntry): string {\n    const { timestamp, level, category, message, data, error, stack } = entry;\n    let formatted = `[${timestamp}] [${level.toUpperCase()}] [${category}] ${message}`;\n    \n    if (data) {\n      formatted += `\\nData: ${JSON.stringify(data, null, 2)}`;\n    }\n    \n    if (error) {\n      formatted += `\\nError: ${error.message || error}`;\n      if (stack) {\n        formatted += `\\nStack: ${stack}`;\n      }\n    }\n    \n    return formatted;\n  }\n\n  private writeToFile(entry: LogEntry) {\n    // File writing is handled by the API route\n    // This method is kept for compatibility\n  }\n\n  private log(level: LogLevel, category: string, message: string, data?: any, error?: any) {\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      category,\n      message,\n      data,\n      error: error ? { message: error.message, code: error.code, status: error.status } : undefined,\n      stack: error?.stack,\n    };\n\n    // Store in memory for client access\n    this.logs.push(entry);\n    if (this.logs.length > 1000) {\n      this.logs = this.logs.slice(-500); // Keep last 500 entries\n    }\n\n    // Console output with styling\n    const styles = {\n      info: 'color: #3B82F6; font-weight: normal;',\n      warn: 'color: #F59E0B; font-weight: bold;',\n      error: 'color: #EF4444; font-weight: bold;',\n    };\n\n    const prefix = `[${entry.timestamp.split('T')[1].split('.')[0]}] [${category}]`;\n    \n    if (this.isClient) {\n      console.log(`%c${prefix} ${message}`, styles[level]);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    } else {\n      const colorCodes = {\n        info: '\\x1b[36m',\n        warn: '\\x1b[33m',\n        error: '\\x1b[31m',\n      };\n      const reset = '\\x1b[0m';\n      console.log(`${colorCodes[level]}${prefix}${reset} ${message}`);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    }\n\n    // Server logging removed - all logs go to console only\n  }\n\n\n  info(category: string, message: string, data?: any) {\n    this.log('info', category, message, data);\n  }\n\n  warn(category: string, message: string, data?: any) {\n    this.log('warn', category, message, data);\n  }\n\n  error(category: string, message: string, error?: any, data?: any) {\n    this.log('error', category, message, data, error);\n  }\n\n  getLogs(): LogEntry[] {\n    return this.logs;\n  }\n\n  clearLogs() {\n    this.logs = [];\n  }\n\n  // API-specific logging helpers\n  apiRequest(endpoint: string, method: string, data?: any) {\n    this.info('API_REQUEST', `${method} ${endpoint}`, data);\n  }\n\n  apiResponse(endpoint: string, status: number, data?: any) {\n    const level = status >= 400 ? 'error' : 'info';\n    this.log(level, 'API_RESPONSE', `${endpoint} - Status: ${status}`, data);\n  }\n\n  apiError(endpoint: string, error: any) {\n    this.error('API_ERROR', `Failed request to ${endpoint}`, error);\n  }\n\n  // Auth-specific logging\n  authCheck(message: string, data?: any) {\n    this.info('AUTH', message, data);\n  }\n\n  authError(message: string, error?: any) {\n    this.error('AUTH_ERROR', message, error);\n  }\n\n  // Navigation logging\n  navigation(route: string, params?: any) {\n    this.info('NAVIGATION', `Navigating to ${route}`, params);\n  }\n\n  // Store operation logging\n  storeAction(store: string, action: string, data?: any) {\n    this.info('STORE', `${store}.${action}`, data);\n  }\n}\n\nexport const logger = Logger.getInstance();","/**\n * Utility Functions Library\n * \n * Common utility functions used throughout the application.\n * These utilities handle:\n * - CSS class merging for Tailwind\n * - ID generation\n * - File operations\n * - Date/time formatting\n * - Clipboard operations\n * - HTML sanitization\n * - API helpers\n * \n * Features:\n * - Pure, reusable utility functions with full TypeScript support\n * - Comprehensive JSDoc documentation with usage examples\n * - Robust edge case handling and error recovery\n * - Optimized performance with configurable options\n * - Production-ready implementations for common operations\n */\n\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\nimport DOMPurify from 'dompurify';\n\n/**\n * Utility function for combining Tailwind CSS classes\n * \n * This function combines clsx and tailwind-merge to:\n * 1. Support conditional classes (clsx)\n * 2. Properly merge Tailwind classes (tailwind-merge)\n * \n * @example\n * cn('px-2 py-1', 'px-4') // Returns: 'py-1 px-4'\n * cn('text-red-500', condition && 'text-blue-500')\n * cn(['text-sm', 'font-bold'], { 'opacity-50': isDisabled })\n * \n * @param inputs - Class strings, conditionals, arrays, or objects\n * @returns Merged class string\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Generate a unique ID\n * \n * Creates a unique identifier using random string and timestamp.\n * Not cryptographically secure - use for UI elements only.\n * \n * @example\n * generateId() // Returns: 'a1b2c3d41234567890'\n * \n * @returns Unique string ID\n */\nexport function generateId(): string {\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\n}\n\n/**\n * Format file size in bytes to human readable format\n * \n * Converts byte values to appropriate units (KB, MB, GB).\n * Always shows 2 decimal places except for bytes.\n * \n * @example\n * formatFileSize(0) // Returns: '0 Bytes'\n * formatFileSize(1024) // Returns: '1 KB'\n * formatFileSize(1536) // Returns: '1.5 KB'\n * formatFileSize(1048576) // Returns: '1 MB'\n * \n * @param bytes - File size in bytes\n * @returns Formatted string with appropriate unit\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * Get file icon based on file type\n * \n * Returns an emoji icon based on the MIME type or file extension.\n * Used in file upload UI components.\n * \n * @example\n * getFileIcon('application/pdf') // Returns: '📄'\n * getFileIcon('image/png') // Returns: '🖼️'\n * getFileIcon('text/plain') // Returns: '📝'\n * getFileIcon('unknown/type') // Returns: '📎' (default)\n * \n * @param fileType - MIME type or file extension\n * @returns Emoji icon representing the file type\n */\nexport function getFileIcon(fileType: string): string {\n  const type = fileType.toLowerCase();\n  \n  // Document types\n  if (type.includes('pdf')) return '📄';\n  if (type.includes('word') || type.includes('doc')) return '📄';\n  if (type.includes('text') || type.includes('txt')) return '📝';\n  \n  // Media types\n  if (type.includes('image')) return '🖼️';\n  if (type.includes('video')) return '🎥';\n  if (type.includes('audio')) return '🎵';\n  \n  // Data types\n  if (type.includes('excel') || type.includes('sheet')) return '📊';\n  if (type.includes('powerpoint') || type.includes('presentation')) return '📈';\n  if (type.includes('json')) return '📋';\n  if (type.includes('csv')) return '📊';\n  \n  // Archive types\n  if (type.includes('zip') || type.includes('rar')) return '🗜️';\n  \n  // Default icon\n  return '📎';\n}\n\n/**\n * Validate file type against allowed types\n * \n * Checks if a file type is in the allowed list.\n * Case-insensitive partial matching.\n * \n * @example\n * const allowed = ['image/', 'application/pdf'];\n * isFileTypeAllowed('image/png', allowed) // Returns: true\n * isFileTypeAllowed('IMAGE/JPEG', allowed) // Returns: true (case-insensitive)\n * isFileTypeAllowed('text/plain', allowed) // Returns: false\n * \n * @param fileType - MIME type to check\n * @param allowedTypes - List of allowed MIME types or patterns\n * @returns Whether the file type is allowed\n */\nexport function isFileTypeAllowed(fileType: string, allowedTypes: readonly string[]): boolean {\n  return allowedTypes.some(type => fileType.toLowerCase().includes(type.toLowerCase()));\n}\n\n/**\n * Format timestamp to human readable format\n * \n * Converts ISO timestamps to relative time strings.\n * Shows relative time for recent dates, absolute date for older.\n * \n * @example\n * // Assuming current time is 2024-01-01 12:00:00\n * formatTimestamp('2024-01-01T11:59:30Z') // Returns: 'Just now'\n * formatTimestamp('2024-01-01T11:30:00Z') // Returns: '30m ago'\n * formatTimestamp('2024-01-01T08:00:00Z') // Returns: '4h ago'\n * formatTimestamp('2023-12-25T12:00:00Z') // Returns: '7d ago'\n * formatTimestamp('2023-11-01T12:00:00Z') // Returns: '11/1/2023'\n * \n * @param timestamp - ISO date string\n * @returns Human-readable time difference or date\n */\nexport function formatTimestamp(timestamp: string): string {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diffInMs = now.getTime() - date.getTime();\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n  \n  // Recent times shown as relative\n  if (diffInMinutes < 1) return 'Just now';\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n  if (diffInHours < 24) return `${diffInHours}h ago`;\n  if (diffInDays < 7) return `${diffInDays}d ago`;\n  \n  // Older times shown as absolute date\n  return date.toLocaleDateString();\n}\n\n/**\n * Copy text to clipboard\n * \n * Uses the modern Clipboard API with fallback error handling.\n * Returns success/failure for UI feedback.\n * \n * @example\n * const success = await copyToClipboard('Hello, world!');\n * if (success) {\n *   toast.success('Copied to clipboard');\n * } else {\n *   toast.error('Failed to copy');\n * }\n * \n * @param text - Text to copy to clipboard\n * @returns Promise resolving to success boolean\n */\nexport async function copyToClipboard(text: string): Promise<boolean> {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch (error) {\n    // Copy failed, return false status\n    console.error('Failed to copy to clipboard:', error);\n    return false;\n  }\n}\n\n/**\n * Sanitize HTML content\n * \n * Removes dangerous HTML/JS to prevent XSS attacks.\n * Safe for rendering user-generated content.\n * Skips sanitization on server-side (SSR).\n * \n * @example\n * const dirty = '<script>alert(\"XSS\")</script><p>Hello</p>';\n * sanitizeHtml(dirty) // Returns: '<p>Hello</p>'\n * \n * const safe = '<p>Hello <strong>world</strong></p>';\n * sanitizeHtml(safe) // Returns: '<p>Hello <strong>world</strong></p>'\n * \n * @param html - Raw HTML string\n * @returns Sanitized HTML safe for rendering\n */\nexport function sanitizeHtml(html: string): string {\n  if (typeof window === 'undefined') {\n    return html; // Skip sanitization on server side (no DOM)\n  }\n  \n  return DOMPurify.sanitize(html, {\n    ALLOWED_TAGS: ['p', 'br', 'strong', 'em', 'code', 'pre', 'a', 'ul', 'ol', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n    ALLOWED_ATTR: ['href', 'target', 'rel', 'class'],\n  });\n}\n\n/**\n * Debounce function\n * \n * Delays function execution until after wait milliseconds have\n * elapsed since the last time it was invoked. Useful for search\n * inputs, window resize handlers, etc.\n * \n * @example\n * const debouncedSearch = debounce((query: string) => {\n *   console.log('Searching for:', query);\n * }, 300);\n * \n * // Rapid calls...\n * debouncedSearch('a');    // Won't execute\n * debouncedSearch('ab');   // Won't execute\n * debouncedSearch('abc');  // Will execute after 300ms\n * \n * @param func - Function to debounce\n * @param wait - Milliseconds to delay\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(null, args), wait);\n  };\n}\n\n/**\n * Throttle function\n * \n * Ensures function is called at most once per specified time period.\n * First call executes immediately, subsequent calls are ignored until\n * the time period expires.\n * \n * @example\n * const throttledScroll = throttle(() => {\n *   console.log('Scroll position:', window.scrollY);\n * }, 100);\n * \n * // During rapid scrolling:\n * // t=0ms: executes immediately\n * // t=50ms: ignored (still in throttle period)\n * // t=100ms: executes (throttle period expired)\n * \n * @param func - Function to throttle\n * @param limit - Minimum milliseconds between calls\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  \n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func.apply(null, args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n/**\n * Truncate text to specified length\n * \n * Cuts text at the specified length and adds ellipsis.\n * Trims whitespace from the cut point.\n * \n * @example\n * truncateText('Hello, world!', 5) // Returns: 'Hello...'\n * truncateText('Short', 10) // Returns: 'Short'\n * truncateText('Hello   ', 5) // Returns: 'Hello...' (trimmed)\n * \n * @param text - Text to truncate\n * @param maxLength - Maximum length before truncation\n * @returns Truncated text with ellipsis if needed\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength).trim() + '...';\n}\n\n/**\n * Validate CustomGPT API key format\n * \n * Checks if the provided string matches the CustomGPT API key format.\n * Format: {digits}|{alphanumeric_string}\n * - At least 3 digits before the pipe\n * - At least 20 alphanumeric characters after the pipe\n * \n * @example\n * isValidApiKey('123|abcdefghijklmnopqrst') // Returns: true\n * isValidApiKey('7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x') // Returns: true\n * isValidApiKey('12|short') // Returns: false (too few digits/chars)\n * isValidApiKey('no-pipe') // Returns: false (wrong format)\n * isValidApiKey('') // Returns: false (empty)\n * \n * @param apiKey - API key string to validate\n * @returns Whether the API key is valid\n */\nexport function isValidApiKey(apiKey: string): boolean {\n  if (!apiKey || typeof apiKey !== 'string') {\n    return false;\n  }\n  \n  // Trim whitespace\n  apiKey = apiKey.trim();\n  \n  // CustomGPT API key format: starts with digits followed by | then alphanumeric string\n  // Example: 7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x\n  // Must have at least 3 digits, pipe, and at least 20 characters after pipe\n  return /^\\d{3,}\\|[a-zA-Z0-9]{20,}$/.test(apiKey);\n}\n\n/**\n * Parse streaming response chunk\n * \n * Handles various SSE (Server-Sent Events) formats from the CustomGPT API.\n * Supports both standard SSE format and raw JSON lines.\n * \n * Formats handled:\n * - SSE events: \"event: progress\", \"event: finish\"\n * - SSE data: \"data: {json}\", \"data: [DONE]\"\n * - Raw JSON: {\"content\": \"...\", \"citations\": [...]}\n * - Plain text: \"data: plain text content\"\n * \n * @example\n * parseStreamChunk('data: {\"content\": \"Hello\"}') \n * // Returns: { type: 'content', content: 'Hello' }\n * \n * parseStreamChunk('data: [DONE]')\n * // Returns: { type: 'done' }\n * \n * parseStreamChunk('event: finish')\n * // Returns: { type: 'done' }\n * \n * @param chunk - Raw chunk from SSE stream\n * @returns Parsed chunk object or null if should be skipped\n */\nexport function parseStreamChunk(chunk: string): any | null {\n  try {\n    \n    // Skip event lines - CustomGPT sends \"event: progress\" etc.\n    if (chunk.startsWith('event: ')) {\n      const eventType = chunk.slice(7).trim();\n      \n      // Handle specific events if needed\n      if (eventType === 'finish') {\n        return { type: 'done' };\n      }\n      \n      // Skip other event types\n      return null;\n    }\n    \n    // Handle SSE format\n    if (chunk.startsWith('data: ')) {\n      const data = chunk.slice(6).trim();\n      \n      if (data === '[DONE]' || data === 'DONE') return { type: 'done' };\n      \n      // CustomGPT might send plain text data instead of JSON\n      // Try to parse as JSON first\n      try {\n        const parsed = JSON.parse(data);\n        \n        // Handle different response formats\n        if (typeof parsed === 'object') {\n          // If it already has a type, return as is\n          if (parsed.type) {\n            return parsed;\n          }\n          \n          // Handle CustomGPT format where content might be a direct property\n          if (parsed.content !== undefined) {\n            return { type: 'content', content: parsed.content, citations: parsed.citations };\n          }\n          \n          // Handle citation-only responses\n          if (parsed.citations && !parsed.content) {\n            return { type: 'citation', citations: parsed.citations };\n          }\n          \n          // Handle message field (some APIs use 'message' instead of 'content')\n          if (parsed.message !== undefined) {\n            return { type: 'content', content: parsed.message, citations: parsed.citations };\n          }\n          \n          // Handle delta format (some streaming APIs use delta.content)\n          if (parsed.delta && parsed.delta.content !== undefined) {\n            return { type: 'content', content: parsed.delta.content, citations: parsed.citations };\n          }\n          \n          // Handle choices format (OpenAI-style streaming)\n          if (parsed.choices && parsed.choices[0] && parsed.choices[0].delta) {\n            const delta = parsed.choices[0].delta;\n            if (delta.content !== undefined) {\n              return { type: 'content', content: delta.content, citations: parsed.citations };\n            }\n          }\n        }\n        \n        // Return the parsed data as is if we can't determine the format\n        return parsed;\n      } catch (jsonError) {\n        // If JSON parsing fails, treat it as plain text content\n        return { type: 'content', content: data };\n      }\n    }\n    \n    // Handle raw JSON lines (no \"data: \" prefix)\n    if (chunk.trim().startsWith('{')) {\n      try {\n        const parsed = JSON.parse(chunk.trim());\n        \n        if (parsed.content !== undefined || parsed.citations !== undefined) {\n          return { \n            type: parsed.content ? 'content' : 'citation', \n            content: parsed.content,\n            citations: parsed.citations \n          };\n        }\n        \n        // Handle message field\n        if (parsed.message !== undefined) {\n          return { type: 'content', content: parsed.message, citations: parsed.citations };\n        }\n        \n        return parsed;\n      } catch (parseError) {\n        console.warn('Failed to parse raw JSON chunk:', parseError);\n      }\n    }\n    \n    // Handle plain text responses (fallback)\n    if (chunk.trim() && !chunk.includes('data:') && !chunk.startsWith('{')) {\n      return { type: 'content', content: chunk.trim() };\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Failed to parse stream chunk:', chunk, error);\n    return null;\n  }\n}\n\n/**\n * Extract inline citations from text\n * \n * Finds all citation references in format [1], [2], etc.\n * Returns the original text and array of citation numbers.\n * \n * @example\n * extractInlineCitations('Hello [1] world [2]!')\n * // Returns: { text: 'Hello [1] world [2]!', citations: [1, 2] }\n * \n * extractInlineCitations('No citations here')\n * // Returns: { text: 'No citations here', citations: [] }\n * \n * @param text - Text potentially containing citations\n * @returns Object with text and citation numbers\n */\nexport function extractInlineCitations(text: string): { text: string; citations: number[] } {\n  const citationRegex = /\\[(\\d+)\\]/g;\n  const citations: number[] = [];\n  let match;\n  \n  while ((match = citationRegex.exec(text)) !== null) {\n    citations.push(parseInt(match[1]));\n  }\n  \n  return { text, citations };\n}\n\n/**\n * Create a delay promise\n * \n * Utility for adding delays in async functions.\n * Useful for retries, animations, or testing.\n * \n * @example\n * async function slowOperation() {\n *   console.log('Starting...');\n *   await delay(1000); // Wait 1 second\n *   console.log('Done!');\n * }\n * \n * @param ms - Milliseconds to delay\n * @returns Promise that resolves after delay\n */\nexport function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Retry a function with exponential backoff\n * \n * Retries a failing async function with increasing delays.\n * Delays: 1s, 2s, 4s, 8s, etc. (exponential)\n * \n * @example\n * // Retry API call up to 3 times\n * const data = await retryWithBackoff(\n *   () => fetch('/api/data').then(r => r.json()),\n *   3,    // max attempts\n *   1000  // base delay (1s)\n * );\n * \n * // Delays: attempt 1 = immediate, attempt 2 = 1s, attempt 3 = 2s\n * \n * @param fn - Async function to retry\n * @param maxAttempts - Maximum retry attempts (default: 3)\n * @param baseDelay - Base delay in ms (default: 1000)\n * @returns Result from successful function call\n * @throws Last error if all attempts fail\n */\nexport async function retryWithBackoff<T>(\n  fn: () => Promise<T>,\n  maxAttempts: number = 3,\n  baseDelay: number = 1000\n): Promise<T> {\n  let lastError: Error;\n  \n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n      \n      if (attempt === maxAttempts) {\n        throw lastError;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s, etc.\n      const delayTime = baseDelay * Math.pow(2, attempt - 1);\n      await delay(delayTime);\n    }\n  }\n  \n  throw lastError!;\n}\n\n/**\n * Check if device is mobile\n * \n * Based on viewport width (<768px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is mobile-sized\n */\nexport function isMobile(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth < 768;\n}\n\n/**\n * Check if device is tablet\n * \n * Based on viewport width (768px-1023px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is tablet-sized\n */\nexport function isTablet(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 768 && window.innerWidth < 1024;\n}\n\n/**\n * Check if device is desktop\n * \n * Based on viewport width (≥1024px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is desktop-sized\n */\nexport function isDesktop(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 1024;\n}\n\n/**\n * Get responsive container class\n * \n * Returns Tailwind classes for responsive container sizing.\n * - Mobile: Full width/height\n * - Tablet: Max 2xl width, centered\n * - Desktop: Max 4xl width, centered\n * \n * @returns Tailwind class string for container\n */\nexport function getResponsiveContainer(): string {\n  if (isMobile()) return 'w-full h-full';\n  if (isTablet()) return 'w-full max-w-2xl mx-auto';\n  return 'w-full max-w-4xl mx-auto';\n}\n\n/**\n * Format conversation name from first message\n * \n * Creates a conversation title from the first message.\n * Takes first 6 words, max 50 characters.\n * \n * @example\n * generateConversationName('Hello, can you help me with JavaScript?')\n * // Returns: 'Hello, can you help me with'\n * \n * generateConversationName('Short')\n * // Returns: 'Short'\n * \n * @param firstMessage - The first message in conversation\n * @returns Formatted conversation name\n */\nexport function generateConversationName(firstMessage: string): string {\n  const words = firstMessage.trim().split(/\\s+/);\n  const title = words.slice(0, 6).join(' ');\n  return title.length > 50 ? title.substring(0, 50).trim() + '...' : title;\n}\n\n/**\n * Validate URL format\n * \n * Checks if string is a valid URL using URL constructor.\n * \n * @example\n * isValidUrl('https://example.com') // Returns: true\n * isValidUrl('http://localhost:3000/path') // Returns: true\n * isValidUrl('not a url') // Returns: false\n * isValidUrl('') // Returns: false\n * \n * @param url - String to validate\n * @returns Whether string is a valid URL\n */\nexport function isValidUrl(url: string): boolean {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get file extension from filename\n * \n * Extracts the file extension in lowercase.\n * \n * @example\n * getFileExtension('document.pdf') // Returns: 'pdf'\n * getFileExtension('image.PNG') // Returns: 'png'\n * getFileExtension('no-extension') // Returns: ''\n * getFileExtension('multi.part.name.txt') // Returns: 'txt'\n * \n * @param filename - Filename to extract extension from\n * @returns Lowercase extension or empty string\n */\nexport function getFileExtension(filename: string): string {\n  return filename.split('.').pop()?.toLowerCase() || '';\n}\n\n/**\n * Check if file is an image\n * \n * Checks MIME type for image/ prefix.\n * \n * @example\n * isImageFile('image/png') // Returns: true\n * isImageFile('image/jpeg') // Returns: true\n * isImageFile('application/pdf') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is an image\n */\nexport function isImageFile(fileType: string): boolean {\n  return fileType.startsWith('image/');\n}\n\n/**\n * Check if file is a document\n * \n * Checks against common document MIME types including:\n * - PDF files\n * - Microsoft Word documents\n * - Plain text files\n * - CSV spreadsheets\n * - JSON/XML data files\n * \n * @example\n * isDocumentFile('application/pdf') // Returns: true\n * isDocumentFile('text/plain') // Returns: true\n * isDocumentFile('image/png') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is a supported document type\n */\nexport function isDocumentFile(fileType: string): boolean {\n  const documentTypes = [\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n  ];\n  return documentTypes.includes(fileType);\n}\n\n/**\n * Create download link for file\n * \n * Programmatically downloads content as a file.\n * Creates a blob URL and triggers download.\n * \n * @example\n * // Download text file\n * downloadFile('Hello, world!', 'greeting.txt');\n * \n * // Download JSON file\n * const data = { name: 'John', age: 30 };\n * downloadFile(\n *   JSON.stringify(data, null, 2),\n *   'data.json',\n *   'application/json'\n * );\n * \n * @param content - File content as string\n * @param filename - Name for downloaded file\n * @param mimeType - MIME type (default: 'text/plain')\n */\nexport function downloadFile(content: string, filename: string, mimeType: string = 'text/plain'): void {\n  const blob = new Blob([content], { type: mimeType });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n}\n\n/**\n * Escape HTML entities\n * \n * Prevents XSS by escaping HTML special characters.\n * Use when displaying user input as HTML.\n * \n * @example\n * escapeHtml('<script>alert(\"XSS\")</script>')\n * // Returns: '&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;'\n * \n * escapeHtml('Hello & \"world\"')\n * // Returns: 'Hello &amp; &quot;world&quot;'\n * \n * @param unsafe - Raw string that may contain HTML\n * @returns HTML-escaped string\n */\nexport function escapeHtml(unsafe: string): string {\n  return unsafe\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\n/**\n * Handle API errors and extract error message\n * \n * Normalizes various error formats into consistent structure.\n * Handles:\n * - API response errors (4xx, 5xx)\n * - Network/connection errors\n * - Client-side errors\n * \n * @example\n * try {\n *   await apiCall();\n * } catch (error) {\n *   const { message, code } = handleApiError(error);\n *   toast.error(message);\n *   if (code === 401) {\n *     // Handle unauthorized\n *   }\n * }\n * \n * @param error - Error object from API call\n * @returns Normalized error with message and optional code\n */\nexport function handleApiError(error: any): { message: string; code?: number } {\n  console.error('API Error:', error);\n  \n  if (error.response) {\n    // API responded with an error\n    const data = error.response.data;\n    // Handle nested error formats\n    if (data && data.data && data.data.message) {\n      return {\n        message: data.data.message,\n        code: data.data.code || error.response.status\n      };\n    }\n    // Handle direct message format\n    if (data && data.message) {\n      return {\n        message: data.message,\n        code: error.response.status\n      };\n    }\n    // Fallback to status code\n    return {\n      message: `API Error: ${error.response.status}`,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    // Request was made but no response received\n    return {\n      message: 'No response from server. Please check your connection.',\n      code: 0\n    };\n  } else {\n    // Something else happened (e.g., request setup error)\n    return {\n      message: error.message || 'An unexpected error occurred',\n      code: 0\n    };\n  }\n}\n\n/**\n * Constants for file uploads and API\n * \n * Central configuration for limits and constraints.\n * Modify these values to customize behavior:\n * \n * - MAX_FILE_SIZE: Maximum upload size per file\n * - ACCEPTED_FILE_TYPES: MIME types allowed for upload\n * - MAX_MESSAGE_LENGTH: Character limit for messages\n * - API_TIMEOUT: Request timeout for regular API calls\n * - STREAM_TIMEOUT: Timeout for streaming responses\n * - RETRY_ATTEMPTS: Number of retries on failure\n * - RETRY_DELAY: Base delay between retries\n * \n * @example\n * // Check file size\n * if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n *   throw new Error('File too large');\n * }\n * \n * // Configure retry\n * await retryWithBackoff(\n *   apiCall,\n *   CONSTANTS.RETRY_ATTEMPTS,\n *   CONSTANTS.RETRY_DELAY\n * );\n */\nexport const CONSTANTS = {\n  /** Maximum file size in bytes (10MB) */\n  MAX_FILE_SIZE: 10 * 1024 * 1024,\n  \n  /** Accepted MIME types for file uploads */\n  ACCEPTED_FILE_TYPES: [\n    // Documents\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n    // Images\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n  ],\n  \n  /** Maximum characters per message */\n  MAX_MESSAGE_LENGTH: 4000,\n  \n  /** API request timeout in milliseconds (30s) */\n  API_TIMEOUT: 30000,\n  \n  /** Streaming request timeout in milliseconds (60s) */\n  STREAM_TIMEOUT: 60000,\n  \n  /** Number of retry attempts for failed requests */\n  RETRY_ATTEMPTS: 3,\n  \n  /** Base delay between retries in milliseconds (1s) */\n  RETRY_DELAY: 1000,\n} as const;","/**\n * Agent Store - Chatbot Management\n * \n * This store manages all agent (chatbot) related state and operations.\n * Agents are the core entities in CustomGPT - each agent is a trained\n * chatbot with its own knowledge base and settings.\n * \n * Features:\n * - CRUD operations for agents\n * - Persistent state using localStorage\n * - Auto-selection of first agent\n * - Agent statistics fetching\n * - License management support\n * \n * State Persistence:\n * - Uses Zustand persist middleware\n * - Stores: agents list and current selection\n * - Survives page refreshes\n * \n * Features:\n * - Multi-format API response handling with backward compatibility\n * - Automatic agent state synchronization across operations\n * - Optimistic UI updates for seamless user experience\n * - Comprehensive error handling with graceful recovery\n */\n\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { AgentStore, Agent } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useConversationStore } from './conversations';\nimport { useMessageStore } from './messages';\n\n/**\n * Agent Store Implementation\n * \n * Persisted to localStorage with key 'customgpt-agent-store'\n * Automatically hydrates on app load\n */\nexport const useAgentStore = create<AgentStore>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      agents: [],\n      currentAgent: null,\n      loading: false,\n      error: null,\n      paginationMeta: undefined,\n\n      /**\n       * Fetch agents from the API with enterprise-scale pagination\n       * \n       * Strategy for 1000+ projects:\n       * - Load first batch (100 items) immediately for UI responsiveness\n       * - Load additional batches as needed via loadMoreAgents()\n       * - Auto-selects first agent if none selected\n       * - Maintains total count for pagination UI\n       */\n      fetchAgents: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Load first batch with larger page size for better UX\n          const response = await client.getAgents({ page: 1, per_page: 100 });\n          \n          let agents: Agent[] = [];\n          let total = 0;\n          let hasMore = false;\n          \n          // Handle different response formats from the API\n          if (response && typeof response === 'object') {\n            // Check for nested pagination format: { data: { data: [...], total: ..., current_page: ... } }\n            if ('data' in response && (response as any).data && typeof (response as any).data === 'object' && 'data' in (response as any).data) {\n              const nestedData = (response as any).data;\n              agents = Array.isArray(nestedData.data) ? nestedData.data : [];\n              total = nestedData.total || agents.length;\n              const currentPage = nestedData.current_page || 1;\n              const perPage = nestedData.per_page || 100;\n              hasMore = nestedData.last_page ? currentPage < nestedData.last_page : false;\n            } else if ('data' in response && 'total' in response) {\n              // Flat paginated response format\n              const paginatedResponse = response as { data: Agent[]; total: number; page: number; per_page: number };\n              agents = paginatedResponse.data;\n              total = paginatedResponse.total;\n              hasMore = total > paginatedResponse.per_page;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              agents = (response as any).data;\n              total = agents.length;\n              hasMore = false;\n            } else if (Array.isArray(response)) {\n              // Legacy format: [...]\n              agents = response as Agent[];\n              total = agents.length;\n              hasMore = false;\n            }\n          }\n          \n          set({ \n            agents, \n            loading: false,\n            // Always update pagination metadata with fresh data\n            paginationMeta: { \n              currentPage: 1, \n              totalCount: total, \n              hasMore,\n              perPage: 100\n            },\n            // Auto-select first agent if none selected\n            currentAgent: get().currentAgent || (agents.length > 0 ? agents[0] : null)\n          });\n        } catch (error) {\n          console.error('Failed to fetch agents:', error);\n          set({ \n            agents: [], \n            error: error instanceof Error ? error.message : 'Failed to fetch agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Load more agents for large datasets (enterprise accounts)\n       * Appends to existing agents list\n       */\n      loadMoreAgents: async () => {\n        const state = get();\n        const paginationMeta = (state as any).paginationMeta;\n        \n        if (!paginationMeta?.hasMore || state.loading) return;\n        \n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const nextPage = paginationMeta.currentPage + 1;\n          \n          const response = await client.getAgents({ \n            page: nextPage, \n            per_page: paginationMeta.perPage \n          });\n          \n          if (response && 'data' in response) {\n            let newAgents: Agent[] = [];\n            let responseTotal = 0;\n            let responsePage = nextPage;\n            \n            // Handle nested format: { data: { data: [...] } }\n            if (response.data && typeof response.data === 'object' && 'data' in response.data) {\n              const nestedData = (response as any).data;\n              newAgents = Array.isArray(nestedData.data) ? nestedData.data : [];\n              responseTotal = nestedData.total || 0;\n              responsePage = nestedData.current_page || nextPage;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              newAgents = (response as any).data;\n              responseTotal = paginationMeta.totalCount;\n            }\n            \n            set(state => ({ \n              agents: [...state.agents, ...newAgents],\n              loading: false,\n              paginationMeta: {\n                ...paginationMeta,\n                currentPage: responsePage,\n                hasMore: (responsePage * paginationMeta.perPage + newAgents.length) < responseTotal\n              }\n            }));\n          }\n        } catch (error) {\n          console.error('Failed to load more agents:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to load more agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Search for a specific agent by ID or name\n       * Useful for enterprise accounts with many projects\n       */\n      findAgent: async (query: string | number) => {\n        try {\n          const client = getClient();\n          \n          // If query is numeric, assume it's an ID and try to fetch directly\n          if (typeof query === 'number' || /^\\d+$/.test(query.toString())) {\n            const id = typeof query === 'number' ? query : parseInt(query.toString());\n            try {\n              const response = await client.getAgent(id);\n              const agent = response.data;\n              \n              // Add to agents list if not already present\n              const state = get();\n              if (!state.agents.find(a => a.id === agent.id)) {\n                set(state => ({ \n                  agents: [agent, ...state.agents] \n                }));\n              }\n              \n              return agent;\n            } catch {\n              // ID not found or no access, fall through to search\n            }\n          }\n          \n          // For text search, we'd need a search endpoint (not implemented in current API)\n          // For now, search within loaded agents\n          const state = get();\n          const found = state.agents.find(agent => \n            agent.project_name.toLowerCase().includes(query.toString().toLowerCase()) ||\n            agent.id.toString() === query.toString()\n          );\n          \n          return found || null;\n        } catch (error) {\n          console.error('Failed to find agent:', error);\n          return null;\n        }\n      },\n\n      /**\n       * Create a new agent\n       * \n       * @param data - Agent creation data\n       * @param data.project_name - Display name for the agent\n       * @param data.sitemap_path - URL for sitemap-based training\n       * @param data.files - Files for file-based training\n       * @param data.is_shared - Whether agent is publicly accessible\n       * \n       * Behavior:\n       * - Adds new agent to beginning of list\n       * - Auto-selects the new agent\n       * - Returns the created agent\n       * - Throws error on failure\n       */\n      createAgent: async (data: {\n        project_name: string;\n        sitemap_path?: string;\n        files?: File[];\n        is_shared?: boolean;\n      }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createAgent(data);\n          const newAgent = response.data;\n          \n          // Optimistic update - add to list and select immediately\n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to create agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create agent',\n            loading: false \n          });\n          throw error; // Re-throw for component error handling\n        }\n      },\n\n      /**\n       * Select an agent as the current active agent\n       * This agent will be used for all chat operations\n       * \n       * @param agent - The agent to select\n       */\n      selectAgent: async (agent: Agent) => {\n        // Clear conversation state when switching agents\n        const conversationStore = useConversationStore.getState();\n        const messageStore = useMessageStore.getState();\n        \n        // Set the new agent first\n        set({ currentAgent: agent });\n        \n        // Clear current conversation to show welcome screen\n        conversationStore.selectConversation(null);\n        \n        // Clear all messages from the previous agent\n        messageStore.clearMessages();\n        \n        // Fetch conversations for the new agent\n        try {\n          await conversationStore.fetchConversations(agent.id);\n        } catch (error) {\n          console.error('Failed to fetch conversations for new agent:', error);\n          // Even if fetch fails, we've already cleared the old state\n        }\n      },\n\n      /**\n       * Manually set the agents list\n       * Used for optimistic updates or manual state management\n       * \n       * Features:\n       * - Validates current agent still exists\n       * - Auto-selects first agent if current is removed\n       * - Maintains agent selection when possible\n       * \n       * @param agents - New list of agents\n       */\n      setAgents: (agents: Agent[]) => {\n        set({ \n          agents,\n          // Update current agent if it's no longer in the list\n          currentAgent: (() => {\n            const current = get().currentAgent;\n            if (!current) return agents.length > 0 ? agents[0] : null;\n            \n            // Check if current agent still exists in new list\n            const stillExists = agents.find(a => a.id === current.id);\n            return stillExists || (agents.length > 0 ? agents[0] : null);\n          })()\n        });\n      },\n      \n      updateAgent: async (id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateAgent(id, data);\n          const updatedAgent = response.data;\n          \n          set(state => ({\n            agents: state.agents.map(a => a.id === id ? updatedAgent : a),\n            currentAgent: state.currentAgent?.id === id ? updatedAgent : state.currentAgent,\n            loading: false,\n          }));\n          \n          return updatedAgent;\n        } catch (error) {\n          console.error('Failed to update agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      deleteAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteAgent(id);\n          \n          set(state => {\n            const filteredAgents = state.agents.filter(a => a.id !== id);\n            return {\n              agents: filteredAgents,\n              currentAgent: state.currentAgent?.id === id \n                ? (filteredAgents.length > 0 ? filteredAgents[0] : null)\n                : state.currentAgent,\n              loading: false,\n            };\n          });\n        } catch (error) {\n          console.error('Failed to delete agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      replicateAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.replicateAgent(id);\n          const newAgent = response.data;\n          \n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to replicate agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to replicate agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      getAgentStats: async (id: number) => {\n        try {\n          const client = getClient();\n          const response = await client.getAgentStats(id);\n          return response.data;\n        } catch (error) {\n          console.error('Failed to get agent stats:', error);\n          throw error;\n        }\n      },\n    }),\n    {\n      name: 'customgpt-agents',\n      partialize: (state) => ({\n        currentAgent: state.currentAgent,\n      }),\n    }\n  )\n);","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConversationStore, Conversation } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateConversationName } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n// Session-based conversation isolation\nconst getSessionId = (): string => {\n  // Check if we're running on the server\n  if (typeof window === 'undefined') {\n    return 'server-session';\n  }\n  \n  // Use the current widget session if available\n  if ((window as any).__customgpt_current_session) {\n    return (window as any).__customgpt_current_session;\n  }\n  \n  // Check if we're in widget mode with session configuration\n  if ((window as any).__customgpt_session) {\n    return (window as any).__customgpt_session.sessionId;\n  }\n  \n  // Check for instance-specific sessions (for isolated widgets)\n  if ((window as any).__customgpt_sessions) {\n    // For isolated widgets, we need to determine which session to use\n    // This is tricky since stores are global - we'll use the most recent session\n    const sessions = (window as any).__customgpt_sessions;\n    const sessionIds = Object.keys(sessions);\n    if (sessionIds.length > 0) {\n      // Return the most recently created session\n      return sessionIds[sessionIds.length - 1];\n    }\n  }\n  \n  // Fallback to browser-based session ID\n  try {\n    let sessionId = sessionStorage.getItem('customgpt_session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      sessionStorage.setItem('customgpt_session_id', sessionId);\n    }\n    return sessionId;\n  } catch (e) {\n    // Fallback if sessionStorage is not available\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n};\n\nexport const useConversationStore = create<ConversationStore>()(\n  persist(\n    (set, get) => ({\n      conversations: [],\n      currentConversation: null,\n      loading: false,\n      error: null,\n      // Pagination state\n      currentPage: 1,\n      totalPages: 1,\n      totalConversations: 0,\n      perPage: 20,\n      // Sorting and filtering state\n      sortOrder: 'desc' as const,\n      sortBy: 'id',\n      userFilter: 'all' as const,\n\n      fetchConversations: async (projectId: number, params?: {\n        page?: number;\n        per_page?: number;\n        order?: 'asc' | 'desc';\n        orderBy?: string;\n        userFilter?: 'all' | string;\n      }) => {\n        logger.info('CONVERSATIONS', 'Fetching conversations', { projectId, params });\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          // Merge params with current state\n          const queryParams = {\n            page: params?.page ?? get().currentPage,\n            per_page: params?.per_page ?? get().perPage,\n            order: params?.order ?? get().sortOrder,\n            orderBy: params?.orderBy ?? get().sortBy,\n            userFilter: params?.userFilter ?? get().userFilter,\n          };\n          \n          const response = await client.getConversations(projectId, queryParams);\n          logger.info('CONVERSATIONS', 'API response received', { \n            projectId,\n            responseType: typeof response,\n            hasData: !!(response as any)?.data,\n            dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n          });\n          \n          // Handle different response formats\n          let conversations = [];\n          let paginationData = null;\n          \n          if (response && typeof response === 'object') {\n            // Standard paginated response format\n            if ((response as any).data && (response as any).data.data) {\n              conversations = (response as any).data.data;\n              paginationData = (response as any).data;\n            } else if (Array.isArray((response as any).data)) {\n              conversations = (response as any).data;\n            } else if (Array.isArray(response)) {\n              conversations = response;\n            }\n          }\n          \n          logger.info('CONVERSATIONS', 'Processed conversations', {\n            count: conversations.length,\n            paginationData,\n            conversations: conversations.map((c: any) => ({ \n              id: c.id, \n              name: c.name,\n              messagesCount: c.messages?.length || 0 \n            }))\n          });\n          \n          // Update state with conversations and pagination data\n          set({ \n            conversations, \n            loading: false,\n            // Update pagination state if available\n            currentPage: paginationData?.current_page ?? 1,\n            totalPages: paginationData?.last_page ?? 1,\n            totalConversations: paginationData?.total ?? conversations.length,\n            // Update sorting/filtering if params were provided\n            ...(params?.order && { sortOrder: params.order }),\n            ...(params?.orderBy && { sortBy: params.orderBy }),\n            ...(params?.userFilter && { userFilter: params.userFilter }),\n          });\n        } catch (error) {\n          logger.error('CONVERSATIONS', 'Failed to fetch conversations', error, {\n            projectId,\n            errorType: error instanceof Error ? error.constructor.name : typeof error,\n            status: (error as any)?.status,\n            message: (error as any)?.message\n          });\n          // Don't clear existing conversations on error - preserve local state\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to fetch conversations',\n            loading: false,\n            // Keep existing conversations instead of clearing them\n          });\n        }\n      },\n\n      createConversation: async (projectId: number, name?: string) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createConversation(projectId, name ? { name } : undefined);\n          const newConversation = response.data;\n          \n          set(state => ({ \n            conversations: [newConversation, ...state.conversations],\n            currentConversation: newConversation,\n            loading: false,\n          }));\n        } catch (error) {\n          console.error('Failed to create conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      selectConversation: (conversation: Conversation | null) => {\n        set({ currentConversation: conversation });\n      },\n\n      deleteConversation: async (conversationId: string | number) => {\n        const { conversations, currentConversation } = get();\n        const conversation = conversations.find(c => c.id.toString() === conversationId.toString());\n        \n        if (!conversation) return;\n\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteConversation(conversation.project_id, conversation.session_id);\n          \n          const updatedConversations = conversations.filter(c => c.id.toString() !== conversationId.toString());\n          \n          set({ \n            conversations: updatedConversations,\n            currentConversation: currentConversation?.id.toString() === conversationId.toString() \n              ? (updatedConversations.length > 0 ? updatedConversations[0] : null)\n              : currentConversation,\n            loading: false,\n          });\n        } catch (error) {\n          console.error('Failed to delete conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      updateConversation: async (conversationId: number, sessionId: string, data: { name: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateConversation(conversationId, sessionId, data);\n          const updatedConversation = response.data;\n          \n          set(state => ({ \n            conversations: state.conversations.map(c => \n              c.id === conversationId ? updatedConversation : c\n            ),\n            currentConversation: state.currentConversation?.id === conversationId \n              ? updatedConversation \n              : state.currentConversation,\n            loading: false,\n          }));\n        } catch (error) {\n          console.error('Failed to update conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      // Auto-create conversation if none exists\n      ensureConversation: async (projectId: number, firstMessage?: string) => {\n        const { currentConversation } = get();\n        \n        // If we have a current conversation for this project, use it\n        if (currentConversation && currentConversation.project_id === projectId) {\n          return currentConversation;\n        }\n        \n        // If no current conversation, always create a new one\n        // This ensures that seeing the welcome screen (currentConversation = null) \n        // always results in starting a fresh conversation\n        const name = firstMessage \n          ? generateConversationName(firstMessage)\n          : `Chat ${new Date().toLocaleDateString()}`;\n          \n        await get().createConversation(projectId, name);\n        return get().currentConversation!;\n      },\n    }),\n    {\n      name: `customgpt-conversations-${getSessionId()}`,\n      partialize: (state) => ({\n        conversations: state.conversations,\n        // Don't persist currentConversation to always start fresh\n      }),\n      onRehydrateStorage: () => (state) => {\n        if (state) {\n          // Ensure conversations is an array\n          if (!Array.isArray(state.conversations)) {\n            state.conversations = [];\n          }\n          \n          // Clear current conversation on fresh app load to start with welcome screen\n          state.currentConversation = null;\n        }\n      },\n    }\n  )\n);","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t30: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = Object(typeof self !== 'undefined' ? self : this)[\"webpackChunkCustomGPTWidget\"] = Object(typeof self !== 'undefined' ? self : this)[\"webpackChunkCustomGPTWidget\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [96], () => (__webpack_require__(4784)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["root","factory","exports","module","define","amd","self","this","deferred","leafPrototypes","getProto","webpackEmptyContext","req","e","Error","code","keys","resolve","id","MESSAGES_STORAGE_KEY","saveMessagesToStorage","conversationId","messages","stored","localStorage","getItem","cache","JSON","parse","setItem","stringify","error","async","fetchCitationDetails","citationIds","projectId","client","getClient","citations","i","length","citationId","response","getCitation","data","push","toString","index","title","source","url","content","description","logger","warn","message","String","useMessageStore","create","set","get","Map","streamingMessage","isStreaming","loading","sendMessage","files","window","__customgpt_demo_mode","agentStore","useAgentStore","getState","conversationStore","useConversationStore","currentAgent","info","agentId","agentName","project_name","messageLength","hasFiles","conversation","ensureConversation","sessionId","session_id","hasSessionId","isNew","message_count","userMessage","generateId","role","timestamp","Date","toISOString","status","addMessage","assistantMessage","sourceIds","Promise","all","map","file","uploadFile","filter","fileCount","messageContent","substring","hasSourceIds","requestData","prompt","source_ids","trim","sendMessageStream","chunk","type","hasContent","contentLength","contentPreview","updateStreamingMessage","current","Array","isArray","then","citationDetails","updatedCurrent","streamError","errorMessage","stream","finalMessage","messageData","openai_response","lastUserMessage","m","pop","details","user_id","conversation_id","updated_at","prompt_id","metadata","user_ip","user_agent","external_id","request_source","undefined","fallbackError","errorText","getMessages","apiMessages","latestApiMessage","created_at","user_query","existingCitations","response_feedback","reaction","feedback","messageId","hasDetails","citationCount","enrichmentError","setupError","errorType","constructor","name","stack","currentAgentFor403","is_chat_active","state","newMessages","conversationMessages","existingIndex","findIndex","clearMessages","delete","updateMessageFeedback","currentConversation","find","promptId","promptIdMatch","match","parseInt","toast","updatedMessage","feedbackValue","success","getMessagesForConversation","cancelStreaming","globalStreamManager","cancelAllStreams","loadMessages","has","startsWith","conversations","c","availableConversations","responseType","hasData","dataLength","messagesCount","messageTypes","formattedMessages","msg","baseTimestamp","Math","random","formattedCount","sort","a","b","getTime","firstMessageTime","lastMessageTime","localSendingMessages","now","mergedMessages","localMsg","insertIndex","splice","cachedMessages","loadMessagesFromStorage","messageCount","useConfigStore","persist","apiKey","baseURL","theme","setApiKey","key","setBaseURL","setTheme","document","documentElement","className","partialize","onRehydrateStorage","useUIStore","sidebarOpen","settingsOpen","fontSize","setSidebarOpen","open","setSettingsOpen","setFontSize","size","classList","remove","add","formatDate","date","split","getDefaultDateRange","endDate","startDate","setDate","getDate","useAnalyticsStore","analytics","dateRange","fetchAnalytics","trafficReport","queriesReport","conversationsReport","analysisReport","getTrafficReport","getQueriesReport","getConversationsReport","getAnalysisReport","analyticsData","total","active","floor","trend","item","created_at_interval","count","Number","queries_number","queries","successful","query_status","s","failed","avgResponseTime","topQueries","traffic","uniqueUsers","sources","reduce","acc","request_source_number","pageViews","avgSessionDuration","bounceRate","users","statistics","totalMessages","totalConversations","avgMessagesPerConversation","average_queries_per_conversation","satisfactionRate","responseAccuracy","setDateRange","exportAnalytics","format","jsonData","blob","Blob","URL","createObjectURL","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","reset","usePageStore","pages","paginationInfo","current_page","per_page","last_page","queryParams","page","limit","order","crawl_status","index_status","fetchPages","isClientInitialized","getPages","deletePage","pageId","reindexPage","setQueryParams","params","useSourceStore","currentSource","searchQuery","sortBy","sortOrder","syncStatus","syncing","fetchSources","getSources","allSources","sitemaps","forEach","apiSource","project_id","settings","sitemap_path","uploads","fetchSource","sourceId","uploadSources","uploadPromises","reject","updateSource","updates","deleteSource","bulkDelete","includes","syncSources","progress","setSearchQuery","query","setFilter","selectSource","useProfileStore","profile","fetchProfile","getUserProfile","updateProfile","profilePhoto","formData","FormData","append","updateUserProfile","activeRequests","useProjectSettingsStore","settingsLoading","settingsError","plugins","pluginsLoading","pluginsError","stats","statsLoading","statsError","fetchSettings","requestKey","getAgentSettings","updateSettings","settingsUpdate","Object","entries","value","question","File","updateAgentSettings","fetchPlugins","getProjectPlugins","pluginsData","updatePlugin","pluginId","enabled","updateProjectPlugin","plugin","fetchStats","getAgentStats","statsData","useLicenseStore","licenses","fetchLicenses","getLicenses","dataType","fullResponse","l","errorStatus","errorCode","fullError","createLicense","dataStructure","licenseKey","newLicense","license","licenseName","updateLicense","licenseId","deleteLicense","clearError","initializeStores","cleanupStores","StreamHandler","config","_defineProperty","timeout","retryAttempts","retryDelay","processStream","callbacks","abortController","AbortController","currentMessage","isComplete","reader","getReader","decoder","TextDecoder","buffer","timeoutId","setTimeout","cancel","onError","done","read","onComplete","decode","lines","line","processLine","clearTimeout","releaseLock","parseStreamChunk","onChunk","citation","onCitation","abort","getCurrentMessage","maxConcurrentStreams","startStream","streamId","streams","cancelStream","handler","clear","getActiveStreams","from","getStreamStatus","exists","getActiveStreamCount","proxyClient","request","endpoint","options","requestId","method","apiRequest","controller","abortControllers","headers","fetch","signal","responseData","json","ok","apiResponse","apiError","streamRequest","text","cancelRequest","cancelAllRequests","getAgents","URLSearchParams","queryString","createAgent","getAgent","updateAgent","deleteAgent","replicateAgent","isFormData","getConversations","orderBy","userFilter","createConversation","updateConversation","deleteConversation","slice","getMessageById","previewCitationFile","interval","getPageMetadata","updatePageMetadata","getLicense","createSitemapSource","executive_js","data_refresh_frequency","create_new_pages","remove_unexist_pages","refresh_existing_pages","uploadFileSource","updateSourceSettings","instantSyncSource","getUserLimits","buttonVariants","cva","variants","variant","default","destructive","outline","secondary","ghost","link","sm","lg","icon","defaultVariants","Button","React","asChild","props","ref","_jsx","cn","displayName","sizeVariants","xs","container","md","xl","shapeVariants","circle","rounded","square","Avatar","agent","src","alt","shape","fallback","isSelected","imageError","setImageError","avatarUrl","chatbot_avatar","altText","sizeClasses","shapeClass","backgroundClass","children","handleImageError","renderFallbackIcon","iconClass","User","Bot","AgentAvatar","UserAvatar","CitationCard","isExpanded","onToggle","onClick","onPreviewClick","_jsxs","ChevronDown","AnimatePresence","motion","div","initial","height","opacity","animate","exit","transition","duration","target","rel","ExternalLink","FileText","CitationList","onCitationClick","maxVisible","expanded","setExpanded","useState","Set","showAll","setShowAll","visibleCitations","hasMore","BookOpen","idx","y","delay","newExpanded","toggleExpanded","MessageDetails","setIsExpanded","handleCopyValue","copyToClipboard","Info","ChevronUp","detailsText","Copy","DetailRow","label","onCopy","toLocaleString","truncate","CodeBlock","language","copied","setCopied","SyntaxHighlighter","style","oneDark","customStyle","margin","borderRadius","StreamingCursor","MessageContent","cleanedContent","replace","ReactMarkdown","remarkPlugins","remarkGfm","components","exec","MessageActions","onFeedback","setFeedback","handleFeedback","ThumbsUp","ThumbsDown","handleRegenerate","RotateCw","Message","isLast","isUser","formatTimestamp","Spinner","Loader2","Skeleton","LoadingOverlay","visible","blur","MessageSkeleton","isAssistant","_","ConversationSkeleton","TooltipProvider","TooltipPrimitive","Tooltip","TooltipTrigger","TooltipContent","sideOffset","VoiceButton","disabled","Mic","FileChip","onRemove","fileIcon","getFileIcon","scale","formatFileSize","_Fragment","AlertCircle","width","X","FileUploadButton","onUpload","fileInputRef","useRef","multiple","accept","CONSTANTS","ACCEPTED_FILE_TYPES","join","onChange","handleClick","Paperclip","ChatInput","onSend","placeholder","maxLength","MAX_MESSAGE_LENGTH","onVoiceClick","input","setInput","setFiles","isDragOver","setIsDragOver","textareaRef","adjustTextareaHeight","useCallback","textarea","scrollHeight","maxHeight","min","handleSubmit","preventDefault","fileObjects","f","focus","handleFileUpload","newFiles","uploadFiles","MAX_FILE_SIZE","isFileTypeAllowed","prev","simulateUpload","setInterval","clearInterval","round","getRootProps","getInputProps","isDragActive","useDropzone","onDrop","noClick","noKeyboard","maxSize","onDragEnter","onDragLeave","canSend","some","Upload","removeFile","fileId","onSubmit","onKeyDown","shiftKey","rows","overflowY","Send","TypingIndicator","iconSizeClasses","display","parent","parentElement","innerHTML","AgentItem","onSelect","onSettingsClick","Check","stopPropagation","Settings","AgentSelector","showSettings","isOpen","setIsOpen","isSelectingAgent","setIsSelectingAgent","loadingSettings","setLoadingSettings","dropdownRef","agents","fetchAgents","loadMoreAgents","selectAgent","setAgents","paginationMeta","useEffect","handleClickOutside","event","contains","addEventListener","removeEventListener","handleRefresh","handleSelectAgent","agentsNeedingSettings","agentsToLoad","newSet","settingsPromises","results","updatedAgents","result","r","fetchAgentSettings","RefreshCw","willOpen","location","BarChart3","totalCount","CitationDetailsModal","onClose","setLoading","setError","citationData","setCitationData","effectiveProjectId","hasImage","image","err","Loader","Globe","ImageIcon","CitationFilePreview","fileName","fileContent","setFileContent","contentType","setContentType","fetchFilePreview","content_type","navigator","clipboard","writeText","handleDownload","Download","ConversationManager","maxConversations","currentConversationId","onConversationChange","onCreateConversation","refreshKey","setConversations","editingId","setEditingId","editTitle","setEditTitle","loadConversations","parsed","handleEditSave","updated","MessageCircle","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","handleCreateConversation","Plus","autoFocus","handleSelectConversation","createdAt","toLocaleDateString","handleEditStart","Edit2","filtered","handleDelete","Trash2","MessageErrorDisplay","statusCode","propStatusCode","onRetry","parsedStatusCode","statusMatch","parseError","finalStatusCode","errorDetails","getErrorDetails","iconClassName","textClassName","UserX","showSupport","toLowerCase","Search","CreditCard","supportUrl","ServerCrash","showRetry","XCircle","Icon","WidgetContext","createContext","WidgetProvider","widgetInstance","Provider","createMessageStore","isDemoMode","demoResponse","removeItem","convId","messageIndex","updatedMessages","createConversationStore","CONVERSATIONS_STORAGE_KEY","ACTIVITY_STORAGE_KEY","saveConversationsToStorage","loadConversationsFromStorage","loadActivityFromStorage","lastConversationActivity","currentPage","totalPages","perPage","fetchConversations","widgetConvKey","widgetConvIds","allConversations","paginationData","widgetConversations","conv","totalFromAPI","widgetSpecific","cached","cachedConversations","sessionConversations","totalCached","sessionSpecific","sessionIdForConv","newConversation","deleted_at","existingConvIds","widgetSessionId","selectConversation","activity","saveActivityToStorage","firstMessage","createAgentStore","AGENTS_STORAGE_KEY","SELECTED_AGENT_KEY","saveAgentsToStorage","saveSelectedAgentToStorage","loadAgents","widgetKey","widget","hasWidget","configuredAgentId","singleAgent","is_shared","team_id","cachedAgents","loadAgentsFromStorage","selectedAgentId","loadSelectedAgentFromStorage","selectedAgent","demoAgents","updatedAgent","messages_sent","users_interacted","last_message_at","WidgetStoreContext","WidgetStoreProvider","storesRef","messageStore","stores","useIsInWidgetContext","useContext","useWidgetStores","context","isInWidget","widgetStores","useStore","useGlobalMessageStore","useGlobalConversationStore","useGlobalAgentStore","Canvas","forwardRef","draw","internalRef","canvasRef","canvas","getContext","resizeCanvas","innerWidth","innerHeight","displayWidth","displayHeight","projCenterX","projCenterY","animationFrameId","render","requestAnimationFrame","cancelAnimationFrame","background","speechManager","debug","onUserSpeaking","stopSourceIfNeeded","audioLength","audio","audioDuration","processAudio","onReset","sourceIsStarted","stop","onProcessing","createAudioBlob","validate","sendData","wavBuffer","utils","encodeWAV","toFixed","conversationLength","conversationThusFar","audioSize","base64Encode","fromEntries","textHeader","base64Decode","transcript","onDebug","onTranscriptReceived","onResponseReceived","audioBlob","handleSuccess","handleError","audioContext","AudioContext","webkitAudioContext","arrayBuffer","audioBuffer","decodeAudioData","sampleRate","numberOfChannels","createBufferSource","connect","destination","start","onended","onAiSpeaking","clonedBlob","minDuration","valid","setCallbacks","hasCallbacks","setProjectId","str","TextEncoder","encode","btoa","fromCharCode","Uint8Array","base64","binaryStr","atob","bytes","char","charCodeAt","clearConversation","getConversationThusFar","sphereRad","g","framesPerRotation","setLightBlue","wait","particleList","first","recycleBin","turnAngle","sphereCenterZ","rgbString","p","outsideTest","nextParticle","sinAngle","cosAngle","rotX","rotZ","depthAlphaFactor","theta","phi","x0","y0","z0","addParticle","vx0","vy0","vz0","newParticle","next","x","z","velX","velY","velZ","age","dead","right","recycle","particleActions","PI","acos","sin","cos","attack","hold","decay","initValue","holdValue","lastValue","stuckTime","accelX","accelY","accelZ","fillStyle","fillRect","radius_sp","projX","projY","alpha","fLen","beginPath","arc","closePath","init","VoiceModal","projectName","setTranscript","debugMessages","setDebugMessages","isManualRecording","setIsManualRecording","mediaRecorder","setMediaRecorder","currentUserMessageId","setCurrentUserMessageId","vad","useMicVAD","preSpeechPadFrames","positiveSpeechThreshold","negativeSpeechThreshold","minSpeechFrames","startOnLoad","workletURL","modelURL","onSpeechStart","debugMsg","toLocaleTimeString","onSpeechEnd","onVADMisfire","onMisfire","errorMsg","handleToggleListening","errored","listening","recoveryError","pause","mediaDevices","getUserMedia","channelCount","echoCancellation","noiseSuppression","createMediaStreamSource","disconnect","close","getTracks","track","permissionError","vadError","handleManualRecording","recorder","MediaRecorder","chunks","ondataavailable","onstop","channelData","getChannelData","audioArray","Float32Array","hasAutoStarted","setHasAutoStarted","RotateLoader","color","reload","userSpeaking","DEFAULT_EXAMPLE_PROMPTS","ExamplePromptCard","WelcomeMessage","onPromptClick","exampleQuestions","setExampleQuestions","example_questions","questionCount","fetchExampleQuestions","MessageArea","scrollRef","isLoadingMessages","setIsLoadingMessages","prevConversationId","setPrevConversationId","selectedCitationId","setSelectedCitationId","citationModalOpen","setCitationModalOpen","previewCitationId","setPreviewCitationId","previewModalOpen","setPreviewModalOpen","scrollBehavior","scrollTo","top","behavior","handleCitationClick","citationIndex","citationTitle","handlePreviewClick","handleMessageFeedback","ChatHeader","mode","onAgentSettings","enableConversationManagement","conversationRefreshKey","ChatContainer","threadId","onMessage","setCurrentConversationId","isVoiceModalOpen","setIsVoiceModalOpen","agentCount","hasCurrentAgent","currentAgentName","initializeAgents","switchConversation","newConv","configuration","isAuthError","ConversationDetailsModal","onExport","onShare","formatFullTimestamp","weekday","year","month","day","hour","minute","second","timeZoneName","Hash","Calendar","Clock","created_by","Share2","DeleteConversationDialog","conversationName","onConfirm","onCancel","isDeleting","setIsDeleting","AlertTriangle","ConversationItem","onDelete","onRename","isEditing","setIsEditing","editName","setEditName","showMenu","setShowMenu","showDetails","setShowDetails","showDetailsModal","setShowDetailsModal","showDeleteDialog","setShowDeleteDialog","isLoading","setIsLoading","inputRef","menuRef","select","handleSaveEdit","onBlur","MessageSquare","MoreHorizontal","Edit3","shareUrl","origin","ConversationSidebar","isCollapsed","isCreating","setIsCreating","showSortFilter","setShowSortFilter","searchMode","setSearchMode","dateFilter","setDateFilter","isActive","filteredConversations","convDate","diffDays","handleRenameConversation","newName","Filter","Link","handleDeleteConversation","ChatLayout","showSidebar","sidebarCollapsed","setSidebarCollapsed","storeCurrentConversation","handleToggleSidebar","CustomGPTWidget","position","enableCitations","enableFeedback","isolateConversations","modePrefix","containerId","uniqueId","performance","substr","generateSessionId","instanceKey","__customgpt_widget_instance","__customgpt_sessions","__customgpt_session","agentsResponse","fallbackAgent","createContainer","require","currentConv","fullConversation","setState","__customgpt_widget_instances","__customgpt_active_widget_session","getElementById","setupFloatingStyles","assign","zIndex","boxShadow","overflow","backgroundColor","bottom","left","transform","createRoot","WidgetApp","currentConvId","handleClose","Toaster","closeButton","toastOptions","storeConversations","unshift","saveConversations","updateConversationTitle","newTitle","DOMException","cleanupOldConversations","recent","onOpen","toggle","destroy","unmount","parentNode","updateConfig","newConfig","refresh","isOpened","CustomGPTWidgetAPI","Logger","isClient","getInstance","instance","formatMessage","entry","level","category","formatted","toUpperCase","writeToFile","log","logs","getLogs","clearLogs","authCheck","authError","navigation","route","storeAction","store","action","inputs","twMerge","clsx","parseFloat","pow","fileType","allowedTypes","diffInMs","diffInMinutes","diffInHours","diffInDays","delta","choices","jsonError","generateConversationName","API_TIMEOUT","STREAM_TIMEOUT","RETRY_ATTEMPTS","RETRY_DELAY","nestedData","paginatedResponse","nextPage","newAgents","responseTotal","responsePage","findAgent","test","newAgent","filteredAgents","updatedConversations","updatedConversation","getSessionId","__customgpt_current_session","sessions","sessionIds","sessionStorage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","n","getter","__esModule","getPrototypeOf","obj","t","ns","def","indexOf","getOwnPropertyNames","definition","o","defineProperty","enumerable","globalThis","Function","prop","prototype","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","bind","__webpack_exports__"],"sourceRoot":""}