{"version":3,"file":"customgpt-widget.js","mappings":"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","sources":["webpack://CustomGPTWidget/webpack/universalModuleDefinition","webpack://CustomGPTWidget/webpack/runtime/chunk loaded","webpack://CustomGPTWidget/webpack/runtime/create fake namespace object","webpack://CustomGPTWidget/webpack/runtime/load script","webpack://CustomGPTWidget/./src/store/conversations.ts","webpack://CustomGPTWidget/./src/lib/utils.ts","webpack://CustomGPTWidget/./src/lib/voice/utils/math.ts","webpack://CustomGPTWidget/./src/lib/logger.ts","webpack://CustomGPTWidget/./src/lib/voice/themes/DefaultTheme.ts","webpack://CustomGPTWidget/./src/store/agents.ts","webpack://CustomGPTWidget/./src/lib/voice/utils/performance.ts","webpack://CustomGPTWidget/./src/lib/streaming/handler.ts","webpack://CustomGPTWidget/./src/lib/voice/themes/IVoiceTheme.ts","webpack://CustomGPTWidget/./src/lib/theme.ts","webpack://CustomGPTWidget/./src/store/config.ts","webpack://CustomGPTWidget/./src/store/ui.ts","webpack://CustomGPTWidget/./src/store/analytics.ts","webpack://CustomGPTWidget/./src/store/pages.ts","webpack://CustomGPTWidget/./src/store/sources.ts","webpack://CustomGPTWidget/./src/store/profile.ts","webpack://CustomGPTWidget/./src/store/project-settings.ts","webpack://CustomGPTWidget/./src/store/licenses.ts","webpack://CustomGPTWidget/./src/store/index.ts","webpack://CustomGPTWidget/./src/lib/voice/themes/PerformanceOptimizations.ts","webpack://CustomGPTWidget/./src/lib/voice/themes/BaseTheme.ts","webpack://CustomGPTWidget/./node_modules/.pnpm/onnxruntime-web@1.22.0/node_modules/onnxruntime-web/dist/ sync","webpack://CustomGPTWidget/./src/store/chat-settings.ts","webpack://CustomGPTWidget/./src/lib/constants/demo-limits.ts","webpack://CustomGPTWidget/./src/lib/analytics/usage-tracker.ts","webpack://CustomGPTWidget/./src/lib/constants/error-messages.ts","webpack://CustomGPTWidget/./src/lib/api/proxy-client.ts","webpack://CustomGPTWidget/./src/lib/api/direct-client.ts","webpack://CustomGPTWidget/./src/lib/api/client.ts","webpack://CustomGPTWidget/./src/store/messages.ts","webpack://CustomGPTWidget/./src/components/ui/button.tsx","webpack://CustomGPTWidget/./src/components/ui/avatar.tsx","webpack://CustomGPTWidget/./src/components/chat/MessageDetails.tsx","webpack://CustomGPTWidget/./src/components/chat/Message.tsx","webpack://CustomGPTWidget/./src/contexts/DemoModeContext.tsx","webpack://CustomGPTWidget/./src/components/ui/loading.tsx","webpack://CustomGPTWidget/./src/components/ui/tooltip.tsx","webpack://CustomGPTWidget/./src/components/voice/SpeechToTextButton.tsx","webpack://CustomGPTWidget/./src/components/voice/AnimatedVoiceIcon.tsx","webpack://CustomGPTWidget/./src/components/ui/dropdown-menu.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatInput.tsx","webpack://CustomGPTWidget/./src/components/chat/TypingIndicator.tsx","webpack://CustomGPTWidget/./src/components/chat/AgentSelector.tsx","webpack://CustomGPTWidget/./src/hooks/useMediaQuery.ts","webpack://CustomGPTWidget/./src/widget/debug-utils.ts","webpack://CustomGPTWidget/./src/store/widget-stores/messages.ts","webpack://CustomGPTWidget/./src/store/widget-stores/conversations.ts","webpack://CustomGPTWidget/./src/store/widget-stores/agents.ts","webpack://CustomGPTWidget/./src/widget/WidgetStoreContext.tsx","webpack://CustomGPTWidget/./src/widget/isolated-toast.tsx","webpack://CustomGPTWidget/./src/widget/WidgetContext.tsx","webpack://CustomGPTWidget/./src/components/chat/CitationDetailsModal.tsx","webpack://CustomGPTWidget/./src/components/chat/CitationFilePreview.tsx","webpack://CustomGPTWidget/./src/components/chat/ConversationManager.tsx","webpack://CustomGPTWidget/./src/components/chat/MessageErrorDisplay.tsx","webpack://CustomGPTWidget/./src/hooks/useWidgetStore.ts","webpack://CustomGPTWidget/./src/lib/voice/themes/ThemeManager.ts","webpack://CustomGPTWidget/./src/components/voice/Canvas.tsx","webpack://CustomGPTWidget/./src/lib/utils/throttle.ts","webpack://CustomGPTWidget/./src/store/voice-settings.ts","webpack://CustomGPTWidget/./src/components/voice/VoiceSettings.tsx","webpack://CustomGPTWidget/./src/lib/voice/streaming-tts.ts","webpack://CustomGPTWidget/./src/lib/voice/speech-manager.ts","webpack://CustomGPTWidget/./src/lib/voice/utils.ts","webpack://CustomGPTWidget/./src/lib/crypto.ts","webpack://CustomGPTWidget/./src/store/demo.ts","webpack://CustomGPTWidget/./src/components/voice/VoiceModal.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatContainer.tsx","webpack://CustomGPTWidget/./src/components/ui/select.tsx","webpack://CustomGPTWidget/./src/components/ui/simple-select.tsx","webpack://CustomGPTWidget/./src/components/chat/ConversationDetailsModal.tsx","webpack://CustomGPTWidget/./src/components/chat/DeleteConversationDialog.tsx","webpack://CustomGPTWidget/./src/components/chat/ConversationSidebar.tsx","webpack://CustomGPTWidget/./src/components/chat/ChatLayout.tsx","webpack://CustomGPTWidget/./src/widget/index.tsx","webpack://CustomGPTWidget/webpack/bootstrap","webpack://CustomGPTWidget/webpack/runtime/compat get default export","webpack://CustomGPTWidget/webpack/runtime/define property getters","webpack://CustomGPTWidget/webpack/runtime/ensure chunk","webpack://CustomGPTWidget/webpack/runtime/get javascript chunk filename","webpack://CustomGPTWidget/webpack/runtime/get mini-css chunk filename","webpack://CustomGPTWidget/webpack/runtime/global","webpack://CustomGPTWidget/webpack/runtime/hasOwnProperty shorthand","webpack://CustomGPTWidget/webpack/runtime/make namespace object","webpack://CustomGPTWidget/webpack/runtime/publicPath","webpack://CustomGPTWidget/webpack/runtime/jsonp chunk loading","webpack://CustomGPTWidget/webpack/runtime/nonce","webpack://CustomGPTWidget/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"CustomGPTWidget\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"CustomGPTWidget\"] = factory();\n\telse\n\t\troot[\"CustomGPTWidget\"] = factory();\n})(typeof self !== 'undefined' ? self : this, () => {\nreturn ","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; (typeof current == 'object' || typeof current == 'function') && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"CustomGPTWidget:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConversationStore, Conversation } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateConversationName } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n// Session-based conversation isolation\nconst getSessionId = (): string => {\n  // Check if we're running on the server\n  if (typeof window === 'undefined') {\n    return 'server-session';\n  }\n  \n  // Use the current widget session if available\n  if ((window as any).__customgpt_current_session) {\n    return (window as any).__customgpt_current_session;\n  }\n  \n  // Check if we're in widget mode with session configuration\n  if ((window as any).__customgpt_session) {\n    return (window as any).__customgpt_session.sessionId;\n  }\n  \n  // Check for instance-specific sessions (for isolated widgets)\n  if ((window as any).__customgpt_sessions) {\n    // For isolated widgets, we need to determine which session to use\n    // This is tricky since stores are global - we'll use the most recent session\n    const sessions = (window as any).__customgpt_sessions;\n    const sessionIds = Object.keys(sessions);\n    if (sessionIds.length > 0) {\n      // Return the most recently created session\n      return sessionIds[sessionIds.length - 1];\n    }\n  }\n  \n  // Fallback to browser-based session ID\n  try {\n    let sessionId = sessionStorage.getItem('customgpt_session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      sessionStorage.setItem('customgpt_session_id', sessionId);\n    }\n    return sessionId;\n  } catch (e) {\n    // Fallback if sessionStorage is not available\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n};\n\nexport const useConversationStore = create<ConversationStore>()(\n  persist(\n    (set, get) => ({\n      conversations: [],\n      currentConversation: null,\n      loading: false,\n      error: null,\n      // Pagination state\n      currentPage: 1,\n      totalPages: 1,\n      totalConversations: 0,\n      perPage: 20,\n      // Sorting and filtering state\n      sortOrder: 'desc' as const,\n      sortBy: 'id',\n      userFilter: 'all' as const,\n      // Client-side filtering state\n      allConversations: [], // Raw conversations from API\n      searchQuery: '',\n      searchMode: 'name' as const,\n      dateFilter: 'all' as const,\n\n      // Client-side filtering helper function\n      applyFilters: () => {\n        const state = get();\n        let filtered = [...state.allConversations];\n        \n        // Apply search filter\n        if (state.searchQuery.trim()) {\n          const query = state.searchQuery.toLowerCase().trim();\n          filtered = filtered.filter(conv => {\n            switch (state.searchMode) {\n              case 'name':\n                return conv.name.toLowerCase().includes(query);\n              case 'id':\n                return conv.id.toString().includes(query);\n              case 'session':\n                return conv.session_id.toLowerCase().includes(query);\n              default:\n                return conv.name.toLowerCase().includes(query);\n            }\n          });\n        }\n        \n        // Apply date filter\n        if (state.dateFilter !== 'all') {\n          const now = new Date();\n          const filterDate = new Date();\n          \n          switch (state.dateFilter) {\n            case 'today':\n              filterDate.setHours(0, 0, 0, 0);\n              break;\n            case 'week':\n              filterDate.setDate(now.getDate() - 7);\n              break;\n            case 'month':\n              filterDate.setDate(now.getDate() - 30);\n              break;\n          }\n          \n          filtered = filtered.filter(conv => {\n            const convDate = new Date(conv.updated_at);\n            return convDate >= filterDate;\n          });\n        }\n        \n        // Note: User filter and sorting are handled server-side by the API\n        // We don't apply them client-side to avoid conflicts\n        \n        set({ conversations: filtered });\n      },\n\n      // Update search filters\n      setSearchQuery: (query: string) => {\n        set({ searchQuery: query });\n        get().applyFilters();\n      },\n\n      setSearchMode: (mode: 'name' | 'id' | 'session') => {\n        set({ searchMode: mode });\n        get().applyFilters();\n      },\n\n      setDateFilter: (filter: 'all' | 'today' | 'week' | 'month') => {\n        set({ dateFilter: filter });\n        get().applyFilters();\n      },\n\n      fetchConversations: async (projectId: number, params?: {\n        page?: number;\n        per_page?: number;\n        order?: 'asc' | 'desc';\n        orderBy?: string;\n        userFilter?: 'all' | 'me' | string;\n        searchQuery?: string;\n        searchMode?: 'name' | 'id' | 'session';\n        dateFilter?: 'today' | 'week' | 'month';\n      }) => {\n        logger.info('CONVERSATIONS', 'Fetching conversations', { projectId, params });\n        set({ loading: true, error: null });\n        \n        // Update client-side filter state if provided\n        if (params?.searchQuery !== undefined) {\n          set({ searchQuery: params.searchQuery });\n        }\n        if (params?.searchMode !== undefined) {\n          set({ searchMode: params.searchMode });\n        }\n        if (params?.dateFilter !== undefined) {\n          set({ dateFilter: params.dateFilter });\n        }\n        \n        try {\n          const client = getClient();\n          // Only send API-supported parameters\n          const apiParams = {\n            page: params?.page ?? get().currentPage,\n            per_page: params?.per_page ?? get().perPage,\n            order: params?.order ?? get().sortOrder,\n            orderBy: params?.orderBy ?? get().sortBy,\n            userFilter: params?.userFilter ?? get().userFilter,\n          };\n          \n          const response = await client.getConversations(projectId, apiParams);\n          logger.info('CONVERSATIONS', 'API response received', { \n            projectId,\n            responseType: typeof response,\n            hasData: !!(response as any)?.data,\n            dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n          });\n          \n          // Handle different response formats\n          let conversations = [];\n          let paginationData = null;\n          \n          if (response && typeof response === 'object') {\n            // Standard paginated response format\n            if ((response as any).data && (response as any).data.data) {\n              conversations = (response as any).data.data;\n              paginationData = (response as any).data;\n            } else if (Array.isArray((response as any).data)) {\n              conversations = (response as any).data;\n            } else if (Array.isArray(response)) {\n              conversations = response;\n            }\n          }\n          \n          logger.info('CONVERSATIONS', 'Processed conversations', {\n            count: conversations.length,\n            paginationData,\n            conversations: conversations.map((c: any) => ({ \n              id: c.id, \n              name: c.name,\n              messagesCount: c.messages?.length || 0 \n            }))\n          });\n          \n          // Update state with conversations and pagination data\n          set({ \n            allConversations: conversations, // Store raw conversations from API\n            loading: false,\n            // Update pagination state if available\n            currentPage: paginationData?.current_page ?? 1,\n            totalPages: paginationData?.last_page ?? 1,\n            totalConversations: paginationData?.total ?? conversations.length,\n            // Update sorting/filtering if params were provided\n            ...(params?.order && { sortOrder: params.order }),\n            ...(params?.orderBy && { sortBy: params.orderBy }),\n            ...(params?.userFilter && { userFilter: params.userFilter }),\n          });\n          \n          // Apply client-side filters\n          get().applyFilters();\n        } catch (error) {\n          logger.error('CONVERSATIONS', 'Failed to fetch conversations', error, {\n            projectId,\n            errorType: error instanceof Error ? error.constructor.name : typeof error,\n            status: (error as any)?.status,\n            message: (error as any)?.message\n          });\n          // Don't clear existing conversations on error - preserve local state\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to fetch conversations',\n            loading: false,\n            // Keep existing conversations instead of clearing them\n          });\n        }\n      },\n\n      createConversation: async (projectId: number, name?: string) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createConversation(projectId, name ? { name } : undefined);\n          const newConversation = response.data;\n          \n          set(state => ({ \n            allConversations: [newConversation, ...state.allConversations],\n            currentConversation: newConversation,\n            loading: false,\n          }));\n          \n          // Apply client-side filters\n          get().applyFilters();\n        } catch (error) {\n          console.error('Failed to create conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      selectConversation: (conversation: Conversation | null) => {\n        set({ currentConversation: conversation });\n      },\n\n      deleteConversation: async (conversationId: string | number) => {\n        const { conversations, currentConversation } = get();\n        const conversation = conversations.find(c => c.id.toString() === conversationId.toString());\n        \n        if (!conversation) return;\n\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteConversation(conversation.project_id, conversation.session_id);\n          \n          const updatedAllConversations = get().allConversations.filter(c => c.id.toString() !== conversationId.toString());\n          \n          set({ \n            allConversations: updatedAllConversations,\n            currentConversation: currentConversation?.id.toString() === conversationId.toString() \n              ? (updatedAllConversations.length > 0 ? updatedAllConversations[0] : null)\n              : currentConversation,\n            loading: false,\n          });\n          \n          // Apply client-side filters\n          get().applyFilters();\n        } catch (error) {\n          console.error('Failed to delete conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      updateConversation: async (conversationId: number, sessionId: string, data: { name: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateConversation(conversationId, sessionId, data);\n          const updatedConversation = response.data;\n          \n          set(state => ({ \n            allConversations: state.allConversations.map(c => \n              c.id === conversationId ? updatedConversation : c\n            ),\n            currentConversation: state.currentConversation?.id === conversationId \n              ? updatedConversation \n              : state.currentConversation,\n            loading: false,\n          }));\n          \n          // Apply client-side filters\n          get().applyFilters();\n        } catch (error) {\n          console.error('Failed to update conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      // Auto-create conversation if none exists\n      ensureConversation: async (projectId: number, firstMessage?: string) => {\n        const { currentConversation } = get();\n        \n        // If we have a current conversation for this project, use it\n        if (currentConversation && currentConversation.project_id === projectId) {\n          return currentConversation;\n        }\n        \n        // If no current conversation, always create a new one\n        // This ensures that seeing the welcome screen (currentConversation = null) \n        // always results in starting a fresh conversation\n        const name = firstMessage \n          ? generateConversationName(firstMessage)\n          : `Chat ${new Date().toLocaleDateString()}`;\n          \n        await get().createConversation(projectId, name);\n        return get().currentConversation!;\n      },\n    }),\n    {\n      name: `customgpt-conversations-${getSessionId()}`,\n      partialize: (state) => ({\n        conversations: state.conversations,\n        allConversations: state.allConversations,\n        searchQuery: state.searchQuery,\n        searchMode: state.searchMode,\n        dateFilter: state.dateFilter,\n        // Don't persist currentConversation to always start fresh\n      }),\n      onRehydrateStorage: () => (state) => {\n        if (state) {\n          // Ensure conversations is an array\n          if (!Array.isArray(state.conversations)) {\n            state.conversations = [];\n          }\n          \n          // Ensure allConversations is an array\n          if (!Array.isArray(state.allConversations)) {\n            state.allConversations = [];\n          }\n          \n          // Ensure filter state is initialized\n          if (!state.searchQuery) state.searchQuery = '';\n          if (!state.searchMode) state.searchMode = 'name';\n          if (!state.dateFilter) state.dateFilter = 'all';\n          \n          // Clear current conversation on fresh app load to start with welcome screen\n          state.currentConversation = null;\n        }\n      },\n    }\n  )\n);","/**\n * Utility Functions Library\n * \n * Common utility functions used throughout the application.\n * These utilities handle:\n * - CSS class merging for Tailwind\n * - ID generation\n * - File operations\n * - Date/time formatting\n * - Clipboard operations\n * - HTML sanitization\n * - API helpers\n * \n * Features:\n * - Pure, reusable utility functions with full TypeScript support\n * - Comprehensive JSDoc documentation with usage examples\n * - Robust edge case handling and error recovery\n * - Optimized performance with configurable options\n * - Production-ready implementations for common operations\n */\n\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\nimport DOMPurify from 'dompurify';\n\n/**\n * Utility function for combining Tailwind CSS classes\n * \n * This function combines clsx and tailwind-merge to:\n * 1. Support conditional classes (clsx)\n * 2. Properly merge Tailwind classes (tailwind-merge)\n * \n * @example\n * cn('px-2 py-1', 'px-4') // Returns: 'py-1 px-4'\n * cn('text-red-500', condition && 'text-blue-500')\n * cn(['text-sm', 'font-bold'], { 'opacity-50': isDisabled })\n * \n * @param inputs - Class strings, conditionals, arrays, or objects\n * @returns Merged class string\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Generate a unique ID\n * \n * Creates a unique identifier using random string and timestamp.\n * Not cryptographically secure - use for UI elements only.\n * \n * @example\n * generateId() // Returns: 'a1b2c3d41234567890'\n * \n * @returns Unique string ID\n */\nexport function generateId(): string {\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\n}\n\n/**\n * Format file size in bytes to human readable format\n * \n * Converts byte values to appropriate units (KB, MB, GB).\n * Always shows 2 decimal places except for bytes.\n * \n * @example\n * formatFileSize(0) // Returns: '0 Bytes'\n * formatFileSize(1024) // Returns: '1 KB'\n * formatFileSize(1536) // Returns: '1.5 KB'\n * formatFileSize(1048576) // Returns: '1 MB'\n * \n * @param bytes - File size in bytes\n * @returns Formatted string with appropriate unit\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * Get file icon based on file type\n * \n * Returns an emoji icon based on the MIME type or file extension.\n * Used in file upload UI components.\n * \n * @example\n * getFileIcon('application/pdf') // Returns: '📄'\n * getFileIcon('image/png') // Returns: '🖼️'\n * getFileIcon('text/plain') // Returns: '📝'\n * getFileIcon('unknown/type') // Returns: '📎' (default)\n * \n * @param fileType - MIME type or file extension\n * @returns Emoji icon representing the file type\n */\nexport function getFileIcon(fileType: string): string {\n  const type = fileType.toLowerCase();\n  \n  // Document types\n  if (type.includes('pdf')) return '📄';\n  if (type.includes('word') || type.includes('doc')) return '📄';\n  if (type.includes('text') || type.includes('txt')) return '📝';\n  \n  // Media types\n  if (type.includes('image')) return '🖼️';\n  if (type.includes('video')) return '🎥';\n  if (type.includes('audio')) return '🎵';\n  \n  // Data types\n  if (type.includes('excel') || type.includes('sheet')) return '📊';\n  if (type.includes('powerpoint') || type.includes('presentation')) return '📈';\n  if (type.includes('json')) return '📋';\n  if (type.includes('csv')) return '📊';\n  \n  // Archive types\n  if (type.includes('zip') || type.includes('rar')) return '🗜️';\n  \n  // Default icon\n  return '📎';\n}\n\n/**\n * Validate file type against allowed types\n * \n * Checks if a file type is in the allowed list.\n * Case-insensitive partial matching.\n * \n * @example\n * const allowed = ['image/', 'application/pdf'];\n * isFileTypeAllowed('image/png', allowed) // Returns: true\n * isFileTypeAllowed('IMAGE/JPEG', allowed) // Returns: true (case-insensitive)\n * isFileTypeAllowed('text/plain', allowed) // Returns: false\n * \n * @param fileType - MIME type to check\n * @param allowedTypes - List of allowed MIME types or patterns\n * @returns Whether the file type is allowed\n */\nexport function isFileTypeAllowed(fileType: string, allowedTypes: readonly string[]): boolean {\n  return allowedTypes.some(type => fileType.toLowerCase().includes(type.toLowerCase()));\n}\n\n/**\n * Format timestamp to human readable format\n * \n * Converts ISO timestamps to relative time strings.\n * Shows relative time for recent dates, absolute date for older.\n * \n * @example\n * // Assuming current time is 2024-01-01 12:00:00\n * formatTimestamp('2024-01-01T11:59:30Z') // Returns: 'Just now'\n * formatTimestamp('2024-01-01T11:30:00Z') // Returns: '30m ago'\n * formatTimestamp('2024-01-01T08:00:00Z') // Returns: '4h ago'\n * formatTimestamp('2023-12-25T12:00:00Z') // Returns: '7d ago'\n * formatTimestamp('2023-11-01T12:00:00Z') // Returns: '11/1/2023'\n * \n * @param timestamp - ISO date string\n * @returns Human-readable time difference or date\n */\nexport function formatTimestamp(timestamp: string): string {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diffInMs = now.getTime() - date.getTime();\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n  \n  // Recent times shown as relative\n  if (diffInMinutes < 1) return 'Just now';\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n  if (diffInHours < 24) return `${diffInHours}h ago`;\n  if (diffInDays < 7) return `${diffInDays}d ago`;\n  \n  // Older times shown as absolute date\n  return date.toLocaleDateString();\n}\n\n/**\n * Copy text to clipboard\n * \n * Uses the modern Clipboard API with fallback error handling.\n * Returns success/failure for UI feedback.\n * \n * @example\n * const success = await copyToClipboard('Hello, world!');\n * if (success) {\n *   toast.success('Copied to clipboard');\n * } else {\n *   toast.error('Failed to copy');\n * }\n * \n * @param text - Text to copy to clipboard\n * @returns Promise resolving to success boolean\n */\nexport async function copyToClipboard(text: string): Promise<boolean> {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch (error) {\n    // Copy failed, return false status\n    console.error('Failed to copy to clipboard:', error);\n    return false;\n  }\n}\n\n/**\n * Sanitize HTML content\n * \n * Removes dangerous HTML/JS to prevent XSS attacks.\n * Safe for rendering user-generated content.\n * Skips sanitization on server-side (SSR).\n * \n * @example\n * const dirty = '<script>alert(\"XSS\")</script><p>Hello</p>';\n * sanitizeHtml(dirty) // Returns: '<p>Hello</p>'\n * \n * const safe = '<p>Hello <strong>world</strong></p>';\n * sanitizeHtml(safe) // Returns: '<p>Hello <strong>world</strong></p>'\n * \n * @param html - Raw HTML string\n * @returns Sanitized HTML safe for rendering\n */\nexport function sanitizeHtml(html: string): string {\n  if (typeof window === 'undefined') {\n    return html; // Skip sanitization on server side (no DOM)\n  }\n  \n  return DOMPurify.sanitize(html, {\n    ALLOWED_TAGS: ['p', 'br', 'strong', 'em', 'code', 'pre', 'a', 'ul', 'ol', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n    ALLOWED_ATTR: ['href', 'target', 'rel', 'class'],\n  });\n}\n\n/**\n * Debounce function\n * \n * Delays function execution until after wait milliseconds have\n * elapsed since the last time it was invoked. Useful for search\n * inputs, window resize handlers, etc.\n * \n * @example\n * const debouncedSearch = debounce((query: string) => {\n *   console.log('Searching for:', query);\n * }, 300);\n * \n * // Rapid calls...\n * debouncedSearch('a');    // Won't execute\n * debouncedSearch('ab');   // Won't execute\n * debouncedSearch('abc');  // Will execute after 300ms\n * \n * @param func - Function to debounce\n * @param wait - Milliseconds to delay\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(null, args), wait);\n  };\n}\n\n/**\n * Throttle function\n * \n * Ensures function is called at most once per specified time period.\n * First call executes immediately, subsequent calls are ignored until\n * the time period expires.\n * \n * @example\n * const throttledScroll = throttle(() => {\n *   console.log('Scroll position:', window.scrollY);\n * }, 100);\n * \n * // During rapid scrolling:\n * // t=0ms: executes immediately\n * // t=50ms: ignored (still in throttle period)\n * // t=100ms: executes (throttle period expired)\n * \n * @param func - Function to throttle\n * @param limit - Minimum milliseconds between calls\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  \n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func.apply(null, args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n/**\n * Truncate text to specified length\n * \n * Cuts text at the specified length and adds ellipsis.\n * Trims whitespace from the cut point.\n * \n * @example\n * truncateText('Hello, world!', 5) // Returns: 'Hello...'\n * truncateText('Short', 10) // Returns: 'Short'\n * truncateText('Hello   ', 5) // Returns: 'Hello...' (trimmed)\n * \n * @param text - Text to truncate\n * @param maxLength - Maximum length before truncation\n * @returns Truncated text with ellipsis if needed\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength).trim() + '...';\n}\n\n/**\n * Validate CustomGPT API key format\n * \n * Checks if the provided string matches the CustomGPT API key format.\n * Format: {digits}|{alphanumeric_string}\n * - At least 3 digits before the pipe\n * - At least 20 alphanumeric characters after the pipe\n * \n * @example\n * isValidApiKey('123|abcdefghijklmnopqrst') // Returns: true\n * isValidApiKey('7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x') // Returns: true\n * isValidApiKey('12|short') // Returns: false (too few digits/chars)\n * isValidApiKey('no-pipe') // Returns: false (wrong format)\n * isValidApiKey('') // Returns: false (empty)\n * \n * @param apiKey - API key string to validate\n * @returns Whether the API key is valid\n */\nexport function isValidApiKey(apiKey: string): boolean {\n  if (!apiKey || typeof apiKey !== 'string') {\n    return false;\n  }\n  \n  // Trim whitespace\n  apiKey = apiKey.trim();\n  \n  // CustomGPT API key format: starts with digits followed by | then alphanumeric string\n  // Example: 7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x\n  // Must have at least 3 digits, pipe, and at least 20 characters after pipe\n  return /^\\d{3,}\\|[a-zA-Z0-9]{20,}$/.test(apiKey);\n}\n\n/**\n * Parse streaming response chunk\n * \n * Handles various SSE (Server-Sent Events) formats from the CustomGPT API.\n * Supports both standard SSE format and raw JSON lines.\n * \n * Formats handled:\n * - SSE events: \"event: progress\", \"event: finish\"\n * - SSE data: \"data: {json}\", \"data: [DONE]\"\n * - Raw JSON: {\"content\": \"...\", \"citations\": [...]}\n * - Plain text: \"data: plain text content\"\n * \n * @example\n * parseStreamChunk('data: {\"content\": \"Hello\"}') \n * // Returns: { type: 'content', content: 'Hello' }\n * \n * parseStreamChunk('data: [DONE]')\n * // Returns: { type: 'done' }\n * \n * parseStreamChunk('event: finish')\n * // Returns: { type: 'done' }\n * \n * @param chunk - Raw chunk from SSE stream\n * @returns Parsed chunk object or null if should be skipped\n */\nexport function parseStreamChunk(chunk: string): any | null {\n  try {\n    \n    // Skip event lines - CustomGPT sends \"event: progress\" etc.\n    if (chunk.startsWith('event: ')) {\n      const eventType = chunk.slice(7).trim();\n      \n      // Handle specific events if needed\n      if (eventType === 'finish') {\n        return { type: 'done' };\n      }\n      \n      // Skip other event types\n      return null;\n    }\n    \n    // Handle SSE format\n    if (chunk.startsWith('data: ')) {\n      const data = chunk.slice(6).trim();\n      \n      if (data === '[DONE]' || data === 'DONE') return { type: 'done' };\n      \n      // CustomGPT might send plain text data instead of JSON\n      // Try to parse as JSON first\n      try {\n        const parsed = JSON.parse(data);\n        \n        // Handle different response formats\n        if (typeof parsed === 'object') {\n          // If it already has a type, return as is\n          if (parsed.type) {\n            return parsed;\n          }\n          \n          // Handle CustomGPT format where content might be a direct property\n          if (parsed.content !== undefined) {\n            return { type: 'content', content: parsed.content, citations: parsed.citations };\n          }\n          \n          // Handle citation-only responses\n          if (parsed.citations && !parsed.content) {\n            return { type: 'citation', citations: parsed.citations };\n          }\n          \n          // Handle message field (some APIs use 'message' instead of 'content')\n          if (parsed.message !== undefined) {\n            return { type: 'content', content: parsed.message, citations: parsed.citations };\n          }\n          \n          // Handle delta format (some streaming APIs use delta.content)\n          if (parsed.delta && parsed.delta.content !== undefined) {\n            return { type: 'content', content: parsed.delta.content, citations: parsed.citations };\n          }\n          \n          // Handle choices format (OpenAI-style streaming)\n          if (parsed.choices && parsed.choices[0] && parsed.choices[0].delta) {\n            const delta = parsed.choices[0].delta;\n            if (delta.content !== undefined) {\n              return { type: 'content', content: delta.content, citations: parsed.citations };\n            }\n          }\n        }\n        \n        // Return the parsed data as is if we can't determine the format\n        return parsed;\n      } catch (jsonError) {\n        // If JSON parsing fails, treat it as plain text content\n        return { type: 'content', content: data };\n      }\n    }\n    \n    // Handle raw JSON lines (no \"data: \" prefix)\n    if (chunk.trim().startsWith('{')) {\n      try {\n        const parsed = JSON.parse(chunk.trim());\n        \n        if (parsed.content !== undefined || parsed.citations !== undefined) {\n          return { \n            type: parsed.content ? 'content' : 'citation', \n            content: parsed.content,\n            citations: parsed.citations \n          };\n        }\n        \n        // Handle message field\n        if (parsed.message !== undefined) {\n          return { type: 'content', content: parsed.message, citations: parsed.citations };\n        }\n        \n        return parsed;\n      } catch (parseError) {\n        console.warn('Failed to parse raw JSON chunk:', parseError);\n      }\n    }\n    \n    // Handle plain text responses (fallback)\n    if (chunk.trim() && !chunk.includes('data:') && !chunk.startsWith('{')) {\n      return { type: 'content', content: chunk.trim() };\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Failed to parse stream chunk:', chunk, error);\n    return null;\n  }\n}\n\n/**\n * Extract inline citations from text\n * \n * Finds all citation references in format [1], [2], etc.\n * Returns the original text and array of citation numbers.\n * \n * @example\n * extractInlineCitations('Hello [1] world [2]!')\n * // Returns: { text: 'Hello [1] world [2]!', citations: [1, 2] }\n * \n * extractInlineCitations('No citations here')\n * // Returns: { text: 'No citations here', citations: [] }\n * \n * @param text - Text potentially containing citations\n * @returns Object with text and citation numbers\n */\nexport function extractInlineCitations(text: string): { text: string; citations: number[] } {\n  const citationRegex = /\\[(\\d+)\\]/g;\n  const citations: number[] = [];\n  let match;\n  \n  while ((match = citationRegex.exec(text)) !== null) {\n    citations.push(parseInt(match[1]));\n  }\n  \n  return { text, citations };\n}\n\n/**\n * Create a delay promise\n * \n * Utility for adding delays in async functions.\n * Useful for retries, animations, or testing.\n * \n * @example\n * async function slowOperation() {\n *   console.log('Starting...');\n *   await delay(1000); // Wait 1 second\n *   console.log('Done!');\n * }\n * \n * @param ms - Milliseconds to delay\n * @returns Promise that resolves after delay\n */\nexport function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Retry a function with exponential backoff\n * \n * Retries a failing async function with increasing delays.\n * Delays: 1s, 2s, 4s, 8s, etc. (exponential)\n * \n * @example\n * // Retry API call up to 3 times\n * const data = await retryWithBackoff(\n *   () => fetch('/api/data').then(r => r.json()),\n *   3,    // max attempts\n *   1000  // base delay (1s)\n * );\n * \n * // Delays: attempt 1 = immediate, attempt 2 = 1s, attempt 3 = 2s\n * \n * @param fn - Async function to retry\n * @param maxAttempts - Maximum retry attempts (default: 3)\n * @param baseDelay - Base delay in ms (default: 1000)\n * @returns Result from successful function call\n * @throws Last error if all attempts fail\n */\nexport async function retryWithBackoff<T>(\n  fn: () => Promise<T>,\n  maxAttempts: number = 3,\n  baseDelay: number = 1000\n): Promise<T> {\n  let lastError: Error;\n  \n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n      \n      if (attempt === maxAttempts) {\n        throw lastError;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s, etc.\n      const delayTime = baseDelay * Math.pow(2, attempt - 1);\n      await delay(delayTime);\n    }\n  }\n  \n  throw lastError!;\n}\n\n/**\n * Check if device is mobile\n * \n * Based on viewport width (<768px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is mobile-sized\n */\nexport function isMobile(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth < 768;\n}\n\n/**\n * Check if device is tablet\n * \n * Based on viewport width (768px-1023px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is tablet-sized\n */\nexport function isTablet(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 768 && window.innerWidth < 1024;\n}\n\n/**\n * Check if device is desktop\n * \n * Based on viewport width (≥1024px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is desktop-sized\n */\nexport function isDesktop(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 1024;\n}\n\n/**\n * Get responsive container class\n * \n * Returns Tailwind classes for responsive container sizing.\n * - Mobile: Full width/height\n * - Tablet: Max 2xl width, centered\n * - Desktop: Max 4xl width, centered\n * \n * @returns Tailwind class string for container\n */\nexport function getResponsiveContainer(): string {\n  if (isMobile()) return 'w-full h-full';\n  if (isTablet()) return 'w-full max-w-2xl mx-auto';\n  return 'w-full max-w-4xl mx-auto';\n}\n\n/**\n * Format conversation name from first message\n * \n * Creates a conversation title from the first message.\n * Takes first 6 words, max 50 characters.\n * \n * @example\n * generateConversationName('Hello, can you help me with JavaScript?')\n * // Returns: 'Hello, can you help me with'\n * \n * generateConversationName('Short')\n * // Returns: 'Short'\n * \n * @param firstMessage - The first message in conversation\n * @returns Formatted conversation name\n */\nexport function generateConversationName(firstMessage: string): string {\n  // Remove common API/system prefixes\n  let cleanedMessage = firstMessage.trim();\n  \n  // Remove OpenAI- prefix or similar system prefixes\n  cleanedMessage = cleanedMessage.replace(/^(OpenAI-|System-|API-|Assistant:|User:)\\s*/i, '');\n  \n  const words = cleanedMessage.split(/\\s+/);\n  const title = words.slice(0, 6).join(' ');\n  return title.length > 50 ? title.substring(0, 50).trim() + '...' : title;\n}\n\n/**\n * Validate URL format\n * \n * Checks if string is a valid URL using URL constructor.\n * \n * @example\n * isValidUrl('https://example.com') // Returns: true\n * isValidUrl('http://localhost:3000/path') // Returns: true\n * isValidUrl('not a url') // Returns: false\n * isValidUrl('') // Returns: false\n * \n * @param url - String to validate\n * @returns Whether string is a valid URL\n */\nexport function isValidUrl(url: string): boolean {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get file extension from filename\n * \n * Extracts the file extension in lowercase.\n * \n * @example\n * getFileExtension('document.pdf') // Returns: 'pdf'\n * getFileExtension('image.PNG') // Returns: 'png'\n * getFileExtension('no-extension') // Returns: ''\n * getFileExtension('multi.part.name.txt') // Returns: 'txt'\n * \n * @param filename - Filename to extract extension from\n * @returns Lowercase extension or empty string\n */\nexport function getFileExtension(filename: string): string {\n  return filename.split('.').pop()?.toLowerCase() || '';\n}\n\n/**\n * Check if file is an image\n * \n * Checks MIME type for image/ prefix.\n * \n * @example\n * isImageFile('image/png') // Returns: true\n * isImageFile('image/jpeg') // Returns: true\n * isImageFile('application/pdf') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is an image\n */\nexport function isImageFile(fileType: string): boolean {\n  return fileType.startsWith('image/');\n}\n\n/**\n * Check if file is a document\n * \n * Checks against common document MIME types including:\n * - PDF files\n * - Microsoft Word documents\n * - Plain text files\n * - CSV spreadsheets\n * - JSON/XML data files\n * \n * @example\n * isDocumentFile('application/pdf') // Returns: true\n * isDocumentFile('text/plain') // Returns: true\n * isDocumentFile('image/png') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is a supported document type\n */\nexport function isDocumentFile(fileType: string): boolean {\n  const documentTypes = [\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n  ];\n  return documentTypes.includes(fileType);\n}\n\n/**\n * Create download link for file\n * \n * Programmatically downloads content as a file.\n * Creates a blob URL and triggers download.\n * \n * @example\n * // Download text file\n * downloadFile('Hello, world!', 'greeting.txt');\n * \n * // Download JSON file\n * const data = { name: 'John', age: 30 };\n * downloadFile(\n *   JSON.stringify(data, null, 2),\n *   'data.json',\n *   'application/json'\n * );\n * \n * @param content - File content as string\n * @param filename - Name for downloaded file\n * @param mimeType - MIME type (default: 'text/plain')\n */\nexport function downloadFile(content: string, filename: string, mimeType: string = 'text/plain'): void {\n  const blob = new Blob([content], { type: mimeType });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n}\n\n/**\n * Escape HTML entities\n * \n * Prevents XSS by escaping HTML special characters.\n * Use when displaying user input as HTML.\n * \n * @example\n * escapeHtml('<script>alert(\"XSS\")</script>')\n * // Returns: '&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;'\n * \n * escapeHtml('Hello & \"world\"')\n * // Returns: 'Hello &amp; &quot;world&quot;'\n * \n * @param unsafe - Raw string that may contain HTML\n * @returns HTML-escaped string\n */\nexport function escapeHtml(unsafe: string): string {\n  return unsafe\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\n/**\n * Handle API errors and extract error message\n * \n * Normalizes various error formats into consistent structure.\n * Handles:\n * - API response errors (4xx, 5xx)\n * - Network/connection errors\n * - Client-side errors\n * \n * @example\n * try {\n *   await apiCall();\n * } catch (error) {\n *   const { message, code } = handleApiError(error);\n *   toast.error(message);\n *   if (code === 401) {\n *     // Handle unauthorized\n *   }\n * }\n * \n * @param error - Error object from API call\n * @returns Normalized error with message and optional code\n */\nexport function handleApiError(error: any): { message: string; code?: number } {\n  console.error('API Error:', error);\n  \n  if (error.response) {\n    // API responded with an error\n    const data = error.response.data;\n    // Handle nested error formats\n    if (data && data.data && data.data.message) {\n      return {\n        message: data.data.message,\n        code: data.data.code || error.response.status\n      };\n    }\n    // Handle direct message format\n    if (data && data.message) {\n      return {\n        message: data.message,\n        code: error.response.status\n      };\n    }\n    // Fallback to status code\n    return {\n      message: `API Error: ${error.response.status}`,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    // Request was made but no response received\n    return {\n      message: 'No response from server. Please check your connection.',\n      code: 0\n    };\n  } else {\n    // Something else happened (e.g., request setup error)\n    return {\n      message: error.message || 'An unexpected error occurred',\n      code: 0\n    };\n  }\n}\n\n/**\n * Constants for file uploads and API\n * \n * Central configuration for limits and constraints.\n * Modify these values to customize behavior:\n * \n * - MAX_FILE_SIZE: Maximum upload size per file\n * - ACCEPTED_FILE_TYPES: MIME types allowed for upload\n * - MAX_MESSAGE_LENGTH: Character limit for messages\n * - API_TIMEOUT: Request timeout for regular API calls\n * - STREAM_TIMEOUT: Timeout for streaming responses\n * - RETRY_ATTEMPTS: Number of retries on failure\n * - RETRY_DELAY: Base delay between retries\n * \n * @example\n * // Check file size\n * if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n *   throw new Error('File too large');\n * }\n * \n * // Configure retry\n * await retryWithBackoff(\n *   apiCall,\n *   CONSTANTS.RETRY_ATTEMPTS,\n *   CONSTANTS.RETRY_DELAY\n * );\n */\nexport const CONSTANTS = {\n  /** Maximum file size in bytes (10MB) */\n  MAX_FILE_SIZE: 10 * 1024 * 1024,\n  \n  /** Accepted MIME types for file uploads */\n  ACCEPTED_FILE_TYPES: [\n    // Documents\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n    // Images\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n  ],\n  \n  /** Maximum characters per message */\n  MAX_MESSAGE_LENGTH: 4000,\n  \n  /** API request timeout in milliseconds (30s) */\n  API_TIMEOUT: 30000,\n  \n  /** Streaming request timeout in milliseconds (60s) */\n  STREAM_TIMEOUT: 60000,\n  \n  /** Number of retry attempts for failed requests */\n  RETRY_ATTEMPTS: 3,\n  \n  /** Base delay between retries in milliseconds (1s) */\n  RETRY_DELAY: 1000,\n} as const;","/**\n * Mathematical utilities for voice themes\n * \n * Common mathematical functions and helpers used across different voice themes\n */\n\n/**\n * Linear interpolation between two values\n */\nexport const lerp = (start: number, end: number, factor: number): number => {\n  return start + (end - start) * factor;\n};\n\n/**\n * Smooth step interpolation (ease in/out)\n */\nexport const smoothStep = (edge0: number, edge1: number, x: number): number => {\n  const t = Math.max(0, Math.min(1, (x - edge0) / (edge1 - edge0)));\n  return t * t * (3 - 2 * t);\n};\n\n/**\n * Clamp a value between min and max\n */\nexport const clamp = (value: number, min: number, max: number): number => {\n  return Math.max(min, Math.min(max, value));\n};\n\n/**\n * Map a value from one range to another\n */\nexport const map = (value: number, inMin: number, inMax: number, outMin: number, outMax: number): number => {\n  return ((value - inMin) / (inMax - inMin)) * (outMax - outMin) + outMin;\n};\n\n/**\n * Generate random number between min and max\n */\nexport const random = (min: number, max: number): number => {\n  return Math.random() * (max - min) + min;\n};\n\n/**\n * Generate random integer between min and max (inclusive)\n */\nexport const randomInt = (min: number, max: number): number => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Distance between two 2D points\n */\nexport const distance2D = (x1: number, y1: number, x2: number, y2: number): number => {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\n/**\n * Distance between two 3D points\n */\nexport const distance3D = (x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number => {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const dz = z2 - z1;\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n};\n\n/**\n * Normalize angle to 0-2π range\n */\nexport const normalizeAngle = (angle: number): number => {\n  while (angle < 0) angle += 2 * Math.PI;\n  while (angle >= 2 * Math.PI) angle -= 2 * Math.PI;\n  return angle;\n};\n\n/**\n * Convert degrees to radians\n */\nexport const degToRad = (degrees: number): number => {\n  return degrees * (Math.PI / 180);\n};\n\n/**\n * Convert radians to degrees\n */\nexport const radToDeg = (radians: number): number => {\n  return radians * (180 / Math.PI);\n};\n\n/**\n * Sine wave with customizable amplitude, frequency, and phase\n */\nexport const sineWave = (time: number, amplitude: number = 1, frequency: number = 1, phase: number = 0): number => {\n  return amplitude * Math.sin(frequency * time + phase);\n};\n\n/**\n * Cosine wave with customizable amplitude, frequency, and phase\n */\nexport const cosineWave = (time: number, amplitude: number = 1, frequency: number = 1, phase: number = 0): number => {\n  return amplitude * Math.cos(frequency * time + phase);\n};\n\n/**\n * 3D rotation around X axis\n */\nexport const rotateX = (x: number, y: number, z: number, angle: number): [number, number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return [\n    x,\n    y * cos - z * sin,\n    y * sin + z * cos\n  ];\n};\n\n/**\n * 3D rotation around Y axis\n */\nexport const rotateY = (x: number, y: number, z: number, angle: number): [number, number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return [\n    x * cos + z * sin,\n    y,\n    -x * sin + z * cos\n  ];\n};\n\n/**\n * 3D rotation around Z axis\n */\nexport const rotateZ = (x: number, y: number, z: number, angle: number): [number, number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return [\n    x * cos - y * sin,\n    x * sin + y * cos,\n    z\n  ];\n};\n\n/**\n * 3D to 2D projection\n */\nexport const project3D = (x: number, y: number, z: number, focalLength: number, centerX: number, centerY: number): [number, number] => {\n  const scale = focalLength / (focalLength - z);\n  return [\n    x * scale + centerX,\n    y * scale + centerY\n  ];\n};\n\n/**\n * Cubic bezier curve interpolation\n */\nexport const cubicBezier = (t: number, p0: number, p1: number, p2: number, p3: number): number => {\n  const oneMinusT = 1 - t;\n  return oneMinusT * oneMinusT * oneMinusT * p0 +\n         3 * oneMinusT * oneMinusT * t * p1 +\n         3 * oneMinusT * t * t * p2 +\n         t * t * t * p3;\n};\n\n/**\n * Noise function (simplified Perlin-like noise)\n */\nexport const noise = (x: number, y: number = 0): number => {\n  const n = Math.sin(x * 12.9898 + y * 78.233) * 43758.5453;\n  return (n - Math.floor(n)) * 2 - 1;\n};\n\n/**\n * HSL to RGB conversion\n */\nexport const hslToRgb = (h: number, s: number, l: number): [number, number, number] => {\n  h = h / 360;\n  s = s / 100;\n  l = l / 100;\n\n  const hue2rgb = (p: number, q: number, t: number): number => {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1/6) return p + (q - p) * 6 * t;\n    if (t < 1/2) return q;\n    if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n    return p;\n  };\n\n  if (s === 0) {\n    return [l * 255, l * 255, l * 255];\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    return [\n      Math.round(hue2rgb(p, q, h + 1/3) * 255),\n      Math.round(hue2rgb(p, q, h) * 255),\n      Math.round(hue2rgb(p, q, h - 1/3) * 255)\n    ];\n  }\n};\n\n/**\n * Easing functions - these are aliases for common easing patterns\n */\nexport const easeInOutQuart = (t: number): number => {\n  return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t;\n};\n\nexport const easeInOutCubic = (t: number): number => {\n  return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n};\n\nexport const easeOutBounce = (t: number): number => {\n  if (t < 1 / 2.75) {\n    return 7.5625 * t * t;\n  } else if (t < 2 / 2.75) {\n    return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;\n  } else if (t < 2.5 / 2.75) {\n    return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;\n  } else {\n    return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;\n  }\n};\n\nexport const easeInOutSine = (t: number): number => {\n  return -(Math.cos(Math.PI * t) - 1) / 2;\n};\n\nexport const easeInOutExpo = (t: number): number => {\n  if (t === 0) return 0;\n  if (t === 1) return 1;\n  return t < 0.5\n    ? Math.pow(2, 20 * t - 10) / 2\n    : (2 - Math.pow(2, -20 * t + 10)) / 2;\n};\n\n/**\n * 2D Perlin-like noise function\n */\nexport const noise2D = (x: number, y: number): number => {\n  const n = Math.sin(x * 12.9898 + y * 78.233) * 43758.5453;\n  return (n - Math.floor(n)) * 2 - 1;\n};\n\n/**\n * Alias for smoothStep to maintain compatibility\n */\nexport const smoothstep = smoothStep;","export type LogLevel = 'info' | 'warn' | 'error';\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  category: string;\n  message: string;\n  data?: any;\n  error?: any;\n  stack?: string;\n}\n\nclass Logger {\n  private static instance: Logger;\n  private isClient: boolean;\n  private logs: LogEntry[] = [];\n\n  private constructor() {\n    this.isClient = typeof window !== 'undefined';\n  }\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  private formatMessage(entry: LogEntry): string {\n    const { timestamp, level, category, message, data, error, stack } = entry;\n    let formatted = `[${timestamp}] [${level.toUpperCase()}] [${category}] ${message}`;\n    \n    if (data) {\n      formatted += `\\nData: ${JSON.stringify(data, null, 2)}`;\n    }\n    \n    if (error) {\n      formatted += `\\nError: ${error.message || error}`;\n      if (stack) {\n        formatted += `\\nStack: ${stack}`;\n      }\n    }\n    \n    return formatted;\n  }\n\n  private writeToFile(entry: LogEntry) {\n    // File writing is handled by the API route\n    // This method is kept for compatibility\n  }\n\n  private log(level: LogLevel, category: string, message: string, data?: any, error?: any) {\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      category,\n      message,\n      data,\n      error: error ? { message: error.message, code: error.code, status: error.status } : undefined,\n      stack: error?.stack,\n    };\n\n    // Store in memory for client access\n    this.logs.push(entry);\n    if (this.logs.length > 1000) {\n      this.logs = this.logs.slice(-500); // Keep last 500 entries\n    }\n\n    // Console output with styling\n    const styles = {\n      info: 'color: #3B82F6; font-weight: normal;',\n      warn: 'color: #F59E0B; font-weight: bold;',\n      error: 'color: #EF4444; font-weight: bold;',\n    };\n\n    const prefix = `[${entry.timestamp.split('T')[1].split('.')[0]}] [${category}]`;\n    \n    if (this.isClient) {\n      console.log(`%c${prefix} ${message}`, styles[level]);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    } else {\n      const colorCodes = {\n        info: '\\x1b[36m',\n        warn: '\\x1b[33m',\n        error: '\\x1b[31m',\n      };\n      const reset = '\\x1b[0m';\n      console.log(`${colorCodes[level]}${prefix}${reset} ${message}`);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    }\n\n    // Server logging removed - all logs go to console only\n  }\n\n\n  info(category: string, message: string, data?: any) {\n    this.log('info', category, message, data);\n  }\n\n  warn(category: string, message: string, data?: any) {\n    this.log('warn', category, message, data);\n  }\n\n  error(category: string, message: string, error?: any, data?: any) {\n    this.log('error', category, message, data, error);\n  }\n\n  getLogs(): LogEntry[] {\n    return this.logs;\n  }\n\n  clearLogs() {\n    this.logs = [];\n  }\n\n  // API-specific logging helpers\n  apiRequest(endpoint: string, method: string, data?: any) {\n    this.info('API_REQUEST', `${method} ${endpoint}`, data);\n  }\n\n  apiResponse(endpoint: string, status: number, data?: any) {\n    const level = status >= 400 ? 'error' : 'info';\n    this.log(level, 'API_RESPONSE', `${endpoint} - Status: ${status}`, data);\n  }\n\n  apiError(endpoint: string, error: any) {\n    this.error('API_ERROR', `Failed request to ${endpoint}`, error);\n  }\n\n  // Auth-specific logging\n  authCheck(message: string, data?: any) {\n    this.info('AUTH', message, data);\n  }\n\n  authError(message: string, error?: any) {\n    this.error('AUTH_ERROR', message, error);\n  }\n\n  // Navigation logging\n  navigation(route: string, params?: any) {\n    this.info('NAVIGATION', `Navigating to ${route}`, params);\n  }\n\n  // Store operation logging\n  storeAction(store: string, action: string, data?: any) {\n    this.info('STORE', `${store}.${action}`, data);\n  }\n}\n\nexport const logger = Logger.getInstance();","/**\n * Default Theme - Classic Particle Sphere\n * \n * The original particle sphere theme, refactored to use the new theme system.\n * Features a 3D rotating sphere of particles with smooth color transitions.\n */\n\nimport { BaseTheme } from './BaseTheme';\nimport { VoiceState } from './IVoiceTheme';\nimport { lerp } from '../utils/math';\nimport { ObjectPool } from '../utils/performance';\n\ninterface Particle {\n  x: number;\n  y: number;\n  z: number;\n  velX: number;\n  velY: number;\n  velZ: number;\n  age: number;\n  dead: boolean;\n  right: boolean;\n  projX: number;\n  projY: number;\n  alpha: number;\n  attack: number;\n  hold: number;\n  decay: number;\n  initValue: number;\n  holdValue: number;\n  lastValue: number;\n  stuckTime: number;\n  accelX: number;\n  accelY: number;\n  accelZ: number;\n  next?: Particle;\n  prev?: Particle;\n}\n\ninterface ColorPalette {\n  r: number;\n  g: number;\n  b: number;\n  gradient: number[];\n}\n\ninterface ColorScheme {\n  idle: ColorPalette;\n  userSpeaking: ColorPalette;\n  processing: ColorPalette;\n  aiSpeaking: ColorPalette;\n  hover: ColorPalette;\n}\n\nexport class DefaultTheme extends BaseTheme {\n  readonly id = 'default';\n  readonly name = 'Classic Sphere';\n  readonly description = 'The original 3D particle sphere with smooth color transitions';\n  readonly category = 'particle' as const;\n  readonly performanceProfile = 'medium' as const;\n\n  // Sphere configuration\n  private sphereRadius = 280;\n  private radiusScale = 1;\n  private framesPerRotation = 5000;\n  private focalLength = 320;\n  private zeroAlphaDepth = -750;\n  private sphereCenterY = 0;\n  private sphereCenterZ = -3 - this.sphereRadius;\n\n  // Particle system\n  private particlePool: ObjectPool<Particle>;\n  private particleList: { first?: Particle } = {};\n  private recycleBin: { first?: Particle } = {};\n  private currentParticleCount = 0;\n  private maxParticles = 200;\n\n  // Color system\n  private currentR = 52;\n  private currentG = 235;\n  private currentB = 222;\n  private targetR = 52;\n  private targetG = 235;\n  private targetB = 222;\n  private colorTransitionSpeed = 0.05;\n  private currentColorScheme = 'gemini';\n\n  // Animation parameters\n  private turnAngle = 1;\n  private wait = 2;\n  private count = 0;\n  private numToAddEachFrame = 3;\n  private particleAlpha = 1;\n  private particleRad = 2.5;\n  private gravity = 0;\n  private randAccelX = 0.1;\n  private randAccelY = 0.1;\n  private randAccelZ = 0.1;\n\n  // Color schemes\n  private colorSchemes: Record<string, ColorScheme> = {\n    gemini: {\n      idle: { r: 66, g: 133, b: 244, gradient: [66, 133, 244, 52, 168, 83] },\n      userSpeaking: { r: 234, g: 67, b: 53, gradient: [234, 67, 53, 251, 188, 5] },\n      processing: { r: 155, g: 64, b: 224, gradient: [155, 64, 224, 66, 133, 244] },\n      aiSpeaking: { r: 52, g: 168, b: 83, gradient: [52, 168, 83, 66, 133, 244] },\n      hover: { r: 251, g: 188, b: 5, gradient: [251, 188, 5, 234, 67, 53] }\n    },\n    instagram: {\n      idle: { r: 228, g: 64, b: 95, gradient: [228, 64, 95, 247, 119, 55] },\n      userSpeaking: { r: 247, g: 119, b: 55, gradient: [247, 119, 55, 252, 175, 69] },\n      processing: { r: 193, g: 53, b: 132, gradient: [193, 53, 132, 228, 64, 95] },\n      aiSpeaking: { r: 252, g: 175, b: 69, gradient: [252, 175, 69, 247, 119, 55] },\n      hover: { r: 131, g: 58, b: 180, gradient: [131, 58, 180, 193, 53, 132] }\n    },\n    ocean: {\n      idle: { r: 0, g: 119, b: 190, gradient: [0, 119, 190, 0, 168, 232] },\n      userSpeaking: { r: 0, g: 168, b: 232, gradient: [0, 168, 232, 0, 201, 255] },\n      processing: { r: 0, g: 201, b: 255, gradient: [0, 201, 255, 100, 255, 218] },\n      aiSpeaking: { r: 100, g: 255, b: 218, gradient: [100, 255, 218, 0, 168, 232] },\n      hover: { r: 0, g: 150, b: 199, gradient: [0, 150, 199, 0, 201, 255] }\n    },\n    sunset: {\n      idle: { r: 255, g: 107, b: 107, gradient: [255, 107, 107, 255, 193, 7] },\n      userSpeaking: { r: 255, g: 193, b: 7, gradient: [255, 193, 7, 255, 142, 83] },\n      processing: { r: 255, g: 142, b: 83, gradient: [255, 142, 83, 255, 107, 107] },\n      aiSpeaking: { r: 255, g: 230, b: 109, gradient: [255, 230, 109, 255, 193, 7] },\n      hover: { r: 255, g: 171, b: 64, gradient: [255, 171, 64, 255, 107, 107] }\n    },\n    aurora: {\n      idle: { r: 0, g: 201, b: 255, gradient: [0, 201, 255, 146, 254, 157] },\n      userSpeaking: { r: 146, g: 254, b: 157, gradient: [146, 254, 157, 0, 255, 193] },\n      processing: { r: 0, g: 255, b: 193, gradient: [0, 255, 193, 186, 85, 255] },\n      aiSpeaking: { r: 186, g: 85, b: 255, gradient: [186, 85, 255, 0, 201, 255] },\n      hover: { r: 120, g: 255, b: 214, gradient: [120, 255, 214, 186, 85, 255] }\n    }\n  };\n\n  constructor() {\n    super();\n    \n    // Initialize particle pool\n    this.particlePool = new ObjectPool<Particle>(\n      () => ({\n        x: 0, y: 0, z: 0, velX: 0, velY: 0, velZ: 0,\n        age: 0, dead: false, right: false, projX: 0, projY: 0, alpha: 0,\n        attack: 0, hold: 0, decay: 0, initValue: 0, holdValue: 0, lastValue: 0,\n        stuckTime: 0, accelX: 0, accelY: 0, accelZ: 0\n      }),\n      (particle) => {\n        particle.age = 0;\n        particle.dead = false;\n        particle.alpha = 0;\n        particle.next = undefined;\n        particle.prev = undefined;\n      },\n      50,\n      this.maxParticles\n    );\n\n    this.setColor(this.getColorPalette().idle);\n  }\n\n  protected onInit(): void {\n    this.maxParticles = this.getMaxParticles();\n  }\n\n  protected onDraw(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number,\n    deltaTime: number\n  ): void {\n    this.updateColors();\n    this.updateParticles(context, width, height, centerX, centerY);\n    this.renderParticles(context, width, height, centerX, centerY);\n  }\n\n  protected onStateChange(newState: VoiceState): void {\n    const palette = this.getColorPalette();\n    \n    switch (newState) {\n      case VoiceState.USER_SPEAKING:\n        this.framesPerRotation = 2000;\n        this.colorTransitionSpeed = 0.15;\n        this.setColor(palette.userSpeaking);\n        this.numToAddEachFrame = 5;\n        this.particleAlpha = 1.2;\n        this.particleRad = 3.5;\n        this.gravity = 0.1;\n        break;\n        \n      case VoiceState.PROCESSING:\n        this.framesPerRotation = 500;\n        this.colorTransitionSpeed = 0.2;\n        this.setColor(palette.processing);\n        this.numToAddEachFrame = 8;\n        this.particleAlpha = 1.5;\n        this.particleRad = 4;\n        this.gravity = 0;\n        break;\n        \n      case VoiceState.AI_SPEAKING:\n        this.framesPerRotation = 2500;\n        this.colorTransitionSpeed = 0.1;\n        this.setColor(palette.aiSpeaking);\n        this.numToAddEachFrame = 4;\n        this.particleAlpha = 1.3;\n        this.particleRad = 3;\n        this.gravity = -0.05;\n        break;\n        \n      case VoiceState.IDLE:\n      default:\n        this.framesPerRotation = 5000;\n        this.colorTransitionSpeed = 0.05;\n        this.setColor(palette.idle);\n        this.numToAddEachFrame = 3;\n        this.particleAlpha = 1;\n        this.particleRad = 2.5;\n        this.gravity = 0;\n        break;\n    }\n  }\n\n  protected getThemeSpecificMetrics() {\n    return {\n      particleCount: this.currentParticleCount,\n      maxParticles: this.maxParticles,\n      colorScheme: this.currentColorScheme\n    };\n  }\n\n  /**\n   * Set color scheme (public method for external use)\n   */\n  setColorScheme(scheme: string): void {\n    if (this.colorSchemes[scheme]) {\n      this.currentColorScheme = scheme;\n      // Update current color based on current state\n      const palette = this.getColorPalette();\n      this.setColor(palette.idle); // Will be overridden by current state\n    }\n  }\n\n  // Private methods - core particle system logic\n\n  private getColorPalette(): ColorScheme {\n    return this.colorSchemes[this.currentColorScheme] || this.colorSchemes.gemini;\n  }\n\n  private setColor(palette: ColorPalette): void {\n    this.targetR = palette.r;\n    this.targetG = palette.g;\n    this.targetB = palette.b;\n  }\n\n  private updateColors(): void {\n    this.currentR = lerp(this.currentR, this.targetR, this.colorTransitionSpeed);\n    this.currentG = lerp(this.currentG, this.targetG, this.colorTransitionSpeed);\n    this.currentB = lerp(this.currentB, this.targetB, this.colorTransitionSpeed);\n  }\n\n  private updateParticles(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number\n  ): void {\n    // Create new particles\n    this.count++;\n    if (this.count >= this.wait && this.currentParticleCount < this.maxParticles) {\n      this.count = 0;\n      const dynamicNumParticles = Math.floor(this.numToAddEachFrame * (1 + this.mouseInfluence * 0.5));\n      const particlesToCreate = Math.min(dynamicNumParticles, this.maxParticles - this.currentParticleCount);\n      \n      for (let i = 0; i < particlesToCreate; i++) {\n        this.createParticle();\n      }\n    }\n\n    // Update rotation\n    const turnSpeed = 2 * Math.PI / this.framesPerRotation;\n    const dynamicTurnSpeed = turnSpeed * (1 + this.mouseInfluence * 0.3);\n    this.turnAngle = (this.turnAngle + dynamicTurnSpeed) % (2 * Math.PI);\n  }\n\n  private createParticle(): void {\n    const theta = Math.random() * 2 * Math.PI;\n    const phi = Math.acos(Math.random() * 2 - 1);\n    \n    // Add mouse influence to particle positioning\n    const mouseDistortion = this.mouseInfluence * 0.3;\n    const mouseBias = {\n      x: this.normalizedMouseX * mouseDistortion * this.sphereRadius * 0.5,\n      y: this.normalizedMouseY * mouseDistortion * this.sphereRadius * 0.5,\n      z: 0\n    };\n    \n    const x0 = this.sphereRadius * Math.sin(phi) * Math.cos(theta) + mouseBias.x;\n    const y0 = this.sphereRadius * Math.sin(phi) * Math.sin(theta) + mouseBias.y;\n    const z0 = this.sphereRadius * Math.cos(phi) + mouseBias.z;\n\n    const velocityMultiplier = 0.002 * (1 + this.mouseInfluence * 0.5);\n    const particle = this.addParticle(\n      x0,\n      this.sphereCenterY + y0,\n      this.sphereCenterZ + z0,\n      velocityMultiplier * x0,\n      velocityMultiplier * y0,\n      velocityMultiplier * z0\n    );\n\n    // Set particle envelope parameters\n    const alphaMultiplier = 1 + this.mouseInfluence * 0.3;\n    particle.attack = Math.floor(30 / (1 + this.mouseInfluence * 0.5));\n    particle.hold = Math.floor(30 * (1 + this.mouseInfluence * 0.5));\n    particle.decay = 60;\n    particle.initValue = 0;\n    particle.holdValue = this.particleAlpha * alphaMultiplier;\n    particle.lastValue = 0;\n    particle.stuckTime = Math.floor((45 + Math.random() * 15) / (1 + this.mouseInfluence * 0.3));\n\n    // Enhanced acceleration with mouse influence\n    particle.accelX = this.normalizedMouseX * this.mouseInfluence * 0.001;\n    particle.accelY = this.gravity + (this.normalizedMouseY * this.mouseInfluence * 0.001);\n    particle.accelZ = 0;\n  }\n\n  private addParticle(x0: number, y0: number, z0: number, vx0: number, vy0: number, vz0: number): Particle {\n    const newParticle = this.particlePool.acquire();\n    this.currentParticleCount++;\n\n    // Add to beginning of particle list\n    if (this.particleList.first) {\n      newParticle.next = this.particleList.first;\n      this.particleList.first.prev = newParticle;\n    }\n    this.particleList.first = newParticle;\n    newParticle.prev = undefined;\n\n    // Initialize particle\n    newParticle.x = x0;\n    newParticle.y = y0;\n    newParticle.z = z0;\n    newParticle.velX = vx0;\n    newParticle.velY = vy0;\n    newParticle.velZ = vz0;\n    newParticle.age = 0;\n    newParticle.dead = false;\n    newParticle.right = Math.random() < 0.5;\n\n    return newParticle;\n  }\n\n  private renderParticles(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number\n  ): void {\n    const sinAngle = Math.sin(this.turnAngle);\n    const cosAngle = Math.cos(this.turnAngle);\n    const zMax = this.focalLength - 2;\n\n    let particle = this.particleList.first;\n    \n    while (particle) {\n      const nextParticle = particle.next;\n\n      // Update particle age\n      particle.age++;\n\n      // Move particle if not stuck\n      if (particle.age > particle.stuckTime) {\n        particle.velX += particle.accelX + this.randAccelX * (Math.random() * 2 - 1);\n        particle.velY += particle.accelY + this.randAccelY * (Math.random() * 2 - 1);\n        particle.velZ += particle.accelZ + this.randAccelZ * (Math.random() * 2 - 1);\n\n        particle.x += particle.velX;\n        particle.y += particle.velY;\n        particle.z += particle.velZ;\n      }\n\n      // Calculate 3D rotation and projection\n      const rotX = cosAngle * particle.x + sinAngle * (particle.z - this.sphereCenterZ);\n      const rotZ = -sinAngle * particle.x + cosAngle * (particle.z - this.sphereCenterZ) + this.sphereCenterZ;\n      const m = this.radiusScale * this.focalLength / (this.focalLength - rotZ);\n      \n      particle.projX = rotX * m + centerX;\n      particle.projY = particle.y * m + centerY;\n\n      // Update alpha based on envelope\n      this.updateParticleAlpha(particle);\n\n      // Check if particle should be rendered or recycled\n      const outsideTest = (\n        particle.projX > width || particle.projX < 0 ||\n        particle.projY < 0 || particle.projY > height ||\n        rotZ > zMax\n      );\n\n      if (outsideTest || particle.dead) {\n        this.recycleParticle(particle);\n      } else {\n        this.renderParticle(context, particle, rotZ, m);\n      }\n\n      particle = nextParticle;\n    }\n  }\n\n  private updateParticleAlpha(particle: Particle): void {\n    if (particle.age < particle.attack + particle.hold + particle.decay) {\n      if (particle.age < particle.attack) {\n        particle.alpha = (particle.holdValue - particle.initValue) / particle.attack * particle.age + particle.initValue;\n      } else if (particle.age < particle.attack + particle.hold) {\n        particle.alpha = particle.holdValue;\n      } else {\n        particle.alpha = (particle.lastValue - particle.holdValue) / particle.decay * (particle.age - particle.attack - particle.hold) + particle.holdValue;\n      }\n    } else {\n      particle.dead = true;\n    }\n  }\n\n  private renderParticle(context: CanvasRenderingContext2D, particle: Particle, rotZ: number, scale: number): void {\n    // Depth-dependent alpha\n    const depthAlphaFactor = Math.max(0, Math.min(1, 1 - rotZ / this.zeroAlphaDepth));\n    const finalAlpha = depthAlphaFactor * particle.alpha;\n    const particleSize = scale * this.particleRad * (1 + this.mouseInfluence * 0.2);\n\n    // Draw main particle\n    context.fillStyle = `rgba(${Math.floor(this.currentR)}, ${Math.floor(this.currentG)}, ${Math.floor(this.currentB)}, ${finalAlpha})`;\n    context.beginPath();\n    context.arc(particle.projX, particle.projY, particleSize, 0, 2 * Math.PI);\n    context.fill();\n\n    // Draw glow effect if enabled and appropriate\n    if (this.shouldEnableGlow() && this.mouseInfluence > 0.5 && finalAlpha > 0.3) {\n      context.fillStyle = `rgba(${Math.floor(this.currentR)}, ${Math.floor(this.currentG)}, ${Math.floor(this.currentB)}, ${finalAlpha * 0.3})`;\n      context.beginPath();\n      context.arc(particle.projX, particle.projY, particleSize * 1.5, 0, 2 * Math.PI);\n      context.fill();\n    }\n  }\n\n  private recycleParticle(particle: Particle): void {\n    this.currentParticleCount = Math.max(0, this.currentParticleCount - 1);\n\n    // Remove from particle list\n    if (this.particleList.first === particle) {\n      this.particleList.first = particle.next;\n      if (particle.next) {\n        particle.next.prev = undefined;\n      }\n    } else {\n      if (particle.prev) {\n        particle.prev.next = particle.next;\n      }\n      if (particle.next) {\n        particle.next.prev = particle.prev;\n      }\n    }\n\n    // Return to pool\n    this.particlePool.release(particle);\n  }\n\n  protected onDispose(): void {\n    // Clean up all particles\n    this.particleList.first = undefined;\n    this.currentParticleCount = 0;\n    this.particlePool.clear();\n  }\n}","/**\n * Agent Store - Chatbot Management\n * \n * This store manages all agent (chatbot) related state and operations.\n * Agents are the core entities in CustomGPT - each agent is a trained\n * chatbot with its own knowledge base and settings.\n * \n * Features:\n * - CRUD operations for agents\n * - Persistent state using localStorage\n * - Auto-selection of first agent\n * - Agent statistics fetching\n * - License management support\n * \n * State Persistence:\n * - Uses Zustand persist middleware\n * - Stores: agents list and current selection\n * - Survives page refreshes\n * \n * Features:\n * - Multi-format API response handling with backward compatibility\n * - Automatic agent state synchronization across operations\n * - Optimistic UI updates for seamless user experience\n * - Comprehensive error handling with graceful recovery\n */\n\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { AgentStore, Agent, AgentSettings } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useConversationStore } from './conversations';\nimport { useMessageStore } from './messages';\n\n/**\n * Agent Store Implementation\n * \n * Persisted to localStorage with key 'customgpt-agent-store'\n * Automatically hydrates on app load\n */\nexport const useAgentStore = create<AgentStore>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      agents: [],\n      currentAgent: null,\n      loading: false,\n      error: null,\n      paginationMeta: undefined,\n\n      /**\n       * Fetch agents from the API with enterprise-scale pagination\n       * \n       * Strategy for 1000+ projects:\n       * - Load first batch (100 items) immediately for UI responsiveness\n       * - Load additional batches as needed via loadMoreAgents()\n       * - Auto-selects first agent if none selected\n       * - Maintains total count for pagination UI\n       */\n      fetchAgents: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Load first batch with larger page size for better UX\n          const response = await client.getAgents({ page: 1, per_page: 100 });\n          \n          let agents: Agent[] = [];\n          let total = 0;\n          let hasMore = false;\n          \n          // Handle different response formats from the API\n          if (response && typeof response === 'object') {\n            // Check for nested pagination format: { data: { data: [...], total: ..., current_page: ... } }\n            if ('data' in response && (response as any).data && typeof (response as any).data === 'object' && 'data' in (response as any).data) {\n              const nestedData = (response as any).data;\n              agents = Array.isArray(nestedData.data) ? nestedData.data : [];\n              total = nestedData.total || agents.length;\n              const currentPage = nestedData.current_page || 1;\n              const perPage = nestedData.per_page || 100;\n              hasMore = nestedData.last_page ? currentPage < nestedData.last_page : false;\n            } else if ('data' in response && 'total' in response) {\n              // Flat paginated response format\n              const paginatedResponse = response as { data: Agent[]; total: number; page: number; per_page: number };\n              agents = paginatedResponse.data;\n              total = paginatedResponse.total;\n              hasMore = total > paginatedResponse.per_page;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              agents = (response as any).data;\n              total = agents.length;\n              hasMore = false;\n            } else if (Array.isArray(response)) {\n              // Legacy format: [...]\n              agents = response as Agent[];\n              total = agents.length;\n              hasMore = false;\n            }\n          }\n          \n          set({ \n            agents, \n            loading: false,\n            // Always update pagination metadata with fresh data\n            paginationMeta: { \n              currentPage: 1, \n              totalCount: total, \n              hasMore,\n              perPage: 100\n            },\n            // Auto-select first agent if none selected\n            currentAgent: get().currentAgent || (agents.length > 0 ? agents[0] : null)\n          });\n          \n          // Fetch settings for all agents to get avatars\n          const fetchSettingsForAgents = async () => {\n            const client = getClient();\n            const agentsWithoutSettings = agents.filter(agent => !agent.settings);\n            \n            if (agentsWithoutSettings.length === 0) return;\n            \n            // Process in batches of 5 to avoid overwhelming the API\n            const batchSize = 5;\n            for (let i = 0; i < agentsWithoutSettings.length; i += batchSize) {\n              const batch = agentsWithoutSettings.slice(i, i + batchSize);\n              \n              // Fetch settings in parallel for this batch\n              const settingsPromises = batch.map(async (agent) => {\n                try {\n                  const settingsResponse = await client.getAgentSettings(agent.id);\n                  if (settingsResponse && settingsResponse.data) {\n                    return { agent, settings: settingsResponse.data };\n                  }\n                } catch (error) {\n                  console.error(`Failed to fetch settings for agent ${agent.id}:`, error);\n                }\n                return null;\n              });\n              \n              const settingsResults = await Promise.all(settingsPromises);\n              const validResults = settingsResults.filter(result => result !== null);\n              \n              if (validResults.length > 0) {\n                // Update agents with their settings\n                set(state => ({\n                  agents: state.agents.map(a => {\n                    const result = validResults.find(r => r!.agent.id === a.id);\n                    return result ? { ...a, settings: result.settings } : a;\n                  }),\n                  // Also update current agent if it matches\n                  currentAgent: state.currentAgent \n                    ? (() => {\n                        const result = validResults.find(r => r!.agent.id === state.currentAgent!.id);\n                        return result ? { ...state.currentAgent, settings: result.settings } : state.currentAgent;\n                      })()\n                    : state.currentAgent\n                }));\n              }\n              \n              // Small delay between batches to be kind to the API\n              if (i + batchSize < agentsWithoutSettings.length) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n              }\n            }\n          };\n          \n          // Fetch settings in the background without blocking the UI\n          fetchSettingsForAgents().catch(error => {\n            console.error('Failed to fetch agent settings:', error);\n          });\n        } catch (error) {\n          console.error('Failed to fetch agents:', error);\n          set({ \n            agents: [], \n            error: error instanceof Error ? error.message : 'Failed to fetch agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Load more agents for large datasets (enterprise accounts)\n       * Appends to existing agents list\n       */\n      loadMoreAgents: async () => {\n        const state = get();\n        const paginationMeta = (state as any).paginationMeta;\n        \n        if (!paginationMeta?.hasMore || state.loading) return;\n        \n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const nextPage = paginationMeta.currentPage + 1;\n          \n          const response = await client.getAgents({ \n            page: nextPage, \n            per_page: paginationMeta.perPage \n          });\n          \n          if (response && 'data' in response) {\n            let newAgents: Agent[] = [];\n            let responseTotal = 0;\n            let responsePage = nextPage;\n            \n            // Handle nested format: { data: { data: [...] } }\n            if (response.data && typeof response.data === 'object' && 'data' in response.data) {\n              const nestedData = (response as any).data;\n              newAgents = Array.isArray(nestedData.data) ? nestedData.data : [];\n              responseTotal = nestedData.total || 0;\n              responsePage = nestedData.current_page || nextPage;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              newAgents = (response as any).data;\n              responseTotal = paginationMeta.totalCount;\n            }\n            \n            set(state => ({ \n              agents: [...state.agents, ...newAgents],\n              loading: false,\n              paginationMeta: {\n                ...paginationMeta,\n                currentPage: responsePage,\n                hasMore: (responsePage * paginationMeta.perPage + newAgents.length) < responseTotal\n              }\n            }));\n          }\n        } catch (error) {\n          console.error('Failed to load more agents:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to load more agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Search for a specific agent by ID or name\n       * Useful for enterprise accounts with many projects\n       */\n      findAgent: async (query: string | number) => {\n        try {\n          const client = getClient();\n          \n          // If query is numeric, assume it's an ID and try to fetch directly\n          if (typeof query === 'number' || /^\\d+$/.test(query.toString())) {\n            const id = typeof query === 'number' ? query : parseInt(query.toString());\n            try {\n              const response = await client.getAgent(id);\n              const agent = response.data;\n              \n              // Add to agents list if not already present\n              const state = get();\n              if (!state.agents.find(a => a.id === agent.id)) {\n                set(state => ({ \n                  agents: [agent, ...state.agents] \n                }));\n              }\n              \n              return agent;\n            } catch {\n              // ID not found or no access, fall through to search\n            }\n          }\n          \n          // For text search, we'd need a search endpoint (not implemented in current API)\n          // For now, search within loaded agents\n          const state = get();\n          const found = state.agents.find(agent => \n            agent.project_name.toLowerCase().includes(query.toString().toLowerCase()) ||\n            agent.id.toString() === query.toString()\n          );\n          \n          return found || null;\n        } catch (error) {\n          console.error('Failed to find agent:', error);\n          return null;\n        }\n      },\n\n      /**\n       * Create a new agent\n       * \n       * @param data - Agent creation data\n       * @param data.project_name - Display name for the agent\n       * @param data.sitemap_path - URL for sitemap-based training\n       * @param data.files - Files for file-based training\n       * @param data.is_shared - Whether agent is publicly accessible\n       * \n       * Behavior:\n       * - Adds new agent to beginning of list\n       * - Auto-selects the new agent\n       * - Returns the created agent\n       * - Throws error on failure\n       */\n      createAgent: async (data: {\n        project_name: string;\n        sitemap_path?: string;\n        files?: File[];\n        is_shared?: boolean;\n      }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createAgent(data);\n          const newAgent = response.data;\n          \n          // Optimistic update - add to list and select immediately\n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to create agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create agent',\n            loading: false \n          });\n          throw error; // Re-throw for component error handling\n        }\n      },\n\n      /**\n       * Select an agent as the current active agent\n       * This agent will be used for all chat operations\n       * \n       * @param agent - The agent to select\n       */\n      selectAgent: async (agent: Agent) => {\n        // Clear conversation state when switching agents\n        const conversationStore = useConversationStore.getState();\n        const messageStore = useMessageStore.getState();\n        \n        // Set the new agent first\n        set({ currentAgent: agent });\n        \n        // Clear current conversation to show welcome screen\n        conversationStore.selectConversation(null);\n        \n        // Clear all messages from the previous agent\n        messageStore.clearMessages();\n        \n        // Fetch agent settings to get avatar and other details\n        try {\n          const client = getClient();\n          const settingsResponse = await client.getAgentSettings(agent.id);\n          if (settingsResponse && settingsResponse.data) {\n            // Update the agent with settings\n            const agentWithSettings = { ...agent, settings: settingsResponse.data };\n            set({ currentAgent: agentWithSettings });\n            \n            // Also update in the agents list\n            set(state => ({\n              agents: state.agents.map(a => \n                a.id === agent.id ? agentWithSettings : a\n              )\n            }));\n          }\n        } catch (error) {\n          console.error('Failed to fetch agent settings:', error);\n          // Continue without settings\n        }\n        \n        // Fetch conversations for the new agent\n        try {\n          await conversationStore.fetchConversations(agent.id);\n        } catch (error) {\n          console.error('Failed to fetch conversations for new agent:', error);\n          // Even if fetch fails, we've already cleared the old state\n        }\n      },\n\n      /**\n       * Manually set the agents list\n       * Used for optimistic updates or manual state management\n       * \n       * Features:\n       * - Validates current agent still exists\n       * - Auto-selects first agent if current is removed\n       * - Maintains agent selection when possible\n       * \n       * @param agents - New list of agents\n       */\n      setAgents: (agents: Agent[]) => {\n        set({ \n          agents,\n          // Update current agent if it's no longer in the list\n          currentAgent: (() => {\n            const current = get().currentAgent;\n            if (!current) return agents.length > 0 ? agents[0] : null;\n            \n            // Check if current agent still exists in new list\n            const stillExists = agents.find(a => a.id === current.id);\n            return stillExists || (agents.length > 0 ? agents[0] : null);\n          })()\n        });\n      },\n      \n      updateAgent: async (id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateAgent(id, data);\n          console.log('[AgentStore] updateAgent response:', response);\n          const updatedAgent = response.data;\n          console.log('[AgentStore] updatedAgent data:', updatedAgent);\n          \n          set(state => ({\n            agents: state.agents.map(a => a.id === id ? updatedAgent : a),\n            currentAgent: state.currentAgent?.id === id ? updatedAgent : state.currentAgent,\n            loading: false,\n          }));\n          \n          return updatedAgent;\n        } catch (error) {\n          console.error('Failed to update agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      /**\n       * Update agent settings\n       * Updates configuration like chatbot model, appearance, behavior, etc.\n       */\n      updateSettings: async (id: number, settings: Partial<AgentSettings>) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Create FormData for the update\n          const formData = new FormData();\n          \n          // Only append the fields we want to update\n          Object.entries(settings).forEach(([key, value]) => {\n            if (value !== undefined && value !== null) {\n              formData.append(key, String(value));\n            }\n          });\n          \n          const response = await client.updateAgentSettings(id, formData);\n          console.log('[AgentStore] updateSettings response:', response);\n          const updatedSettings = response.data;\n          \n          // Update the agent with new settings\n          set(state => {\n            const updatedAgents = state.agents.map(agent => {\n              if (agent.id === id) {\n                return { ...agent, settings: { ...agent.settings, ...updatedSettings } };\n              }\n              return agent;\n            });\n            \n            const updatedCurrentAgent = state.currentAgent?.id === id \n              ? { ...state.currentAgent, settings: { ...state.currentAgent.settings, ...updatedSettings } }\n              : state.currentAgent;\n            \n            return {\n              agents: updatedAgents,\n              currentAgent: updatedCurrentAgent,\n              loading: false,\n            };\n          });\n          \n          return updatedSettings;\n        } catch (error) {\n          console.error('Failed to update agent settings:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update agent settings',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      deleteAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteAgent(id);\n          \n          set(state => {\n            const filteredAgents = state.agents.filter(a => a.id !== id);\n            return {\n              agents: filteredAgents,\n              currentAgent: state.currentAgent?.id === id \n                ? (filteredAgents.length > 0 ? filteredAgents[0] : null)\n                : state.currentAgent,\n              loading: false,\n            };\n          });\n        } catch (error) {\n          console.error('Failed to delete agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      replicateAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.replicateAgent(id);\n          const newAgent = response.data;\n          \n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to replicate agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to replicate agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      getAgentStats: async (id: number) => {\n        try {\n          const client = getClient();\n          const response = await client.getAgentStats(id);\n          return response.data;\n        } catch (error) {\n          console.error('Failed to get agent stats:', error);\n          throw error;\n        }\n      },\n    }),\n    {\n      name: 'customgpt-agents',\n      partialize: (state) => ({\n        currentAgent: state.currentAgent,\n      }),\n    }\n  )\n);","/**\n * Performance monitoring utilities for voice themes\n * \n * Provides performance tracking, FPS monitoring, and device capability detection\n */\n\nexport interface PerformanceMetrics {\n  fps: number;\n  frameTime: number;\n  memoryUsage?: number;\n  particleCount?: number;\n  objectCount?: number;\n  drawCalls?: number;\n}\n\nexport interface DeviceCapabilities {\n  isMobile: boolean;\n  isLowPowerDevice: boolean;\n  supportsWebGL: boolean;\n  hardwareConcurrency: number;\n  memoryGB?: number;\n  performanceLevel: 'low' | 'medium' | 'high';\n}\n\n/**\n * Performance monitor for tracking FPS and frame timing\n */\nexport class PerformanceMonitor {\n  private frameCount = 0;\n  private lastTime = 0;\n  private currentFPS = 60;\n  private frameTime = 16.67;\n  private fpsHistory: number[] = [];\n  private frameTimeHistory: number[] = [];\n  private maxHistorySize = 60; // Keep 1 second of history at 60fps\n  private warningThreshold = 0.8;\n  private criticalThreshold = 0.6;\n\n  private callbacks: {\n    onFPSUpdate?: (fps: number) => void;\n    onPerformanceWarning?: (metrics: PerformanceMetrics) => void;\n    onPerformanceCritical?: (metrics: PerformanceMetrics) => void;\n  } = {};\n\n  constructor(targetFPS = 60) {\n    this.lastTime = performance.now();\n  }\n\n  /**\n   * Call this every frame to update performance metrics\n   */\n  update(): PerformanceMetrics {\n    const currentTime = performance.now();\n    const deltaTime = currentTime - this.lastTime;\n    this.frameTime = deltaTime;\n    \n    // Update FPS calculation\n    this.frameCount++;\n    const fps = 1000 / deltaTime;\n    this.fpsHistory.push(fps);\n    this.frameTimeHistory.push(deltaTime);\n\n    // Keep history size manageable\n    if (this.fpsHistory.length > this.maxHistorySize) {\n      this.fpsHistory.shift();\n      this.frameTimeHistory.shift();\n    }\n\n    // Calculate average FPS over recent history\n    const avgFPS = this.fpsHistory.reduce((sum, fps) => sum + fps, 0) / this.fpsHistory.length;\n    this.currentFPS = avgFPS;\n\n    // Check for performance issues\n    const targetFPS = 30; // Conservative target for voice themes\n    const performanceRatio = avgFPS / targetFPS;\n\n    if (performanceRatio < this.criticalThreshold) {\n      this.callbacks.onPerformanceCritical?.({\n        fps: avgFPS,\n        frameTime: deltaTime\n      });\n    } else if (performanceRatio < this.warningThreshold) {\n      this.callbacks.onPerformanceWarning?.({\n        fps: avgFPS,\n        frameTime: deltaTime\n      });\n    }\n\n    // Update callbacks\n    if (this.frameCount % 30 === 0) { // Update every 30 frames (~0.5 seconds)\n      this.callbacks.onFPSUpdate?.(avgFPS);\n    }\n\n    this.lastTime = currentTime;\n\n    return {\n      fps: avgFPS,\n      frameTime: deltaTime\n    };\n  }\n\n  /**\n   * Set performance monitoring callbacks\n   */\n  setCallbacks(callbacks: typeof this.callbacks) {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Get current performance metrics\n   */\n  getCurrentMetrics(): PerformanceMetrics {\n    return {\n      fps: this.currentFPS,\n      frameTime: this.frameTime\n    };\n  }\n\n  /**\n   * Reset performance tracking\n   */\n  reset() {\n    this.frameCount = 0;\n    this.fpsHistory = [];\n    this.frameTimeHistory = [];\n    this.lastTime = performance.now();\n  }\n}\n\n/**\n * Detect device capabilities for performance optimization\n */\nexport class DeviceCapabilityDetector {\n  private static instance: DeviceCapabilityDetector;\n  private capabilities: DeviceCapabilities | null = null;\n\n  static getInstance(): DeviceCapabilityDetector {\n    if (!DeviceCapabilityDetector.instance) {\n      DeviceCapabilityDetector.instance = new DeviceCapabilityDetector();\n    }\n    return DeviceCapabilityDetector.instance;\n  }\n\n  /**\n   * Detect and cache device capabilities\n   */\n  async detectCapabilities(): Promise<DeviceCapabilities> {\n    if (this.capabilities) {\n      return this.capabilities;\n    }\n\n    const isMobile = this.detectMobile();\n    const supportsWebGL = this.detectWebGL();\n    const hardwareConcurrency = navigator.hardwareConcurrency || 4;\n    \n    let memoryGB: number | undefined;\n    if ('memory' in (navigator as any)) {\n      memoryGB = (navigator as any).memory.jsHeapSizeLimit / (1024 ** 3);\n    }\n\n    // Performance benchmarking\n    const performanceLevel = await this.benchmarkPerformance();\n    const isLowPowerDevice = this.detectLowPowerDevice(hardwareConcurrency, memoryGB, performanceLevel);\n\n    this.capabilities = {\n      isMobile,\n      isLowPowerDevice,\n      supportsWebGL,\n      hardwareConcurrency,\n      memoryGB,\n      performanceLevel\n    };\n\n    return this.capabilities;\n  }\n\n  private detectMobile(): boolean {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n  }\n\n  private detectWebGL(): boolean {\n    try {\n      const canvas = document.createElement('canvas');\n      return !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n    } catch {\n      return false;\n    }\n  }\n\n  private detectLowPowerDevice(cores: number, memoryGB?: number, performanceLevel?: string): boolean {\n    // Heuristics for low-power device detection\n    if (cores <= 2) return true;\n    if (memoryGB && memoryGB < 2) return true;\n    if (performanceLevel === 'low') return true;\n    return false;\n  }\n\n  private async benchmarkPerformance(): Promise<'low' | 'medium' | 'high'> {\n    return new Promise((resolve) => {\n      const startTime = performance.now();\n      let operations = 0;\n      const maxTime = 50; // 50ms benchmark window\n\n      const benchmark = () => {\n        const currentTime = performance.now();\n        if (currentTime - startTime >= maxTime) {\n          // Classify performance based on operations completed\n          if (operations < 100000) {\n            resolve('low');\n          } else if (operations < 500000) {\n            resolve('medium');\n          } else {\n            resolve('high');\n          }\n          return;\n        }\n\n        // Simple mathematical operations\n        for (let i = 0; i < 1000; i++) {\n          Math.sin(Math.random() * Math.PI * 2);\n          operations++;\n        }\n\n        requestAnimationFrame(benchmark);\n      };\n\n      requestAnimationFrame(benchmark);\n    });\n  }\n\n  /**\n   * Get cached capabilities or detect if not available\n   */\n  getCapabilities(): DeviceCapabilities | null {\n    return this.capabilities;\n  }\n}\n\n/**\n * Memory pool for efficient particle/object management\n */\nexport class ObjectPool<T> {\n  private available: T[] = [];\n  private inUse = new Set<T>();\n  private createFn: () => T;\n  private resetFn?: (obj: T) => void;\n  private maxSize: number;\n\n  constructor(createFn: () => T, resetFn?: (obj: T) => void, initialSize = 10, maxSize = 1000) {\n    this.createFn = createFn;\n    this.resetFn = resetFn;\n    this.maxSize = maxSize;\n\n    // Pre-populate pool\n    for (let i = 0; i < initialSize; i++) {\n      this.available.push(this.createFn());\n    }\n  }\n\n  /**\n   * Get an object from the pool\n   */\n  acquire(): T {\n    let obj: T;\n\n    if (this.available.length > 0) {\n      obj = this.available.pop()!;\n    } else if (this.inUse.size < this.maxSize) {\n      obj = this.createFn();\n    } else {\n      // Pool is full, reuse oldest object\n      const oldest = this.inUse.values().next().value;\n      if (oldest) {\n        this.release(oldest);\n        obj = oldest;\n      } else {\n        // Fallback: create new object if somehow there's nothing to reuse\n        obj = this.createFn();\n      }\n    }\n\n    this.inUse.add(obj);\n    return obj;\n  }\n\n  /**\n   * Return an object to the pool\n   */\n  release(obj: T): void {\n    if (this.inUse.has(obj)) {\n      this.inUse.delete(obj);\n      if (this.resetFn) {\n        this.resetFn(obj);\n      }\n      this.available.push(obj);\n    }\n  }\n\n  /**\n   * Get pool statistics\n   */\n  getStats() {\n    return {\n      available: this.available.length,\n      inUse: this.inUse.size,\n      total: this.available.length + this.inUse.size\n    };\n  }\n\n  /**\n   * Clear the entire pool\n   */\n  clear(): void {\n    this.available = [];\n    this.inUse.clear();\n  }\n}\n\n/**\n * Utility to get optimal performance settings based on device capabilities\n */\nexport const getOptimalSettings = async (): Promise<{\n  targetFPS: number;\n  maxParticles: number;\n  enableEffects: boolean;\n  enableGlow: boolean;\n  qualityLevel: 'low' | 'medium' | 'high';\n}> => {\n  const detector = DeviceCapabilityDetector.getInstance();\n  const capabilities = await detector.detectCapabilities();\n\n  if (capabilities.performanceLevel === 'low' || capabilities.isLowPowerDevice) {\n    return {\n      targetFPS: 24,\n      maxParticles: 50,\n      enableEffects: false,\n      enableGlow: false,\n      qualityLevel: 'low'\n    };\n  } else if (capabilities.performanceLevel === 'medium') {\n    return {\n      targetFPS: 30,\n      maxParticles: 150,\n      enableEffects: true,\n      enableGlow: false,\n      qualityLevel: 'medium'\n    };\n  } else {\n    return {\n      targetFPS: 60,\n      maxParticles: 300,\n      enableEffects: true,\n      enableGlow: true,\n      qualityLevel: 'high'\n    };\n  }\n};","import type { StreamChunk, Citation, StreamCallbacks, StreamHandlerConfig } from '@/types';\nimport { parseStreamChunk } from '@/lib/utils';\n\nexport interface StreamMessage {\n  id: string;\n  content: string;\n  citations: Citation[];\n  isComplete: boolean;\n}\n\nexport class StreamHandler {\n  private config: Required<StreamHandlerConfig>;\n  private abortController: AbortController | null = null;\n  private currentMessage: StreamMessage | null = null;\n\n  constructor(config: StreamHandlerConfig = {}) {\n    this.config = {\n      timeout: config.timeout || 60000,\n      retryAttempts: config.retryAttempts || 3,\n      retryDelay: config.retryDelay || 1000,\n    };\n  }\n\n  /**\n   * Process a streaming response\n   */\n  async processStream(\n    stream: ReadableStream,\n    callbacks: StreamCallbacks\n  ): Promise<StreamMessage> {\n    this.abortController = new AbortController();\n    this.currentMessage = {\n      id: this.generateId(),\n      content: '',\n      citations: [],\n      isComplete: false,\n    };\n\n    const reader = stream.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    // Set timeout\n    const timeoutId = setTimeout(() => {\n      this.cancel();\n      callbacks.onError?.(new Error('Stream timeout'));\n    }, this.config.timeout);\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) {\n          this.currentMessage.isComplete = true;\n          callbacks.onComplete?.();\n          break;\n        }\n\n        // Decode chunk and add to buffer\n        buffer += decoder.decode(value, { stream: true });\n        \n        // Process complete lines\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n        for (const line of lines) {\n          if (line.trim()) {\n            await this.processLine(line, callbacks);\n          }\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        callbacks.onError?.(new Error('Stream cancelled'));\n      } else {\n        callbacks.onError?.(error instanceof Error ? error : new Error('Unknown streaming error'));\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      reader.releaseLock();\n      this.abortController = null;\n    }\n\n    return this.currentMessage;\n  }\n\n  /**\n   * Process a single line from the stream\n   */\n  private async processLine(line: string, callbacks: StreamCallbacks): Promise<void> {\n    const chunk = parseStreamChunk(line);\n    \n    if (!chunk || !this.currentMessage) return;\n\n    switch (chunk.type) {\n      case 'content':\n        if (chunk.content) {\n          this.currentMessage.content += chunk.content;\n          callbacks.onChunk?.(chunk.content);\n        }\n        break;\n\n      case 'citation':\n        if (chunk.citations) {\n          this.currentMessage.citations.push(...chunk.citations);\n          chunk.citations.forEach((citation: Citation) => {\n            callbacks.onCitation?.(citation);\n          });\n        }\n        break;\n\n      case 'done':\n        this.currentMessage.isComplete = true;\n        callbacks.onComplete?.();\n        return;\n\n      case 'error':\n        callbacks.onError?.(new Error(chunk.error || 'Stream error'));\n        return;\n\n      default:\n        // Handle unknown chunk types gracefully\n        console.warn('Unknown stream chunk type:', chunk.type);\n    }\n  }\n\n  /**\n   * Cancel the current stream\n   */\n  cancel(): void {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n  }\n\n  /**\n   * Get current message state\n   */\n  getCurrentMessage(): StreamMessage | null {\n    return this.currentMessage;\n  }\n\n  /**\n   * Check if streaming is active\n   */\n  isStreaming(): boolean {\n    return this.abortController !== null && this.currentMessage !== null && !this.currentMessage.isComplete;\n  }\n\n  private generateId(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n}\n\n/**\n * Utility class for managing multiple concurrent streams\n */\nexport class StreamManager {\n  private streams: Map<string, StreamHandler> = new Map();\n  private maxConcurrentStreams: number;\n\n  constructor(maxConcurrentStreams: number = 3) {\n    this.maxConcurrentStreams = maxConcurrentStreams;\n  }\n\n  /**\n   * Start a new stream\n   */\n  async startStream(\n    streamId: string,\n    stream: ReadableStream,\n    callbacks: StreamCallbacks,\n    config?: StreamHandlerConfig\n  ): Promise<StreamMessage> {\n    // Check if we're at the concurrent limit\n    if (this.streams.size >= this.maxConcurrentStreams) {\n      throw new Error(`Maximum concurrent streams (${this.maxConcurrentStreams}) reached`);\n    }\n\n    // Cancel existing stream with same ID if it exists\n    if (this.streams.has(streamId)) {\n      this.cancelStream(streamId);\n    }\n\n    const handler = new StreamHandler(config);\n    this.streams.set(streamId, handler);\n\n    try {\n      const result = await handler.processStream(stream, {\n        ...callbacks,\n        onComplete: () => {\n          this.streams.delete(streamId);\n          callbacks.onComplete?.();\n        },\n        onError: (error) => {\n          this.streams.delete(streamId);\n          callbacks.onError?.(error);\n        },\n      });\n\n      return result;\n    } catch (error) {\n      this.streams.delete(streamId);\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel a specific stream\n   */\n  cancelStream(streamId: string): void {\n    const handler = this.streams.get(streamId);\n    if (handler) {\n      handler.cancel();\n      this.streams.delete(streamId);\n    }\n  }\n\n  /**\n   * Cancel all active streams\n   */\n  cancelAllStreams(): void {\n    this.streams.forEach(handler => handler.cancel());\n    this.streams.clear();\n  }\n\n  /**\n   * Get active stream IDs\n   */\n  getActiveStreams(): string[] {\n    return Array.from(this.streams.keys());\n  }\n\n  /**\n   * Get stream status\n   */\n  getStreamStatus(streamId: string): {\n    exists: boolean;\n    isStreaming: boolean;\n    message: StreamMessage | null;\n  } {\n    const handler = this.streams.get(streamId);\n    \n    if (!handler) {\n      return { exists: false, isStreaming: false, message: null };\n    }\n\n    return {\n      exists: true,\n      isStreaming: handler.isStreaming(),\n      message: handler.getCurrentMessage(),\n    };\n  }\n\n  /**\n   * Get number of active streams\n   */\n  getActiveStreamCount(): number {\n    return this.streams.size;\n  }\n}\n\n/**\n * Parse Server-Sent Events (SSE) data\n */\nexport function parseSSEData(data: string): any | null {\n  try {\n    if (data === '[DONE]') {\n      return { type: 'done' };\n    }\n    \n    const parsed = JSON.parse(data);\n    \n    // Handle different response formats\n    if (parsed.choices && parsed.choices[0]) {\n      const choice = parsed.choices[0];\n      \n      if (choice.delta && choice.delta.content) {\n        return {\n          type: 'content',\n          content: choice.delta.content,\n        };\n      }\n      \n      if (choice.message && choice.message.content) {\n        return {\n          type: 'content',\n          content: choice.message.content,\n        };\n      }\n    }\n    \n    // Handle CustomGPT format\n    if (parsed.content) {\n      return {\n        type: 'content',\n        content: parsed.content,\n        citations: parsed.citations || [],\n      };\n    }\n    \n    return parsed;\n  } catch (error) {\n    console.error('Failed to parse SSE data:', error);\n    return null;\n  }\n}\n\n\n/**\n * Validate stream format\n */\nexport function validateStreamChunk(chunk: any): boolean {\n  if (!chunk || typeof chunk !== 'object') {\n    return false;\n  }\n\n  // Must have a type\n  if (!chunk.type || typeof chunk.type !== 'string') {\n    return false;\n  }\n\n  // Validate specific types\n  switch (chunk.type) {\n    case 'content':\n      return typeof chunk.content === 'string';\n    \n    case 'citation':\n      return Array.isArray(chunk.citations);\n    \n    case 'done':\n    case 'error':\n      return true;\n    \n    default:\n      return false;\n  }\n}\n\n// Global stream manager instance\nexport const globalStreamManager = new StreamManager();","/**\n * Voice Theme Interface\n * \n * Defines the contract that all voice interaction themes must implement.\n * Each theme provides unique visual feedback for different voice states.\n */\n\nexport interface IVoiceTheme {\n  /**\n   * Unique identifier for the theme\n   */\n  readonly id: string;\n\n  /**\n   * Display name for the theme\n   */\n  readonly name: string;\n\n  /**\n   * Theme description\n   */\n  readonly description: string;\n\n  /**\n   * Theme category for UI organization\n   */\n  readonly category: 'particle' | 'geometric' | 'advanced' | 'artistic';\n\n  /**\n   * Performance profile for mobile optimization\n   */\n  readonly performanceProfile: 'light' | 'medium' | 'heavy';\n\n  /**\n   * Initialize the theme with canvas context and dimensions\n   */\n  init(context: CanvasRenderingContext2D, width: number, height: number): void;\n\n  /**\n   * Main drawing function called every frame\n   */\n  draw(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void;\n\n  /**\n   * User is speaking state\n   */\n  onUserSpeaking(): void;\n\n  /**\n   * Processing/analyzing speech state\n   */\n  onProcessing(): void;\n\n  /**\n   * AI is responding state\n   */\n  onAiSpeaking(): void;\n\n  /**\n   * Reset to idle state\n   */\n  reset(): void;\n\n  /**\n   * Handle mouse/touch position updates\n   */\n  setMousePosition(x: number, y: number, canvasWidth: number, canvasHeight: number): void;\n\n  /**\n   * Handle mouse/touch hover state\n   */\n  setHovering(hovering: boolean): void;\n\n  /**\n   * Cleanup resources when theme is deactivated\n   */\n  dispose(): void;\n\n  /**\n   * Get current performance metrics\n   */\n  getPerformanceMetrics(): {\n    particleCount?: number;\n    objectCount?: number;\n    memoryUsage?: number;\n    averageFPS?: number;\n  };\n}\n\n/**\n * Theme metadata for UI display\n */\nexport interface ThemeMetadata {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  performanceProfile: string;\n  previewColors: string[];\n  previewDescription: string;\n}\n\n/**\n * Voice state enumeration\n */\nexport enum VoiceState {\n  IDLE = 'idle',\n  USER_SPEAKING = 'userSpeaking',\n  PROCESSING = 'processing',\n  AI_SPEAKING = 'aiSpeaking'\n}\n\n/**\n * Performance settings for different device types\n */\nexport interface PerformanceSettings {\n  targetFPS: number;\n  maxParticles: number;\n  enableEffects: boolean;\n  enableGlow: boolean;\n  qualityLevel: 'low' | 'medium' | 'high';\n}\n\n/**\n * Theme factory function type\n */\nexport type ThemeFactory = () => IVoiceTheme;","/**\n * Theme utilities for persistent theme management\n * \n * Uses cookies for theme persistence to ensure the theme\n * is available during server-side rendering and prevents\n * flash of incorrect theme on page load.\n */\n\nexport type Theme = 'light' | 'dark';\n\nconst THEME_COOKIE_NAME = 'customgpt-theme';\nconst THEME_COOKIE_MAX_AGE = 365 * 24 * 60 * 60; // 1 year in seconds\n\n/**\n * Get theme from cookie\n */\nexport function getThemeFromCookie(): Theme {\n  if (typeof window === 'undefined') return 'light';\n  \n  const cookies = document.cookie.split(';');\n  const themeCookie = cookies.find(cookie => \n    cookie.trim().startsWith(`${THEME_COOKIE_NAME}=`)\n  );\n  \n  if (themeCookie) {\n    const value = themeCookie.split('=')[1].trim();\n    return value === 'dark' ? 'dark' : 'light';\n  }\n  \n  return 'light';\n}\n\n/**\n * Set theme in cookie\n */\nexport function setThemeCookie(theme: Theme) {\n  if (typeof window === 'undefined') return;\n  \n  // Set cookie with max age and path\n  document.cookie = `${THEME_COOKIE_NAME}=${theme}; max-age=${THEME_COOKIE_MAX_AGE}; path=/; SameSite=Lax`;\n}\n\n/**\n * Apply theme to document\n */\nexport function applyThemeToDocument(theme: Theme) {\n  if (typeof window === 'undefined') return;\n  \n  if (theme === 'dark') {\n    document.documentElement.classList.add('dark');\n  } else {\n    document.documentElement.classList.remove('dark');\n  }\n}\n\n/**\n * Initialize theme from cookie and apply to document\n */\nexport function initializeTheme(): Theme {\n  const theme = getThemeFromCookie();\n  applyThemeToDocument(theme);\n  return theme;\n}\n\n/**\n * Set theme and persist to cookie\n */\nexport function setTheme(theme: Theme) {\n  setThemeCookie(theme);\n  applyThemeToDocument(theme);\n}","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConfigStore } from '@/types';\nimport { setTheme as setThemeUtil, getThemeFromCookie, initializeTheme } from '@/lib/theme';\n\n/**\n * Configuration Store\n * \n * Updated to remove API key storage for security.\n * API key is now stored securely on the server.\n * Theme is persisted using cookies for better SSR support.\n */\nexport const useConfigStore = create<ConfigStore>()(\n  persist(\n    (set, get) => ({\n      apiKey: null, // Deprecated - kept for interface compatibility\n      baseURL: 'https://app.customgpt.ai/api/v1', // Not used anymore, server handles this\n      theme: (typeof window !== 'undefined' ? getThemeFromCookie() : 'light') as 'light' | 'dark',\n\n      setApiKey: (key: string) => {\n        // No-op - API key is not stored client-side anymore\n        // This method is kept for backward compatibility\n        console.warn('API key storage has been disabled for security. Configure API key in server environment variables.');\n      },\n\n      setBaseURL: (url: string) => {\n        // No-op - base URL is configured on server\n        console.warn('Base URL configuration has been moved to server. Update CUSTOMGPT_API_BASE_URL in environment variables.');\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Update cookie and document class for theme\n        if (typeof window !== 'undefined') {\n          setThemeUtil(theme);\n        }\n      },\n    }),\n    {\n      name: 'customgpt-config',\n      // Only persist non-sensitive data\n      partialize: (state) => ({\n        theme: state.theme,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Initialize theme from cookie on rehydration\n        if (typeof window !== 'undefined') {\n          const theme = initializeTheme();\n          if (state && state.theme !== theme) {\n            state.theme = theme;\n          }\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { UIStore } from '@/types';\n\nexport const useUIStore = create<UIStore>()(\n  persist(\n    (set) => ({\n      sidebarOpen: true,\n      settingsOpen: false,\n      theme: 'light',\n      fontSize: 'md',\n\n      setSidebarOpen: (open: boolean) => {\n        set({ sidebarOpen: open });\n      },\n\n      setSettingsOpen: (open: boolean) => {\n        set({ settingsOpen: open });\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Apply theme to document\n        if (typeof window !== 'undefined') {\n          document.documentElement.className = theme;\n        }\n      },\n\n      setFontSize: (size: 'sm' | 'md' | 'lg') => {\n        set({ fontSize: size });\n        \n        // Apply font size to document\n        if (typeof window !== 'undefined') {\n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (size) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }),\n    {\n      name: 'customgpt-ui',\n      partialize: (state) => ({\n        sidebarOpen: state.sidebarOpen,\n        theme: state.theme,\n        fontSize: state.fontSize,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Apply theme and font size on rehydration\n        if (typeof window !== 'undefined' && state) {\n          document.documentElement.className = state.theme;\n          \n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (state.fontSize) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface AnalyticsData {\n  conversations: {\n    total: number;\n    active: number;\n    trend: number;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  queries: {\n    total: number;\n    successful: number;\n    failed: number;\n    avgResponseTime: number;\n    topQueries: Array<{\n      query: string;\n      count: number;\n    }>;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  traffic: {\n    uniqueUsers: number;\n    pageViews: number;\n    avgSessionDuration: number;\n    bounceRate: number;\n    data: Array<{\n      date: string;\n      users: number;\n      pageViews: number;\n    }>;\n  };\n  statistics: {\n    totalMessages: number;\n    totalConversations: number;\n    avgMessagesPerConversation: number;\n    satisfactionRate: number;\n    responseAccuracy: number;\n  };\n}\n\ninterface AnalyticsState {\n  analytics: AnalyticsData | null;\n  loading: boolean;\n  error: string | null;\n  dateRange: {\n    startDate: string;\n    endDate: string;\n  };\n  \n  // Actions\n  fetchAnalytics: (projectId: number) => Promise<void>;\n  setDateRange: (startDate: string, endDate: string) => void;\n  exportAnalytics: (format: 'csv' | 'json' | 'pdf') => Promise<void>;\n  reset: () => void;\n}\n\n// Helper function to format dates for API\nconst formatDate = (date: Date): string => {\n  return date.toISOString().split('T')[0];\n};\n\n// Get default date range (last 30 days)\nconst getDefaultDateRange = () => {\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - 30);\n  \n  return {\n    startDate: formatDate(startDate),\n    endDate: formatDate(endDate),\n  };\n};\n\nexport const useAnalyticsStore = create<AnalyticsState>((set, get) => ({\n  analytics: null,\n  loading: false,\n  error: null,\n  dateRange: getDefaultDateRange(),\n\n  fetchAnalytics: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Fetch all reports data in parallel using documented endpoints\n      const [trafficReport, queriesReport, conversationsReport, analysisReport] = await Promise.all([\n        client.getTrafficReport(projectId),\n        client.getQueriesReport(projectId),\n        client.getConversationsReport(projectId),\n        client.getAnalysisReport(projectId, 'daily'),\n      ]);\n\n      // Transform the data to match our interface using actual API response structure\n      // Handle cases where API returns empty arrays instead of numbers\n      const conversationsTotal = Array.isArray(conversationsReport.data?.total) ? 0 : (conversationsReport.data?.total || 0);\n      const queriesTotal = Array.isArray(queriesReport.data?.total) ? 0 : (queriesReport.data?.total || 0);\n      const avgQueriesPerConv = Array.isArray(conversationsReport.data?.average_queries_per_conversation) \n        ? 0 \n        : (Number(conversationsReport.data?.average_queries_per_conversation) || 0);\n\n      const analyticsData: AnalyticsData = {\n        conversations: {\n          total: conversationsTotal,\n          active: Math.floor(conversationsTotal * 0.7), // Estimate active conversations\n          trend: 0, // Calculate trend from data if needed\n          data: Array.isArray(analysisReport.data?.conversations) \n            ? analysisReport.data.conversations.map((item: any) => ({\n                date: item.created_at_interval,\n                count: Number(item.queries_number) || 0,\n              }))\n            : [],\n        },\n        queries: {\n          total: queriesTotal,\n          successful: Array.isArray(queriesReport.data?.query_status) \n            ? (queriesReport.data.query_status.find((s: any) => s.status === 'success')?.count || 0)\n            : 0,\n          failed: Array.isArray(queriesReport.data?.query_status)\n            ? (queriesReport.data.query_status.find((s: any) => s.status === 'failed')?.count || 0)\n            : 0,\n          avgResponseTime: 0, // Not provided by API\n          topQueries: [], // Not provided by these endpoints\n          data: Array.isArray(analysisReport.data?.queries)\n            ? analysisReport.data.queries.map((item: any) => ({\n                date: item.created_at_interval,\n                count: Number(item.queries_number) || 0,\n              }))\n            : [],\n        },\n        traffic: {\n          uniqueUsers: Array.isArray(trafficReport.data?.sources)\n            ? trafficReport.data.sources.reduce((acc: number, source: any) => acc + (source.request_source_number || 0), 0)\n            : 0,\n          pageViews: Array.isArray(trafficReport.data?.sources)\n            ? trafficReport.data.sources.reduce((acc: number, source: any) => acc + (source.request_source_number || 0), 0)\n            : 0,\n          avgSessionDuration: 0, // Not provided by API\n          bounceRate: 0, // Not provided by API\n          data: Array.isArray(trafficReport.data?.sources)\n            ? trafficReport.data.sources.map((source: any) => ({\n                date: new Date().toISOString().split('T')[0], // Current date as traffic report doesn't have dates\n                users: source.request_source_number || 0,\n                pageViews: source.request_source_number || 0,\n              }))\n            : [],\n        },\n        statistics: {\n          totalMessages: queriesTotal,\n          totalConversations: conversationsTotal,\n          avgMessagesPerConversation: avgQueriesPerConv,\n          satisfactionRate: 0, // Not provided by API\n          responseAccuracy: 0, // Not provided by API\n        },\n      };\n\n      set({ analytics: analyticsData, loading: false });\n    } catch (error: any) {\n      console.error('Failed to fetch analytics:', error);\n      \n      let errorMessage = 'Failed to fetch analytics';\n      if (error.status === 401) {\n        const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : 'production';\n        const isDemoMode = deploymentMode === 'demo';\n        if (isDemoMode) {\n          errorMessage = 'API key authentication failed. Please check your API key.';\n          toast.error('Authentication failed. Please check your API key in demo settings.');\n        } else {\n          errorMessage = 'Authentication required. Please check your API key configuration.';\n          toast.error('Authentication failed. Please check your API key configuration.');\n        }\n      } else if (error.status === 404) {\n        errorMessage = 'Analytics data not found for this project.';\n        toast.error('No analytics data available yet.');\n      } else if (error.status === 500) {\n        errorMessage = 'Server error occurred. Please try again later.';\n        toast.error('Server error. Please try again later.');\n      } else {\n        toast.error('Failed to fetch analytics data');\n      }\n      \n      set({ \n        analytics: null,\n        error: errorMessage,\n        loading: false,\n      });\n    }\n  },\n\n  setDateRange: (startDate: string, endDate: string) => {\n    set({ dateRange: { startDate, endDate } });\n  },\n\n  exportAnalytics: async (format: 'csv' | 'json' | 'pdf') => {\n    const analytics = get().analytics;\n    if (!analytics) {\n      toast.error('No analytics data to export');\n      return;\n    }\n\n    try {\n      // Implementation would depend on the format\n      switch (format) {\n        case 'json':\n          const jsonData = JSON.stringify(analytics, null, 2);\n          const blob = new Blob([jsonData], { type: 'application/json' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `analytics-${new Date().toISOString()}.json`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          URL.revokeObjectURL(url);\n          toast.success('Analytics exported successfully');\n          break;\n          \n        case 'csv':\n          // Would need a CSV conversion library or custom implementation\n          toast.info('CSV export not yet implemented');\n          break;\n          \n        case 'pdf':\n          // Would need a PDF generation library\n          toast.info('PDF export not yet implemented');\n          break;\n      }\n    } catch (error) {\n      console.error('Failed to export analytics:', error);\n      toast.error('Failed to export analytics');\n    }\n  },\n\n  reset: () => {\n    set({\n      analytics: null,\n      loading: false,\n      error: null,\n      dateRange: getDefaultDateRange(),\n    });\n  },\n}));","import { create } from 'zustand';\nimport { getClient, isClientInitialized } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { Page, PagesQueryParams } from '@/types/pages.types';\n\ninterface PagesState {\n  pages: Page[];\n  loading: boolean;\n  error: string | null;\n  paginationInfo: {\n    current_page: number;\n    total: number;\n    per_page: number;\n    last_page: number;\n  };\n  queryParams: PagesQueryParams;\n  \n  // Actions\n  fetchPages: (projectId: number) => Promise<void>;\n  deletePage: (projectId: number, pageId: number) => Promise<void>;\n  reindexPage: (projectId: number, pageId: number) => Promise<void>;\n  \n  // UI State\n  setQueryParams: (params: Partial<PagesQueryParams>) => void;\n  reset: () => void;\n}\n\nexport const usePageStore = create<PagesState>((set, get) => ({\n  pages: [],\n  loading: false,\n  error: null,\n  paginationInfo: {\n    current_page: 1,\n    total: 0,\n    per_page: 20,\n    last_page: 1\n  },\n  queryParams: {\n    page: 1,\n    limit: 20,\n    order: 'desc',\n    crawl_status: 'all',\n    index_status: 'all'\n  },\n\n  fetchPages: async (projectId: number) => {\n    if (!isClientInitialized()) {\n      set({ error: 'API client not initialized' });\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const { queryParams } = get();\n      const response = await client.getPages(projectId, queryParams);\n      \n      set({ \n        pages: response.data.pages.data,\n        paginationInfo: {\n          current_page: response.data.pages.current_page,\n          total: response.data.pages.total,\n          per_page: response.data.pages.per_page,\n          last_page: response.data.pages.last_page\n        },\n        loading: false \n      });\n    } catch (error: any) {\n      console.error('Failed to fetch pages:', error);\n      \n      let errorMessage = 'Failed to fetch pages';\n      if (error.status === 400) {\n        errorMessage = 'Invalid request. Please check the project ID.';\n      } else if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Project not found.';\n      } else if (error.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  deletePage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deletePage(projectId, pageId);\n      \n      set(state => ({\n        pages: state.pages.filter(page => page.id !== pageId),\n        loading: false,\n      }));\n      \n      toast.success('Page deleted successfully');\n    } catch (error: any) {\n      console.error('Failed to delete page:', error);\n      \n      let errorMessage = 'Failed to delete page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Page not found.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  reindexPage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.reindexPage(projectId, pageId);\n      \n      // Update local state to show queued status\n      set(state => ({\n        pages: state.pages.map(page => \n          page.id === pageId \n            ? { ...page, crawl_status: 'queued', index_status: 'queued' }\n            : page\n        ),\n        loading: false,\n      }));\n      \n      toast.success('Page reindexing started');\n    } catch (error: any) {\n      console.error('Failed to reindex page:', error);\n      \n      let errorMessage = 'Failed to reindex page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 403) {\n        errorMessage = 'The page could not be reindexed.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  setQueryParams: (params: Partial<PagesQueryParams>) => {\n    set(state => ({\n      queryParams: { ...state.queryParams, ...params },\n    }));\n  },\n\n  reset: () => {\n    set({\n      pages: [],\n      loading: false,\n      error: null,\n      paginationInfo: {\n        current_page: 1,\n        total: 0,\n        per_page: 20,\n        last_page: 1\n      },\n      queryParams: {\n        page: 1,\n        limit: 20,\n        order: 'desc',\n        crawl_status: 'all',\n        index_status: 'all'\n      },\n    });\n  },\n}));","// Sources store - provides state management for source data\n// Currently uses direct API calls in components\n\nimport { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface Source {\n  id: string;\n  project_id: number;\n  name: string;\n  type: 'file' | 'url' | 'text' | 'api';\n  status: 'active' | 'inactive' | 'processing' | 'error';\n  size?: number;\n  file_type?: string;\n  url?: string;\n  content?: string;\n  metadata?: {\n    description?: string;\n    tags?: string[];\n    author?: string;\n    lastIndexed?: string;\n    [key: string]: any;\n  };\n  created_at: string;\n  updated_at: string;\n  indexed_at?: string;\n  error_message?: string;\n}\n\ninterface SourcesState {\n  sources: Source[];\n  currentSource: Source | null;\n  loading: boolean;\n  error: string | null;\n  searchQuery: string;\n  filter: {\n    status?: 'active' | 'inactive' | 'processing' | 'error' | 'all';\n    type?: 'file' | 'url' | 'text' | 'api' | 'all';\n    sortBy?: 'name' | 'created_at' | 'updated_at' | 'size';\n    sortOrder?: 'asc' | 'desc';\n  };\n  syncStatus: {\n    syncing: boolean;\n    lastSync?: string;\n    progress?: number;\n  };\n  \n  // Actions\n  fetchSources: (projectId: number) => Promise<void>;\n  fetchSource: (projectId: number, sourceId: string) => Promise<void>;\n  uploadSources: (projectId: number, files: File[]) => Promise<void>;\n  updateSource: (projectId: number, sourceId: string, updates: Partial<Source>) => Promise<void>;\n  deleteSource: (projectId: number, sourceId: string) => Promise<void>;\n  bulkDelete: (projectId: number, sourceIds: string[]) => Promise<void>;\n  syncSources: (projectId: number) => Promise<void>;\n  \n  // UI State\n  setSearchQuery: (query: string) => void;\n  setFilter: (filter: Partial<SourcesState['filter']>) => void;\n  selectSource: (source: Source | null) => void;\n  reset: () => void;\n}\n\n// Store implementation for source management\nexport const useSourceStore = create<SourcesState>((set, get) => ({\n  sources: [],\n  currentSource: null,\n  loading: false,\n  error: null,\n  searchQuery: '',\n  filter: {\n    status: 'all',\n    type: 'all',\n    sortBy: 'updated_at',\n    sortOrder: 'desc',\n  },\n  syncStatus: {\n    syncing: false,\n  },\n\n  fetchSources: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getSources(projectId);\n      \n      // Extract all sources from sitemaps and uploads\n      const allSources: Source[] = [];\n      \n      if (response.data.sitemaps) {\n        // Map API source structure to store's Source interface\n        response.data.sitemaps.forEach((apiSource: any) => {\n          allSources.push({\n            id: apiSource.id.toString(),\n            project_id: projectId,\n            name: apiSource.settings.sitemap_path || `Source ${apiSource.id}`,\n            type: 'url', // Map 'sitemap' to 'url'\n            status: 'active',\n            metadata: {\n              ...apiSource.settings,\n              pages: apiSource.pages,\n            },\n            created_at: apiSource.created_at,\n            updated_at: apiSource.updated_at,\n          });\n        });\n      }\n      \n      if (response.data.uploads) {\n        const uploads = Array.isArray(response.data.uploads) \n          ? response.data.uploads \n          : [response.data.uploads];\n          \n        uploads.forEach((apiSource: any) => {\n          allSources.push({\n            id: apiSource.id.toString(),\n            project_id: projectId,\n            name: `Upload ${apiSource.id}`,\n            type: 'file',\n            status: 'active',\n            metadata: {\n              ...apiSource.settings,\n              pages: apiSource.pages,\n            },\n            created_at: apiSource.created_at,\n            updated_at: apiSource.updated_at,\n          });\n        });\n      }\n      \n      set({ sources: allSources, loading: false });\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch sources',\n        loading: false,\n      });\n      toast.error('Failed to load sources');\n    }\n  },\n\n  fetchSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      // const client = getClient();\n      // const response = await client.getSource(projectId, sourceId);\n      \n      // const source = response.data;\n      // set({ currentSource: source, loading: false });\n      throw new Error('getSource API method not available');\n      \n      // Update in the list as well\n      // set(state => ({\n      //   sources: state.sources.map(s => s.id === sourceId ? source : s),\n      // }));\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch source',\n        loading: false,\n      });\n      toast.error('Failed to load source details');\n    }\n  },\n\n  uploadSources: async (projectId: number, files: File[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Upload files one by one for better progress tracking\n      const uploadPromises = files.map(file => \n        Promise.reject(new Error('uploadFile API method not available'))\n      );\n      \n      const responses = await Promise.all(uploadPromises);\n      \n      // Refresh sources list\n      await get().fetchSources(projectId);\n      \n      toast.success(`Successfully uploaded ${files.length} file(s)`);\n      set({ loading: false });\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to upload sources',\n        loading: false,\n      });\n      toast.error('Failed to upload files');\n      throw error;\n    }\n  },\n\n  updateSource: async (projectId: number, sourceId: string, updates: Partial<Source>) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      // await client.updateSource(projectId, sourceId, {\n      throw new Error('updateSource API method not available');\n      /*\n        name: updates.name,\n        metadata: updates.metadata,\n        status: updates.status,\n      }); */\n      \n      set(state => ({\n        sources: state.sources.map(source => \n          source.id === sourceId \n            ? { ...source, ...updates, updated_at: new Date().toISOString() } \n            : source\n        ),\n        currentSource: state.currentSource?.id === sourceId \n          ? { ...state.currentSource, ...updates, updated_at: new Date().toISOString() }\n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source updated successfully');\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to update source',\n        loading: false,\n      });\n      toast.error('Failed to update source');\n      throw error;\n    }\n  },\n\n  deleteSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteSource(projectId, parseInt(sourceId));\n      \n      set(state => ({\n        sources: state.sources.filter(source => source.id !== sourceId),\n        currentSource: state.currentSource?.id === sourceId ? null : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source deleted successfully');\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete source',\n        loading: false,\n      });\n      toast.error('Failed to delete source');\n      throw error;\n    }\n  },\n\n  bulkDelete: async (projectId: number, sourceIds: string[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Delete sources in parallel\n      await Promise.all(\n        sourceIds.map(sourceId => client.deleteSource(projectId, parseInt(sourceId)))\n      );\n      \n      set(state => ({\n        sources: state.sources.filter(source => !sourceIds.includes(source.id)),\n        currentSource: sourceIds.includes(state.currentSource?.id || '') \n          ? null \n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success(`Successfully deleted ${sourceIds.length} source(s)`);\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete sources',\n        loading: false,\n      });\n      toast.error('Failed to delete sources');\n      throw error;\n    }\n  },\n\n  syncSources: async (projectId: number) => {\n    set(state => ({\n      syncStatus: { ...state.syncStatus, syncing: true, progress: 0 }\n    }));\n    \n    try {\n      const client = getClient();\n      // await client.syncSources(projectId);\n      throw new Error('syncSources API method not available');\n      \n      // Refresh sources after sync\n      await get().fetchSources(projectId);\n      \n      set(state => ({\n        syncStatus: {\n          syncing: false,\n          lastSync: new Date().toISOString(),\n          progress: 100,\n        }\n      }));\n      \n      toast.success('Sources synchronized successfully');\n    } catch (error) {\n      set(state => ({\n        syncStatus: { ...state.syncStatus, syncing: false },\n        error: error instanceof Error ? error.message : 'Failed to sync sources',\n      }));\n      toast.error('Failed to sync sources');\n      throw error;\n    }\n  },\n\n  setSearchQuery: (query: string) => {\n    set({ searchQuery: query });\n  },\n\n  setFilter: (filter: Partial<SourcesState['filter']>) => {\n    set(state => ({\n      filter: { ...state.filter, ...filter },\n    }));\n  },\n\n  selectSource: (source: Source | null) => {\n    set({ currentSource: source });\n  },\n\n  reset: () => {\n    set({\n      sources: [],\n      currentSource: null,\n      loading: false,\n      error: null,\n      searchQuery: '',\n      filter: {\n        status: 'all',\n        type: 'all',\n        sortBy: 'updated_at',\n        sortOrder: 'desc',\n      },\n      syncStatus: {\n        syncing: false,\n      },\n    });\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { UserProfileStore, UserProfile } from '@/types';\n\n// CustomGPT.ai API Response format\ninterface CustomGPTResponse<T> {\n  status: 'success' | 'error';\n  data: T;\n}\n\nexport const useProfileStore = create<UserProfileStore>()(\n  persist(\n    (set, get) => ({\n      // Initial State\n      profile: null,\n      loading: false,\n      error: null,\n\n      // Profile Management - GET /api/v1/user\n      fetchProfile: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.getUserProfile();\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n          } else {\n            throw new Error('Failed to fetch profile');\n          }\n        } catch (error: any) {\n          console.error('Failed to fetch profile:', error);\n          \n          let errorMessage = 'Failed to fetch profile';\n          \n          if (error.status === 401) {\n            const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : null;\n            const isDemoMode = deploymentMode === 'demo';\n            if (isDemoMode) {\n              errorMessage = 'API key authentication failed. Please check your API key.';\n              toast.error('Authentication failed. Please check your API key in demo settings.');\n            } else {\n              errorMessage = 'Authentication required. Please check your API key configuration.';\n              toast.error('Authentication failed. Please check your API key configuration.');\n            }\n          } else if (error.status === 500) {\n            errorMessage = 'Server error occurred. Please try again later.';\n            toast.error('Server error. Please try again later.');\n          } else {\n            toast.error('Failed to load profile');\n          }\n          \n          set({ \n            error: errorMessage,\n            loading: false \n          });\n        }\n      },\n\n      // Profile Update - POST /api/v1/user (multipart/form-data)\n      updateProfile: async (name: string, profilePhoto?: File) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Create FormData for multipart request\n          const formData = new FormData();\n          formData.append('name', name);\n          \n          if (profilePhoto) {\n            formData.append('profile_photo', profilePhoto);\n          }\n          \n          const response = await client.updateUserProfile(formData);\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n            toast.success('Profile updated successfully');\n          } else {\n            throw new Error('Failed to update profile');\n          }\n        } catch (error: any) {\n          console.error('Failed to update profile:', error);\n          \n          let errorMessage = 'Failed to update profile';\n          \n          if (error.status === 401) {\n            const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : null;\n            const isDemoMode = deploymentMode === 'demo';\n            if (isDemoMode) {\n              errorMessage = 'API key authentication failed. Please check your API key.';\n              toast.error('Authentication failed. Please check your API key in demo settings.');\n            } else {\n              errorMessage = 'Authentication required. Please check your API key configuration.';\n              toast.error('Authentication failed. Please check your API key configuration.');\n            }\n          } else if (error.status === 422 || error.status === 400) {\n            // Handle validation errors\n            if (error.data?.data?.errors) {\n              const errors = error.data.data.errors;\n              if (errors.profile_photo && Array.isArray(errors.profile_photo)) {\n                errorMessage = errors.profile_photo[0];\n                toast.error(errorMessage);\n              } else {\n                // Handle other validation errors\n                const firstError = Object.values(errors).flat()[0] as string;\n                errorMessage = firstError || 'Validation error occurred';\n                toast.error(errorMessage);\n              }\n            } else {\n              errorMessage = error.message || 'Validation error occurred';\n              toast.error(errorMessage);\n            }\n          } else if (error.status === 500) {\n            errorMessage = 'Server error occurred. Please try again later.';\n            toast.error('Server error. Please try again later.');\n          } else {\n            errorMessage = error.message || 'Failed to update profile';\n            toast.error(errorMessage);\n          }\n          \n          set({ \n            error: errorMessage,\n            loading: false \n          });\n        }\n      },\n\n      // Utility\n      reset: () => {\n        set({\n          profile: null,\n          loading: false,\n          error: null,\n        });\n      },\n    }),\n    {\n      name: 'profile-store',\n      partialize: (state) => ({\n        profile: state.profile,\n      }),\n    }\n  )\n);","import { create } from 'zustand';\nimport { toast } from 'sonner';\nimport { getClient } from '@/lib/api/client';\nimport type { APIResponse, AgentStats } from '@/types';\n\nexport interface ProjectSettings {\n  // Appearance\n  chatbot_avatar?: string;\n  chatbot_background_type?: 'image' | 'color';\n  chatbot_background?: string;\n  chatbot_background_color?: string;\n  chatbot_color?: string;\n  chatbot_toolbar_color?: string;\n  chatbot_title?: string;\n  chatbot_title_color?: string;\n  user_avatar?: string;\n  user_avatar_enabled?: boolean;\n  spotlight_avatar_enabled?: boolean;\n  spotlight_avatar?: string;\n  spotlight_avatar_shape?: 'rectangle' | 'circle';\n  spotlight_avatar_type?: 'default' | 'image';\n  user_avatar_orientation?: 'agent-left-user-right' | 'agent-right-user-left' | 'both-left' | 'both-right';\n  \n  // Messages & Behavior\n  default_prompt?: string;\n  example_questions?: string[];\n  persona_instructions?: string;\n  response_source?: 'default' | 'own_content' | 'openai_content';\n  chatbot_model?: string;\n  custom_persona?: string;\n  agent_capability?: 'fastest-responses' | 'optimal-choice' | 'advanced-reasoning' | 'complex-tasks';\n  chatbot_msg_lang?: string;\n  input_field_addendum?: string;\n  \n  // Messages\n  hang_in_there_msg?: string;\n  chatbot_siesta_msg?: string;\n  no_answer_message?: string;\n  ending_message?: string;\n  try_asking_questions_msg?: string;\n  view_more_msg?: string;\n  view_less_msg?: string;\n  \n  // Citations\n  enable_citations?: number;\n  citations_view_type?: 'user' | 'show' | 'hide';\n  citations_answer_source_label_msg?: string;\n  citations_sources_label_msg?: string;\n  image_citation_display?: 'default' | 'inline' | 'none';\n  enable_inline_citations_api?: boolean;\n  hide_sources_from_responses?: boolean;\n  \n  // Features\n  enable_feedbacks?: boolean;\n  is_loading_indicator_enabled?: boolean;\n  remove_branding?: boolean;\n  private_deployment?: boolean;\n  use_context_aware_starter_question?: boolean;\n  enable_recaptcha_for_public_chatbots?: boolean;\n  is_selling_enabled?: boolean;\n  license_slug?: boolean;\n  selling_url?: string;\n  can_share_conversation?: boolean;\n  can_export_conversation?: boolean;\n  conversation_time_window?: boolean;\n  conversation_retention_period?: 'day' | 'week' | 'month' | 'quarter' | 'year' | 'custom' | 'never';\n  conversation_retention_days?: number;\n  enable_agent_knowledge_base_awareness?: boolean;\n  markdown_enabled?: boolean;\n}\n\nexport interface ProjectPlugin {\n  id: string;\n  name: string;\n  enabled: boolean;\n  description?: string;\n  category?: string;\n  settings?: Record<string, any>;\n}\n\n// Using AgentStats from the API instead of custom ProjectStats\nexport type ProjectStats = AgentStats;\n\nexport interface ProjectSettingsStore {\n  // Settings\n  settings: ProjectSettings | null;\n  settingsLoading: boolean;\n  settingsError: string | null;\n\n  // Plugins\n  plugins: ProjectPlugin[];\n  pluginsLoading: boolean;\n  pluginsError: string | null;\n\n  // Stats\n  stats: ProjectStats | null;\n  statsLoading: boolean;\n  statsError: string | null;\n\n  // Actions\n  fetchSettings: (projectId: number) => Promise<void>;\n  updateSettings: (projectId: number, settings: Partial<ProjectSettings>) => Promise<void>;\n  fetchPlugins: (projectId: number) => Promise<void>;\n  updatePlugin: (projectId: number, pluginId: string, enabled: boolean) => Promise<void>;\n  fetchStats: (projectId: number) => Promise<void>;\n  reset: () => void;\n}\n\n// Track active requests to prevent duplicates\nconst activeRequests = new Map<string, boolean>();\n\nexport const useProjectSettingsStore = create<ProjectSettingsStore>((set, get) => ({\n  // Initial state\n  settings: null,\n  settingsLoading: false,\n  settingsError: null,\n  plugins: [],\n  pluginsLoading: false,\n  pluginsError: null,\n  stats: null,\n  statsLoading: false,\n  statsError: null,\n\n  // Fetch project settings\n  fetchSettings: async (projectId: number) => {\n    const requestKey = `settings-${projectId}`;\n    \n    // Prevent duplicate requests\n    if (activeRequests.get(requestKey)) {\n      return;\n    }\n    \n    activeRequests.set(requestKey, true);\n    \n    // Clear previous errors and set loading state\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      const response = await getClient().getAgentSettings(projectId);\n\n      // The API client returns the data directly, not wrapped with status\n      if (response && response.data) {\n        set({ \n          settings: response.data, \n          settingsLoading: false,\n          settingsError: null // Explicitly clear error on success\n        });\n      } else if (response) {\n        // If response exists but doesn't have data property, it might be the direct data\n        set({ \n          settings: response as any, \n          settingsLoading: false,\n          settingsError: null\n        });\n      } else {\n        throw new Error('Failed to fetch project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      // Only show toast for actual errors, not for expected scenarios\n      if (error instanceof Error && !error.message.includes('404')) {\n        toast.error(errorMessage);\n      }\n    } finally {\n      activeRequests.delete(requestKey);\n    }\n  },\n\n  // Update project settings\n  updateSettings: async (projectId: number, settingsUpdate: Partial<ProjectSettings>) => {\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      // Create FormData for multipart/form-data\n      const formData = new FormData();\n      \n      // Default values for fields that API requires to have a value\n      const defaultValues: Record<string, string> = {\n        ending_message: 'Please email us for further support',\n        no_answer_message: 'Sorry, I don\\'t have an answer for that.',\n        try_asking_questions_msg: 'Try asking these questions...',\n        view_more_msg: 'View more',\n        view_less_msg: 'View less',\n        citations_answer_source_label_msg: 'Where did this answer come from?',\n        citations_sources_label_msg: 'Sources',\n        hang_in_there_msg: 'Hang in there! I\\'m thinking..',\n        chatbot_siesta_msg: 'Oops! The agent is taking a siesta. We are aware of this and will get it back soon! Please try again later.'\n      };\n\n      Object.entries(settingsUpdate).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          if (key === 'example_questions' && Array.isArray(value)) {\n            // Handle array fields - use bracket notation without index\n            value.forEach((question) => {\n              formData.append(`example_questions[]`, question);\n            });\n          } else if (value instanceof File) {\n            // Handle file uploads\n            formData.append(key, value);\n          } else {\n            // Handle regular fields\n            // If the value is empty and there's a default, use the default\n            const stringValue = String(value);\n            if (stringValue === '' && defaultValues[key]) {\n              formData.append(key, defaultValues[key]);\n            } else {\n              formData.append(key, stringValue);\n            }\n          }\n        }\n      });\n\n      const response = await getClient().updateAgentSettings(projectId, formData);\n\n      // The API client returns the data directly\n      if (response) {\n        // Instead of merging, re-fetch the settings to ensure we have the latest data\n        set({ settingsLoading: false });\n        \n        // Re-fetch settings to get the updated data from server\n        await get().fetchSettings(projectId);\n        \n        toast.success('Project settings updated successfully');\n      } else {\n        throw new Error('Failed to update project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project plugins\n  fetchPlugins: async (projectId: number) => {\n    set({ pluginsLoading: true, pluginsError: null });\n\n    try {\n      const response = await getClient().getProjectPlugins(projectId);\n\n      // The API client returns the data directly\n      if (response) {\n        const pluginsData = response.data || response;\n        set({ \n          plugins: Array.isArray(pluginsData) ? pluginsData : [], \n          pluginsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project plugins');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project plugins';\n      set({ \n        pluginsError: errorMessage, \n        pluginsLoading: false,\n        plugins: [] // Fallback to empty array\n      });\n      console.warn('Plugins not available:', errorMessage);\n    }\n  },\n\n  // Update project plugin\n  updatePlugin: async (projectId: number, pluginId: string, enabled: boolean) => {\n    try {\n      // This endpoint might not exist yet, so we'll implement it as a placeholder\n      const response = await getClient().updateProjectPlugin(projectId, pluginId, { enabled });\n\n      // The API client returns the data directly\n      if (response) {\n        // Update plugin in store\n        const plugins = get().plugins.map(plugin =>\n          plugin.id === pluginId ? { ...plugin, enabled } : plugin\n        );\n        \n        set({ plugins });\n        toast.success(`Plugin ${enabled ? 'enabled' : 'disabled'} successfully`);\n      } else {\n        throw new Error('Failed to update plugin');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update plugin';\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project stats\n  fetchStats: async (projectId: number) => {\n    set({ statsLoading: true, statsError: null });\n\n    try {\n      const response = await getClient().getAgentStats(projectId);\n\n      // The API client returns the data directly\n      if (response) {\n        const statsData = response.data || response;\n        set({ \n          stats: statsData, \n          statsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project stats');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project stats';\n      set({ \n        statsError: errorMessage, \n        statsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Reset store\n  reset: () => {\n    set({\n      settings: null,\n      settingsLoading: false,\n      settingsError: null,\n      plugins: [],\n      pluginsLoading: false,\n      pluginsError: null,\n      stats: null,\n      statsLoading: false,\n      statsError: null,\n    });\n  },\n}));","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport type { AgentLicense } from '@/types';\n\ninterface LicenseStore {\n  licenses: AgentLicense[];\n  loading: boolean;\n  error: string | null;\n  \n  fetchLicenses: (projectId: number) => Promise<void>;\n  createLicense: (projectId: number, name: string) => Promise<AgentLicense>;\n  updateLicense: (projectId: number, licenseId: string, name: string) => Promise<void>;\n  deleteLicense: (projectId: number, licenseId: string) => Promise<void>;\n  clearError: () => void;\n}\n\nexport const useLicenseStore = create<LicenseStore>((set, get) => ({\n  licenses: [],\n  loading: false,\n  error: null,\n\n  fetchLicenses: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getLicenses(projectId);\n      \n      logger.info('LICENSES', 'API Response', {\n        projectId,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataType: Array.isArray(response?.data) ? 'array' : typeof response?.data,\n        dataLength: Array.isArray(response?.data) ? response.data.length : 0\n      });\n      \n      // Handle response format based on API documentation\n      const licenses = Array.isArray(response.data) ? response.data : [];\n      \n      logger.info('LICENSES', 'Processed licenses', {\n        count: licenses.length,\n        licenses: licenses.map((l: any) => ({ \n          name: l.name, \n          key: l.key?.substring(0, 8) + '...', \n          project_id: l.project_id \n        }))\n      });\n      \n      set({ \n        licenses,\n        loading: false \n      });\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to fetch licenses', {\n        projectId,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        responseText: error?.responseText || 'No response text'\n      });\n      \n      // Handle JSON parsing errors specifically\n      let errorMessage = 'Failed to fetch licenses';\n      if (error?.status === 403 || error?.data?.message?.includes('not allowed')) {\n        // This is expected for some projects - don't show an error\n        errorMessage = '';\n        set({ \n          error: null,\n          loading: false,\n          licenses: []\n        });\n        throw error; // Still throw to handle in component\n      } else if (error?.message?.includes('Unexpected token')) {\n        errorMessage = 'API returned invalid response format. This may be a server configuration issue.';\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      \n      if (errorMessage) {\n        set({ \n          error: errorMessage,\n          loading: false,\n          licenses: []\n        });\n      }\n    }\n  },\n\n  createLicense: async (projectId: number, name: string) => {\n    set({ loading: true, error: null });\n    \n    logger.info('LICENSES', 'Creating license', {\n      projectId,\n      name\n    });\n    \n    try {\n      const client = getClient();\n      const response = await client.createLicense(projectId, { name });\n      \n      logger.info('LICENSES', 'Create license API response', {\n        projectId,\n        name,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataStructure: response?.data ? Object.keys(response.data) : [],\n        licenseKey: response.data?.licenseKey?.substring(0, 8) + '...'\n      });\n      \n      // Handle response format based on API documentation\n      // Response contains { license: {...}, licenseKey: \"...\" }\n      const newLicense = response.data?.license || response.data;\n      \n      if (newLicense) {\n        logger.info('LICENSES', 'New license created', {\n          licenseName: newLicense.name,\n          licenseKey: newLicense.key?.substring(0, 8) + '...',\n          project_id: newLicense.project_id\n        });\n        \n        set(state => ({\n          licenses: [...state.licenses, newLicense],\n          loading: false\n        }));\n      }\n      \n      return newLicense;\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to create license', {\n        projectId,\n        name,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        responseText: error?.responseText || 'No response text'\n      });\n      \n      // Handle JSON parsing errors specifically\n      let errorMessage = 'Failed to create license';\n      if (error?.message?.includes('Unexpected token')) {\n        errorMessage = 'API returned invalid response format. This may be a server configuration issue.';\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  updateLicense: async (projectId: number, licenseId: string, name: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.updateLicense(projectId, licenseId, { name });\n      \n      logger.info('LICENSES', 'Updated license', {\n        projectId,\n        licenseId,\n        name\n      });\n      \n      // Handle response format based on API documentation\n      const updatedLicense = (response as any).license || response.data;\n      \n      if (updatedLicense) {\n        set(state => ({\n          licenses: state.licenses.map(license => \n            license.key === licenseId ? { ...license, name, updated_at: new Date().toISOString() } : license\n          ),\n          loading: false\n        }));\n      }\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to update license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to update license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  deleteLicense: async (projectId: number, licenseId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteLicense(projectId, licenseId);\n      \n      logger.info('LICENSES', 'Deleted license', {\n        projectId,\n        licenseId\n      });\n      \n      set(state => ({\n        licenses: state.licenses.filter(license => license.key !== licenseId),\n        loading: false\n      }));\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to delete license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to delete license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  clearError: () => {\n    set({ error: null });\n  }\n}));","/**\n * Store Index - Central State Management\n * \n * This file exports all Zustand stores used in the application.\n * Each store manages a specific domain of the application state.\n * \n * Architecture:\n * - Uses Zustand for lightweight state management\n * - Each store is independent but can interact via imports\n * - Stores handle both state and async operations (API calls)\n * - All stores use TypeScript for type safety\n * \n * Store Overview:\n * - config: API keys, base URLs, theme settings\n * - agents: Agent/chatbot management and CRUD operations\n * - conversations: Chat session management\n * - messages: Message handling, streaming, and history\n * - ui: UI preferences and layout state\n * - analytics: Usage tracking and metrics\n * - pages: Agent knowledge base pages\n * - sources: Citation sources and references\n * - profile: User profile and limits\n * - project-settings: Agent-specific settings\n * - licenses: License key management\n * \n * Features:\n * - Centralized state management with TypeScript support\n * - Domain-specific stores for organized architecture\n * - Automated error handling and recovery\n * - Cross-store communication and data consistency\n */\n\n// Export all stores from a single entry point\nexport { useConfigStore } from './config';\nexport { useAgentStore } from './agents';\nexport { useConversationStore } from './conversations';\nexport { useMessageStore } from './messages';\nexport { useUIStore } from './ui';\nexport { useAnalyticsStore } from './analytics';\nexport { usePageStore } from './pages';\nexport { useSourceStore } from './sources';\nexport { useProfileStore } from './profile';\nexport { useProjectSettingsStore } from './project-settings';\nexport { useLicenseStore } from './licenses';\n\n/**\n * Store initialization helper\n * \n * Currently, Zustand stores auto-initialize on first access.\n * This function is provided for future use cases where\n * manual initialization might be needed (e.g., SSR, testing).\n * \n * @example\n * // In your app initialization\n * initializeStores();\n */\nexport function initializeStores() {\n  // Stores will auto-initialize when first accessed\n  // This function can be used for any additional setup if needed\n}\n\n/**\n * Store cleanup helper\n * \n * Zustand automatically handles cleanup when components unmount.\n * This function is provided for manual cleanup scenarios\n * (e.g., user logout, testing teardown).\n * \n * To implement cleanup:\n * 1. Add a reset() method to each store\n * 2. Call each store's reset() method here\n * \n * @example\n * // On user logout\n * cleanupStores();\n */\nexport function cleanupStores() {\n  // Add any cleanup logic if needed\n  // Currently, Zustand handles cleanup automatically\n}","/**\n * Performance Optimizations for Voice Themes\n * \n * Advanced performance optimizations including LOD system, render culling,\n * batch rendering, and memory management for maintaining 30+ FPS on all devices.\n */\n\nimport { PerformanceMetrics, DeviceCapabilities } from '../utils/performance';\n\nexport interface LODSettings {\n  level: 0 | 1 | 2; // 0 = high, 1 = medium, 2 = low\n  particleReduction: number; // 0-1, percentage reduction\n  effectsDisabled: boolean;\n  glowDisabled: boolean;\n  simplifiedRendering: boolean;\n  skipFrames: number; // Skip every N frames for heavy operations\n}\n\nexport interface CullingBounds {\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n  near?: number;\n  far?: number;\n}\n\nexport interface RenderBatch {\n  color: string;\n  particles: Array<{ x: number; y: number; size: number; alpha: number }>;\n  glowEnabled: boolean;\n  effectsEnabled: boolean;\n}\n\n/**\n * Level-of-Detail Manager for Performance Scaling\n */\nexport class LODManager {\n  private currentLOD: LODSettings;\n  private frameCount = 0;\n  private lastPerformanceCheck = 0;\n  private performanceHistory: number[] = [];\n  \n  private lodProfiles: Record<number, LODSettings> = {\n    0: { // High quality\n      level: 0,\n      particleReduction: 0,\n      effectsDisabled: false,\n      glowDisabled: false,\n      simplifiedRendering: false,\n      skipFrames: 0\n    },\n    1: { // Medium quality\n      level: 1,\n      particleReduction: 0.3,\n      effectsDisabled: false,\n      glowDisabled: true,\n      simplifiedRendering: false,\n      skipFrames: 1\n    },\n    2: { // Low quality\n      level: 2,\n      particleReduction: 0.6,\n      effectsDisabled: true,\n      glowDisabled: true,\n      simplifiedRendering: true,\n      skipFrames: 2\n    }\n  };\n\n  constructor(initialLOD = 1) {\n    this.currentLOD = this.lodProfiles[initialLOD];\n  }\n\n  /**\n   * Update LOD based on performance metrics\n   */\n  updateLOD(metrics: PerformanceMetrics): LODSettings {\n    this.frameCount++;\n    \n    // Check performance every 30 frames (0.5 seconds at 60fps)\n    if (this.frameCount - this.lastPerformanceCheck >= 30) {\n      this.performanceHistory.push(metrics.fps);\n      \n      // Keep only last 5 measurements (2.5 seconds)\n      if (this.performanceHistory.length > 5) {\n        this.performanceHistory.shift();\n      }\n      \n      const avgFPS = this.performanceHistory.reduce((sum, fps) => sum + fps, 0) / this.performanceHistory.length;\n      this.adjustLODBasedOnFPS(avgFPS);\n      \n      this.lastPerformanceCheck = this.frameCount;\n    }\n    \n    return this.currentLOD;\n  }\n\n  private adjustLODBasedOnFPS(avgFPS: number): void {\n    const targetFPS = 30;\n    \n    if (avgFPS < targetFPS * 0.7 && this.currentLOD.level < 2) {\n      // Performance is poor, reduce quality\n      this.currentLOD = this.lodProfiles[Math.min(2, this.currentLOD.level + 1)];\n      console.log(`[LOD] Reducing quality to level ${this.currentLOD.level} (FPS: ${avgFPS.toFixed(1)})`);\n    } else if (avgFPS > targetFPS * 1.2 && this.currentLOD.level > 0) {\n      // Performance is good, can increase quality\n      this.currentLOD = this.lodProfiles[Math.max(0, this.currentLOD.level - 1)];\n      console.log(`[LOD] Increasing quality to level ${this.currentLOD.level} (FPS: ${avgFPS.toFixed(1)})`);\n    }\n  }\n\n  getCurrentLOD(): LODSettings {\n    return this.currentLOD;\n  }\n\n  shouldSkipFrame(): boolean {\n    return this.currentLOD.skipFrames > 0 && \n           this.frameCount % (this.currentLOD.skipFrames + 1) !== 0;\n  }\n}\n\n/**\n * Frustum Culling for Off-screen Particle Elimination\n */\nexport class FrustumCuller {\n  private bounds!: CullingBounds;\n  private margin = 50; // Extra margin to prevent pop-in\n  \n  constructor(width: number, height: number, margin = 50) {\n    this.margin = margin;\n    this.updateBounds(width, height);\n  }\n\n  updateBounds(width: number, height: number): void {\n    this.bounds = {\n      left: -this.margin,\n      right: width + this.margin,\n      top: -this.margin,\n      bottom: height + this.margin,\n      near: -200,\n      far: 200\n    };\n  }\n\n  /**\n   * Check if a particle is within visible bounds\n   */\n  isVisible(x: number, y: number, z = 0, size = 0): boolean {\n    return (\n      x + size >= this.bounds.left &&\n      x - size <= this.bounds.right &&\n      y + size >= this.bounds.top &&\n      y - size <= this.bounds.bottom &&\n      (this.bounds.near === undefined || z >= this.bounds.near) &&\n      (this.bounds.far === undefined || z <= this.bounds.far)\n    );\n  }\n\n  /**\n   * Filter array of particles to only visible ones\n   */\n  cullParticles<T extends { x: number; y: number; z?: number; size?: number }>(particles: T[]): T[] {\n    return particles.filter(particle => \n      this.isVisible(\n        particle.x, \n        particle.y, \n        particle.z || 0, \n        particle.size || 0\n      )\n    );\n  }\n\n  /**\n   * Get culling statistics\n   */\n  getCullingStats<T extends { x: number; y: number }>(particles: T[]): {\n    total: number;\n    visible: number;\n    culled: number;\n    cullingRatio: number;\n  } {\n    const visible = this.cullParticles(particles);\n    const culled = particles.length - visible.length;\n    \n    return {\n      total: particles.length,\n      visible: visible.length,\n      culled,\n      cullingRatio: particles.length > 0 ? culled / particles.length : 0\n    };\n  }\n}\n\n/**\n * Batch Renderer for Optimized Drawing\n */\nexport class BatchRenderer {\n  private batches: Map<string, RenderBatch> = new Map();\n  private maxBatchSize = 1000;\n  \n  /**\n   * Add particle to appropriate batch\n   */\n  addToBatch(\n    color: string, \n    x: number, \n    y: number, \n    size: number, \n    alpha: number,\n    glowEnabled = false,\n    effectsEnabled = false\n  ): void {\n    const batchKey = `${color}_${glowEnabled}_${effectsEnabled}`;\n    \n    if (!this.batches.has(batchKey)) {\n      this.batches.set(batchKey, {\n        color,\n        particles: [],\n        glowEnabled,\n        effectsEnabled\n      });\n    }\n    \n    const batch = this.batches.get(batchKey)!;\n    if (batch.particles.length < this.maxBatchSize) {\n      batch.particles.push({ x, y, size, alpha });\n    }\n  }\n\n  /**\n   * Render all batches efficiently\n   */\n  renderBatches(context: CanvasRenderingContext2D, lodSettings: LODSettings): void {\n    Array.from(this.batches.entries()).forEach(([batchKey, batch]) => {\n      if (batch.particles.length === 0) return;\n      \n      context.save();\n      context.fillStyle = batch.color;\n      \n      // Skip effects if disabled by LOD\n      const shouldRenderEffects = batch.effectsEnabled && !lodSettings.effectsDisabled;\n      const shouldRenderGlow = batch.glowEnabled && !lodSettings.glowDisabled;\n      \n      if (lodSettings.simplifiedRendering) {\n        // Simplified rendering: draw all particles as simple circles\n        this.renderSimplifiedBatch(context, batch);\n      } else {\n        // Full rendering: individual particles with effects\n        this.renderFullBatch(context, batch, shouldRenderEffects, shouldRenderGlow);\n      }\n      \n      context.restore();\n    });\n  }\n\n  private renderSimplifiedBatch(context: CanvasRenderingContext2D, batch: RenderBatch): void {\n    context.beginPath();\n    batch.particles.forEach(particle => {\n      context.globalAlpha = particle.alpha;\n      context.moveTo(particle.x + particle.size, particle.y);\n      context.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n    });\n    context.fill();\n  }\n\n  private renderFullBatch(\n    context: CanvasRenderingContext2D, \n    batch: RenderBatch,\n    renderEffects: boolean,\n    renderGlow: boolean\n  ): void {\n    batch.particles.forEach(particle => {\n      context.save();\n      context.globalAlpha = particle.alpha;\n      \n      // Render glow first if enabled\n      if (renderGlow && particle.alpha > 0.5) {\n        const glowGradient = context.createRadialGradient(\n          particle.x, particle.y, 0,\n          particle.x, particle.y, particle.size * 3\n        );\n        glowGradient.addColorStop(0, batch.color);\n        glowGradient.addColorStop(1, 'transparent');\n        \n        context.fillStyle = glowGradient;\n        context.globalAlpha = particle.alpha * 0.3;\n        context.beginPath();\n        context.arc(particle.x, particle.y, particle.size * 3, 0, Math.PI * 2);\n        context.fill();\n      }\n      \n      // Render main particle\n      context.globalAlpha = particle.alpha;\n      context.fillStyle = batch.color;\n      context.beginPath();\n      context.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n      context.fill();\n      \n      context.restore();\n    });\n  }\n\n  /**\n   * Clear all batches\n   */\n  clearBatches(): void {\n    Array.from(this.batches.values()).forEach(batch => {\n      batch.particles = [];\n    });\n  }\n\n  /**\n   * Get batch statistics\n   */\n  getBatchStats(): {\n    batchCount: number;\n    totalParticles: number;\n    avgBatchSize: number;\n    largestBatch: number;\n  } {\n    const batchCount = this.batches.size;\n    let totalParticles = 0;\n    let largestBatch = 0;\n    \n    Array.from(this.batches.values()).forEach(batch => {\n      totalParticles += batch.particles.length;\n      largestBatch = Math.max(largestBatch, batch.particles.length);\n    });\n    \n    return {\n      batchCount,\n      totalParticles,\n      avgBatchSize: batchCount > 0 ? totalParticles / batchCount : 0,\n      largestBatch\n    };\n  }\n}\n\n/**\n * Memory Usage Monitor and Optimizer\n */\nexport class MemoryOptimizer {\n  private lastGCTime = 0;\n  private gcInterval = 10000; // 10 seconds\n  private memoryPressureThreshold = 0.85; // 85% of heap limit\n  \n  /**\n   * Check memory usage and trigger cleanup if needed\n   */\n  checkMemoryPressure(): { pressure: number; shouldCleanup: boolean } {\n    const currentTime = performance.now();\n    let pressure = 0;\n    let shouldCleanup = false;\n    \n    // Check if memory API is available\n    if ('memory' in (performance as any)) {\n      const memInfo = (performance as any).memory;\n      pressure = memInfo.usedJSHeapSize / memInfo.jsHeapSizeLimit;\n      shouldCleanup = pressure > this.memoryPressureThreshold;\n    }\n    \n    // Force cleanup based on time interval\n    if (currentTime - this.lastGCTime > this.gcInterval) {\n      shouldCleanup = true;\n      this.lastGCTime = currentTime;\n    }\n    \n    return { pressure, shouldCleanup };\n  }\n\n  /**\n   * Suggest memory optimization actions\n   */\n  getOptimizationSuggestions(pressure: number): {\n    reduceParticles: boolean;\n    clearCaches: boolean;\n    disableEffects: boolean;\n    simplifyRendering: boolean;\n  } {\n    return {\n      reduceParticles: pressure > 0.7,\n      clearCaches: pressure > 0.8,\n      disableEffects: pressure > 0.75,\n      simplifyRendering: pressure > 0.85\n    };\n  }\n}\n\n/**\n * Animation Frame Controller for Battery Optimization\n */\nexport class AnimationController {\n  private isVisible = true;\n  private targetFPS = 30;\n  private actualInterval = 1000 / 30; // ~33ms\n  private lastFrameTime = 0;\n  private frameBudget = 16.67; // ~60fps budget, but we target lower\n  \n  constructor(targetFPS = 30) {\n    this.setTargetFPS(targetFPS);\n    this.setupVisibilityHandling();\n  }\n\n  /**\n   * Set target FPS and update timing\n   */\n  setTargetFPS(fps: number): void {\n    this.targetFPS = Math.max(10, Math.min(60, fps)); // Clamp between 10-60\n    this.actualInterval = 1000 / this.targetFPS;\n  }\n\n  /**\n   * Check if frame should be rendered\n   */\n  shouldRenderFrame(): boolean {\n    if (!this.isVisible) return false;\n    \n    const currentTime = performance.now();\n    const deltaTime = currentTime - this.lastFrameTime;\n    \n    if (deltaTime >= this.actualInterval) {\n      this.lastFrameTime = currentTime;\n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * Get frame timing info\n   */\n  getFrameTiming(): {\n    targetFPS: number;\n    interval: number;\n    isVisible: boolean;\n    shouldThrottle: boolean;\n  } {\n    return {\n      targetFPS: this.targetFPS,\n      interval: this.actualInterval,\n      isVisible: this.isVisible,\n      shouldThrottle: !this.isVisible || this.targetFPS < 30\n    };\n  }\n\n  private setupVisibilityHandling(): void {\n    // Handle page visibility for battery optimization\n    document.addEventListener('visibilitychange', () => {\n      this.isVisible = !document.hidden;\n      \n      // Reduce FPS when not visible\n      if (!this.isVisible) {\n        this.setTargetFPS(10); // Very low FPS when hidden\n      } else {\n        this.setTargetFPS(30); // Normal FPS when visible\n      }\n    });\n    \n    // Handle focus/blur for additional optimization\n    window.addEventListener('focus', () => {\n      this.isVisible = true;\n      this.setTargetFPS(30);\n    });\n    \n    window.addEventListener('blur', () => {\n      this.setTargetFPS(20); // Reduced but not hidden\n    });\n  }\n}\n\n/**\n * Complete Performance Optimization Suite\n */\nexport class ThemePerformanceManager {\n  private lodManager: LODManager;\n  private culler: FrustumCuller;\n  private batchRenderer: BatchRenderer;\n  private memoryOptimizer: MemoryOptimizer;\n  private animationController: AnimationController;\n  \n  constructor(canvasWidth: number, canvasHeight: number) {\n    this.lodManager = new LODManager();\n    this.culler = new FrustumCuller(canvasWidth, canvasHeight);\n    this.batchRenderer = new BatchRenderer();\n    this.memoryOptimizer = new MemoryOptimizer();\n    this.animationController = new AnimationController();\n  }\n\n  /**\n   * Update all performance systems\n   */\n  update(metrics: PerformanceMetrics, canvasWidth?: number, canvasHeight?: number): {\n    lodSettings: LODSettings;\n    shouldRender: boolean;\n    memoryPressure: number;\n    optimizationActive: boolean;\n  } {\n    // Update LOD based on performance\n    const lodSettings = this.lodManager.updateLOD(metrics);\n    \n    // Update culling bounds if canvas size changed\n    if (canvasWidth && canvasHeight) {\n      this.culler.updateBounds(canvasWidth, canvasHeight);\n    }\n    \n    // Check memory pressure\n    const { pressure, shouldCleanup } = this.memoryOptimizer.checkMemoryPressure();\n    \n    // Check if we should render this frame\n    const shouldRender = this.animationController.shouldRenderFrame() && !this.lodManager.shouldSkipFrame();\n    \n    return {\n      lodSettings,\n      shouldRender,\n      memoryPressure: pressure,\n      optimizationActive: lodSettings.level > 0 || pressure > 0.7 || !shouldRender\n    };\n  }\n\n  /**\n   * Get all performance managers for direct access\n   */\n  getManagers() {\n    return {\n      lod: this.lodManager,\n      culler: this.culler,\n      batchRenderer: this.batchRenderer,\n      memory: this.memoryOptimizer,\n      animation: this.animationController\n    };\n  }\n\n  /**\n   * Get comprehensive performance report\n   */\n  getPerformanceReport(): {\n    lod: LODSettings;\n    culling: any;\n    batching: any;\n    memory: { pressure: number; shouldCleanup: boolean };\n    animation: any;\n  } {\n    const { pressure, shouldCleanup } = this.memoryOptimizer.checkMemoryPressure();\n    \n    return {\n      lod: this.lodManager.getCurrentLOD(),\n      culling: {}, // Will be populated when particles are processed\n      batching: this.batchRenderer.getBatchStats(),\n      memory: { pressure, shouldCleanup },\n      animation: this.animationController.getFrameTiming()\n    };\n  }\n}","/**\n * Base Theme Class\n * \n * Provides common functionality and structure for all voice themes.\n * Themes can extend this class to inherit shared behavior.\n */\n\nimport { IVoiceTheme, VoiceState, PerformanceSettings } from './IVoiceTheme';\nimport { PerformanceMonitor, DeviceCapabilityDetector } from '../utils/performance';\nimport { ThemePerformanceManager, LODSettings } from './PerformanceOptimizations';\nimport { lerp, clamp } from '../utils/math';\n\nexport abstract class BaseTheme implements IVoiceTheme {\n  // Abstract properties that must be implemented\n  abstract readonly id: string;\n  abstract readonly name: string;\n  abstract readonly description: string;\n  abstract readonly category: 'particle' | 'geometric' | 'advanced' | 'artistic';\n  abstract readonly performanceProfile: 'light' | 'medium' | 'heavy';\n\n  // Common state management\n  protected currentState: VoiceState = VoiceState.IDLE;\n  protected targetState: VoiceState = VoiceState.IDLE;\n  protected stateTransition = 0;\n  protected stateTransitionSpeed = 0.1;\n\n  // Mouse/touch interaction\n  protected mouseX = 0;\n  protected mouseY = 0;\n  protected normalizedMouseX = 0; // -1 to 1\n  protected normalizedMouseY = 0; // -1 to 1\n  protected mouseInfluence = 0;\n  protected targetMouseInfluence = 0;\n  protected isHovering = false;\n\n  // Canvas context and dimensions\n  protected context: CanvasRenderingContext2D | null = null;\n  protected canvasWidth = 0;\n  protected canvasHeight = 0;\n  protected centerX = 0;\n  protected centerY = 0;\n\n  // Performance monitoring\n  protected performanceMonitor: PerformanceMonitor;\n  protected performanceManager: ThemePerformanceManager | null = null;\n  protected performanceSettings: PerformanceSettings;\n  protected currentLODSettings: LODSettings | null = null;\n  protected lastFrameTime = 0;\n\n  // Animation timing\n  protected animationTime = 0;\n  protected deltaTimeAccumulator = 0;\n\n  constructor() {\n    this.performanceMonitor = new PerformanceMonitor();\n    \n    // Default performance settings (will be overridden by capability detection)\n    this.performanceSettings = {\n      targetFPS: 30,\n      maxParticles: 100,\n      enableEffects: true,\n      enableGlow: false,\n      qualityLevel: 'medium'\n    };\n\n    this.initializePerformanceCallbacks();\n  }\n\n  /**\n   * Initialize the theme with canvas context and dimensions\n   */\n  init(context: CanvasRenderingContext2D, width: number, height: number): void {\n    this.context = context;\n    this.updateDimensions(width, height);\n    this.initializePerformanceManager();\n    this.setupPerformanceSettings();\n    this.onInit();\n  }\n\n  /**\n   * Update canvas dimensions\n   */\n  protected updateDimensions(width: number, height: number): void {\n    this.canvasWidth = width;\n    this.canvasHeight = height;\n    this.centerX = width / 2;\n    this.centerY = height / 2;\n    \n    // Update performance manager with new dimensions\n    if (this.performanceManager) {\n      this.performanceManager.getManagers().culler.updateBounds(width, height);\n    }\n  }\n\n  /**\n   * Main drawing function called every frame\n   */\n  draw(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void {\n    // Update performance monitoring\n    const metrics = this.performanceMonitor.update();\n    \n    // Update performance manager and check if we should render\n    if (this.performanceManager) {\n      const perfUpdate = this.performanceManager.update(metrics, displayWidth, displayHeight);\n      this.currentLODSettings = perfUpdate.lodSettings;\n      \n      // Skip rendering if performance manager suggests it\n      if (!perfUpdate.shouldRender) {\n        return;\n      }\n    }\n    \n    // Update dimensions if changed\n    if (this.canvasWidth !== displayWidth || this.canvasHeight !== displayHeight) {\n      this.updateDimensions(displayWidth, displayHeight);\n    }\n\n    // Update animation timing\n    this.updateTiming(deltaTime);\n\n    // Update state transitions\n    this.updateStateTransition();\n\n    // Update mouse influence\n    this.updateMouseInfluence();\n\n    // Clear canvas with theme-specific background\n    this.clearCanvas(context, displayWidth, displayHeight);\n\n    // Delegate to theme-specific drawing\n    this.onDraw(context, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n\n    // Draw performance overlay if enabled\n    if (this.shouldShowPerformanceOverlay()) {\n      this.drawPerformanceOverlay(context, metrics);\n    }\n  }\n\n  /**\n   * Handle state changes with smooth transitions\n   */\n  onUserSpeaking(): void {\n    this.setTargetState(VoiceState.USER_SPEAKING);\n    this.onStateChange(VoiceState.USER_SPEAKING);\n  }\n\n  onProcessing(): void {\n    this.setTargetState(VoiceState.PROCESSING);\n    this.onStateChange(VoiceState.PROCESSING);\n  }\n\n  onAiSpeaking(): void {\n    this.setTargetState(VoiceState.AI_SPEAKING);\n    this.onStateChange(VoiceState.AI_SPEAKING);\n  }\n\n  reset(): void {\n    this.setTargetState(VoiceState.IDLE);\n    this.onStateChange(VoiceState.IDLE);\n    this.onReset();\n  }\n\n  /**\n   * Handle mouse/touch position updates\n   */\n  setMousePosition(x: number, y: number, canvasWidth: number, canvasHeight: number): void {\n    this.mouseX = x;\n    this.mouseY = y;\n    this.normalizedMouseX = (x / canvasWidth) * 2 - 1; // -1 to 1\n    this.normalizedMouseY = (y / canvasHeight) * 2 - 1; // -1 to 1\n    this.targetMouseInfluence = this.isHovering ? 1 : 0.3;\n    this.onMouseMove(x, y, this.normalizedMouseX, this.normalizedMouseY);\n  }\n\n  /**\n   * Handle hover state changes\n   */\n  setHovering(hovering: boolean): void {\n    this.isHovering = hovering;\n    this.targetMouseInfluence = hovering ? 1 : 0;\n    this.onHoverChange(hovering);\n  }\n\n  /**\n   * Cleanup resources\n   */\n  dispose(): void {\n    this.onDispose();\n  }\n\n  /**\n   * Get performance metrics\n   */\n  getPerformanceMetrics() {\n    const baseMetrics = this.performanceMonitor.getCurrentMetrics();\n    const themeMetrics = this.getThemeSpecificMetrics();\n    return { ...baseMetrics, ...themeMetrics };\n  }\n\n  // Protected methods for subclasses to override\n\n  /**\n   * Theme-specific initialization\n   */\n  protected onInit(): void {}\n\n  /**\n   * Theme-specific drawing logic\n   */\n  protected abstract onDraw(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number,\n    deltaTime: number\n  ): void;\n\n  /**\n   * Called when state changes\n   */\n  protected onStateChange(newState: VoiceState): void {}\n\n  /**\n   * Called when reset\n   */\n  protected onReset(): void {}\n\n  /**\n   * Called when mouse moves\n   */\n  protected onMouseMove(x: number, y: number, normalizedX: number, normalizedY: number): void {}\n\n  /**\n   * Called when hover state changes\n   */\n  protected onHoverChange(hovering: boolean): void {}\n\n  /**\n   * Called when disposing\n   */\n  protected onDispose(): void {}\n\n  /**\n   * Get theme-specific performance metrics\n   */\n  protected getThemeSpecificMetrics(): Record<string, any> {\n    return {};\n  }\n\n  /**\n   * Clear canvas with theme-specific background\n   */\n  protected clearCanvas(context: CanvasRenderingContext2D, width: number, height: number): void {\n    context.clearRect(0, 0, width, height);\n  }\n\n  // Private helper methods\n\n  private async setupPerformanceSettings(): Promise<void> {\n    try {\n      const detector = DeviceCapabilityDetector.getInstance();\n      const capabilities = await detector.detectCapabilities();\n      \n      // Adjust performance settings based on device capabilities\n      if (capabilities.performanceLevel === 'low' || capabilities.isLowPowerDevice) {\n        this.performanceSettings = {\n          targetFPS: 24,\n          maxParticles: this.getOptimalParticleCount('low'),\n          enableEffects: false,\n          enableGlow: false,\n          qualityLevel: 'low'\n        };\n      } else if (capabilities.performanceLevel === 'medium') {\n        this.performanceSettings = {\n          targetFPS: 30,\n          maxParticles: this.getOptimalParticleCount('medium'),\n          enableEffects: true,\n          enableGlow: false,\n          qualityLevel: 'medium'\n        };\n      } else {\n        this.performanceSettings = {\n          targetFPS: 60,\n          maxParticles: this.getOptimalParticleCount('high'),\n          enableEffects: true,\n          enableGlow: true,\n          qualityLevel: 'high'\n        };\n      }\n    } catch (error) {\n      console.warn('Failed to detect device capabilities, using default settings:', error);\n    }\n  }\n\n  private initializePerformanceManager(): void {\n    this.performanceManager = new ThemePerformanceManager(this.canvasWidth, this.canvasHeight);\n  }\n\n  private getOptimalParticleCount(quality: 'low' | 'medium' | 'high'): number {\n    const baseCount = {\n      light: { low: 30, medium: 80, high: 150 },\n      medium: { low: 50, medium: 120, high: 250 },\n      heavy: { low: 20, medium: 60, high: 120 }\n    };\n\n    return baseCount[this.performanceProfile][quality];\n  }\n\n  private initializePerformanceCallbacks(): void {\n    this.performanceMonitor.setCallbacks({\n      onPerformanceWarning: (metrics) => {\n        console.warn(`[${this.id}] Performance warning:`, metrics);\n        this.adjustPerformanceSettings(0.8);\n      },\n      onPerformanceCritical: (metrics) => {\n        console.error(`[${this.id}] Critical performance:`, metrics);\n        this.adjustPerformanceSettings(0.6);\n      }\n    });\n  }\n\n  private adjustPerformanceSettings(factor: number): void {\n    this.performanceSettings.maxParticles = Math.floor(this.performanceSettings.maxParticles * factor);\n    this.performanceSettings.enableEffects = false;\n    this.performanceSettings.enableGlow = false;\n  }\n\n  private setTargetState(state: VoiceState): void {\n    if (this.targetState !== state) {\n      this.targetState = state;\n      this.stateTransition = 0;\n    }\n  }\n\n  private updateStateTransition(): void {\n    if (this.currentState !== this.targetState) {\n      this.stateTransition += this.stateTransitionSpeed;\n      if (this.stateTransition >= 1) {\n        this.currentState = this.targetState;\n        this.stateTransition = 1;\n      }\n    }\n  }\n\n  private updateMouseInfluence(): void {\n    this.mouseInfluence = lerp(this.mouseInfluence, this.targetMouseInfluence, 0.1);\n  }\n\n  private updateTiming(deltaTime: number): void {\n    this.deltaTimeAccumulator += deltaTime;\n    this.animationTime += deltaTime;\n  }\n\n  private shouldShowPerformanceOverlay(): boolean {\n    // Only show in development or when explicitly enabled\n    return process.env.NODE_ENV === 'development' && \n           localStorage.getItem('voice-performance-overlay') === 'true';\n  }\n\n  private drawPerformanceOverlay(context: CanvasRenderingContext2D, metrics: any): void {\n    context.save();\n    context.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    context.fillRect(10, 10, 200, 80);\n    context.fillStyle = 'white';\n    context.font = '12px monospace';\n    context.fillText(`Theme: ${this.name}`, 15, 25);\n    context.fillText(`FPS: ${Math.round(metrics.fps)}`, 15, 40);\n    context.fillText(`Frame: ${Math.round(metrics.frameTime)}ms`, 15, 55);\n    context.fillText(`State: ${this.currentState}`, 15, 70);\n    context.fillText(`Mouse: ${Math.round(this.mouseInfluence * 100)}%`, 15, 85);\n    context.restore();\n  }\n\n  // Protected utility methods for subclasses\n\n  /**\n   * Get color interpolated between states\n   */\n  protected getStateColor(idleColor: string, activeColor: string): string {\n    if (this.stateTransition === 0) return idleColor;\n    if (this.stateTransition === 1) return activeColor;\n    \n    // Simple color interpolation (for more complex colors, use Color class)\n    return activeColor; // Simplified for now\n  }\n\n  /**\n   * Get value interpolated by mouse influence\n   */\n  protected getMouseInfluencedValue(baseValue: number, influencedValue: number): number {\n    return lerp(baseValue, influencedValue, this.mouseInfluence);\n  }\n\n  /**\n   * Check if effects should be enabled based on performance settings\n   */\n  protected shouldEnableEffects(): boolean {\n    if (this.currentLODSettings) {\n      return !this.currentLODSettings.effectsDisabled;\n    }\n    return this.performanceSettings.enableEffects;\n  }\n\n  /**\n   * Check if glow effects should be enabled\n   */\n  protected shouldEnableGlow(): boolean {\n    if (this.currentLODSettings) {\n      return !this.currentLODSettings.glowDisabled;\n    }\n    return this.performanceSettings.enableGlow;\n  }\n\n  /**\n   * Get maximum particle count for performance\n   */\n  protected getMaxParticles(): number {\n    const baseMax = this.performanceSettings.maxParticles;\n    if (this.currentLODSettings) {\n      return Math.floor(baseMax * (1 - this.currentLODSettings.particleReduction));\n    }\n    return baseMax;\n  }\n\n  /**\n   * Get current LOD level for theme-specific optimizations\n   */\n  protected getCurrentLODLevel(): number {\n    return this.currentLODSettings?.level || 1;\n  }\n\n  /**\n   * Check if simplified rendering should be used\n   */\n  protected shouldUseSimplifiedRendering(): boolean {\n    return this.currentLODSettings?.simplifiedRendering || false;\n  }\n\n  /**\n   * Get performance managers for advanced optimizations\n   */\n  protected getPerformanceManagers() {\n    return this.performanceManager?.getManagers() || null;\n  }\n\n  /**\n   * Check if a particle is visible (for culling)\n   */\n  protected isParticleVisible(x: number, y: number, z = 0, size = 0): boolean {\n    const managers = this.getPerformanceManagers();\n    if (managers?.culler) {\n      return managers.culler.isVisible(x, y, z, size);\n    }\n    return true; // No culling available, assume visible\n  }\n\n  /**\n   * Filter particles to only visible ones\n   */\n  protected cullParticles<T extends { x: number; y: number; z?: number; size?: number }>(particles: T[]): T[] {\n    const managers = this.getPerformanceManagers();\n    if (managers?.culler) {\n      return managers.culler.cullParticles(particles);\n    }\n    return particles; // No culling available, return all\n  }\n\n  /**\n   * Add particle to batch renderer for optimized drawing\n   */\n  protected addToBatch(\n    color: string,\n    x: number,\n    y: number, \n    size: number,\n    alpha: number,\n    glowEnabled = false,\n    effectsEnabled = false\n  ): void {\n    const managers = this.getPerformanceManagers();\n    if (managers?.batchRenderer) {\n      managers.batchRenderer.addToBatch(color, x, y, size, alpha, glowEnabled, effectsEnabled);\n    }\n  }\n\n  /**\n   * Render all batches (call at end of draw)\n   */\n  protected renderBatches(context: CanvasRenderingContext2D): void {\n    const managers = this.getPerformanceManagers();\n    if (managers?.batchRenderer && this.currentLODSettings) {\n      managers.batchRenderer.renderBatches(context, this.currentLODSettings);\n      managers.batchRenderer.clearBatches();\n    }\n  }\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 70396;\nmodule.exports = webpackEmptyContext;","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { AgentSettings } from '@/types';\n\ninterface ChatSettingsState {\n  // Current chat settings per agent\n  settings: Record<number, Partial<AgentSettings>>;\n  \n  // Get settings for a specific agent\n  getSettings: (agentId: number) => Partial<AgentSettings>;\n  \n  // Update settings for a specific agent\n  updateSettings: (agentId: number, updates: Partial<AgentSettings>) => void;\n  \n  // Clear settings for an agent\n  clearSettings: (agentId: number) => void;\n}\n\nexport const useChatSettingsStore = create<ChatSettingsState>()(\n  persist(\n    (set, get) => ({\n      settings: {},\n\n      getSettings: (agentId: number) => {\n        const settings = get().settings[agentId] || {};\n        return {\n          response_source: settings.response_source || 'own_content',\n          chatbot_model: settings.chatbot_model || 'gpt-4-o',\n          custom_persona: settings.custom_persona || 'professional',\n          agent_capability: settings.agent_capability || 'optimal-choice',\n          ...settings,\n        };\n      },\n\n      updateSettings: (agentId: number, updates: Partial<AgentSettings>) => {\n        set((state) => ({\n          settings: {\n            ...state.settings,\n            [agentId]: {\n              ...state.settings[agentId],\n              ...updates,\n            },\n          },\n        }));\n      },\n\n      clearSettings: (agentId: number) => {\n        set((state) => {\n          const newSettings = { ...state.settings };\n          delete newSettings[agentId];\n          return { settings: newSettings };\n        });\n      },\n    }),\n    {\n      name: 'customgpt-chat-settings',\n    }\n  )\n);","/**\n * Demo Mode Usage Limits Constants\n * \n * Central configuration for all demo mode restrictions and limits.\n * Modify these values to adjust demo mode behavior.\n */\n\n// Free Trial Mode Limits (No API Key)\nexport const FREE_TRIAL_LIMITS = {\n  // Resource Limits\n  MAX_PROJECTS: 1,\n  MAX_CONVERSATIONS: 2,\n  MAX_MESSAGES_PER_CONVERSATION: 2,\n  \n  // Time Limits (in milliseconds)\n  SESSION_DURATION: 10 * 60 * 1000, // 10 minutes\n  SESSION_WARNING_TIME: 5 * 60 * 1000, // Show warning 5 minutes before expiry\n  \n  // Rate Limits\n  MAX_REQUESTS_PER_MINUTE: 10,\n  COOLDOWN_BETWEEN_MESSAGES: 2000, // 2 seconds between messages\n  \n  // Feature Restrictions\n  ALLOW_FILE_UPLOAD: false,\n  ALLOW_SITEMAP_UPLOAD: false,\n  ALLOW_DELETE_OPERATIONS: false,\n  ALLOW_PROJECT_SETTINGS: false,\n  ALLOW_VOICE_MODE: false,\n  \n  // UI Messages\n  SESSION_EXPIRY_WARNING: \"Your free trial session will expire in 5 minutes\",\n  SESSION_EXPIRED_MESSAGE: \"Your free trial session has expired. Please refresh to start a new session.\",\n  LIMIT_REACHED_MESSAGE: {\n    projects: \"Free trial limit reached: Maximum 1 project allowed\",\n    conversations: \"Free trial limit reached: Maximum 2 conversations allowed\",\n    messages: \"Free trial limit reached: Maximum 2 messages per conversation\"\n  }\n} as const;\n\n// User API Key Demo Mode Limits\nexport const USER_DEMO_LIMITS = {\n  // Time Limits (in milliseconds)\n  SESSION_DURATION: 120 * 60 * 1000, // 120 minutes (2 hours)\n  SESSION_WARNING_TIME: 10 * 60 * 1000, // Show warning 10 minutes before expiry\n  \n  // No resource limits for user API key mode\n  MAX_PROJECTS: Infinity,\n  MAX_CONVERSATIONS: Infinity,\n  MAX_MESSAGES_PER_CONVERSATION: Infinity,\n  \n  // Features all enabled\n  ALLOW_FILE_UPLOAD: true,\n  ALLOW_SITEMAP_UPLOAD: true,\n  ALLOW_DELETE_OPERATIONS: true,\n  ALLOW_PROJECT_SETTINGS: true,\n  ALLOW_VOICE_MODE: true,\n  \n  // UI Messages\n  SESSION_EXPIRY_WARNING: \"Your demo session will expire in 10 minutes\",\n  SESSION_EXPIRED_MESSAGE: \"Your demo session has expired. Please refresh to start a new session.\"\n} as const;\n\n// Session Storage Keys\nexport const DEMO_STORAGE_KEYS = {\n  DEPLOYMENT_MODE: 'customgpt.deploymentMode',\n  FREE_TRIAL_MODE: 'customgpt.freeTrialMode',\n  FREE_TRIAL_SESSION: 'customgpt.freeTrialSession',\n  DEMO_SESSION: 'customgpt.demoSession',\n  API_KEY: 'customgpt.apiKey',\n  OPENAI_KEY: 'customgpt.openAIApiKey',\n  SESSION_START: 'customgpt.sessionStart',\n  AUTO_DETECTED: 'customgpt.autoDetected'\n} as const;\n\n// API Headers\nexport const DEMO_API_HEADERS = {\n  DEPLOYMENT_MODE: 'X-Deployment-Mode',\n  API_KEY: 'X-CustomGPT-API-Key',\n  SESSION_ID: 'X-Demo-Session-ID',\n  FREE_TRIAL: 'X-Free-Trial-Mode'\n} as const;\n\n// Type definitions for session data\nexport interface FreeTrialSession {\n  sessionId: string;\n  startTime: number;\n  projectCount: number;\n  conversationCount: number;\n  messageCount: number;\n  lastActivity: number;\n}\n\nexport interface DemoSession {\n  sessionId: string;\n  startTime: number;\n  lastActivity: number;\n}\n\n// Helper functions\nexport function isSessionExpired(startTime: number, duration: number): boolean {\n  return Date.now() - startTime > duration;\n}\n\nexport function getTimeRemaining(startTime: number, duration: number): number {\n  const elapsed = Date.now() - startTime;\n  const remaining = duration - elapsed;\n  return Math.max(0, remaining);\n}\n\nexport function shouldShowWarning(startTime: number, duration: number, warningTime: number): boolean {\n  const remaining = getTimeRemaining(startTime, duration);\n  return remaining > 0 && remaining <= warningTime;\n}","/**\n * Usage Analytics Tracker\n * \n * Tracks usage across different deployment modes and sends analytics\n * to your backend for monitoring and analysis.\n */\n\nimport { DEMO_STORAGE_KEYS } from '@/lib/constants/demo-limits';\n\nexport interface UsageEvent {\n  // Event identification\n  eventType: 'api_call' | 'session_start' | 'session_end' | 'limit_reached' | 'error';\n  eventName: string;\n  timestamp: number;\n  \n  // Deployment information\n  deploymentMode: 'production' | 'demo';\n  demoType?: 'free-trial' | 'user-api-key' | 'none';\n  \n  // Session information\n  sessionId?: string;\n  userId?: string; // If available from your auth system\n  \n  // Request details\n  endpoint?: string;\n  method?: string;\n  statusCode?: number;\n  \n  // Usage metrics\n  projectCount?: number;\n  conversationCount?: number;\n  messageCount?: number;\n  \n  // Client information\n  clientVersion?: string;\n  userAgent?: string;\n  referrer?: string;\n  \n  // Additional metadata\n  metadata?: Record<string, any>;\n}\n\nclass UsageTracker {\n  private static instance: UsageTracker;\n  private analyticsEndpoint: string = process.env.NEXT_PUBLIC_ANALYTICS_ENDPOINT || '/api/analytics';\n  private batchSize: number = 10;\n  private flushInterval: number = 30000; // 30 seconds\n  private eventQueue: UsageEvent[] = [];\n  private flushTimer: NodeJS.Timeout | null = null;\n\n  private constructor() {\n    // Start flush timer\n    this.startFlushTimer();\n  }\n\n  static getInstance(): UsageTracker {\n    if (!UsageTracker.instance) {\n      UsageTracker.instance = new UsageTracker();\n    }\n    return UsageTracker.instance;\n  }\n\n  /**\n   * Track a usage event\n   */\n  track(event: Partial<UsageEvent>): void {\n    const fullEvent: UsageEvent = {\n      eventType: event.eventType || 'api_call',\n      eventName: event.eventName || 'unknown',\n      timestamp: Date.now(),\n      deploymentMode: this.getDeploymentMode(),\n      demoType: this.getDemoType(),\n      sessionId: this.getSessionId(),\n      clientVersion: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',\n      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined,\n      referrer: typeof window !== 'undefined' ? document.referrer : undefined,\n      ...event\n    };\n\n    this.eventQueue.push(fullEvent);\n\n    // Flush if batch size reached\n    if (this.eventQueue.length >= this.batchSize) {\n      this.flush();\n    }\n  }\n\n  /**\n   * Track API call\n   */\n  trackApiCall(endpoint: string, method: string, statusCode?: number): void {\n    this.track({\n      eventType: 'api_call',\n      eventName: `${method} ${endpoint}`,\n      endpoint,\n      method,\n      statusCode\n    });\n  }\n\n  /**\n   * Track session start\n   */\n  trackSessionStart(): void {\n    this.track({\n      eventType: 'session_start',\n      eventName: 'session_started',\n      metadata: {\n        mode: this.getDemoType() || 'production'\n      }\n    });\n  }\n\n  /**\n   * Track session end\n   */\n  trackSessionEnd(reason?: string): void {\n    this.track({\n      eventType: 'session_end',\n      eventName: 'session_ended',\n      metadata: {\n        reason,\n        mode: this.getDemoType() || 'production'\n      }\n    });\n  }\n\n  /**\n   * Track limit reached\n   */\n  trackLimitReached(limitType: 'projects' | 'conversations' | 'messages'): void {\n    this.track({\n      eventType: 'limit_reached',\n      eventName: `${limitType}_limit_reached`,\n      metadata: {\n        limitType\n      }\n    });\n  }\n\n  /**\n   * Track error\n   */\n  trackError(error: string, context?: any): void {\n    this.track({\n      eventType: 'error',\n      eventName: 'error_occurred',\n      metadata: {\n        error,\n        context\n      }\n    });\n  }\n\n  /**\n   * Get deployment mode\n   */\n  private getDeploymentMode(): 'production' | 'demo' {\n    if (typeof window === 'undefined') return 'production';\n    \n    const mode = localStorage.getItem(DEMO_STORAGE_KEYS.DEPLOYMENT_MODE);\n    return mode === 'demo' ? 'demo' : 'production';\n  }\n\n  /**\n   * Get demo type\n   */\n  private getDemoType(): 'free-trial' | 'user-api-key' | 'none' {\n    if (typeof window === 'undefined') return 'none';\n    \n    const deploymentMode = localStorage.getItem(DEMO_STORAGE_KEYS.DEPLOYMENT_MODE);\n    if (deploymentMode !== 'demo') return 'none';\n    \n    const isFreeTrialMode = localStorage.getItem(DEMO_STORAGE_KEYS.FREE_TRIAL_MODE) === 'true';\n    return isFreeTrialMode ? 'free-trial' : 'user-api-key';\n  }\n\n  /**\n   * Get session ID\n   */\n  private getSessionId(): string | undefined {\n    if (typeof window === 'undefined') return undefined;\n    \n    // Try to get from session storage (for free trial)\n    const sessionData = sessionStorage.getItem(DEMO_STORAGE_KEYS.FREE_TRIAL_SESSION);\n    if (sessionData) {\n      try {\n        const session = JSON.parse(sessionData);\n        return session.sessionId;\n      } catch (e) {\n        // Ignore parse errors\n      }\n    }\n    \n    // Try to get from regular demo session\n    const demoSession = sessionStorage.getItem(DEMO_STORAGE_KEYS.DEMO_SESSION);\n    if (demoSession) {\n      try {\n        const session = JSON.parse(demoSession);\n        return session.sessionId;\n      } catch (e) {\n        // Ignore parse errors\n      }\n    }\n    \n    return undefined;\n  }\n\n  /**\n   * Start flush timer\n   */\n  private startFlushTimer(): void {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n    }\n    \n    this.flushTimer = setInterval(() => {\n      if (this.eventQueue.length > 0) {\n        this.flush();\n      }\n    }, this.flushInterval);\n  }\n\n  /**\n   * Flush events to backend\n   */\n  private async flush(): Promise<void> {\n    if (this.eventQueue.length === 0) return;\n    \n    const events = [...this.eventQueue];\n    this.eventQueue = [];\n    \n    try {\n      // If you have a custom analytics endpoint, send the data there\n      if (process.env.NEXT_PUBLIC_ANALYTICS_ENDPOINT) {\n        await fetch(this.analyticsEndpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ events }),\n        });\n      } else {\n        // Otherwise, just log to console for now\n        console.log('[UsageTracker] Analytics events:', events);\n      }\n    } catch (error) {\n      console.error('[UsageTracker] Failed to send analytics:', error);\n      // Re-queue events on failure\n      this.eventQueue.unshift(...events);\n    }\n  }\n\n  /**\n   * Force flush all pending events\n   */\n  async forceFlush(): Promise<void> {\n    await this.flush();\n  }\n}\n\n// Export singleton instance\nexport const usageTracker = UsageTracker.getInstance();\n\n// Add event listeners for automatic tracking\nif (typeof window !== 'undefined') {\n  // Track page visibility changes\n  document.addEventListener('visibilitychange', () => {\n    if (document.hidden) {\n      usageTracker.forceFlush();\n    }\n  });\n  \n  // Track before unload\n  window.addEventListener('beforeunload', () => {\n    usageTracker.forceFlush();\n  });\n}","/**\n * Error Messages for Demo Mode\n */\n\nexport const DEMO_ERROR_MESSAGES = {\n  RATE_LIMIT: {\n    title: 'Rate Limit Reached',\n    message: 'The free trial is experiencing high demand. Please wait a moment and try again.',\n    retryAfter: 60, // seconds\n  },\n  SESSION_EXPIRED: {\n    title: 'Session Expired',\n    message: 'Your free trial session has expired. Please refresh the page to start a new session.',\n  },\n  LIMIT_REACHED: {\n    title: 'Limit Reached',\n    message: 'You have reached the maximum allowed for this free trial session.',\n  },\n  API_ERROR: {\n    title: 'Service Error',\n    message: 'Unable to process your request. Please try again later.',\n  },\n};\n\nexport function getErrorMessage(status: number, isFreeTrialMode: boolean): { title: string; message: string } {\n  if (status === 429 && isFreeTrialMode) {\n    return DEMO_ERROR_MESSAGES.RATE_LIMIT;\n  }\n  \n  if (status === 403 && isFreeTrialMode) {\n    return DEMO_ERROR_MESSAGES.LIMIT_REACHED;\n  }\n  \n  if (status >= 500) {\n    return DEMO_ERROR_MESSAGES.API_ERROR;\n  }\n  \n  return {\n    title: 'Error',\n    message: 'An unexpected error occurred. Please try again.',\n  };\n}","/**\n * Proxy API Client\n * \n * This client communicates with our Next.js API routes which proxy\n * requests to CustomGPT. The API key is stored securely on the server.\n */\n\nimport type {\n  Agent,\n  AgentStats,\n  AgentSettings,\n  Conversation,\n  ChatMessage,\n  Citation,\n  APIResponse,\n  AgentsResponse,\n  ConversationsResponse,\n  MessagesResponse,\n  MessageResponse,\n  CitationResponse,\n  StreamChunk,\n  LimitsResponse,\n  UserProfile,\n  CustomerIntelligenceResponse,\n} from '@/types';\nimport type { APIMessageResponse } from '@/types/message.types';\nimport type { \n  PagesListResponse, \n  DeletePageResponse, \n  ReindexPageResponse, \n  PagesQueryParams,\n  PageMetadata,\n  PageMetadataResponse\n} from '@/types/pages.types';\nimport type { \n  TrafficReportResponse, \n  QueriesReportResponse, \n  ConversationsReportResponse, \n  AnalysisReportResponse,\n  AnalysisInterval\n} from '@/types/reports.types';\nimport type { \n  SourcesListResponse, \n  SourceResponse, \n  DeleteSourceResponse,\n  UpdateSourceSettingsRequest,\n  CreateSitemapSourceRequest\n} from '@/types/sources.types';\nimport { parseStreamChunk, retryWithBackoff } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\nimport { usageTracker } from '@/lib/analytics/usage-tracker';\nimport { getErrorMessage } from '@/lib/constants/error-messages';\n\ninterface UserProfileResponse {\n  status: 'success' | 'error';\n  data: UserProfile;\n}\n\n/**\n * ProxyCustomGPTClient\n * \n * Client that communicates with our server-side proxy endpoints.\n * No API key is needed client-side as it's stored on the server.\n */\nexport class ProxyCustomGPTClient {\n  private baseURL: string = '/api/proxy';\n  private timeout: number = 30000;\n  private abortControllers: Map<string, AbortController> = new Map();\n  private isDemoMode: boolean = false;\n  private demoApiKey: string | null = null;\n\n  constructor() {\n    // Demo mode is determined at runtime from localStorage\n    if (typeof window !== 'undefined') {\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode');\n      this.isDemoMode = deploymentMode === 'demo';\n      \n      // Check if there's a global API URL configuration for widgets\n      const globalApiUrl = (window as any).__customgpt_api_url;\n      if (globalApiUrl) {\n        this.baseURL = `${globalApiUrl}/api/proxy`;\n      }\n    }\n    \n    logger.info('PROXY_CLIENT', 'Proxy API Client initialized', {\n      baseURL: this.baseURL,\n      timeout: this.timeout,\n      isDemoMode: this.isDemoMode,\n    });\n  }\n  \n  /**\n   * Set the base API URL (for widget usage)\n   */\n  public setApiUrl(apiUrl: string) {\n    this.baseURL = `${apiUrl}/api/proxy`;\n    logger.info('PROXY_CLIENT', 'API URL updated', { baseURL: this.baseURL });\n  }\n  \n  /**\n   * Set demo mode API key\n   */\n  public setDemoApiKey(apiKey: string | null) {\n    this.demoApiKey = apiKey;\n  }\n\n  /**\n   * Make a request to the proxy API\n   */\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    const requestId = `${options.method || 'GET'}-${endpoint}-${Date.now()}`;\n    \n    logger.apiRequest(endpoint, options.method || 'GET', options.body);\n\n    try {\n      const controller = new AbortController();\n      this.abortControllers.set(requestId, controller);\n\n      const timeoutId = setTimeout(() => {\n        controller.abort();\n      }, this.timeout);\n\n      // Don't set Content-Type for FormData - let browser set it with boundary\n      const isFormData = options.body instanceof FormData;\n      const baseHeaders: Record<string, string> = {\n        ...(options.headers as Record<string, string> || {})\n      };\n      \n      // Add deployment mode header\n      const deploymentMode = typeof window !== 'undefined' \n        ? localStorage.getItem('customgpt.deploymentMode') || 'production'\n        : 'production';\n      baseHeaders['X-Deployment-Mode'] = deploymentMode;\n      \n      // Check if free trial mode\n      const isFreeTrialMode = typeof window !== 'undefined' \n        ? localStorage.getItem('customgpt.freeTrialMode') === 'true'\n        : false;\n      \n      if (isFreeTrialMode) {\n        baseHeaders['X-Free-Trial-Mode'] = 'true';\n        \n        // Add session ID from session storage\n        const sessionData = sessionStorage.getItem('customgpt.freeTrialSession');\n        if (sessionData) {\n          try {\n            const session = JSON.parse(sessionData);\n            if (session.sessionId) {\n              baseHeaders['X-Demo-Session-ID'] = session.sessionId;\n            }\n          } catch (e) {\n            console.error('[ProxyClient] Failed to parse session data:', e);\n          }\n        }\n        \n        console.log('[ProxyClient] Free trial mode - using server-side demo key');\n      } else if (deploymentMode === 'demo' && this.demoApiKey) {\n        // Add demo mode API key if available\n        baseHeaders['X-CustomGPT-API-Key'] = this.demoApiKey;\n        console.log('[ProxyClient] Added demo API key to request headers');\n      } else if (deploymentMode === 'demo' && !this.demoApiKey) {\n        console.warn('[ProxyClient] Demo mode but no API key available for request');\n      }\n      \n      const headers: HeadersInit = isFormData \n        ? baseHeaders\n        : { \n            'Content-Type': 'application/json',\n            ...baseHeaders\n          };\n      \n      const response = await fetch(url, {\n        ...options,\n        headers,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n      this.abortControllers.delete(requestId);\n\n      // Check if response has content before trying to parse JSON\n      let responseData;\n      const contentLength = response.headers.get('content-length');\n      const contentType = response.headers.get('content-type');\n      \n      if (contentLength === '0' || (!contentType?.includes('application/json') && response.status === 200)) {\n        // Empty response or non-JSON success response\n        responseData = { status: 'success', data: { updated: true } };\n      } else {\n        try {\n          const text = await response.text();\n          if (text.trim() === '') {\n            // Empty response body\n            responseData = { status: 'success', data: { updated: true } };\n          } else {\n            responseData = JSON.parse(text);\n          }\n        } catch (jsonError) {\n          // Failed to parse JSON, but response was successful\n          if (response.ok) {\n            responseData = { status: 'success', data: { updated: true } };\n          } else {\n            throw new Error(`Failed to parse response: ${jsonError}`);\n          }\n        }\n      }\n\n      // Track API call\n      usageTracker.trackApiCall(endpoint, options.method || 'GET', response.status);\n\n      if (!response.ok) {\n        // Track error\n        usageTracker.trackError(`API Error: ${response.status}`, {\n          endpoint,\n          method: options.method || 'GET',\n          error: responseData.error\n        });\n        \n        // Get user-friendly error message for demo mode\n        const isFreeTrialMode = baseHeaders['X-Free-Trial-Mode'] === 'true';\n        const errorInfo = getErrorMessage(response.status, isFreeTrialMode);\n        \n        throw {\n          message: responseData.error || errorInfo.message,\n          status: response.status,\n          data: responseData,\n          title: errorInfo.title,\n          isFreeTrialError: isFreeTrialMode && response.status === 429,\n        };\n      }\n\n      logger.apiResponse(endpoint, response.status, responseData);\n      return responseData;\n    } catch (error: any) {\n      this.abortControllers.delete(requestId);\n      \n      if (error.name === 'AbortError') {\n        logger.apiError(endpoint, { message: 'Request timeout', code: 'TIMEOUT' });\n        throw new Error('Request timeout');\n      }\n\n      logger.apiError(endpoint, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Make a streaming request to the proxy API\n   */\n  private async streamRequest(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ReadableStream<Uint8Array>> {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    logger.apiRequest(endpoint, 'POST-STREAM', options.body);\n\n    // Build headers with demo mode support\n    const baseHeaders: Record<string, string> = {\n      'Content-Type': 'application/json',\n      'Accept': 'text/event-stream',\n      ...(options.headers as Record<string, string> || {})\n    };\n    \n    // Add deployment mode header\n    const deploymentMode = typeof window !== 'undefined' \n      ? localStorage.getItem('customgpt.deploymentMode') || 'production'\n      : 'production';\n    baseHeaders['X-Deployment-Mode'] = deploymentMode;\n    \n    // Check if free trial mode\n    const isFreeTrialMode = typeof window !== 'undefined' \n      ? localStorage.getItem('customgpt.freeTrialMode') === 'true'\n      : false;\n    \n    if (isFreeTrialMode) {\n      baseHeaders['X-Free-Trial-Mode'] = 'true';\n      \n      // Add session ID from session storage\n      const sessionData = sessionStorage.getItem('customgpt.freeTrialSession');\n      if (sessionData) {\n        try {\n          const session = JSON.parse(sessionData);\n          if (session.sessionId) {\n            baseHeaders['X-Demo-Session-ID'] = session.sessionId;\n          }\n        } catch (e) {\n          console.error('[ProxyClient] Failed to parse session data:', e);\n        }\n      }\n      \n      console.log('[ProxyClient] Free trial mode - using server-side demo key for streaming');\n    } else if (deploymentMode === 'demo' && this.demoApiKey) {\n      // Add demo mode API key if available\n      baseHeaders['X-CustomGPT-API-Key'] = this.demoApiKey;\n      console.log('[ProxyClient] Added demo API key to streaming request headers');\n    } else if (deploymentMode === 'demo' && !this.demoApiKey) {\n      console.warn('[ProxyClient] Demo mode but no API key available for streaming request');\n    }\n\n    const response = await fetch(url, {\n      ...options,\n      headers: baseHeaders,\n    });\n\n    if (!response.ok) {\n      let errorMessage = `Stream request failed: ${response.status}`;\n      try {\n        const errorText = await response.text();\n        const errorData = JSON.parse(errorText);\n        errorMessage = errorData.error || errorData.message || errorMessage;\n      } catch {\n        // If not JSON, use the status message\n      }\n      logger.apiError(endpoint, { message: errorMessage, status: response.status });\n      throw new Error(errorMessage);\n    }\n\n    logger.apiResponse(endpoint, response.status, 'Stream started');\n\n    return response.body!;\n  }\n\n  /**\n   * Cancel a specific request\n   */\n  cancelRequest(endpoint: string, method: string = 'GET'): void {\n    const controllers = Array.from(this.abortControllers.entries());\n    controllers.forEach(([key, controller]) => {\n      if (key.includes(`${method}-${endpoint}`)) {\n        controller.abort();\n        this.abortControllers.delete(key);\n      }\n    });\n  }\n\n  /**\n   * Cancel all pending requests\n   */\n  cancelAllRequests(): void {\n    this.abortControllers.forEach(controller => controller.abort());\n    this.abortControllers.clear();\n  }\n\n  // Agent Management\n  async getAgents(params?: {\n    page?: number;\n    per_page?: number;\n  }): Promise<AgentsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async createAgent(data: {\n    project_name: string;\n    sitemap_path?: string;\n    file_upload?: boolean;\n    webpage_url?: string;\n  }): Promise<APIResponse<Agent>> {\n    return this.request('/projects', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}`);\n  }\n\n  async updateAgent(id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }): Promise<APIResponse<Agent>> {\n    console.log('[ProxyClient] updateAgent called with:', { id, data });\n    \n    // Use FormData for multipart/form-data as specified in OpenAPI\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]) => {\n      if (value !== undefined) {\n        formData.append(key, String(value));\n        console.log('[ProxyClient] FormData append:', key, value);\n      }\n    });\n\n    const response = await this.request<APIResponse<Agent>>(`/projects/${id}`, {\n      method: 'POST', // Changed from PUT to POST as per OpenAPI spec\n      body: formData,\n    });\n    \n    console.log('[ProxyClient] updateAgent response:', response);\n    return response;\n  }\n\n  async deleteAgent(id: number): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async replicateAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}/replicate`, {\n      method: 'POST',\n    });\n  }\n\n  async getAgentStats(id: number): Promise<APIResponse<AgentStats>> {\n    return this.request(`/projects/${id}/stats`);\n  }\n\n  async getAgentSettings(id: number): Promise<APIResponse<AgentSettings>> {\n    return this.request(`/projects/${id}/settings`);\n  }\n\n  async updateAgentSettings(id: number, settings: Partial<AgentSettings> | FormData): Promise<APIResponse<AgentSettings>> {\n    const isFormData = settings instanceof FormData;\n    return this.request(`/projects/${id}/settings`, {\n      method: 'POST',\n      body: isFormData ? settings : JSON.stringify(settings),\n      headers: isFormData ? {} : { 'Content-Type': 'application/json' },\n    });\n  }\n\n  // Plugin Management\n  async getProjectPlugins(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request(`/projects/${projectId}/plugins`);\n  }\n\n  async updateProjectPlugin(\n    projectId: number,\n    pluginId: string,\n    data: { enabled: boolean }\n  ): Promise<APIResponse<{ updated: boolean }>> {\n    return this.request(`/projects/${projectId}/plugins/${pluginId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  // Conversation Management\n  async getConversations(projectId: number, params?: {\n    page?: number;\n    per_page?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: string;\n    userFilter?: 'all' | 'me' | string;\n  }): Promise<ConversationsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.orderBy) queryParams.append('orderBy', params.orderBy);\n    if (params?.userFilter) queryParams.append('userFilter', params.userFilter);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async createConversation(projectId: number, data?: { name?: string }): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations`, {\n      method: 'POST',\n      body: JSON.stringify(data || {}),\n    });\n  }\n\n  async updateConversation(\n    projectId: number,\n    sessionId: string,\n    data: { name?: string }\n  ): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteConversation(projectId: number, sessionId: string): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Message Management\n  async getMessages(\n    projectId: number,\n    sessionId: string,\n    params?: {\n      page?: number;\n      per_page?: number;\n    }\n  ): Promise<MessagesResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async sendMessage(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      stream?: boolean;\n      source_ids?: string[];\n      response_source?: string;\n      chatbot_model?: string;\n      custom_persona?: string;\n      agent_capability?: string;\n    }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n\n  async sendMessageStream(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      source_ids?: string[];\n      response_source?: string;\n      chatbot_model?: string;\n      custom_persona?: string;\n      agent_capability?: string;\n    },\n    onChunk: (chunk: StreamChunk) => void,\n    onError?: (error: Error) => void,\n    onComplete?: () => void\n  ): Promise<void> {\n    try {\n      // Try the standard messages endpoint with stream=true parameter\n      const stream = await this.streamRequest(\n        `/projects/${projectId}/conversations/${sessionId}/messages`,\n        {\n          method: 'POST',\n          body: JSON.stringify({ ...data, stream: true }),\n        }\n      );\n\n      const reader = stream.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          onComplete?.();\n          break;\n        }\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const data = line.slice(6);\n              if (data === '[DONE]') {\n                onComplete?.();\n                return;\n              }\n              // parseStreamChunk expects the full line with \"data: \" prefix\n              const chunk = parseStreamChunk(line);\n              if (chunk) {\n                onChunk(chunk);\n              }\n            } catch (e) {\n              console.error('Failed to parse chunk:', e);\n            }\n          }\n        }\n      }\n    } catch (error: any) {\n      onError?.(error);\n      throw error;\n    }\n  }\n\n  async getMessageById(\n    projectId: number,\n    sessionId: string,\n    messageId: number\n  ): Promise<APIMessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}`);\n  }\n\n  async updateMessageFeedback(\n    projectId: number,\n    sessionId: string,\n    messageId: number,\n    feedback: { feedback: 'thumbs_up' | 'thumbs_down' }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}/feedback`, {\n      method: 'PUT',\n      body: JSON.stringify(feedback),\n    });\n  }\n\n  // Citations\n  async getCitation(projectId: number, citationId: number): Promise<CitationResponse> {\n    return this.request(`/projects/${projectId}/citations/${citationId}`);\n  }\n\n  async previewCitationFile(id: string): Promise<any> {\n    return this.request(`/preview/${id}`);\n  }\n\n  // File Upload\n  async uploadFile(projectId: number, file: File, options?: {\n    onProgress?: (progress: number) => void;\n  }): Promise<SourceResponse> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // Use the correct /sources endpoint for file uploads\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  // Reports\n  async getTrafficReport(projectId: number): Promise<TrafficReportResponse> {\n    return this.request(`/projects/${projectId}/reports/traffic`);\n  }\n\n  async getQueriesReport(projectId: number): Promise<QueriesReportResponse> {\n    return this.request(`/projects/${projectId}/reports/queries`);\n  }\n\n  async getConversationsReport(projectId: number): Promise<ConversationsReportResponse> {\n    return this.request(`/projects/${projectId}/reports/conversations`);\n  }\n\n  async getAnalysisReport(projectId: number, interval?: AnalysisInterval): Promise<AnalysisReportResponse> {\n    const queryParams = new URLSearchParams();\n    if (interval) queryParams.append('interval', interval);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/reports/analysis${queryString ? `?${queryString}` : ''}`);\n  }\n\n  // Pages\n  async getPages(\n    projectId: number,\n    params?: PagesQueryParams\n  ): Promise<PagesListResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.crawl_status) queryParams.append('crawl_status', params.crawl_status);\n    if (params?.index_status) queryParams.append('index_status', params.index_status);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/pages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async deletePage(projectId: number, pageId: number): Promise<DeletePageResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async reindexPage(projectId: number, pageId: number): Promise<ReindexPageResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/reindex`, {\n      method: 'POST',\n    });\n  }\n\n  async getPageMetadata(projectId: number, pageId: number): Promise<PageMetadataResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/metadata`);\n  }\n\n  async updatePageMetadata(\n    projectId: number,\n    pageId: number,\n    metadata: Partial<PageMetadata>\n  ): Promise<PageMetadataResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/metadata`, {\n      method: 'PUT',\n      body: JSON.stringify(metadata),\n    });\n  }\n\n  // NOTE: This endpoint is not documented in the API\n  // Commenting out until we confirm it exists\n  // async previewFile(pageId: number): Promise<any> {\n  //   return this.request(`/page_file/${pageId}`);\n  // }\n\n  // Licenses\n  async getLicenses(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request(`/projects/${projectId}/license_keys`);\n  }\n\n  async createLicense(projectId: number, data: { name: string }): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`);\n  }\n\n  async updateLicense(\n    projectId: number,\n    licenseId: string,\n    data: { name?: string; is_active?: boolean }\n  ): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Sources\n  async getSources(projectId: number): Promise<SourcesListResponse> {\n    return this.request(`/projects/${projectId}/sources`);\n  }\n\n  async createSitemapSource(\n    projectId: number,\n    data: CreateSitemapSourceRequest\n  ): Promise<SourceResponse> {\n    // Convert JSON data to FormData as the API expects multipart/form-data\n    const formData = new FormData();\n    formData.append('sitemap_path', data.sitemap_path);\n    if (data.executive_js !== undefined) {\n      formData.append('executive_js', String(data.executive_js));\n    }\n    if (data.data_refresh_frequency !== undefined) {\n      formData.append('data_refresh_frequency', data.data_refresh_frequency);\n    }\n    if (data.create_new_pages !== undefined) {\n      formData.append('create_new_pages', String(data.create_new_pages));\n    }\n    if (data.remove_unexist_pages !== undefined) {\n      formData.append('remove_unexist_pages', String(data.remove_unexist_pages));\n    }\n    if (data.refresh_existing_pages !== undefined) {\n      formData.append('refresh_existing_pages', data.refresh_existing_pages);\n    }\n\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  async uploadFileSource(projectId: number, formData: FormData): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  /**\n   * Update source settings\n   * Updates the settings for an existing source.\n   * API endpoint: PUT /projects/{projectId}/sources/{sourceId}\n   */\n  async updateSourceSettings(\n    projectId: number,\n    sourceId: number,\n    settings: UpdateSourceSettingsRequest\n  ): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'PUT',\n      body: JSON.stringify(settings),\n    });\n  }\n\n  async deleteSource(projectId: number, sourceId: number): Promise<DeleteSourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async instantSyncSource(projectId: number, sourceId: number): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}/instant-sync`, {\n      method: 'PUT',\n    });\n  }\n\n  // Customer Intelligence\n  async getCustomerIntelligence(\n    projectId: number,\n    page: number = 1,\n    limit: number = 100\n  ): Promise<CustomerIntelligenceResponse> {\n    return this.request(`/projects/${projectId}/reports/intelligence?page=${page}&limit=${limit}`);\n  }\n\n  // User\n  async getUserLimits(): Promise<LimitsResponse> {\n    return this.request('/user/limits');\n  }\n\n  async getUserProfile(): Promise<UserProfileResponse> {\n    return this.request('/user');\n  }\n\n  async updateUserProfile(formData: FormData): Promise<UserProfileResponse> {\n    return this.request('/user', {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  // Demo Mode\n  async getDemoUsageStats(): Promise<{\n    status: string;\n    data: {\n      usage: {\n        projects: { used: number; limit: number; remaining: number };\n        conversations: { used: number; limit: number; remaining: number };\n        messages: { total: number; limitPerConversation: number; byConversation: Record<string, number> };\n      };\n      session: {\n        sessionId: string;\n        startTime: number;\n        expiresAt: number;\n        remainingTime: number;\n      };\n    };\n  }> {\n    // Add session start time header\n    const sessionData = sessionStorage.getItem('customgpt.freeTrialSession');\n    let startTime = Date.now();\n    \n    if (sessionData) {\n      try {\n        const session = JSON.parse(sessionData);\n        startTime = session.startTime || Date.now();\n      } catch (e) {\n        console.error('[ProxyClient] Failed to parse session data:', e);\n      }\n    }\n    \n    return this.request('/demo/usage', {\n      headers: {\n        'X-Session-Start-Time': startTime.toString()\n      }\n    });\n  }\n  \n  async cleanupDemoSession(): Promise<{\n    status: string;\n    data: {\n      sessionId: string;\n      totalResources: number;\n      successCount: number;\n      failureCount: number;\n      results: Array<{\n        success: boolean;\n        resourceId: string;\n        resourceType: string;\n        error?: string;\n      }>;\n    };\n  }> {\n    return this.request('/demo/cleanup', {\n      method: 'POST'\n    });\n  }\n}\n\n// Export singleton instance\nexport const proxyClient = new ProxyCustomGPTClient();","/**\n * Direct API Client for CustomGPT\n * \n * This client communicates directly with the CustomGPT API using an API key.\n * Used for standalone widget deployments where a proxy server is not available.\n * \n * SECURITY WARNING: This exposes your API key in the browser. Only use this\n * for trusted environments or with restricted API keys.\n */\n\nimport type {\n  Agent,\n  AgentStats,\n  AgentSettings,\n  Conversation,\n  ChatMessage,\n  Citation,\n  APIResponse,\n  AgentsResponse,\n  ConversationsResponse,\n  MessagesResponse,\n  MessageResponse,\n  CitationResponse,\n  StreamChunk,\n} from '@/types';\nimport { parseStreamChunk } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n/**\n * DirectCustomGPTClient\n * \n * Client that communicates directly with CustomGPT API using an API key.\n * This is used for standalone widget deployments without a proxy server.\n */\nexport class DirectCustomGPTClient {\n  private baseURL: string = 'https://app.customgpt.ai/api/v1';\n  private apiKey: string;\n  private timeout: number = 30000;\n  private abortControllers: Map<string, AbortController> = new Map();\n\n  constructor(apiKey: string, baseURL?: string) {\n    if (!apiKey) {\n      throw new Error('API key is required for direct client');\n    }\n    \n    this.apiKey = apiKey;\n    if (baseURL) {\n      this.baseURL = baseURL;\n    }\n    \n    logger.info('DIRECT_CLIENT', 'Direct API Client initialized', {\n      baseURL: this.baseURL,\n      hasApiKey: !!apiKey,\n    });\n  }\n\n  /**\n   * Make a request to the CustomGPT API\n   */\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    const requestId = `${options.method || 'GET'}-${endpoint}-${Date.now()}`;\n    \n    logger.apiRequest(endpoint, options.method || 'GET', options.body);\n\n    try {\n      const controller = new AbortController();\n      this.abortControllers.set(requestId, controller);\n\n      const timeoutId = setTimeout(() => {\n        controller.abort();\n      }, this.timeout);\n\n      // Don't set Content-Type for FormData - let browser set it with boundary\n      const isFormData = options.body instanceof FormData;\n      const headers: HeadersInit = {\n        'accept': 'application/json',\n        'Authorization': `Bearer ${this.apiKey}`,\n        ...(options.headers as Record<string, string> || {}),\n      };\n      \n      if (!isFormData) {\n        headers['Content-Type'] = 'application/json';\n      }\n      \n      const response = await fetch(url, {\n        ...options,\n        headers,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n      this.abortControllers.delete(requestId);\n\n      let responseData;\n      const contentType = response.headers.get('content-type');\n      \n      if (contentType?.includes('application/json')) {\n        responseData = await response.json();\n      } else {\n        // Non-JSON response, wrap it\n        const text = await response.text();\n        responseData = { \n          status: response.ok ? 'success' : 'error', \n          data: text,\n          message: text \n        };\n      }\n\n      if (!response.ok) {\n        throw {\n          message: responseData.error || responseData.message || `Request failed: ${response.status}`,\n          status: response.status,\n          data: responseData,\n        };\n      }\n\n      logger.apiResponse(endpoint, response.status, responseData);\n      return responseData;\n    } catch (error: any) {\n      this.abortControllers.delete(requestId);\n      \n      if (error.name === 'AbortError') {\n        logger.apiError(endpoint, { message: 'Request timeout', code: 'TIMEOUT' });\n        throw new Error('Request timeout');\n      }\n\n      logger.apiError(endpoint, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Make a streaming request to the API\n   */\n  private async streamRequest(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ReadableStream<Uint8Array>> {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    logger.apiRequest(endpoint, 'POST-STREAM', options.body);\n\n    const headers: HeadersInit = {\n      'Content-Type': 'application/json',\n      'Accept': 'text/event-stream',\n      'Authorization': `Bearer ${this.apiKey}`,\n      ...(options.headers as Record<string, string> || {})\n    };\n\n    const response = await fetch(url, {\n      ...options,\n      headers,\n    });\n\n    if (!response.ok) {\n      let errorMessage = `Stream request failed: ${response.status}`;\n      try {\n        const errorText = await response.text();\n        const errorData = JSON.parse(errorText);\n        errorMessage = errorData.error || errorData.message || errorMessage;\n      } catch {\n        // If not JSON, use the status message\n      }\n      logger.apiError(endpoint, { message: errorMessage, status: response.status });\n      throw new Error(errorMessage);\n    }\n\n    logger.apiResponse(endpoint, response.status, 'Stream started');\n\n    return response.body!;\n  }\n\n  /**\n   * Cancel a specific request\n   */\n  cancelRequest(endpoint: string, method: string = 'GET'): void {\n    const controllers = Array.from(this.abortControllers.entries());\n    controllers.forEach(([key, controller]) => {\n      if (key.includes(`${method}-${endpoint}`)) {\n        controller.abort();\n        this.abortControllers.delete(key);\n      }\n    });\n  }\n\n  /**\n   * Cancel all pending requests\n   */\n  cancelAllRequests(): void {\n    this.abortControllers.forEach(controller => controller.abort());\n    this.abortControllers.clear();\n  }\n\n  // Agent Management\n  async getAgents(params?: {\n    page?: number;\n    per_page?: number;\n  }): Promise<AgentsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async getAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}`);\n  }\n\n  async getAgentSettings(id: number): Promise<APIResponse<AgentSettings>> {\n    return this.request(`/projects/${id}/settings`);\n  }\n\n  // Conversation Management\n  async getConversations(projectId: number, params?: {\n    page?: number;\n    per_page?: number;\n  }): Promise<ConversationsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async createConversation(projectId: number, data?: { name?: string }): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations`, {\n      method: 'POST',\n      body: JSON.stringify(data || {}),\n    });\n  }\n\n  async deleteConversation(projectId: number, sessionId: string): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Message Management\n  async getMessages(\n    projectId: number,\n    sessionId: string,\n    params?: {\n      page?: number;\n      per_page?: number;\n    }\n  ): Promise<MessagesResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async sendMessage(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      stream?: boolean;\n      source_ids?: string[];\n      response_source?: string;\n      chatbot_model?: string;\n      custom_persona?: string;\n      agent_capability?: string;\n    }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async sendMessageStream(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      source_ids?: string[];\n      response_source?: string;\n      chatbot_model?: string;\n      custom_persona?: string;\n      agent_capability?: string;\n    },\n    onChunk: (chunk: StreamChunk) => void,\n    onError?: (error: Error) => void,\n    onComplete?: () => void\n  ): Promise<void> {\n    try {\n      const stream = await this.streamRequest(\n        `/projects/${projectId}/conversations/${sessionId}/messages`,\n        {\n          method: 'POST',\n          body: JSON.stringify({ ...data, stream: true }),\n        }\n      );\n\n      const reader = stream.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          onComplete?.();\n          break;\n        }\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const data = line.slice(6);\n              if (data === '[DONE]') {\n                onComplete?.();\n                return;\n              }\n              const chunk = parseStreamChunk(data);\n              if (chunk) {\n                onChunk(chunk);\n              }\n            } catch (e) {\n              console.error('Failed to parse chunk:', e);\n            }\n          }\n        }\n      }\n    } catch (error: any) {\n      onError?.(error);\n      throw error;\n    }\n  }\n\n  async updateMessageFeedback(\n    projectId: number,\n    sessionId: string,\n    messageId: number,\n    feedback: { feedback: 'thumbs_up' | 'thumbs_down' }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}/feedback`, {\n      method: 'PUT',\n      body: JSON.stringify(feedback),\n    });\n  }\n\n  // Citations\n  async getCitation(projectId: number, citationId: number): Promise<CitationResponse> {\n    return this.request(`/projects/${projectId}/citations/${citationId}`);\n  }\n\n  async previewCitationFile(id: string): Promise<any> {\n    // Note: This endpoint might need authentication adjustments\n    return this.request(`/preview/${id}`);\n  }\n\n  // File Upload\n  async uploadFile(projectId: number, file: File): Promise<any> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n    });\n  }\n}\n\n// Export singleton factory\nexport const createDirectClient = (apiKey: string, baseURL?: string) => {\n  return new DirectCustomGPTClient(apiKey, baseURL);\n};","/**\n * API Client Abstraction\n * \n * This module provides the appropriate API client based on the configuration.\n * It can switch between:\n * - Proxy mode: For Next.js app (API key stored server-side)\n * - Direct mode: For widget deployments (API key provided client-side)\n */\n\nimport { ProxyCustomGPTClient, proxyClient } from './proxy-client';\nimport { DirectCustomGPTClient } from './direct-client';\n\n// Type that represents either client\nexport type CustomGPTClient = ProxyCustomGPTClient | DirectCustomGPTClient;\n\n// Configuration interface\ninterface ClientConfig {\n  mode?: 'proxy' | 'direct';\n  apiKey?: string;\n  apiUrl?: string;\n}\n\n// Singleton instance\nlet clientInstance: CustomGPTClient | null = null;\nlet initialized = false;\n\n/**\n * Initialize the API client\n * @param config Configuration object with mode, apiKey, and optional apiUrl\n */\nexport function initializeClient(config?: ClientConfig): void {\n  if (config) {\n    if (config.mode === 'direct' && config.apiKey) {\n      // Direct mode for widget deployments\n      clientInstance = new DirectCustomGPTClient(config.apiKey, config.apiUrl);\n      initialized = true;\n    } else {\n      // Proxy mode (default)\n      clientInstance = proxyClient;\n      if (config.apiUrl) {\n        proxyClient.setApiUrl(config.apiUrl);\n      }\n      initialized = true;\n    }\n  } else {\n    // Default to proxy client\n    clientInstance = proxyClient;\n    initialized = true;\n  }\n}\n\n/**\n * Get the API client instance\n */\nexport function getClient(): CustomGPTClient {\n  if (!clientInstance) {\n    // Default to proxy client if not initialized\n    clientInstance = proxyClient;\n  }\n  return clientInstance;\n}\n\n/**\n * Get or create the API client instance\n * @deprecated Use getClient() instead\n */\nexport function getApiClient(config?: ClientConfig): CustomGPTClient {\n  if (config) {\n    initializeClient(config);\n  }\n  return getClient();\n}\n\n/**\n * Check if client is initialized\n */\nexport function isClientInitialized(): boolean {\n  return initialized || clientInstance !== null;\n}\n\n/**\n * Reset the client instance\n */\nexport function resetApiClient(): void {\n  clientInstance = null;\n  initialized = false;\n}\n\n// Export default client getter for backward compatibility\nexport const apiClient = getClient();","/**\n * Message Store - Core Chat Functionality\n * \n * This store manages all message-related state and operations.\n * It's the heart of the chat system, handling:\n * - Message sending and receiving\n * - Real-time streaming responses\n * - Message history management\n * - Local storage fallback\n * - Error handling and retries\n * \n * Architecture:\n * - Uses Map for efficient conversation-based message storage\n * - Integrates with agent and conversation stores\n * - Handles both streaming and non-streaming API responses\n * - Provides local storage backup for offline access\n * \n * Key Features:\n * - Automatic conversation creation if needed\n * - Streaming with fallback to non-streaming\n * - Optimistic UI updates\n * - Message feedback tracking\n * - File upload support\n * \n * Features:\n * - Real-time streaming with local storage persistence\n * - Robust error handling with graceful fallbacks\n * - Comprehensive logging and debugging support\n * - Optimistic UI updates with consistent message ordering\n */\n\nimport { create } from 'zustand';\nimport type { MessageStore, ChatMessage, Citation, FeedbackType, MessageDetails, MessageMetadata } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useAgentStore } from './agents';\nimport { useConversationStore } from './conversations';\nimport { useChatSettingsStore } from './chat-settings';\nimport { generateId } from '@/lib/utils';\nimport { globalStreamManager } from '@/lib/streaming/handler';\nimport { logger } from '@/lib/logger';\nimport { toast } from 'sonner';\n\n/**\n * Local storage configuration\n * Provides offline access and caching for better UX\n */\nconst MESSAGES_STORAGE_KEY = 'customgpt-messages-cache';\n\n/**\n * Save messages to local storage\n * Provides a fallback when API is unavailable\n * @param conversationId - The conversation to save messages for\n * @param messages - Array of messages to save\n */\nfunction saveMessagesToStorage(conversationId: string, messages: ChatMessage[]) {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    const cache = stored ? JSON.parse(stored) : {};\n    cache[conversationId] = messages;\n    localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n  } catch (error) {\n    // Silent fail - storage is optional\n  }\n}\n\n/**\n * Load messages from local storage\n * Used as fallback when API is unavailable\n * @param conversationId - The conversation to load messages for\n * @returns Array of messages or null if not found\n */\nfunction loadMessagesFromStorage(conversationId: string): ChatMessage[] | null {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    if (!stored) return null;\n    const cache = JSON.parse(stored);\n    return cache[conversationId] || null;\n  } catch (error) {\n    // Silent fail - storage is optional\n    return null;\n  }\n}\n\n/**\n * Fetch citation details by IDs\n * \n * Converts citation IDs to full citation objects with title, source, content\n * \n * @param citationIds - Array of citation IDs\n * @param projectId - The project/agent ID\n * @returns Array of citation objects with details\n */\n/**\n * Validate and filter citation IDs\n * \n * @param citationIds - Raw citation IDs from API\n * @returns Filtered array of valid citation IDs\n */\nfunction validateCitationIds(citationIds: any[]): number[] {\n  if (!Array.isArray(citationIds)) {\n    logger.warn('MESSAGES', 'Citation IDs is not an array', { citationIds });\n    return [];\n  }\n  \n  const validIds = citationIds\n    .filter(id => typeof id === 'number' && !isNaN(id) && id > 0)\n    .filter((id, index, arr) => arr.indexOf(id) === index); // Remove duplicates\n  \n  if (validIds.length !== citationIds.length) {\n    logger.warn('MESSAGES', 'Filtered out invalid citation IDs', {\n      original: citationIds,\n      valid: validIds,\n      filtered: citationIds.length - validIds.length\n    });\n  }\n  \n  return validIds;\n}\n\nasync function fetchCitationDetails(citationIds: number[], projectId: number): Promise<Citation[]> {\n  // Validate input citation IDs\n  const validCitationIds = validateCitationIds(citationIds);\n  \n  if (validCitationIds.length === 0) {\n    logger.warn('MESSAGES', 'No valid citation IDs to fetch', { citationIds });\n    return [];\n  }\n  \n  logger.info('MESSAGES', 'Fetching citation details', {\n    projectId,\n    citationIds: validCitationIds,\n    count: validCitationIds.length\n  });\n  \n  const client = getClient();\n  const citations: Citation[] = [];\n  \n  for (let i = 0; i < validCitationIds.length; i++) {\n    const citationId = validCitationIds[i];\n    \n    try {\n      const response = await client.getCitation(projectId, citationId);\n      \n      if (response.data) {\n        const citation = {\n          id: citationId.toString(), // Convert to string as per Citation interface\n          index: i + 1, // 1-based index for display\n          title: response.data.title || `Citation ${i + 1}`,\n          source: response.data.url,\n          url: response.data.url,\n          content: response.data.description || '',\n        };\n        citations.push(citation);\n        \n        logger.info('MESSAGES', 'Citation fetched successfully', {\n          citationId,\n          title: citation.title,\n          hasContent: !!citation.content,\n          hasUrl: !!citation.url\n        });\n      } else {\n        logger.warn('MESSAGES', 'Citation API returned empty data', {\n          citationId,\n          response\n        });\n      }\n    } catch (error) {\n      logger.warn('MESSAGES', 'Failed to fetch citation details', {\n        citationId,\n        projectId,\n        error: error instanceof Error ? error.message : String(error),\n        errorType: error instanceof Error ? error.constructor.name : typeof error\n      });\n      // Only create fallback citations for actual errors, not empty responses\n      // This reduces wrong citations from appearing\n      if (error instanceof Error && error.message.includes('404')) {\n        logger.info('MESSAGES', 'Citation not found, skipping fallback', { citationId });\n        // Skip creating fallback for 404 errors - citation simply doesn't exist\n        continue;\n      } else {\n        // Create fallback only for network/server errors\n        citations.push({\n          id: citationId.toString(), // Convert to string\n          index: i + 1,\n          title: `Citation ${i + 1}`,\n          source: '',\n          url: '',\n          content: 'Citation details unavailable',\n        });\n      }\n    }\n  }\n  \n  logger.info('MESSAGES', 'Citation fetching completed', {\n    requested: validCitationIds.length,\n    fetched: citations.length,\n    success: citations.filter(c => c.content !== 'Citation details unavailable').length\n  });\n  \n  return citations;\n}\n\n/**\n * Message Store Implementation\n * \n * State Structure:\n * - messages: Map<conversationId, ChatMessage[]> - All messages grouped by conversation\n * - streamingMessage: Current message being streamed (null when not streaming)\n * - isStreaming: Whether a message is currently being streamed\n * - loading: General loading state for message operations\n * - error: Current error message if any\n */\nexport const useMessageStore = create<MessageStore>((set, get) => ({\n  // Initialize with empty state\n  messages: new Map(),\n  streamingMessage: null,\n  isStreaming: false,\n  loading: false,\n  error: null,\n\n  /**\n   * Send a message to the current agent\n   * \n   * Flow:\n   * 1. Validate agent selection\n   * 2. Ensure conversation exists (create if needed)\n   * 3. Create and add user message (optimistic update)\n   * 4. Upload files if present\n   * 5. Start streaming response\n   * 6. Fall back to non-streaming if streaming fails\n   * 7. Handle errors gracefully\n   * \n   * \n   * @param content - Message text\n   * @param files - Optional file attachments\n   */\n  sendMessage: async (content: string, files?: File[]) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    if (!currentAgent) {\n      logger.error('MESSAGES', 'No agent selected when trying to send message');\n      \n      // Check if this is due to missing API keys\n      const response = await fetch('/api/proxy/user/limits').catch(() => null);\n      if (!response || response.status === 401 || response.status === 500) {\n        throw new Error('API key not configured. Please add CUSTOMGPT_API_KEY to your .env.local file and restart the server.');\n      }\n      \n      throw new Error('No agent selected. Please select or create an agent first.');\n    }\n\n    logger.info('MESSAGES', 'Sending message', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name,\n      messageLength: content.length,\n      hasFiles: files && files.length > 0\n    });\n\n    // Ensure we have a conversation\n    const conversation = await conversationStore.ensureConversation(\n      currentAgent.id,\n      content\n    );\n\n    logger.info('MESSAGES', 'Conversation ensured', {\n      conversationId: conversation.id,\n      sessionId: conversation.session_id,\n      hasSessionId: !!conversation.session_id,\n      isNew: !conversation.message_count || conversation.message_count === 0\n    });\n\n    if (!conversation.session_id) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversation });\n      throw new Error('Conversation missing session_id');\n    }\n\n    set({ loading: true, error: null });\n\n    // Create user message\n    const userMessage: ChatMessage = {\n      id: generateId(),\n      role: 'user',\n      content,\n      timestamp: new Date().toISOString(),\n      status: 'sending',\n    };\n\n    // Add user message to store\n    get().addMessage(conversation.id.toString(), userMessage);\n\n    // Create assistant message placeholder\n    const assistantMessage: ChatMessage = {\n      id: generateId(),\n      role: 'assistant',\n      content: '',\n      timestamp: new Date().toISOString(),\n      citations: [],\n    };\n\n    set({ \n      streamingMessage: assistantMessage,\n      isStreaming: true,\n      loading: false,\n    });\n\n    try {\n      // Handle file uploads if present\n      let sourceIds: string[] = [];\n      if (files && files.length > 0) {\n        const client = getClient();\n        const uploadResponses = await Promise.all(\n          files.map(file => client.uploadFile(currentAgent.id, file))\n        );\n        \n        // Extract source IDs from upload responses\n        sourceIds = uploadResponses\n          .filter(response => response?.data?.id)\n          .map(response => response.data.id.toString());\n          \n        logger.info('MESSAGES', 'Files uploaded successfully', {\n          fileCount: files.length,\n          sourceIds: sourceIds\n        });\n      }\n\n      // Update user message status\n      userMessage.status = 'sent';\n      get().addMessage(conversation.id.toString(), userMessage);\n\n      // Start streaming with correct parameters\n      const client = getClient();\n      \n      logger.info('MESSAGES', 'Starting message stream', {\n        agentId: currentAgent.id,\n        sessionId: conversation.session_id,\n        messageContent: content.substring(0, 50),\n        hasSourceIds: sourceIds.length > 0,\n        sourceIds: sourceIds\n      });\n      \n      try {\n        // Get chat settings for current agent\n        const chatSettings = useChatSettingsStore.getState().getSettings(currentAgent.id);\n        \n        // Prepare the request data - only send fields that the API accepts\n        const requestData: { \n          prompt: string; \n          source_ids?: string[];\n          response_source?: string;\n        } = { \n          prompt: content || '', // Ensure we always have a prompt, even if empty\n          response_source: chatSettings.response_source || 'default',\n        };\n        \n        // Add source_ids if we have uploaded files\n        if (sourceIds.length > 0) {\n          requestData.source_ids = sourceIds;\n          \n          // If no text prompt was provided, add a default prompt for file analysis\n          if (!content.trim()) {\n            requestData.prompt = 'Please analyze the uploaded file(s).';\n          }\n        }\n        \n        await client.sendMessageStream(\n          currentAgent.id,\n          conversation.session_id,  // Use session_id instead of id\n          requestData,\n          (chunk) => {\n              logger.info('MESSAGES', 'Received stream chunk', { \n                type: chunk.type, \n                hasContent: !!chunk.content,\n                contentLength: chunk.content?.length,\n                contentPreview: chunk.content?.substring(0, 50)\n              });\n              \n              if (chunk.type === 'content' && chunk.content) {\n                get().updateStreamingMessage(chunk.content, chunk.citations);\n              } else if (chunk.type === 'citation' && chunk.citations) {\n                // Handle citation-only chunks\n                const current = get().streamingMessage;\n                if (current && chunk.citations && Array.isArray(chunk.citations)) {\n                  // Check if citations are IDs or objects\n                  if (chunk.citations.length > 0 && typeof chunk.citations[0] === 'number') {\n                    // Fetch citation details asynchronously\n                    fetchCitationDetails(chunk.citations as any as number[], currentAgent.id).then(citationDetails => {\n                      const updatedCurrent = get().streamingMessage;\n                      if (updatedCurrent) {\n                        set({\n                          streamingMessage: {\n                            ...updatedCurrent,\n                            citations: citationDetails\n                          }\n                        });\n                      }\n                    });\n                  } else {\n                    // Citations might already be objects\n                    set({\n                      streamingMessage: {\n                        ...current,\n                        citations: chunk.citations\n                      }\n                    });\n                  }\n                }\n              }\n            },\n            async (streamError) => {\n              logger.error('MESSAGES', 'Streaming failed, attempting fallback to non-streaming', streamError, {\n                errorMessage: streamError.message,\n                agentId: currentAgent.id,\n                sessionId: conversation.session_id\n              });\n              \n              // Try fallback to non-streaming API\n              try {\n                logger.info('MESSAGES', 'Using non-streaming fallback');\n                \n                const response = await client.sendMessage(\n                  currentAgent.id,\n                  conversation.session_id,\n                  { \n                    prompt: requestData.prompt,\n                    stream: false,\n                    source_ids: requestData.source_ids\n                  }\n                );\n                \n                // Update streaming message with the complete response\n                const finalMessage = get().streamingMessage;\n                if (finalMessage && response) {\n                  // Handle different response formats from API\n                  let messageData: any;\n                  if (response.data) {\n                    messageData = response.data;\n                  } else {\n                    // Direct response format - cast to any to handle the actual API structure\n                    messageData = response as any;\n                  }\n                  \n                  finalMessage.content = messageData?.openai_response || messageData?.content || 'No response received';\n                  \n                  // Fetch citation details if needed\n                  if (messageData?.citations && Array.isArray(messageData.citations) && messageData.citations.length > 0) {\n                    if (typeof messageData.citations[0] === 'number') {\n                      // Citations are IDs, fetch details\n                      finalMessage.citations = await fetchCitationDetails(messageData.citations, currentAgent.id);\n                    } else {\n                      // Citations might already be objects\n                      finalMessage.citations = messageData.citations;\n                    }\n                  } else {\n                    finalMessage.citations = [];\n                  }\n                  \n                  finalMessage.status = 'sent';\n                  \n                  // Update the message ID to include the prompt ID if available\n                  if (messageData?.id) {\n                    finalMessage.id = `${messageData.id}-assistant`;\n                    // Also update the user message ID\n                    const conversationMessages = get().messages.get(conversation.id.toString()) || [];\n                    const lastUserMessage = conversationMessages.filter(m => m.role === 'user').pop();\n                    if (lastUserMessage && lastUserMessage.id === userMessage.id) {\n                      lastUserMessage.id = `${messageData.id}-user`;\n                      get().addMessage(conversation.id.toString(), lastUserMessage);\n                    }\n                  }\n                  \n                  // Add details from the API response\n                  finalMessage.details = {\n                    user_id: messageData?.user_id,\n                    conversation_id: messageData?.conversation_id,\n                    updated_at: messageData?.updated_at,\n                    prompt_id: messageData?.id,\n                    metadata: messageData?.metadata ? {\n                      user_ip: messageData.metadata.user_ip,\n                      user_agent: messageData.metadata.user_agent,\n                      external_id: messageData.metadata.external_id,\n                      request_source: messageData.metadata.request_source,\n                    } : undefined,\n                  };\n                  get().addMessage(conversation.id.toString(), finalMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                logger.info('MESSAGES', 'Fallback to non-streaming successful');\n                \n              } catch (fallbackError: any) {\n                logger.error('MESSAGES', 'Both streaming and non-streaming failed', fallbackError);\n                \n                // Update assistant message with error\n                const errorMessage = get().streamingMessage;\n                if (errorMessage) {\n                  errorMessage.content = 'Sorry, I encountered an error while processing your message. Please try again.';\n                  errorMessage.status = 'error';\n                  get().addMessage(conversation.id.toString(), errorMessage);\n                }\n                \n                // Extract error details including status code\n                let errorText = 'Communication error';\n                if (fallbackError.status) {\n                  switch (fallbackError.status) {\n                    case 429:\n                      errorText = 'You have exhausted your current query credits. Please contact customer service for assistance.';\n                      break;\n                    case 401:\n                      errorText = 'API Token is either missing or invalid';\n                      break;\n                    case 404:\n                      errorText = 'Agent or conversation not found';\n                      break;\n                    case 400:\n                      errorText = 'Invalid request format';\n                      break;\n                    default:\n                      errorText = fallbackError.message || `Error ${fallbackError.status}`;\n                  }\n                } else if (fallbackError.message) {\n                  errorText = fallbackError.message;\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                  error: errorText,\n                });\n              }\n            },\n            async () => {\n              // onComplete callback - enrich streaming message with API data\n              const finalMessage = get().streamingMessage;\n              if (finalMessage) {\n                finalMessage.status = 'sent';\n                \n                // Add message immediately to ensure it's visible\n                get().addMessage(conversation.id.toString(), finalMessage);\n                \n                // Clear streaming state now that message is added\n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                // Fetch latest messages to enrich the streaming message with API metadata\n                try {\n                  logger.info('MESSAGES', 'Enriching streaming message with API data');\n                  const client = getClient();\n                  const response = await client.getMessages(currentAgent.id, conversation.session_id);\n                  \n                  // Process API response to find messages\n                  let apiMessages = [];\n                  if (response && typeof response === 'object') {\n                    if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n                      apiMessages = (response as any).data.messages.data;\n                    } else if (Array.isArray((response as any).data)) {\n                      apiMessages = (response as any).data;\n                    } else if (Array.isArray(response)) {\n                      apiMessages = response;\n                    } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n                      apiMessages = (response as any).data.data;\n                    }\n                  }\n                  \n                  if (apiMessages.length > 0) {\n                    // Find the most recent assistant message (should be our streaming message)\n                    const latestApiMessage = apiMessages[apiMessages.length - 1];\n                    \n                    if (latestApiMessage && latestApiMessage.openai_response) {\n                      // Enrich the streaming message with API data\n                      finalMessage.id = `${latestApiMessage.id}-assistant`;\n                      finalMessage.timestamp = latestApiMessage.created_at || latestApiMessage.timestamp || finalMessage.timestamp;\n                      \n                      // Add full message details\n                      finalMessage.details = {\n                        user_id: latestApiMessage.user_id,\n                        conversation_id: latestApiMessage.conversation_id,\n                        updated_at: latestApiMessage.updated_at,\n                        prompt_id: latestApiMessage.id,\n                        metadata: latestApiMessage.metadata ? {\n                          user_ip: latestApiMessage.metadata.user_ip,\n                          user_agent: latestApiMessage.metadata.user_agent,\n                          external_id: latestApiMessage.metadata.external_id,\n                          request_source: latestApiMessage.metadata.request_source,\n                        } : undefined,\n                      };\n                      \n                      // Also enrich the user message with proper ID and details\n                      const conversationMessages = get().messages.get(conversation.id.toString()) || [];\n                      const lastUserMessage = conversationMessages.filter(m => m.role === 'user').pop();\n                      if (lastUserMessage && lastUserMessage.id === userMessage.id && latestApiMessage.user_query) {\n                        lastUserMessage.id = `${latestApiMessage.id}-user`;\n                        lastUserMessage.timestamp = latestApiMessage.created_at || latestApiMessage.timestamp || lastUserMessage.timestamp;\n                        lastUserMessage.details = {\n                          user_id: latestApiMessage.user_id,\n                          conversation_id: latestApiMessage.conversation_id,\n                          updated_at: latestApiMessage.updated_at,\n                          prompt_id: latestApiMessage.id,\n                          metadata: latestApiMessage.metadata ? {\n                            user_ip: latestApiMessage.metadata.user_ip,\n                            user_agent: latestApiMessage.metadata.user_agent,\n                            external_id: latestApiMessage.metadata.external_id,\n                            request_source: latestApiMessage.metadata.request_source,\n                          } : undefined,\n                        };\n                        get().addMessage(conversation.id.toString(), lastUserMessage);\n                      }\n                      \n                      // Enrich citations if they exist\n                      // Preserve existing citations from streaming if API doesn't provide them\n                      const existingCitations = finalMessage.citations || [];\n                      \n                      if (latestApiMessage.citations && Array.isArray(latestApiMessage.citations) && latestApiMessage.citations.length > 0) {\n                        if (typeof latestApiMessage.citations[0] === 'number') {\n                          // Citations are IDs, fetch details\n                          const citationDetails = await fetchCitationDetails(latestApiMessage.citations, currentAgent.id);\n                          finalMessage.citations = citationDetails;\n                        } else {\n                          // Citations might already be objects\n                          finalMessage.citations = latestApiMessage.citations;\n                        }\n                      } else {\n                        // Keep existing citations from streaming if API doesn't provide any\n                        finalMessage.citations = existingCitations;\n                      }\n                      \n                      // Update feedback if present\n                      if (latestApiMessage.response_feedback?.reaction) {\n                        finalMessage.feedback = latestApiMessage.response_feedback.reaction === 'liked' ? 'like' : \n                                               latestApiMessage.response_feedback.reaction === 'disliked' ? 'dislike' : \n                                               undefined;\n                      }\n                      \n                      // Update the enriched message in the store (it's already added, so this updates it)\n                      get().addMessage(conversation.id.toString(), finalMessage);\n                      \n                      logger.info('MESSAGES', 'Successfully enriched streaming message with API data', {\n                        messageId: finalMessage.id,\n                        hasDetails: !!finalMessage.details,\n                        citationCount: finalMessage.citations?.length || 0\n                      });\n                    } else {\n                      // API message exists but doesn't have expected format\n                      logger.info('MESSAGES', 'API message format mismatch, keeping original message');\n                    }\n                  } else {\n                    // No API messages found\n                    logger.info('MESSAGES', 'No API messages found for enrichment');\n                  }\n                } catch (enrichmentError) {\n                  logger.warn('MESSAGES', 'Failed to enrich streaming message, keeping basic version', enrichmentError);\n                  // Message is already added, enrichment failed but user can still see the response\n                }\n              }\n            }\n        );\n      } catch (setupError) {\n        logger.error('MESSAGES', 'Failed to setup streaming', setupError);\n        throw setupError;\n      }\n    } catch (error: any) {\n      logger.error('MESSAGES', 'Failed to send message', error, {\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n        status: error.status,\n        agentId: currentAgent.id,\n        conversationId: conversation.id,\n        sessionId: conversation.session_id\n      });\n      \n      // Update user message status\n      userMessage.status = 'error';\n      get().addMessage(conversation.id.toString(), userMessage);\n      \n      // Extract error details including status code\n      let errorText = 'Failed to send message';\n      if (error.status) {\n        switch (error.status) {\n          case 429:\n            errorText = 'You have exhausted your current query credits. Please contact customer service for assistance.';\n            break;\n          case 401:\n            errorText = 'API Token is either missing or invalid';\n            break;\n          case 403:\n            // Check if agent is inactive by looking at current agent status\n            const agentStore = useAgentStore.getState();\n            const { currentAgent: currentAgentFor403 } = agentStore;\n            if (currentAgentFor403 && !currentAgentFor403.is_chat_active) {\n              errorText = 'Agent is inactive - no documents uploaded. Please add documents to activate the agent.';\n            } else {\n              errorText = 'Access denied. You don\\'t have permission to access this resource.';\n            }\n            break;\n          case 404:\n            errorText = 'Agent or conversation not found';\n            break;\n          case 400:\n            errorText = 'Invalid request format';\n            break;\n          case 500:\n            errorText = 'Internal server error. Please try again later.';\n            break;\n          default:\n            errorText = error.message || `Error ${error.status}`;\n        }\n      } else if (error.message) {\n        errorText = error.message;\n      }\n      \n      set({ \n        streamingMessage: null,\n        isStreaming: false,\n        error: errorText,\n        loading: false,\n      });\n      \n      throw error;\n    }\n  },\n\n  /**\n   * Add or update a message in the store\n   * \n   * Features:\n   * - Handles both new messages and updates\n   * - Maintains message order\n   * - Automatically saves to local storage\n   * - Efficient update using message ID lookup\n   * \n   * @param conversationId - The conversation to add the message to\n   * @param message - The message to add or update\n   */\n  addMessage: (conversationId: string, message: ChatMessage) => {\n    set(state => {\n      const newMessages = new Map(state.messages);\n      const conversationMessages = newMessages.get(conversationId) || [];\n      \n      // Check if message already exists and update it\n      const existingIndex = conversationMessages.findIndex(m => m.id === message.id);\n      if (existingIndex >= 0) {\n        // Update existing message\n        conversationMessages[existingIndex] = message;\n      } else {\n        // Add new message\n        conversationMessages.push(message);\n      }\n      \n      newMessages.set(conversationId, conversationMessages);\n      \n      // Save to local storage as fallback\n      saveMessagesToStorage(conversationId, conversationMessages);\n      \n      return { messages: newMessages };\n    });\n  },\n\n  /**\n   * Update the currently streaming message\n   * \n   * Used during streaming to append content chunks\n   * and update citations as they arrive\n   * \n   * @param content - Content chunk to append\n   * @param citations - Updated citations (optional)\n   */\n  updateStreamingMessage: (content: string, citations?: Citation[]) => {\n    set(state => {\n      if (!state.streamingMessage) return state;\n      \n      return {\n        streamingMessage: {\n          ...state.streamingMessage,\n          content: state.streamingMessage.content + content, // Append content\n          citations: citations || state.streamingMessage.citations, // Update citations if provided\n        },\n      };\n    });\n  },\n\n  clearMessages: (conversationId?: string) => {\n    set(state => {\n      if (conversationId) {\n        const newMessages = new Map(state.messages);\n        newMessages.delete(conversationId);\n        return { messages: newMessages };\n      } else {\n        // Clear all messages\n        return { messages: new Map() };\n      }\n    });\n  },\n\n  updateMessageFeedback: async (messageId: string, feedback: FeedbackType) => {\n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    const { currentConversation } = conversationStore;\n    \n    if (!currentAgent || !currentConversation) {\n      logger.warn('MESSAGES', 'Cannot update feedback - missing agent or conversation');\n      return;\n    }\n\n    // Find the message\n    const conversationMessages = get().messages.get(currentConversation.id.toString()) || [];\n    const message = conversationMessages.find(m => m.id === messageId);\n    \n    if (!message) {\n      logger.warn('MESSAGES', 'Message not found for feedback update', { messageId });\n      return;\n    }\n\n    // Get the prompt ID from message details or try to extract from message ID\n    let promptId: number | undefined;\n    \n    if (message.details?.prompt_id) {\n      promptId = message.details.prompt_id;\n    } else {\n      // Try to extract from message ID format \"{promptId}-assistant\" or \"{promptId}-user\"\n      const promptIdMatch = message.id.match(/^(\\d+)-/);\n      if (promptIdMatch) {\n        promptId = parseInt(promptIdMatch[1]);\n      }\n    }\n    \n    if (!promptId) {\n      logger.error('MESSAGES', 'Could not determine prompt ID for message', { messageId, details: message.details });\n      toast.error('Unable to update feedback. Message ID not found.');\n      return;\n    }\n    const sessionId = currentConversation.session_id;\n    \n    if (!sessionId) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversationId: currentConversation.id });\n      return;\n    }\n\n    try {\n      // Update local state immediately (optimistic update)\n      const updatedMessage = { ...message, feedback };\n      get().addMessage(currentConversation.id.toString(), updatedMessage);\n\n      // Send to API\n      const client = getClient();\n      \n      // Map feedback directly to API format (no neutral option)\n      const feedbackValue = feedback === 'like' ? 'thumbs_up' : 'thumbs_down';\n      \n      logger.info('MESSAGES', 'Updating message feedback', {\n        projectId: currentAgent.id,\n        sessionId,\n        promptId,\n        feedback: feedbackValue\n      });\n      \n      const response = await client.updateMessageFeedback(\n        currentAgent.id,\n        sessionId,\n        promptId,\n        { feedback: feedbackValue }\n      );\n      \n      // The feedback was already updated optimistically above\n      // The response doesn't include the updated message data in the expected format\n      logger.info('MESSAGES', 'Message feedback updated successfully');\n      \n      // Show success toast\n      toast.success('Thanks for your feedback!');\n      \n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to update message feedback', error);\n      \n      // Revert local state on error\n      get().addMessage(currentConversation.id.toString(), message);\n      \n      // Show error toast\n      if ((error as any)?.status === 401) {\n        toast.error('Authentication failed. Please log in again.');\n      } else if ((error as any)?.status === 404) {\n        toast.error('Message not found.');\n      } else {\n        toast.error('Failed to update feedback. Please try again.');\n      }\n    }\n  },\n\n  // Utility methods\n  getMessagesForConversation: (conversationId: string): ChatMessage[] => {\n    return get().messages.get(conversationId) || [];\n  },\n\n  cancelStreaming: () => {\n    globalStreamManager.cancelAllStreams();\n    set({ \n      streamingMessage: null,\n      isStreaming: false,\n    });\n  },\n\n  /**\n   * Load message history for a conversation\n   * \n   * API Response Handling:\n   * - Supports multiple response formats from the API\n   * - Converts API format to internal ChatMessage format\n   * - Falls back to local storage if API fails\n   * - Handles both user_query and openai_response fields\n   * - Fetches citation details for citation IDs\n   * \n   * @param conversationId - The conversation to load messages for\n   */\n  loadMessages: async (conversationId: string) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    if (isDemoMode) {\n      logger.info('MESSAGES', 'Skipping message load in demo mode', { conversationId });\n      // Just ensure the conversation has an entry in the messages map\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    // Skip API calls for locally created conversations (they don't exist on server)\n    if (conversationId.startsWith('conv_')) {\n      logger.info('MESSAGES', 'Skipping API load for local conversation', { conversationId });\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    const { currentAgent } = agentStore;\n    const { conversations } = conversationStore;\n    \n    if (!currentAgent) {\n      logger.warn('MESSAGES', 'No current agent when loading messages', { conversationId });\n      return;\n    }\n\n    // Find the conversation to get its session_id\n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) {\n      logger.error('MESSAGES', 'Conversation not found in store', { \n        conversationId,\n        availableConversations: conversations.map(c => c.id)\n      });\n      // Don't set error, just ensure empty message array exists\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n\n    logger.info('MESSAGES', 'Loading messages for conversation', {\n      conversationId,\n      sessionId: conversation.session_id,\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n\n    set({ loading: true, error: null });\n\n    try {\n      const client = getClient();\n      const response = await client.getMessages(currentAgent.id, conversation.session_id);\n      logger.info('MESSAGES', 'Messages API response received', {\n        conversationId,\n        responseType: typeof response,\n        hasData: !!(response as any)?.data,\n        dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n      });\n      \n      // Handle different response formats from the API\n      let messages = [];\n      if (response && typeof response === 'object') {\n        // API documentation shows response format: { status: \"success\", data: { conversation: {...}, messages: { data: [...] } } }\n        if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n          messages = (response as any).data.messages.data;\n        } else if (Array.isArray((response as any).data)) {\n          messages = (response as any).data;\n        } else if (Array.isArray(response)) {\n          messages = response;\n        } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n          messages = (response as any).data.data;\n        }\n      }\n      \n      logger.info('MESSAGES', 'Processing messages', {\n        conversationId,\n        messagesCount: messages.length,\n        messageTypes: messages.map((m: any) => m.role || 'unknown')\n      });\n      \n      // Convert API messages to our format\n      // Each API message contains both user_query and openai_response, so we need to create two ChatMessage objects\n      const formattedMessages: ChatMessage[] = [];\n      \n      if (Array.isArray(messages)) {\n        // Process messages and fetch citation details\n        for (const msg of messages) {\n          const baseTimestamp = msg.created_at || msg.timestamp || new Date().toISOString();\n          \n          // Add user message\n          if (msg.user_query) {\n            formattedMessages.push({\n              id: `${msg.id}-user` || `user-${Math.random()}`,\n              role: 'user',\n              content: msg.user_query,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              details: {\n                user_id: msg.user_id,\n                conversation_id: msg.conversation_id,\n                updated_at: msg.updated_at,\n                prompt_id: msg.id,\n                metadata: msg.metadata ? {\n                  user_ip: msg.metadata.user_ip,\n                  user_agent: msg.metadata.user_agent,\n                  external_id: msg.metadata.external_id,\n                  request_source: msg.metadata.request_source,\n                } : undefined,\n              },\n            });\n          }\n          \n          // Add assistant message\n          if (msg.openai_response) {\n            // Fetch citation details if citations exist\n            let citationDetails: Citation[] = [];\n            if (msg.citations && Array.isArray(msg.citations) && msg.citations.length > 0) {\n              // Check if citations are already objects (future-proofing) or just IDs\n              if (typeof msg.citations[0] === 'number') {\n                // Citations are IDs, fetch details\n                citationDetails = await fetchCitationDetails(msg.citations, currentAgent.id);\n              } else {\n                // Citations might already be objects, use as is\n                citationDetails = msg.citations;\n              }\n            }\n            \n            formattedMessages.push({\n              id: `${msg.id}-assistant` || `assistant-${Math.random()}`,\n              role: 'assistant',\n              content: msg.openai_response,\n              citations: citationDetails,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              feedback: msg.response_feedback?.reaction === 'liked' ? 'like' : \n                       msg.response_feedback?.reaction === 'disliked' ? 'dislike' : \n                       undefined,\n              details: {\n                user_id: msg.user_id,\n                conversation_id: msg.conversation_id,\n                updated_at: msg.updated_at,\n                prompt_id: msg.id,\n                metadata: msg.metadata ? {\n                  user_ip: msg.metadata.user_ip,\n                  user_agent: msg.metadata.user_agent,\n                  external_id: msg.metadata.external_id,\n                  request_source: msg.metadata.request_source,\n                } : undefined,\n              },\n            });\n          }\n        }\n      }\n\n      logger.info('MESSAGES', 'Messages formatted successfully', {\n        conversationId,\n        formattedCount: formattedMessages.length\n      });\n\n      // Sort messages by timestamp to ensure chronological order\n      formattedMessages.sort((a, b) => {\n        const dateA = new Date(a.timestamp).getTime();\n        const dateB = new Date(b.timestamp).getTime();\n        return dateA - dateB; // Ascending order (oldest first)\n      });\n\n      logger.info('MESSAGES', 'Messages sorted by timestamp', {\n        conversationId,\n        firstMessageTime: formattedMessages[0]?.timestamp,\n        lastMessageTime: formattedMessages[formattedMessages.length - 1]?.timestamp\n      });\n\n      set(state => {\n        const newMessages = new Map(state.messages);\n        \n        // Preserve any local messages that might be in sending state\n        const existingMessages = state.messages.get(conversationId) || [];\n        const localSendingMessages = existingMessages.filter(msg => \n          msg.status === 'sending' || \n          (msg.role === 'user' && \n           new Date(msg.timestamp).getTime() > Date.now() - 5000) // Messages sent in last 5 seconds\n        );\n        \n        // Merge local sending messages with API messages\n        const mergedMessages = [...formattedMessages];\n        for (const localMsg of localSendingMessages) {\n          if (!mergedMessages.find(m => m.id === localMsg.id)) {\n            // Insert local message at the appropriate position based on timestamp\n            const insertIndex = mergedMessages.findIndex(m => \n              new Date(m.timestamp).getTime() > new Date(localMsg.timestamp).getTime()\n            );\n            if (insertIndex === -1) {\n              mergedMessages.push(localMsg);\n            } else {\n              mergedMessages.splice(insertIndex, 0, localMsg);\n            }\n          }\n        }\n        \n        newMessages.set(conversationId, mergedMessages);\n        \n        // Save to local storage as fallback\n        saveMessagesToStorage(conversationId, mergedMessages);\n        \n        return { \n          messages: newMessages,\n          loading: false,\n        };\n      });\n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to load messages', error, {\n        conversationId,\n        agentId: currentAgent.id,\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        status: (error as any)?.status,\n        message: (error as any)?.message\n      });\n      \n      // Try to load from local storage as fallback\n      const cachedMessages = loadMessagesFromStorage(conversationId);\n      if (cachedMessages && cachedMessages.length > 0) {\n        logger.info('MESSAGES', 'Using cached messages as fallback', {\n          conversationId,\n          messageCount: cachedMessages.length\n        });\n        \n        // Sort cached messages by timestamp to ensure chronological order\n        cachedMessages.sort((a, b) => {\n          const dateA = new Date(a.timestamp).getTime();\n          const dateB = new Date(b.timestamp).getTime();\n          return dateA - dateB; // Ascending order (oldest first)\n        });\n        \n        set(state => {\n          const newMessages = new Map(state.messages);\n          newMessages.set(conversationId, cachedMessages);\n          return { \n            messages: newMessages,\n            loading: false,\n            error: 'Using cached messages (API unavailable)'\n          };\n        });\n      } else {\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to load messages',\n          loading: false,\n        });\n      }\n    }\n  },\n  \n  /**\n   * Clear the error state\n   */\n  clearError: () => {\n    set({ error: null });\n  },\n  \n  /**\n   * Set messages for a specific conversation\n   * Used for updating conversation messages directly\n   */\n  setMessagesForConversation: (conversationId: string, messages: ChatMessage[]) => {\n    set(state => {\n      const newMessages = new Map(state.messages);\n      newMessages.set(conversationId, messages);\n      return { messages: newMessages };\n    });\n  },\n\n  /**\n   * Regenerate the last assistant response\n   * \n   * Flow:\n   * 1. Find the last user message in the conversation\n   * 2. Remove the last assistant message\n   * 3. Resend the user message to get a new response\n   */\n  regenerateLastResponse: async () => {\n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    const { currentConversation } = conversationStore;\n    \n    if (!currentAgent || !currentConversation) {\n      logger.error('MESSAGES', 'Cannot regenerate - missing agent or conversation');\n      toast.error('Cannot regenerate response. Please select a conversation.');\n      return;\n    }\n\n    const conversationId = currentConversation.id.toString();\n    const messages = get().getMessagesForConversation(conversationId);\n    \n    if (messages.length < 2) {\n      logger.warn('MESSAGES', 'Not enough messages to regenerate');\n      toast.error('No response to regenerate.');\n      return;\n    }\n\n    // Find the last user message and last assistant message\n    let lastUserMessage: ChatMessage | null = null;\n    let lastAssistantMessage: ChatMessage | null = null;\n    let lastAssistantIndex = -1;\n\n    // Iterate backwards to find the last assistant and user messages\n    for (let i = messages.length - 1; i >= 0; i--) {\n      const msg = messages[i];\n      if (!lastAssistantMessage && msg.role === 'assistant' && msg.status !== 'error') {\n        lastAssistantMessage = msg;\n        lastAssistantIndex = i;\n      }\n      if (!lastUserMessage && msg.role === 'user' && lastAssistantMessage) {\n        lastUserMessage = msg;\n        break;\n      }\n    }\n\n    if (!lastUserMessage || !lastAssistantMessage) {\n      logger.warn('MESSAGES', 'Could not find valid user/assistant message pair to regenerate');\n      toast.error('No valid response to regenerate.');\n      return;\n    }\n\n    logger.info('MESSAGES', 'Regenerating response', {\n      conversationId,\n      userMessageId: lastUserMessage.id,\n      assistantMessageId: lastAssistantMessage.id,\n      userContent: lastUserMessage.content.substring(0, 50)\n    });\n\n    // Remove the last assistant message\n    const updatedMessages = [...messages];\n    updatedMessages.splice(lastAssistantIndex, 1);\n    get().setMessagesForConversation(conversationId, updatedMessages);\n\n    // Save to local storage\n    saveMessagesToStorage(conversationId, updatedMessages);\n\n    try {\n      // Resend the last user message\n      await get().sendMessage(lastUserMessage.content);\n      \n      logger.info('MESSAGES', 'Response regenerated successfully');\n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to regenerate response', error);\n      \n      // Restore the original assistant message on error\n      get().setMessagesForConversation(conversationId, messages);\n      saveMessagesToStorage(conversationId, messages);\n      \n      toast.error('Failed to regenerate response. Please try again.');\n    }\n  },\n}));","/**\n * Button Component\n * \n * Reusable button component with multiple variants and sizes.\n * Built with class-variance-authority for type-safe styling.\n * \n * Variants:\n * - default: Primary brand button with shadow\n * - destructive: Red danger button for destructive actions\n * - outline: Secondary button with border\n * - secondary: Gray background button\n * - ghost: Transparent button with hover state\n * - link: Text-only button styled as link\n * \n * Sizes:\n * - default: Standard size (h-10)\n * - sm: Small size (h-8)\n * - lg: Large size (h-12)\n * - icon: Square icon button (10x10)\n * \n * Features:\n * - Full keyboard accessibility\n * - Focus ring for keyboard navigation\n * - Disabled state handling\n * - Smooth transitions\n * - Responsive to all button HTML attributes\n * \n * Usage examples:\n * <Button>Click me</Button>\n * <Button variant=\"destructive\">Delete</Button>\n * <Button size=\"sm\" variant=\"outline\">Cancel</Button>\n * <Button size=\"icon\" variant=\"ghost\"><Icon /></Button>\n * \n * Features:\n * - Comprehensive variant system with brand-consistent styling\n * - Professional color schemes aligned with design guidelines\n * - Loading states with integrated spinner animations\n * - Button group functionality for complex interfaces\n * - Full icon support with flexible positioning options\n */\n\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\n/**\n * Button variant configuration using class-variance-authority\n * \n * Base classes apply to all buttons, then variant-specific\n * classes are added based on the variant and size props.\n */\nconst buttonVariants = cva(\n  // Enhanced base classes with premium feel\n  'relative inline-flex items-center justify-center font-medium transition-all duration-200 ease-out focus-visible:outline-none disabled:opacity-50 disabled:cursor-not-allowed disabled:pointer-events-none transform-gpu active:scale-[0.98]',\n  {\n    variants: {\n      variant: {\n        default: [\n          'bg-primary text-primary-foreground shadow-sm',\n          'hover:bg-primary-hover hover:shadow-md hover:scale-[1.02]',\n          'focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2',\n          'active:bg-primary-active',\n          'transition-all duration-200',\n        ].join(' '),\n        destructive: [\n          'bg-destructive text-destructive-foreground shadow-sm',\n          'hover:bg-destructive/90 hover:shadow-md hover:scale-[1.02]',\n          'focus-visible:ring-2 focus-visible:ring-destructive/50 focus-visible:ring-offset-2',\n          'active:bg-destructive/80',\n        ].join(' '),\n        outline: [\n          'border border-input bg-background/50 backdrop-blur-sm',\n          'hover:bg-accent hover:text-accent-foreground hover:border-accent',\n          'focus-visible:ring-2 focus-visible:ring-accent/50 focus-visible:ring-offset-2',\n          'transition-all duration-200',\n        ].join(' '),\n        secondary: [\n          'bg-secondary text-secondary-foreground',\n          'hover:bg-secondary/80 hover:shadow-sm',\n          'focus-visible:ring-2 focus-visible:ring-secondary/50 focus-visible:ring-offset-2',\n        ].join(' '),\n        ghost: [\n          'hover:bg-accent hover:text-accent-foreground',\n          'focus-visible:ring-2 focus-visible:ring-accent/50 focus-visible:ring-offset-2',\n          'data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n        ].join(' '),\n        link: [\n          'text-primary underline-offset-4 hover:underline',\n          'focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2',\n          'hover:text-primary-hover',\n        ].join(' '),\n        premium: [\n          'bg-gradient-to-r from-primary to-primary-hover text-primary-foreground',\n          'shadow-md hover:shadow-lg hover:scale-[1.02]',\n          'focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2',\n          'before:absolute before:inset-0 before:bg-white/20 before:opacity-0',\n          'hover:before:opacity-100 before:transition-opacity before:duration-200',\n          'overflow-hidden',\n        ].join(' '),\n      },\n      size: {\n        default: 'h-10 rounded-lg px-4 py-2 text-sm',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-12 rounded-lg px-8 text-base',\n        xl: 'h-14 rounded-xl px-10 text-lg',\n        icon: 'h-10 w-10 rounded-lg',\n        'icon-sm': 'h-8 w-8 rounded-md',\n        'icon-lg': 'h-12 w-12 rounded-lg',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\n/**\n * Button component props\n * \n * Extends standard HTML button attributes with variant props\n * @property variant - Visual style variant\n * @property size - Button size preset\n * @property asChild - Whether to render as child component (for composition)\n */\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  loading?: boolean;\n  loadingText?: string;\n}\n\n/**\n * Button Component\n * \n * Forward ref component for proper ref handling in forms\n * and other use cases requiring direct DOM access.\n */\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ \n    className, \n    variant, \n    size, \n    asChild = false, \n    loading = false,\n    loadingText,\n    children,\n    disabled,\n    onClick,\n    ...props \n  }, ref) => {\n    const [ripples, setRipples] = React.useState<Array<{ x: number; y: number; id: number }>>([]);\n    \n    const handleClick = React.useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      if (loading || disabled) return;\n      \n      // Add ripple effect\n      const button = e.currentTarget;\n      const rect = button.getBoundingClientRect();\n      const rippleX = e.clientX - rect.left;\n      const rippleY = e.clientY - rect.top;\n      const rippleId = Date.now();\n      \n      setRipples(prev => [...prev, { x: rippleX, y: rippleY, id: rippleId }]);\n      \n      // Remove ripple after animation\n      setTimeout(() => {\n        setRipples(prev => prev.filter(ripple => ripple.id !== rippleId));\n      }, 600);\n      \n      // Call original onClick\n      onClick?.(e);\n    }, [loading, disabled, onClick]);\n    \n    return (\n      <button\n        className={cn(\n          buttonVariants({ variant, size, className }),\n          'relative overflow-hidden',\n          loading && 'cursor-wait'\n        )}\n        ref={ref}\n        disabled={loading || disabled}\n        onClick={handleClick}\n        {...props}\n      >\n        {/* Ripple effects */}\n        {ripples.map(ripple => (\n          <span\n            key={ripple.id}\n            className=\"absolute pointer-events-none\"\n            style={{\n              left: ripple.x,\n              top: ripple.y,\n              transform: 'translate(-50%, -50%)',\n            }}\n          >\n            <span className=\"block animate-ripple rounded-full bg-white/30 dark:bg-white/20\" \n              style={{\n                width: 0,\n                height: 0,\n                animation: 'ripple-expand 0.6s ease-out forwards',\n              }}\n            />\n          </span>\n        ))}\n        \n        {/* Loading spinner */}\n        {loading && (\n          <span className=\"absolute inset-0 flex items-center justify-center bg-inherit\">\n            <svg\n              className=\"animate-spin h-4 w-4\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              />\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              />\n            </svg>\n          </span>\n        )}\n        \n        {/* Button content */}\n        <span className={cn(\n          'relative z-10 inline-flex items-center',\n          loading && 'opacity-0'\n        )}>\n          {children}\n        </span>\n        \n        {/* Loading text */}\n        {loading && loadingText && (\n          <span className=\"absolute inset-0 flex items-center justify-center\">\n            <span className=\"ml-6\">{loadingText}</span>\n          </span>\n        )}\n      </button>\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };","/**\n * Avatar Component\n * \n * Reusable avatar component that displays agent avatars with fallback to default icons.\n * Supports different sizes, shapes, and fallback icons for various use cases.\n * \n * Features:\n * - Image loading with error handling\n * - Multiple size variants\n * - Customizable fallback icons\n * - Consistent styling across the application\n * - Accessibility support\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot, User } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport type { Agent } from '@/types';\n\nexport interface AvatarProps {\n  /** Agent/project data containing avatar information */\n  agent?: Agent | null;\n  /** Avatar image URL (alternative to agent prop) */\n  src?: string;\n  /** Alt text for the image */\n  alt?: string;\n  /** Size variant */\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  /** Shape variant */\n  shape?: 'circle' | 'rounded' | 'square';\n  /** Fallback icon type */\n  fallback?: 'bot' | 'user' | 'none';\n  /** Whether this avatar represents a selected/active state */\n  isSelected?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Avatar size configurations\n */\nconst sizeVariants = {\n  xs: {\n    container: 'w-4 h-4',\n    icon: 'w-2 h-2'\n  },\n  sm: {\n    container: 'w-6 h-6', \n    icon: 'w-3 h-3'\n  },\n  md: {\n    container: 'w-8 h-8',\n    icon: 'w-4 h-4'\n  },\n  lg: {\n    container: 'w-10 h-10',\n    icon: 'w-5 h-5'\n  },\n  xl: {\n    container: 'w-12 h-12',\n    icon: 'w-6 h-6'\n  }\n};\n\n/**\n * Avatar shape configurations\n */\nconst shapeVariants = {\n  circle: 'rounded-full',\n  rounded: 'rounded-lg', \n  square: 'rounded-none'\n};\n\n/**\n * Avatar Component\n * \n * Displays agent avatar with proper fallbacks and error handling.\n * \n * @param agent - Agent object containing avatar settings\n * @param src - Direct image URL (overrides agent avatar)\n * @param alt - Alt text for accessibility\n * @param size - Size variant (xs, sm, md, lg, xl)\n * @param shape - Shape variant (circle, rounded, square)\n * @param fallback - Fallback icon type\n * @param isSelected - Whether avatar represents selected state\n * @param className - Additional CSS classes\n */\nexport const Avatar: React.FC<AvatarProps> = ({\n  agent,\n  src,\n  alt,\n  size = 'md',\n  shape = 'circle',\n  fallback = 'bot',\n  isSelected = false,\n  className\n}) => {\n  const [imageError, setImageError] = React.useState(false);\n  \n  // Determine the avatar URL from props or agent settings\n  const avatarUrl = src || agent?.settings?.chatbot_avatar;\n  \n  // Generate alt text if not provided\n  const altText = alt || (agent?.project_name ? `${agent.project_name} avatar` : 'Avatar');\n  \n  // Get size and shape classes\n  const sizeClasses = sizeVariants[size];\n  const shapeClass = shapeVariants[shape];\n  \n  // Determine background color based on state\n  const backgroundClass = isSelected \n    ? 'bg-primary shadow-md' \n    : 'bg-muted hover:bg-accent transition-all duration-200';\n  \n  // Handle image load error\n  const handleImageError = () => {\n    setImageError(true);\n  };\n  \n  // Reset error state when avatar URL changes\n  React.useEffect(() => {\n    setImageError(false);\n  }, [avatarUrl]);\n  \n  // Render fallback icon\n  const renderFallbackIcon = () => {\n    if (fallback === 'none') return null;\n    \n    const iconClass = cn(\n      sizeClasses.icon,\n      isSelected ? 'text-primary-foreground' : 'text-muted-foreground'\n    );\n    \n    switch (fallback) {\n      case 'user':\n        return <User className={iconClass} />;\n      case 'bot':\n      default:\n        return <Bot className={iconClass} />;\n    }\n  };\n  \n  return (\n    <div className={cn(\n      'relative flex items-center justify-center flex-shrink-0 overflow-hidden',\n      'ring-2 ring-transparent',\n      'hover:ring-primary/20 hover:scale-105',\n      'transition-all duration-200',\n      isSelected && 'ring-primary ring-offset-2 ring-offset-background',\n      sizeClasses.container,\n      shapeClass,\n      backgroundClass,\n      className\n    )}>\n      {avatarUrl && !imageError ? (\n        <img\n          src={avatarUrl}\n          alt={altText}\n          className=\"w-full h-full object-cover\"\n          onError={handleImageError}\n          loading=\"lazy\"\n        />\n      ) : (\n        renderFallbackIcon()\n      )}\n      {/* Online indicator (optional) */}\n      {isSelected && (\n        <div className=\"absolute -bottom-0.5 -right-0.5 h-3 w-3 rounded-full bg-success border-2 border-background\" />\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Avatar Component\n * \n * Specialized avatar component for agent/project displays.\n * Uses 'bot' fallback by default and extracts name for alt text.\n * \n * @param agent - Agent object\n * @param size - Size variant\n * @param isSelected - Selection state\n * @param className - Additional classes\n */\nexport const AgentAvatar: React.FC<{\n  agent?: Agent | null;\n  size?: AvatarProps['size'];\n  isSelected?: boolean;\n  className?: string;\n}> = ({ agent, size = 'md', isSelected = false, className }) => {\n  return (\n    <Avatar\n      agent={agent}\n      size={size}\n      shape=\"circle\"\n      fallback=\"bot\"\n      isSelected={isSelected}\n      alt={agent?.project_name ? `${agent.project_name} avatar` : 'Agent avatar'}\n      className={className}\n    />\n  );\n};\n\n/**\n * User Avatar Component\n * \n * Specialized avatar component for user displays.\n * Uses 'user' fallback by default.\n * \n * @param src - Avatar image URL\n * @param size - Size variant  \n * @param className - Additional classes\n */\nexport const UserAvatar: React.FC<{\n  src?: string;\n  size?: AvatarProps['size'];\n  className?: string;\n}> = ({ src, size = 'md', className }) => {\n  return (\n    <Avatar\n      src={src}\n      size={size}\n      shape=\"circle\"\n      fallback=\"user\"\n      alt=\"User avatar\"\n      className={className}\n    />\n  );\n};","/**\n * Message Details Component\n * \n * Displays additional metadata and information about a message\n * that's not shown in the main UI. Includes user ID, conversation ID,\n * metadata, and timestamps.\n * \n * Features:\n * - Collapsible details section\n * - Formatted metadata display\n * - Copy functionality for technical details\n * - Responsive layout\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { ChevronDown, ChevronUp, Copy, Info } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { cn, copyToClipboard } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport type { MessageDetails as MessageDetailsType } from '@/types';\n\ninterface MessageDetailsProps {\n  /** The message details to display */\n  details?: MessageDetailsType;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Format a key name to be more readable\n */\nconst formatKey = (key: string): string => {\n  return key\n    .split('_')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n};\n\n/**\n * Format a value for display\n */\nconst formatValue = (value: any): string => {\n  if (value === null || value === undefined) {\n    return 'N/A';\n  }\n  if (typeof value === 'object') {\n    return JSON.stringify(value, null, 2);\n  }\n  return String(value);\n};\n\nexport const MessageDetails: React.FC<MessageDetailsProps> = ({ details, className }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  if (!details) {\n    return null;\n  }\n\n  const handleCopyAll = async () => {\n    const detailsText = JSON.stringify(details, null, 2);\n    const success = await copyToClipboard(detailsText);\n    if (success) {\n      toast.success('Details copied to clipboard');\n    }\n  };\n\n  const handleCopyValue = async (value: string) => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      toast.success('Value copied to clipboard');\n    }\n  };\n\n  return (\n    <div className={cn('mt-2', className)}>\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"flex items-center gap-1 text-xs text-muted-foreground hover:text-foreground transition-colors\"\n      >\n        <Info className=\"w-3 h-3\" />\n        <span>More Details</span>\n        {isExpanded ? (\n          <ChevronUp className=\"w-3 h-3\" />\n        ) : (\n          <ChevronDown className=\"w-3 h-3\" />\n        )}\n      </button>\n\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"mt-2 p-3 bg-accent rounded-lg border border-border\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className=\"text-xs font-semibold text-foreground\">Message Details</h4>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={handleCopyAll}\n                  className=\"h-6 px-2 text-xs\"\n                >\n                  <Copy className=\"w-3 h-3 mr-1\" />\n                  Copy All\n                </Button>\n              </div>\n\n              <div className=\"space-y-2\">\n                {/* Basic Details */}\n                {details.user_id !== undefined && (\n                  <DetailRow\n                    label=\"User ID\"\n                    value={String(details.user_id)}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n                \n                {details.conversation_id !== undefined && (\n                  <DetailRow\n                    label=\"Conversation ID\"\n                    value={String(details.conversation_id)}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n                \n                {details.updated_at && (\n                  <DetailRow\n                    label=\"Updated At\"\n                    value={new Date(details.updated_at).toLocaleString()}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n\n                {/* Metadata Section */}\n                {details.metadata && (\n                  <div className=\"mt-3 pt-2 border-t border-border\">\n                    <h5 className=\"text-xs font-semibold text-muted-foreground mb-2\">Metadata</h5>\n                    \n                    {details.metadata.user_ip && (\n                      <DetailRow\n                        label=\"User IP\"\n                        value={details.metadata.user_ip}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                    \n                    {details.metadata.user_agent && (\n                      <DetailRow\n                        label=\"User Agent\"\n                        value={details.metadata.user_agent}\n                        onCopy={handleCopyValue}\n                        truncate\n                      />\n                    )}\n                    \n                    {details.metadata.external_id && (\n                      <DetailRow\n                        label=\"External ID\"\n                        value={details.metadata.external_id}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                    \n                    {details.metadata.request_source && (\n                      <DetailRow\n                        label=\"Request Source\"\n                        value={details.metadata.request_source}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\ninterface DetailRowProps {\n  label: string;\n  value: string;\n  onCopy: (value: string) => void;\n  truncate?: boolean;\n}\n\nconst DetailRow: React.FC<DetailRowProps> = ({ label, value, onCopy, truncate }) => {\n  return (\n    <div className=\"flex items-start justify-between gap-2 text-xs\">\n      <span className=\"text-muted-foreground font-medium whitespace-nowrap\">{label}:</span>\n      <div className=\"flex items-center gap-1 flex-1 min-w-0\">\n        <span \n          className={cn(\n            \"text-foreground break-all\",\n            truncate && \"truncate\"\n          )}\n          title={truncate ? value : undefined}\n        >\n          {value}\n        </span>\n        <button\n          onClick={() => onCopy(value)}\n          className=\"p-1 text-muted-foreground hover:text-foreground transition-colors flex-shrink-0\"\n          title=\"Copy value\"\n        >\n          <Copy className=\"w-3 h-3\" />\n        </button>\n      </div>\n    </div>\n  );\n};","/**\n * Message Component\n * \n * Displays individual chat messages with rich formatting support.\n * \n * Features:\n * - Markdown rendering with GitHub Flavored Markdown\n * - Syntax highlighting for code blocks\n * - Copy functionality for code and messages\n * - User feedback (thumbs up/down)\n * - Citation display and interaction\n * - Animated entrance and streaming cursor\n * - Different layouts for user vs assistant messages\n * \n * Customization:\n * - Modify avatar styles in the component\n * - Adjust markdown prose styles\n * - Customize code block themes (currently using oneDark)\n * - Change animation settings\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { motion } from 'framer-motion';\nimport { \n  Bot, \n  User, \n  Copy, \n  ThumbsUp, \n  ThumbsDown, \n  RotateCw,\n  ExternalLink \n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { MessageProps, Citation, ChatMessage } from '@/types';\nimport { cn, copyToClipboard, formatTimestamp } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { AgentAvatar, UserAvatar } from '@/components/ui/avatar';\nimport { CitationList } from './CitationList';\nimport { MessageDetails } from './MessageDetails';\nimport { useMessageStore } from '@/store/messages';\nimport { useConversationStore } from '@/store/conversations';\n\ninterface CodeBlockProps {\n  /** Programming language for syntax highlighting */\n  language: string;\n  /** Code content to display */\n  value: string;\n}\n\n/**\n * CodeBlock Component\n * \n * Renders code with syntax highlighting and a copy button.\n * Uses react-syntax-highlighter with the oneDark theme.\n * Copy button appears on hover.\n */\nconst CodeBlock: React.FC<CodeBlockProps> = ({ language, value }) => {\n  const [copied, setCopied] = useState(false);\n  \n  const handleCopy = async () => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      setCopied(true);\n      toast.success('Code copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    }\n  };\n\n  return (\n    <div className=\"relative group\">\n      <div className=\"absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          onClick={handleCopy}\n          className=\"h-6 px-2 text-xs bg-foreground text-background hover:bg-foreground/90\"\n        >\n          {copied ? 'Copied!' : 'Copy'}\n        </Button>\n      </div>\n      <SyntaxHighlighter\n        language={language}\n        style={oneDark}\n        customStyle={{\n          margin: 0,\n          borderRadius: '0.5rem',\n          fontSize: '0.875rem',\n        }}\n      >\n        {value}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\n/**\n * StreamingCursor Component\n * \n * Animated blinking cursor shown at the end of streaming messages\n * to indicate the AI is still generating content\n */\nconst StreamingCursor: React.FC = () => (\n  <span className=\"inline-block w-0.5 h-4 bg-foreground animate-blink ml-0.5 align-middle\" />\n);\n\ninterface MessageContentProps {\n  /** Markdown content to render */\n  content: string;\n  /** Whether the message is currently being streamed */\n  isStreaming?: boolean;\n}\n\n/**\n * MessageContent Component\n * \n * Renders message content with full markdown support including:\n * - Headers, lists, tables (via GFM)\n * - Inline and block code with syntax highlighting\n * - Links that open in new tabs\n * - Streaming cursor when content is being generated\n */\nconst MessageContent: React.FC<MessageContentProps> = ({ content, isStreaming }) => {\n  // Remove <CONTEXT> and </CONTEXT> tags from the content\n  const cleanedContent = content.replace(/<CONTEXT>|<\\/CONTEXT>/g, '').trim();\n  \n  return (\n    <div className=\"prose prose-sm max-w-none text-foreground\">\n      <ReactMarkdown\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || '');\n            const isInline = !match;\n            return !isInline && match ? (\n              <CodeBlock\n                language={match[1]}\n                value={String(children).replace(/\\n$/, '')}\n                {...props}\n              />\n            ) : (\n              <code className=\"px-1 py-0.5 rounded bg-muted text-sm font-medium\" {...props}>\n                {children}\n              </code>\n            );\n          },\n          a({ href, children }) {\n            return (\n              <a\n                href={href}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-brand-600 hover:text-brand-700 no-underline hover:underline inline-flex items-center gap-1\"\n              >\n                {children}\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            );\n          },\n        }}\n      >\n        {cleanedContent}\n      </ReactMarkdown>\n      {isStreaming && <StreamingCursor />}\n    </div>\n  );\n};\n\ninterface MessageActionsProps {\n  /** The message object containing content and metadata */\n  message: ChatMessage;\n  /** Handler for user feedback */\n  onFeedback?: (feedback: 'like' | 'dislike') => void;\n  /** Whether this is the last assistant message */\n  isLastAssistant?: boolean;\n}\n\n/**\n * MessageActions Component\n * \n * Action buttons for assistant messages:\n * - Copy message content\n * - Thumbs up/down feedback\n * - Regenerate response (placeholder)\n * \n * Only visible on hover for cleaner UI\n */\nconst MessageActions: React.FC<MessageActionsProps> = ({ message, onFeedback, isLastAssistant = false }) => {\n  const [feedback, setFeedback] = useState<'like' | 'dislike' | null>(\n    message.feedback || null\n  );\n\n  const handleCopy = async () => {\n    const success = await copyToClipboard(message.content);\n    if (success) {\n      toast.success('Message copied to clipboard');\n    }\n  };\n\n  const handleFeedback = (type: 'like' | 'dislike') => {\n    setFeedback(type);\n    onFeedback?.(type);\n    toast.success('Thanks for your feedback!');\n  };\n\n  const regenerateLastResponse = useMessageStore(state => state.regenerateLastResponse);\n  \n  const handleRegenerate = async () => {\n    try {\n      await regenerateLastResponse();\n    } catch (error) {\n      // Error handling is done in the store, so we don't need to do anything here\n      console.error('Failed to regenerate response:', error);\n    }\n  };\n\n  return (\n    <div className=\"mt-3 flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleCopy}\n        className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n        title=\"Copy message\"\n      >\n        <Copy className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('like')}\n        className={cn(\n          'h-8 w-8 text-muted-foreground hover:text-foreground',\n          feedback === 'like' && 'text-success hover:text-success/90'\n        )}\n        title=\"Good response\"\n      >\n        <ThumbsUp className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('dislike')}\n        className={cn(\n          'h-8 w-8 text-muted-foreground hover:text-foreground',\n          feedback === 'dislike' && 'text-destructive hover:text-destructive/90'\n        )}\n        title=\"Bad response\"\n      >\n        <ThumbsDown className=\"h-4 w-4\" />\n      </Button>\n      \n      {isLastAssistant && (\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={handleRegenerate}\n          className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n          title=\"Regenerate response\"\n        >\n          <RotateCw className=\"h-4 w-4\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\n/**\n * Message Component - Main Export\n * \n * Renders a complete message with avatar, content, citations, and actions.\n * \n * Layout:\n * - User messages: White background, user avatar, plain text\n * - Assistant messages: Gray background, bot avatar, markdown content\n * \n * Features:\n * - Smooth entrance animation with Framer Motion\n * - Hover effects for action visibility\n * - Status indicators (sending, error)\n * - Timestamp display\n * - Citation list integration\n * \n * @param message - The message data to display\n * @param isStreaming - Whether this message is being streamed\n * @param isLast - Whether this is the last message (affects scrolling)\n * @param onCitationClick - Handler for citation interactions\n * @param onFeedback - Handler for user feedback\n * @param className - Additional CSS classes\n */\nexport const Message: React.FC<MessageProps> = ({ \n  message,\n  agent,\n  isStreaming = false, \n  isLast = false,\n  onCitationClick,\n  onPreviewClick,\n  onFeedback,\n  className \n}) => {\n  const isUser = message.role === 'user';\n  \n  // Get messages from the conversation to check if this is the last assistant message\n  const messages = useMessageStore(state => {\n    const conversationStore = useConversationStore.getState();\n    const currentConversation = conversationStore.currentConversation;\n    if (!currentConversation) return [];\n    return state.getMessagesForConversation(currentConversation.id.toString());\n  });\n  \n  // Check if this is the last assistant message\n  const isLastAssistant = !isUser && messages.length > 0 && \n    messages[messages.length - 1].role === 'assistant' &&\n    messages[messages.length - 1].id === message.id;\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n      className={cn(\n        'group relative px-4 py-6 transition-colors',\n        isUser ? 'bg-background' : 'bg-muted border-y border-border',\n        'hover:bg-opacity-80',\n        className\n      )}\n    >\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"flex-shrink-0\">\n          {isUser ? (\n            <UserAvatar \n              size=\"md\" \n              className=\"bg-secondary\"\n            />\n          ) : (\n            <AgentAvatar \n              agent={agent}\n              size=\"md\"\n              className=\"bg-background border border-border\"\n            />\n          )}\n        </div>\n        \n        {/* Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          {/* Message Status */}\n          {message.status && message.status !== 'sent' && (\n            <div className=\"mb-2 text-xs text-muted-foreground\">\n              {message.status === 'sending' && 'Sending...'}\n              {message.status === 'error' && (\n                <span className=\"text-red-500\">Failed to send</span>\n              )}\n            </div>\n          )}\n          \n          {/* Message Content */}\n          {isUser ? (\n            <p className=\"text-foreground whitespace-pre-wrap\">{message.content}</p>\n          ) : (\n            <MessageContent \n              content={message.content} \n              isStreaming={isStreaming}\n            />\n          )}\n          \n          {/* Citations - Hidden in widget mode */}\n          {/* {message.citations && message.citations.length > 0 && (\n            <CitationList \n              citations={message.citations}\n              onCitationClick={onCitationClick}\n              onPreviewClick={onPreviewClick}\n            />\n          )} */}\n          \n          {/* Timestamp */}\n          <div className=\"mt-2 text-xs text-muted-foreground\">\n            {formatTimestamp(message.timestamp)}\n          </div>\n          \n          {/* Message Details (hidden by default) */}\n          <MessageDetails details={message.details} />\n          \n          {/* Actions */}\n          {!isUser && !isStreaming && (\n            <MessageActions \n              message={message}\n              onFeedback={onFeedback}\n              isLastAssistant={isLastAssistant}\n            />\n          )}\n        </div>\n      </div>\n    </motion.div>\n  );\n};","/**\n * Demo Mode Context\n * \n * Provides runtime demo mode status throughout the app\n */\n\n'use client';\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\ninterface DemoModeContextType {\n  isRuntimeDemoMode: boolean;\n  deploymentMode: 'demo' | 'production' | null;\n  isInitialized: boolean;\n  isFreeTrialMode: boolean;\n}\n\nconst DemoModeContext = createContext<DemoModeContextType>({\n  isRuntimeDemoMode: false,\n  deploymentMode: null,\n  isInitialized: false,\n  isFreeTrialMode: false,\n});\n\nexport const useDemoModeContext = () => {\n  const context = useContext(DemoModeContext);\n  if (!context) {\n    throw new Error('useDemoModeContext must be used within DemoModeProvider');\n  }\n  return context;\n};\n\ninterface DemoModeContextProviderProps {\n  children: React.ReactNode;\n}\n\nexport function DemoModeContextProvider({ children }: DemoModeContextProviderProps) {\n  const [deploymentMode, setDeploymentMode] = useState<'demo' | 'production' | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isFreeTrialMode, setIsFreeTrialMode] = useState(false);\n\n  useEffect(() => {\n    // Get the runtime deployment mode from localStorage\n    const mode = localStorage.getItem('customgpt.deploymentMode') as 'demo' | 'production' | null;\n    const freeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n    setDeploymentMode(mode);\n    setIsFreeTrialMode(freeTrialFlag === 'true');\n    setIsInitialized(true);\n\n    // Listen for storage changes\n    const handleStorageChange = () => {\n      const newMode = localStorage.getItem('customgpt.deploymentMode') as 'demo' | 'production' | null;\n      const newFreeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n      setDeploymentMode(newMode);\n      setIsFreeTrialMode(newFreeTrialFlag === 'true');\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    \n    // Also listen for custom events for same-window updates\n    window.addEventListener('deploymentModeChanged', handleStorageChange);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('deploymentModeChanged', handleStorageChange);\n    };\n  }, []);\n\n  const value: DemoModeContextType = {\n    isRuntimeDemoMode: deploymentMode === 'demo',\n    deploymentMode,\n    isInitialized,\n    isFreeTrialMode,\n  };\n\n  return (\n    <DemoModeContext.Provider value={value}>\n      {children}\n    </DemoModeContext.Provider>\n  );\n}","/**\n * Loading Components\n * \n * Reusable loading indicators for consistent loading states across the app.\n * Includes spinner, skeleton loaders, and full-page loading states.\n */\n\nimport React from 'react';\nimport { cn } from '@/lib/utils';\nimport { Loader2 } from 'lucide-react';\n\ninterface SpinnerProps {\n  /** Size of the spinner */\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  /** Additional CSS classes */\n  className?: string;\n  /** Label for accessibility */\n  label?: string;\n}\n\n/**\n * Spinner Component\n * \n * Animated spinning loader for inline and overlay loading states\n */\nexport const Spinner: React.FC<SpinnerProps> = ({ \n  size = 'md', \n  className,\n  label = 'Loading...'\n}) => {\n  const sizeClasses = {\n    sm: 'h-4 w-4',\n    md: 'h-6 w-6',\n    lg: 'h-8 w-8',\n    xl: 'h-12 w-12'\n  };\n\n  return (\n    <div className=\"relative inline-flex\">\n      <Loader2 \n        className={cn(\n          'animate-spin text-primary transition-all duration-200',\n          sizeClasses[size],\n          className\n        )}\n        aria-label={label}\n      />\n      {/* Subtle glow effect */}\n      <div className={cn(\n        'absolute inset-0 animate-pulse rounded-full bg-primary/20 blur-xl',\n        sizeClasses[size]\n      )} />\n    </div>\n  );\n};\n\ninterface SkeletonProps {\n  /** Additional CSS classes */\n  className?: string;\n  /** Whether to animate the skeleton */\n  animate?: boolean;\n}\n\n/**\n * Skeleton Component\n * \n * Placeholder loading state for content\n */\nexport const Skeleton: React.FC<SkeletonProps> = ({ \n  className,\n  animate = true\n}) => {\n  return (\n    <div\n      className={cn(\n        'relative overflow-hidden rounded-lg bg-muted',\n        animate && 'shimmer',\n        className\n      )}\n    >\n      {animate && (\n        <div className=\"absolute inset-0 -translate-x-full animate-[shimmer_2s_infinite] bg-gradient-to-r from-transparent via-white/10 to-transparent\" />\n      )}\n    </div>\n  );\n};\n\ninterface LoadingDotsProps {\n  /** Size of the dots */\n  size?: 'sm' | 'md' | 'lg';\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * LoadingDots Component\n * \n * Three animated dots for typing/processing indicators\n */\nexport const LoadingDots: React.FC<LoadingDotsProps> = ({ \n  size = 'md',\n  className \n}) => {\n  const sizeClasses = {\n    sm: 'h-1.5 w-1.5',\n    md: 'h-2 w-2',\n    lg: 'h-2.5 w-2.5'\n  };\n\n  return (\n    <div className={cn('flex items-center space-x-1.5', className)}>\n      {[0, 1, 2].map((index) => (\n        <div\n          key={index}\n          className={cn(\n            'rounded-full bg-primary/60',\n            'animate-[pulse_1.4s_ease-in-out_infinite]',\n            sizeClasses[size]\n          )}\n          style={{\n            animationDelay: `${index * 0.15}s`,\n            animationFillMode: 'both',\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\ninterface LoadingOverlayProps {\n  /** Whether the overlay is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Whether to blur the background */\n  blur?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * LoadingOverlay Component\n * \n * Full-screen or container overlay with loading indicator\n */\nexport const LoadingOverlay: React.FC<LoadingOverlayProps> = ({ \n  visible,\n  message,\n  blur = true,\n  className\n}) => {\n  if (!visible) return null;\n\n  return (\n    <div className={cn(\n      'absolute inset-0 z-50 flex items-center justify-center',\n      'bg-background/60 transition-all duration-300',\n      blur && 'backdrop-blur-md',\n      'animate-in fade-in-0 duration-200',\n      className\n    )}>\n      <div className={cn(\n        'flex flex-col items-center space-y-4 p-6',\n        'bg-background/90 backdrop-blur-sm',\n        'rounded-xl border border-border/50',\n        'shadow-xl',\n        'animate-in zoom-in-95 duration-300'\n      )}>\n        <Spinner size=\"lg\" />\n        {message && (\n          <p className=\"text-sm text-muted-foreground font-medium\">{message}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface MessageSkeletonProps {\n  /** Whether this represents an assistant message */\n  isAssistant?: boolean;\n  /** Number of lines to show */\n  lines?: number;\n}\n\n/**\n * MessageSkeleton Component\n * \n * Skeleton loader specifically for chat messages\n */\nexport const MessageSkeleton: React.FC<MessageSkeletonProps> = ({ \n  isAssistant = false,\n  lines = 3\n}) => {\n  return (\n    <div className={cn(\n      'flex gap-3 p-4',\n      isAssistant ? 'bg-muted' : 'bg-background'\n    )}>\n      {/* Avatar */}\n      <Skeleton className=\"h-8 w-8 rounded-full flex-shrink-0\" />\n      \n      {/* Message content */}\n      <div className=\"flex-1 space-y-2\">\n        {Array.from({ length: lines }).map((_, i) => (\n          <Skeleton \n            key={i}\n            className={cn(\n              'h-4',\n              i === lines - 1 ? 'w-3/4' : 'w-full'\n            )}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\ninterface ConversationSkeletonProps {\n  /** Number of conversation items to show */\n  count?: number;\n}\n\n/**\n * ConversationSkeleton Component\n * \n * Skeleton loader for conversation list items\n */\nexport const ConversationSkeleton: React.FC<ConversationSkeletonProps> = ({ \n  count = 3 \n}) => {\n  return (\n    <div className=\"space-y-2 p-2\">\n      {Array.from({ length: count }).map((_, i) => (\n        <div key={i} className=\"p-3 rounded-lg\">\n          <Skeleton className=\"h-4 w-3/4 mb-2\" />\n          <Skeleton className=\"h-3 w-1/2\" />\n        </div>\n      ))}\n    </div>\n  );\n};\n\ninterface LoadingButtonProps {\n  /** Whether the button is in loading state */\n  loading: boolean;\n  /** Button content when not loading */\n  children: React.ReactNode;\n  /** Loading text to display */\n  loadingText?: string;\n  /** Additional CSS classes */\n  className?: string;\n  /** Other button props */\n  [key: string]: any;\n}\n\n/**\n * LoadingButton Component\n * \n * Button with integrated loading state\n */\nexport const LoadingButton: React.FC<LoadingButtonProps> = ({ \n  loading,\n  children,\n  loadingText = 'Loading...',\n  className,\n  disabled,\n  ...props\n}) => {\n  return (\n    <button\n      className={cn(\n        'relative',\n        loading && 'cursor-not-allowed opacity-70',\n        className\n      )}\n      disabled={disabled || loading}\n      {...props}\n    >\n      {loading ? (\n        <span className=\"flex items-center justify-center gap-2\">\n          <Spinner size=\"sm\" />\n          <span>{loadingText}</span>\n        </span>\n      ) : (\n        children\n      )}\n    </button>\n  );\n};\n\ninterface ScreenLoadingProps {\n  /** Whether the screen loading is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Optional icon to show with the loading message */\n  icon?: React.ReactNode;\n  /** Background opacity (0-100) */\n  opacity?: number;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * ScreenLoading Component\n * \n * Full-screen loading overlay for page/screen transitions\n * with customizable message and icon\n */\nexport const ScreenLoading: React.FC<ScreenLoadingProps> = ({\n  visible,\n  message = 'Loading...',\n  icon,\n  opacity = 95,\n  className\n}) => {\n  if (!visible) return null;\n\n  return (\n    <div className={cn(\n      'fixed inset-0 z-[100] flex items-center justify-center',\n      'bg-background/90 backdrop-blur-lg',\n      'transition-all duration-500',\n      'animate-in fade-in-0',\n      className\n    )}>\n      <div className={cn(\n        'flex flex-col items-center space-y-6 p-10',\n        'animate-in zoom-in-95 slide-in-from-bottom-4 duration-500'\n      )}>\n        <div className=\"relative\">\n          {icon ? (\n            <div className={cn(\n              'flex items-center justify-center w-20 h-20',\n              'bg-primary/10 rounded-2xl',\n              'shadow-lg shadow-primary/20',\n              'animate-pulse'\n            )}>\n              {icon}\n            </div>\n          ) : (\n            <Spinner size=\"xl\" />\n          )}\n        </div>\n        {message && (\n          <div className=\"text-center space-y-2\">\n            <p className=\"text-lg font-semibold text-foreground\">{message}</p>\n            <LoadingDots size=\"md\" />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface PageLoadingProps {\n  /** Whether the page loading is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Show skeleton content instead of spinner */\n  showSkeleton?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * PageLoading Component\n * \n * In-page loading state for content areas\n * with optional skeleton loading\n */\nexport const PageLoading: React.FC<PageLoadingProps> = ({\n  visible,\n  message = 'Loading page...',\n  showSkeleton = false,\n  className\n}) => {\n  if (!visible) return null;\n\n  if (showSkeleton) {\n    return (\n      <div className={cn('space-y-4 p-6', className)}>\n        <div className=\"space-y-3\">\n          <Skeleton className=\"h-8 w-1/3\" />\n          <Skeleton className=\"h-4 w-2/3\" />\n          <Skeleton className=\"h-4 w-1/2\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <div key={i} className=\"space-y-3\">\n              <Skeleton className=\"h-32 w-full rounded-lg\" />\n              <Skeleton className=\"h-4 w-3/4\" />\n              <Skeleton className=\"h-3 w-1/2\" />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\n      'flex flex-col items-center justify-center p-12',\n      className\n    )}>\n      <Spinner size=\"lg\" />\n      <p className=\"mt-4 text-gray-600\">{message}</p>\n    </div>\n  );\n};","\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 6, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden\",\n        \"rounded-lg px-3.5 py-2\",\n        \"bg-gray-900 dark:bg-gray-100 backdrop-blur-sm\",\n        \"text-xs font-medium text-white dark:text-gray-900\",\n        \"shadow-lg shadow-black/20\",\n        \"border border-gray-800 dark:border-gray-200\",\n        \"animate-in fade-in-0 zoom-in-95\",\n        \"data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95\",\n        \"data-[side=bottom]:slide-in-from-top-2\",\n        \"data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2\",\n        \"data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    >\n      {props.children}\n      <TooltipPrimitive.Arrow \n        className=\"fill-gray-900 dark:fill-gray-100\"\n        width={8}\n        height={4}\n      />\n    </TooltipPrimitive.Content>\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }","'use client';\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport { Mic, MicOff, Loader2 } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n\ninterface SpeechToTextButtonProps {\n  onTranscription: (text: string) => void;\n  onTranscriptionStart?: () => void;\n  onTranscriptionEnd?: () => void;\n  disabled?: boolean;\n  isMobile?: boolean;\n  className?: string;\n}\n\nexport function SpeechToTextButton({ \n  onTranscription, \n  onTranscriptionStart,\n  onTranscriptionEnd,\n  disabled = false, \n  isMobile = false,\n  className \n}: SpeechToTextButtonProps) {\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [recordingDuration, setRecordingDuration] = useState(0);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n  const recordingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const durationIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const stopRecording = useCallback(() => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      // Don't call onTranscriptionEnd here - let processAudio handle it\n      \n      if (recordingTimeoutRef.current) {\n        clearTimeout(recordingTimeoutRef.current);\n        recordingTimeoutRef.current = null;\n      }\n      \n      if (durationIntervalRef.current) {\n        clearInterval(durationIntervalRef.current);\n        durationIntervalRef.current = null;\n      }\n      \n      setRecordingDuration(0);\n    }\n  }, []);\n\n  const startRecording = useCallback(async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      \n      const mimeType = MediaRecorder.isTypeSupported('audio/webm') \n        ? 'audio/webm' \n        : 'audio/mp4';\n      \n      const mediaRecorder = new MediaRecorder(stream, { mimeType });\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = async () => {\n        const audioBlob = new Blob(audioChunksRef.current, { type: mimeType });\n        stream.getTracks().forEach(track => track.stop());\n        \n        // Process the audio\n        await processAudio(audioBlob);\n      };\n\n      mediaRecorder.start();\n      setIsRecording(true);\n      onTranscriptionStart?.();\n      \n      // Start duration timer\n      const startTime = Date.now();\n      durationIntervalRef.current = setInterval(() => {\n        const elapsed = Math.floor((Date.now() - startTime) / 1000);\n        setRecordingDuration(elapsed);\n      }, 100) as any;\n\n      // Auto-stop recording after 30 seconds\n      recordingTimeoutRef.current = setTimeout(() => {\n        stopRecording();\n        toast.info('Recording stopped after 30 seconds');\n      }, 30000);\n\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      toast.error('Unable to access microphone. Please check your permissions.');\n      onTranscriptionEnd?.();\n    }\n  }, [stopRecording, onTranscriptionStart, onTranscriptionEnd]);\n\n  const processAudio = async (audioBlob: Blob) => {\n    setIsProcessing(true);\n\n    try {\n      // Convert blob to base64 for sending\n      const reader = new FileReader();\n      reader.readAsDataURL(audioBlob);\n      \n      reader.onloadend = async () => {\n        const base64Audio = reader.result as string;\n        const base64Data = base64Audio.split(',')[1];\n\n        // Check for demo mode and add appropriate headers\n        const headers: Record<string, string> = {\n          'Content-Type': 'application/json',\n        };\n        \n        // Add deployment mode header\n        const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n        headers['X-Deployment-Mode'] = deploymentMode;\n        \n        // In demo mode, add OpenAI key from window object if available\n        if (deploymentMode === 'demo' && (window as any).__demoOpenAIKey) {\n          headers['X-OpenAI-API-Key'] = (window as any).__demoOpenAIKey;\n        }\n\n        const response = await fetch('/api/proxy/voice/transcribe', {\n          method: 'POST',\n          headers,\n          body: JSON.stringify({\n            audio: base64Data,\n            mimeType: audioBlob.type,\n          }),\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({ error: 'Transcription failed' }));\n          \n          // Check if it's an OpenAI API key error\n          if (response.status === 500 && errorData.error && errorData.error.includes('OpenAI API key')) {\n            toast.error(errorData.error);\n            throw new Error('OpenAI API key not configured');\n          }\n          \n          throw new Error(errorData.error || 'Transcription failed');\n        }\n\n        const data = await response.json();\n        \n        if (data.text) {\n          onTranscription(data.text);\n          toast.success('Speech transcribed successfully');\n        } else {\n          throw new Error('No transcription received');\n        }\n      };\n\n      reader.onerror = () => {\n        throw new Error('Failed to process audio');\n      };\n\n    } catch (error) {\n      console.error('Transcription error:', error);\n      \n      // Don't show duplicate toast for OpenAI API key error\n      if (error instanceof Error && error.message === 'OpenAI API key not configured') {\n        // Toast already shown above\n      } else if (error instanceof Error && error.message) {\n        toast.error(error.message);\n      } else {\n        toast.error('Failed to transcribe speech. Please try again.');\n      }\n    } finally {\n      setIsProcessing(false);\n      onTranscriptionEnd?.();\n    }\n  };\n\n  const handleClick = () => {\n    if (isRecording) {\n      stopRecording();\n    } else {\n      startRecording();\n    }\n  };\n\n  const isActive = isRecording || isProcessing;\n\n  // Format duration as MM:SS\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button\n            type=\"button\"\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={handleClick}\n            disabled={disabled || isProcessing}\n            className={cn(\n              \"relative text-muted-foreground hover:text-foreground transition-all\",\n              isActive && \"text-red-600 hover:text-red-700\",\n              isRecording && \"animate-pulse bg-red-50 hover:bg-red-100\",\n              className\n            )}\n          >\n            {isProcessing ? (\n              <div className=\"relative\">\n                <Loader2 className={cn(\n                  \"animate-spin\",\n                  isMobile ? \"h-5 w-5\" : \"h-5 w-5\"\n                )} />\n                <span className=\"absolute -bottom-5 left-1/2 -translate-x-1/2 text-[10px] text-muted-foreground whitespace-nowrap\">\n                  Processing...\n                </span>\n              </div>\n            ) : isRecording ? (\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 bg-red-500 rounded-full animate-ping opacity-25\" />\n                <MicOff className={cn(\n                  \"relative z-10\",\n                  isMobile ? \"h-5 w-5\" : \"h-5 w-5\"\n                )} />\n                {/* Recording duration */}\n                {recordingDuration > 0 && (\n                  <span className=\"absolute -bottom-5 left-1/2 -translate-x-1/2 text-[10px] text-red-600 font-medium whitespace-nowrap\">\n                    {formatDuration(recordingDuration)}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <Mic className={cn(isMobile ? \"h-5 w-5\" : \"h-5 w-5\")} />\n            )}\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p>\n            {isProcessing ? 'Processing your speech...' : isRecording ? `Recording... ${formatDuration(recordingDuration)}` : 'Click to start speech-to-text'}\n          </p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}","'use client';\n\nimport { cn } from '@/lib/utils';\n\ninterface AnimatedVoiceIconProps {\n  className?: string;\n  isActive?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nexport function AnimatedVoiceIcon({ \n  className, \n  isActive = false,\n  size = 'md' \n}: AnimatedVoiceIconProps) {\n  const sizeClasses = {\n    sm: 'w-5 h-5',\n    md: 'w-6 h-6',\n    lg: 'w-7 h-7'\n  };\n\n  const barHeights = {\n    sm: ['h-2', 'h-3', 'h-2.5', 'h-3', 'h-2'],\n    md: ['h-3', 'h-4', 'h-3.5', 'h-4', 'h-3'],\n    lg: ['h-3.5', 'h-5', 'h-4.5', 'h-5', 'h-3.5']\n  };\n\n  const bars = size === 'sm' ? barHeights.sm : size === 'md' ? barHeights.md : barHeights.lg;\n\n  return (\n    <div className={cn(\n      'flex items-center justify-center',\n      sizeClasses[size],\n      className\n    )}\n    style={{ gap: '2px' }}>\n      {bars.map((height, index) => (\n        <div\n          key={index}\n          className={cn(\n            'rounded-full transition-all duration-300',\n            height,\n            isActive && 'animate-voice-pulse'\n          )}\n          style={{\n            width: size === 'lg' ? '3px' : size === 'md' ? '2.5px' : '2px',\n            animationDelay: isActive ? `${index * 100}ms` : '0ms',\n            background: isActive \n              ? `linear-gradient(to top, \n                  hsl(${260 + index * 20}, 85%, 55%), \n                  hsl(${320 + index * 20}, 85%, 65%))` \n              : `linear-gradient(to top,\n                  hsl(${260 + index * 15}, 80%, 55%),\n                  hsl(${280 + index * 15}, 80%, 65%))`\n          }}\n        />\n      ))}\n    </div>\n  );\n}","\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-pointer select-none items-center\",\n      \"rounded-md px-3 py-2 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4 transition-transform duration-200 data-[state=open]:rotate-90\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden\",\n      \"rounded-lg border border-gray-200/50 dark:border-gray-800/30\",\n      \"bg-background/95 backdrop-blur-md\",\n      \"p-1.5 text-foreground\",\n      \"shadow-lg shadow-black/10\",\n      \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n      \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n      \"data-[side=bottom]:slide-in-from-top-2\",\n      \"data-[side=left]:slide-in-from-right-2\",\n      \"data-[side=right]:slide-in-from-left-2\",\n      \"data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 6, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden\",\n        \"rounded-lg border border-gray-200/50 dark:border-gray-800/30\",\n        \"bg-background/95 backdrop-blur-md\",\n        \"p-1.5 text-foreground\",\n        \"shadow-lg shadow-black/10\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n        \"data-[side=bottom]:slide-in-from-top-2\",\n        \"data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2\",\n        \"data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer select-none items-center\",\n      \"rounded-md px-3 py-2 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground hover:scale-[0.98]\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      \"active:scale-[0.96]\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer select-none items-center\",\n      \"rounded-md py-2 pl-8 pr-3 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-4 w-4 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-3.5 w-3.5 animate-in zoom-in-0 duration-200\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer select-none items-center\",\n      \"rounded-md py-2 pl-8 pr-3 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-4 w-4 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2.5 w-2.5 fill-current animate-in zoom-in-0 duration-200\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-3 py-2 text-xs font-semibold\",\n      \"text-muted-foreground uppercase tracking-wider\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\n      \"-mx-1.5 my-1.5 h-px\",\n      \"bg-gradient-to-r from-transparent via-gray-200/50 dark:via-gray-800/20 to-transparent\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-[10px] tracking-widest\",\n        \"text-muted-foreground/70\",\n        \"font-medium uppercase\",\n        \"px-1.5 py-0.5 rounded\",\n        \"bg-muted/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}","/**\n * ChatInput Component\n * \n * Rich input field for sending messages and uploading files.\n * \n * Features:\n * - Auto-expanding textarea (up to 200px height)\n * - File upload with drag-and-drop support\n * - Speech-to-text transcription using OpenAI Whisper\n * - File type and size validation\n * - Progress tracking for uploads\n * - Character count display\n * - Keyboard shortcuts (Enter to send, Shift+Enter for newline)\n * - Animated file chips and drag overlay\n * \n * Customization:\n * - Modify CONSTANTS in utils for file limits\n * - Adjust max textarea height (line 144)\n * - Customize accepted file types\n * - Style the drag overlay and file chips\n */\n\n'use client';\n\nimport React, { useState, useRef, useCallback, KeyboardEvent, FormEvent, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Send, \n  Paperclip, \n  X,\n  Upload,\n  AlertCircle,\n  ChevronDown,\n  Settings,\n  Sparkles,\n  Brain,\n  Zap,\n  MessageSquare,\n  User,\n  Bot,\n  SlidersHorizontal\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { InputProps, FileUpload, AgentSettings } from '@/types';\nimport { useDemoModeContext } from '@/contexts/DemoModeContext';\nimport { cn, formatFileSize, getFileIcon, isFileTypeAllowed, generateId, CONSTANTS } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Spinner } from '@/components/ui/loading';\nimport { SpeechToTextButton } from '@/components/voice/SpeechToTextButton';\nimport { AnimatedVoiceIcon } from '@/components/voice/AnimatedVoiceIcon';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n  DropdownMenuLabel,\n} from '@/components/ui/dropdown-menu';\nimport { useAgentStore } from '@/store/agents';\nimport { useChatSettingsStore } from '@/store/chat-settings';\nimport { getClient } from '@/lib/api/client';\n\ninterface FileChipProps {\n  /** File upload object with metadata */\n  file: FileUpload;\n  /** Handler to remove this file */\n  onRemove: () => void;\n}\n\n/**\n * FileChip Component\n * \n * Displays an uploaded or uploading file with:\n * - File icon based on type\n * - Name and size\n * - Upload progress bar\n * - Remove button\n * - Error state indication\n */\nconst FileChip: React.FC<FileChipProps> = ({ file, onRemove }) => {\n  const fileIcon = getFileIcon(file.type);\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"flex items-center gap-2 px-3 py-1.5 bg-muted hover:bg-accent rounded-lg transition-colors\"\n    >\n      <div className=\"text-muted-foreground\">{fileIcon}</div>\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"text-sm font-medium text-foreground truncate\">\n          {file.name}\n        </div>\n        <div className=\"text-xs text-muted-foreground flex items-center gap-2\">\n          <span>{formatFileSize(file.size)}</span>\n          {file.status === 'uploading' && (\n            <>\n              <span>•</span>\n              <span>{file.progress}%</span>\n            </>\n          )}\n          {file.status === 'error' && (\n            <>\n              <span>•</span>\n              <span className=\"text-destructive flex items-center gap-1\">\n                <AlertCircle className=\"w-3 h-3\" />\n                Error\n              </span>\n            </>\n          )}\n        </div>\n      </div>\n      \n      {/* Progress Bar */}\n      {file.status === 'uploading' && (\n        <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-muted rounded-b\">\n          <div \n            className=\"h-full bg-brand-500 rounded-b transition-all duration-300\"\n            style={{ width: `${file.progress}%` }}\n          />\n        </div>\n      )}\n      \n      <button\n        onClick={onRemove}\n        className=\"p-0.5 rounded hover:bg-accent-foreground/20 transition-colors\"\n        disabled={file.status === 'uploading'}\n      >\n        <X className=\"w-3 h-3 text-muted-foreground\" />\n      </button>\n    </motion.div>\n  );\n};\n\n\n/**\n * FileUploadButton Component\n * \n * Hidden file input with visible button trigger.\n * Accepts multiple files based on ACCEPTED_FILE_TYPES.\n */\ninterface FileUploadButtonProps {\n  /** Handler called when files are selected */\n  onUpload: (files: File[]) => void;\n  /** Whether the button is disabled */\n  disabled?: boolean;\n  /** Mobile optimization mode */\n  isMobile?: boolean;\n}\n\nconst FileUploadButton: React.FC<FileUploadButtonProps> = ({ onUpload, disabled, isMobile = false }) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    if (files.length > 0) {\n      onUpload(files);\n      e.target.value = '';\n    }\n  };\n  \n  return (\n    <>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept={CONSTANTS.ACCEPTED_FILE_TYPES.join(',')}\n        onChange={handleChange}\n        className=\"hidden\"\n      />\n      <Button\n        type=\"button\"\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleClick}\n        disabled={disabled}\n        className={cn(\n          \"text-muted-foreground hover:text-foreground relative z-10\",\n          isMobile ? \"h-10 w-10 min-w-[40px]\" : \"h-9 w-9\"\n        )}\n        title=\"Upload files\"\n      >\n        <Paperclip className={cn(isMobile ? \"h-5 w-5\" : \"h-4 w-4\")} />\n      </Button>\n    </>\n  );\n};\n\n// Configuration options\nconst RESPONSE_SOURCES = [\n  { value: 'own_content', label: 'Content', description: 'Uses only your uploaded content', icon: MessageSquare },\n  { value: 'openai_content', label: 'AI + Content', description: 'Combines AI knowledge with your content', icon: Brain },\n  { value: 'default', label: 'Default', description: 'Uses the default agent setting', icon: Settings },\n] as const;\n\nconst CHATBOT_MODELS = [\n  { value: 'gpt-4-o', label: 'GPT-4', description: 'Most capable model', icon: Brain, capabilities: ['optimal-choice', 'advanced-reasoning', 'complex-tasks'] },\n  { value: 'gpt-4-1', label: 'GPT-4.1', description: 'Latest GPT-4 version', icon: Sparkles, capabilities: ['optimal-choice', 'advanced-reasoning', 'complex-tasks'] },\n  { value: 'gpt-4o-mini', label: 'GPT-4 Mini', description: 'Faster, good for most tasks', icon: Zap, capabilities: ['fastest-responses', 'optimal-choice'] },\n  { value: 'gpt-4-1-mini', label: 'GPT-4.1 Mini', description: 'Fast and efficient', icon: Zap, capabilities: ['fastest-responses', 'optimal-choice'] },\n  { value: 'claude-3-sonnet', label: 'Claude 3', description: 'Balanced performance', icon: Brain, capabilities: ['optimal-choice', 'advanced-reasoning'] },\n  { value: 'claude-3.5-sonnet', label: 'Claude 3.5', description: 'Advanced reasoning', icon: Sparkles, capabilities: ['optimal-choice', 'advanced-reasoning', 'complex-tasks'] },\n] as const;\n\nconst COMMON_PERSONAS = [\n  { value: 'professional', label: 'Professional', description: 'Formal responses', icon: Bot },\n  { value: 'friendly', label: 'Friendly', description: 'Conversational tone', icon: User },\n  { value: 'technical', label: 'Technical', description: 'Technical explanations', icon: Brain },\n  { value: 'creative', label: 'Creative', description: 'Imaginative responses', icon: Sparkles },\n  { value: 'educator', label: 'Teacher', description: 'Step-by-step guidance', icon: Bot },\n  { value: 'custom', label: 'Custom', description: 'Your own instructions', icon: Settings },\n] as const;\n\nconst AGENT_CAPABILITIES = [\n  { value: 'fastest-responses', label: 'Fastest', description: 'Quick answers', icon: Zap, enterprise: true },\n  { value: 'optimal-choice', label: 'Optimal', description: 'Balanced', icon: Settings, enterprise: false },\n  { value: 'advanced-reasoning', label: 'Advanced', description: 'Complex tasks', icon: Brain, enterprise: true },\n  { value: 'complex-tasks', label: 'Complex Reasoning', description: 'Highest quality', icon: Sparkles, enterprise: true },\n] as const;\n\n/**\n * ChatInput Component - Main Export\n * \n * Complete chat input with message composition and file upload.\n * \n * Props:\n * @param onSend - Handler called with message content and files\n * @param disabled - Disables input during message sending\n * @param placeholder - Placeholder text for the textarea\n * @param maxLength - Maximum message length (default from CONSTANTS)\n * @param className - Additional CSS classes\n * @param onVoiceClick - Handler for voice mode button click\n * \n * State Management:\n * - input: Current message text\n * - files: Array of uploaded/uploading files\n * - isDragOver: Drag-and-drop state\n * \n * @example\n * <ChatInput \n *   onSend={(message, files) => handleSend(message, files)}\n *   disabled={isLoading}\n *   onVoiceClick={() => setVoiceModalOpen(true)}\n * />\n */\nexport const ChatInput: React.FC<InputProps> = ({ \n  onSend,\n  disabled = false,\n  placeholder = \"Send a message...\",\n  maxLength = CONSTANTS.MAX_MESSAGE_LENGTH,\n  className,\n  onVoiceClick,\n  isMobile = false,\n  mode = 'standalone'\n}) => {\n  const [input, setInput] = useState('');\n  const [files, setFiles] = useState<FileUpload[]>([]);\n  const [isTranscribing, setIsTranscribing] = useState(false);\n  const [isLoadingSettings, setIsLoadingSettings] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \n  // Get free trial mode status\n  const { isFreeTrialMode } = useDemoModeContext();\n  \n  // Get stores\n  const { currentAgent } = useAgentStore();\n  const { getSettings, updateSettings: updateLocalSettings } = useChatSettingsStore();\n  \n  // Get settings for current agent\n  const settings = currentAgent?.id ? getSettings(currentAgent.id) : {\n    response_source: 'own_content',\n    chatbot_model: 'gpt-4-o',\n    custom_persona: 'professional',\n    agent_capability: 'optimal-choice',\n  };\n  \n  const loadAgentSettings = useCallback(async () => {\n    if (!currentAgent?.id) return;\n\n    try {\n      const client = getClient();\n      const response = await client.getAgentSettings(currentAgent.id);\n      \n      if (response?.data) {\n        const loadedSettings = {\n          response_source: response.data.response_source || 'own_content',\n          chatbot_model: response.data.chatbot_model || 'gpt-4-o',\n          custom_persona: response.data.custom_persona || 'professional',\n          agent_capability: response.data.agent_capability || 'optimal-choice',\n        };\n        updateLocalSettings(currentAgent.id, loadedSettings);\n      }\n    } catch (error) {\n      console.error('Failed to load agent settings:', error);\n    }\n  }, [currentAgent?.id, updateLocalSettings]);\n\n  // Load settings when agent changes\n  useEffect(() => {\n    if (currentAgent?.id) {\n      loadAgentSettings();\n    }\n  }, [currentAgent?.id, loadAgentSettings]);\n\n  const updateSetting = async (key: keyof AgentSettings, value: string) => {\n    if (!currentAgent?.id) return;\n\n    setIsLoadingSettings(true);\n    try {\n      const client = getClient();\n      let updates: Partial<AgentSettings> = { [key]: value };\n      \n      // If changing capability, check if current model is still valid\n      if (key === 'agent_capability') {\n        const validModels = CHATBOT_MODELS.filter(m => m.capabilities.includes(value as any));\n        const currentModelValid = validModels.some(m => m.value === settings.chatbot_model);\n        \n        if (!currentModelValid && validModels.length > 0) {\n          // Switch to first available model for new capability\n          updates.chatbot_model = validModels[0].value;\n          toast.info(`Model changed to ${validModels[0].label} for ${AGENT_CAPABILITIES.find(c => c.value === value)?.label} mode`);\n        }\n      }\n      \n      await client.updateAgentSettings(currentAgent.id, updates);\n      updateLocalSettings(currentAgent.id, updates);\n      toast.success('Setting updated successfully');\n    } catch (error) {\n      console.error('Failed to update setting:', error);\n      toast.error('Failed to update setting');\n    } finally {\n      setIsLoadingSettings(false);\n    }\n  };\n  \n  /**\n   * Auto-resize textarea based on content\n   * Grows up to maxHeight (200px) then scrolls\n   */\n  const adjustTextareaHeight = useCallback(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      const scrollHeight = textarea.scrollHeight;\n      const maxHeight = 200; // Max height in pixels - customize as needed\n      textarea.style.height = `${Math.min(scrollHeight, maxHeight)}px`;\n    }\n  }, []);\n  \n  // Handle text input changes\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    if (value.length <= maxLength) {\n      setInput(value);\n      adjustTextareaHeight();\n    }\n  };\n  \n  // Handle key presses\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e as any);\n    }\n  };\n  \n  // Handle form submission\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    \n    if (disabled) return;\n    if (!input.trim() && files.length === 0) return;\n    \n    // Convert FileUpload objects to File objects\n    const fileObjects = files\n      .filter(f => f.status === 'uploaded')\n      .map(f => f.file); // Use the actual File object\n    \n    onSend(input.trim(), fileObjects);\n    \n    // Reset form\n    setInput('');\n    setFiles([]);\n    \n    // Reset textarea height\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n    }\n    \n    // Focus textarea\n    setTimeout(() => {\n      textareaRef.current?.focus();\n    }, 0);\n  };\n  \n  /**\n   * Handle file uploads with validation\n   * Checks file size and type before accepting\n   * Shows toast notifications for validation errors\n   */\n  const handleFileUpload = useCallback((newFiles: File[]) => {\n    const validFiles = newFiles.filter(file => {\n      // Check file size against MAX_FILE_SIZE constant\n      if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n        toast.error(`File \"${file.name}\" is too large. Maximum size is ${formatFileSize(CONSTANTS.MAX_FILE_SIZE)}`);\n        return false;\n      }\n      \n      // Check file type against ACCEPTED_FILE_TYPES\n      if (!isFileTypeAllowed(file.type, CONSTANTS.ACCEPTED_FILE_TYPES)) {\n        toast.error(`File type \"${file.type}\" is not supported`);\n        return false;\n      }\n      \n      return true;\n    });\n    \n    const uploadFiles: FileUpload[] = validFiles.map(file => ({\n      id: generateId(),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      status: 'uploading',\n      progress: 0,\n      file: file, // Store the actual File object\n    }));\n    \n    setFiles(prev => [...prev, ...uploadFiles]);\n    \n    // Simulate file upload\n    uploadFiles.forEach(uploadFile => {\n      simulateUpload(uploadFile);\n    });\n    \n  }, []);\n  \n  /**\n   * Simulate file upload progress\n   * In production, replace with actual upload logic\n   * Updates progress in 100ms intervals\n   */\n  const simulateUpload = (uploadFile: FileUpload) => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 20;\n      \n      if (progress >= 100) {\n        progress = 100;\n        clearInterval(interval);\n        \n        // Mark file as uploaded\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, status: 'uploaded' as const, progress: 100 }\n            : f\n        ));\n      } else {\n        // Update progress\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, progress: Math.round(progress) }\n            : f\n        ));\n      }\n    }, 100);\n  };\n  \n  // Remove file\n  const removeFile = (fileId: string) => {\n    setFiles(prev => prev.filter(f => f.id !== fileId));\n  };\n  \n  /**\n   * Dropzone configuration for drag-and-drop\n   * - Accepts files based on ACCEPTED_FILE_TYPES\n   * - Validates file size\n   * - Shows overlay on drag\n   * - Disabled click/keyboard to use custom button\n   */\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: handleFileUpload,\n    noClick: true, // Use custom button instead\n    noKeyboard: true,\n    accept: CONSTANTS.ACCEPTED_FILE_TYPES.reduce((acc, type) => {\n      acc[type] = [];\n      return acc;\n    }, {} as Record<string, string[]>),\n    maxSize: CONSTANTS.MAX_FILE_SIZE,\n  });\n  \n  const canSend = !disabled && (input.trim() || files.some(f => f.status === 'uploaded'));\n  \n  // Handle speech-to-text transcription\n  const handleTranscription = useCallback((text: string) => {\n    setInput(prevInput => {\n      const newInput = prevInput ? `${prevInput} ${text}` : text;\n      return newInput.length <= maxLength ? newInput : prevInput;\n    });\n    \n    // Adjust textarea height after updating text\n    setTimeout(() => {\n      adjustTextareaHeight();\n    }, 0);\n  }, [maxLength, adjustTextareaHeight]);\n  \n  // Handle transcription start\n  const handleTranscriptionStart = useCallback(() => {\n    setIsTranscribing(true);\n  }, []);\n  \n  // Handle transcription end\n  const handleTranscriptionEnd = useCallback(() => {\n    setIsTranscribing(false);\n  }, []);\n  \n  return (\n    <div \n      {...getRootProps()}\n      className={cn(\n        'relative',\n        isDragActive && 'bg-brand-50',\n        className\n      )}\n    >\n      <input {...getInputProps()} />\n      \n      {/* Drag Overlay */}\n      <AnimatePresence>\n        {isDragActive && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-brand-50 border-2 border-dashed border-brand-300 rounded-lg flex items-center justify-center z-10\"\n          >\n            <div className=\"text-center\">\n              <Upload className=\"w-8 h-8 text-brand-600 mx-auto mb-2\" />\n              <p className=\"text-brand-700 font-medium\">Drop files here to upload</p>\n              <p className=\"text-brand-600 text-sm\">\n                Supports PDF, DOC, TXT, and more\n              </p>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* File Preview */}\n      <AnimatePresence>\n        {files.length > 0 && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"px-4 pt-3 pb-2 flex flex-wrap gap-2\"\n          >\n            {files.map((file) => (\n              <FileChip\n                key={file.id}\n                file={file}\n                onRemove={() => removeFile(file.id)}\n              />\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* Main Input Container */}\n      <div className={cn(\n        \"mx-4 my-3 bg-background border border-border rounded-2xl shadow-sm\",\n        \"focus-within:ring-2 focus-within:ring-brand-500 focus-within:border-transparent transition-all\"\n      )}>\n        {/* Text Input Area */}\n        <form onSubmit={handleSubmit} className=\"relative\">\n          <div className=\"flex items-center p-3 pb-1\">\n            {/* File Upload Button - Hidden in free trial mode and widget/floating modes */}\n            {!isFreeTrialMode && mode === 'standalone' && (\n              <FileUploadButton\n                onUpload={handleFileUpload}\n                disabled={disabled}\n                isMobile={isMobile}\n              />\n            )}\n            \n            {/* Speech to Text Button - Hidden in widget/floating modes */}\n            {mode === 'standalone' && (\n              <SpeechToTextButton\n                onTranscription={handleTranscription}\n                onTranscriptionStart={handleTranscriptionStart}\n                onTranscriptionEnd={handleTranscriptionEnd}\n                disabled={disabled}\n                isMobile={isMobile}\n                className={cn(\n                  \"!h-8 !w-8 !min-w-0 mr-2\",\n                  isMobile && \"!h-9 !w-9\"\n                )}\n              />\n            )}\n            \n            {/* Textarea */}\n            <div className=\"flex-1 relative\">\n              <textarea\n                ref={textareaRef}\n                value={input}\n                onChange={handleInputChange}\n                onKeyDown={handleKeyDown}\n                placeholder={isTranscribing ? '' : placeholder}\n                disabled={disabled}\n                rows={1}\n                className={cn(\n                  'w-full resize-none bg-transparent border-0',\n                  'focus:outline-none focus:ring-0',\n                  'disabled:opacity-50 disabled:cursor-not-allowed',\n                  'placeholder:text-muted-foreground text-foreground',\n                  isMobile \n                    ? 'text-base min-h-[24px] max-h-[120px] placeholder:text-sm' \n                    : 'text-sm min-h-[20px] max-h-[200px]'\n                )}\n                style={{\n                  height: 'auto',\n                  overflowY: input.split('\\n').length > 5 ? 'auto' : 'hidden',\n                }}\n              />\n              \n              {/* Transcribing Animation */}\n              {isTranscribing && !input && (\n                <div className=\"absolute top-0 left-0 right-0 bottom-0 flex items-center pointer-events-none\">\n                  <span className={cn(\n                    \"text-muted-foreground animate-pulse\",\n                    isMobile ? \"text-base\" : \"text-sm\"\n                  )}>\n                    Transcribing\n                    <span className=\"inline-flex\">\n                      <span className=\"animate-bounce\" style={{ animationDelay: '0ms' }}>.</span>\n                      <span className=\"animate-bounce\" style={{ animationDelay: '150ms' }}>.</span>\n                      <span className=\"animate-bounce\" style={{ animationDelay: '300ms' }}>.</span>\n                    </span>\n                  </span>\n                </div>\n              )}\n            </div>\n            \n            {/* Character Count */}\n            {input.length > 0 && (\n              <div className={cn(\n                \"text-xs text-muted-foreground mr-2\",\n                isMobile ? \"text-xs\" : \"text-xs\"\n              )}>\n                {input.length}/{maxLength}\n              </div>\n            )}\n            \n            {/* Action Buttons */}\n            <div className=\"flex items-center gap-1\">\n              {/* Voice Button - Hidden in widget/floating modes */}\n              {onVoiceClick && mode === 'standalone' && (\n                <Button\n                  type=\"button\"\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={onVoiceClick}\n                  disabled={disabled}\n                  className={cn(\n                    'relative group transition-all duration-200',\n                    'bg-gradient-to-br from-purple-500/10 to-pink-500/10',\n                    'hover:from-purple-500/20 hover:to-pink-500/20',\n                    'border border-purple-500/20 hover:border-purple-500/40',\n                    'shadow-sm hover:shadow-md',\n                    isMobile ? 'h-10 w-10' : 'h-9 w-9'\n                  )}\n                  title=\"Voice mode\"\n                >\n                  <div className=\"absolute inset-0 rounded-md bg-gradient-to-br from-purple-600/5 to-pink-600/5 opacity-0 group-hover:opacity-100 transition-opacity\" />\n                  <AnimatedVoiceIcon \n                    size={isMobile ? 'lg' : 'md'} \n                    isActive={false}\n                    className=\"relative z-10\"\n                  />\n                </Button>\n              )}\n              \n              {/* Send Button */}\n              <Button\n                type=\"submit\"\n                size=\"icon\"\n                disabled={!canSend}\n                className={cn(\n                  'transition-all duration-200 group',\n                  'bg-brand-500 hover:bg-brand-600 active:bg-brand-700',\n                  'text-white shadow-sm hover:shadow-md',\n                  'disabled:opacity-50 disabled:cursor-not-allowed',\n                  'disabled:hover:bg-brand-500 disabled:hover:shadow-sm',\n                  isMobile ? 'h-10 w-10' : 'h-9 w-9'\n                )}\n                title={disabled ? 'Sending message...' : 'Send message'}\n              >\n                {disabled ? (\n                  <Spinner size=\"sm\" className=\"text-white\" />\n                ) : (\n                  <Send className={cn(\n                    \"transition-transform duration-200 group-hover:translate-x-0.5 group-hover:-translate-y-0.5\",\n                    isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n                  )} />\n                )}\n              </Button>\n            </div>\n          </div>\n        </form>\n        \n        {/* Settings Toggle Button - Hidden in widget/floating modes */}\n        {mode === 'standalone' && (\n        <div className=\"border-t border-gray-200/50 dark:border-gray-800/30\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowSettings(!showSettings)}\n            className={cn(\n              \"flex items-center gap-2 text-xs\",\n              isMobile ? \"w-full justify-center h-9 px-3 py-2\" : \"w-auto justify-start h-8 px-3 py-1.5\",\n              \"hover:bg-accent/50 transition-all duration-200\",\n              showSettings && \"bg-accent/30\"\n            )}\n            title=\"Customize chat settings including response source, AI model, and persona\"\n          >\n            <SlidersHorizontal className={cn(\n              \"transition-colors\",\n              showSettings ? \"text-brand-500\" : \"text-muted-foreground\",\n              isMobile ? \"h-4 w-4\" : \"h-3.5 w-3.5\"\n            )} />\n            <span className={cn(\n              \"font-medium text-muted-foreground\",\n              showSettings && \"text-brand-600\"\n            )}>Customize Chat</span>\n            <ChevronDown className={cn(\n              \"h-3 w-3 opacity-50 transition-transform duration-200\",\n              showSettings && \"rotate-180\"\n            )} />\n          </Button>\n          \n          {/* Expandable Settings Panel */}\n          <AnimatePresence>\n            {showSettings && (\n              <motion.div\n                initial={{ height: 0, opacity: 0 }}\n                animate={{ height: \"auto\", opacity: 1 }}\n                exit={{ height: 0, opacity: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"overflow-hidden bg-accent/20\"\n              >\n                <div className={cn(\n                  \"flex items-center border-t border-gray-200/50 dark:border-gray-800/30\",\n                  isMobile \n                    ? \"justify-between px-2 pb-2 pt-2\" \n                    : \"gap-2 px-3 pb-2.5 pt-2.5\"\n                )}>\n                  {/* Response Source */}\n                  <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-4 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <MessageSquare className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Source</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"start\" className=\"w-64\">\n            <DropdownMenuLabel className=\"text-xs\">RESPONSE SOURCE</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {RESPONSE_SOURCES.map((source) => {\n              const Icon = source.icon;\n              return (\n                <DropdownMenuItem\n                  key={source.value}\n                  onClick={() => updateSetting('response_source', source.value)}\n                  className=\"flex flex-col items-start py-1.5\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Icon className=\"h-3.5 w-3.5\" />\n                    <span className=\"text-sm font-medium\">{source.label}</span>\n                    {settings.response_source === source.value && (\n                      <span className=\"text-xs text-brand-600\">✓</span>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-5\">{source.description}</span>\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Model Selection */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-2 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <Brain className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Model</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"center\" className=\"w-72\">\n            <DropdownMenuLabel className=\"text-xs\">AI MODEL</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {CHATBOT_MODELS\n              .filter((model) => settings.agent_capability && model.capabilities.includes(settings.agent_capability as any))\n              .map((model) => {\n                const Icon = model.icon;\n                return (\n                  <DropdownMenuItem\n                    key={model.value}\n                    onClick={() => updateSetting('chatbot_model', model.value)}\n                    className=\"flex flex-col items-start py-1.5\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <Icon className=\"h-3.5 w-3.5\" />\n                      <span className=\"text-sm font-medium\">{model.label}</span>\n                      {settings.chatbot_model === model.value && (\n                        <span className=\"text-xs text-brand-600\">✓</span>\n                      )}\n                    </div>\n                    <span className=\"text-xs text-muted-foreground ml-5\">{model.description}</span>\n                  </DropdownMenuItem>\n                );\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Persona Selection */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-2 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <User className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Persona</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"center\" className=\"w-64\">\n            <DropdownMenuLabel className=\"text-xs\">ASSISTANT PERSONA</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {COMMON_PERSONAS.map((persona) => {\n              const Icon = persona.icon;\n              return (\n                <DropdownMenuItem\n                  key={persona.value}\n                  onClick={() => updateSetting('custom_persona', persona.value)}\n                  className=\"flex flex-col items-start py-1.5\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Icon className=\"h-3.5 w-3.5\" />\n                    <span className=\"text-sm font-medium\">{persona.label}</span>\n                    {settings.custom_persona === persona.value && (\n                      <span className=\"text-xs text-brand-600\">✓</span>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-5\">{persona.description}</span>\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Agent Capability */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-2 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <Settings className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Mode</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-72\">\n            <DropdownMenuLabel className=\"text-xs\">RESPONSE MODE</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {AGENT_CAPABILITIES.map((capability) => {\n              const Icon = capability.icon;\n              return (\n                <DropdownMenuItem\n                  key={capability.value}\n                  onClick={() => updateSetting('agent_capability', capability.value)}\n                  className=\"flex flex-col items-start py-1.5\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Icon className=\"h-3.5 w-3.5\" />\n                    <span className=\"text-sm font-medium\">{capability.label}</span>\n                    {capability.enterprise && (\n                      <span className=\"text-[10px] bg-muted text-muted-foreground px-1 py-0.5 rounded\">Enterprise only</span>\n                    )}\n                    {settings.agent_capability === capability.value && (\n                      <span className=\"text-xs text-brand-600\">✓</span>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-5\">{capability.description}</span>\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n        )}\n      </div>\n      \n      {/* Input Hints - Below configuration options */}\n      {!isMobile && (\n        <div className=\"px-4 pb-3 text-xs text-muted-foreground\">\n          <span>Press Enter to send, Shift+Enter for new line</span>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Typing Indicator Component\n * \n * Shows animated typing indicator when AI is generating a response.\n * Provides visual feedback that the system is processing.\n * \n * Features:\n * - Three-dot bouncing animation\n * - AI avatar display\n * - Staggered animation delays\n * - Consistent styling with messages\n * - Subtle bounce effect\n * \n * Animation:\n * - Uses CSS animations defined in globals.css\n * - animate-bounce-subtle class for smooth motion\n * - Staggered delays (0ms, 100ms, 200ms)\n * - Creates wave-like effect\n * \n * Design:\n * - Matches message component layout\n * - Gray background for distinction\n * - Centered in chat container\n * - Responsive max-width\n * \n * Features:\n * - Multiple animation styles for enhanced visual feedback\n * - Contextual status messages for different AI processing states\n * - Progress indicators with time estimation for long operations\n * - Professional avatar customization with brand consistency\n * - Advanced loading patterns including skeleton alternatives\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n/**\n * Props for TypingIndicator\n * \n * @property className - Additional CSS classes for styling\n */\ninterface TypingIndicatorProps {\n  className?: string;\n}\n\n/**\n * Typing Indicator Component\n * \n * Displays animated dots to indicate AI is typing/processing.\n * Maintains visual consistency with message components.\n */\nexport const TypingIndicator: React.FC<TypingIndicatorProps> = ({ className }) => {\n  return (\n    <div className={cn(\n      'px-4 py-6 bg-muted border-y border-border',\n      className\n    )}>\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"w-8 h-8 rounded-full bg-background border border-border flex items-center justify-center flex-shrink-0\">\n          <Bot className=\"w-4 h-4 text-brand-600\" />\n        </div>\n        \n        {/* Typing Animation */}\n        <div className=\"flex items-center gap-1 py-2\">\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle\" />\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle delay-100\" />\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle delay-200\" />\n        </div>\n      </div>\n    </div>\n  );\n};","/**\n * Agent Selector Component\n * \n * Dropdown selector for switching between different CustomGPT agents.\n * Displays the current agent and allows users to select from available agents.\n * \n * Features:\n * - Current agent display with avatar\n * - Dropdown list of all available agents\n * - Agent metadata display (model, status)\n * - Quick settings access per agent\n * - Refresh agents functionality\n * - Loading and error states\n * - Click-outside-to-close behavior\n * - Smooth animations\n * \n * State Management:\n * - Uses agentStore for agent data\n * - Local state for dropdown open/close\n * - Automatic agent fetching on dropdown open\n * \n * UI/UX:\n * - Visual selection indicator (checkmark)\n * - Hover states for better interactivity\n * - Loading skeleton for initial load\n * - Error state with retry option\n * - Empty state guidance\n * \n * Features:\n * - Comprehensive agent selection with real-time filtering\n * - Intelligent agent management with favorites and categories\n * - Quick agent creation workflow integration\n * - Professional avatar display with status indicators\n * - Full keyboard navigation and accessibility support\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Bot, \n  ChevronDown, \n  Settings, \n  RefreshCw,\n  AlertCircle,\n  Check,\n  BarChart3,\n  User\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { useAgentStore } from '@/store';\nimport { Spinner } from '@/components/ui/loading';\nimport { getClient } from '@/lib/api/client';\n\n/**\n * Props for AgentSelector component\n * \n * @property className - Additional CSS classes\n * @property showSettings - Whether to show settings button for each agent\n * @property onSettingsClick - Callback when settings button is clicked\n */\ninterface AgentSelectorProps {\n  className?: string;\n  showSettings?: boolean;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Props for agent avatar component\n */\ninterface AgentAvatarProps {\n  agent: Agent | null;\n  size?: 'sm' | 'md';\n  isSelected?: boolean;\n  className?: string;\n}\n\n/**\n * Props for individual agent item in dropdown\n * \n * @property agent - Agent data object\n * @property isSelected - Whether this agent is currently selected\n * @property onSelect - Callback when agent is selected\n * @property onSettingsClick - Optional callback for settings button\n */\ninterface AgentItemProps {\n  agent: Agent;\n  isSelected: boolean;\n  onSelect: (agent: Agent) => void;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Agent Avatar Component\n * \n * Displays agent avatar with fallback to default icon\n */\nconst AgentAvatar: React.FC<AgentAvatarProps> = ({ \n  agent, \n  size = 'md', \n  isSelected = false, \n  className \n}) => {\n  const sizeClasses = {\n    sm: 'w-6 h-6',\n    md: 'w-8 h-8'\n  };\n  \n  const iconSizeClasses = {\n    sm: 'w-3 h-3',\n    md: 'w-4 h-4'\n  };\n\n  const avatarUrl = agent?.settings?.chatbot_avatar;\n\n  return (\n    <div className={cn(\n      'rounded-full flex items-center justify-center flex-shrink-0 overflow-hidden',\n      sizeClasses[size],\n      isSelected ? 'bg-brand-600' : 'bg-accent',\n      className\n    )}>\n      {avatarUrl ? (\n        <img\n          src={avatarUrl}\n          alt={`${agent?.project_name} avatar`}\n          className=\"w-full h-full object-cover\"\n          onError={(e) => {\n            // Fallback to icon if image fails to load\n            const target = e.target as HTMLImageElement;\n            target.style.display = 'none';\n            const parent = target.parentElement;\n            if (parent) {\n              const icon = document.createElement('div');\n              icon.className = `w-full h-full flex items-center justify-center`;\n              icon.innerHTML = `<svg class=\"${iconSizeClasses[size]} ${isSelected ? 'text-white' : 'text-gray-600'}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"></path></svg>`;\n              parent.appendChild(icon);\n            }\n          }}\n        />\n      ) : (\n        <User className={cn(\n          iconSizeClasses[size],\n          isSelected ? 'text-white' : 'text-muted-foreground'\n        )} />\n      )}\n    </div>\n  );\n};\n\n/**\n * Individual Agent Item Component\n * \n * Renders a single agent in the dropdown list with:\n * - Agent avatar and name\n * - Selection indicator\n * - Metadata (model, status)\n * - Settings button (optional)\n */\nconst AgentItem: React.FC<AgentItemProps> = ({ \n  agent, \n  isSelected, \n  onSelect, \n  onSettingsClick \n}) => {\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-between p-3 rounded-lg cursor-pointer transition-colors group',\n        'hover:bg-accent',\n        isSelected && 'bg-brand-50 hover:bg-brand-100'\n      )}\n      onClick={() => onSelect(agent)}\n    >\n      <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n        {/* Avatar */}\n        <AgentAvatar \n          agent={agent}\n          size=\"md\"\n          isSelected={isSelected}\n        />\n        \n        {/* Agent Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"font-medium text-foreground truncate\">\n              {agent.project_name}\n            </h3>\n            {isSelected && (\n              <Check className=\"w-4 h-4 text-brand-600 flex-shrink-0\" />\n            )}\n          </div>\n          \n          {/* Status */}\n          <div className=\"mt-1 text-xs text-muted-foreground\">\n            <span>Status: {agent.is_chat_active ? 'Active' : 'Inactive'}</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Settings Button */}\n      {onSettingsClick && (\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onSettingsClick(agent);\n          }}\n          className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-muted-foreground hover:text-foreground\"\n          title=\"Agent Settings\"\n        >\n          <Settings className=\"h-3 w-3\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Selector Component\n * \n * Main component that provides agent switching functionality.\n * Manages dropdown state and handles agent selection.\n * \n * @param className - Additional CSS classes for styling\n * @param showSettings - Whether to show settings buttons (default: true)\n * @param onSettingsClick - Handler for agent settings clicks\n */\nexport const AgentSelector: React.FC<AgentSelectorProps> = ({ \n  className,\n  showSettings = true,\n  onSettingsClick\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isSelectingAgent, setIsSelectingAgent] = useState(false);\n  const [loadingSettings, setLoadingSettings] = useState<Set<number>>(new Set());\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  \n  const { \n    agents, \n    currentAgent, \n    loading, \n    error, \n    fetchAgents, \n    loadMoreAgents,\n    selectAgent,\n    setAgents,\n    paginationMeta\n  } = useAgentStore();\n\n  /**\n   * Fetch settings for agents that don't have them loaded\n   */\n  const fetchAgentSettings = async (agentsToLoad: Agent[]) => {\n    const agentsNeedingSettings = agentsToLoad.filter(agent => \n      !agent.settings && !loadingSettings.has(agent.id)\n    );\n\n    if (agentsNeedingSettings.length === 0) return;\n\n    // Mark agents as loading\n    setLoadingSettings(prev => {\n      const newSet = new Set(prev);\n      agentsNeedingSettings.forEach(agent => newSet.add(agent.id));\n      return newSet;\n    });\n\n    try {\n      const client = getClient();\n      const settingsPromises = agentsNeedingSettings.map(async (agent) => {\n        try {\n          const response = await client.getAgentSettings(agent.id);\n          return {\n            agentId: agent.id,\n            settings: response.data || response\n          };\n        } catch (error) {\n          console.warn(`Failed to load settings for agent ${agent.id}:`, error);\n          return {\n            agentId: agent.id,\n            settings: null\n          };\n        }\n      });\n\n      const results = await Promise.all(settingsPromises);\n      \n      // Update agents with their settings\n      const updatedAgents = agents.map(agent => {\n        const result = results.find(r => r.agentId === agent.id);\n        if (result && result.settings) {\n          return { ...agent, settings: result.settings };\n        }\n        return agent;\n      });\n\n      setAgents(updatedAgents);\n\n    } catch (error) {\n      console.error('Failed to fetch agent settings:', error);\n    } finally {\n      // Clear loading state\n      setLoadingSettings(prev => {\n        const newSet = new Set(prev);\n        agentsNeedingSettings.forEach(agent => newSet.delete(agent.id));\n        return newSet;\n      });\n    }\n  };\n\n  /**\n   * Close dropdown when clicking outside\n   * \n   * Uses mousedown event for better UX (closes before click completes)\n   */\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [isOpen]);\n\n  /**\n   * Refresh agents list\n   * \n   * Fetches latest agents from the API and shows toast feedback.\n   * This will temporarily cause avatars to flicker as settings are reloaded.\n   */\n  const handleRefresh = async () => {\n    try {\n      await fetchAgents();\n      toast.success('Agents refreshed');\n    } catch (error) {\n      toast.error('Failed to refresh agents');\n    }\n  };\n\n  /**\n   * Handle agent selection\n   * \n   * Updates the current agent, closes dropdown, and shows confirmation\n   */\n  const handleSelectAgent = async (agent: Agent) => {\n    if (isSelectingAgent) return; // Prevent multiple selections\n    \n    setIsSelectingAgent(true);\n    try {\n      await selectAgent(agent);\n      setIsOpen(false);\n      toast.success(`Switched to ${agent.project_name}`);\n    } catch (error) {\n      toast.error('Failed to switch agent');\n    } finally {\n      // Add a small delay to show the loading state briefly\n      setTimeout(() => {\n        setIsSelectingAgent(false);\n      }, 300);\n    }\n  };\n\n  /**\n   * Fetch settings when agents are loaded and dropdown is open\n   * Only runs when needed to prevent unnecessary API calls\n   */\n  useEffect(() => {\n    if (isOpen && agents.length > 0) {\n      // Only fetch if there are agents without settings\n      const agentsNeedingSettings = agents.some(agent => !agent.settings);\n      if (agentsNeedingSettings) {\n        fetchAgentSettings(agents);\n      }\n    }\n  }, [isOpen, agents.length, agents, fetchAgentSettings]);\n\n  /**\n   * Toggle dropdown and conditionally fetch agents\n   * \n   * Only fetches agents if the array is empty to prevent flickering.\n   * Settings are fetched via useEffect when agents are loaded.\n   */\n  const handleToggleDropdown = async () => {\n    const willOpen = !isOpen;\n    setIsOpen(willOpen);\n    \n    // Only fetch agents if we don't have any yet\n    // This prevents flickering caused by replacing agents that have settings\n    // with fresh agents that don't have settings loaded\n    if (willOpen && agents.length === 0) {\n      try {\n        await fetchAgents();\n      } catch (error) {\n        // Don't show error toast here as it might be annoying\n      }\n    }\n  };\n\n  if (loading && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-muted animate-pulse\" />\n          <div className=\"flex-1\">\n            <div className=\"h-4 bg-muted rounded animate-pulse mb-2\" />\n            <div className=\"h-3 bg-muted/50 rounded animate-pulse w-3/4\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-red-100 flex items-center justify-center flex-shrink-0\">\n            <AlertCircle className=\"w-4 h-4 text-red-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-red-600 font-medium\">Failed to load agents</p>\n            <p className=\"text-xs text-red-500\">{error}</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            className=\"text-red-600 hover:text-red-700\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentAgent && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-accent flex items-center justify-center flex-shrink-0\">\n            <Bot className=\"w-4 h-4 text-muted-foreground\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-muted-foreground font-medium\">No agents available</p>\n            <p className=\"text-xs text-muted-foreground\">Check your API configuration</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            disabled={loading}\n          >\n            <RefreshCw className={cn('w-4 h-4', loading && 'animate-spin')} />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('relative', className)} ref={dropdownRef}>\n      {/* Loading overlay when selecting agent */}\n      {isSelectingAgent && (\n        <div className=\"absolute inset-0 bg-background/80 backdrop-blur-sm rounded-lg flex items-center justify-center z-50\">\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Spinner size=\"sm\" />\n            <span className=\"text-foreground\">Switching agent...</span>\n          </div>\n        </div>\n      )}\n      {/* Selected Agent Display */}\n      <button\n        onClick={handleToggleDropdown}\n        className={cn(\n          'w-full p-3 bg-background border border-border rounded-lg text-left transition-colors',\n          'hover:bg-accent focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent',\n          isOpen && 'ring-2 ring-ring border-transparent'\n        )}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            {/* Avatar */}\n            <AgentAvatar \n              agent={currentAgent}\n              size=\"md\"\n              isSelected={true}\n            />\n            \n            {/* Agent Info */}\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-medium text-foreground truncate\">\n                {currentAgent?.project_name || 'Select Agent'}\n              </h3>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {/* Analytics Button */}\n            {currentAgent && (\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  // Navigate to projects page with analytics tab\n                  window.location.href = `/projects?id=${currentAgent.id}&tab=analytics`;\n                }}\n                title=\"View Analytics\"\n                className=\"text-muted-foreground hover:text-foreground\"\n              >\n                <BarChart3 className=\"w-4 h-4\" />\n              </Button>\n            )}\n            \n            {/* Refresh Button */}\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleRefresh();\n              }}\n              disabled={loading}\n              className=\"h-6 w-6 text-muted-foreground hover:text-foreground\"\n              title=\"Refresh Agents\"\n            >\n              <RefreshCw className={cn('h-3 w-3', loading && 'animate-spin')} />\n            </Button>\n            \n            {/* Dropdown Arrow */}\n            <ChevronDown className={cn(\n              'w-4 h-4 text-muted-foreground transition-transform',\n              isOpen && 'rotate-180'\n            )} />\n          </div>\n        </div>\n      </button>\n\n      {/* Dropdown */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-background border border-border rounded-lg shadow-lg z-50 max-h-80 overflow-y-auto\"\n          >\n            <div className=\"p-2\">\n              {/* Header */}\n              <div className=\"px-2 py-1 mb-2\">\n                <h4 className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n                  Available Agents ({Array.isArray(agents) ? agents.length : 0}\n                  {paginationMeta?.totalCount && paginationMeta.totalCount !== agents.length && (\n                    <span> of {paginationMeta.totalCount}</span>\n                  )})\n                </h4>\n              </div>\n              \n              {/* Agent List */}\n              <div className=\"space-y-1\">\n                {Array.isArray(agents) && agents.length > 0 ? (\n                  agents.map((agent) => (\n                    <AgentItem\n                      key={agent.id}\n                      agent={agent}\n                      isSelected={currentAgent?.id === agent.id}\n                      onSelect={handleSelectAgent}\n                      onSettingsClick={showSettings ? onSettingsClick : undefined}\n                    />\n                  ))\n                ) : (\n                  <div className=\"px-2 py-4 text-center\">\n                    <p className=\"text-sm text-muted-foreground\">No agents found</p>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={handleRefresh}\n                      className=\"mt-2\"\n                    >\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Refresh\n                    </Button>\n                  </div>\n                )}\n              </div>\n              \n              {/* Load More Button */}\n              {Array.isArray(agents) && agents.length > 0 && paginationMeta?.hasMore && (\n                <div className=\"px-2 py-2 border-t\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={async () => {\n                      try {\n                        await loadMoreAgents();\n                      } catch (error) {\n                        console.error('Failed to load more agents:', error);\n                      }\n                    }}\n                    disabled={loading}\n                    className=\"w-full\"\n                  >\n                    {loading ? (\n                      <>\n                        <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Loading...\n                      </>\n                    ) : (\n                      <>\n                        <ChevronDown className=\"w-4 h-4 mr-2\" />\n                        Load More Agents\n                      </>\n                    )}\n                  </Button>\n                </div>\n              )}\n              \n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","'use client';\n\nimport { useState, useEffect } from 'react';\n\n/**\n * Custom hook for responsive design based on media queries\n * Provides mobile-first breakpoint detection\n */\nexport const useMediaQuery = (query: string): boolean => {\n  const [matches, setMatches] = useState(false);\n\n  useEffect(() => {\n    // Handle server-side rendering\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const media = window.matchMedia(query);\n    \n    // Set initial value\n    setMatches(media.matches);\n\n    // Create event listener\n    const listener = (event: MediaQueryListEvent) => {\n      setMatches(event.matches);\n    };\n\n    // Add listener\n    media.addEventListener('change', listener);\n\n    // Cleanup\n    return () => media.removeEventListener('change', listener);\n  }, [query]);\n\n  return matches;\n};\n\n/**\n * Predefined breakpoint hooks for common use cases\n */\nexport const useBreakpoint = () => {\n  const isMobile = useMediaQuery('(max-width: 767px)');\n  const isTablet = useMediaQuery('(min-width: 768px) and (max-width: 1023px)');\n  const isDesktop = useMediaQuery('(min-width: 1024px)');\n  const isLargeScreen = useMediaQuery('(min-width: 1280px)');\n  \n  // Touch device detection\n  const isTouchDevice = useMediaQuery('(pointer: coarse)');\n  \n  return {\n    isMobile,\n    isTablet,\n    isDesktop,\n    isLargeScreen,\n    isTouchDevice,\n    // Helper computed values\n    isMobileOrTablet: isMobile || isTablet,\n    isTabletOrDesktop: isTablet || isDesktop\n  };\n};\n\n/**\n * Hook for getting current screen size category\n */\nexport const useScreenSize = () => {\n  const { isMobile, isTablet, isDesktop, isLargeScreen } = useBreakpoint();\n  \n  if (isMobile) return 'mobile';\n  if (isTablet) return 'tablet';\n  if (isLargeScreen) return 'large';\n  if (isDesktop) return 'desktop';\n  return 'desktop'; // fallback\n};","/**\n * Debug utilities for CustomGPT Widget\n * \n * Provides comprehensive debugging tools for diagnosing widget issues,\n * especially around message persistence and conversation management.\n */\n\ninterface DebugInfo {\n  timestamp: string;\n  sessionId: string;\n  widgetInstance: any;\n  conversations: any[];\n  currentConversationId: string | null;\n  messageStore: any;\n  localStorage: {\n    keys: string[];\n    messageKeys: string[];\n    conversationKeys: string[];\n    contents: Record<string, any>;\n  };\n  widgetStores: any;\n}\n\nexport class WidgetDebugger {\n  private static instance: WidgetDebugger;\n  private debugEnabled: boolean = true;\n  private logHistory: any[] = [];\n\n  static getInstance(): WidgetDebugger {\n    if (!WidgetDebugger.instance) {\n      WidgetDebugger.instance = new WidgetDebugger();\n    }\n    return WidgetDebugger.instance;\n  }\n\n  /**\n   * Enhanced console log with color coding and grouping\n   */\n  log(category: string, message: string, data?: any, level: 'info' | 'warn' | 'error' | 'debug' = 'info') {\n    if (!this.debugEnabled) return;\n\n    const timestamp = new Date().toISOString();\n    const logEntry = { timestamp, category, message, data, level };\n    this.logHistory.push(logEntry);\n\n    // Color coding for different categories\n    const colors = {\n      MESSAGES: 'color: #2196F3; font-weight: bold',\n      CONVERSATIONS: 'color: #4CAF50; font-weight: bold',\n      STORAGE: 'color: #FF9800; font-weight: bold',\n      WIDGET: 'color: #9C27B0; font-weight: bold',\n      API: 'color: #F44336; font-weight: bold',\n      DEBUG: 'color: #607D8B; font-weight: bold'\n    };\n\n    const color = colors[category] || 'color: #000; font-weight: bold';\n\n    console.group(`%c[${category}] ${message}`, color);\n    console.log('Timestamp:', timestamp);\n    if (data) {\n      console.log('Data:', data);\n    }\n    console.groupEnd();\n  }\n\n  /**\n   * Inspect localStorage for widget-related keys\n   */\n  inspectLocalStorage(sessionId?: string): any {\n    const allKeys = Object.keys(localStorage);\n    const widgetKeys = allKeys.filter(key => \n      key.includes('customgpt') || \n      key.includes('widget') || \n      (sessionId && key.includes(sessionId))\n    );\n\n    const messageKeys = widgetKeys.filter(key => key.includes('messages'));\n    const conversationKeys = widgetKeys.filter(key => key.includes('conversation'));\n\n    const contents: Record<string, any> = {};\n    widgetKeys.forEach(key => {\n      try {\n        const value = localStorage.getItem(key);\n        contents[key] = value ? JSON.parse(value) : null;\n      } catch (e) {\n        contents[key] = localStorage.getItem(key);\n      }\n    });\n\n    return {\n      allKeysCount: allKeys.length,\n      widgetKeysCount: widgetKeys.length,\n      keys: widgetKeys,\n      messageKeys,\n      conversationKeys,\n      contents\n    };\n  }\n\n  /**\n   * Get comprehensive debug information for a widget instance\n   */\n  getDebugInfo(widgetInstance: any): DebugInfo {\n    const sessionId = widgetInstance?.sessionId || 'unknown';\n    const conversations = widgetInstance?.getConversations() || [];\n    const currentConversationId = widgetInstance?.currentConversationId;\n    \n    // Get widget stores\n    const widgetStores = (window as any).__customgpt_widget_stores?.[sessionId];\n    const messageStore = widgetStores?.messageStore?.getState();\n    \n    return {\n      timestamp: new Date().toISOString(),\n      sessionId,\n      widgetInstance: {\n        sessionId: widgetInstance?.sessionId,\n        currentConversationId: widgetInstance?.currentConversationId,\n        config: widgetInstance?.config,\n        conversationCount: conversations.length\n      },\n      conversations,\n      currentConversationId,\n      messageStore: messageStore ? {\n        messagesMapSize: messageStore.messages?.size,\n        messagesMapKeys: Array.from(messageStore.messages?.keys() || []),\n        isStreaming: messageStore.isStreaming,\n        loading: messageStore.loading,\n        error: messageStore.error\n      } : null,\n      localStorage: this.inspectLocalStorage(sessionId),\n      widgetStores: widgetStores ? {\n        hasMessageStore: !!widgetStores.messageStore,\n        hasConversationStore: !!widgetStores.conversationStore,\n        hasAgentStore: !!widgetStores.agentStore\n      } : null\n    };\n  }\n\n  /**\n   * Debug a specific conversation's messages\n   */\n  debugConversation(widgetInstance: any, conversationId: string) {\n    const debugInfo = this.getDebugInfo(widgetInstance);\n    const sessionId = widgetInstance?.sessionId;\n\n    console.group(`%c[DEBUG] Conversation ${conversationId}`, 'color: #E91E63; font-weight: bold');\n    \n    // Check message store\n    const messageStore = (window as any).__customgpt_widget_stores?.[sessionId]?.messageStore?.getState();\n    if (messageStore) {\n      const messages = messageStore.messages.get(conversationId);\n      console.log('Messages in store:', messages);\n      console.log('Message count:', messages?.length || 0);\n    }\n\n    // Check localStorage directly\n    const storageKeys = [\n      `customgpt-messages-cache-${sessionId}`,\n      `customgpt-messages-cache-${sessionId}-${conversationId}`,\n      `customgpt-messages-${sessionId}-${conversationId}`\n    ];\n\n    console.log('Checking localStorage keys:');\n    storageKeys.forEach(key => {\n      const value = localStorage.getItem(key);\n      if (value) {\n        try {\n          const parsed = JSON.parse(value);\n          console.log(`✅ Found ${key}:`, parsed);\n        } catch (e) {\n          console.log(`✅ Found ${key} (raw):`, value);\n        }\n      } else {\n        console.log(`❌ Not found: ${key}`);\n      }\n    });\n\n    console.groupEnd();\n  }\n\n  /**\n   * Trace message flow for debugging\n   */\n  traceMessageFlow(action: string, data: any) {\n    const trace = {\n      action,\n      timestamp: new Date().toISOString(),\n      ...data\n    };\n\n    console.group(`%c[TRACE] ${action}`, 'color: #795548; font-weight: bold');\n    console.table(trace);\n    console.groupEnd();\n  }\n\n  /**\n   * Export debug log history\n   */\n  exportLogs(): string {\n    return JSON.stringify(this.logHistory, null, 2);\n  }\n\n  /**\n   * Clear debug log history\n   */\n  clearLogs() {\n    this.logHistory = [];\n  }\n\n  /**\n   * Toggle debug mode\n   */\n  setDebugEnabled(enabled: boolean) {\n    this.debugEnabled = enabled;\n    console.log(`Widget debugging ${enabled ? 'enabled' : 'disabled'}`);\n  }\n}\n\n// Create global debug function for easy console access\nif (typeof window !== 'undefined') {\n  (window as any).__customgpt_debug = (conversationId?: string) => {\n    const instances = (window as any).__customgpt_widget_instances;\n    if (!instances) {\n      console.error('No widget instances found');\n      return;\n    }\n\n    const instanceKeys = Object.keys(instances);\n    if (instanceKeys.length === 0) {\n      console.error('No widget instances found');\n      return;\n    }\n\n    const widgetDebugger = WidgetDebugger.getInstance();\n    \n    instanceKeys.forEach(key => {\n      const instance = instances[key];\n      console.group(`%c[Widget Instance: ${key}]`, 'color: #3F51B5; font-weight: bold; font-size: 14px');\n      \n      const debugInfo = widgetDebugger.getDebugInfo(instance);\n      console.log('Debug Info:', debugInfo);\n      \n      if (conversationId) {\n        widgetDebugger.debugConversation(instance, conversationId);\n      }\n      \n      console.groupEnd();\n    });\n\n    console.log(`\n%c🔍 Debug Helper Functions:\n%c- __customgpt_debug() - Show all widget debug info\n- __customgpt_debug('conversationId') - Debug specific conversation\n- __customgpt_debug_trace() - Show message flow trace\n- __customgpt_debug_storage() - Inspect localStorage\n- __customgpt_debug_clear() - Clear localStorage (use with caution!)\n`, 'color: #4CAF50; font-weight: bold', 'color: #666');\n  };\n\n  // Additional debug helpers\n  (window as any).__customgpt_debug_trace = () => {\n    const widgetDebugger = WidgetDebugger.getInstance();\n    console.log(widgetDebugger.exportLogs());\n  };\n\n  (window as any).__customgpt_debug_storage = () => {\n    const widgetDebugger = WidgetDebugger.getInstance();\n    const storage = widgetDebugger.inspectLocalStorage();\n    console.table(storage.contents);\n  };\n\n  (window as any).__customgpt_debug_clear = () => {\n    if (confirm('This will clear all CustomGPT widget data from localStorage. Are you sure?')) {\n      const keys = Object.keys(localStorage).filter(key => \n        key.includes('customgpt') || key.includes('widget')\n      );\n      keys.forEach(key => localStorage.removeItem(key));\n      console.log(`Cleared ${keys.length} keys from localStorage`);\n    }\n  };\n}\n\nexport const widgetDebugger = WidgetDebugger.getInstance();","/**\n * Widget-specific Message Store Factory\n * \n * Creates an isolated message store instance for each widget.\n * This ensures messages are not shared between different widget instances.\n */\n\nimport { create, StoreApi } from 'zustand';\nimport type { ChatMessage, Citation, FeedbackType } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateId } from '@/lib/utils';\nimport { globalStreamManager } from '@/lib/streaming/handler';\nimport { logger } from '@/lib/logger';\nimport { widgetDebugger } from '@/widget/debug-utils';\nimport type { AgentStore } from './agents';\nimport type { ConversationStore } from './conversations';\n\n// Message Store interface - copied from original to maintain compatibility\nexport interface MessageStore {\n  messages: Map<string, ChatMessage[]>;\n  streamingMessage: ChatMessage | null;\n  isStreaming: boolean;\n  loading: boolean;\n  error: string | null;\n  \n  sendMessage: (content: string, files?: File[]) => Promise<void>;\n  loadMessages: (conversationId: string) => Promise<void>;\n  addMessage: (conversationId: string, message: ChatMessage) => void;\n  updateStreamingMessage: (content: string, citations?: Citation[]) => void;\n  clearMessages: (conversationId?: string) => void;\n  updateMessageFeedback: (messageId: string, feedback: FeedbackType) => void;\n  cancelStreaming: () => void;\n  getMessagesForConversation: (conversationId: string) => ChatMessage[];\n  reset: () => void;\n  clearError: () => void;\n  setMessagesForConversation: (conversationId: string, messages: ChatMessage[]) => void;\n}\n\n/**\n * Create a message store instance for a specific widget\n * @param sessionId - The widget's session ID for isolation\n * @param agentStore - Reference to the agent store\n * @param conversationStore - Reference to the conversation store\n */\nexport function createMessageStore(\n  sessionId: string,\n  agentStore?: StoreApi<AgentStore>,\n  conversationStore?: StoreApi<ConversationStore>\n): StoreApi<MessageStore> {\n  const MESSAGES_STORAGE_KEY = `customgpt-messages-cache-${sessionId}`;\n  \n  // Local storage helpers scoped to this instance\n  function saveMessagesToStorage(conversationId: string, messages: ChatMessage[]) {\n    try {\n      // Use a consistent storage key that includes both session ID and conversation ID\n      const storageKey = `${MESSAGES_STORAGE_KEY}-${conversationId}`;\n      localStorage.setItem(storageKey, JSON.stringify(messages));\n      \n      // Also update the main cache storage\n      const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n      const cache = stored ? JSON.parse(stored) : {};\n      cache[conversationId] = messages;\n      localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n      \n      // Enhanced debugging\n      widgetDebugger.log('STORAGE', 'Saved messages to localStorage', {\n        conversationId,\n        messageCount: messages.length,\n        storageKey,\n        cacheKey: MESSAGES_STORAGE_KEY,\n        sessionId,\n        actualKeys: [storageKey, MESSAGES_STORAGE_KEY],\n        messageIds: messages.map(m => ({ id: m.id, role: m.role }))\n      });\n      \n      widgetDebugger.traceMessageFlow('SAVE_MESSAGES', {\n        conversationId,\n        messageCount: messages.length,\n        sessionId,\n        storageKeys: [storageKey, MESSAGES_STORAGE_KEY]\n      });\n    } catch (error) {\n      console.error('Failed to save messages to local storage:', error);\n      widgetDebugger.log('STORAGE', 'Failed to save messages', { \n        conversationId, \n        error,\n        sessionId \n      }, 'error');\n    }\n  }\n\n  function loadMessagesFromStorage(conversationId: string): ChatMessage[] | null {\n    try {\n      // First try the session-specific storage key\n      const sessionStorageKey = `${MESSAGES_STORAGE_KEY}-${conversationId}`;\n      const sessionStored = localStorage.getItem(sessionStorageKey);\n      \n      widgetDebugger.log('STORAGE', 'Attempting to load messages', {\n        conversationId,\n        sessionId,\n        sessionStorageKey,\n        hasSessionStored: !!sessionStored,\n        sessionStoredLength: sessionStored?.length\n      });\n      \n      if (sessionStored) {\n        try {\n          const messages = JSON.parse(sessionStored);\n          widgetDebugger.log('STORAGE', 'Successfully loaded from session storage', {\n            conversationId,\n            messageCount: messages.length,\n            sessionId,\n            messageIds: messages.map((m: ChatMessage) => ({ id: m.id, role: m.role }))\n          });\n          \n          widgetDebugger.traceMessageFlow('LOAD_SUCCESS_SESSION', {\n            conversationId,\n            messageCount: messages.length,\n            fromKey: sessionStorageKey\n          });\n          \n          return messages;\n        } catch (e) {\n          widgetDebugger.log('STORAGE', 'Failed to parse session storage', { error: e }, 'error');\n        }\n      }\n      \n      // Then try the main cache\n      const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n      widgetDebugger.log('STORAGE', 'Checking main cache', {\n        cacheKey: MESSAGES_STORAGE_KEY,\n        hasCache: !!stored,\n        cacheSize: stored?.length\n      });\n      \n      if (stored) {\n        try {\n          const cache = JSON.parse(stored);\n          const messages = cache[conversationId];\n          \n          widgetDebugger.log('STORAGE', 'Cache lookup result', {\n            conversationId,\n            foundMessages: !!messages,\n            messageCount: messages?.length || 0,\n            cacheKeys: Object.keys(cache),\n            conversationIdType: typeof conversationId,\n            cacheKeyTypes: Object.keys(cache).map(k => ({ key: k, type: typeof k }))\n          });\n          \n          if (messages) {\n            widgetDebugger.traceMessageFlow('LOAD_SUCCESS_CACHE', {\n              conversationId,\n              messageCount: messages.length,\n              fromKey: MESSAGES_STORAGE_KEY\n            });\n          }\n          \n          return messages || null;\n        } catch (e) {\n          widgetDebugger.log('STORAGE', 'Failed to parse cache storage', { error: e }, 'error');\n        }\n      }\n      \n      widgetDebugger.log('STORAGE', 'No messages found in any storage', {\n        conversationId,\n        sessionId,\n        checkedKeys: [sessionStorageKey, MESSAGES_STORAGE_KEY],\n        allLocalStorageKeys: Object.keys(localStorage).filter(k => k.includes('customgpt'))\n      }, 'warn');\n      \n      widgetDebugger.traceMessageFlow('LOAD_EMPTY', {\n        conversationId,\n        sessionId,\n        reason: 'No messages found in storage'\n      });\n      \n      return null;\n    } catch (error) {\n      widgetDebugger.log('STORAGE', 'Exception loading messages', {\n        conversationId,\n        error,\n        sessionId\n      }, 'error');\n      return null;\n    }\n  }\n\n  return create<MessageStore>((set, get) => ({\n    messages: new Map(),\n    streamingMessage: null,\n    isStreaming: false,\n    loading: false,\n    error: null,\n\n    sendMessage: async (content: string, files?: File[]) => {\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      // Use the passed store references\n      if (!agentStore || !conversationStore) {\n        logger.error('MESSAGES', 'Store references not provided');\n        throw new Error('Store references not provided');\n      }\n      \n      const currentAgent = agentStore.getState().currentAgent;\n      if (!currentAgent) {\n        logger.error('MESSAGES', 'No agent selected');\n        throw new Error('No agent selected');\n      }\n\n      logger.info('MESSAGES', 'Sending message from widget store', {\n        sessionId,\n        agentId: currentAgent.id,\n        agentName: currentAgent.project_name,\n        messageLength: content.length,\n        hasFiles: files && files.length > 0\n      });\n\n      // Ensure we have a conversation\n      const conversation = await conversationStore.getState().ensureConversation(\n        typeof currentAgent.id === 'string' ? parseInt(currentAgent.id) : currentAgent.id,\n        content\n      );\n\n      logger.info('MESSAGES', 'Conversation ensured', {\n        conversationId: conversation.id,\n        sessionId: conversation.session_id,\n        hasSessionId: !!conversation.session_id,\n        isNew: !conversation.message_count || conversation.message_count === 0\n      });\n\n      if (!conversation.session_id) {\n        logger.error('MESSAGES', 'Conversation missing session_id', { conversation });\n        throw new Error('Conversation missing session_id');\n      }\n\n      set({ loading: true, error: null });\n\n      const conversationId = conversation.id.toString();\n\n      // Create user message\n      const userMessage: ChatMessage = {\n        id: generateId(),\n        role: 'user',\n        content,\n        timestamp: new Date().toISOString(),\n        status: 'sending',\n      };\n\n      widgetDebugger.log('MESSAGES', 'Adding user message', {\n        conversationId,\n        conversationIdType: typeof conversationId,\n        messageId: userMessage.id,\n        currentMapKeys: Array.from(get().messages.keys()),\n        sessionId\n      });\n      \n      widgetDebugger.traceMessageFlow('ADD_USER_MESSAGE', {\n        conversationId,\n        messageId: userMessage.id,\n        sessionId,\n        content: content.substring(0, 50) + '...'\n      });\n\n      // Add user message to store\n      get().addMessage(conversationId, userMessage);\n\n      // Create assistant message placeholder\n      const assistantMessage: ChatMessage = {\n        id: generateId(),\n        role: 'assistant',\n        content: '',\n        timestamp: new Date().toISOString(),\n        citations: [],\n      };\n\n      set({ \n        streamingMessage: assistantMessage,\n        isStreaming: true,\n        loading: false,\n      });\n\n      try {\n        // Handle file uploads if present\n        if (files && files.length > 0) {\n          const client = getClient();\n          await Promise.all(\n            files.map(file => client.uploadFile(currentAgent.id, file))\n          );\n        }\n\n        // Update user message status\n        userMessage.status = 'sent';\n        get().addMessage(conversationId, userMessage);\n\n        // Start streaming with correct parameters\n        const client = getClient();\n        \n        logger.info('MESSAGES', 'Starting message stream', {\n          agentId: currentAgent.id,\n          sessionId: conversation.session_id,\n          messageContent: content.substring(0, 50)\n        });\n        \n        if (isDemoMode) {\n          // Demo mode - simulate streaming response\n          await new Promise(resolve => setTimeout(resolve, 1000));\n          \n          const demoResponse = `This is a demo response to: \"${content}\"`;\n          get().updateStreamingMessage(demoResponse);\n          \n          await new Promise(resolve => setTimeout(resolve, 500));\n          \n          const finalMessage = get().streamingMessage;\n          if (finalMessage) {\n            finalMessage.status = 'sent';\n            get().addMessage(conversationId, finalMessage);\n          }\n          \n          set({ \n            streamingMessage: null,\n            isStreaming: false,\n          });\n          return;\n        }\n        \n        // Real API streaming\n        try {\n          await client.sendMessageStream(\n            currentAgent.id,\n            conversation.session_id,\n            { \n              prompt: content\n            },\n            (chunk) => {\n                logger.info('MESSAGES', 'Received stream chunk', { \n                  type: chunk.type, \n                  hasContent: !!chunk.content,\n                  contentLength: chunk.content?.length,\n                  contentPreview: chunk.content?.substring(0, 50)\n                });\n                \n                if (chunk.type === 'content' && chunk.content) {\n                  get().updateStreamingMessage(chunk.content, chunk.citations);\n                } else if (chunk.type === 'citation' && chunk.citations) {\n                  // Handle citation-only chunks\n                  const current = get().streamingMessage;\n                  if (current) {\n                    set({\n                      streamingMessage: {\n                        ...current,\n                        citations: chunk.citations\n                      }\n                    });\n                  }\n                }\n              },\n            async (streamError) => {\n                logger.error('MESSAGES', 'Streaming failed, attempting fallback to non-streaming', streamError);\n                \n                // Try fallback to non-streaming API\n                try {\n                  const response = await client.sendMessage(\n                    currentAgent.id,\n                    conversation.session_id,\n                    { \n                      prompt: content,\n                      stream: false\n                    }\n                  );\n                  \n                  // Update streaming message with the complete response\n                  const finalMessage = get().streamingMessage;\n                  if (finalMessage && response) {\n                    let messageData: any;\n                    if (response.data) {\n                      messageData = response.data;\n                    } else {\n                      messageData = response as any;\n                    }\n                    \n                    finalMessage.content = messageData?.openai_response || messageData?.content || 'No response received';\n                    finalMessage.citations = messageData?.citations || [];\n                    finalMessage.status = 'sent';\n                    get().addMessage(conversationId, finalMessage);\n                  }\n                  \n                  set({ \n                    streamingMessage: null,\n                    isStreaming: false,\n                  });\n                  \n                } catch (fallbackError) {\n                  logger.error('MESSAGES', 'Both streaming and non-streaming failed', fallbackError);\n                  throw fallbackError;\n                }\n              },\n            () => {\n                // onComplete callback\n                const finalMessage = get().streamingMessage;\n                if (finalMessage) {\n                  finalMessage.status = 'sent';\n                  get().addMessage(conversationId, finalMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                // Update conversation message count\n                conversationStore.getState().updateConversation(\n                  conversation.id,\n                  conversation.session_id,\n                  { name: conversation.name }\n                );\n              }\n          );\n        } catch (error) {\n          logger.error('MESSAGES', 'Failed to send message', error);\n          \n          // Remove assistant message placeholder on error\n          set({ \n            streamingMessage: null,\n            isStreaming: false,\n            error: error instanceof Error ? error.message : 'Failed to send message'\n          });\n          \n          throw error;\n        }\n      } catch (error) {\n        logger.error('MESSAGES', 'Error in sendMessage', error);\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to send message',\n          streamingMessage: null,\n          isStreaming: false,\n          loading: false,\n        });\n        throw error;\n      }\n    },\n\n    loadMessages: async (conversationId: string) => {\n      widgetDebugger.log('MESSAGES', 'loadMessages called', {\n        conversationId,\n        conversationIdType: typeof conversationId,\n        sessionId,\n        storageKey: MESSAGES_STORAGE_KEY,\n        currentMapSize: get().messages.size,\n        currentMapKeys: Array.from(get().messages.keys())\n      });\n      \n      widgetDebugger.traceMessageFlow('LOAD_MESSAGES_START', {\n        conversationId,\n        sessionId\n      });\n      \n      set({ loading: true, error: null });\n\n      try {\n        // Try to load from storage first\n        const cachedMessages = loadMessagesFromStorage(conversationId);\n        \n        widgetDebugger.log('MESSAGES', 'Storage load result', {\n          conversationId,\n          messageCount: cachedMessages?.length || 0,\n          hasMessages: !!cachedMessages,\n          firstMessage: cachedMessages?.[0] ? {\n            id: cachedMessages[0].id,\n            role: cachedMessages[0].role,\n            contentPreview: cachedMessages[0].content.substring(0, 50)\n          } : null\n        });\n        \n        if (cachedMessages && cachedMessages.length > 0) {\n          set(state => {\n            const newMap = new Map(state.messages);\n            newMap.set(conversationId, cachedMessages);\n            \n            widgetDebugger.log('MESSAGES', 'Updated message map', {\n              conversationId,\n              messageCount: cachedMessages.length,\n              newMapSize: newMap.size,\n              newMapKeys: Array.from(newMap.keys()),\n              mapNowHasConversation: newMap.has(conversationId)\n            });\n            \n            widgetDebugger.traceMessageFlow('LOAD_MESSAGES_SUCCESS', {\n              conversationId,\n              messageCount: cachedMessages.length,\n              sessionId\n            });\n            \n            return {\n              messages: newMap,\n              loading: false,\n            };\n          });\n          return;\n        }\n\n        // No messages found in storage\n        widgetDebugger.log('MESSAGES', 'No messages in storage, setting empty array', {\n          conversationId,\n          sessionId\n        }, 'warn');\n        \n        set(state => {\n          const newMap = new Map(state.messages);\n          newMap.set(conversationId, []);\n          \n          widgetDebugger.traceMessageFlow('LOAD_MESSAGES_EMPTY', {\n            conversationId,\n            reason: 'No messages found',\n            sessionId\n          });\n          \n          return {\n            messages: newMap,\n            loading: false,\n          };\n        });\n      } catch (error) {\n        widgetDebugger.log('MESSAGES', 'Exception in loadMessages', {\n          conversationId,\n          error,\n          sessionId\n        }, 'error');\n        \n        set({ \n          error: error instanceof Error ? error.message : 'Failed to load messages',\n          loading: false \n        });\n      }\n    },\n\n    addMessage: (conversationId: string, message: ChatMessage) => {\n      widgetDebugger.log('MESSAGES', 'addMessage called', {\n        conversationId,\n        conversationIdType: typeof conversationId,\n        messageId: message.id,\n        messageRole: message.role,\n        sessionId\n      });\n      \n      set(state => {\n        const newMessages = new Map(state.messages);\n        const messages = newMessages.get(conversationId) || [];\n        \n        widgetDebugger.log('MESSAGES', 'Current messages for conversation', {\n          conversationId,\n          existingMessageCount: messages.length,\n          mapHasConversation: state.messages.has(conversationId)\n        });\n        \n        // Check if message already exists\n        const existingIndex = messages.findIndex(m => m.id === message.id);\n        if (existingIndex >= 0) {\n          messages[existingIndex] = message;\n          widgetDebugger.log('MESSAGES', 'Updated existing message', { messageId: message.id });\n        } else {\n          messages.push(message);\n          widgetDebugger.log('MESSAGES', 'Added new message', { \n            messageId: message.id,\n            newMessageCount: messages.length \n          });\n        }\n        \n        newMessages.set(conversationId, messages);\n        \n        // Save to storage\n        saveMessagesToStorage(conversationId, messages);\n        \n        widgetDebugger.traceMessageFlow('MESSAGE_ADDED', {\n          conversationId,\n          messageId: message.id,\n          messageCount: messages.length,\n          role: message.role\n        });\n        \n        return { messages: newMessages };\n      });\n    },\n\n    updateStreamingMessage: (content: string, citations?: Citation[]) => {\n      set(state => {\n        if (!state.streamingMessage) return state;\n        \n        return {\n          streamingMessage: {\n            ...state.streamingMessage,\n            content: state.streamingMessage.content + content,\n            citations: citations || state.streamingMessage.citations,\n          },\n        };\n      });\n    },\n\n    clearMessages: (conversationId?: string) => {\n      if (conversationId) {\n        set(state => {\n          const newMessages = new Map(state.messages);\n          newMessages.delete(conversationId);\n          return { messages: newMessages };\n        });\n        \n        // Clear from storage\n        try {\n          const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n          if (stored) {\n            const cache = JSON.parse(stored);\n            delete cache[conversationId];\n            localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n          }\n        } catch (error) {\n          console.error('Failed to clear messages from storage:', error);\n        }\n      } else {\n        // Clear all messages\n        set({ messages: new Map() });\n        \n        // Clear all from storage\n        try {\n          localStorage.removeItem(MESSAGES_STORAGE_KEY);\n        } catch (error) {\n          console.error('Failed to clear all messages from storage:', error);\n        }\n      }\n    },\n\n    cancelStreaming: () => {\n      globalStreamManager.cancelAllStreams();\n      set({ isStreaming: false, streamingMessage: null });\n    },\n\n    getMessagesForConversation: (conversationId: string): ChatMessage[] => {\n      return get().messages.get(conversationId) || [];\n    },\n\n    updateMessageFeedback: (messageId: string, feedback: FeedbackType) => {\n      set(state => {\n        const newMessages = new Map(state.messages);\n        \n        for (const [convId, messages] of newMessages) {\n          const messageIndex = messages.findIndex(m => m.id === messageId);\n          if (messageIndex !== -1) {\n            const updatedMessages = [...messages];\n            updatedMessages[messageIndex] = {\n              ...updatedMessages[messageIndex],\n              feedback,\n            };\n            newMessages.set(convId, updatedMessages);\n            saveMessagesToStorage(convId, updatedMessages);\n            break;\n          }\n        }\n        \n        return { messages: newMessages };\n      });\n    },\n\n    reset: () => {\n      set({\n        messages: new Map(),\n        streamingMessage: null,\n        isStreaming: false,\n        loading: false,\n        error: null,\n      });\n    },\n    \n    clearError: () => {\n      set({ error: null });\n    },\n    \n    setMessagesForConversation: (conversationId: string, messages: ChatMessage[]) => {\n      set(state => {\n        const newMessages = new Map(state.messages);\n        newMessages.set(conversationId, messages);\n        return { messages: newMessages };\n      });\n    },\n  }));\n}","/**\n * Widget-specific Conversation Store Factory\n * \n * Creates an isolated conversation store instance for each widget.\n * This ensures conversations are not shared between different widget instances.\n */\n\nimport { create, StoreApi } from 'zustand';\nimport type { Conversation } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateId } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n// Conversation Store interface - widget-specific version\nexport interface ConversationStore {\n  conversations: Conversation[];\n  allConversations: Conversation[];\n  currentConversation: Conversation | null;\n  loading: boolean;\n  error: string | null;\n  lastConversationActivity: Record<string, string>;\n  \n  // Pagination state\n  currentPage: number;\n  totalPages: number;\n  totalConversations: number;\n  perPage: number;\n  \n  // Sorting and filtering state\n  sortOrder: 'asc' | 'desc';\n  sortBy: string;\n  userFilter: 'all' | 'me' | string;\n  \n  // Client-side filtering state\n  searchQuery: string;\n  searchMode: 'name' | 'id' | 'session';\n  dateFilter: 'all' | 'today' | 'week' | 'month';\n  \n  fetchConversations: (projectId: number, params?: {\n    page?: number;\n    per_page?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: string;\n    userFilter?: 'all' | 'me' | string;\n  }) => Promise<void>;\n  loadConversations: (agentId: string) => Promise<void>; // Keep for compatibility\n  createConversation: (projectId: number, name?: string) => Promise<void>;\n  updateConversation: (conversationId: number, sessionId: string, data: { name: string }) => Promise<void>;\n  deleteConversation: (conversationId: string | number) => Promise<void>;\n  selectConversation: (conversation: Conversation) => void;\n  ensureConversation: (projectId: number, firstMessage?: string) => Promise<Conversation>;\n  \n  // Client-side filtering methods\n  applyFilters: () => void;\n  setSearchQuery: (query: string) => void;\n  setSearchMode: (mode: 'name' | 'id' | 'session') => void;\n  setDateFilter: (filter: 'all' | 'today' | 'week' | 'month') => void;\n  \n  reset: () => void;\n}\n\n/**\n * Create a conversation store instance for a specific widget\n * @param sessionId - The widget's session ID for isolation\n */\nexport function createConversationStore(sessionId: string): StoreApi<ConversationStore> {\n  const CONVERSATIONS_STORAGE_KEY = `customgpt-conversations-cache-${sessionId}`;\n  const ACTIVITY_STORAGE_KEY = `customgpt-conversation-activity-${sessionId}`;\n  \n  // Local storage helpers scoped to this instance\n  function saveConversationsToStorage(agentId: string, conversations: Conversation[]) {\n    try {\n      const stored = localStorage.getItem(CONVERSATIONS_STORAGE_KEY);\n      const cache = stored ? JSON.parse(stored) : {};\n      cache[agentId] = conversations;\n      localStorage.setItem(CONVERSATIONS_STORAGE_KEY, JSON.stringify(cache));\n    } catch (error) {\n      console.error('Failed to save conversations to storage:', error);\n    }\n  }\n\n  function loadConversationsFromStorage(agentId: string): Conversation[] | null {\n    try {\n      const stored = localStorage.getItem(CONVERSATIONS_STORAGE_KEY);\n      if (!stored) return null;\n      const cache = JSON.parse(stored);\n      return cache[agentId] || null;\n    } catch (error) {\n      console.error('Failed to load conversations from storage:', error);\n      return null;\n    }\n  }\n\n  function saveActivityToStorage(activity: Record<string, string>) {\n    try {\n      localStorage.setItem(ACTIVITY_STORAGE_KEY, JSON.stringify(activity));\n    } catch (error) {\n      console.error('Failed to save activity to storage:', error);\n    }\n  }\n\n  function loadActivityFromStorage(): Record<string, string> {\n    try {\n      const stored = localStorage.getItem(ACTIVITY_STORAGE_KEY);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.error('Failed to load activity from storage:', error);\n      return {};\n    }\n  }\n\n  return create<ConversationStore>((set, get) => ({\n    conversations: [],\n    allConversations: [],\n    currentConversation: null,\n    loading: false,\n    error: null,\n    lastConversationActivity: loadActivityFromStorage(),\n    // Pagination state\n    currentPage: 1,\n    totalPages: 1,\n    totalConversations: 0,\n    perPage: 20,\n    // Sorting and filtering state\n    sortOrder: 'desc' as const,\n    sortBy: 'id',\n    userFilter: 'all' as const,\n    // Client-side filtering state\n    searchQuery: '',\n    searchMode: 'name' as const,\n    dateFilter: 'all' as const,\n\n    fetchConversations: async (projectId: number, params?: {\n      page?: number;\n      per_page?: number;\n      order?: 'asc' | 'desc';\n      orderBy?: string;\n      userFilter?: 'all' | 'me' | string;\n    }) => {\n      // For widgets, we load conversations differently\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      logger.info('CONVERSATIONS', 'Fetching conversations for widget', {\n        sessionId,\n        projectId,\n        isDemoMode\n      });\n\n      set({ loading: true, error: null });\n\n      try {\n        if (isDemoMode) {\n          // In demo mode, just load from local storage\n          return get().loadConversations(projectId.toString());\n        }\n        \n        // Get the list of conversation IDs that belong to this widget session\n        const widgetConvKey = `widget_conversations_${sessionId}`;\n        const widgetConvIds = JSON.parse(localStorage.getItem(widgetConvKey) || '[]');\n        \n        if (widgetConvIds.length === 0) {\n          // No conversations created yet in this widget session\n          set({\n            conversations: [],\n            loading: false,\n          });\n          return;\n        }\n        \n        // Fetch conversations from API but only keep ones created in this widget session\n        const client = getClient();\n        \n        // Merge params with current state\n        const queryParams = {\n          page: params?.page ?? get().currentPage,\n          per_page: params?.per_page ?? get().perPage,\n          order: params?.order ?? get().sortOrder,\n          orderBy: params?.orderBy ?? get().sortBy,\n          userFilter: params?.userFilter ?? get().userFilter,\n        };\n        \n        const response = await client.getConversations(projectId, queryParams);\n        \n        // Handle different response formats\n        let allConversations = [];\n        let paginationData = null;\n        \n        if (response && typeof response === 'object') {\n          // Standard paginated response format\n          if ((response as any).data && (response as any).data.data) {\n            allConversations = (response as any).data.data;\n            paginationData = (response as any).data;\n          } else if (Array.isArray((response as any).data)) {\n            allConversations = (response as any).data;\n          } else if (Array.isArray(response)) {\n            allConversations = response;\n          }\n        }\n        \n        // Filter to only include conversations created in this widget session\n        const widgetConversations = allConversations.filter((conv: Conversation) => \n          widgetConvIds.includes(conv.id)\n        );\n        \n        logger.info('CONVERSATIONS', 'Filtered widget conversations', {\n          totalFromAPI: allConversations.length,\n          widgetSpecific: widgetConversations.length,\n          widgetConvIds,\n          paginationData\n        });\n        \n        // Update state with conversations and pagination data\n        set({ \n          allConversations: widgetConversations, // Store raw conversations\n          loading: false,\n          // Update pagination state if available\n          currentPage: paginationData?.current_page ?? 1,\n          totalPages: paginationData?.last_page ?? 1,\n          totalConversations: widgetConvIds.length, // Total widget conversations, not API total\n          // Update sorting/filtering if params were provided\n          ...(params?.order && { sortOrder: params.order }),\n          ...(params?.orderBy && { sortBy: params.orderBy }),\n          ...(params?.userFilter && { userFilter: params.userFilter }),\n        });\n        \n        // Apply client-side filters\n        get().applyFilters();\n        \n        // Save to local storage\n        saveConversationsToStorage(projectId.toString(), widgetConversations);\n      } catch (error) {\n        logger.error('CONVERSATIONS', 'Failed to fetch conversations', error);\n        // On error, try to load from local storage\n        const cached = loadConversationsFromStorage(projectId.toString());\n        set({ \n          conversations: cached || [],\n          error: error instanceof Error ? error.message : 'Failed to fetch conversations',\n          loading: false,\n        });\n      }\n    },\n\n    loadConversations: async (agentId: string) => {\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      logger.info('CONVERSATIONS', 'Loading conversations for widget store', {\n        sessionId,\n        agentId,\n        isDemoMode\n      });\n\n      set({ loading: true, error: null });\n\n      try {\n        // For widgets, we only load conversations from local storage that were created in this session\n        // We do NOT fetch from the API to ensure complete isolation\n        const cachedConversations = loadConversationsFromStorage(agentId);\n        \n        if (cachedConversations) {\n          // Filter to only include conversations created in this widget session\n          const sessionConversations = cachedConversations.filter(conv => \n            conv.session_id && conv.session_id.includes(sessionId)\n          );\n          \n          set({\n            allConversations: sessionConversations,\n            loading: false,\n          });\n          \n          // Apply client-side filters\n          get().applyFilters();\n          \n          logger.info('CONVERSATIONS', 'Loaded session-specific conversations', {\n            totalCached: cachedConversations.length,\n            sessionSpecific: sessionConversations.length,\n            sessionId\n          });\n        } else {\n          // No conversations yet - start with empty array\n          set({\n            allConversations: [],\n            conversations: [],\n            loading: false,\n          });\n        }\n      } catch (error) {\n        logger.error('CONVERSATIONS', 'Failed to load conversations', error);\n        set({\n          error: error instanceof Error ? error.message : 'Failed to load conversations',\n          loading: false,\n          allConversations: [],\n          conversations: [] // Start with empty on error\n        });\n      }\n    },\n\n    createConversation: async (projectId: number, name?: string): Promise<void> => {\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      logger.info('CONVERSATIONS', 'Creating conversation in widget store', {\n        sessionId,\n        projectId,\n        name\n      });\n\n      set({ loading: true, error: null });\n\n      try {\n        // Use the API to create the conversation\n        const client = getClient();\n        \n        if (isDemoMode) {\n          // Demo mode - create locally only\n          const timestamp = Date.now();\n          const random = Math.floor(Math.random() * 1000000);\n          const sessionIdForConv = `demo_session_${timestamp}_${random}_${sessionId}`;\n\n          const newConversation: Conversation = {\n            id: Math.floor(Math.random() * 1000000),\n            session_id: sessionIdForConv,\n            project_id: projectId,\n            name: name || 'New Conversation',\n            message_count: 0,\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            deleted_at: null,\n          };\n\n          set(state => ({\n            allConversations: [...state.allConversations, newConversation],\n            currentConversation: newConversation,\n            loading: false,\n          }));\n          \n          // Apply client-side filters\n          get().applyFilters();\n          \n          saveConversationsToStorage(projectId.toString(), [...get().conversations]);\n          return;\n        }\n        \n        // Create conversation via API\n        const response = await client.createConversation(projectId, name ? { name } : undefined);\n        const newConversation = response.data;\n        \n        // Ensure the conversation has our widget session ID in it for filtering\n        // Store the widget session ID in localStorage to track which conversations belong to this widget\n        const widgetConvKey = `widget_conversations_${sessionId}`;\n        const existingConvIds = JSON.parse(localStorage.getItem(widgetConvKey) || '[]');\n        existingConvIds.push(newConversation.id);\n        localStorage.setItem(widgetConvKey, JSON.stringify(existingConvIds));\n        \n        logger.info('CONVERSATIONS', 'Created conversation via API', {\n          conversationId: newConversation.id,\n          sessionId: newConversation.session_id,\n          projectId: newConversation.project_id,\n          widgetSessionId: sessionId\n        });\n        \n        set(state => ({ \n          allConversations: [...state.allConversations, newConversation],\n          currentConversation: newConversation,\n          loading: false,\n        }));\n        \n        // Apply client-side filters\n        get().applyFilters();\n        \n        // Save to local storage for this widget session\n        saveConversationsToStorage(projectId.toString(), get().conversations);\n      } catch (error) {\n        logger.error('CONVERSATIONS', 'Failed to create conversation', error);\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to create conversation',\n          loading: false \n        });\n        throw error;\n      }\n    },\n\n    updateConversation: async (conversationId: number, sessionId: string, data: { name: string }) => {\n      logger.info('CONVERSATIONS', 'Updating conversation in widget store', {\n        sessionId: sessionId,\n        conversationId,\n        data\n      });\n\n      set(state => ({\n        allConversations: state.allConversations.map(conv =>\n          conv.id.toString() === conversationId.toString()\n            ? { ...conv, name: data.name, updated_at: new Date().toISOString() }\n            : conv\n        ),\n      }));\n      \n      // Apply client-side filters\n      get().applyFilters();\n\n      // Update current conversation if it's the one being updated\n      const current = get().currentConversation;\n      if (current && current.id.toString() === conversationId.toString()) {\n        set({\n          currentConversation: { ...current, name: data.name, updated_at: new Date().toISOString() },\n        });\n      }\n\n      // Save to storage\n      const projectId = get().conversations.find(c => c.id.toString() === conversationId.toString())?.project_id;\n      if (projectId) {\n        saveConversationsToStorage(projectId.toString(), get().conversations);\n      }\n    },\n\n    deleteConversation: async (conversationId: string | number) => {\n      logger.info('CONVERSATIONS', 'Deleting conversation from widget store', {\n        sessionId,\n        conversationId\n      });\n\n      const conversation = get().allConversations.find(c => c.id.toString() === conversationId);\n      if (!conversation) return;\n\n      set(state => ({\n        allConversations: state.allConversations.filter(conv => conv.id.toString() !== conversationId),\n        currentConversation: state.currentConversation?.id.toString() === conversationId\n          ? null\n          : state.currentConversation,\n      }));\n      \n      // Apply client-side filters\n      get().applyFilters();\n\n      // Save to storage\n      saveConversationsToStorage(conversation.project_id.toString(), get().conversations);\n    },\n\n    selectConversation: (conversation: Conversation) => {\n      logger.info('CONVERSATIONS', 'Selecting conversation in widget store', {\n        sessionId,\n        conversationId: conversation?.id\n      });\n\n      set({ currentConversation: conversation });\n\n      // Update activity tracking\n      if (conversation) {\n        const activity = { ...get().lastConversationActivity };\n        activity[conversation.project_id.toString()] = conversation.id.toString();\n        set({ lastConversationActivity: activity });\n        saveActivityToStorage(activity);\n      }\n    },\n\n    ensureConversation: async (projectId: number, firstMessage?: string) => {\n      const { currentConversation } = get();\n      \n      // If we have a current conversation for this agent, use it\n      if (currentConversation && currentConversation.project_id === projectId) {\n        return currentConversation;\n      }\n\n      // If no current conversation, always create a new one\n      // This ensures that seeing the welcome screen (currentConversation = null) \n      // always results in starting a fresh conversation\n      const title = firstMessage\n        ? firstMessage.substring(0, 50) + (firstMessage.length > 50 ? '...' : '')\n        : 'New Conversation';\n      \n      await get().createConversation(projectId, title);\n      \n      // Get the newly created conversation\n      const newConversation = get().conversations[get().conversations.length - 1];\n      set({ currentConversation: newConversation });\n      \n      return newConversation;\n    },\n\n    // Client-side filtering methods\n    applyFilters: () => {\n      const state = get();\n      let filtered = [...state.allConversations];\n      \n      // Apply search filter\n      if (state.searchQuery.trim()) {\n        const query = state.searchQuery.toLowerCase().trim();\n        filtered = filtered.filter(conv => {\n          switch (state.searchMode) {\n            case 'name':\n              return conv.name.toLowerCase().includes(query);\n            case 'id':\n              return conv.id.toString().includes(query);\n            case 'session':\n              return conv.session_id.toLowerCase().includes(query);\n            default:\n              return conv.name.toLowerCase().includes(query);\n          }\n        });\n      }\n      \n      // Apply date filter\n      if (state.dateFilter !== 'all') {\n        const now = new Date();\n        const filterDate = new Date();\n        \n        switch (state.dateFilter) {\n          case 'today':\n            filterDate.setHours(0, 0, 0, 0);\n            break;\n          case 'week':\n            filterDate.setDate(now.getDate() - 7);\n            break;\n          case 'month':\n            filterDate.setDate(now.getDate() - 30);\n            break;\n        }\n        \n        filtered = filtered.filter(conv => {\n          const convDate = new Date(conv.updated_at);\n          return convDate >= filterDate;\n        });\n      }\n      \n      // Note: User filter and sorting are handled server-side by the API\n      // We don't apply them client-side to avoid conflicts\n      \n      set({ conversations: filtered });\n    },\n\n    setSearchQuery: (query: string) => {\n      set({ searchQuery: query });\n      get().applyFilters();\n    },\n\n    setSearchMode: (mode: 'name' | 'id' | 'session') => {\n      set({ searchMode: mode });\n      get().applyFilters();\n    },\n\n    setDateFilter: (filter: 'all' | 'today' | 'week' | 'month') => {\n      set({ dateFilter: filter });\n      get().applyFilters();\n    },\n\n    reset: () => {\n      set({\n        conversations: [],\n        allConversations: [],\n        currentConversation: null,\n        loading: false,\n        error: null,\n        lastConversationActivity: {},\n        searchQuery: '',\n        searchMode: 'name' as const,\n        dateFilter: 'all' as const,\n      });\n    },\n  }));\n}","/**\n * Widget-specific Agent Store Factory\n * \n * Creates an isolated agent store instance for each widget.\n * This ensures agent selection is not shared between different widget instances.\n */\n\nimport { create, StoreApi } from 'zustand';\nimport type { Agent } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\n\n// Agent Store interface - widget-specific version with minimal methods\nexport interface AgentStore {\n  agents: Agent[];\n  currentAgent: Agent | null;\n  loading: boolean;\n  error: string | null;\n  \n  loadAgents: () => Promise<void>;\n  fetchAgents: () => Promise<void>; // Alias for compatibility\n  selectAgent: (agent: Agent) => void;\n  setAgents: (agents: Agent[]) => void;\n  updateAgent: (id: number, data: { are_licenses_allowed?: boolean }) => Promise<Agent>;\n  deleteAgent: (id: number) => Promise<void>;\n  createAgent: (data: any) => Promise<Agent>;\n  replicateAgent: (id: number) => Promise<Agent>;\n  getAgentStats: (id: number) => Promise<any>;\n  reset: () => void;\n}\n\n/**\n * Create an agent store instance for a specific widget\n * @param sessionId - The widget's session ID for isolation\n */\nexport function createAgentStore(sessionId: string): StoreApi<AgentStore> {\n  const AGENTS_STORAGE_KEY = `customgpt-agents-cache-${sessionId}`;\n  const SELECTED_AGENT_KEY = `customgpt-selected-agent-${sessionId}`;\n  \n  // Local storage helpers scoped to this instance\n  function saveAgentsToStorage(agents: Agent[]) {\n    try {\n      localStorage.setItem(AGENTS_STORAGE_KEY, JSON.stringify(agents));\n    } catch (error) {\n      console.error('Failed to save agents to storage:', error);\n    }\n  }\n\n  function loadAgentsFromStorage(): Agent[] | null {\n    try {\n      const stored = localStorage.getItem(AGENTS_STORAGE_KEY);\n      return stored ? JSON.parse(stored) : null;\n    } catch (error) {\n      console.error('Failed to load agents from storage:', error);\n      return null;\n    }\n  }\n\n  function saveSelectedAgentToStorage(agentId: string | null) {\n    try {\n      if (agentId) {\n        localStorage.setItem(SELECTED_AGENT_KEY, agentId);\n      } else {\n        localStorage.removeItem(SELECTED_AGENT_KEY);\n      }\n    } catch (error) {\n      console.error('Failed to save selected agent to storage:', error);\n    }\n  }\n\n  function loadSelectedAgentFromStorage(): string | null {\n    try {\n      return localStorage.getItem(SELECTED_AGENT_KEY);\n    } catch (error) {\n      console.error('Failed to load selected agent from storage:', error);\n      return null;\n    }\n  }\n\n  return create<AgentStore>((set, get) => ({\n    agents: [],\n    currentAgent: null,\n    loading: false,\n    error: null,\n\n    fetchAgents: async () => {\n      // Alias for loadAgents for compatibility\n      return get().loadAgents();\n    },\n\n    loadAgents: async () => {\n      const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n      \n      // Get widget instance from window using session ID\n      let widget = null;\n      if (typeof window !== 'undefined') {\n        // Try multiple possible keys where widget might be stored\n        const widgetKey = `__customgpt_widget_${sessionId}`;\n        widget = (window as any)[widgetKey];\n        \n        // Fallback to check the instances object\n        if (!widget) {\n          const instances = (window as any).__customgpt_widget_instances;\n          widget = instances?.[sessionId];\n        }\n        \n        // Fallback to the main instance for backward compatibility\n        if (!widget) {\n          widget = (window as any).__customgpt_widget_instance;\n        }\n      }\n      \n      logger.info('AGENTS', 'Loading agents for widget store', {\n        sessionId,\n        isDemoMode,\n        hasWidget: !!widget,\n        configuredAgentId: widget?.config?.agentId\n      });\n\n      set({ loading: true, error: null });\n\n      try {\n        // If widget has a configured agentId, create the agent directly\n        if (widget?.config?.agentId) {\n          const agentId = typeof widget.config.agentId === 'string' ? parseInt(widget.config.agentId) : widget.config.agentId;\n          \n          // Create fallback agent immediately to ensure widget works\n          const fallbackAgent: Agent = {\n            id: agentId,\n            project_name: widget.config.agentName || widget.config.name || `Agent ${agentId}`,\n            type: 'WIDGET',\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            is_chat_active: true,\n            is_shared: false,\n            user_id: 0,\n            team_id: 0,\n            settings: {\n              chatbot_avatar: './logo.png'\n            }\n          };\n          \n          logger.info('AGENTS', 'Creating fallback agent for widget', {\n            agentId,\n            agentName: fallbackAgent.project_name,\n            isDemoMode\n          });\n          \n          set({\n            agents: [fallbackAgent],\n            currentAgent: fallbackAgent,\n            loading: false,\n          });\n          \n          saveAgentsToStorage([fallbackAgent]);\n          saveSelectedAgentToStorage(fallbackAgent.id.toString());\n          \n          // Try to fetch the actual agent details in the background\n          if (!isDemoMode) {\n            try {\n              const client = getClient();\n              const response = await client.getAgent(agentId);\n              const agent = response.data || response;\n              \n              // Fetch agent settings to get chatbot_avatar and other settings\n              try {\n                const settingsResponse = await client.getAgentSettings(agentId);\n                const settings = settingsResponse.data || settingsResponse;\n                \n                // Merge settings into agent object\n                agent.settings = settings;\n                \n                logger.info('AGENTS', 'Fetched agent settings', {\n                  agentId: agent.id,\n                  hasAvatar: !!settings?.chatbot_avatar,\n                  avatarUrl: settings?.chatbot_avatar\n                });\n              } catch (settingsError) {\n                logger.warn('AGENTS', 'Failed to fetch agent settings', settingsError);\n                // Use default settings with logo\n                agent.settings = {\n                  chatbot_avatar: './logo.png'\n                };\n              }\n              \n              // Apply custom name if provided\n              if (widget.config.agentName) {\n                agent.project_name = widget.config.agentName;\n              }\n              \n              logger.info('AGENTS', 'Updated agent with API data', {\n                agentId: agent.id,\n                agentName: agent.project_name,\n                hasSettings: !!agent.settings,\n                avatarUrl: agent.settings?.chatbot_avatar\n              });\n              \n              // Update the store with the actual agent data\n              set({\n                agents: [agent],\n                currentAgent: agent,\n                loading: false,\n              });\n              \n              saveAgentsToStorage([agent]);\n              saveSelectedAgentToStorage(agent.id.toString());\n            } catch (error) {\n              logger.warn('AGENTS', 'Failed to fetch agent from API, using fallback', error);\n              // Keep the fallback agent that was already set\n            }\n          }\n          \n          return;\n        }\n        \n        // If no widget configuration found, create a basic demo agent\n        if (!widget) {\n          logger.warn('AGENTS', 'No widget configuration found, creating demo agent');\n          const demoAgent: Agent = {\n            id: 1,\n            project_name: 'Demo Assistant',\n            type: 'DEMO',\n            created_at: new Date().toISOString(),\n            updated_at: new Date().toISOString(),\n            is_chat_active: true,\n            is_shared: false,\n            user_id: 0,\n            team_id: 0,\n            settings: {\n              chatbot_avatar: './logo.png'\n            }\n          };\n          \n          set({\n            agents: [demoAgent],\n            currentAgent: demoAgent,\n            loading: false,\n          });\n          \n          saveAgentsToStorage([demoAgent]);\n          saveSelectedAgentToStorage(demoAgent.id.toString());\n          return;\n        }\n\n        // No specific agent ID - fetch agents from API with enterprise-scale pagination\n        if (!isDemoMode) {\n          const client = getClient();\n          // Load first batch with larger page size for better widget performance\n          const response = await client.getAgents({ page: 1, per_page: 100 });\n          \n          // Handle different response formats\n          let agents: Agent[] = [];\n          if (response && typeof response === 'object') {\n            if ('data' in response && 'total' in response) {\n              // Paginated response format\n              agents = (response as { data: Agent[] }).data;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              agents = (response as any).data;\n            } else if (Array.isArray(response)) {\n              // Legacy format: [...]\n              agents = response as Agent[];\n            }\n          }\n          \n          logger.info('AGENTS', 'Fetched agents from API (first page)', {\n            count: agents.length,\n            total: (response as any)?.total || agents.length\n          });\n          \n          // Select first agent or previously selected\n          const selectedAgentId = loadSelectedAgentFromStorage();\n          const selectedAgent = selectedAgentId \n            ? agents.find(a => a.id.toString() === selectedAgentId) || agents[0]\n            : agents[0];\n          \n          set({\n            agents,\n            currentAgent: selectedAgent || null,\n            loading: false,\n          });\n          \n          saveAgentsToStorage(agents);\n          if (selectedAgent) {\n            saveSelectedAgentToStorage(selectedAgent.id.toString());\n          }\n          return;\n        }\n\n        // Demo mode without specific agent ID\n        if (isDemoMode) {\n          // Create demo agents\n          const demoAgents: Agent[] = [\n            {\n              id: 1,\n              project_name: 'Demo Assistant',\n              type: 'DEMO',\n              created_at: new Date().toISOString(),\n              updated_at: new Date().toISOString(),\n              is_chat_active: true,\n              is_shared: false,\n              user_id: 0,\n              team_id: 0,\n              settings: {\n                chatbot_avatar: '/logo.png'\n              }\n            },\n          ];\n          \n          set({\n            agents: demoAgents,\n            currentAgent: demoAgents[0],\n            loading: false,\n          });\n          \n          saveAgentsToStorage(demoAgents);\n          saveSelectedAgentToStorage(demoAgents[0].id.toString());\n          return;\n        }\n\n        // Should not reach here\n        set({\n          agents: [],\n          currentAgent: null,\n          loading: false,\n        });\n      } catch (error) {\n        logger.error('AGENTS', 'Failed to load agents', error);\n        set({\n          error: error instanceof Error ? error.message : 'Failed to load agents',\n          loading: false,\n        });\n      }\n    },\n\n    selectAgent: (agent: Agent) => {\n      logger.info('AGENTS', 'Selecting agent in widget store', {\n        sessionId,\n        agentId: agent?.id,\n        agentName: agent?.project_name\n      });\n\n      set({ currentAgent: agent });\n      saveSelectedAgentToStorage(agent?.id.toString() || null);\n\n      // Update widget instance if available\n      const widgetKey = `__customgpt_widget_${sessionId}`;\n      const widget = typeof window !== 'undefined' ? (window as any)[widgetKey] : null;\n      \n      if (widget && agent) {\n        widget.config.agentId = agent.id;\n        widget.config.name = agent.project_name;\n      }\n    },\n\n    setAgents: (agents: Agent[]) => {\n      set({ agents });\n      saveAgentsToStorage(agents);\n    },\n\n    updateAgent: async (id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }) => {\n      logger.info('AGENTS', 'Updating agent in widget store', {\n        sessionId,\n        agentId: id,\n        data\n      });\n\n      const agent = get().agents.find(a => a.id === id);\n      if (!agent) {\n        throw new Error('Agent not found');\n      }\n\n      const updatedAgent = { ...agent, ...data };\n      \n      set(state => ({\n        agents: state.agents.map(a =>\n          a.id === id ? updatedAgent : a\n        ),\n        currentAgent: state.currentAgent?.id === id\n          ? updatedAgent\n          : state.currentAgent,\n      }));\n\n      // Save to storage\n      saveAgentsToStorage(get().agents);\n      \n      return updatedAgent;\n    },\n\n    deleteAgent: async (id: number) => {\n      logger.info('AGENTS', 'Deleting agent from widget store', {\n        sessionId,\n        agentId: id\n      });\n\n      set(state => ({\n        agents: state.agents.filter(a => a.id !== id),\n        currentAgent: state.currentAgent?.id === id ? null : state.currentAgent,\n      }));\n\n      // Save to storage\n      saveAgentsToStorage(get().agents);\n    },\n\n    createAgent: async (data: any) => {\n      // Widgets typically don't create agents, but we need this for compatibility\n      throw new Error('Creating agents is not supported in widget mode');\n    },\n\n    replicateAgent: async (id: number) => {\n      // Widgets typically don't replicate agents\n      throw new Error('Replicating agents is not supported in widget mode');\n    },\n\n    getAgentStats: async (id: number) => {\n      // Return empty stats for widget mode\n      return {\n        messages_sent: 0,\n        users_interacted: 0,\n        last_message_at: null\n      };\n    },\n\n    reset: () => {\n      set({\n        agents: [],\n        currentAgent: null,\n        loading: false,\n        error: null,\n      });\n      \n      // Clear storage\n      try {\n        localStorage.removeItem(AGENTS_STORAGE_KEY);\n        localStorage.removeItem(SELECTED_AGENT_KEY);\n      } catch (error) {\n        console.error('Failed to clear agent storage:', error);\n      }\n    },\n  }));\n}","import React, { createContext, useContext, useRef, ReactNode } from 'react';\nimport { StoreApi } from 'zustand';\nimport { createMessageStore, MessageStore } from '../store/widget-stores/messages';\nimport { createConversationStore, ConversationStore } from '../store/widget-stores/conversations';\nimport { createAgentStore, AgentStore } from '../store/widget-stores/agents';\n\n/**\n * Widget Store Context\n * \n * Provides instance-specific Zustand stores for each widget.\n * This ensures complete data isolation between multiple widgets.\n * \n * Each widget instance gets its own:\n * - Message store (for chat messages)\n * - Conversation store (for conversation management)\n * - Agent store (for agent selection)\n * \n * The config store remains global as API configuration should be shared.\n */\n\ninterface WidgetStores {\n  messageStore: StoreApi<MessageStore>;\n  conversationStore: StoreApi<ConversationStore>;\n  agentStore: StoreApi<AgentStore>;\n}\n\ninterface WidgetStoreContextValue {\n  stores: WidgetStores;\n}\n\nexport const WidgetStoreContext = createContext<WidgetStoreContextValue | null>(null);\n\ninterface WidgetStoreProviderProps {\n  children: ReactNode;\n  sessionId: string;\n}\n\n/**\n * Widget Store Provider\n * \n * Creates and provides instance-specific stores for a widget.\n * Stores are created once per widget instance and reused.\n */\nexport const WidgetStoreProvider: React.FC<WidgetStoreProviderProps> = ({ \n  children, \n  sessionId \n}) => {\n  // Use ref to ensure stores are only created once per widget instance\n  const storesRef = useRef<WidgetStores | null>(null);\n  \n  if (!storesRef.current) {\n    // Create stores in the correct order, passing references to dependent stores\n    const agentStore = createAgentStore(sessionId);\n    const conversationStore = createConversationStore(sessionId);\n    const messageStore = createMessageStore(sessionId, agentStore, conversationStore);\n    \n    storesRef.current = {\n      messageStore,\n      conversationStore,\n      agentStore,\n    };\n    \n    // Store the widget stores globally for access by the widget instance\n    if (typeof window !== 'undefined') {\n      if (!(window as any).__customgpt_widget_stores) {\n        (window as any).__customgpt_widget_stores = {};\n      }\n      (window as any).__customgpt_widget_stores[sessionId] = storesRef.current;\n    }\n  }\n  \n  return (\n    <WidgetStoreContext.Provider value={{ stores: storesRef.current }}>\n      {children}\n    </WidgetStoreContext.Provider>\n  );\n};\n\n/**\n * Hook to access widget-specific stores\n */\nexport const useWidgetStores = (): WidgetStores => {\n  const context = useContext(WidgetStoreContext);\n  if (!context) {\n    throw new Error('useWidgetStores must be used within WidgetStoreProvider');\n  }\n  return context.stores;\n};\n\n/**\n * Individual store hooks for easier access\n */\nexport const useWidgetMessageStore = () => {\n  const { messageStore } = useWidgetStores();\n  return messageStore;\n};\n\nexport const useWidgetConversationStore = () => {\n  const { conversationStore } = useWidgetStores();\n  return conversationStore;\n};\n\nexport const useWidgetAgentStore = () => {\n  const { agentStore } = useWidgetStores();\n  return agentStore;\n};","import React from 'react';\nimport { toast as globalToast, Toaster } from 'sonner';\n\n/**\n * Isolated toast implementation for widgets\n * \n * Creates widget-specific toast notifications that don't interfere\n * with other widget instances or the main application.\n */\n\n// Store widget-specific toast queues\nconst widgetToastQueues = new Map<string, Array<any>>();\n\n/**\n * Widget-specific Toaster component\n * This component only shows toasts for its specific widget session\n */\nexport const WidgetToaster: React.FC<{ sessionId: string }> = ({ sessionId }) => {\n  // Create a filter function that only shows toasts for this widget\n  return (\n    <Toaster \n      position=\"top-center\"\n      closeButton\n      gap={8}\n      toastOptions={{\n        style: { \n          zIndex: 10000,\n          marginTop: '8px'\n        },\n        // Custom class to identify widget-specific toasts\n        className: `widget-toast-${sessionId}`,\n      }}\n      // Filter toasts to only show those for this widget\n      richColors\n      theme=\"light\"\n    />\n  );\n};\n\n/**\n * Get or create a widget-specific toast instance\n */\nexport function getWidgetToast(sessionId: string) {\n  // Initialize queue if not exists\n  if (!widgetToastQueues.has(sessionId)) {\n    widgetToastQueues.set(sessionId, []);\n  }\n  \n  return {\n    success: (message: string, options?: any) => {\n      // Use data attribute to mark widget-specific toasts\n      globalToast.success(message, {\n        ...options,\n        id: `${sessionId}-${Date.now()}-${Math.random()}`,\n        duration: 3000,\n        className: `widget-toast-${sessionId}`,\n        data: {\n          widgetSessionId: sessionId\n        }\n      });\n    },\n    error: (message: string, options?: any) => {\n      globalToast.error(message, {\n        ...options,\n        id: `${sessionId}-${Date.now()}-${Math.random()}`,\n        duration: 4000,\n        className: `widget-toast-${sessionId}`,\n        data: {\n          widgetSessionId: sessionId\n        }\n      });\n    },\n    info: (message: string, options?: any) => {\n      globalToast.info(message, {\n        ...options,\n        id: `${sessionId}-${Date.now()}-${Math.random()}`,\n        duration: 3000,\n        className: `widget-toast-${sessionId}`,\n        data: {\n          widgetSessionId: sessionId\n        }\n      });\n    },\n    warning: (message: string, options?: any) => {\n      globalToast.warning(message, {\n        ...options,\n        id: `${sessionId}-${Date.now()}-${Math.random()}`,\n        duration: 3500,\n        className: `widget-toast-${sessionId}`,\n        data: {\n          widgetSessionId: sessionId\n        }\n      });\n    },\n    loading: (message: string, options?: any) => {\n      return globalToast.loading(message, {\n        ...options,\n        id: `${sessionId}-${Date.now()}-${Math.random()}`,\n        className: `widget-toast-${sessionId}`,\n        data: {\n          widgetSessionId: sessionId\n        }\n      });\n    },\n    dismiss: (id?: string) => {\n      if (id) {\n        globalToast.dismiss(id);\n      }\n    }\n  };\n}\n\n/**\n * Hook to use widget-specific toast in components\n */\nexport function useWidgetToast(sessionId: string) {\n  return getWidgetToast(sessionId);\n}","import React, { createContext, useContext, useMemo } from 'react';\nimport { getWidgetToast } from './isolated-toast';\n\n// Widget instance type - we'll define the actual widget interface based on what we need\ninterface WidgetInstance {\n  sessionId: string;\n  createConversation: (title?: string) => any;\n  switchConversation: (conversationId: string) => void;\n  getConversations: () => any[];\n  updateConversationTitle: (conversationId: string, newTitle: string) => void;\n  deleteConversation: (conversationId: string) => void;\n  configuration?: any;\n}\n\n// Extended context that includes both widget instance and toast\ninterface WidgetContextValue {\n  widget: WidgetInstance;\n  toast: ReturnType<typeof getWidgetToast>;\n}\n\n// Create the context with undefined default\nconst WidgetContext = createContext<WidgetContextValue | undefined>(undefined);\n\n// Provider component props\ninterface WidgetProviderProps {\n  widgetInstance: WidgetInstance;\n  children: React.ReactNode;\n}\n\n// Provider component that will wrap the widget's React tree\nexport const WidgetProvider: React.FC<WidgetProviderProps> = ({ widgetInstance, children }) => {\n  // Create isolated toast instance for this widget\n  const toast = useMemo(() => getWidgetToast(widgetInstance.sessionId), [widgetInstance.sessionId]);\n  \n  const value = useMemo(() => ({\n    widget: widgetInstance,\n    toast\n  }), [widgetInstance, toast]);\n  \n  return (\n    <WidgetContext.Provider value={value}>\n      {children}\n    </WidgetContext.Provider>\n  );\n};\n\n// Custom hook to use the widget instance from any component\nexport const useWidget = (): WidgetInstance => {\n  const context = useContext(WidgetContext);\n  if (!context) {\n    throw new Error('useWidget must be used within a WidgetProvider');\n  }\n  return context.widget;\n};\n\n// Optional: Hook that returns null instead of throwing if no widget context\nexport const useWidgetSafe = (): WidgetInstance | null => {\n  const context = useContext(WidgetContext);\n  return context?.widget || null;\n};\n\n// Hook to use the widget-specific toast\nexport const useWidgetToast = () => {\n  const context = useContext(WidgetContext);\n  if (!context) {\n    throw new Error('useWidgetToast must be used within a WidgetProvider');\n  }\n  return context.toast;\n};","/**\n * Citation Details Modal Component\n * \n * Modal dialog that displays detailed information about a citation,\n * including Open Graph data fetched from the cited source.\n * \n * Features:\n * - Open Graph data display (title, description, image)\n * - Loading and error states\n * - Responsive modal design\n * - Image preview with error handling\n * - Direct link to source\n * - Citation metadata display\n * - Smooth animations\n * \n * API Integration:\n * - Fetches citation details via getCitation API\n * - Handles Open Graph data response\n * - Graceful error handling\n * - Automatic retry on prop changes\n * \n * UI/UX:\n * - Backdrop click to close\n * - Escape key support (via close button)\n * - Loading spinner during fetch\n * - Error message display\n * - Image fallback on load error\n * \n * Features:\n * - Advanced citation caching for improved performance\n * - Professional sharing and bookmarking functionality\n * - Enhanced image preview with zoom and gallery modes\n * - Citation analytics and usage tracking\n * - Comprehensive export options and related citation discovery\n */\n\n'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  ExternalLink,\n  Loader,\n  AlertCircle,\n  Globe,\n  Image as ImageIcon\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { useAgentStore } from '@/store/agents';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\nimport { useWidgetAgentStore } from '@/widget/WidgetStoreContext';\nimport { useWidgetSafe } from '@/widget/WidgetContext';\n\n/**\n * Open Graph data structure for citations\n * \n * @property id - Citation ID\n * @property url - Source URL\n * @property title - Page title from Open Graph\n * @property description - Page description\n * @property image - Optional preview image URL\n */\ninterface CitationOpenGraphData {\n  id: number;\n  url: string;\n  title: string;\n  description: string;\n  image?: string;\n}\n\n/**\n * Props for CitationDetailsModal\n * \n * @property isOpen - Whether modal is visible\n * @property onClose - Callback to close modal\n * @property citationId - ID of citation to display\n * @property projectId - Optional project ID (uses current agent if not provided)\n */\ninterface CitationDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: number | string;\n  projectId?: number;\n}\n\n/**\n * Citation Details Modal Component\n * \n * Displays rich preview of citation with Open Graph data.\n * Fetches citation details from API when opened.\n */\nexport const CitationDetailsModal: React.FC<CitationDetailsModalProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  projectId\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [citationData, setCitationData] = useState<CitationOpenGraphData | null>(null);\n  const [imageError, setImageError] = useState(false);\n  \n  const { isMobile } = useBreakpoint();\n  const widgetInstance = useWidgetSafe();\n  \n  // Use widget store in widget mode, global store otherwise\n  let currentAgent;\n  if (widgetInstance) {\n    try {\n      const widgetAgentStore = useWidgetAgentStore();\n      currentAgent = widgetAgentStore.getState().currentAgent;\n    } catch (error) {\n      // Fallback to global store\n      const { currentAgent: globalAgent } = useAgentStore();\n      currentAgent = globalAgent;\n    }\n  } else {\n    const { currentAgent: globalAgent } = useAgentStore();\n    currentAgent = globalAgent;\n  }\n  \n  const effectiveProjectId = projectId || currentAgent?.id;\n\n  /**\n   * Fetch citation Open Graph data from API\n   * \n   * Handles:\n   * - Parameter validation\n   * - API call with proper typing\n   * - Error handling with user-friendly messages\n   * - Loading state management\n   * - Logging for debugging\n   */\n  const fetchCitationDetails = useCallback(async () => {\n    if (!effectiveProjectId || !citationId) {\n      setError('Missing project or citation information');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    setImageError(false);\n\n    try {\n      const client = getClient();\n      const response = await client.getCitation(\n        effectiveProjectId, \n        typeof citationId === 'string' ? parseInt(citationId, 10) : citationId\n      );\n      \n      if (response.data) {\n        setCitationData(response.data as unknown as CitationOpenGraphData);\n        logger.info('CITATION', 'Citation details fetched', {\n          citationId,\n          projectId: effectiveProjectId,\n          hasImage: !!response.data.image\n        });\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch citation details';\n      setError(errorMessage);\n      logger.error('CITATION', 'Failed to fetch citation details', {\n        error: err,\n        citationId,\n        projectId: effectiveProjectId\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [effectiveProjectId, citationId]);\n\n  /**\n   * Fetch citation details when modal opens\n   * \n   * Triggers API call when modal becomes visible and required data is available\n   */\n  useEffect(() => {\n    if (isOpen && effectiveProjectId && citationId) {\n      fetchCitationDetails();\n    }\n  }, [isOpen, effectiveProjectId, citationId, fetchCitationDetails]);\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            onClick={onClose}\n            className=\"fixed inset-0 bg-black/50 z-50\"\n          />\n\n          {/* Modal */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            className={cn(\n              \"fixed bg-background shadow-xl z-50\",\n              isMobile \n                ? \"inset-x-0 bottom-0 top-20 rounded-t-xl flex flex-col\" \n                : \"inset-x-0 top-[10%] mx-auto max-w-2xl rounded-lg max-h-[90vh] overflow-hidden\"\n            )}\n          >\n          {/* Header */}\n          <div className={cn(\n            \"flex items-center justify-between border-b border-border bg-background/95 backdrop-blur-sm flex-shrink-0\",\n            isMobile ? \"px-4 py-4\" : \"p-4\"\n          )}>\n            <h2 className={cn(\n              \"font-semibold text-foreground\",\n              isMobile ? \"text-lg\" : \"text-lg\"\n            )}>\n              Citation Details\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className={cn(\n                isMobile ? \"h-9 w-9 touch-target\" : \"h-8 w-8\"\n              )}\n            >\n              <X className={cn(\n                isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n              )} />\n            </Button>\n          </div>\n\n          {/* Content */}\n          <div className={cn(\n            \"overflow-y-auto\",\n            isMobile \n              ? \"flex-1 px-4 py-4 pb-6 safe-area-pb\" \n              : \"p-4 max-h-[calc(90vh-120px)]\"\n          )}>\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n              </div>\n            ) : error ? (\n              <div className={cn(\n                \"flex items-center gap-3 p-4 bg-red-50 dark:bg-red-950/20 rounded-lg\",\n                isMobile && \"mx-0\"\n              )}>\n                <AlertCircle className={cn(\n                  \"text-red-600 flex-shrink-0\",\n                  isMobile ? \"h-5 w-5\" : \"h-5 w-5\"\n                )} />\n                <div className=\"flex-1\">\n                  <p className={cn(\n                    \"font-medium text-red-900 dark:text-red-200\",\n                    isMobile ? \"text-sm\" : \"text-sm\"\n                  )}>Error loading citation</p>\n                  <p className={cn(\n                    \"text-red-700 dark:text-red-300 mt-1\",\n                    isMobile ? \"text-xs\" : \"text-sm\"\n                  )}>{error}</p>\n                </div>\n              </div>\n            ) : citationData ? (\n              <div className={cn(\n                \"space-y-4\",\n                isMobile && \"space-y-5\"\n              )}>\n                {/* Open Graph Image */}\n                {citationData.image && !imageError && (\n                  <div className={cn(\n                    \"relative rounded-lg overflow-hidden bg-muted\",\n                    isMobile && \"-mx-4 rounded-none\"\n                  )}>\n                    <img\n                      src={citationData.image}\n                      alt={citationData.title}\n                      className=\"w-full h-auto\"\n                      onError={() => setImageError(true)}\n                    />\n                    {isMobile && (\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent pointer-events-none\" />\n                    )}\n                  </div>\n                )}\n\n                {/* Title */}\n                <div>\n                  <h3 className={cn(\n                    \"font-semibold text-foreground\",\n                    isMobile ? \"text-lg leading-tight\" : \"text-xl\"\n                  )}>\n                    {citationData.title}\n                  </h3>\n                </div>\n\n                {/* URL */}\n                <div className={cn(\n                  \"flex items-center gap-2 text-muted-foreground\",\n                  isMobile ? \"text-sm\" : \"text-sm\"\n                )}>\n                  <Globe className={cn(\n                    \"flex-shrink-0\",\n                    isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                  )} />\n                  <a\n                    href={citationData.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className={cn(\n                      \"hover:text-brand-600 transition-colors\",\n                      isMobile ? \"break-all\" : \"truncate\"\n                    )}\n                  >\n                    {citationData.url}\n                  </a>\n                </div>\n\n                {/* Description */}\n                {citationData.description && (\n                  <div className=\"prose prose-gray dark:prose-invert max-w-none\">\n                    <p className={cn(\n                      \"text-foreground\",\n                      isMobile ? \"text-sm leading-relaxed\" : \"\"\n                    )}>{citationData.description}</p>\n                  </div>\n                )}\n\n                {/* Metadata */}\n                <div className={cn(\n                  \"pt-4 border-t border-border space-y-3\",\n                  isMobile && \"space-y-3\"\n                )}>\n                  <div className={cn(\n                    \"flex items-center justify-between\",\n                    isMobile ? \"text-sm\" : \"text-sm\"\n                  )}>\n                    <span className=\"text-muted-foreground\">Citation ID</span>\n                    <span className={cn(\n                      \"font-mono text-foreground\",\n                      isMobile ? \"text-base\" : \"\"\n                    )}>#{citationData.id}</span>\n                  </div>\n                  {citationData.image && (\n                    <div className={cn(\n                      \"flex items-center justify-between\",\n                      isMobile ? \"text-sm\" : \"text-sm\"\n                    )}>\n                      <span className=\"text-muted-foreground\">Has preview image</span>\n                      <ImageIcon className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                    </div>\n                  )}\n                </div>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className={cn(\n            \"border-t bg-muted flex-shrink-0\",\n            isMobile ? \"p-4 safe-area-pb\" : \"p-4\"\n          )}>\n            <div className={cn(\n              \"flex items-center\",\n              isMobile ? \"flex-col gap-3\" : \"justify-between\"\n            )}>\n              <div className={cn(\n                \"text-muted-foreground\",\n                isMobile ? \"text-xs text-center\" : \"text-xs\"\n              )}>\n                Open Graph data from cited source\n              </div>\n              {citationData && (\n                <a\n                  href={citationData.url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className={cn(\n                    \"inline-flex items-center gap-2 font-medium text-brand-600 hover:text-brand-700 transition-colors\",\n                    isMobile \n                      ? \"w-full justify-center bg-brand-600 text-white hover:bg-brand-700 hover:text-white rounded-lg px-4 py-3 text-base touch-target\" \n                      : \"px-3 py-1.5 text-sm\"\n                  )}\n                >\n                  Visit source\n                  <ExternalLink className={cn(\n                    isMobile ? \"h-4 w-4\" : \"h-3.5 w-3.5\"\n                  )} />\n                </a>\n              )}\n            </div>\n          </div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};","'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  FileText,\n  Download,\n  Loader,\n  AlertCircle,\n  Copy,\n  Check\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { toast } from 'sonner';\n\ninterface CitationFilePreviewProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: string;\n  fileName?: string;\n}\n\nexport const CitationFilePreview: React.FC<CitationFilePreviewProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  fileName = 'Citation File'\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [fileContent, setFileContent] = useState<string | null>(null);\n  const [contentType, setContentType] = useState<string>('text/plain');\n  const [copied, setCopied] = useState(false);\n\n  const fetchFilePreview = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const client = getClient();\n      const response = await client.previewCitationFile(citationId);\n      \n      // Handle different response formats\n      if (typeof response === 'string') {\n        setFileContent(response);\n        setContentType('text/plain');\n      } else if (response.data) {\n        setFileContent(response.data.content || response.data);\n        setContentType(response.data.content_type || 'text/plain');\n      } else {\n        setFileContent(JSON.stringify(response, null, 2));\n        setContentType('application/json');\n      }\n      \n      logger.info('CITATION_PREVIEW', 'File preview fetched', {\n        citationId,\n        contentLength: fileContent?.length\n      });\n    } catch (err: any) {\n      logger.error('CITATION_PREVIEW', 'Failed to fetch file preview', {\n        error: err,\n        citationId\n      });\n      \n      if (err.status === 400) {\n        setError('Invalid citation ID.');\n      } else if (err.status === 401) {\n        setError('Authentication failed. Please log in again.');\n      } else if (err.status === 403) {\n        setError('Access denied. You do not have permission to view this file.');\n      } else if (err.status === 404) {\n        setError('Citation file not found.');\n      } else if (err.status === 500) {\n        setError('Server error. Please try again later.');\n      } else {\n        setError('Failed to load file preview.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [citationId]);\n\n  useEffect(() => {\n    if (isOpen && citationId) {\n      fetchFilePreview();\n    }\n  }, [isOpen, citationId, fetchFilePreview]);\n\n  const handleCopy = async () => {\n    if (!fileContent) return;\n    \n    try {\n      await navigator.clipboard.writeText(fileContent);\n      setCopied(true);\n      toast.success('Content copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      toast.error('Failed to copy content');\n    }\n  };\n\n  const handleDownload = () => {\n    if (!fileContent) return;\n    \n    const blob = new Blob([fileContent], { type: contentType });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast.success('File downloaded');\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        {/* Backdrop */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onClick={onClose}\n          className=\"absolute inset-0 bg-black/50\"\n        />\n\n        {/* Modal */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.95 }}\n          className=\"relative bg-background rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden\"\n        >\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-border\">\n            <div className=\"flex items-center gap-3\">\n              <FileText className=\"h-5 w-5 text-muted-foreground\" />\n              <h2 className=\"text-lg font-semibold text-foreground\">\n                {fileName}\n              </h2>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleCopy}\n                disabled={!fileContent}\n              >\n                {copied ? (\n                  <>\n                    <Check className=\"h-4 w-4 mr-2\" />\n                    Copied\n                  </>\n                ) : (\n                  <>\n                    <Copy className=\"h-4 w-4 mr-2\" />\n                    Copy\n                  </>\n                )}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleDownload}\n                disabled={!fileContent}\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onClose}\n                className=\"h-8 w-8\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-4 overflow-y-auto max-h-[calc(90vh-120px)]\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n              </div>\n            ) : error ? (\n              <div className=\"flex items-center gap-3 p-4 bg-red-50 rounded-lg\">\n                <AlertCircle className=\"h-5 w-5 text-red-600 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-destructive\">Error loading file</p>\n                  <p className=\"text-sm text-destructive/90 mt-1\">{error}</p>\n                </div>\n              </div>\n            ) : fileContent ? (\n              <div className=\"font-mono text-sm bg-accent rounded-lg p-4 text-foreground\">\n                <pre className=\"whitespace-pre-wrap break-words\">\n                  {fileContent}\n                </pre>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t border-border bg-accent\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-xs text-muted-foreground\">\n                Citation ID: {citationId}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                {contentType}\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};","/**\n * Conversation Manager Component\n * \n * Provides conversation switching UI for widget and floating modes.\n * Shows a list of conversations with ability to create new ones and switch between them.\n * \n * Features:\n * - Conversation list with titles and timestamps\n * - Create new conversation button\n * - Switch between conversations\n * - Edit conversation titles inline\n * - Delete conversations\n * - Session-based isolation\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Plus, MessageCircle, Edit2, Trash2, Check, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils';\n\ninterface Conversation {\n  id: string;\n  title: string;\n  createdAt: string;\n  messages: any[];\n}\n\ninterface ConversationManagerProps {\n  sessionId: string;\n  maxConversations?: number;\n  currentConversationId?: string;\n  onConversationChange?: (conversation: Conversation) => void;\n  onCreateConversation?: () => void;\n  className?: string;\n  refreshKey?: number; // Add refresh key to force re-render\n}\n\nexport const ConversationManager: React.FC<ConversationManagerProps> = ({\n  sessionId,\n  maxConversations,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  className,\n  refreshKey,\n}) => {\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editTitle, setEditTitle] = useState('');\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Load conversations from localStorage\n  useEffect(() => {\n    const loadConversations = () => {\n      const stored = localStorage.getItem(`customgpt_conversations_${sessionId}`);\n      if (stored) {\n        try {\n          const parsed = JSON.parse(stored);\n          setConversations(parsed);\n        } catch (e) {\n          console.error('Failed to parse conversations:', e);\n        }\n      }\n    };\n\n    loadConversations();\n    // Listen for storage changes\n    window.addEventListener('storage', loadConversations);\n    return () => window.removeEventListener('storage', loadConversations);\n  }, [sessionId, refreshKey]); // Add refreshKey as dependency\n\n  const handleCreateConversation = () => {\n    if (maxConversations && conversations.length >= maxConversations) {\n      toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n      return;\n    }\n    onCreateConversation?.();\n  };\n\n  const handleSelectConversation = (conversation: Conversation) => {\n    onConversationChange?.(conversation);\n    setIsExpanded(false);\n  };\n\n  const handleEditStart = (conversation: Conversation) => {\n    setEditingId(conversation.id);\n    setEditTitle(conversation.title);\n  };\n\n  const handleEditSave = (conversationId: string) => {\n    const updated = conversations.map(c =>\n      c.id === conversationId ? { ...c, title: editTitle } : c\n    );\n    setConversations(updated);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(updated)\n    );\n    setEditingId(null);\n  };\n\n  const handleDelete = (conversationId: string) => {\n    if (conversations.length <= 1) {\n      toast.error('Cannot delete the last conversation');\n      return;\n    }\n    \n    const filtered = conversations.filter(c => c.id !== conversationId);\n    setConversations(filtered);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(filtered)\n    );\n    \n    // If deleting current conversation, switch to another\n    if (currentConversationId === conversationId && filtered.length > 0) {\n      onConversationChange?.(filtered[0]);\n    }\n  };\n\n  const currentConversation = conversations.find(c => c.id === currentConversationId);\n\n  return (\n    <div className={cn('relative', className)}>\n      {/* Collapsed View */}\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"flex items-center gap-2 px-3 py-2 text-sm font-medium text-foreground hover:bg-accent rounded-lg transition-colors w-full\"\n      >\n        <MessageCircle className=\"w-4 h-4\" />\n        <span className=\"truncate flex-1 text-left\">\n          {currentConversation?.title || 'Select Conversation'}\n        </span>\n        <svg\n          className={cn('w-4 h-4 transition-transform', isExpanded && 'rotate-180')}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n        </svg>\n      </button>\n\n      {/* Expanded View */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-background rounded-lg shadow-lg border border-border z-50 max-h-80 overflow-y-auto\"\n          >\n            {/* New Conversation Button */}\n            <button\n              onClick={handleCreateConversation}\n              disabled={maxConversations ? conversations.length >= maxConversations : false}\n              className=\"flex items-center gap-2 w-full px-4 py-3 text-sm font-medium text-brand-600 hover:bg-brand-50 disabled:opacity-50 disabled:cursor-not-allowed border-b\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              New Conversation\n            </button>\n\n            {/* Conversation List */}\n            <div className=\"py-2\">\n              {conversations.map((conversation) => (\n                <div\n                  key={conversation.id}\n                  className={cn(\n                    'group flex items-center px-4 py-2 hover:bg-accent',\n                    currentConversationId === conversation.id && 'bg-brand-50'\n                  )}\n                >\n                  {editingId === conversation.id ? (\n                    // Edit Mode\n                    <div className=\"flex items-center gap-2 flex-1\">\n                      <input\n                        type=\"text\"\n                        value={editTitle}\n                        onChange={(e) => setEditTitle(e.target.value)}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') handleEditSave(conversation.id);\n                          if (e.key === 'Escape') setEditingId(null);\n                        }}\n                        className=\"flex-1 px-2 py-1 text-sm border rounded focus:outline-none focus:ring-1 focus:ring-brand-500\"\n                        autoFocus\n                      />\n                      <button\n                        onClick={() => handleEditSave(conversation.id)}\n                        className=\"p-1 text-green-600 hover:bg-green-50 rounded\"\n                      >\n                        <Check className=\"w-4 h-4\" />\n                      </button>\n                      <button\n                        onClick={() => setEditingId(null)}\n                        className=\"p-1 text-muted-foreground hover:bg-accent rounded\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  ) : (\n                    // View Mode\n                    <>\n                      <button\n                        onClick={() => handleSelectConversation(conversation)}\n                        className=\"flex-1 text-left\"\n                      >\n                        <div className=\"text-sm font-medium text-foreground truncate\">\n                          {conversation.title}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {new Date(conversation.createdAt).toLocaleDateString()}\n                        </div>\n                      </button>\n                      <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <button\n                          onClick={() => handleEditStart(conversation)}\n                          className=\"p-1 text-muted-foreground hover:text-foreground hover:bg-accent rounded\"\n                        >\n                          <Edit2 className=\"w-3 h-3\" />\n                        </button>\n                        <button\n                          onClick={() => handleDelete(conversation.id)}\n                          className=\"p-1 text-muted-foreground hover:text-destructive hover:bg-destructive/10 rounded\"\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </button>\n                      </div>\n                    </>\n                  )}\n                </div>\n              ))}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","/**\n * Message Error Display Component\n * \n * Displays error messages with appropriate styling and context based on HTTP status codes.\n * Provides user-friendly error messages and actionable guidance.\n */\n\nimport React from 'react';\nimport { AlertCircle, XCircle, CreditCard, UserX, Search, ServerCrash } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface MessageErrorDisplayProps {\n  error: string | Error;\n  statusCode?: number;\n  onRetry?: () => void;\n  className?: string;\n}\n\n/**\n * Parse error to extract status code and message\n */\nconst parseError = (error: string | Error): { statusCode?: number; message: string } => {\n  if (typeof error === 'string') {\n    // Try to extract status code from error message\n    const statusMatch = error.match(/(\\d{3})/);\n    const statusCode = statusMatch ? parseInt(statusMatch[1]) : undefined;\n    return { statusCode, message: error };\n  }\n  \n  return { \n    statusCode: (error as any).status || (error as any).statusCode,\n    message: error.message \n  };\n};\n\n/**\n * Get error details based on status code\n */\nconst getErrorDetails = (statusCode?: number, message?: string) => {\n  switch (statusCode) {\n    case 400:\n      return {\n        icon: AlertCircle,\n        title: 'Invalid Request',\n        description: 'The request format is invalid. Please check your input and try again.',\n        className: 'border-orange-200 bg-orange-50',\n        iconClassName: 'text-orange-600',\n        textClassName: 'text-orange-800',\n      };\n      \n    case 401:\n      return {\n        icon: UserX,\n        title: 'Authentication Failed',\n        description: 'Your API key is either missing or invalid. Please check your API key configuration.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showSupport: true,\n      };\n      \n    case 403:\n      // Check if this is an inactive agent error\n      const isInactiveAgent = message && (\n        message.toLowerCase().includes('inactive') ||\n        message.toLowerCase().includes('no documents') ||\n        message.toLowerCase().includes('agent is not active') ||\n        message.toLowerCase().includes('project is not active') ||\n        message.toLowerCase().includes('no documents uploaded')\n      );\n      \n      if (isInactiveAgent) {\n        return {\n          icon: AlertCircle,\n          title: 'Agent Inactive',\n          description: 'This agent is inactive. Please add documents to activate it before starting a conversation.',\n          className: 'border-orange-200 bg-orange-50',\n          iconClassName: 'text-orange-600',\n          textClassName: 'text-orange-800',\n        };\n      }\n      \n      return {\n        icon: UserX,\n        title: 'Access Denied',\n        description: 'You don\\'t have permission to access this resource. Please check your API key permissions.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showSupport: true,\n      };\n      \n    case 404:\n      return {\n        icon: Search,\n        title: 'Not Found',\n        description: 'The requested agent or conversation was not found. It may have been deleted or you may not have access.',\n        className: 'border-border bg-accent',\n        iconClassName: 'text-muted-foreground',\n        textClassName: 'text-foreground',\n      };\n      \n    case 429:\n      return {\n        icon: CreditCard,\n        title: 'Query Credits Exhausted',\n        description: 'You have exhausted your current query credits. Please contact customer service for assistance.',\n        className: 'border-yellow-200 bg-yellow-50',\n        iconClassName: 'text-yellow-600',\n        textClassName: 'text-yellow-800',\n        showSupport: true,\n        supportUrl: 'https://customgpt.freshdesk.com/support/home',\n      };\n      \n    case 500:\n    case 502:\n    case 503:\n    case 504:\n      return {\n        icon: ServerCrash,\n        title: 'Server Error',\n        description: 'An internal server error occurred. Please try again later or contact support if the issue persists.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showRetry: true,\n      };\n      \n    default:\n      return {\n        icon: XCircle,\n        title: 'Error',\n        description: message || 'An unexpected error occurred. Please try again.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showRetry: true,\n      };\n  }\n};\n\nexport const MessageErrorDisplay: React.FC<MessageErrorDisplayProps> = ({\n  error,\n  statusCode: propStatusCode,\n  onRetry,\n  className,\n}) => {\n  const { statusCode: parsedStatusCode, message } = parseError(error);\n  const finalStatusCode = propStatusCode || parsedStatusCode;\n  \n  const errorDetails = getErrorDetails(finalStatusCode, message);\n  const Icon = errorDetails.icon;\n  \n  return (\n    <div\n      className={cn(\n        'p-4 rounded-lg border',\n        errorDetails.className,\n        className\n      )}\n    >\n      <div className=\"flex items-start gap-3\">\n        <Icon className={cn('w-5 h-5 mt-0.5 flex-shrink-0', errorDetails.iconClassName)} />\n        \n        <div className=\"flex-1 space-y-2\">\n          <div>\n            <h3 className={cn('font-medium', errorDetails.textClassName)}>\n              {errorDetails.title}\n              {finalStatusCode && ` (${finalStatusCode})`}\n            </h3>\n            <p className={cn('text-sm mt-1', errorDetails.textClassName, 'opacity-90')}>\n              {errorDetails.description}\n            </p>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"flex items-center gap-2 mt-3\">\n            {errorDetails.showRetry && onRetry && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={onRetry}\n                className=\"text-xs\"\n              >\n                Try Again\n              </Button>\n            )}\n            \n            {errorDetails.showSupport && (\n              <a\n                href={errorDetails.supportUrl || 'https://customgpt.freshdesk.com/support/home'}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-xs underline hover:no-underline\"\n              >\n                Contact Support\n              </a>\n            )}\n          </div>\n          \n          {/* Technical Details (collapsed by default) */}\n          {message && message !== errorDetails.description && (\n            <details className=\"mt-3\">\n              <summary className={cn('text-xs cursor-pointer', errorDetails.textClassName, 'opacity-70')}>\n                Technical Details\n              </summary>\n              <pre className={cn(\n                'mt-2 p-2 text-xs rounded bg-background bg-opacity-50 overflow-x-auto',\n                errorDetails.textClassName,\n                'opacity-80'\n              )}>\n                {message}\n              </pre>\n            </details>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","/**\n * Widget Store Hooks\n * \n * These hooks automatically select between global and widget-specific stores\n * based on whether the component is rendered inside a widget context.\n */\n\nimport { useContext } from 'react';\nimport { useStore } from 'zustand';\nimport { WidgetStoreContext } from '../widget/WidgetStoreContext';\nimport { useMessageStore as useGlobalMessageStore } from '../store';\nimport { useConversationStore as useGlobalConversationStore } from '../store';\nimport { useAgentStore as useGlobalAgentStore } from '../store';\nimport type { MessageStore } from '../store/widget-stores/messages';\nimport type { ConversationStore } from '../store/widget-stores/conversations';\nimport type { AgentStore } from '../store/widget-stores/agents';\n\n/**\n * Check if we're inside a widget context\n */\nfunction useIsInWidgetContext(): boolean {\n  try {\n    const context = useContext(WidgetStoreContext);\n    return context !== null;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get widget stores if inside widget context\n */\nfunction useWidgetStores() {\n  const context = useContext(WidgetStoreContext);\n  return context?.stores;\n}\n\n/**\n * Message store hook that automatically selects the correct store\n */\nexport function useMessageStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  const globalStore = useGlobalMessageStore();\n  const widgetStore = useStore(\n    widgetStores?.messageStore || useGlobalMessageStore,\n    (state) => state\n  );\n  \n  return isInWidget && widgetStores ? widgetStore : globalStore;\n}\n\n/**\n * Conversation store hook that automatically selects the correct store\n */\nexport function useConversationStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  const globalStore = useGlobalConversationStore();\n  const widgetStore = useStore(\n    widgetStores?.conversationStore || useGlobalConversationStore,\n    (state) => state\n  );\n  \n  return isInWidget && widgetStores ? widgetStore : globalStore;\n}\n\n/**\n * Agent store hook that automatically selects the correct store\n */\nexport function useAgentStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  const globalStore = useGlobalAgentStore();\n  const widgetStore = useStore(\n    widgetStores?.agentStore || useGlobalAgentStore,\n    (state) => state\n  );\n  \n  return isInWidget && widgetStores ? widgetStore : globalStore;\n}\n\n/**\n * Export convenience functions to check store source\n */\nexport function useIsUsingWidgetStore(): boolean {\n  return useIsInWidgetContext();\n}\n\n/**\n * Get the current session ID if in widget context\n */\nexport function useWidgetSessionId(): string | null {\n  const context = useContext(WidgetStoreContext);\n  if (!context) return null;\n  \n  // Extract session ID from the store's localStorage key\n  const messageStore = context.stores.messageStore;\n  const state = messageStore.getState();\n  \n  // Session ID would need to be added to context for retrieval\n  return null;\n}","/**\n * Theme Manager\n * \n * Orchestrates theme switching, loading, and lifecycle management.\n * Provides centralized access to all available voice themes.\n */\n\nimport { IVoiceTheme, ThemeMetadata, ThemeFactory, VoiceState } from './IVoiceTheme';\n\nexport interface ThemeTransitionOptions {\n  duration: number;\n  easing: 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out';\n  crossfade: boolean;\n}\n\nexport interface ThemeRegistration {\n  id: string;\n  factory: ThemeFactory;\n  metadata: ThemeMetadata;\n}\n\n/**\n * Theme Manager - Singleton class for managing voice themes\n */\nexport class ThemeManager {\n  private static instance: ThemeManager;\n  private registeredThemes: Map<string, ThemeRegistration> = new Map();\n  private currentTheme: IVoiceTheme | null = null;\n  private canvas: HTMLCanvasElement | null = null;\n  private context: CanvasRenderingContext2D | null = null;\n  \n  // Transition state\n  private isTransitioning = false;\n  private transitionTheme: IVoiceTheme | null = null;\n  private transitionProgress = 0;\n  private transitionOptions: ThemeTransitionOptions = {\n    duration: 1000,\n    easing: 'ease-in-out',\n    crossfade: true\n  };\n\n  // Event callbacks\n  private callbacks: {\n    onThemeChange?: (oldTheme: string | null, newTheme: string) => void;\n    onTransitionStart?: (from: string | null, to: string) => void;\n    onTransitionComplete?: (themeId: string) => void;\n    onThemeError?: (error: Error, themeId: string) => void;\n  } = {};\n\n  private constructor() {\n    this.registerBuiltInThemes();\n  }\n\n  /**\n   * Get singleton instance\n   */\n  static getInstance(): ThemeManager {\n    if (!ThemeManager.instance) {\n      ThemeManager.instance = new ThemeManager();\n    }\n    return ThemeManager.instance;\n  }\n\n  /**\n   * Initialize with canvas context\n   */\n  initialize(canvas: HTMLCanvasElement, context: CanvasRenderingContext2D): void {\n    this.canvas = canvas;\n    this.context = context;\n    \n    // Initialize current theme if one is set\n    if (this.currentTheme && this.context) {\n      this.currentTheme.init(this.context, canvas.width, canvas.height);\n    }\n  }\n\n  /**\n   * Register a new theme\n   */\n  registerTheme(registration: ThemeRegistration): void {\n    if (this.registeredThemes.has(registration.id)) {\n      console.warn(`Theme ${registration.id} is already registered. Overwriting.`);\n    }\n    \n    this.registeredThemes.set(registration.id, registration);\n    console.log(`Registered theme: ${registration.id}`);\n  }\n\n  /**\n   * Unregister a theme\n   */\n  unregisterTheme(themeId: string): boolean {\n    if (this.currentTheme?.id === themeId) {\n      console.warn(`Cannot unregister active theme: ${themeId}`);\n      return false;\n    }\n    \n    return this.registeredThemes.delete(themeId);\n  }\n\n  /**\n   * Get all available themes metadata\n   */\n  getAvailableThemes(): ThemeMetadata[] {\n    return Array.from(this.registeredThemes.values()).map(reg => reg.metadata);\n  }\n\n  /**\n   * Get theme metadata by ID\n   */\n  getThemeMetadata(themeId: string): ThemeMetadata | null {\n    const registration = this.registeredThemes.get(themeId);\n    return registration ? registration.metadata : null;\n  }\n\n  /**\n   * Switch to a new theme\n   */\n  async switchTheme(themeId: string, transitionOptions?: Partial<ThemeTransitionOptions>): Promise<boolean> {\n    if (this.isTransitioning) {\n      console.warn('Theme transition already in progress');\n      return false;\n    }\n\n    const registration = this.registeredThemes.get(themeId);\n    if (!registration) {\n      const error = new Error(`Theme not found: ${themeId}`);\n      this.callbacks.onThemeError?.(error, themeId);\n      return false;\n    }\n\n    // If this is the current theme, no need to switch\n    if (this.currentTheme?.id === themeId) {\n      return true;\n    }\n\n    try {\n      // Update transition options\n      this.transitionOptions = { ...this.transitionOptions, ...transitionOptions };\n\n      // Create new theme instance\n      const newTheme = registration.factory();\n      \n      // Initialize with current context if available\n      if (this.context && this.canvas) {\n        newTheme.init(this.context, this.canvas.width, this.canvas.height);\n      }\n\n      // Start transition\n      await this.performThemeTransition(newTheme);\n      \n      return true;\n    } catch (error) {\n      console.error(`Failed to switch to theme ${themeId}:`, error);\n      this.callbacks.onThemeError?.(error as Error, themeId);\n      return false;\n    }\n  }\n\n  /**\n   * Get current active theme\n   */\n  getCurrentTheme(): IVoiceTheme | null {\n    return this.currentTheme;\n  }\n\n  /**\n   * Get current theme ID\n   */\n  getCurrentThemeId(): string | null {\n    return this.currentTheme?.id || null;\n  }\n\n  /**\n   * Set event callbacks\n   */\n  setCallbacks(callbacks: Partial<typeof this.callbacks>): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Draw current theme (delegated from Canvas component)\n   */\n  draw(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void {\n    if (this.isTransitioning && this.transitionOptions.crossfade) {\n      this.drawTransition(context, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    } else if (this.currentTheme) {\n      this.currentTheme.draw(context, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    }\n  }\n\n  /**\n   * Forward state changes to current theme\n   */\n  onUserSpeaking(): void {\n    this.currentTheme?.onUserSpeaking();\n    this.transitionTheme?.onUserSpeaking();\n  }\n\n  onProcessing(): void {\n    this.currentTheme?.onProcessing();\n    this.transitionTheme?.onProcessing();\n  }\n\n  onAiSpeaking(): void {\n    this.currentTheme?.onAiSpeaking();\n    this.transitionTheme?.onAiSpeaking();\n  }\n\n  reset(): void {\n    this.currentTheme?.reset();\n    this.transitionTheme?.reset();\n  }\n\n  /**\n   * Forward mouse events to current theme\n   */\n  setMousePosition(x: number, y: number, canvasWidth: number, canvasHeight: number): void {\n    this.currentTheme?.setMousePosition(x, y, canvasWidth, canvasHeight);\n    this.transitionTheme?.setMousePosition(x, y, canvasWidth, canvasHeight);\n  }\n\n  setHovering(hovering: boolean): void {\n    this.currentTheme?.setHovering(hovering);\n    this.transitionTheme?.setHovering(hovering);\n  }\n\n  /**\n   * Get performance metrics from current theme\n   */\n  getPerformanceMetrics() {\n    return this.currentTheme?.getPerformanceMetrics() || {};\n  }\n\n  /**\n   * Dispose of all resources\n   */\n  dispose(): void {\n    this.currentTheme?.dispose();\n    this.transitionTheme?.dispose();\n    this.currentTheme = null;\n    this.transitionTheme = null;\n    this.isTransitioning = false;\n  }\n\n  // Private methods\n\n  /**\n   * Register built-in themes\n   */\n  private registerBuiltInThemes(): void {\n    // Import themes dynamically to avoid circular dependencies\n    import('./DefaultTheme').then(({ DefaultTheme }) => {\n      this.registerTheme({\n        id: 'default',\n        factory: () => new DefaultTheme(),\n        metadata: {\n          id: 'default',\n          name: 'Classic Sphere',\n          description: 'The original 3D particle sphere with smooth color transitions',\n          category: 'particle',\n          performanceProfile: 'medium',\n          previewColors: ['#4285F4', '#34A853', '#EA4335'],\n          previewDescription: 'Rotating particle sphere with dynamic colors'\n        }\n      });\n    });\n\n    import('./StarfieldTheme').then(({ StarfieldTheme }) => {\n      this.registerTheme({\n        id: 'starfield',\n        factory: () => new StarfieldTheme(),\n        metadata: {\n          id: 'starfield',\n          name: 'Cosmic Starfield',\n          description: 'Twinkling stars, dynamic constellations, and flowing nebula clouds',\n          category: 'particle',\n          performanceProfile: 'medium',\n          previewColors: ['#FFFFFF', '#ADD8E6', '#FFD700', '#FFC0CB'],\n          previewDescription: 'Immersive space environment with stars and constellations'\n        }\n      });\n    });\n\n    import('./JarvisTheme').then(({ JarvisTheme }) => {\n      this.registerTheme({\n        id: 'jarvis',\n        factory: () => new JarvisTheme(),\n        metadata: {\n          id: 'jarvis',\n          name: 'J.A.R.V.I.S.',\n          description: 'Advanced AI interface with arc reactor, HUD elements, and energy particles',\n          category: 'advanced',\n          performanceProfile: 'heavy',\n          previewColors: ['#00A2E8', '#00FFFF', '#FF6500', '#FF00FF'],\n          previewDescription: 'Iron Man-inspired technological interface with arc reactor'\n        }\n      });\n    });\n\n    import('./LegoTheme').then(({ LegoTheme }) => {\n      this.registerTheme({\n        id: 'lego',\n        factory: () => new LegoTheme(),\n        metadata: {\n          id: 'lego',\n          name: 'LEGO Blocks',\n          description: '3D building blocks that construct and deconstruct with satisfying physics',\n          category: 'artistic',\n          performanceProfile: 'medium',\n          previewColors: ['#C4281C', '#0D69AB', '#12852B', '#F5CD2F'],\n          previewDescription: 'Interactive LEGO blocks building structures with authentic colors'\n        }\n      });\n    });\n\n    import('./StarWarsTheme').then(({ StarWarsTheme }) => {\n      this.registerTheme({\n        id: 'starwars',\n        factory: () => new StarWarsTheme(),\n        metadata: {\n          id: 'starwars',\n          name: 'Star Wars',\n          description: 'Lightsabers, holograms, and the Force in a galaxy far, far away',\n          category: 'advanced',\n          performanceProfile: 'heavy',\n          previewColors: ['#00A2FF', '#FF0000', '#00FF00', '#9333EA'],\n          previewDescription: 'Epic Star Wars experience with lightsabers and hologram effects'\n        }\n      });\n    });\n\n    import('./OceanWaveTheme').then(({ OceanWaveTheme }) => {\n      this.registerTheme({\n        id: 'ocean',\n        factory: () => new OceanWaveTheme(),\n        metadata: {\n          id: 'ocean',\n          name: 'Ocean Waves',\n          description: 'Calming underwater environment with waves, bubbles, and marine life',\n          category: 'particle',\n          performanceProfile: 'medium',\n          previewColors: ['#0077BE', '#00BCF2', '#C8E6FF', '#98CB3B'],\n          previewDescription: 'Serene ocean experience with realistic wave physics and bubbles'\n        }\n      });\n    });\n\n    import('./NFTTheme').then(({ NFTTheme }) => {\n      this.registerTheme({\n        id: 'nft',\n        factory: () => new NFTTheme(),\n        metadata: {\n          id: 'nft',\n          name: 'NFT Art',\n          description: 'Vibrant digital art with morphing shapes, dynamic gradients, and artistic trails',\n          category: 'artistic',\n          performanceProfile: 'heavy',\n          previewColors: ['#FF00FF', '#00FFFF', '#FFFF00', '#8000FF', '#FF0080'],\n          previewDescription: 'Bold NFT-style aesthetics with morphing geometric shapes'\n        }\n      });\n    });\n\n    import('./NothingPhoneTheme').then(({ NothingPhoneTheme }) => {\n      this.registerTheme({\n        id: 'nothing',\n        factory: () => new NothingPhoneTheme(),\n        metadata: {\n          id: 'nothing',\n          name: 'Nothing Phone',\n          description: 'Minimalist design inspired by Nothing Phone with clean dots and typography',\n          category: 'artistic',\n          performanceProfile: 'light',\n          previewColors: ['#FFFFFF', '#F5F5F5', '#C8C8C8', '#808080', '#000000'],\n          previewDescription: 'Clean minimalist interface with Glyph-inspired dot patterns'\n        }\n      });\n    });\n\n    import('./MinecraftTheme').then(({ MinecraftTheme }) => {\n      this.registerTheme({\n        id: 'minecraft',\n        factory: () => new MinecraftTheme(),\n        metadata: {\n          id: 'minecraft',\n          name: 'Minecraft',\n          description: 'Blocky voxel world with building, breaking, and crafting animations',\n          category: 'artistic',\n          performanceProfile: 'medium',\n          previewColors: ['#7CBD52', '#FEF63F', '#A28A4E', '#63EDE5', '#888888'],\n          previewDescription: 'Interactive voxel blocks with authentic Minecraft aesthetics'\n        }\n      });\n    });\n\n    import('./FuturisticTheme').then(({ FuturisticTheme }) => {\n      this.registerTheme({\n        id: 'futuristic',\n        factory: () => new FuturisticTheme(),\n        metadata: {\n          id: 'futuristic',\n          name: 'Futuristic',\n          description: 'High-tech cyberpunk interface with holograms, wireframes, and data streams',\n          category: 'advanced',\n          performanceProfile: 'heavy',\n          previewColors: ['#00FFFF', '#FF00FF', '#FFFF00', '#00FF00', '#0096FF'],\n          previewDescription: 'Cyberpunk-inspired holographic displays and wireframe models'\n        }\n      });\n    });\n\n    import('./VintageModernTheme').then(({ VintageModernTheme }) => {\n      this.registerTheme({\n        id: 'vintage-modern',\n        factory: () => new VintageModernTheme(),\n        metadata: {\n          id: 'vintage-modern',\n          name: 'Vintage Modern',\n          description: 'Retro aesthetics meets modern design with film grain and neon glow',\n          category: 'artistic',\n          performanceProfile: 'medium',\n          previewColors: ['#FF6F91', '#FF9A00', '#ED75FF', '#5FE1FA', '#FFF176'],\n          previewDescription: 'Nostalgic blend of retro TV effects with modern animations'\n        }\n      });\n    });\n\n    import('./AuroraTheme').then(({ AuroraTheme }) => {\n      this.registerTheme({\n        id: 'aurora',\n        factory: () => new AuroraTheme(),\n        metadata: {\n          id: 'aurora',\n          name: 'Aurora Borealis',\n          description: 'Ethereal northern lights with flowing ribbons and magnetic fields',\n          category: 'particle',\n          performanceProfile: 'heavy',\n          previewColors: ['#00FF00', '#0064FF', '#9300D3', '#FF0064', '#5FE1FA'],\n          previewDescription: 'Mesmerizing aurora borealis with realistic light bands'\n        }\n      });\n    });\n\n    console.log('ThemeManager: Built-in themes registered');\n  }\n\n  /**\n   * Perform theme transition\n   */\n  private async performThemeTransition(newTheme: IVoiceTheme): Promise<void> {\n    const oldTheme = this.currentTheme;\n    const oldThemeId = oldTheme?.id || null;\n    \n    this.isTransitioning = true;\n    this.transitionTheme = newTheme;\n    this.transitionProgress = 0;\n\n    // Notify callbacks\n    this.callbacks.onTransitionStart?.(oldThemeId, newTheme.id);\n\n    // If crossfade is disabled, immediately switch\n    if (!this.transitionOptions.crossfade) {\n      this.completeTransition(newTheme, oldTheme);\n      return;\n    }\n\n    // Animate transition\n    return new Promise((resolve) => {\n      const startTime = performance.now();\n      const { duration, easing } = this.transitionOptions;\n\n      const animate = (currentTime: number) => {\n        const elapsed = currentTime - startTime;\n        let progress = Math.min(elapsed / duration, 1);\n\n        // Apply easing\n        progress = this.applyEasing(progress, easing);\n        this.transitionProgress = progress;\n\n        if (progress >= 1) {\n          this.completeTransition(newTheme, oldTheme);\n          resolve();\n        } else {\n          requestAnimationFrame(animate);\n        }\n      };\n\n      requestAnimationFrame(animate);\n    });\n  }\n\n  /**\n   * Complete theme transition\n   */\n  private completeTransition(newTheme: IVoiceTheme, oldTheme: IVoiceTheme | null): void {\n    // Clean up old theme\n    oldTheme?.dispose();\n\n    // Set new theme as current\n    this.currentTheme = newTheme;\n    this.transitionTheme = null;\n    this.isTransitioning = false;\n    this.transitionProgress = 0;\n\n    // Notify callbacks\n    this.callbacks.onThemeChange?.(oldTheme?.id || null, newTheme.id);\n    this.callbacks.onTransitionComplete?.(newTheme.id);\n\n    console.log(`Theme switched to: ${newTheme.id}`);\n  }\n\n  /**\n   * Draw crossfade transition between themes\n   */\n  private drawTransition(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void {\n    // Create temporary canvases for each theme\n    const tempCanvas1 = document.createElement('canvas');\n    const tempCanvas2 = document.createElement('canvas');\n    tempCanvas1.width = tempCanvas2.width = displayWidth;\n    tempCanvas1.height = tempCanvas2.height = displayHeight;\n    \n    const tempCtx1 = tempCanvas1.getContext('2d');\n    const tempCtx2 = tempCanvas2.getContext('2d');\n\n    if (!tempCtx1 || !tempCtx2) return;\n\n    // Draw old theme to first canvas\n    if (this.currentTheme) {\n      this.currentTheme.draw(tempCtx1, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    }\n\n    // Draw new theme to second canvas\n    if (this.transitionTheme) {\n      this.transitionTheme.draw(tempCtx2, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    }\n\n    // Clear main canvas\n    context.clearRect(0, 0, displayWidth, displayHeight);\n\n    // Draw old theme with fading alpha\n    context.globalAlpha = 1 - this.transitionProgress;\n    context.drawImage(tempCanvas1, 0, 0);\n\n    // Draw new theme with increasing alpha\n    context.globalAlpha = this.transitionProgress;\n    context.drawImage(tempCanvas2, 0, 0);\n\n    // Reset alpha\n    context.globalAlpha = 1;\n  }\n\n  /**\n   * Apply easing function to transition progress\n   */\n  private applyEasing(t: number, easing: string): number {\n    switch (easing) {\n      case 'linear':\n        return t;\n      case 'ease-in':\n        return t * t;\n      case 'ease-out':\n        return t * (2 - t);\n      case 'ease-in-out':\n        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n      default:\n        return t;\n    }\n  }\n}\n\n/**\n * Convenience function to get theme manager instance\n */\nexport const getThemeManager = () => ThemeManager.getInstance();","import { useEffect, useRef, forwardRef } from \"react\";\nimport { getThemeManager } from '@/lib/voice/themes/ThemeManager';\nimport { DefaultTheme } from '@/lib/voice/themes/DefaultTheme';\nimport { throttle, debounce } from '@/lib/utils/throttle';\n\ninterface CanvasProps {\n  // Classic theme only - no theme switching\n}\n\nconst Canvas = forwardRef<HTMLCanvasElement, CanvasProps>(({}, ref) => {\n  const internalRef = useRef<HTMLCanvasElement>(null);\n  const canvasRef = (ref as any) || internalRef;\n  const themeManagerRef = useRef(getThemeManager());\n  const isInitializedRef = useRef(false);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const context = canvas.getContext('2d');\n    if (!context) return;\n\n    const themeManager = themeManagerRef.current;\n\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    \n    // Debounce resize to prevent excessive updates\n    const debouncedResize = debounce(resizeCanvas, 250);\n\n    resizeCanvas();\n    window.addEventListener('resize', debouncedResize);\n\n    // Initialize theme manager with canvas context\n    if (!isInitializedRef.current) {\n      themeManager.initialize(canvas, context);\n      \n      // Register default theme if not already registered\n      if (!themeManager.getThemeMetadata('default')) {\n        themeManager.registerTheme({\n          id: 'default',\n          factory: () => new DefaultTheme(),\n          metadata: {\n            id: 'default',\n            name: 'Classic Sphere',\n            description: 'The original 3D particle sphere with smooth color transitions',\n            category: 'particle',\n            performanceProfile: 'medium',\n            previewColors: ['#4285F4', '#34A853', '#EA4335'],\n            previewDescription: 'Rotating particle sphere with dynamic colors'\n          }\n        });\n      }\n\n      // Use default theme only\n      themeManager.switchTheme('default');\n      isInitializedRef.current = true;\n    }\n\n    // Throttled mouse move handler for better performance\n    const handleMouseMove = throttle((event: MouseEvent) => {\n      const rect = canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      themeManager.setMousePosition(x, y, canvas.width, canvas.height);\n    }, 16); // ~60fps for mouse movements\n\n    const handleMouseEnter = () => {\n      themeManager.setHovering(true);\n    };\n\n    const handleMouseLeave = () => {\n      themeManager.setHovering(false);\n    };\n\n    // Add mouse event listeners\n    canvas.addEventListener('mousemove', handleMouseMove);\n    canvas.addEventListener('mouseenter', handleMouseEnter);\n    canvas.addEventListener('mouseleave', handleMouseLeave);\n\n    let animationFrameId: number;\n    let lastTime = 0;\n    const targetFPS = 30; // Target 30 FPS for better performance\n    const frameInterval = 1000 / targetFPS;\n    \n    // Performance monitoring\n    let frameCount = 0;\n    let fpsTime = performance.now();\n    let currentFPS = targetFPS;\n\n    const render = (currentTime: number) => {\n      const deltaTime = currentTime - lastTime;\n      \n      // Only render if enough time has passed for target FPS\n      if (deltaTime >= frameInterval) {\n        // Update lastTime, adjusting for any time drift\n        lastTime = currentTime - (deltaTime % frameInterval);\n        \n        // Get current canvas dimensions\n        const currentWidth = canvas.width;\n        const currentHeight = canvas.height;\n        const currentProjCenterX = currentWidth / 2;\n        const currentProjCenterY = currentHeight / 2;\n        \n        // Delegate drawing to theme manager\n        themeManager.draw(context, currentWidth, currentHeight, currentProjCenterX, currentProjCenterY, deltaTime);\n        \n        // Performance monitoring\n        frameCount++;\n        const now = performance.now();\n        if (now - fpsTime >= 1000) {\n          currentFPS = frameCount;\n          frameCount = 0;\n          fpsTime = now;\n          \n          // Log performance warnings\n          if (currentFPS < targetFPS * 0.8) {\n            console.warn(`[VOICE-CANVAS] Low FPS detected: ${currentFPS}/${targetFPS}`);\n          }\n        }\n      }\n      \n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    \n    // Start the animation loop\n    animationFrameId = window.requestAnimationFrame(render);\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n      window.removeEventListener('resize', debouncedResize);\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('mouseenter', handleMouseEnter);\n      canvas.removeEventListener('mouseleave', handleMouseLeave);\n    };\n  }, []);\n\n  // Expose theme actions for parent component to call\n  (Canvas as any).getThemeManager = () => themeManagerRef.current;\n  (Canvas as any).onUserSpeaking = () => themeManagerRef.current.onUserSpeaking();\n  (Canvas as any).onProcessing = () => themeManagerRef.current.onProcessing();\n  (Canvas as any).onAiSpeaking = () => themeManagerRef.current.onAiSpeaking();\n  (Canvas as any).reset = () => themeManagerRef.current.reset();\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"absolute inset-0 w-full h-full\"\n      style={{ background: 'transparent' }}\n    />\n  );\n});\n\nCanvas.displayName = 'Canvas';\n\nexport default Canvas;","/**\n * Throttle function that limits how often a function can be called\n * @param func Function to throttle\n * @param delay Minimum time between calls in milliseconds\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let lastCall = 0;\n  let timeoutId: NodeJS.Timeout | null = null;\n\n  return (...args: Parameters<T>) => {\n    const now = Date.now();\n    const timeSinceLastCall = now - lastCall;\n\n    if (timeSinceLastCall >= delay) {\n      lastCall = now;\n      func(...args);\n    } else {\n      // Schedule a call for the remaining time\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      \n      const remainingTime = delay - timeSinceLastCall;\n      timeoutId = setTimeout(() => {\n        lastCall = Date.now();\n        func(...args);\n        timeoutId = null;\n      }, remainingTime);\n    }\n  };\n}\n\n/**\n * Debounce function that delays executing a function until after a specified time has elapsed\n * @param func Function to debounce\n * @param delay Time to wait in milliseconds\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let timeoutId: NodeJS.Timeout | null = null;\n\n  return (...args: Parameters<T>) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    \n    timeoutId = setTimeout(() => {\n      func(...args);\n      timeoutId = null;\n    }, delay);\n  };\n}","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nexport type VoiceOption = 'alloy' | 'echo' | 'fable' | 'onyx' | 'nova' | 'shimmer';\nexport type PersonaOption = 'assistant' | 'creative' | 'analytical' | 'casual' | 'professional';\n\ninterface VoiceSettings {\n  selectedVoice: VoiceOption;\n  selectedPersona: PersonaOption;\n  isVoiceModalOpen: boolean;\n}\n\ninterface VoiceSettingsActions {\n  setVoice: (voice: VoiceOption) => void;\n  setPersona: (persona: PersonaOption) => void;\n  setVoiceModalOpen: (isOpen: boolean) => void;\n  getSettings: () => Omit<VoiceSettings, 'isVoiceModalOpen'>;\n}\n\nexport type VoiceSettingsStore = VoiceSettings & VoiceSettingsActions;\n\n/**\n * Voice Settings Store\n * \n * Persists user's voice preferences including:\n * - Voice selection (OpenAI TTS voices)\n * - Persona selection (conversation style)\n */\nexport const useVoiceSettingsStore = create<VoiceSettingsStore>()(\n  persist(\n    (set, get) => ({\n      // Default settings\n      selectedVoice: 'alloy',\n      selectedPersona: 'assistant',\n      isVoiceModalOpen: false,\n\n      setVoice: (voice: VoiceOption) => {\n        set({ selectedVoice: voice });\n      },\n\n      setPersona: (persona: PersonaOption) => {\n        set({ selectedPersona: persona });\n      },\n\n      setVoiceModalOpen: (isOpen: boolean) => {\n        set({ isVoiceModalOpen: isOpen });\n      },\n\n      getSettings: () => {\n        const state = get();\n        return {\n          selectedVoice: state.selectedVoice,\n          selectedPersona: state.selectedPersona,\n        };\n      },\n    }),\n    {\n      name: 'customgpt-voice-settings',\n      // Persist all voice settings except modal state\n      partialize: (state) => ({\n        selectedVoice: state.selectedVoice,\n        selectedPersona: state.selectedPersona,\n        // Don't persist isVoiceModalOpen - always start as false\n      }),\n    }\n  )\n);\n\n// Export helper to get persona system prompts\nexport const getPersonaSystemPrompt = (persona: PersonaOption): string => {\n  const prompts: Record<PersonaOption, string> = {\n    assistant: 'You are a helpful assistant with a voice interface. Keep your responses concise and informative, limited to 1-2 sentences since the user is interacting through voice.',\n    creative: 'You are a creative and imaginative assistant with a voice interface. Be playful and artistic in your responses while keeping them brief (1-2 sentences) for voice interaction.',\n    analytical: 'You are a logical and precise assistant with a voice interface. Provide clear, data-driven responses in 1-2 concise sentences suitable for voice interaction.',\n    casual: 'You are a relaxed and conversational assistant with a voice interface. Keep responses friendly and informal, limited to 1-2 sentences for natural voice interaction.',\n    professional: 'You are a formal and business-focused assistant with a voice interface. Maintain a professional tone while keeping responses brief (1-2 sentences) for voice interaction.',\n  };\n  \n  return prompts[persona];\n};","'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Settings, Mic, User, X, ExternalLink } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { useAgentStore } from '@/store/agents';\nimport { useVoiceSettingsStore } from '@/store/voice-settings';\n\ninterface VoiceSettingsProps {\n  isOpen: boolean;\n  onClose: () => void;\n  projectId?: string;\n}\n\nexport function VoiceSettings({ isOpen, onClose, projectId }: VoiceSettingsProps) {\n  console.log('🎛️ VoiceSettings render - isOpen:', isOpen);\n  \n  // Use persisted settings from store\n  const { selectedVoice, selectedPersona, setVoice, setPersona } = useVoiceSettingsStore();\n  const router = useRouter();\n  const { currentAgent, updateSettings } = useAgentStore();\n  \n  // Local state for preview before saving\n  const [previewVoice, setPreviewVoice] = useState(selectedVoice);\n  const [previewPersona, setPreviewPersona] = useState(selectedPersona);\n  const [previewModel, setPreviewModel] = useState(currentAgent?.settings?.chatbot_model || 'gpt-3.5-turbo');\n  \n  // Reset preview to saved values when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setPreviewVoice(selectedVoice);\n      setPreviewPersona(selectedPersona);\n      setPreviewModel(currentAgent?.settings?.chatbot_model || 'gpt-3.5-turbo');\n    }\n  }, [isOpen, selectedVoice, selectedPersona, currentAgent]);\n\n  const voices = [\n    { id: 'alloy', name: 'Alloy', desc: 'Neutral' },\n    { id: 'echo', name: 'Echo', desc: 'Clear' },\n    { id: 'fable', name: 'Fable', desc: 'Warm' },\n    { id: 'onyx', name: 'Onyx', desc: 'Deep' },\n    { id: 'nova', name: 'Nova', desc: 'Bright' },\n    { id: 'shimmer', name: 'Shimmer', desc: 'Smooth' }\n  ];\n\n  const personas = [\n    { id: 'assistant', name: 'Assistant', desc: 'Helpful' },\n    { id: 'creative', name: 'Creative', desc: 'Artistic' },\n    { id: 'analytical', name: 'Analytical', desc: 'Logical' },\n    { id: 'casual', name: 'Casual', desc: 'Relaxed' },\n    { id: 'professional', name: 'Professional', desc: 'Formal' }\n  ];\n  \n  const handleOpenProjectSettings = () => {\n    if (projectId) {\n      onClose();\n      router.push(`/projects?id=${projectId}`);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-[10001] bg-black/50 backdrop-blur-sm flex items-center justify-center p-4\">\n      <div className=\"bg-gray-900 rounded-2xl border border-gray-700 w-full max-w-2xl max-h-[70vh] flex flex-col\">\n        {/* Header */}\n        <div className=\"p-4 border-b border-gray-700 flex items-center justify-between flex-shrink-0\">\n          <div className=\"flex items-center gap-3\">\n            <Settings className=\"w-5 h-5 text-white\" />\n            <h2 className=\"text-lg font-semibold text-white\">Voice Settings</h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"w-8 h-8 rounded-full bg-gray-700 hover:bg-gray-600 flex items-center justify-center transition-colors\"\n          >\n            <X className=\"w-4 h-4 text-white\" />\n          </button>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 overflow-y-auto p-6 space-y-6\">\n          {/* Settings Grid */}\n          <div className=\"grid grid-cols-1 gap-6\">\n            {/* Voice Selection */}\n            <div>\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Mic className=\"w-4 h-4 text-white\" />\n                <h3 className=\"text-sm font-semibold text-white uppercase tracking-wider\">Voice</h3>\n              </div>\n              <div className=\"grid grid-cols-3 gap-2\">\n                {voices.map((voice) => (\n                  <button\n                    key={voice.id}\n                    onClick={() => setPreviewVoice(voice.id as any)}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewVoice === voice.id\n                        ? 'border-blue-500 bg-blue-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">{voice.name}</div>\n                    <div className=\"text-xs text-gray-400\">{voice.desc}</div>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Persona Selection */}\n            <div>\n              <div className=\"flex items-center gap-2 mb-3\">\n                <User className=\"w-4 h-4 text-white\" />\n                <h3 className=\"text-sm font-semibold text-white uppercase tracking-wider\">Persona</h3>\n              </div>\n              <div className=\"grid grid-cols-3 gap-2\">\n                {personas.map((persona) => (\n                  <button\n                    key={persona.id}\n                    onClick={() => setPreviewPersona(persona.id as any)}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewPersona === persona.id\n                        ? 'border-purple-500 bg-purple-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">{persona.name}</div>\n                    <div className=\"text-xs text-gray-400\">{persona.desc}</div>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Model Selection */}\n            {projectId && currentAgent && (\n              <div>\n                <div className=\"flex items-center gap-2 mb-3\">\n                  <Settings className=\"w-4 h-4 text-white\" />\n                  <h3 className=\"text-sm font-semibold text-white uppercase tracking-wider\">Model</h3>\n                </div>\n                <div className=\"grid grid-cols-3 gap-2\">\n                  <button\n                    onClick={() => setPreviewModel('gpt-3.5-turbo')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'gpt-3.5-turbo'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">GPT-3.5</div>\n                    <div className=\"text-xs text-gray-400\">Fast</div>\n                  </button>\n                  <button\n                    onClick={() => setPreviewModel('gpt-4')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'gpt-4'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">GPT-4</div>\n                    <div className=\"text-xs text-gray-400\">Powerful</div>\n                  </button>\n                  <button\n                    onClick={() => setPreviewModel('gpt-4-o')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'gpt-4-o'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">GPT-4o</div>\n                    <div className=\"text-xs text-gray-400\">Optimized</div>\n                  </button>\n                  <button\n                    onClick={() => setPreviewModel('claude-3-opus')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'claude-3-opus'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">Claude 3 Opus</div>\n                    <div className=\"text-xs text-gray-400\">Powerful</div>\n                  </button>\n                  <button\n                    onClick={() => setPreviewModel('claude-3-sonnet')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'claude-3-sonnet'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">Claude 3 Sonnet</div>\n                    <div className=\"text-xs text-gray-400\">Balanced</div>\n                  </button>\n                  <button\n                    onClick={() => setPreviewModel('claude-3-haiku')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'claude-3-haiku'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">Claude 3 Haiku</div>\n                    <div className=\"text-xs text-gray-400\">Fast</div>\n                  </button>\n                </div>\n                <p className=\"text-xs text-gray-400 mt-2\">\n                  Recommended for voice: Mini models provide faster responses\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"p-4 border-t border-gray-700 flex justify-end gap-3 flex-shrink-0\">\n          <button\n            onClick={() => {\n              setPreviewVoice(selectedVoice);\n              setPreviewPersona(selectedPersona);\n              setPreviewModel(currentAgent?.settings?.chatbot_model || 'gpt-3.5-turbo');\n              onClose();\n            }}\n            className=\"px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg text-white text-sm transition-colors\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={async () => {\n              // Save voice and persona settings\n              setVoice(previewVoice as any);\n              setPersona(previewPersona as any);\n              \n              // Update agent's model setting if it changed\n              if (currentAgent && previewModel !== currentAgent.settings?.chatbot_model) {\n                try {\n                  await updateSettings(currentAgent.id, {\n                    chatbot_model: previewModel\n                  });\n                } catch (error) {\n                  console.error('Failed to update model setting:', error);\n                  // Continue with closing the modal even if model update fails\n                }\n              }\n              \n              onClose();\n            }}\n            className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-white text-sm transition-colors\"\n          >\n            Save Settings\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","/**\n * Streaming TTS Manager\n * \n * Handles chunked text-to-speech for faster voice responses\n */\n\nexport class StreamingTTSManager {\n  private audioQueue: AudioBuffer[] = [];\n  private pendingChunks: Map<number, AudioBuffer> = new Map(); // Store chunks by ID\n  private nextExpectedChunkId = 0; // Track which chunk should play next\n  private isPlaying = false;\n  private audioContext: AudioContext | null = null;\n  private currentSource: AudioBufferSourceNode | null = null;\n  private onPlaybackComplete?: () => void;\n  private onError?: (error: string) => void;\n\n  constructor() {\n    this.initAudioContext();\n  }\n\n  private async initAudioContext() {\n    try {\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      \n      // Resume context if suspended (required for mobile)\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume();\n      }\n    } catch (error) {\n      console.error('Failed to initialize AudioContext:', error);\n    }\n  }\n\n  /**\n   * Add a text chunk to be converted to speech and queued\n   */\n  async addTextChunk(text: string, voice: string = 'alloy') {\n    try {\n      // Convert text to speech\n      const audioBuffer = await this.textToSpeech(text, voice);\n      \n      // Add to queue\n      this.audioQueue.push(audioBuffer);\n      \n      // Start playing if not already playing\n      if (!this.isPlaying) {\n        this.playNextChunk();\n      }\n    } catch (error) {\n      console.error('Failed to add text chunk:', error);\n      this.onError?.('Failed to generate speech for chunk');\n    }\n  }\n\n  /**\n   * Add a pre-generated audio buffer directly to the queue\n   * Used for streaming responses that provide ready audio chunks\n   */\n  async addAudioBuffer(audioBuffer: AudioBuffer) {\n    try {\n      // Add to queue - for backward compatibility without chunk ID\n      this.audioQueue.push(audioBuffer);\n      \n      // Start playing if not already playing\n      if (!this.isPlaying) {\n        this.playNextChunk();\n      }\n    } catch (error) {\n      console.error('Failed to add audio buffer:', error);\n      this.onError?.('Failed to queue audio buffer');\n    }\n  }\n\n  /**\n   * Add an audio buffer with a specific chunk ID to ensure ordered playback\n   */\n  async addAudioBufferWithId(audioBuffer: AudioBuffer, chunkId: number) {\n    try {\n      console.log(`[StreamingTTS] Adding chunk ${chunkId}, expecting ${this.nextExpectedChunkId}`);\n      \n      // Store the chunk\n      this.pendingChunks.set(chunkId, audioBuffer);\n      \n      // Check if we can queue any pending chunks in order\n      while (this.pendingChunks.has(this.nextExpectedChunkId)) {\n        const chunk = this.pendingChunks.get(this.nextExpectedChunkId)!;\n        this.pendingChunks.delete(this.nextExpectedChunkId);\n        \n        console.log(`[StreamingTTS] Queuing chunk ${this.nextExpectedChunkId} in order`);\n        this.audioQueue.push(chunk);\n        this.nextExpectedChunkId++;\n        \n        // Start playing if not already playing\n        if (!this.isPlaying) {\n          this.playNextChunk();\n        }\n      }\n      \n      console.log(`[StreamingTTS] Pending chunks: ${Array.from(this.pendingChunks.keys()).sort().join(', ')}`);\n    } catch (error) {\n      console.error('Failed to add audio buffer with ID:', error);\n      this.onError?.('Failed to queue audio buffer');\n    }\n  }\n\n  /**\n   * Convert text to speech using OpenAI TTS API\n   */\n  private async textToSpeech(text: string, voice: string): Promise<AudioBuffer> {\n    if (!text.trim()) {\n      throw new Error('Empty text provided');\n    }\n\n    // Call TTS API\n    const response = await fetch('/api/proxy/tts/stream', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'tts-1', // Use faster model for streaming\n        input: text,\n        voice: voice,\n        response_format: 'mp3'\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`TTS API error: ${response.status}`);\n    }\n\n    const audioBlob = await response.blob();\n    const arrayBuffer = await audioBlob.arrayBuffer();\n\n    if (!this.audioContext) {\n      throw new Error('AudioContext not initialized');\n    }\n\n    return await this.audioContext.decodeAudioData(arrayBuffer);\n  }\n\n  /**\n   * Play the next audio chunk in the queue\n   */\n  private async playNextChunk() {\n    if (this.audioQueue.length === 0) {\n      this.isPlaying = false;\n      this.onPlaybackComplete?.();\n      return;\n    }\n\n    if (!this.audioContext) {\n      console.error('AudioContext not available');\n      return;\n    }\n\n    this.isPlaying = true;\n    const audioBuffer = this.audioQueue.shift();\n\n    if (!audioBuffer) return;\n\n    try {\n      // Create and configure audio source\n      this.currentSource = this.audioContext.createBufferSource();\n      this.currentSource.buffer = audioBuffer;\n      this.currentSource.connect(this.audioContext.destination);\n\n      // Set up completion handler\n      this.currentSource.onended = () => {\n        this.currentSource = null;\n        // Add a small delay between chunks for smoother playback\n        setTimeout(() => {\n          this.playNextChunk(); // Play next chunk\n        }, 50);\n      };\n\n      // Start playback\n      this.currentSource.start(0);\n      \n    } catch (error) {\n      console.error('Failed to play audio chunk:', error);\n      // Try to continue with the next chunk\n      setTimeout(() => {\n        this.playNextChunk();\n      }, 100);\n    }\n  }\n\n  /**\n   * Stop all playback and clear queue\n   */\n  stopPlayback() {\n    // Stop current audio\n    if (this.currentSource) {\n      try {\n        this.currentSource.stop();\n      } catch (error) {\n        // Ignore errors from stopping already stopped sources\n      }\n      this.currentSource = null;\n    }\n\n    // Clear queue and pending chunks\n    this.audioQueue = [];\n    this.pendingChunks.clear();\n    this.nextExpectedChunkId = 0;\n    this.isPlaying = false;\n  }\n\n  /**\n   * Reset the chunk ID counter for a new streaming session\n   */\n  resetChunkCounter() {\n    this.nextExpectedChunkId = 0;\n    this.pendingChunks.clear();\n    console.log('[StreamingTTS] Chunk counter reset for new session');\n  }\n\n  /**\n   * Check if audio is currently playing\n   */\n  isCurrentlyPlaying(): boolean {\n    return this.isPlaying;\n  }\n\n  /**\n   * Get number of chunks in queue\n   */\n  getQueueLength(): number {\n    return this.audioQueue.length;\n  }\n\n  /**\n   * Set callback for when all queued audio finishes playing\n   */\n  onPlaybackCompleted(callback: () => void) {\n    this.onPlaybackComplete = callback;\n  }\n\n  /**\n   * Set callback for errors\n   */\n  onStreamingError(callback: (error: string) => void) {\n    this.onError = callback;\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy() {\n    this.stopPlayback();\n    this.pendingChunks.clear();\n    this.nextExpectedChunkId = 0;\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n  }\n}\n\n/**\n * Text chunking utilities for optimal TTS streaming\n */\nexport class TextChunker {\n  /**\n   * Split text into optimal chunks for TTS\n   * Aims for natural speech breaks while keeping chunks reasonably sized\n   */\n  static chunkText(text: string, maxChunkSize: number = 200): string[] {\n    const chunks: string[] = [];\n    \n    // Split by sentences first\n    const sentences = text.split(/[.!?]+/).filter(s => s.trim());\n    \n    let currentChunk = '';\n    \n    for (const sentence of sentences) {\n      const trimmedSentence = sentence.trim();\n      if (!trimmedSentence) continue;\n      \n      // If adding this sentence would exceed max size and we have content, finalize chunk\n      if (currentChunk && (currentChunk.length + trimmedSentence.length + 2) > maxChunkSize) {\n        chunks.push(currentChunk.trim() + '.');\n        currentChunk = trimmedSentence;\n      } else {\n        currentChunk += (currentChunk ? '. ' : '') + trimmedSentence;\n      }\n    }\n    \n    // Add final chunk\n    if (currentChunk.trim()) {\n      chunks.push(currentChunk.trim() + (currentChunk.endsWith('.') ? '' : '.'));\n    }\n    \n    return chunks;\n  }\n\n  /**\n   * Smart chunking that considers punctuation and natural breaks\n   */\n  static smartChunk(text: string, targetChunkSize: number = 150): string[] {\n    const chunks: string[] = [];\n    \n    // Priority order for splitting: sentences, clauses, phrases, words\n    const breakPoints = [\n      /[.!?]+\\s+/g,  // Sentence endings\n      /[,;:]\\s+/g,   // Clause breaks\n      /\\s+(?=and|but|or|so|yet|for|nor)\\s+/g, // Conjunctions\n      /\\s+/g         // Word breaks (fallback)\n    ];\n    \n    let remainingText = text;\n    \n    while (remainingText.length > targetChunkSize) {\n      let bestSplit = -1;\n      \n      // Try each break point type in order of preference\n      for (const breakRegex of breakPoints) {\n        const matches = Array.from(remainingText.matchAll(breakRegex));\n        \n        // Find the best split point (closest to target size without going over)\n        for (const match of matches) {\n          const splitIndex = match.index! + match[0].length;\n          if (splitIndex <= targetChunkSize && splitIndex > bestSplit) {\n            bestSplit = splitIndex;\n          }\n        }\n        \n        if (bestSplit > 0) break; // Found a good split\n      }\n      \n      // If no good split found, split at target size\n      if (bestSplit <= 0) {\n        bestSplit = targetChunkSize;\n      }\n      \n      chunks.push(remainingText.slice(0, bestSplit).trim());\n      remainingText = remainingText.slice(bestSplit).trim();\n    }\n    \n    // Add final chunk\n    if (remainingText) {\n      chunks.push(remainingText);\n    }\n    \n    return chunks.filter(chunk => chunk.length > 0);\n  }\n}","import { utils } from \"@ricky0123/vad-react\";\nimport type { VoiceOption, PersonaOption } from '@/store/voice-settings';\nimport { StreamingTTSManager } from './streaming-tts';\n\nexport interface VoiceCallbacks {\n  onUserSpeaking?: () => void;\n  onProcessing?: () => void;\n  onAiSpeaking?: () => void;\n  onReset?: () => void;\n  onError?: (error: string) => void;\n  onDebug?: (message: string, data?: any) => void;\n  // New callbacks for message store integration\n  onTranscriptReceived?: (transcript: string) => void;\n  onResponseReceived?: (response: string) => void;\n  // Streaming callbacks\n  onStreamingTextChunk?: (textChunk: string) => void;\n  onStreamingAudioReady?: (audioUrl: string, chunkId: string) => void;\n  onStreamingComplete?: (fullResponse: string, transcript: string) => void;\n}\n\nclass SpeechManager {\n  private source: AudioBufferSourceNode | null = null;\n  private sourceIsStarted = false;\n  private conversationThusFar: any[] = [];\n  private callbacks: VoiceCallbacks = {};\n  private projectId: string | null = null;\n  private sessionId: string | null = null;\n  private voiceSettings: { voice: VoiceOption; persona: PersonaOption } | null = null;\n  private streamingTTS: StreamingTTSManager | null = null;\n  private chatbotModel: string = 'gpt-3.5-turbo'; // Default to fast model for voice if not specified by agent\n  // Streaming is always enabled for optimal performance\n\n  setCallbacks(callbacks: VoiceCallbacks) {\n    this.callbacks = callbacks;\n    this.debug(\"Callbacks set\", { hasCallbacks: Object.keys(callbacks) });\n  }\n\n  setProjectId(projectId: string) {\n    this.projectId = projectId;\n    this.debug(\"Project ID set\", { projectId });\n  }\n\n  setSessionId(sessionId: string | null) {\n    this.sessionId = sessionId;\n    this.debug(\"Session ID set\", { sessionId });\n  }\n\n  setVoiceSettings(voice: VoiceOption, persona: PersonaOption) {\n    this.voiceSettings = { voice, persona };\n    this.debug(\"Voice settings set\", { voice, persona });\n  }\n\n  setChatbotModel(model: string) {\n    this.chatbotModel = model;\n    this.debug(\"Chatbot model set\", { model });\n  }\n\n  private debug(message: string, data?: any) {\n    // Production: Debug logging disabled\n    // Uncomment for development debugging:\n    // const timestamp = new Date().toISOString();\n    // console.log(`🎯 [SPEECH-MANAGER ${timestamp}] ${message}`, data || '');\n    this.callbacks.onDebug?.(message, data);\n  }\n\n  private error(message: string, error?: any) {\n    const timestamp = new Date().toISOString();\n    console.error(`❌ [SPEECH-MANAGER ${timestamp}] ${message}`, error || '');\n    this.callbacks.onError?.(message);\n  }\n\n  onSpeechStart = () => {\n    this.debug(\"Speech started - user is speaking\");\n    this.callbacks.onUserSpeaking?.();\n    this.stopSourceIfNeeded();\n  };\n\n  onSpeechEnd = async (audio: Float32Array) => {\n    this.debug(\"Speech ended\", { \n      audioLength: audio.length,\n      audioDuration: `${audio.length / 16000}s` // Assuming 16kHz sample rate\n    });\n    await this.processAudio(audio);\n  };\n\n  onMisfire = () => {\n    this.debug(\"VAD misfire - noise detected but not speech\");\n    this.callbacks.onReset?.();\n  };\n\n  private stopSourceIfNeeded = () => {\n    if (this.source && this.sourceIsStarted) {\n      this.debug(\"Stopping current audio playback\");\n      this.source.stop(0);\n      this.sourceIsStarted = false;\n    }\n  };\n\n  // Public method to stop audio playback\n  public stopAudio = () => {\n    this.stopSourceIfNeeded();\n    \n    // Also stop streaming TTS if active\n    if (this.streamingTTS) {\n      this.streamingTTS.stopPlayback();\n      this.debug(\"🛑 Streaming TTS stopped\");\n    }\n    \n    this.callbacks.onReset?.();\n    this.debug(\"Audio stopped by user\");\n  };\n\n  // Public method to process manually recorded audio\n  public processManualAudio = async (audioBlob: Blob) => {\n    this.debug(\"Processing manual audio\", { \n      size: `${(audioBlob.size / 1024).toFixed(2)}KB`,\n      type: audioBlob.type\n    });\n    this.callbacks.onProcessing?.();\n    \n    try {\n      await this.validate(audioBlob);\n      await this.sendData(audioBlob);\n    } catch (error) {\n      this.error('Error processing manual audio', error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private processAudio = async (audio: Float32Array) => {\n    this.debug(\"Processing audio started\");\n    this.callbacks.onProcessing?.();\n    \n    try {\n      const blob = this.createAudioBlob(audio);\n      await this.validate(blob);\n      await this.sendData(blob);\n    } catch (error) {\n      this.error('Error processing audio', error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private createAudioBlob = (audio: Float32Array): Blob => {\n    const wavBuffer = utils.encodeWAV(audio);\n    const blob = new Blob([wavBuffer], { type: 'audio/wav' });\n    this.debug(\"Created audio blob\", { \n      size: `${(blob.size / 1024).toFixed(2)}KB`,\n      type: blob.type,\n      samples: audio.length,\n      duration: `${audio.length / 16000}s` // Assuming 16kHz from VAD\n    });\n    return blob;\n  };\n\n  private sendData = async (blob: Blob) => {\n    // Always use streaming mode\n    await this.sendStreamingData(blob);\n  };\n\n  private sendStreamingData = async (blob: Blob) => {\n    this.debug(\"🚀 Sending audio data to streaming API\");\n    \n    if (!this.projectId) {\n      this.error('No project ID set - cannot send audio');\n      this.callbacks.onReset?.();\n      return;\n    }\n\n    // Initialize streaming TTS manager\n    if (!this.streamingTTS) {\n      this.streamingTTS = new StreamingTTSManager();\n      this.streamingTTS.onPlaybackCompleted(() => {\n        this.debug(\"🔄 Streaming playback completed\");\n        this.callbacks.onReset?.();\n      });\n      this.streamingTTS.onStreamingError((error) => {\n        this.error('🎵 Streaming TTS error', error);\n      });\n    } else {\n      // Reset chunk counter for new streaming session\n      this.streamingTTS.resetChunkCounter();\n    }\n\n    const formData = new FormData();\n    formData.append(\"audio\", blob, \"audio.wav\");\n    formData.append(\"project_id\", this.projectId);\n    if (this.sessionId) {\n      formData.append(\"session_id\", this.sessionId);\n    }\n    \n    // Add voice settings to the request\n    if (this.voiceSettings) {\n      formData.append(\"voice\", this.voiceSettings.voice);\n      formData.append(\"persona\", this.voiceSettings.persona);\n    }\n    \n    // Note: chatbot_model is not sent to voice API\n    // The agent's configured model will be used automatically\n\n    this.debug(\"🔄 Starting streaming voice request\", {\n      projectId: this.projectId,\n      sessionId: this.sessionId,\n      conversationLength: this.conversationThusFar.length,\n      audioSize: `${(blob.size / 1024).toFixed(2)}KB`,\n      voice: this.voiceSettings?.voice,\n      persona: this.voiceSettings?.persona,\n      lastMessages: this.conversationThusFar.slice(-2).map(m => ({ role: m.role, preview: m.content.slice(0, 50) }))\n    });\n\n    try {\n      // Check for demo mode OpenAI key\n      const headers: Record<string, string> = {\n        'conversation': this.base64Encode(JSON.stringify(this.conversationThusFar))\n      };\n      \n      // Add deployment mode header\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n      headers['X-Deployment-Mode'] = deploymentMode;\n      \n      console.log('🔍 [SPEECH-MANAGER] Deployment mode from localStorage:', deploymentMode);\n      console.log('🔍 [SPEECH-MANAGER] localStorage value:', localStorage.getItem('customgpt.deploymentMode'));\n      console.log('🔍 [SPEECH-MANAGER] Sending headers:', headers);\n      \n      // In demo mode, add keys from window object if available\n      if (deploymentMode === 'demo') {\n        // Add OpenAI key for TTS/STT\n        if ((window as any).__demoOpenAIKey) {\n          headers['X-OpenAI-API-Key'] = (window as any).__demoOpenAIKey;\n        }\n        // Add CustomGPT API key for chat completions\n        if ((window as any).__demoCustomGPTKey) {\n          headers['X-CustomGPT-API-Key'] = (window as any).__demoCustomGPTKey;\n        }\n      }\n      \n      const response = await fetch(\"/api/proxy/voice/streaming\", {\n        method: \"POST\",\n        body: formData,\n        headers\n      });\n\n      this.debug(\"🎯 Streaming response received\", {\n        status: response.status,\n        ok: response.ok,\n        contentType: response.headers.get('content-type')\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch {\n          errorData = { error: errorText };\n        }\n        \n        // Check if it's specifically an OpenAI API key error\n        if (response.status === 503 && errorData.userMessage) {\n          throw new Error(errorData.userMessage);\n        }\n        \n        throw new Error(`Streaming API Error (${response.status}): ${errorData.error || errorText}`);\n      }\n\n      // Process streaming response\n      await this.processStreamingResponse(response);\n    } catch (error) {\n      this.error(\"❌ Failed to process streaming voice\", error);\n      this.handleError(error);\n    }\n  };\n\n  private processStreamingResponse = async (response: Response) => {\n    if (!response.body) {\n      throw new Error(\"No response body for streaming\");\n    }\n\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    \n    let fullResponse = '';\n    let transcript = '';\n    let currentStreamingActive = false;\n\n    this.debug(\"🔄 Processing streaming response chunks\");\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          this.debug(\"✅ Streaming response complete\");\n          break;\n        }\n\n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data.trim() === '') continue;\n\n            try {\n              const parsed = JSON.parse(data);\n              \n              if (parsed.type === 'text') {\n                // Stream text chunk\n                fullResponse += parsed.text;\n                \n                // Trigger UI update for text streaming\n                this.callbacks.onStreamingTextChunk?.(parsed.text);\n                \n                this.debug(`📝 Text chunk received: \"${parsed.text}\"`);\n                \n              } else if (parsed.type === 'audio' || parsed.type === 'audio_ref') {\n                // Audio chunk ready - queue it for playback\n                if (parsed.audioUrl || parsed.audioId) {\n                  if (!currentStreamingActive) {\n                    this.callbacks.onAiSpeaking?.();\n                    currentStreamingActive = true;\n                  }\n                  \n                  // Handle both legacy data URL and new audio reference\n                  if (parsed.audioUrl) {\n                    // Legacy: Convert data URL to audio and queue it\n                    await this.queueAudioChunk(parsed.audioUrl, parsed.chunkId);\n                  } else if (parsed.audioId) {\n                    // New: Fetch audio chunk by ID\n                    await this.queueAudioChunkById(parsed.audioId, parsed.chunkId);\n                  }\n                  \n                  this.debug(`🎵 Audio chunk queued: ${parsed.chunkId} (${parsed.text?.slice(0, 50)}...)`);\n                }\n                \n              } else if (parsed.type === 'complete') {\n                // Stream complete\n                fullResponse = parsed.fullResponse || fullResponse;\n                transcript = parsed.transcript || transcript;\n                \n                this.debug(\"✅ Stream complete\", { \n                  responseLength: fullResponse.length,\n                  transcript \n                });\n                \n                console.log(`📝 [SPEECH-MANAGER] Complete fullResponse (${fullResponse.length} chars):`, fullResponse);\n                console.log(`📝 [SPEECH-MANAGER] Includes \"individuals\":`, fullResponse.includes('individuals'));\n                console.log(`📝 [SPEECH-MANAGER] Includes \"like\":`, fullResponse.includes('like'));\n                console.log(`📝 [SPEECH-MANAGER] Includes \"CustomGPT\":`, fullResponse.includes('CustomGPT'));\n                \n                // Trigger callbacks for UI updates\n                // Don't update conversationThusFar here - let the message store be the single source of truth\n                if (transcript) {\n                  this.callbacks.onTranscriptReceived?.(transcript);\n                }\n                \n                if (fullResponse) {\n                  this.callbacks.onResponseReceived?.(fullResponse);\n                }\n                \n                this.callbacks.onStreamingComplete?.(fullResponse, transcript);\n                \n              } else if (parsed.type === 'error') {\n                // Stream error\n                this.error(`🚨 Stream error: ${parsed.error}`);\n                this.callbacks.onReset?.();\n              }\n            } catch (parseError) {\n              this.debug(`⚠️ Failed to parse chunk: ${data}`, parseError);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      this.error(\"❌ Error processing streaming response\", error);\n      this.callbacks.onReset?.();\n    } finally {\n      reader.releaseLock();\n    }\n  };\n\n  private queueAudioChunk = async (audioDataUrl: string, chunkId: string) => {\n    if (!this.streamingTTS) {\n      this.error(\"❌ StreamingTTS not initialized\");\n      return;\n    }\n\n    try {\n      // Extract numeric chunk ID from the string (e.g., \"chunk_0\" -> 0)\n      const numericChunkId = parseInt(chunkId.replace('chunk_', ''));\n      \n      // Convert data URL to blob\n      const response = await fetch(audioDataUrl);\n      const audioBlob = await response.blob();\n      \n      // Convert blob to ArrayBuffer for Web Audio API\n      const arrayBuffer = await audioBlob.arrayBuffer();\n      \n      // Create audio context and decode\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      // Queue the decoded audio buffer with ID for ordered playback\n      await this.streamingTTS.addAudioBufferWithId(audioBuffer, numericChunkId);\n      \n      this.debug(`🎵 Audio chunk queued with ID ${numericChunkId}: ${chunkId}`);\n    } catch (error) {\n      this.error(`❌ Failed to queue audio chunk ${chunkId}`, error);\n    }\n  };\n\n  // Legacy sendLegacyData method removed - streaming is always used\n  \n  private queueAudioChunkById = async (audioId: string, chunkId: string) => {\n    if (!this.streamingTTS) {\n      this.error(\"❌ StreamingTTS not initialized\");\n      return;\n    }\n\n    try {\n      // Extract numeric chunk ID from the string (e.g., \"chunk_0\" -> 0)\n      const numericChunkId = parseInt(chunkId.replace('chunk_', ''));\n      \n      // Fetch audio chunk by ID from the streaming endpoint\n      const response = await fetch(`/api/proxy/voice/streaming?id=${audioId}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          // Audio chunk not found - this can happen after server restart\n          this.debug(`⚠️ Audio chunk not found (server may have restarted): ${chunkId}`);\n          return; // Skip this chunk gracefully\n        }\n        throw new Error(`Failed to fetch audio chunk: ${response.status}`);\n      }\n      \n      const audioBlob = await response.blob();\n      \n      // Convert blob to ArrayBuffer for Web Audio API\n      const arrayBuffer = await audioBlob.arrayBuffer();\n      \n      // Create audio context and decode\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      // Queue the decoded audio buffer with ID for ordered playback\n      await this.streamingTTS.addAudioBufferWithId(audioBuffer, numericChunkId);\n      \n      this.debug(`🎵 Audio chunk fetched and queued with ID ${numericChunkId}: ${chunkId}`);\n    } catch (error) {\n      this.error(`❌ Failed to fetch/queue audio chunk ${chunkId}`, error);\n    }\n  };\n\n  // Legacy sendLegacyData method removed - streaming is always used\n\n  private base64Encode(str: string): string {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(str);\n    return window.btoa(String.fromCharCode(...new Uint8Array(data)));\n  }\n\n  private base64Decode(base64: string): string {\n    const binaryStr = window.atob(base64);\n    const bytes = new Uint8Array([...binaryStr].map((char) => char.charCodeAt(0)));\n    return new TextDecoder().decode(bytes);\n  }\n\n  private handleSuccess = async (blob: Blob) => {\n    this.debug(\"Playing AI response audio\");\n    \n    try {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      this.stopSourceIfNeeded();\n\n      const arrayBuffer = await blob.arrayBuffer();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      this.debug(\"Audio decoded\", {\n        duration: `${audioBuffer.duration.toFixed(2)}s`,\n        sampleRate: audioBuffer.sampleRate,\n        numberOfChannels: audioBuffer.numberOfChannels\n      });\n\n      this.source = audioContext.createBufferSource();\n      this.source.buffer = audioBuffer;\n      this.source.connect(audioContext.destination);\n      this.source.start(0);\n      this.sourceIsStarted = true;\n      \n      this.source.onended = () => {\n        this.debug(\"Audio playback ended\");\n        this.callbacks.onReset?.();\n      };\n\n      this.callbacks.onAiSpeaking?.();\n    } catch (error) {\n      this.error(\"Failed to play audio\", error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private handleError = (error: any) => {\n    this.error(`Error encountered: ${error.message}`, error);\n    this.callbacks.onReset?.();\n  };\n\n  private validate = async (data: Blob) => {\n    this.debug(\"Validating audio duration\");\n    \n    try {\n      // Clone the blob to avoid consuming the arrayBuffer\n      const clonedBlob = new Blob([data], { type: data.type });\n      const arrayBuffer = await clonedBlob.arrayBuffer();\n      const audioContext = new AudioContext();\n      const decodedData = await audioContext.decodeAudioData(arrayBuffer);\n      const duration = decodedData.duration;\n      const minDuration = 0.4;\n\n      this.debug(\"Audio validation\", {\n        duration: `${duration.toFixed(2)}s`,\n        minDuration: `${minDuration}s`,\n        valid: duration >= minDuration\n      });\n\n      if (duration < minDuration) {\n        throw new Error(`Duration is ${duration}s, which is less than minimum of ${minDuration}s`);\n      }\n    } catch (error) {\n      this.error(\"Audio validation failed\", error);\n      throw error;\n    }\n  };\n\n  clearConversation() {\n    this.conversationThusFar = [];\n  }\n\n  getConversationThusFar() {\n    return this.conversationThusFar;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  // Set the conversation history from existing messages\n  setConversationHistory(messages: any[]) {\n    // Clean and deduplicate messages before setting\n    const cleanedMessages = messages\n      .filter((msg, index, self) => \n        // Remove duplicates based on content and role\n        index === self.findIndex(m => m.content === msg.content && m.role === msg.role)\n      )\n      .map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n    \n    this.conversationThusFar = cleanedMessages;\n    this.debug(\"Conversation history loaded\", {\n      messageCount: this.conversationThusFar.length,\n      originalCount: messages.length\n    });\n  }\n\n\n  // Public method to clean up streaming resources\n  public destroy() {\n    this.stopAudio();\n    if (this.streamingTTS) {\n      this.streamingTTS.destroy();\n      this.streamingTTS = null;\n    }\n    this.debug(\"🧹 SpeechManager destroyed\");\n  }\n}\n\nexport const speechManager = new SpeechManager();","/**\n * Utility functions for voice mode\n */\n\n/**\n * Simple markdown parser for voice responses\n * Removes markdown formatting for cleaner display in voice UI\n */\nexport function parseMarkdownForVoice(text: string): string {\n  return text\n    // Remove bold markers\n    .replace(/\\*\\*(.*?)\\*\\*/g, '$1')\n    // Remove italic markers\n    .replace(/\\*(.*?)\\*/g, '$1')\n    // Remove code blocks\n    .replace(/```[\\s\\S]*?```/g, '')\n    // Remove inline code\n    .replace(/`([^`]+)`/g, '$1')\n    // Remove headers\n    .replace(/#{1,6}\\s+/g, '')\n    // Remove links but keep text\n    .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1')\n    // Remove images\n    .replace(/!\\[([^\\]]*)\\]\\([^)]+\\)/g, '')\n    // Remove horizontal rules\n    .replace(/^-{3,}$/gm, '')\n    // Remove bullet points\n    .replace(/^\\s*[-*+]\\s+/gm, '')\n    // Remove numbered lists\n    .replace(/^\\s*\\d+\\.\\s+/gm, '')\n    // Clean up extra whitespace\n    .replace(/\\n{3,}/g, '\\n\\n')\n    .trim();\n}\n\n/**\n * Split response into chunks for streaming display\n */\nexport function* streamTextChunks(text: string, chunkSize: number = 50): Generator<string> {\n  const words = text.split(' ');\n  let currentChunk = '';\n  \n  for (const word of words) {\n    if (currentChunk.length + word.length + 1 > chunkSize && currentChunk.length > 0) {\n      yield currentChunk.trim();\n      currentChunk = word;\n    } else {\n      currentChunk += (currentChunk ? ' ' : '') + word;\n    }\n  }\n  \n  if (currentChunk) {\n    yield currentChunk.trim();\n  }\n}","/**\n * Simple encryption utilities for demo mode API key storage\n * \n * This provides basic obfuscation to prevent casual observation\n * of API keys in browser storage. This is NOT cryptographically\n * secure and should only be used for demo/playground purposes.\n */\n\n/**\n * Generate a random key for encryption\n */\nexport function generateKey(): string {\n  const array = new Uint8Array(32);\n  crypto.getRandomValues(array);\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\n/**\n * Simple XOR encryption (obfuscation)\n * This is NOT secure encryption - it's just to prevent\n * API keys from being stored in plain text\n */\nexport function encrypt(text: string, key: string): string {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    result += String.fromCharCode(\n      text.charCodeAt(i) ^ key.charCodeAt(i % key.length)\n    );\n  }\n  return btoa(result); // Base64 encode\n}\n\n/**\n * Decrypt XOR encrypted text\n */\nexport function decrypt(encrypted: string, key: string): string {\n  try {\n    const text = atob(encrypted); // Base64 decode\n    let result = '';\n    for (let i = 0; i < text.length; i++) {\n      result += String.fromCharCode(\n        text.charCodeAt(i) ^ key.charCodeAt(i % key.length)\n      );\n    }\n    return result;\n  } catch {\n    return '';\n  }\n}\n\n/**\n * Validate API key format\n */\nexport function isValidApiKey(key: string): boolean {\n  // CustomGPT.ai API key format: projectId|apiKey\n  // Example: 7840|8TPfOoyBywFfUfvwuY7ZZ2s1WAFtxU7WCxunMbej\n  const trimmedKey = key.trim();\n  \n  // Check if it contains a pipe character\n  if (!trimmedKey.includes('|')) {\n    return false;\n  }\n  \n  // Split and validate both parts\n  const [projectId, apiKey] = trimmedKey.split('|');\n  \n  // Project ID should be numeric\n  if (!projectId || !/^\\d+$/.test(projectId)) {\n    return false;\n  }\n  \n  // API key should be alphanumeric (with possible special chars)\n  if (!apiKey || apiKey.length < 20) {\n    return false;\n  }\n  \n  return true;\n}","/**\n * Demo Mode Store\n * \n * Manages API key storage and authentication for demo/playground mode.\n * Uses encrypted sessionStorage for temporary key storage that survives\n * page refreshes but is cleared when the browser tab is closed.\n */\n\nimport { create } from 'zustand';\nimport { encrypt, decrypt, generateKey, isValidApiKey } from '@/lib/crypto';\n\ninterface DemoStore {\n  // Demo mode configuration\n  isDemoMode: boolean;\n  \n  // API key management\n  apiKey: string | null;\n  openAIApiKey: string | null;\n  encryptionKey: string | null;\n  \n  // UI state\n  isAuthenticated: boolean;\n  error: string | null;\n  \n  // Session management\n  sessionStartTime: number | null;\n  sessionTimeout: number; // 2 hours in milliseconds\n  \n  // Actions\n  setApiKey: (key: string) => void;\n  setOpenAIApiKey: (key: string) => void;\n  clearApiKey: () => void;\n  validateSession: () => boolean;\n  setError: (error: string | null) => void;\n  initializeFromStorage: () => void;\n  restoreSession: () => boolean;\n}\n\nconst STORAGE_KEY = 'customgpt-demo-key';\nconst OPENAI_STORAGE_KEY = 'customgpt-demo-openai-key';\nconst ENCRYPTION_KEY = 'customgpt-demo-enc';\nconst SESSION_KEY = 'customgpt-demo-session';\nconst SESSION_TIMEOUT = 2 * 60 * 60 * 1000; // 2 hours\n\nexport const useDemoStore = create<DemoStore>((set, get) => ({\n  // Check if demo mode is enabled from localStorage deployment mode\n  isDemoMode: typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') === 'demo' : false,\n  \n  apiKey: null,\n  openAIApiKey: null,\n  encryptionKey: null,\n  isAuthenticated: false,\n  error: null,\n  sessionStartTime: null,\n  sessionTimeout: SESSION_TIMEOUT,\n  \n  setApiKey: (key: string) => {\n    const trimmedKey = key.trim();\n    \n    // Validate API key format\n    if (!isValidApiKey(trimmedKey)) {\n      set({ error: 'Invalid API key format' });\n      return;\n    }\n    \n    try {\n      // Generate encryption key\n      const encKey = generateKey();\n      \n      // Encrypt and store in sessionStorage\n      const encrypted = encrypt(trimmedKey, encKey);\n      sessionStorage.setItem(STORAGE_KEY, encrypted);\n      sessionStorage.setItem(ENCRYPTION_KEY, encKey);\n      \n      // Store session info\n      const sessionInfo = {\n        startTime: Date.now(),\n        encKey: encKey\n      };\n      sessionStorage.setItem(SESSION_KEY, JSON.stringify(sessionInfo));\n      \n      // Update store state\n      set({\n        apiKey: trimmedKey,\n        encryptionKey: encKey,\n        isAuthenticated: true,\n        error: null,\n        sessionStartTime: Date.now()\n      });\n    } catch (error) {\n      set({ error: 'Failed to store API key' });\n    }\n  },\n  \n  setOpenAIApiKey: (key: string) => {\n    const trimmedKey = key.trim();\n    const state = get();\n    \n    // Only allow if already authenticated with CustomGPT key\n    if (!state.isAuthenticated) {\n      set({ error: 'Please enter CustomGPT.ai API key first' });\n      return;\n    }\n    \n    // OpenAI keys typically start with 'sk-'\n    if (trimmedKey && !trimmedKey.startsWith('sk-')) {\n      set({ error: 'Invalid OpenAI API key format' });\n      return;\n    }\n    \n    try {\n      // Use same encryption key as CustomGPT key\n      const encKey = state.encryptionKey;\n      if (!encKey) {\n        set({ error: 'Encryption key not found' });\n        return;\n      }\n      \n      if (trimmedKey) {\n        // Encrypt and store\n        const encrypted = encrypt(trimmedKey, encKey);\n        sessionStorage.setItem(OPENAI_STORAGE_KEY, encrypted);\n        set({ openAIApiKey: trimmedKey, error: null });\n      } else {\n        // Clear OpenAI key\n        sessionStorage.removeItem(OPENAI_STORAGE_KEY);\n        set({ openAIApiKey: null, error: null });\n      }\n    } catch (error) {\n      set({ error: 'Failed to store OpenAI API key' });\n    }\n  },\n  \n  clearApiKey: () => {\n    // Clear from storage\n    sessionStorage.removeItem(STORAGE_KEY);\n    sessionStorage.removeItem(OPENAI_STORAGE_KEY);\n    sessionStorage.removeItem(ENCRYPTION_KEY);\n    sessionStorage.removeItem(SESSION_KEY);\n    \n    // Clear from memory\n    set({\n      apiKey: null,\n      openAIApiKey: null,\n      encryptionKey: null,\n      isAuthenticated: false,\n      error: null,\n      sessionStartTime: null\n    });\n  },\n  \n  validateSession: () => {\n    const state = get();\n    \n    // Check if session has expired\n    if (state.sessionStartTime) {\n      const elapsed = Date.now() - state.sessionStartTime;\n      if (elapsed > state.sessionTimeout) {\n        state.clearApiKey();\n        state.setError('Session expired. Please enter your API key again.');\n        return false;\n      }\n    }\n    \n    return state.isAuthenticated;\n  },\n  \n  setError: (error: string | null) => {\n    set({ error });\n  },\n  \n  initializeFromStorage: () => {\n    const state = get();\n    \n    // Only initialize if demo mode is enabled\n    if (!state.isDemoMode) return;\n    \n    // Try to restore the session\n    state.restoreSession();\n  },\n  \n  restoreSession: () => {\n    const state = get();\n    \n    try {\n      // Check for session info\n      const sessionData = sessionStorage.getItem(SESSION_KEY);\n      if (!sessionData) return false;\n      \n      const sessionInfo = JSON.parse(sessionData);\n      const { startTime, encKey } = sessionInfo;\n      \n      // Check if session expired\n      const elapsed = Date.now() - startTime;\n      if (elapsed > SESSION_TIMEOUT) {\n        state.clearApiKey();\n        state.setError('Session expired. Please enter your API key again.');\n        return false;\n      }\n      \n      // Try to restore encrypted keys\n      const encrypted = sessionStorage.getItem(STORAGE_KEY);\n      const encryptedOpenAI = sessionStorage.getItem(OPENAI_STORAGE_KEY);\n      \n      if (!encrypted || !encKey) return false;\n      \n      // Decrypt API keys\n      const apiKey = decrypt(encrypted, encKey);\n      if (!apiKey || !isValidApiKey(apiKey)) {\n        state.clearApiKey();\n        return false;\n      }\n      \n      // Restore OpenAI key if present\n      let openAIKey = null;\n      if (encryptedOpenAI) {\n        openAIKey = decrypt(encryptedOpenAI, encKey);\n      }\n      \n      // Restore state\n      set({\n        apiKey: apiKey,\n        openAIApiKey: openAIKey,\n        encryptionKey: encKey,\n        isAuthenticated: true,\n        sessionStartTime: startTime,\n        error: null\n      });\n      \n      return true;\n    } catch {\n      // Session restore failed, clear everything\n      state.clearApiKey();\n      return false;\n    }\n  }\n}));\n\n// Auto-clear on tab visibility change (optional security feature)\nif (typeof window !== 'undefined') {\n  document.addEventListener('visibilitychange', () => {\n    if (document.hidden) {\n      // Optional: Clear API key when tab is hidden\n      // Uncomment for extra security\n      // const { clearApiKey } = useDemoStore.getState();\n      // clearApiKey();\n    }\n  });\n  \n  // Check session validity periodically\n  setInterval(() => {\n    const { validateSession } = useDemoStore.getState();\n    validateSession();\n  }, 60000); // Check every minute\n}","'use client';\n\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { useMicVAD, utils } from '@ricky0123/vad-react';\nimport RotateLoader from 'react-spinners/RotateLoader';\nimport { X, StopCircle, Mic, MicOff, Settings } from 'lucide-react';\nimport Canvas from './Canvas';\nimport { VoiceSettings } from './VoiceSettings';\nimport { speechManager } from '@/lib/voice/speech-manager';\nimport { useMessageStore, useConversationStore } from '@/hooks/useWidgetStore';\nimport { useAgentStore } from '@/store/agents';\nimport { generateId, generateConversationName } from '@/lib/utils';\nimport { useVoiceSettingsStore } from '@/store/voice-settings';\nimport { parseMarkdownForVoice } from '@/lib/voice/utils';\nimport { useDemoStore } from '@/store/demo';\nimport { AlertTriangle } from 'lucide-react';\n\ninterface VoiceModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  projectId: string;\n  projectName?: string;\n}\n\n// Voice states for UI animations\ntype VoiceState = 'idle' | 'listening' | 'recording' | 'processing' | 'speaking';\n\n// Separate component that handles VAD initialization\nfunction VoiceModalContent({ isOpen, onClose, projectId, projectName }: VoiceModalProps) {\n  const [loading, setLoading] = useState(true);\n  const [transcript, setTranscript] = useState('');\n  const [agentResponse, setAgentResponse] = useState('');\n  const [isManualRecording, setIsManualRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null);\n  const [apiKeyError, setApiKeyError] = useState(false);\n  const [isAgentSpeaking, setIsAgentSpeaking] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [voiceState, setVoiceState] = useState<VoiceState>('idle');\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  \n  // Streaming state\n  const [isStreamingText, setIsStreamingText] = useState(false);\n  const [streamingResponse, setStreamingResponse] = useState('');\n  \n  // Message store integration\n  const { addMessage, messages, loadMessages } = useMessageStore();\n  const { currentConversation, ensureConversation, updateConversation } = useConversationStore();\n  const [currentUserMessageId, setCurrentUserMessageId] = useState<string | null>(null);\n  const [voiceConversation, setVoiceConversation] = useState<any>(null);\n  \n  // Guard to prevent multiple conversation creation attempts\n  const conversationSetupRef = useRef<boolean>(false);\n  \n  // Voice settings integration\n  const { selectedVoice, selectedPersona, setVoiceModalOpen } = useVoiceSettingsStore();\n  \n  // Demo mode check\n  const { isDemoMode, openAIApiKey } = useDemoStore();\n  \n  // Check if OpenAI API key is available\n  const checkOpenAIKeyAvailability = useCallback(() => {\n    const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n    if (deploymentMode === 'demo' && !openAIApiKey) {\n      return false;\n    }\n    // In production mode, we can't check server-side env from client\n    // We'll let the API handle validation\n    return true;\n  }, [openAIApiKey]);\n\n  // Initialize VAD with error handling\n  const vad = useMicVAD({\n    preSpeechPadFrames: 10,\n    positiveSpeechThreshold: 0.8,   // Lower threshold for easier detection\n    negativeSpeechThreshold: 0.6,   // Lower threshold\n    minSpeechFrames: 3,              // Reduce minimum frames\n    startOnLoad: false,              // Start manually\n    workletURL: '/vad.worklet.bundle.min.js',\n    modelURL: '/silero_vad.onnx',\n    // VAD configuration\n    onSpeechStart: () => {\n      console.log('🎤 [VAD] Speech started detected');\n      speechManager.onSpeechStart();\n    },\n    onSpeechEnd: (audio) => {\n      console.log('🎤 [VAD] Speech ended, audio length:', audio.length);\n      speechManager.onSpeechEnd(audio);\n    },\n    onVADMisfire: () => {\n      console.log('🎤 [VAD] Misfire detected');\n      speechManager.onMisfire();\n    }\n  });\n\n  // Control global voice modal state for hiding mobile navigation\n  useEffect(() => {\n    setVoiceModalOpen(isOpen);\n    \n    // Extra cleanup when closing to ensure mobile navigation reappears\n    if (!isOpen) {\n      // Reset conversation setup guard when modal closes\n      conversationSetupRef.current = false;\n      // Clear voice conversation reference when modal closes\n      setVoiceConversation(null);\n      \n      // Small delay to ensure the state change is processed\n      setTimeout(() => {\n        setVoiceModalOpen(false);\n      }, 100);\n    }\n  }, [isOpen, setVoiceModalOpen]);\n\n  // Set up speech manager when modal opens\n  useEffect(() => {\n    if (isOpen && projectId) {\n      console.log('🔧 [VOICE-MODAL] Setting up speech manager');\n      speechManager.setProjectId(projectId);\n      \n      // Apply voice settings to speech manager\n      speechManager.setVoiceSettings(selectedVoice, selectedPersona);\n      \n      // Pass demo keys to window object for speech manager (only in demo mode)\n      if (isDemoMode) {\n        if (openAIApiKey) {\n          (window as any).__demoOpenAIKey = openAIApiKey;\n        }\n        // Also pass CustomGPT API key from demo store\n        const demoApiKey = useDemoStore.getState().apiKey;\n        if (demoApiKey) {\n          (window as any).__demoCustomGPTKey = demoApiKey;\n        }\n      }\n      \n      // Theme is now handled directly by Canvas component through themeId prop\n      \n      // Check if agent is active\n      const currentAgentStore = useAgentStore.getState();\n      const agent = currentAgentStore.agents.find(a => a.id === parseInt(projectId));\n      \n      if (agent && !agent.is_chat_active) {\n        console.warn('⚠️ [VOICE-MODAL] Agent is inactive - may fall back to OpenAI');\n      }\n      \n      // Set the model based on agent settings or use fast default for voice\n      if (agent?.settings?.chatbot_model) {\n        speechManager.setChatbotModel(agent.settings.chatbot_model);\n      } else {\n        // Default to fast model for voice if agent doesn't have a model configured\n        speechManager.setChatbotModel('gpt-3.5-turbo');\n      }\n      \n      // Ensure we have a conversation before starting voice\n      const setupConversation = async () => {\n        // Prevent multiple setup attempts\n        if (conversationSetupRef.current) {\n          console.log('🔄 [VOICE-MODAL] Conversation setup already in progress, skipping');\n          return;\n        }\n        \n        try {\n          conversationSetupRef.current = true;\n          let conversation = currentConversation;\n          \n          // If no current conversation and no voice conversation stored, create one for voice\n          if (!conversation && !voiceConversation) {\n            console.log('🔄 [VOICE-MODAL] No current conversation, creating one for voice');\n            // Create conversation with voice title\n            conversation = await ensureConversation(parseInt(projectId), 'Voice Conversation');\n            console.log('✅ [VOICE-MODAL] Created conversation:', conversation.id, 'session:', conversation.session_id);\n            \n            // Immediately update the title to ensure it's set correctly\n            try {\n              await updateConversation(conversation.id, conversation.session_id, { name: 'Voice Conversation' });\n              console.log('📝 [VOICE-MODAL] Set initial voice conversation title');\n            } catch (error) {\n              console.error('❌ [VOICE-MODAL] Failed to set initial title:', error);\n            }\n            \n            // Store the conversation reference for reuse\n            setVoiceConversation(conversation);\n          } else if (conversation) {\n            // Store existing conversation reference\n            setVoiceConversation(conversation);\n          } else if (voiceConversation) {\n            // Use the existing voice conversation\n            conversation = voiceConversation;\n          }\n          \n          // Ensure we have a valid conversation before proceeding\n          if (!conversation) {\n            console.error('❌ [VOICE-MODAL] No conversation available after setup');\n            return;\n          }\n          \n          // Load conversation history and session ID\n          const conversationMessages = messages.get(conversation.id.toString()) || [];\n          console.log('📝 [VOICE-MODAL] Loading conversation history:', conversationMessages.length, 'messages');\n          console.log('📝 [VOICE-MODAL] Agent status:', agent?.is_chat_active ? 'Active' : 'Inactive');\n          \n          // Filter out any duplicate messages and ensure proper ordering\n          const cleanedMessages = conversationMessages.filter((msg, index, self) => \n            // Keep only the first occurrence of each message ID\n            index === self.findIndex(m => m.id === msg.id)\n          ).sort((a, b) => \n            // Sort by timestamp to ensure proper ordering\n            new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n          );\n          \n          speechManager.setConversationHistory(cleanedMessages);\n          speechManager.setSessionId(conversation.session_id);\n        } catch (error) {\n          console.error('❌ [VOICE-MODAL] Failed to setup conversation:', error);\n        } finally {\n          // Reset the guard after setup is complete (success or failure)\n          conversationSetupRef.current = false;\n        }\n      };\n      \n      setupConversation();\n      \n      speechManager.setCallbacks({\n        onUserSpeaking: () => {\n          (Canvas as any).onUserSpeaking?.();\n          setTranscript('');\n          setStreamingResponse(''); // Clear streaming response\n          setIsStreamingText(false);\n          setVoiceState('recording');\n        },\n        onProcessing: async () => {\n          (Canvas as any).onProcessing?.();\n          setVoiceState('processing');\n          \n          // Use existing conversation - don't create a new one\n          // The conversation should already be set up in setupConversation()\n          \n          const placeholderUserMessage = {\n            id: generateId(),\n            role: 'user' as const,\n            content: '🎤 Processing voice input...',\n            timestamp: new Date().toISOString(),\n            status: 'sending' as const,\n          };\n          \n          setCurrentUserMessageId(placeholderUserMessage.id);\n          const targetConversation = voiceConversation || currentConversation;\n          if (targetConversation) {\n            addMessage(targetConversation.id.toString(), placeholderUserMessage);\n            console.log('🎤 [VOICE-MODAL] Added placeholder user message');\n          }\n        },\n        onAiSpeaking: () => {\n          (Canvas as any).onAiSpeaking?.();\n          setIsAgentSpeaking(true);\n          setVoiceState('speaking');\n        },\n        onReset: () => {\n          (Canvas as any).reset?.();\n          setIsAgentSpeaking(false);\n          setIsStreamingText(false);\n          setVoiceState('idle');\n        },\n        onDebug: (message: string, data?: any) => {\n          // Debug logging removed for production\n        },\n        onError: (error: string) => {\n          console.error('❌ [VOICE-MODAL] Error from speech manager:', error);\n          // Check if it's an API key error\n          if (error.includes('OpenAI API key') || error.includes('API key')) {\n            setApiKeyError(true);\n            // Also show a toast error\n            const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : null;\n            const isDemoMode = deploymentMode === 'demo';\n            const errorMsg = isDemoMode \n              ? 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n              : 'Voice feature requires OpenAI API key configuration. Please add OPENAI_API_KEY to your .env.local file.';\n            \n            // Import toast at the top of the file\n            import('sonner').then(({ toast }) => {\n              toast.error(errorMsg);\n            });\n          }\n          setIsStreamingText(false);\n          setVoiceState('idle');\n        },\n        onTranscriptReceived: async (transcript: string) => {\n          console.log('🎯 [VOICE-MODAL] Transcript received:', transcript);\n          setTranscript(transcript);\n          \n          // Update conversation title for voice conversations\n          const targetConversation = voiceConversation || currentConversation;\n          if (targetConversation) {\n            const conversationMessages = messages.get(targetConversation.id.toString()) || [];\n            // If this is the first message and conversation doesn't have a proper title yet, set voice title\n            if (conversationMessages.length <= 1) {\n              const currentTitle = targetConversation.name || '';\n              const needsVoiceTitle = !currentTitle || \n                                      currentTitle === 'New voice conversation' || \n                                      currentTitle === 'New Conversation' ||\n                                      currentTitle === 'Processing...' ||\n                                      currentTitle.startsWith('Chat ') ||\n                                      currentTitle.startsWith('OpenAI-') ||\n                                      currentTitle.includes('OpenAI-');\n              \n              if (needsVoiceTitle) {\n                // Generate a more descriptive title based on the transcript\n                let voiceTitle = 'Voice Conversation';\n                if (transcript && transcript.length > 0) {\n                  // Use the first few words of the transcript as the title, but clean it first\n                  const cleanTranscript = transcript\n                    .replace(/^(OpenAI-|System-|API-|Assistant:|User:)\\s*/i, '')\n                    .trim();\n                  if (cleanTranscript.length > 0) {\n                    const words = cleanTranscript.split(/\\s+/).slice(0, 6).join(' ');\n                    voiceTitle = `Voice: ${words.length > 40 ? words.substring(0, 40).trim() + '...' : words}`;\n                  }\n                }\n                \n                console.log('📝 [VOICE-MODAL] Setting voice conversation title:', voiceTitle);\n                try {\n                  await updateConversation(targetConversation.id, targetConversation.session_id, { name: voiceTitle });\n                } catch (error) {\n                  console.error('❌ [VOICE-MODAL] Failed to update conversation title:', error);\n                }\n              }\n            }\n          }\n          \n          // Update the placeholder message with actual transcript\n          \n          if (targetConversation && currentUserMessageId) {\n            // Update the existing placeholder message\n            const updatedUserMessage = {\n              id: currentUserMessageId,\n              role: 'user' as const,\n              content: transcript,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n            };\n            \n            addMessage(targetConversation.id.toString(), updatedUserMessage);\n            console.log('✅ [VOICE-MODAL] Updated user message with transcript');\n          } else {\n            // Fallback: create new message if no placeholder exists\n            // Use the existing conversation from voiceConversation or currentConversation\n            const conversation = voiceConversation || currentConversation;\n            if (!conversation) {\n              console.error('❌ [VOICE-MODAL] No conversation available for user message');\n              return;\n            }\n            \n            const userMessage = {\n              id: generateId(),\n              role: 'user' as const,\n              content: transcript,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n            };\n            \n            setCurrentUserMessageId(userMessage.id);\n            addMessage(conversation.id.toString(), userMessage);\n          }\n        },\n        onResponseReceived: async (response: string) => {\n          console.log('🎯 [VOICE-MODAL] Response received:', response);\n          console.log('🎯 [VOICE-MODAL] Response includes \"individuals\":', response.includes('individuals'));\n          console.log('🎯 [VOICE-MODAL] Response includes \"like\":', response.includes('like'));\n          console.log('🎯 [VOICE-MODAL] Response includes \"CustomGPT\":', response.includes('CustomGPT'));\n          \n          // For streaming responses, this will be called with the final response\n          // Don't update the display here as it's already being updated via streaming chunks\n          // This is mainly for adding the message to the conversation history\n          \n          // Use voiceConversation to ensure we're adding to the same conversation as the user message\n          // This prevents race condition where messages could be added out of order\n          const targetConversation = voiceConversation || currentConversation;\n          \n          if (targetConversation) {\n            // Create and add assistant message to chat\n            const assistantMessage = {\n              id: generateId(),\n              role: 'assistant' as const,\n              content: response,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n              citations: [], // Voice responses typically don't have citations\n            };\n            \n            addMessage(targetConversation.id.toString(), assistantMessage);\n            \n            // Force refresh conversation to ensure proper syncing\n            const currentMessages = messages.get(targetConversation.id.toString()) || [];\n            console.log('🔄 [VOICE-MODAL] Current conversation messages:', currentMessages.length, 'messages');\n            \n          } else {\n            console.warn('⚠️ [VOICE-MODAL] No conversation available for adding assistant message');\n          }\n        },\n        // New streaming callbacks\n        onStreamingTextChunk: (textChunk: string) => {\n          console.log('📝 [VOICE-MODAL] Streaming text chunk:', textChunk);\n          setIsStreamingText(true);\n          setStreamingResponse(prev => {\n            const newText = prev + textChunk;\n            console.log('📝 [VOICE-MODAL] Accumulated streaming text length:', newText.length);\n            // Update the displayed response immediately for streaming\n            const cleanResponse = parseMarkdownForVoice(newText);\n            setAgentResponse(cleanResponse);\n            return newText;\n          });\n        },\n        onStreamingAudioReady: (audioUrl: string, chunkId: string) => {\n          console.log('🎵 [VOICE-MODAL] Audio chunk ready:', chunkId, 'URL length:', audioUrl.length);\n          \n          // Ensure we're in speaking state when audio arrives\n          if (voiceState !== 'speaking') {\n            setVoiceState('speaking');\n            setIsAgentSpeaking(true);\n          }\n        },\n        onStreamingComplete: (fullResponse: string, transcript: string) => {\n          console.log('✅ [VOICE-MODAL] Streaming complete:', { fullResponse: fullResponse.length, transcript });\n          console.log('✅ [VOICE-MODAL] Full response includes \"individuals\":', fullResponse.includes('individuals'));\n          console.log('✅ [VOICE-MODAL] Full response includes \"like\":', fullResponse.includes('like'));\n          console.log('✅ [VOICE-MODAL] Full response includes \"CustomGPT\":', fullResponse.includes('CustomGPT'));\n          \n          // Final cleanup - ensure we have the complete response\n          const cleanResponse = parseMarkdownForVoice(fullResponse);\n          console.log('✅ [VOICE-MODAL] Final clean response:', cleanResponse);\n          setAgentResponse(cleanResponse);\n          setStreamingResponse(fullResponse);\n          setIsStreamingText(false);\n          \n          // Don't add messages here - they've already been added via onTranscriptReceived and onResponseReceived\n          // This prevents duplicate messages in the conversation\n        }\n      });\n    }\n    \n    // Clean up when modal closes\n    if (!isOpen) {\n      // Don't clear conversation history to maintain context\n      setTranscript('');\n      setAgentResponse('');\n      setStreamingResponse('');\n      setIsStreamingText(false);\n      setIsAgentSpeaking(false);\n      setVoiceConversation(null); // Clear voice conversation reference\n      setVoiceState('idle'); // Reset voice state to idle\n      setCurrentUserMessageId(null); // Clear current user message ID\n      \n      // Clean up demo keys from window object (only in demo mode)\n      if ((window as any).__demoOpenAIKey) {\n        delete (window as any).__demoOpenAIKey;\n      }\n      if ((window as any).__demoCustomGPTKey) {\n        delete (window as any).__demoCustomGPTKey;\n      }\n      \n      // Ensure VAD is stopped if it was running\n      if (vad.listening) {\n        vad.pause();\n      }\n      \n      // Clean up speech manager streaming resources\n      speechManager.destroy();\n      \n      // Ensure global state is properly reset\n      setVoiceModalOpen(false);\n      \n      // Reload messages to ensure sync with API format\n      if (currentConversation) {\n        // Use the loadMessages function directly from the hook\n        loadMessages(currentConversation.id.toString());\n      }\n    }\n  }, [isOpen, projectId, currentConversation, messages, selectedVoice, selectedPersona, isDemoMode, openAIApiKey, loadMessages]);\n  \n  // Update settings when they change\n  useEffect(() => {\n    if (isOpen && projectId) {\n      // Update speech manager with new voice settings\n      speechManager.setVoiceSettings(selectedVoice, selectedPersona);\n      \n      // Get agent's configured model\n      const currentAgentStore = useAgentStore.getState();\n      const agent = currentAgentStore.agents.find(a => a.id === parseInt(projectId));\n      if (agent?.settings?.chatbot_model) {\n        speechManager.setChatbotModel(agent.settings.chatbot_model);\n      }\n      \n      // Theme is now handled directly by Canvas component through themeId prop\n      // The Canvas component automatically switches themes when themeId changes\n    }\n  }, [selectedVoice, selectedPersona, isOpen, projectId]);\n  \n  // Monitor VAD state changes\n  useEffect(() => {\n    if (vad.errored) {\n    } else if (!vad.loading && !vad.errored) {\n    }\n  }, [vad.loading, vad.errored]);\n\n  // Define handleToggleListening before useEffect that uses it\n  const handleToggleListening = useCallback(async () => {\n    console.log('🔘 [VOICE-MODAL] Toggle listening clicked', { \n      vadLoading: vad.loading,\n      vadListening: vad.listening,\n      vadErrored: vad.errored\n    });\n    \n    // Check OpenAI key availability first\n    if (!checkOpenAIKeyAvailability()) {\n      console.error('❌ [VOICE-MODAL] OpenAI API key not available');\n      setApiKeyError(true);\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n      const errorMsg = deploymentMode === 'demo' \n        ? 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n        : 'Voice feature requires OpenAI API key. Please add OPENAI_API_KEY to your .env.local file.';\n      \n      import('sonner').then(({ toast }) => {\n        toast.error(errorMsg);\n      });\n      return;\n    }\n    \n    // Enhanced error handling for VAD\n    if (vad.errored) {\n      console.error('❌ [VOICE-MODAL] VAD is in error state, attempting recovery...');\n      \n      // Try to restart VAD after error\n      try {\n        console.log('🔄 [VOICE-MODAL] Attempting VAD recovery...');\n        // Wait a moment then try to start\n        setTimeout(() => {\n          if (!vad.listening && !vad.loading) {\n            console.log('🔄 [VOICE-MODAL] Retry VAD start after error');\n            vad.start();\n          }\n        }, 1000);\n        return;\n      } catch (recoveryError) {\n        console.error('❌ [VOICE-MODAL] VAD recovery failed:', recoveryError);\n        return;\n      }\n    }\n    \n    try {\n      if (vad.listening) {\n        console.log('⏸️ [VOICE-MODAL] Pausing VAD');\n        vad.pause();\n        setVoiceState('idle');\n      } else {\n        console.log('▶️ [VOICE-MODAL] Starting VAD');\n        setVoiceState('listening');\n        \n        // Simplified microphone permission check\n        try {\n          console.log('🎤 [VOICE-MODAL] Checking microphone permissions...');\n          const stream = await navigator.mediaDevices.getUserMedia({ \n            audio: true\n          });\n          \n          // Clean up immediately - we just needed to check permission\n          stream.getTracks().forEach(track => track.stop());\n          \n          console.log('🎯 [VOICE-MODAL] Microphone permission granted');\n        } catch (permissionError) {\n          console.error('❌ [VOICE-MODAL] Microphone permission failed:', permissionError);\n          const errorMessage = permissionError instanceof Error ? permissionError.message : 'Permission denied';\n          \n          // Still try to start VAD - it might handle permissions internally\n        }\n        \n        // Start VAD with additional error handling\n        try {\n          vad.start();\n        } catch (vadError) {\n          console.error('❌ [VOICE-MODAL] VAD start failed:', vadError);\n          const errorMessage = vadError instanceof Error ? vadError.message : 'Unknown error';\n        }\n      }\n    } catch (error) {\n      console.error('❌ [VOICE-MODAL] Error in toggle listening:', error);\n    }\n  }, [vad, checkOpenAIKeyAvailability]);\n\n  // Manual recording fallback when VAD fails\n  const handleManualRecording = useCallback(async () => {\n    console.log('🎤 [MANUAL] Starting manual recording fallback');\n    \n    // Check OpenAI key availability first\n    if (!checkOpenAIKeyAvailability()) {\n      console.error('❌ [MANUAL] OpenAI API key not available');\n      setApiKeyError(true);\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n      const errorMsg = deploymentMode === 'demo' \n        ? 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n        : 'Voice feature requires OpenAI API key. Please add OPENAI_API_KEY to your .env.local file.';\n      \n      import('sonner').then(({ toast }) => {\n        toast.error(errorMsg);\n      });\n      return;\n    }\n    \n    try {\n      if (!isManualRecording) {\n        // Start manual recording with better audio quality\n        setVoiceState('recording');\n        const stream = await navigator.mediaDevices.getUserMedia({ \n          audio: {\n            echoCancellation: true,\n            noiseSuppression: true,\n            autoGainControl: true,\n            sampleRate: 48000\n          } \n        });\n        \n        // Choose the best available audio format\n        const mimeType = MediaRecorder.isTypeSupported('audio/webm;codecs=opus') \n          ? 'audio/webm;codecs=opus' \n          : 'audio/webm';\n          \n        const recorder = new MediaRecorder(stream, { mimeType });\n        const chunks: Blob[] = [];\n        \n        recorder.ondataavailable = (event) => {\n          if (event.data.size > 0) {\n            chunks.push(event.data);\n          }\n        };\n        \n        recorder.onstop = async () => {\n          console.log('🎤 [MANUAL] Recording stopped, processing audio...');\n          // MediaRecorder doesn't produce WAV, it produces webm/opus or similar\n          const audioBlob = new Blob(chunks, { type: recorder.mimeType || 'audio/webm' });\n          \n          try {\n            // Create audio context for decoding compressed audio\n            const audioContext = new AudioContext();\n            \n            // Convert blob to ArrayBuffer\n            const audioBuffer = await audioBlob.arrayBuffer();\n            \n            // Decode the compressed audio to get raw PCM data\n            const decodedAudio = await audioContext.decodeAudioData(audioBuffer);\n            console.log('🎯 [MANUAL] Audio decoded:', {\n              sampleRate: decodedAudio.sampleRate,\n              channels: decodedAudio.numberOfChannels,\n              duration: decodedAudio.duration,\n              length: decodedAudio.length\n            });\n            \n            // Convert to mono Float32Array (match VAD format)\n            const channelData = decodedAudio.getChannelData(0); // Get first channel\n            \n            // CRITICAL: Resample from 48kHz to 16kHz for VAD/Whisper compatibility\n            let audioArray: Float32Array;\n            if (decodedAudio.sampleRate !== 16000) {\n              console.log('🔄 [MANUAL] Resampling from', decodedAudio.sampleRate, 'to 16kHz');\n              const resampleRatio = 16000 / decodedAudio.sampleRate;\n              const newLength = Math.floor(channelData.length * resampleRatio);\n              audioArray = new Float32Array(newLength);\n              \n              // Simple linear interpolation resampling\n              for (let i = 0; i < newLength; i++) {\n                const srcIndex = i / resampleRatio;\n                const srcIndexFloor = Math.floor(srcIndex);\n                const srcIndexCeil = Math.min(srcIndexFloor + 1, channelData.length - 1);\n                const fraction = srcIndex - srcIndexFloor;\n                \n                audioArray[i] = channelData[srcIndexFloor] * (1 - fraction) + \n                               channelData[srcIndexCeil] * fraction;\n              }\n            } else {\n              audioArray = new Float32Array(channelData);\n            }\n            \n            console.log('🎯 [MANUAL] Audio ready:', audioArray.length, 'samples at 16kHz');\n            \n            // Process through speech manager\n            speechManager.onSpeechStart();\n            await speechManager.onSpeechEnd(audioArray);\n            \n            // Clean up audio context\n            await audioContext.close();\n            \n          } catch (error) {\n            console.error('❌ [MANUAL] Audio decoding failed:', error);\n          }\n          \n          // Clean up recording resources\n          stream.getTracks().forEach(track => track.stop());\n          setIsManualRecording(false);\n          setMediaRecorder(null);\n        };\n        \n        setMediaRecorder(recorder);\n        setIsManualRecording(true);\n        recorder.start();\n        \n        \n      } else {\n        // Stop manual recording\n        if (mediaRecorder) {\n          mediaRecorder.stop();\n        }\n      }\n    } catch (error) {\n      console.error('❌ [MANUAL] Manual recording failed:', error);\n    }\n  }, [isManualRecording, mediaRecorder, checkOpenAIKeyAvailability]);\n\n  // Track if we've already auto-started to prevent loops\n  const [hasAutoStarted, setHasAutoStarted] = useState(false);\n\n  // Handle stopping the agent's speech\n  const handleStopSpeech = useCallback(() => {\n    console.log('🛑 [VOICE-MODAL] Stopping agent speech');\n    speechManager.stopAudio();\n    setIsAgentSpeaking(false);\n  }, []);\n\n  // Handle VAD state updates with comprehensive error checking\n  useEffect(() => {\n    console.log('🔄 [VOICE-MODAL] VAD state changed', { \n      isOpen,\n      vadLoading: vad.loading, \n      vadListening: vad.listening,\n      vadUserSpeaking: vad.userSpeaking,\n      vadErrored: vad.errored,\n      hasAutoStarted\n    });\n    \n    // Check for VAD errors\n    if (vad.errored) {\n      console.error('❌ [VOICE-MODAL] VAD encountered an error');\n      return;\n    }\n    \n    // Don't auto-start VAD - wait for user interaction\n    // This prevents microphone permission request on modal open\n    if (isOpen && !vad.loading && !vad.listening && !vad.errored) {\n      console.log('🎯 [VOICE-MODAL] VAD loaded successfully, ready for manual start');\n    }\n    \n    // If VAD is in error state but we haven't tried recovery, attempt recovery\n    if (isOpen && !vad.loading && vad.errored && hasAutoStarted) {\n      console.log('🔄 [VOICE-MODAL] VAD in error state, scheduling recovery attempt...');\n      \n      // Don't continuously retry, just once more after a delay\n      setTimeout(() => {\n        if (vad.errored && !vad.listening) {\n          console.log('🔄 [VOICE-MODAL] Executing VAD recovery attempt');\n          handleToggleListening();\n        }\n      }, 1500);\n    }\n    \n    // Pause when modal closes\n    if (!isOpen && vad.listening) {\n      console.log('🛑 [VOICE-MODAL] Pausing VAD (modal closed)');\n      vad.pause();\n    }\n  }, [isOpen, vad.loading, vad.listening, vad.errored, hasAutoStarted]);\n\n  // Reset auto-start flag and error state when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setHasAutoStarted(false);\n      setApiKeyError(false);\n      setTranscript('');\n      setAgentResponse('');\n      setStreamingResponse('');\n      setIsStreamingText(false);\n      setIsAgentSpeaking(false);\n      setVoiceConversation(null); // Reset voice conversation for new session\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setLoading(vad.loading);\n  }, [vad.loading]);\n\n  return (\n    <>\n      {isOpen && (\n        <>\n          <style jsx global>{`\n            /* Custom scrollbar styles for voice modal */\n            .voice-response-scroll::-webkit-scrollbar {\n              width: 6px;\n            }\n            \n            .voice-response-scroll::-webkit-scrollbar-track {\n              background: rgba(255, 255, 255, 0.1);\n              border-radius: 3px;\n            }\n            \n            .voice-response-scroll::-webkit-scrollbar-thumb {\n              background: rgba(255, 255, 255, 0.3);\n              border-radius: 3px;\n            }\n            \n            .voice-response-scroll::-webkit-scrollbar-thumb:hover {\n              background: rgba(255, 255, 255, 0.5);\n            }\n            \n            /* Firefox scrollbar */\n            .voice-response-scroll {\n              scrollbar-width: thin;\n              scrollbar-color: rgba(255, 255, 255, 0.3) rgba(255, 255, 255, 0.1);\n            }\n            \n            /* Mobile touch scrolling optimization */\n            .voice-response-scroll {\n              -webkit-overflow-scrolling: touch;\n              scroll-behavior: smooth;\n            }\n          `}</style>\n          {/* Settings and Close buttons - moved outside main container to avoid click issues */}\n          <div \n            className=\"fixed top-4 sm:top-6 md:top-8 right-4 sm:right-6 md:right-8 flex items-center gap-2 sm:gap-3 z-[10000]\"\n            style={{ pointerEvents: 'auto' }}\n          >\n            {/* Settings button */}\n            <button\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                console.log('🔧 Settings button clicked, current state:', isSettingsOpen);\n                setIsSettingsOpen(true);\n                console.log('🔧 Settings state should now be true');\n              }}\n              className=\"w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-white/10 hover:bg-white/20 active:bg-white/30 backdrop-blur-sm flex items-center justify-center transition-all transform active:scale-95\"\n              aria-label=\"Voice settings\"\n            >\n              <Settings className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n            </button>\n            \n            {/* Close button */}\n            <button\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                console.log('❌ Close button clicked');\n                onClose();\n              }}\n              className=\"w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-white/10 hover:bg-white/20 active:bg-white/30 backdrop-blur-sm flex items-center justify-center transition-all transform active:scale-95\"\n              aria-label=\"Close voice mode\"\n            >\n              <X className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n            </button>\n          </div>\n          \n          <div \n            className=\"fixed inset-0 z-[9999] overflow-hidden\"\n          >\n          {/* Dynamic gradient background based on voice state */}\n          <div className={`absolute inset-0 transition-all duration-1000 pointer-events-none ${\n            voiceState === 'idle' ? 'voice-gradient-idle' :\n            voiceState === 'listening' ? 'voice-gradient-listening' :\n            voiceState === 'recording' ? 'voice-gradient-recording' :\n            voiceState === 'processing' ? 'voice-gradient-processing' :\n            'voice-gradient-speaking'\n          }`} />\n          \n          {/* Wave overlay effect for processing and speaking states */}\n          {(voiceState === 'processing' || voiceState === 'speaking') && (\n            <div className=\"absolute inset-0 voice-overlay-wave pointer-events-none\" />\n          )}\n          \n          {/* Pulse overlay for recording state */}\n          {voiceState === 'recording' && (\n            <div className=\"absolute inset-0 bg-red-500/10 voice-overlay-pulse pointer-events-none\" />\n          )}\n          {loading ? (\n            <div className=\"flex items-center justify-center h-full relative z-10\">\n              <RotateLoader\n                loading={loading}\n                color=\"#ffffff\"\n                aria-label=\"Loading Voice\"\n                data-testid=\"loader\"\n              />\n            </div>\n          ) : (\n            <>\n              {/* Canvas for particle animation */}\n              <div className=\"absolute inset-0 pointer-events-none z-0\">\n                <Canvas />\n              </div>\n              \n              {/* Top-left settings display */}\n              <div className=\"absolute top-4 sm:top-6 md:top-8 left-4 sm:left-6 md:left-8 z-20 space-y-2\">\n                {/* Demo mode indicator */}\n                {isDemoMode && (\n                  <div className=\"bg-amber-500/20 backdrop-blur-sm rounded-lg px-3 py-2 text-amber-300 text-xs flex items-center gap-2 border border-amber-500/30\">\n                    <AlertTriangle className=\"w-3 h-3\" />\n                    <span className=\"font-medium\">Demo Mode</span>\n                  </div>\n                )}\n                \n                {/* Voice settings */}\n                <div className=\"bg-white/5 backdrop-blur-sm rounded-lg px-3 py-2 text-white/70 text-xs space-y-1\">\n                  <div>Voice: {selectedVoice}</div>\n                  <div>Persona: {selectedPersona}</div>\n                  <div>Model: {(() => {\n                    const currentAgentStore = useAgentStore.getState();\n                    const currentAgent = currentAgentStore.agents.find(a => a.id === parseInt(projectId));\n                    return currentAgent?.settings?.chatbot_model || 'gpt-3.5-turbo';\n                  })()}</div>\n                </div>\n              </div>\n\n              \n              \n\n              {/* Status display - mobile optimized with better text handling */}\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-center px-4 z-10 pointer-events-auto max-w-full\" style={{ maxHeight: '80vh', display: 'flex', flexDirection: 'column' }}>\n                <div className=\"relative\">\n                  {/* Main status text with state-based colors - no blinking */}\n                  <p className={`text-2xl sm:text-3xl md:text-4xl font-light mb-4 leading-tight transition-all duration-300 ${\n                    voiceState === 'recording' ? 'text-red-400' :\n                    voiceState === 'processing' ? 'text-purple-400' :\n                    voiceState === 'speaking' ? 'text-green-400' :\n                    voiceState === 'listening' ? 'text-blue-400' :\n                    'text-white/90'\n                  }`}>\n                    {isManualRecording \n                      ? 'Analyzing...' \n                      : voiceState === 'listening'\n                      ? 'Listening...'\n                      : voiceState === 'processing'\n                      ? 'Thinking...'\n                      : voiceState === 'speaking'\n                      ? 'Speaking...'\n                      : vad.loading\n                      ? 'Initializing...'\n                      : 'Ready to chat'}\n                  </p>\n                  \n                  {/* Animated dots for processing state */}\n                  {voiceState === 'processing' && (\n                    <div className=\"flex justify-center gap-1 mt-2\">\n                      <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }} />\n                      <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }} />\n                      <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }} />\n                    </div>\n                  )}\n                </div>\n                \n                {/* Show user's transcript - responsive */}\n                {transcript && (\n                  <div className=\"mb-4 sm:mb-6\">\n                    <p className=\"text-xs sm:text-sm text-white/70 mb-1\">You said:</p>\n                    <p className=\"text-sm sm:text-lg text-white/90 max-w-xs sm:max-w-md mx-auto px-2\">&ldquo;{transcript}&rdquo;</p>\n                  </div>\n                )}\n                \n                {/* Show agent's response - mobile optimized with scrollable area */}\n                {agentResponse && (\n                  <div className=\"animate-fade-in pointer-events-auto\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <p className=\"text-xs text-white/70\">Agent:</p>\n                      {isStreamingText && (\n                        <div className=\"flex items-center gap-1\">\n                          <div className=\"w-1.5 h-1.5 bg-blue-400 rounded-full animate-pulse\"></div>\n                          <span className=\"text-xs text-blue-400/70\">streaming...</span>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"voice-response-scroll max-h-[40vh] sm:max-h-[50vh] overflow-y-auto overflow-x-hidden px-4 py-2 -mx-2 rounded-lg bg-white/5 relative\">\n                      <p className=\"text-sm sm:text-base text-white max-w-xs sm:max-w-md mx-auto leading-relaxed break-words whitespace-pre-wrap\">\n                        {agentResponse}\n                        {isStreamingText && (\n                          <span className=\"inline-block w-2 h-4 bg-white/60 ml-1 animate-pulse\"></span>\n                        )}\n                      </p>\n                    </div>\n                    \n                    {/* Audio wave visualization for speaking state */}\n                    {voiceState === 'speaking' && (\n                      <div className=\"flex justify-center items-center gap-1 mt-4\">\n                        {[...Array(5)].map((_, i) => (\n                          <div\n                            key={i}\n                            className=\"w-1 bg-green-400 rounded-full audio-wave-bar\"\n                            style={{\n                              height: '20px',\n                              animationDelay: `${i * 0.1}s`\n                            }}\n                          />\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                )}\n                \n                \n              </div>\n\n              {/* Bottom control buttons - Mobile optimized */}\n              <div \n                className=\"absolute bottom-6 sm:bottom-8 md:bottom-12 left-1/2 transform -translate-x-1/2 flex flex-col items-center gap-4 px-4\"\n                style={{ pointerEvents: 'auto', zIndex: 10000 }}\n              >\n                {/* API Key error warning */}\n                {(() => {\n                  const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                  const showWarning = deploymentMode === 'demo' ? !openAIApiKey : false;\n                  if (!showWarning) return null;\n                  \n                  return (\n                    <div className=\"bg-red-500/20 backdrop-blur-sm rounded-lg px-4 py-3 text-red-300 text-sm flex items-center gap-2 border border-red-500/30 max-w-xs\">\n                      <AlertTriangle className=\"w-4 h-4 flex-shrink-0\" />\n                      <span>Voice requires OpenAI API key. Add it in demo settings.</span>\n                    </div>\n                  );\n                })()}\n                \n                {/* Main voice control button */}\n                <div className=\"flex items-center justify-center\">\n                  {/* Recording/Listening State */}\n                  {(isManualRecording || voiceState === 'listening') && (\n                    <button\n                      onClick={isManualRecording ? handleManualRecording : handleToggleListening}\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-red-500/20 hover:bg-red-500/30 active:bg-red-500/40 backdrop-blur-sm transition-all transform active:scale-95 pointer-events-auto shadow-lg border-2 border-red-500/50\"\n                      style={{ pointerEvents: 'auto' }}\n                      aria-label={isManualRecording ? \"Stop recording\" : \"Stop listening\"}\n                    >\n                      {/* Pulsing animation ring */}\n                      <div className=\"absolute inset-0 rounded-full bg-red-500/30 animate-ping\"></div>\n                      \n                      {/* Inner button content */}\n                      <div className=\"relative z-10 w-full h-full flex items-center justify-center\">\n                        <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-red-500 rounded-sm\"></div>\n                      </div>\n                    </button>\n                  )}\n\n                  {/* Processing State */}\n                  {voiceState === 'processing' && (\n                    <button\n                      disabled\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-purple-500/20 backdrop-blur-sm shadow-lg border-2 border-purple-500/50\"\n                      aria-label=\"Processing\"\n                    >\n                      {/* Processing animation */}\n                      <div className=\"absolute inset-3 border-4 border-purple-500/30 border-t-purple-500 rounded-full animate-spin\"></div>\n                      <div className=\"absolute inset-6 border-2 border-purple-500/20 border-t-purple-500/60 rounded-full animate-spin\" style={{ animationDirection: 'reverse', animationDuration: '1.5s' }}></div>\n                    </button>\n                  )}\n\n                  {/* Speaking State - Stop button */}\n                  {voiceState === 'speaking' && (\n                    <button\n                      onClick={handleStopSpeech}\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-orange-500/20 hover:bg-orange-500/30 active:bg-orange-500/40 backdrop-blur-sm transition-all transform active:scale-95 pointer-events-auto shadow-lg border-2 border-orange-500/50\"\n                      style={{ pointerEvents: 'auto' }}\n                      aria-label=\"Stop response\"\n                    >\n                      {/* Sound wave animation */}\n                      <div className=\"absolute inset-0 rounded-full\">\n                        {[...Array(3)].map((_, i) => (\n                          <div\n                            key={i}\n                            className=\"absolute inset-0 rounded-full border border-orange-500/30 animate-ping\"\n                            style={{\n                              animationDelay: `${i * 0.2}s`,\n                              animationDuration: '1.5s'\n                            }}\n                          />\n                        ))}\n                      </div>\n                      \n                      <div className=\"relative z-10 w-full h-full flex items-center justify-center\">\n                        <StopCircle className=\"w-8 h-8 sm:w-10 sm:h-10 text-orange-500\" />\n                      </div>\n                    </button>\n                  )}\n\n                  {/* Idle State - Start button */}\n                  {!vad.loading && !isManualRecording && voiceState !== 'speaking' && voiceState !== 'listening' && voiceState !== 'processing' && (\n                    <button\n                      onClick={vad.errored ? handleManualRecording : handleToggleListening}\n                      disabled={(() => {\n                        const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                        return deploymentMode === 'demo' && !openAIApiKey;\n                      })()}\n                      className={`relative w-20 h-20 sm:w-24 sm:h-24 rounded-full backdrop-blur-sm transition-all transform shadow-lg border-2 ${\n                        (() => {\n                          const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                          return deploymentMode === 'demo' && !openAIApiKey;\n                        })() \n                          ? 'bg-gray-500/20 border-gray-500/50 cursor-not-allowed opacity-50' \n                          : 'bg-blue-500/20 hover:bg-blue-500/30 active:bg-blue-500/40 hover:scale-105 active:scale-95 pointer-events-auto border-blue-500/50'\n                      }`}\n                      style={{ pointerEvents: 'auto' }}\n                      aria-label={(() => {\n                        const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                        return deploymentMode === 'demo' && !openAIApiKey ? \"Voice disabled - API key required\" : \"Start voice chat\";\n                      })()}\n                    >\n                      {/* Subtle glow effect */}\n                      <div className=\"absolute inset-0 rounded-full bg-blue-500/10 blur-sm\"></div>\n                      \n                      <div className=\"relative z-10 w-full h-full flex items-center justify-center\">\n                        <Mic className={`w-8 h-8 sm:w-10 sm:h-10 ${\n                          (() => {\n                            const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                            return deploymentMode === 'demo' && !openAIApiKey ? 'text-gray-500' : 'text-blue-500';\n                          })()\n                        }`} />\n                      </div>\n                    </button>\n                  )}\n\n                  {/* Loading State */}\n                  {vad.loading && (\n                    <button\n                      disabled\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-gray-500/20 backdrop-blur-sm shadow-lg border-2 border-gray-500/50\"\n                      aria-label=\"Loading\"\n                    >\n                      <div className=\"absolute inset-4 border-3 border-gray-500/30 border-t-gray-500 rounded-full animate-spin\"></div>\n                    </button>\n                  )}\n                </div>\n\n                {/* State indicator text (subtle) */}\n                <div className=\"text-xs text-white/60 text-center\">\n                  {(() => {\n                    const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                    return deploymentMode === 'demo' && !openAIApiKey ? 'API key required' : '';\n                  })() ||\n                   vad.loading ? 'Initializing...' :\n                   isManualRecording ? 'Tap to stop' :\n                   voiceState === 'listening' ? 'Listening...' :\n                   voiceState === 'processing' ? 'Processing...' :\n                   voiceState === 'speaking' ? 'Tap to stop' :\n                   'Tap to speak'}\n                </div>\n              </div>\n\n            </>\n          )}\n          </div>\n        </>\n      )}\n      \n      {/* Voice Settings Modal */}\n      <VoiceSettings \n        isOpen={isSettingsOpen} \n        onClose={() => setIsSettingsOpen(false)}\n        projectId={projectId}\n      />\n    </>\n  );\n}\n\n// Main component that conditionally renders the VAD component\nexport function VoiceModal(props: VoiceModalProps) {\n  const { setVoiceModalOpen } = useVoiceSettingsStore();\n  \n  // Ensure global state is synchronized with props\n  React.useEffect(() => {\n    setVoiceModalOpen(props.isOpen);\n  }, [props.isOpen, setVoiceModalOpen]);\n  \n  // Only render the content (and initialize VAD) when modal is open\n  if (!props.isOpen) {\n    return null;\n  }\n  \n  return <VoiceModalContent {...props} />;\n}","/**\n * ChatContainer Component\n * \n * Main chat interface component that manages the entire chat experience.\n * This is the primary component for integrating CustomGPT chat functionality.\n * \n * Features:\n * - Message display with streaming support\n * - Agent selection and switching\n * - Citation handling with modal details\n * - Multiple deployment modes (standalone, widget, floating)\n * - Welcome screen with example prompts\n * - Error handling and authorization checks\n * \n * For customization:\n * - Example questions are now fetched from agent settings API\n * - Modify DEFAULT_EXAMPLE_PROMPTS for fallback starter questions\n * - Customize WelcomeMessage for branding\n * - Adjust ChatHeader for different layouts\n * - Style using Tailwind classes throughout\n */\n\n'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Sparkles, Bot } from 'lucide-react';\nimport Link from 'next/link';\nimport { toast } from 'sonner';\n\nimport type { ChatMessage, Citation, Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Message } from './Message';\nimport { ChatInput } from './ChatInput';\nimport { TypingIndicator } from './TypingIndicator';\nimport { AgentSelector } from './AgentSelector';\nimport { CitationDetailsModal } from './CitationDetailsModal';\nimport { CitationFilePreview } from './CitationFilePreview';\nimport { ConversationManager } from './ConversationManager';\nimport { MessageErrorDisplay } from './MessageErrorDisplay';\nimport { logger } from '@/lib/logger';\nimport { useWidgetSafe } from '@/widget/WidgetContext';\nimport { useMessageStore, useConversationStore, useAgentStore } from '@/hooks/useWidgetStore';\nimport { MessageSkeleton, LoadingOverlay } from '@/components/ui/loading';\nimport { getClient } from '@/lib/api/client';\nimport { VoiceModal } from '@/components/voice/VoiceModal';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\nimport { useDemoStore } from '@/store/demo';\n\n/**\n * Default example prompts shown to users when starting a new conversation\n * These are used as fallback when API-sourced example questions are not available\n */\nconst DEFAULT_EXAMPLE_PROMPTS = [\n  \"What can you help me with?\",\n  \"Explain this document\", \n  \"Summarize key points\",\n  \"Answer my questions\",\n];\n\ninterface ExamplePromptCardProps {\n  /** The prompt text to display */\n  prompt: string;\n  /** Handler called when the prompt is clicked */\n  onClick: (prompt: string) => void;\n}\n\n/**\n * ExamplePromptCard Component\n * \n * Clickable card showing an example prompt that users can select\n * to quickly start a conversation\n */\nconst ExamplePromptCard: React.FC<ExamplePromptCardProps> = ({ prompt, onClick }) => {\n  return (\n    <button\n      onClick={() => onClick(prompt)}\n      className={cn(\n        \"text-left bg-card border border-border rounded-lg\",\n        \"hover:border-accent hover:shadow-sm transition-all\",\n        \"text-card-foreground\",\n        \"p-2.5\",\n        \"text-xs\",\n        \"min-h-[50px] flex items-center\",\n        \"w-full\" // Ensures button takes full width of grid cell\n      )}\n    >\n      {prompt}\n    </button>\n  );\n};\n\ninterface WelcomeMessageProps {\n  /** Handler called when an example prompt is clicked */\n  onPromptClick: (prompt: string) => void;\n}\n\n/**\n * WelcomeMessage Component\n * \n * Displays a welcome screen when no messages exist in the conversation.\n * Shows the agent name, welcome text, and example prompts.\n * Fetches agent-specific example questions from API with fallback to defaults.\n * Uses Framer Motion for smooth animations.\n */\nconst WelcomeMessage: React.FC<WelcomeMessageProps> = ({ onPromptClick }) => {\n  const { currentAgent } = useAgentStore();\n  const [exampleQuestions, setExampleQuestions] = useState<string[]>(DEFAULT_EXAMPLE_PROMPTS);\n  const [loading, setLoading] = useState(false);\n  \n  /**\n   * Fetch agent settings to get custom example questions\n   */\n  useEffect(() => {\n    const fetchExampleQuestions = async () => {\n      if (!currentAgent) {\n        return;\n      }\n\n      // If we already have example questions from settings, use them\n      if (currentAgent.settings?.example_questions && currentAgent.settings.example_questions.length > 0) {\n        setExampleQuestions(currentAgent.settings.example_questions);\n        return;\n      }\n\n      setLoading(true);\n      try {\n        const client = getClient();\n        const response = await client.getAgentSettings(currentAgent.id);\n        const settings = response.data || response;\n        \n        // Use API example questions if available, otherwise keep defaults\n        if (settings.example_questions && settings.example_questions.length > 0) {\n          setExampleQuestions(settings.example_questions);\n          \n          logger.info('UI', 'Loaded custom example questions from API', {\n            agentId: currentAgent.id,\n            questionCount: settings.example_questions.length\n          });\n        } else {\n          logger.info('UI', 'No custom example questions found, using defaults', {\n            agentId: currentAgent.id\n          });\n        }\n      } catch (error) {\n        logger.warn('UI', 'Failed to load agent settings for example questions', {\n          agentId: currentAgent.id,\n          error: error instanceof Error ? error.message : String(error)\n        });\n        // Keep default questions on error\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchExampleQuestions();\n  }, [currentAgent]);\n  \n  return (\n    <div className={cn(\n      \"flex flex-col items-center justify-center h-full py-8\",\n      \"px-4 md:px-8\"\n    )}>\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className={cn(\n          \"text-center w-full\",\n          \"max-w-sm sm:max-w-md md:max-w-lg\"\n        )}\n      >\n        {/* Agent Avatar */}\n        <div className=\"w-16 h-16 rounded-full flex items-center justify-center mb-6 mx-auto overflow-hidden bg-accent\">\n          {currentAgent?.settings?.chatbot_avatar ? (\n            <img \n              src={currentAgent.settings.chatbot_avatar} \n              alt={`${currentAgent.project_name} avatar`} \n              className=\"w-16 h-16 rounded-full object-cover\"\n            />\n          ) : (\n            <Bot className=\"w-8 h-8 text-muted-foreground\" />\n          )}\n        </div>\n        \n        {/* Welcome Text */}\n        <h3 className={cn(\n          \"font-semibold text-foreground mb-2\",\n          \"text-lg sm:text-xl md:text-2xl\"\n        )}>\n          Welcome to {currentAgent?.project_name || 'CustomGPT'}!\n        </h3>\n        <p className={cn(\n          \"text-muted-foreground mb-6 sm:mb-8\",\n          \"text-sm sm:text-base\"\n        )}>\n          I&apos;m here to help answer your questions and assist with your tasks. How can I help you today?\n        </p>\n        \n        {/* Example Prompts */}\n        <div className={cn(\n          \"grid gap-2 sm:gap-3 w-full\",\n          \"grid-cols-2\",\n          \"max-w-full sm:max-w-md md:max-w-lg\",\n          \"auto-cols-fr\" // Ensures equal column widths\n        )}>\n          {exampleQuestions.map((prompt, idx) => (\n            <motion.div\n              key={`${currentAgent?.id}-${idx}`} // Include agent ID to force re-render on agent change\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3, delay: 0.1 + (idx * 0.1) }}\n            >\n              <ExamplePromptCard\n                prompt={prompt}\n                onClick={onPromptClick}\n              />\n            </motion.div>\n          ))}\n        </div>\n        \n        {/* Loading indicator for example questions */}\n        {loading && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className=\"mt-4\"\n          >\n            <p className=\"text-xs text-muted-foreground\">Loading custom questions...</p>\n          </motion.div>\n        )}\n      </motion.div>\n    </div>\n  );\n};\n\ninterface MessageAreaProps {\n  /** Additional CSS classes for styling */\n  className?: string;\n  /** Deployment mode - affects behavior */\n  mode?: 'standalone' | 'widget' | 'floating';\n}\n\n/**\n * MessageArea Component\n * \n * Scrollable area that displays all messages in the current conversation.\n * Handles:\n * - Message rendering with streaming support\n * - Auto-scrolling to latest messages\n * - Citation click handling\n * - Error display\n * - Welcome message when empty\n * - Loading states with typing indicator\n */\nconst MessageArea: React.FC<MessageAreaProps> = ({ className, mode = 'standalone' }) => {\n  const { \n    messages, \n    streamingMessage, \n    isStreaming,\n    error,\n    sendMessage,\n    updateMessageFeedback,\n    loading,\n    clearError,\n    setMessagesForConversation\n  } = useMessageStore();\n  const { currentConversation } = useConversationStore();\n  const { currentAgent } = useAgentStore();\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMessages, setIsLoadingMessages] = React.useState(false);\n  const [prevConversationId, setPrevConversationId] = React.useState<string | null>(null);\n  \n  // Citation modal state - tracks which citation is being viewed\n  const [selectedCitationId, setSelectedCitationId] = React.useState<number | string | null>(null);\n  const [citationModalOpen, setCitationModalOpen] = React.useState(false);\n  \n  // Citation preview state\n  const [previewCitationId, setPreviewCitationId] = React.useState<string | null>(null);\n  const [previewModalOpen, setPreviewModalOpen] = React.useState(false);\n  \n  // Check if we're in free trial mode by looking at localStorage\n  const [isFreeTrialMode, setIsFreeTrialMode] = React.useState(false);\n  \n  React.useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const freeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n      setIsFreeTrialMode(freeTrialFlag === 'true');\n    }\n  }, []);\n  \n  const conversationMessages = currentConversation \n    ? messages.get(currentConversation.id.toString()) || []\n    : [];\n    \n  // Debug logging for widget mode\n  useEffect(() => {\n    if (mode === 'widget' || mode === 'floating') {\n      console.log('[ChatContainer] Widget conversation state:', {\n        currentConversation: currentConversation,\n        conversationId: currentConversation?.id,\n        messageCount: conversationMessages.length,\n        messagesMapSize: messages.size,\n        messagesMapKeys: Array.from(messages.keys()),\n        isLoadingMessages,\n        loading\n      });\n    }\n  }, [currentConversation, conversationMessages, mode, messages, isLoadingMessages, loading]);\n  \n  // Detect conversation change\n  useEffect(() => {\n    if (currentConversation && currentConversation.id.toString() !== prevConversationId) {\n      setIsLoadingMessages(true);\n      setPrevConversationId(currentConversation.id.toString());\n      \n      // Set a timeout to hide loading after a reasonable time\n      const timeout = setTimeout(() => {\n        setIsLoadingMessages(false);\n      }, 1000);\n      \n      return () => clearTimeout(timeout);\n    }\n  }, [currentConversation, prevConversationId]);\n  \n  // Hide loading when messages arrive OR when message loading completes\n  useEffect(() => {\n    if (isLoadingMessages && (conversationMessages.length > 0 || !loading)) {\n      setIsLoadingMessages(false);\n    }\n  }, [conversationMessages, isLoadingMessages, loading]);\n  \n  /**\n   * Auto-scroll effect\n   * Automatically scrolls to the bottom when new messages arrive\n   * or when streaming messages are updated\n   * \n   * Uses instant scroll for conversation switches to avoid annoying\n   * scroll animations when clicking on past chats with many messages.\n   * Uses smooth scroll for new messages and streaming updates.\n   */\n  useEffect(() => {\n    if (scrollRef.current) {\n      // Use instant scroll when loading messages (conversation switch)\n      // Use smooth scroll for real-time message additions and streaming\n      const scrollBehavior = isLoadingMessages ? 'auto' : 'smooth';\n      \n      scrollRef.current.scrollTo({\n        top: scrollRef.current.scrollHeight,\n        behavior: scrollBehavior,\n      });\n    }\n  }, [conversationMessages, streamingMessage, isLoadingMessages]);\n  \n  const handleExamplePrompt = (prompt: string) => {\n    // Check if in free trial mode\n    if (isFreeTrialMode) {\n      toast.error('Free Trial Limitation', {\n        description: 'Sending messages is not available in free trial mode. Please use your own API key to send messages.',\n        duration: 5000,\n      });\n      return;\n    }\n    \n    logger.info('UI', 'Example prompt clicked', { prompt });\n    sendMessage(prompt);\n  };\n  \n  const handleCitationClick = (citation: Citation) => {\n    logger.info('UI', 'Citation clicked', {\n      citationId: citation.id,\n      citationIndex: citation.index,\n      citationTitle: citation.title\n    });\n    \n    // Open citation details modal with the citation ID\n    if (citation.id) {\n      setSelectedCitationId(citation.id);\n      setCitationModalOpen(true);\n    }\n  };\n  \n  const handlePreviewClick = (citation: Citation) => {\n    logger.info('UI', 'Citation preview requested', {\n      citationId: citation.id,\n      citationTitle: citation.title\n    });\n    \n    // Open preview modal with the citation ID\n    if (citation.id) {\n      setPreviewCitationId(citation.id);\n      setPreviewModalOpen(true);\n    }\n  };\n  \n  const handleMessageFeedback = async (messageId: string, feedback: 'like' | 'dislike') => {\n    logger.info('UI', 'Message feedback provided', {\n      messageId,\n      feedback\n    });\n    \n    // Call the message store to update feedback\n    await updateMessageFeedback(messageId, feedback);\n  };\n  \n  return (\n    <div\n      ref={scrollRef}\n      className={cn(\n        'flex-1 overflow-y-auto scroll-smooth',\n        'bg-gradient-to-b from-muted/50 to-background',\n        className\n      )}\n    >\n      {/* Error Message */}\n      {error && (\n        <div className=\"p-4 m-4\">\n          <MessageErrorDisplay \n            error={error}\n            onRetry={() => {\n              // Clear error first\n              clearError();\n              \n              // Then retry sending last message if applicable\n              if (currentConversation) {\n                const conversationMessages = messages.get(currentConversation.id.toString()) || [];\n                const lastUserMessage = conversationMessages\n                  .filter(m => m.role === 'user')\n                  .pop();\n                \n                if (lastUserMessage) {\n                  // Remove the error message before retrying\n                  const filteredMessages = conversationMessages.filter(m => m.id !== lastUserMessage.id);\n                  setMessagesForConversation(\n                    currentConversation.id.toString(), \n                    filteredMessages\n                  );\n                  \n                  // Retry sending the message\n                  sendMessage(lastUserMessage.content);\n                }\n              }\n            }}\n          />\n        </div>\n      )}\n\n      {/* Loading state when switching conversations */}\n      {isLoadingMessages && (\n        <LoadingOverlay \n          visible={true} \n          message={conversationMessages.length > 0 ? \"Loading conversation...\" : \"Switching to conversation...\"}\n          blur={true}\n        />\n      )}\n      \n      {/* Message skeleton fallback for empty conversations */}\n      {isLoadingMessages && conversationMessages.length === 0 && !isStreaming && (\n        <div className=\"space-y-0 opacity-30\">\n          <MessageSkeleton isAssistant={false} lines={2} />\n          <MessageSkeleton isAssistant={true} lines={3} />\n          <MessageSkeleton isAssistant={false} lines={1} />\n          <MessageSkeleton isAssistant={true} lines={4} />\n        </div>\n      )}\n\n      {/* Welcome Message */}\n      {conversationMessages.length === 0 && !streamingMessage && !error && !isLoadingMessages && (\n        <WelcomeMessage onPromptClick={handleExamplePrompt} />\n      )}\n      \n      {/* Messages */}\n      {conversationMessages.length > 0 && (\n        <div className=\"space-y-0\">\n          {conversationMessages.map((message, index) => (\n            <Message\n              key={message.id}\n              message={message}\n              agent={currentAgent}\n              isLast={index === conversationMessages.length - 1}\n              onCitationClick={handleCitationClick}\n              onPreviewClick={handlePreviewClick}\n              onFeedback={(feedback) => handleMessageFeedback(message.id, feedback)}\n            />\n          ))}\n        </div>\n      )}\n      \n      {/* Streaming Message */}\n      {streamingMessage && (\n        <Message\n          message={streamingMessage}\n          agent={currentAgent}\n          isStreaming={true}\n          isLast={true}\n          onCitationClick={handleCitationClick}\n          onPreviewClick={handlePreviewClick}\n        />\n      )}\n      \n      {/* Typing Indicator */}\n      {isStreaming && !streamingMessage && (\n        <TypingIndicator />\n      )}\n      \n      {/* Citation Details Modal */}\n      {selectedCitationId && (\n        <CitationDetailsModal\n          isOpen={citationModalOpen}\n          onClose={() => {\n            setCitationModalOpen(false);\n            setSelectedCitationId(null);\n          }}\n          citationId={selectedCitationId}\n          projectId={currentAgent?.id || 0}\n        />\n      )}\n      \n      {/* Citation File Preview Modal */}\n      {previewCitationId && (\n        <CitationFilePreview\n          isOpen={previewModalOpen}\n          onClose={() => {\n            setPreviewModalOpen(false);\n            setPreviewCitationId(null);\n          }}\n          citationId={previewCitationId}\n          fileName={`Citation_${previewCitationId}.txt`}\n        />\n      )}\n    </div>\n  );\n};\n\ninterface ChatHeaderProps {\n  /** Deployment mode affects header layout */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler for agent settings button */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Current conversation ID */\n  currentConversationId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback to create new conversation */\n  onCreateConversation?: () => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n}\n\n/**\n * ChatHeader Component\n * \n * Header bar for the chat interface. Layout changes based on deployment mode:\n * - Standalone: Full header with agent selector\n * - Widget/Floating: Compact header with close button\n * \n * Shows agent status (online/offline) and provides agent switching\n */\nconst ChatHeader: React.FC<ChatHeaderProps> = ({ \n  mode = 'standalone', \n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  conversationRefreshKey\n}) => {\n  const { currentAgent } = useAgentStore();\n  const { isMobile } = useBreakpoint();\n  \n  if (mode === 'widget' || mode === 'floating') {\n    return (\n      <header className=\"border-b border-border bg-background\">\n        {/* Conversation Manager */}\n        {enableConversationManagement && sessionId && (\n          <div className=\"px-4 py-2 border-b border-border\">\n            <ConversationManager\n              sessionId={sessionId}\n              maxConversations={maxConversations}\n              currentConversationId={currentConversationId}\n              onConversationChange={onConversationChange}\n              onCreateConversation={onCreateConversation}\n              className=\"w-full\"\n              refreshKey={conversationRefreshKey}\n            />\n          </div>\n        )}\n        \n        {/* Header Content */}\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            <div className=\"w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0\">\n              <img \n                src={mode === 'widget' || mode === 'floating' ? './logo.png' : '/logo.png'} \n                alt=\"CustomGPT.ai Logo\" \n                className=\"w-8 h-8 rounded-lg\"\n              />\n            </div>\n            <div className=\"min-w-0 flex-1\">\n              <h2 className=\"font-semibold text-foreground truncate\">\n                {currentAgent?.project_name || 'CustomGPT Assistant'}\n              </h2>\n              <p className=\"text-xs text-muted-foreground\">\n                {currentAgent?.is_chat_active ? 'Online' : 'Offline'}\n              </p>\n            </div>\n          </div>\n          \n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"p-1.5 rounded-lg hover:bg-accent hover:text-accent-foreground transition-colors flex-shrink-0\"\n            >\n              <span className=\"sr-only\">Close</span>\n              ×\n            </button>\n          )}\n        </div>\n      </header>\n    );\n  }\n  \n  // For standalone mode, show agent selector header (but not on mobile)\n  if (mode === 'standalone' && !isMobile) {\n    return (\n      <header className=\"flex items-center justify-between px-4 py-3 border-b border-border bg-background\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-lg bg-brand-500 flex items-center justify-center\">\n            <Bot className=\"w-5 h-5 text-white\" />\n          </div>\n          <h1 className=\"text-lg font-semibold text-foreground\">\n            Agent Chat\n          </h1>\n        </div>\n        \n        <div className=\"flex-1 max-w-xs ml-4\">\n          <AgentSelector\n            onSettingsClick={onAgentSettings}\n            className=\"w-full\"\n          />\n        </div>\n      </header>\n    );\n  }\n  \n  return null;\n};\n\ninterface ChatContainerProps {\n  /** Deployment mode - affects layout and styling */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Additional CSS classes */\n  className?: string;\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler when agent settings are requested */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Specific conversation thread to load */\n  threadId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback when message is sent/received */\n  onMessage?: (message: any) => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n  /** Mobile optimization mode */\n  isMobile?: boolean;\n}\n\n/**\n * ChatContainer Component - Main Export\n * \n * The primary chat interface component. Can be deployed in three modes:\n * \n * 1. Standalone: Full-page chat interface\n *    - Use when chat is the main feature\n *    - No fixed dimensions, fills container\n * \n * 2. Widget: Embedded chat widget\n *    - Use for embedding in existing pages\n *    - Fixed dimensions with shadow\n * \n * 3. Floating: Floating chat bubble\n *    - Use for overlay chat interfaces\n *    - Fixed dimensions with stronger shadow\n * \n * @example\n * // Standalone mode\n * <ChatContainer mode=\"standalone\" />\n * \n * @example\n * // Widget mode with close handler\n * <ChatContainer \n *   mode=\"widget\" \n *   onClose={() => setShowChat(false)}\n * />\n */\nexport const ChatContainer: React.FC<ChatContainerProps> = ({ \n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  conversationRefreshKey,\n  isMobile = false\n}) => {\n  const { sendMessage, isStreaming, cancelStreaming } = useMessageStore();\n  const { fetchAgents, agents, currentAgent } = useAgentStore();\n  const { currentConversation } = useConversationStore();\n  \n  // Get widget instance from context\n  const widget = useWidgetSafe();\n  \n  // Track current conversation for the widget\n  const [currentConversationId, setCurrentConversationId] = React.useState<string | null>(null);\n  \n  // Voice modal state\n  const [isVoiceModalOpen, setIsVoiceModalOpen] = React.useState(false);\n  const [voiceError, setVoiceError] = React.useState<string | null>(null);\n  \n  // Get demo store state\n  const { isDemoMode, openAIApiKey } = useDemoStore();\n  \n  // Check if we're in free trial mode by looking at localStorage\n  const [isFreeTrialMode, setIsFreeTrialMode] = React.useState(false);\n  \n  React.useEffect(() => {\n    if (mode === 'standalone' && typeof window !== 'undefined') {\n      const freeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n      setIsFreeTrialMode(freeTrialFlag === 'true');\n    }\n  }, [mode]);\n  \n  // Check if OpenAI key is available\n  const checkVoiceAvailability = () => {\n    // In demo mode, check if user has provided OpenAI key\n    if (isDemoMode) {\n      if (!openAIApiKey) {\n        return {\n          available: false,\n          error: 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n        };\n      }\n      return { available: true };\n    }\n    \n    // In normal mode, check if OpenAI key is in environment\n    // We can't check server-side env vars from client, so we'll let the API handle it\n    return { available: true };\n  };\n  \n  // Handle voice button click\n  const handleVoiceClick = () => {\n    const { available, error } = checkVoiceAvailability();\n    \n    if (!available) {\n      toast.error(error || 'Voice feature is not available');\n      return;\n    }\n    \n    setIsVoiceModalOpen(true);\n  };\n  \n  // Handle conversation management\n  const handleConversationChange = (conversation: any) => {\n    setCurrentConversationId(conversation.id);\n    onConversationChange?.(conversation);\n    // The widget will handle the actual conversation switch\n    if (widget) {\n      widget.switchConversation(conversation.id);\n    }\n  };\n  \n  const handleCreateConversation = async () => {\n    if (widget) {\n      try {\n        const newConv = await widget.createConversation();\n        if (newConv) {\n          setCurrentConversationId(newConv.id);\n        } else {\n          // Show user-friendly message when conversation limit is reached\n          const maxConversations = widget.configuration?.maxConversations || 5;\n          toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n        }\n      } catch (error) {\n        console.error('Failed to create conversation:', error);\n        toast.error('Failed to create conversation. Please try again.');\n      }\n    }\n  };\n\n  /**\n   * Agent initialization effect\n   * Fetches available agents when the component first mounts\n   * Only runs if agents haven't been loaded yet\n   */\n  useEffect(() => {\n    const initializeAgents = async () => {\n      // Only fetch if we don't have agents and no current agent\n      if (agents.length === 0 && !currentAgent) {\n        logger.info('UI', 'Initializing agents on ChatContainer mount');\n        try {\n          await fetchAgents();\n          logger.info('UI', 'Agents initialized successfully', {\n            agentCount: agents.length\n          });\n        } catch (error) {\n          logger.error('UI', 'Failed to initialize agents', error, {\n            errorMessage: error instanceof Error ? error.message : String(error)\n          });\n          console.error('Failed to initialize agents:', error);\n        }\n      } else {\n        logger.info('UI', 'Agents already initialized', {\n          agentCount: agents.length,\n          hasCurrentAgent: !!currentAgent,\n          currentAgentName: currentAgent?.project_name\n        });\n      }\n    };\n\n    initializeAgents();\n  }, [agents.length, currentAgent, fetchAgents]); // Add dependencies for exhaustive deps\n  \n  const handleSendMessage = async (content: string, files?: File[]) => {\n    // Check if in free trial mode\n    if (isFreeTrialMode) {\n      toast.error('Free Trial Limitation', {\n        description: 'Sending messages is not available in free trial mode. Please use your own API key to send messages.',\n        duration: 5000,\n      });\n      return;\n    }\n    \n    logger.info('UI', 'Sending message from ChatContainer', {\n      contentLength: content.length,\n      hasFiles: files && files.length > 0,\n      fileCount: files?.length || 0,\n      currentAgent: currentAgent?.project_name,\n      agentId: currentAgent?.id\n    });\n    \n    try {\n      await sendMessage(content, files);\n      logger.info('UI', 'Message sent successfully');\n    } catch (error) {\n      logger.error('UI', 'Failed to send message from ChatContainer', error, {\n        errorMessage: error instanceof Error ? error.message : String(error),\n        isAuthError: error instanceof Error && (error.message.includes('403') || error.message.includes('unauthorized'))\n      });\n      console.error('Failed to send message:', error);\n    }\n  };\n  \n  const handleStopGeneration = () => {\n    logger.info('UI', 'User cancelled streaming generation');\n    cancelStreaming();\n  };\n  \n  const handleAgentSettings = (agent: Agent) => {\n    logger.info('UI', 'Agent settings requested', {\n      agentId: agent.id,\n      agentName: agent.project_name\n    });\n    onAgentSettings?.(agent);\n  };\n  \n  return (\n    <div\n      className={cn(\n        'flex flex-col bg-background',\n        mode === 'standalone' && 'h-full',\n        mode === 'widget' && !isMobile && 'h-[600px] w-[400px] rounded-lg shadow-xl border border-border',\n        mode === 'floating' && !isMobile && 'h-[600px] w-[400px] rounded-lg shadow-2xl border border-border',\n        isMobile && 'h-full w-full',\n        className\n      )}\n    >\n      <ChatHeader \n        mode={mode} \n        onClose={onClose}\n        onAgentSettings={handleAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        currentConversationId={currentConversationId || currentConversation?.id.toString()}\n        onConversationChange={handleConversationChange}\n        onCreateConversation={handleCreateConversation}\n        conversationRefreshKey={conversationRefreshKey}\n      />\n      <MessageArea className=\"flex-1 overflow-y-auto\" mode={mode} />\n      <div className={cn(\n        \"mt-auto\",\n        isMobile && mode === 'standalone' ? \"pb-[30px]\" : \"\"\n      )}>\n        <ChatInput\n          onSend={handleSendMessage}\n          disabled={isStreaming || isFreeTrialMode}\n          placeholder={\n            isFreeTrialMode \n              ? \"Free trial mode - Use your API key to send messages\" \n              : isStreaming \n                ? \"AI is thinking...\" \n                : \"Send a message...\"\n          }\n          onVoiceClick={handleVoiceClick}\n          isMobile={isMobile}\n          mode={mode}\n        />\n      </div>\n      \n      {/* Branding Footer */}\n      <div className={cn(\n        \"px-4 py-2 border-t border-border bg-muted\",\n        mode === 'standalone' && \"flex items-center justify-center\"\n      )}>\n        <a\n          href=\"https://customgpt.ai\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={cn(\n            \"text-xs text-muted-foreground hover:text-foreground transition-colors\",\n            mode === 'standalone' ? \"inline-flex items-center\" : \"block text-center\"\n          )}\n        >\n          Powered by CustomGPT.ai\n        </a>\n      </div>\n      \n      {/* Voice Modal */}\n      {currentAgent && currentAgent.id && (\n        <VoiceModal\n          isOpen={isVoiceModalOpen}\n          onClose={() => setIsVoiceModalOpen(false)}\n          projectId={currentAgent.id.toString()}\n          projectName={currentAgent.project_name}\n        />\n      )}\n    </div>\n  );\n};","\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-11 w-full items-center justify-between rounded-lg border border-input bg-background px-3.5 py-2 text-sm\",\n      \"transition-all duration-200 ease-out\",\n      \"hover:border-primary/30\",\n      \"focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary\",\n      \"focus:bg-primary/5\",\n      \"disabled:cursor-not-allowed disabled:opacity-50 disabled:bg-muted/50\",\n      \"text-foreground placeholder:text-muted-foreground\",\n      \"[&>span]:line-clamp-1\",\n      \"group\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50 transition-transform duration-200 group-data-[state=open]:rotate-180\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      \"border-b border-gray-200/30 dark:border-gray-800/20 bg-background/50\",\n      \"hover:bg-accent/50 transition-colors\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4 opacity-50\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      \"border-t border-gray-200/30 dark:border-gray-800/20 bg-background/50\",\n      \"hover:bg-accent/50 transition-colors\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4 opacity-50\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden\",\n        \"rounded-lg border border-gray-200/50 dark:border-gray-800/30\",\n        \"bg-background/95 backdrop-blur-md\",\n        \"text-foreground shadow-lg\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n        \"data-[side=bottom]:slide-in-from-top-2\",\n        \"data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2\",\n        \"data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" && [\n          \"data-[side=bottom]:translate-y-1\",\n          \"data-[side=left]:-translate-x-1\",\n          \"data-[side=right]:translate-x-1\",\n          \"data-[side=top]:-translate-y-1\",\n        ],\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1.5\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-pointer select-none items-center\",\n      \"rounded-md py-2 pl-8 pr-2 text-sm outline-none\",\n      \"transition-all duration-150\",\n      \"hover:bg-accent hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[state=checked]:bg-primary/10 data-[state=checked]:text-primary\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-4 w-4 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-3.5 w-3.5 animate-in fade-in-0 zoom-in-0\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","\"use client\"\n\nimport * as React from \"react\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  SelectGroup,\n  SelectLabel,\n  SelectSeparator,\n} from \"@/components/ui/select\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface SelectOption {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\ninterface SimpleSelectProps {\n  value: string;\n  onValueChange: (value: string) => void;\n  options: SelectOption[];\n  placeholder?: string;\n  className?: string;\n  disabled?: boolean;\n  name?: string;\n  id?: string;\n}\n\n/**\n * Simple Select Component\n * \n * A wrapper around the Radix UI Select component that provides a simpler API\n * similar to native HTML select elements, making migration easier.\n * \n * @example\n * ```tsx\n * <SimpleSelect\n *   value={dateRange}\n *   onValueChange={setDateRange}\n *   options={[\n *     { value: '7d', label: 'Last 7 days' },\n *     { value: '30d', label: 'Last 30 days' },\n *     { value: '90d', label: 'Last 90 days' },\n *     { value: '1y', label: 'Last year' }\n *   ]}\n *   placeholder=\"Select date range\"\n * />\n * ```\n */\nexport function SimpleSelect({\n  value,\n  onValueChange,\n  options,\n  placeholder = \"Select an option\",\n  className,\n  disabled = false,\n  name,\n  id,\n}: SimpleSelectProps) {\n  return (\n    <Select\n      value={value}\n      onValueChange={onValueChange}\n      disabled={disabled}\n      name={name}\n    >\n      <SelectTrigger className={cn(\"w-full\", className)} id={id}>\n        <SelectValue placeholder={placeholder} />\n      </SelectTrigger>\n      <SelectContent>\n        {options.map((option) => (\n          <SelectItem\n            key={option.value}\n            value={option.value}\n            disabled={option.disabled}\n          >\n            {option.label}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n\n/**\n * Grouped Select Component\n * \n * For selects with grouped options (like languages grouped by region)\n */\nexport interface SelectGroup {\n  label: string;\n  options: SelectOption[];\n}\n\ninterface GroupedSelectProps extends Omit<SimpleSelectProps, 'options'> {\n  groups: SelectGroup[];\n}\n\nexport function GroupedSelect({\n  value,\n  onValueChange,\n  groups,\n  placeholder = \"Select an option\",\n  className,\n  disabled = false,\n  name,\n  id,\n}: GroupedSelectProps) {\n  return (\n    <Select\n      value={value}\n      onValueChange={onValueChange}\n      disabled={disabled}\n      name={name}\n    >\n      <SelectTrigger className={cn(\"w-full\", className)} id={id}>\n        <SelectValue placeholder={placeholder} />\n      </SelectTrigger>\n      <SelectContent>\n        {groups.map((group, index) => (\n          <React.Fragment key={index}>\n            {index > 0 && <SelectSeparator />}\n            <SelectGroup>\n              <SelectLabel>{group.label}</SelectLabel>\n              {group.options.map((option) => (\n                <SelectItem\n                  key={option.value}\n                  value={option.value}\n                  disabled={option.disabled}\n                >\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectGroup>\n          </React.Fragment>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n\n","import React from 'react';\nimport { X, Calendar, User, Hash, Clock, AlertCircle, Copy } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { toast } from 'sonner';\nimport type { Conversation } from '@/types';\nimport { Button } from '@/components/ui/button';\nimport { formatTimestamp, cn } from '@/lib/utils';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\ninterface ConversationDetailsModalProps {\n  conversation: Conversation | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const ConversationDetailsModal: React.FC<ConversationDetailsModalProps> = ({\n  conversation,\n  isOpen,\n  onClose,\n}) => {\n  const { isMobile } = useBreakpoint();\n  \n  if (!isOpen || !conversation) return null;\n\n  const copyToClipboard = (text: string, label: string) => {\n    navigator.clipboard.writeText(text);\n    toast.success(`${label} copied to clipboard`);\n  };\n\n  const formatFullTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'short'\n    });\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black bg-opacity-50 z-50\"\n            onClick={onClose}\n          />\n\n          {/* Modal */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            className={cn(\n              \"fixed bg-background shadow-xl z-50\",\n              isMobile \n                ? \"inset-x-0 bottom-0 top-20 rounded-t-xl flex flex-col\" \n                : \"inset-x-0 top-[10%] mx-auto max-w-2xl rounded-lg max-h-[80vh] overflow-hidden\"\n            )}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {/* Header */}\n            <div className={cn(\n              \"flex items-center justify-between border-b border-border bg-background/95 backdrop-blur-sm flex-shrink-0\",\n              isMobile ? \"px-4 py-4\" : \"p-6\"\n            )}>\n              <h2 className={cn(\n                \"font-semibold text-foreground\",\n                isMobile ? \"text-base\" : \"text-xl\"\n              )}>Conversation Details</h2>\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={onClose}\n                className={cn(\n                  isMobile ? \"h-9 w-9 touch-target\" : \"h-8 w-8\"\n                )}\n              >\n                <X className={cn(\n                  isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n                )} />\n              </Button>\n            </div>\n\n            {/* Content */}\n            <div className={cn(\n              \"overflow-y-auto\",\n              isMobile \n                ? \"flex-1 px-4 py-4 pb-6 safe-area-pb space-y-6\" \n                : \"p-6 space-y-6 max-h-[calc(80vh-200px)]\"\n            )}>\n              {/* Basic Information */}\n              <div>\n                <h3 className={cn(\n                  \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                  isMobile ? \"text-xs\" : \"text-sm\"\n                )}>\n                  Basic Information\n                </h3>\n                <div className={cn(\n                  \"bg-muted rounded-lg space-y-4\",\n                  isMobile ? \"p-4\" : \"p-4 space-y-3\"\n                )}>\n                  {/* Conversation Name */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Conversation Name</span>\n                    </div>\n                    <span className={cn(\n                      \"text-foreground font-medium break-words\",\n                      isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                    )}>{conversation.name}</span>\n                  </div>\n\n                  {/* Conversation ID */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Conversation ID</span>\n                    </div>\n                    <div className={cn(\n                      \"flex items-center gap-2\",\n                      isMobile ? \"ml-6\" : \"\"\n                    )}>\n                      <span className={cn(\n                        \"text-foreground font-mono\",\n                        isMobile ? \"text-xs\" : \"text-sm\"\n                      )}>{conversation.id}</span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className={cn(\n                          isMobile ? \"h-8 w-8 touch-target\" : \"h-6 w-6\"\n                        )}\n                        onClick={() => copyToClipboard(conversation.id.toString(), 'Conversation ID')}\n                      >\n                        <Copy className={cn(\n                          isMobile ? \"h-4 w-4\" : \"h-3 w-3\"\n                        )} />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Session ID */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Session ID</span>\n                    </div>\n                    <div className={cn(\n                      \"flex items-center gap-2\",\n                      isMobile ? \"ml-6\" : \"\"\n                    )}>\n                      <span \n                        className={cn(\n                          \"text-foreground font-mono break-all\",\n                          isMobile ? \"text-sm\" : \"text-sm truncate max-w-[300px]\"\n                        )} \n                        title={conversation.session_id}\n                      >\n                        {conversation.session_id}\n                      </span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className={cn(\n                          isMobile ? \"h-8 w-8 touch-target flex-shrink-0\" : \"h-6 w-6\"\n                        )}\n                        onClick={() => copyToClipboard(conversation.session_id, 'Session ID')}\n                      >\n                        <Copy className={cn(\n                          isMobile ? \"h-4 w-4\" : \"h-3 w-3\"\n                        )} />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Project ID */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Project ID</span>\n                    </div>\n                    <span className={cn(\n                      \"text-foreground\",\n                      isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                    )}>{conversation.project_id}</span>\n                  </div>\n\n                  {/* Message Count */}\n                  {conversation.message_count !== undefined && (\n                    <div className={cn(\n                      isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                    )}>\n                      <div className=\"flex items-center gap-2\">\n                        <Hash className={cn(\n                          \"text-muted-foreground\",\n                          isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                        )} />\n                        <span className={cn(\n                          \"font-medium text-foreground\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>Message Count</span>\n                      </div>\n                      <span className={cn(\n                        \"text-foreground\",\n                        isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                      )}>{conversation.message_count} messages</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Timeline */}\n              <div>\n                <h3 className={cn(\n                  \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                  isMobile ? \"text-xs\" : \"text-sm\"\n                )}>\n                  Timeline\n                </h3>\n                <div className={cn(\n                  \"bg-muted rounded-lg space-y-4\",\n                  isMobile ? \"p-4\" : \"p-4 space-y-3\"\n                )}>\n                  {/* Created At */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Created At</span>\n                    </div>\n                    <div className={cn(\n                      isMobile ? \"ml-6 space-y-1\" : \"text-right\"\n                    )}>\n                      <span className={cn(\n                        \"text-foreground block\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>{formatFullTimestamp(conversation.created_at)}</span>\n                      <span className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"text-xs\" : \"text-xs\"\n                      )}>({formatTimestamp(conversation.created_at)})</span>\n                    </div>\n                  </div>\n\n                  {/* Last Updated */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Last Updated</span>\n                    </div>\n                    <div className={cn(\n                      isMobile ? \"ml-6 space-y-1\" : \"text-right\"\n                    )}>\n                      <span className={cn(\n                        \"text-foreground block\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>{formatFullTimestamp(conversation.updated_at)}</span>\n                      <span className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"text-xs\" : \"text-xs\"\n                      )}>({formatTimestamp(conversation.updated_at)})</span>\n                    </div>\n                  </div>\n\n                  {/* Deleted At */}\n                  {conversation.deleted_at && (\n                    <div className={cn(\n                      isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                    )}>\n                      <div className=\"flex items-center gap-2\">\n                        <AlertCircle className={cn(\n                          \"text-red-400\",\n                          isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                        )} />\n                        <span className={cn(\n                          \"font-medium text-red-700\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>Deleted At</span>\n                      </div>\n                      <div className={cn(\n                        isMobile ? \"ml-6 space-y-1\" : \"text-right\"\n                      )}>\n                        <span className={cn(\n                          \"text-red-900 block\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>{formatFullTimestamp(conversation.deleted_at)}</span>\n                        <span className={cn(\n                          \"text-red-500\",\n                          isMobile ? \"text-xs\" : \"text-xs\"\n                        )}>({formatTimestamp(conversation.deleted_at)})</span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* User Information */}\n              {conversation.created_by && (\n                <div>\n                  <h3 className={cn(\n                    \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                    isMobile ? \"text-xs\" : \"text-sm\"\n                  )}>\n                    User Information\n                  </h3>\n                  <div className={cn(\n                    \"bg-accent rounded-lg\",\n                    isMobile ? \"p-4\" : \"p-4\"\n                  )}>\n                    <div className={cn(\n                      isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                    )}>\n                      <div className=\"flex items-center gap-2\">\n                        <User className={cn(\n                          \"text-muted-foreground\",\n                          isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                        )} />\n                        <span className={cn(\n                          \"font-medium text-foreground\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>Created By</span>\n                      </div>\n                      <span className={cn(\n                        \"text-foreground\",\n                        isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                      )}>User ID: {conversation.created_by}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n            </div>\n\n            {/* Footer */}\n            {!isMobile && (\n              <div className=\"p-6 border-t border-border bg-accent\">\n                <div className=\"flex justify-end\">\n                  <Button onClick={onClose}>\n                    Close\n                  </Button>\n                </div>\n              </div>\n            )}\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};","import React, { useState } from 'react';\nimport { AlertTriangle, Trash2, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\ninterface DeleteConversationDialogProps {\n  isOpen: boolean;\n  conversationName: string;\n  messageCount?: number;\n  onConfirm: () => Promise<void>;\n  onCancel: () => void;\n}\n\nexport const DeleteConversationDialog: React.FC<DeleteConversationDialogProps> = ({\n  isOpen,\n  conversationName,\n  messageCount,\n  onConfirm,\n  onCancel,\n}) => {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { isMobile } = useBreakpoint();\n\n  const handleConfirm = async () => {\n    setIsDeleting(true);\n    setError(null);\n    \n    try {\n      await onConfirm();\n    } catch (err: any) {\n      console.error('Delete failed:', err);\n      \n      // Parse error message based on status code\n      let errorMessage = 'Failed to delete conversation';\n      \n      if (err.status === 400) {\n        errorMessage = 'Invalid request. Please try again.';\n      } else if (err.status === 401) {\n        errorMessage = 'Authentication failed. Please refresh the page and try again.';\n      } else if (err.status === 404) {\n        errorMessage = 'Conversation not found. It may have already been deleted.';\n      } else if (err.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      setIsDeleting(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-black bg-opacity-50\"\n            onClick={!isDeleting ? onCancel : undefined}\n          />\n\n          {/* Dialog */}\n          <motion.div\n            initial={{ opacity: 0, scale: isMobile ? 1 : 0.95, y: isMobile ? '100%' : 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: isMobile ? 1 : 0.95, y: isMobile ? '100%' : 0 }}\n            className={cn(\n              \"relative bg-background shadow-xl\",\n              isMobile \n                ? \"fixed inset-x-0 bottom-0 rounded-t-xl safe-area-pb\" \n                : \"w-full max-w-md rounded-lg\"\n            )}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className={cn(\n              isMobile ? \"p-4 pb-6\" : \"p-6\"\n            )}>\n              {/* Header */}\n              <div className={cn(\n                \"flex items-start\",\n                isMobile ? \"gap-3\" : \"gap-4\"\n              )}>\n                <div className={cn(\n                  \"bg-red-100 rounded-full flex-shrink-0\",\n                  isMobile ? \"p-2.5\" : \"p-3\"\n                )}>\n                  <AlertTriangle className={cn(\n                    \"text-red-600\",\n                    isMobile ? \"w-5 h-5\" : \"w-6 h-6\"\n                  )} />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className={cn(\n                    \"font-semibold text-foreground\",\n                    isMobile ? \"text-base\" : \"text-lg\"\n                  )}>\n                    Delete Conversation\n                  </h3>\n                  <p className={cn(\n                    \"mt-2 text-muted-foreground\",\n                    isMobile ? \"text-sm\" : \"text-sm\"\n                  )}>\n                    Are you sure you want to delete <strong>&ldquo;{conversationName}&rdquo;</strong>?\n                  </p>\n                  \n                  {messageCount !== undefined && messageCount > 0 && (\n                    <p className={cn(\n                      \"mt-2 text-muted-foreground\",\n                      isMobile ? \"text-sm\" : \"text-sm\"\n                    )}>\n                      This conversation contains {messageCount} message{messageCount !== 1 ? 's' : ''}.\n                    </p>\n                  )}\n                  \n                  <div className={cn(\n                    \"mt-3 bg-red-50 rounded-lg\",\n                    isMobile ? \"p-3\" : \"p-3\"\n                  )}>\n                    <p className={cn(\n                      \"text-red-800 font-medium\",\n                      isMobile ? \"text-sm\" : \"text-sm\"\n                    )}>\n                      ⚠️ This action cannot be undone\n                    </p>\n                    <p className={cn(\n                      \"text-red-700 mt-1\",\n                      isMobile ? \"text-xs\" : \"text-xs\"\n                    )}>\n                      All messages and data associated with this conversation will be permanently deleted.\n                    </p>\n                  </div>\n\n                  {/* Error Display */}\n                  {error && (\n                    <div className={cn(\n                      \"mt-3 bg-red-100 border border-red-200 rounded-lg\",\n                      isMobile ? \"p-3\" : \"p-3\"\n                    )}>\n                      <p className={cn(\n                        \"text-red-900 font-medium\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>\n                        Error: {error}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className={cn(\n                \"flex items-center gap-3\",\n                isMobile ? \"mt-6 flex-col-reverse\" : \"mt-6 justify-end\"\n              )}>\n                <Button\n                  variant=\"outline\"\n                  onClick={onCancel}\n                  disabled={isDeleting}\n                  className={cn(\n                    isMobile && \"w-full h-11 touch-target\"\n                  )}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleConfirm}\n                  disabled={isDeleting}\n                  className={cn(\n                    \"min-w-[100px]\",\n                    isMobile && \"w-full h-11 touch-target\"\n                  )}\n                >\n                  {isDeleting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                      Deleting...\n                    </>\n                  ) : (\n                    <>\n                      <Trash2 className={cn(\n                        \"mr-2\",\n                        isMobile ? \"w-4 h-4\" : \"w-4 h-4\"\n                      )} />\n                      Delete\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n      )}\n    </AnimatePresence>\n  );\n};","/**\n * Conversation Sidebar Component\n * \n * Manages the conversation list and provides quick navigation\n * between different chat sessions. Includes conversation management\n * features like create, rename, and delete.\n * \n * Features:\n * - Conversation list with search/filter\n * - Create new conversation\n * - Rename conversations inline\n * - Delete conversations with confirmation\n * - Agent management access\n * - Data source management\n * - Analytics dashboard access\n * - Collapsible sidebar\n * \n * State Management:\n * - Conversations from conversationStore\n * - Current conversation selection\n * - Search/filter state (local)\n * - Collapse state (passed from parent)\n * \n * UI/UX Features:\n * - Hover states and animations\n * - Keyboard shortcuts (future enhancement)\n * - Context menu for conversation actions\n * - Auto-scroll to selected conversation\n * - Responsive design for mobile\n * \n * Features:\n * - Advanced conversation organization with categories and search\n * - Bulk conversation management with export/import capabilities\n * - Customizable sidebar design with responsive layout\n * - Professional conversation management with templates and pinning\n * - Comprehensive conversation history and analytics\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport Link from 'next/link';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  MessageSquare, \n  Plus, \n  MoreHorizontal, \n  Trash2, \n  Edit3, \n  Calendar,\n  Search,\n  X,\n  Bot,\n  Filter,\n  ChevronDown,\n  ChevronUp,\n  Info,\n  Download,\n  Share2,\n  Clock,\n  User\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Conversation } from '@/types';\nimport { useConversationStore, useAgentStore, useMessageStore } from '@/hooks/useWidgetStore';\nimport { cn, formatTimestamp, generateConversationName } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { SimpleSelect } from '@/components/ui/simple-select';\nimport { logger } from '@/lib/logger';\nimport { ConversationDetailsModal } from './ConversationDetailsModal';\nimport { DeleteConversationDialog } from './DeleteConversationDialog';\nimport { ConversationSkeleton, Spinner } from '@/components/ui/loading';\nimport { useDemoModeContext } from '@/contexts/DemoModeContext';\n\n/**\n * Props for individual conversation item\n * \n * @property conversation - Conversation data object\n * @property isSelected - Whether this conversation is currently active\n * @property onSelect - Callback when conversation is clicked\n * @property onDelete - Callback for deleting conversation\n * @property onRename - Callback for renaming conversation\n */\ninterface ConversationItemProps {\n  conversation: Conversation;\n  isSelected: boolean;\n  onSelect: (conversation: Conversation) => void;\n  onDelete: (conversationId: string) => void;\n  onRename: (conversationId: string, newName: string) => void;\n}\n\n/**\n * Individual Conversation Item Component\n * \n * Renders a single conversation in the sidebar with actions.\n * Features inline editing and context menu for management.\n */\nconst ConversationItem: React.FC<ConversationItemProps> = ({\n  conversation,\n  isSelected,\n  onSelect,\n  onDelete,\n  onRename\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editName, setEditName] = useState(conversation.name);\n  const [showMenu, setShowMenu] = useState(false);\n  const [showDetails, setShowDetails] = useState(false);\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  // Close menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setShowMenu(false);\n      }\n    };\n\n    if (showMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [showMenu]);\n\n  // Focus input when editing starts\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n      inputRef.current.select();\n    }\n  }, [isEditing]);\n\n  const handleEdit = () => {\n    setIsEditing(true);\n    setShowMenu(false);\n  };\n\n  const handleSaveEdit = () => {\n    if (editName.trim() && editName.trim() !== conversation.name) {\n      onRename(conversation.id.toString(), editName.trim());\n    }\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSaveEdit();\n    } else if (e.key === 'Escape') {\n      handleCancelEdit();\n    }\n  };\n\n  const handleDelete = () => {\n    setShowDeleteDialog(true);\n    setShowMenu(false);\n  };\n\n  const handleConfirmDelete = async () => {\n    await onDelete(conversation.id.toString());\n    setShowDeleteDialog(false);\n  };\n\n  return (\n    <div\n      className={cn(\n        'group relative p-3 rounded-lg cursor-pointer transition-colors',\n        'hover:bg-accent',\n        isSelected && 'bg-accent/50 hover:bg-accent/70'\n      )}\n      onClick={async () => {\n        if (isEditing || isLoading) return;\n        setIsLoading(true);\n        try {\n          await onSelect(conversation);\n        } finally {\n          setIsLoading(false);\n        }\n      }}\n    >\n      {/* Loading overlay for individual conversation */}\n      {isLoading && (\n        <div className=\"absolute inset-0 bg-background/70 backdrop-blur-sm rounded-lg flex items-center justify-center z-10\">\n          <Spinner size=\"sm\" />\n        </div>\n      )}\n      \n      <div className=\"flex items-start justify-between gap-2\">\n        <div className=\"flex-1 min-w-0\">\n          {isEditing ? (\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={editName}\n              onChange={(e) => setEditName(e.target.value)}\n              onBlur={handleSaveEdit}\n              onKeyDown={handleKeyDown}\n              className=\"w-full px-2 py-1 text-sm font-medium text-foreground bg-background border border-input rounded focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent\"\n              maxLength={100}\n            />\n          ) : (\n            <h3 className=\"font-medium text-foreground text-sm truncate\">\n              {conversation.name}\n            </h3>\n          )}\n          \n          <div className=\"flex items-center gap-2 mt-1 text-xs text-muted-foreground\">\n            <Clock className=\"w-3 h-3\" />\n            <span title={new Date(conversation.updated_at).toLocaleString()}>\n              {formatTimestamp(conversation.updated_at)}\n            </span>\n            {conversation.message_count !== undefined && (\n              <>\n                <span>•</span>\n                <MessageSquare className=\"w-3 h-3\" />\n                <span>{conversation.message_count}</span>\n              </>\n            )}\n          </div>\n          \n          {/* More Details Button */}\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              setShowDetails(!showDetails);\n            }}\n            className=\"flex items-center gap-1 mt-2 text-xs text-muted-foreground hover:text-foreground transition-colors\"\n          >\n            {showDetails ? (\n              <>\n                <ChevronUp className=\"w-3 h-3\" />\n                Hide Details\n              </>\n            ) : (\n              <>\n                <ChevronDown className=\"w-3 h-3\" />\n                More Details\n              </>\n            )}\n          </button>\n          \n          {/* Expandable Details Section */}\n          <AnimatePresence>\n            {showDetails && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                exit={{ opacity: 0, height: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"mt-2 pt-2 border-t border-border\"\n              >\n                <div className=\"space-y-1 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Session ID:</span>\n                    <span className=\"font-mono text-foreground truncate max-w-[150px]\" title={conversation.session_id}>\n                      {conversation.session_id}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Created:</span>\n                    <span className=\"text-foreground\">{formatTimestamp(conversation.created_at)}</span>\n                  </div>\n                  {conversation.deleted_at && (\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-destructive\">Deleted:</span>\n                      <span className=\"text-destructive\">{formatTimestamp(conversation.deleted_at)}</span>\n                    </div>\n                  )}\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Menu Button */}\n        {!isEditing && (\n          <div className=\"relative\" ref={menuRef}>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setShowMenu(!showMenu);\n              }}\n              className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-muted-foreground hover:text-foreground\"\n            >\n              <MoreHorizontal className=\"h-3 w-3\" />\n            </Button>\n\n            {/* Dropdown Menu */}\n            <AnimatePresence>\n              {showMenu && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.95, y: -5 }}\n                  animate={{ opacity: 1, scale: 1, y: 0 }}\n                  exit={{ opacity: 0, scale: 0.95, y: -5 }}\n                  transition={{ duration: 0.1 }}\n                  className=\"absolute right-0 top-6 mt-1 w-40 bg-background border border-border rounded-lg shadow-lg z-50\"\n                >\n                  <div className=\"py-1\">\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setShowDetailsModal(true);\n                        setShowMenu(false);\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-foreground hover:bg-accent\"\n                    >\n                      <Info className=\"w-3 h-3\" />\n                      View Details\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEdit();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-foreground hover:bg-accent\"\n                    >\n                      <Edit3 className=\"w-3 h-3\" />\n                      Rename\n                    </button>\n                    <div className=\"border-t border-border my-1\" />\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDelete();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-destructive hover:bg-destructive/10\"\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                      Delete\n                    </button>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        )}\n      </div>\n\n      {/* Conversation Details Modal */}\n      <ConversationDetailsModal\n        conversation={conversation}\n        isOpen={showDetailsModal}\n        onClose={() => setShowDetailsModal(false)}\n      />\n\n      {/* Delete Conversation Dialog */}\n      <DeleteConversationDialog\n        isOpen={showDeleteDialog}\n        conversationName={conversation.name}\n        messageCount={conversation.message_count}\n        onConfirm={handleConfirmDelete}\n        onCancel={() => setShowDeleteDialog(false)}\n      />\n    </div>\n  );\n};\n\ninterface ConversationSidebarProps {\n  className?: string;\n  isCollapsed?: boolean;\n  onToggle?: () => void;\n  isMobile?: boolean;\n  onConversationSelect?: () => void;\n}\n\nexport const ConversationSidebar: React.FC<ConversationSidebarProps> = ({\n  className,\n  isCollapsed = false,\n  onToggle,\n  isMobile = false,\n  onConversationSelect\n}) => {\n  const [isCreating, setIsCreating] = useState(false);\n  const [showSortFilter, setShowSortFilter] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  \n  const { isFreeTrialMode } = useDemoModeContext();\n  \n  const { \n    conversations, \n    currentConversation, \n    loading, \n    error,\n    fetchConversations,\n    createConversation,\n    selectConversation,\n    deleteConversation,\n    updateConversation,\n    // Pagination state\n    currentPage,\n    totalPages,\n    totalConversations,\n    perPage,\n    // Sorting and filtering state\n    sortOrder,\n    sortBy,\n    userFilter,\n    // Client-side filtering state and methods\n    searchQuery: storeSearchQuery,\n    searchMode: storeSearchMode,\n    dateFilter: storeDateFilter,\n    setSearchQuery,\n    setSearchMode,\n    setDateFilter,\n    applyFilters\n  } = useConversationStore();\n  \n  const { currentAgent } = useAgentStore();\n  const { clearMessages, loadMessages } = useMessageStore();\n\n  // Fetch conversations when agent changes\n  useEffect(() => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (currentAgent && !isDemoMode) {\n      logger.info('UI', 'Agent changed in sidebar, fetching conversations', {\n        agentId: currentAgent.id,\n        agentName: currentAgent.project_name,\n        isActive: currentAgent.is_chat_active\n      });\n      fetchConversations(currentAgent.id);\n    } else if (!currentAgent) {\n      logger.warn('UI', 'No current agent selected in sidebar');\n    } else if (isDemoMode) {\n      logger.info('UI', 'Skipping conversation fetch in demo mode');\n    }\n  }, [currentAgent, fetchConversations]);\n\n  // Local search query for input handling\n  const [localSearchQuery, setLocalSearchQuery] = useState(storeSearchQuery);\n\n  // Update local state when store state changes\n  useEffect(() => {\n    setLocalSearchQuery(storeSearchQuery);\n  }, [storeSearchQuery]);\n\n  // Debounced search function\n  const debouncedSearch = useCallback(\n    (query: string) => {\n      setIsSearching(true);\n      try {\n        setSearchQuery(query.trim());\n      } catch (error) {\n        logger.error('UI', 'Failed to search conversations', error);\n      } finally {\n        setIsSearching(false);\n      }\n    },\n    [setSearchQuery]\n  );\n\n  // Debounce search calls\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (localSearchQuery !== storeSearchQuery) {\n        debouncedSearch(localSearchQuery);\n      }\n    }, 300); // 300ms debounce\n\n    return () => clearTimeout(timeoutId);\n  }, [localSearchQuery, storeSearchQuery, debouncedSearch]);\n\n  // Handle search input change\n  const handleSearch = (query: string) => {\n    setLocalSearchQuery(query);\n  };\n\n  // Handle date filter change\n  const handleDateFilterChange = (filter: 'all' | 'today' | 'week' | 'month') => {\n    setDateFilter(filter);\n  };\n\n  // Handle search mode change  \n  const handleSearchModeChange = (mode: 'name' | 'id' | 'session') => {\n    setSearchMode(mode);\n  };\n  \n  // Use conversations directly since filtering is now done server-side\n  const filteredConversations = Array.isArray(conversations) ? conversations : [];\n\n  const handleNewConversation = async () => {\n    if (!currentAgent || isCreating) return;\n    \n    if (isFreeTrialMode) {\n      toast.error('Creating new conversations is not available in free trial mode');\n      return;\n    }\n    \n    logger.info('UI', 'Creating new conversation', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n    \n    setIsCreating(true);\n    try {\n      const name = `New Chat ${new Date().toLocaleDateString()}`;\n      await createConversation(currentAgent.id, name);\n      clearMessages(); // Clear current messages when starting new conversation\n      logger.info('UI', 'New conversation created successfully', { name });\n      toast.success('New conversation created');\n      \n      // Call the onConversationSelect callback to close the mobile drawer\n      if (onConversationSelect) {\n        onConversationSelect();\n      }\n    } catch (error) {\n      logger.error('UI', 'Failed to create conversation', error, {\n        agentId: currentAgent.id,\n        errorMessage: error instanceof Error ? error.message : String(error)\n      });\n      toast.error('Failed to create new conversation');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const handleSelectConversation = async (conversation: Conversation) => {\n    // Prevent multiple clicks while switching\n    if (loading) return;\n    \n    logger.info('UI', 'Selecting conversation', {\n      conversationId: conversation.id,\n      conversationName: conversation.name,\n      projectId: conversation.project_id,\n      messageCount: conversation.message_count\n    });\n    \n    selectConversation(conversation);\n    \n    // Load messages for the selected conversation\n    try {\n      logger.info('UI', 'Loading messages for selected conversation', {\n        conversationId: conversation.id,\n        agentId: currentAgent?.id,\n        agentName: currentAgent?.project_name\n      });\n      \n      await loadMessages(conversation.id.toString());\n      \n      logger.info('UI', 'Messages loaded successfully for conversation', {\n        conversationId: conversation.id\n      });\n      \n      // Call the onConversationSelect callback to close the mobile drawer\n      if (onConversationSelect) {\n        onConversationSelect();\n      }\n    } catch (error) {\n      logger.error('UI', 'Failed to load messages for conversation', error, {\n        conversationId: conversation.id,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        errorType: error instanceof Error ? error.constructor.name : typeof error\n      });\n      toast.error('Failed to load conversation messages');\n    }\n  };\n\n  const handleDeleteConversation = async (conversationId: string) => {\n    if (isFreeTrialMode) {\n      toast.error('Deleting conversations is not available in free trial mode');\n      return;\n    }\n    \n    try {\n      await deleteConversation(conversationId);\n      toast.success('Conversation deleted');\n    } catch (error) {\n      toast.error('Failed to delete conversation');\n    }\n  };\n\n  const handleRenameConversation = async (conversationId: string, newName: string) => {\n    if (isFreeTrialMode) {\n      toast.error('Renaming conversations is not available in free trial mode');\n      return;\n    }\n    \n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) return;\n    \n    try {\n      await updateConversation(conversation.project_id, conversation.session_id, { name: newName });\n      toast.success('Conversation renamed');\n    } catch (error) {\n      toast.error('Failed to rename conversation');\n    }\n  };\n\n  // Use prop or fallback to viewport check if needed\n  // const isMobile = typeof window !== 'undefined' && window.innerWidth < 768;\n  \n  if (isCollapsed && !isMobile) {\n    return (\n      <div className={cn('w-12 bg-muted border-r border-border flex flex-col', className)}>\n        <div className=\"p-2\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggle}\n            className=\"w-8 h-8\"\n            title=\"Expand sidebar\"\n          >\n            <MessageSquare className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\n      'bg-muted flex flex-col',\n      isMobile ? 'w-full h-full' : 'w-80 border-r border-border',\n      className\n    )}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-border bg-background\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h2 className=\"font-semibold text-foreground\">Conversations</h2>\n          {!isMobile && (\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={onToggle}\n              className=\"h-8 w-8\"\n              title=\"Collapse sidebar\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n        \n        {/* Search */}\n        <div className=\"space-y-2\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <input\n              type=\"text\"\n              placeholder={isMobile ? \"Search conversations...\" : `Search by ${storeSearchMode}...`}\n              value={localSearchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              className={cn(\n                \"w-full pl-9 pr-12 py-2 text-sm border border-input bg-background text-foreground rounded-lg focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent placeholder:text-muted-foreground\",\n                isMobile && \"py-3\"\n              )}\n            />\n            {isSearching && (\n              <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-brand-600\"></div>\n              </div>\n            )}\n          </div>\n          \n          {/* Search Mode Selector - Hidden on mobile */}\n          {!isMobile && (\n            <div className=\"flex gap-1\">\n              <button\n                onClick={() => handleSearchModeChange('name')}\n                className={cn(\n                  \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                  storeSearchMode === 'name' \n                    ? \"bg-brand-500 text-white\" \n                    : \"bg-muted text-muted-foreground hover:bg-accent\"\n                )}\n              >\n                Name\n              </button>\n              <button\n                onClick={() => handleSearchModeChange('id')}\n                className={cn(\n                  \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                  storeSearchMode === 'id' \n                    ? \"bg-brand-500 text-white\" \n                    : \"bg-muted text-muted-foreground hover:bg-accent\"\n                )}\n              >\n                ID\n              </button>\n              <button\n                onClick={() => handleSearchModeChange('session')}\n                className={cn(\n                  \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                  storeSearchMode === 'session' \n                    ? \"bg-brand-500 text-white\" \n                    : \"bg-muted text-muted-foreground hover:bg-accent\"\n                )}\n              >\n                Session\n              </button>\n            </div>\n          )}\n        </div>\n        \n        {/* Sort and Filter Toggle - Hidden on mobile */}\n        {!isMobile && (\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setShowSortFilter(!showSortFilter)}\n            className=\"w-full mt-2 justify-center gap-2\"\n          >\n            <Filter className=\"h-3 w-3\" />\n            Sort & Filter\n            {showSortFilter ? <ChevronUp className=\"h-3 w-3\" /> : <ChevronDown className=\"h-3 w-3\" />}\n          </Button>\n        )}\n        \n        {/* Sort and Filter Options - Hidden on mobile */}\n        {!isMobile && showSortFilter && (\n          <AnimatePresence>\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"space-y-3 mt-3 overflow-hidden\"\n            >\n              {/* Sort Options */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Sort By</label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <SimpleSelect\n                    value={sortBy}\n                    onValueChange={(value) => {\n                      if (currentAgent) {\n                        // Update the sort state and apply filters client-side\n                        fetchConversations(currentAgent.id, { \n                          orderBy: value \n                        });\n                      }\n                    }}\n                    options={[\n                      { value: 'id', label: 'Date Created' },\n                      { value: 'updated_at', label: 'Last Updated' },\n                      { value: 'name', label: 'Name' }\n                    ]}\n                    className=\"text-xs\"\n                  />\n                  \n                  <SimpleSelect\n                    value={sortOrder}\n                    onValueChange={(value) => {\n                      if (currentAgent) {\n                        // Update the sort state and apply filters client-side\n                        fetchConversations(currentAgent.id, { \n                          order: value as 'asc' | 'desc' \n                        });\n                      }\n                    }}\n                    options={[\n                      { value: 'desc', label: 'Newest First' },\n                      { value: 'asc', label: 'Oldest First' }\n                    ]}\n                    className=\"text-xs\"\n                  />\n                </div>\n              </div>\n              \n              {/* Date Filter */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Filter By Date</label>\n                <SimpleSelect\n                  value={storeDateFilter}\n                  onValueChange={(value) => handleDateFilterChange(value as 'all' | 'today' | 'week' | 'month')}\n                  options={[\n                    { value: 'all', label: 'All Time' },\n                    { value: 'today', label: 'Today' },\n                    { value: 'week', label: 'Last 7 Days' },\n                    { value: 'month', label: 'Last 30 Days' }\n                  ]}\n                  className=\"w-full text-xs\"\n                />\n              </div>\n              \n              {/* User Filter */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Filter By User</label>\n                <SimpleSelect\n                  value={userFilter}\n                  onValueChange={(value) => {\n                    if (currentAgent) {\n                      // Update the user filter state and apply filters client-side\n                      fetchConversations(currentAgent.id, { \n                        userFilter: value \n                      });\n                    }\n                  }}\n                  options={[\n                    { value: 'all', label: 'All Users' },\n                    { value: 'me', label: 'My Conversations' }\n                    // Additional user options could be dynamically loaded\n                  ]}\n                  className=\"w-full text-xs\"\n                />\n              </div>\n            </motion.div>\n          </AnimatePresence>\n        )}\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"p-4 space-y-2\">\n        <Link href=\"/dashboard/projects/create\">\n          <Button\n            className=\"w-full justify-start gap-2\"\n            variant=\"default\"\n            disabled={isFreeTrialMode}\n            title={isFreeTrialMode ? 'Creating new agents is not available in free trial mode' : ''}\n          >\n            <Bot className=\"w-4 h-4\" />\n            Create New Agent\n          </Button>\n        </Link>\n        \n        <Button\n          onClick={handleNewConversation}\n          disabled={!currentAgent || isCreating || isFreeTrialMode}\n          className=\"w-full justify-start gap-2\"\n          variant=\"outline\"\n          title={isFreeTrialMode ? 'Creating new conversations is not available in free trial mode' : ''}\n        >\n          {isCreating ? (\n            <>\n              <Spinner size=\"sm\" />\n              <span>Creating...</span>\n            </>\n          ) : (\n            <>\n              <Plus className=\"w-4 h-4\" />\n              <span>New Chat</span>\n            </>\n          )}\n        </Button>\n      </div>\n\n      {/* Conversations List */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {loading && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <ConversationSkeleton count={5} />\n        ) : error && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <div className=\"p-4 text-center\">\n            <p className=\"text-sm text-destructive mb-2\">Failed to load conversations</p>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => currentAgent && fetchConversations(currentAgent.id)}\n            >\n              Try Again\n            </Button>\n          </div>\n        ) : filteredConversations.length === 0 ? (\n          <div className=\"p-4 text-center\">\n            <MessageSquare className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">\n              {storeSearchQuery ? 'No conversations found' : 'No conversations yet'}\n            </p>\n            {!storeSearchQuery && (\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Start a new conversation to get going\n              </p>\n            )}\n            {currentAgent && (\n              <div className=\"text-xs text-muted-foreground mt-2 space-y-1\">\n                <p>Agent: {currentAgent.project_name} (ID: {currentAgent.id})</p>\n                {error && (\n                  <p className=\"text-destructive\">Error: {error}</p>\n                )}\n                <p>Conversations loaded: {conversations.length}</p>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"p-2 space-y-1\">\n            {filteredConversations.map((conversation) => (\n              <ConversationItem\n                key={conversation.id}\n                conversation={conversation}\n                isSelected={currentConversation?.id === conversation.id}\n                onSelect={handleSelectConversation}\n                onDelete={(id) => handleDeleteConversation(id)}\n                onRename={handleRenameConversation}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Footer with Pagination */}\n      <div className=\"p-4 border-t border-border bg-background space-y-3\">\n        <div className=\"text-xs text-muted-foreground text-center\">\n          {storeSearchQuery ? (\n            <>\n              {filteredConversations.length} result{filteredConversations.length !== 1 ? 's' : ''}\n            </>\n          ) : (\n            <>\n              Showing {conversations.length} of {totalConversations} conversation{totalConversations !== 1 ? 's' : ''}\n            </>\n          )}\n          {currentAgent && (\n            <span className=\"block mt-1\">\n              Agent: {currentAgent.project_name}\n            </span>\n          )}\n        </div>\n        \n        {/* Pagination Controls */}\n        {totalPages > 1 && !storeSearchQuery && (\n          <div className=\"flex items-center justify-between gap-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                if (currentAgent && currentPage > 1) {\n                  fetchConversations(currentAgent.id, { page: currentPage - 1 });\n                }\n              }}\n              disabled={currentPage === 1 || loading}\n            >\n              <ChevronDown className=\"h-3 w-3 rotate-90\" />\n            </Button>\n            \n            <span className=\"text-xs text-muted-foreground\">\n              Page {currentPage} of {totalPages}\n            </span>\n            \n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                if (currentAgent && currentPage < totalPages) {\n                  fetchConversations(currentAgent.id, { page: currentPage + 1 });\n                }\n              }}\n              disabled={currentPage === totalPages || loading}\n            >\n              <ChevronDown className=\"h-3 w-3 -rotate-90\" />\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};","/**\n * Chat Layout Component\n * \n * Top-level layout component that orchestrates the chat interface.\n * Handles different deployment modes and manages the conversation sidebar.\n * \n * Deployment Modes:\n * - standalone: Full chat with sidebar (default for main app)\n * - widget: Embeddable chat without sidebar\n * - floating: Popup-style chat without sidebar\n * \n * Features:\n * - Responsive sidebar with collapse/expand\n * - Automatic message loading on conversation change\n * - Mode-specific rendering logic\n * - Clean separation of concerns\n * \n * Architecture:\n * - ChatLayout (this) - Layout orchestration\n *   - ConversationSidebar - Conversation list and management\n *   - ChatContainer - Main chat interface\n *     - Message - Individual messages\n *     - ChatInput - Message input area\n * \n * State Management:\n * - currentConversation from conversationStore\n * - loadMessages from messageStore\n * - Local state for sidebar collapse\n * \n * Features:\n * - Multiple deployment modes with flexible configuration\n * - Professional sidebar with persistent state and responsive design\n * - Full keyboard navigation and accessibility support\n * - Mobile-optimized interface with adaptive layout\n * - Customizable sidebar positioning and behavior options\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport type { Agent } from '@/types';\nimport { ChatContainer } from './ChatContainer';\nimport { ConversationSidebar } from './ConversationSidebar';\nimport { useConversationStore, useMessageStore } from '@/hooks/useWidgetStore';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\n/**\n * Props for ChatLayout component\n * \n * @property mode - Deployment mode: standalone (with sidebar), widget, or floating\n * @property className - Additional CSS classes for styling\n * @property onClose - Callback for closing chat (widget/floating modes)\n * @property onAgentSettings - Callback for opening agent settings\n * @property showSidebar - Whether to show sidebar (only applies to standalone mode)\n * @property enableConversationManagement - Enable conversation switching UI\n * @property maxConversations - Maximum conversations per session\n * @property sessionId - Session ID for conversation isolation\n * @property threadId - Specific conversation thread to load\n * @property onConversationChange - Callback when conversation changes\n * @property onMessage - Callback when message is sent/received\n */\ninterface ChatLayoutProps {\n  mode?: 'standalone' | 'widget' | 'floating';\n  className?: string;\n  onClose?: () => void;\n  onAgentSettings?: (agent: Agent) => void;\n  showSidebar?: boolean;\n  enableConversationManagement?: boolean;\n  maxConversations?: number;\n  sessionId?: string;\n  threadId?: string;\n  onConversationChange?: (conversation: any) => void;\n  onMessage?: (message: any) => void;\n  widgetInstance?: any; // Widget instance for isolated conversation management\n  conversations?: any[]; // Current conversations for isolated mode\n  currentConversation?: any; // Current conversation for isolated mode\n  conversationRefreshKey?: number; // Key to trigger ConversationManager refresh\n}\n\n/**\n * Chat Layout Component\n * \n * Orchestrates the overall chat interface layout based on deployment mode.\n * In standalone mode, includes a collapsible conversation sidebar.\n * In widget/floating modes, renders only the chat container.\n */\nexport const ChatLayout: React.FC<ChatLayoutProps> = ({\n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  showSidebar = true,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  widgetInstance,\n  conversations,\n  currentConversation,\n  conversationRefreshKey\n}) => {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [mobileSidebarOpen, setMobileSidebarOpen] = useState(false);\n  const { currentConversation: storeCurrentConversation } = useConversationStore();\n  const { loadMessages } = useMessageStore();\n\n  /**\n   * Load messages when conversation changes\n   * \n   * Automatically fetches messages from the store when user\n   * switches between conversations. This ensures the chat\n   * always shows the correct message history.\n   */\n  useEffect(() => {\n    // Skip API calls in demo mode to prevent errors\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    // In widget mode with isolated conversations, use the prop instead of store\n    const conversationToLoad = (mode === 'widget' || mode === 'floating') && currentConversation \n      ? currentConversation \n      : storeCurrentConversation;\n    \n    if (conversationToLoad && !isDemoMode) {\n      console.log('[ChatLayout] Loading messages for conversation:', {\n        conversationId: conversationToLoad.id,\n        mode,\n        isFromProp: !!(currentConversation && (mode === 'widget' || mode === 'floating'))\n      });\n      loadMessages(conversationToLoad.id.toString());\n    }\n  }, [storeCurrentConversation, currentConversation, loadMessages, mode]);\n\n  const { isMobile } = useBreakpoint();\n\n  // Hide sidebar for widget and floating modes\n  // Only standalone mode shows the conversation sidebar\n  const shouldShowSidebar = showSidebar && mode === 'standalone';\n\n  /**\n   * Toggle sidebar collapsed state\n   * \n   * Toggles sidebar visibility with potential for session persistence\n   * to enhance user experience across application sessions\n   */\n  const handleToggleSidebar = () => {\n    setSidebarCollapsed(!sidebarCollapsed);\n  };\n\n  if (!shouldShowSidebar) {\n    // For widget/floating modes, just show the chat container\n    return (\n      <ChatContainer\n        mode={mode}\n        className={className}\n        onClose={onClose}\n        onAgentSettings={onAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        threadId={threadId}\n        onConversationChange={onConversationChange}\n        onMessage={onMessage}\n        conversationRefreshKey={conversationRefreshKey}\n        isMobile={isMobile}\n      />\n    );\n  }\n\n  // On mobile, hide the sidebar and use drawer navigation instead\n  if (isMobile) {\n    return (\n      <div className=\"flex flex-col h-full bg-background\">\n        <ChatContainer\n          mode={mode}\n          className=\"flex-1\"\n          onClose={onClose}\n          onAgentSettings={onAgentSettings}\n          enableConversationManagement={enableConversationManagement}\n          maxConversations={maxConversations}\n          sessionId={sessionId}\n          threadId={threadId}\n          onConversationChange={onConversationChange}\n          onMessage={onMessage}\n          conversationRefreshKey={conversationRefreshKey}\n          isMobile={true}\n        />\n      </div>\n    );\n  }\n\n  // Desktop layout with sidebar\n  return (\n    <div className=\"flex h-full bg-background\">\n      {/* Sidebar */}\n      <ConversationSidebar\n        isCollapsed={sidebarCollapsed}\n        onToggle={handleToggleSidebar}\n        isMobile={false}\n      />\n      \n      {/* Main Chat Area */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        <ChatContainer\n          mode={mode}\n          className=\"h-full\"\n          onClose={onClose}\n          onAgentSettings={onAgentSettings}\n          enableConversationManagement={enableConversationManagement}\n          maxConversations={maxConversations}\n          sessionId={sessionId}\n          threadId={threadId}\n          onConversationChange={onConversationChange}\n          onMessage={onMessage}\n          conversationRefreshKey={conversationRefreshKey}\n          isMobile={false}\n        />\n      </div>\n    </div>\n  );\n};","import { createRoot } from 'react-dom/client';\nimport { Toaster } from 'sonner';\n\nimport '../app/globals.css';\nimport './widget-styles.css';\nimport { WidgetConfig } from '../types';\nimport { useConfigStore, useAgentStore } from '../store';\nimport { ChatLayout } from '../components/chat/ChatLayout';\nimport { getClient } from '../lib/api/client';\nimport { WidgetProvider } from './WidgetContext';\nimport { WidgetStoreProvider } from './WidgetStoreContext';\nimport { WidgetToaster } from './isolated-toast';\nimport { widgetDebugger } from './debug-utils';\n\n/**\n * Widget Configuration Interface\n * \n * Defines all configuration options for CustomGPT widget initialization.\n * This interface is used by both embedded widgets and floating buttons.\n * \n * @property agentId - Required: Agent/Project ID from CustomGPT dashboard\n * @property apiKey - Optional: API key for direct mode (bypasses proxy server)\n * @property apiUrl - Optional: Base URL for API (proxy URL or CustomGPT API URL)\n * @property useProxy - Optional: Force proxy mode even with API key (default: false)\n * @property agentName - Optional: Custom name to display instead of \"Agent - {ID}\"\n * @property containerId - DOM element ID for embedded mode (ignored in floating mode)\n * @property mode - Widget deployment mode: 'embedded' | 'floating' | 'widget'\n * @property theme - Color theme: 'light' | 'dark'\n * @property position - Position for floating mode: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left'\n * @property width - Widget width (default: '400px')\n * @property height - Widget height (default: '600px')\n * @property enableCitations - Show citation sources in messages\n * @property enableFeedback - Show thumbs up/down feedback buttons\n * \n * Conversation Management Options:\n * @property enableConversationManagement - Enable conversation switching UI\n * @property maxConversations - Maximum conversations per session (default: 5)\n * @property sessionId - Custom session ID (auto-generated if not provided)\n * @property threadId - Specific conversation thread to load\n * @property isolateConversations - Whether to isolate conversations from other widgets (default: true)\n * \n * Event Callbacks:\n * @property onOpen - Called when widget opens\n * @property onClose - Called when widget closes\n * @property onMessage - Called when new message is sent/received\n * @property onConversationChange - Called when conversation switches\n */\nexport interface CustomGPTWidgetConfig {\n  // Required properties\n  agentId: number | string;\n  \n  // API Configuration\n  apiKey?: string; // API key for direct mode (bypasses proxy)\n  apiUrl?: string; // Base URL for the API server (defaults to CustomGPT API or proxy)\n  useProxy?: boolean; // Whether to use proxy mode (default: true if no apiKey)\n  \n  // Display properties\n  agentName?: string;\n  containerId?: string;\n  mode?: 'embedded' | 'floating' | 'widget';\n  theme?: 'light' | 'dark';\n  position?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n  width?: string;\n  height?: string;\n  \n  // Feature flags\n  enableCitations?: boolean;\n  enableFeedback?: boolean;\n  enableConversationManagement?: boolean;\n  \n  // Conversation management\n  maxConversations?: number;\n  sessionId?: string;\n  threadId?: string;\n  isolateConversations?: boolean; // New flag to isolate conversations\n  \n  // Event callbacks\n  onOpen?: () => void;\n  onClose?: () => void;\n  onMessage?: (message: any) => void;\n  onConversationChange?: (conversation: any) => void;\n}\n\n/**\n * CustomGPT Widget Class\n * \n * Main widget class that manages the lifecycle of CustomGPT chat instances.\n * Supports both embedded and floating deployment modes with full conversation management.\n * Can operate in two modes:\n * - Proxy mode (default): Communicates through a Next.js server proxy\n * - Direct mode: Communicates directly with CustomGPT API using provided API key\n * \n * @example\n * // Basic embedded widget (proxy mode)\n * const widget = CustomGPTWidget.init({\n *   agentId: '123',\n *   containerId: 'chat-container',\n *   apiUrl: 'https://your-nextjs-app.com'\n * });\n * \n * @example\n * // Direct mode with API key (no proxy needed)\n * const widget = CustomGPTWidget.init({\n *   agentId: '123',\n *   apiKey: 'your-api-key',\n *   mode: 'floating',\n *   enableConversationManagement: true\n * });\n * \n * @example\n * // Floating widget with conversation management\n * const widget = CustomGPTWidget.init({\n *   agentId: '123',\n *   mode: 'floating',\n *   enableConversationManagement: true,\n *   maxConversations: 10\n * });\n */\nclass CustomGPTWidget {\n  private container: HTMLElement | null = null;\n  private root: any = null;\n  private config: CustomGPTWidgetConfig;\n  private isOpen: boolean = false;\n  public sessionId: string;\n  private currentConversationId: string | null = null;\n  private instanceKey?: string;\n  private conversationRefreshKey: number = 0;\n\n  constructor(config: CustomGPTWidgetConfig) {\n    // Validate required fields\n    \n    if (!config.agentId) {\n      throw new Error('CustomGPT Widget: Agent ID is required');\n    }\n\n    // Merge with defaults\n    this.config = {\n      mode: 'embedded',\n      theme: 'light',\n      position: 'bottom-right',\n      width: '400px',\n      height: '600px',\n      enableCitations: true,\n      enableFeedback: true,\n      enableConversationManagement: false,\n      ...config,\n    };\n\n    // Initialize session ID\n    // If isolateConversations is true, ensure each widget has a unique session\n    if (this.config.isolateConversations !== false) {\n      // Default to isolated conversations - each widget gets its own session\n      const modePrefix = this.config.mode || 'widget';\n      const containerId = this.config.containerId || 'default';\n      // Create a unique session ID that includes mode, container info, and a random component\n      // Use performance.now() for higher precision to avoid collisions\n      const timestamp = typeof performance !== 'undefined' ? performance.now() : Date.now();\n      const random = Math.random().toString(36).substr(2, 9);\n      const uniqueId = `${timestamp}_${random}_${Math.random().toString(36).substr(2, 5)}`;\n      this.sessionId = `session_${modePrefix}_${containerId}_${uniqueId}`;\n    } else if (this.config.sessionId) {\n      // Use provided session ID for sharing conversations\n      this.sessionId = this.config.sessionId;\n    } else {\n      // Generate a regular session ID\n      this.sessionId = this.generateSessionId();\n    }\n    \n    // Store widget instance reference for conversation management\n    // Use unique instance key to prevent conflicts between multiple widgets\n    if (typeof window !== 'undefined') {\n      const instanceKey = `__customgpt_widget_${this.sessionId}`;\n      (window as any)[instanceKey] = this;\n      \n      // Also store in instances object for easier access\n      if (!(window as any).__customgpt_widget_instances) {\n        (window as any).__customgpt_widget_instances = {};\n      }\n      (window as any).__customgpt_widget_instances[this.sessionId] = this;\n      \n      // DEPRECATED: Global reference kept for backward compatibility\n      // Don't overwrite if already exists to preserve first widget\n      if (!(window as any).__customgpt_widget_instance) {\n        (window as any).__customgpt_widget_instance = this;\n      }\n      \n      // Store instance key for later reference\n      this.instanceKey = instanceKey;\n    }\n\n    this.init();\n  }\n\n  /**\n   * Generates a unique session ID for conversation isolation\n   * @returns Unique session identifier\n   */\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  private async init() {\n    // Initialize API client based on configuration\n    const { initializeClient } = require('../lib/api/client');\n    \n    // Determine if using direct mode or proxy mode\n    const useDirectMode = this.config.apiKey && (this.config.useProxy !== true);\n    \n    if (useDirectMode) {\n      // Direct mode - API key provided, communicate directly with CustomGPT\n      initializeClient({\n        mode: 'direct',\n        apiKey: this.config.apiKey,\n        apiUrl: this.config.apiUrl || 'https://app.customgpt.ai/api/v1'\n      });\n    } else {\n      // Proxy mode - use Next.js server proxy\n      const proxyUrl = this.config.apiUrl || '';\n      initializeClient({\n        mode: 'proxy',\n        apiUrl: proxyUrl\n      });\n      \n      // Store globally for the API client to pick up\n      if (proxyUrl) {\n        (window as any).__customgpt_api_url = proxyUrl;\n      }\n    }\n    \n    // Configure session for conversation isolation\n    if (this.config.enableConversationManagement) {\n      // Store session configuration for conversation management\n      // If isolateConversations is true, use instance-specific session storage\n      if (this.config.isolateConversations) {\n        // Create instance-specific session object\n        if (!(window as any).__customgpt_sessions) {\n          (window as any).__customgpt_sessions = {};\n        }\n        (window as any).__customgpt_sessions[this.sessionId] = {\n          sessionId: this.sessionId,\n          maxConversations: this.config.maxConversations,\n          enableConversationManagement: true\n        };\n      } else {\n        // Use shared session (old behavior)\n        (window as any).__customgpt_session = {\n          sessionId: this.sessionId,\n          maxConversations: this.config.maxConversations,\n          enableConversationManagement: true\n        };\n      }\n    }\n    \n    // Check if using demo/test API key\n    const isDemoMode = false; // Demo mode removed as API key is server-side\n    \n    // Store demo mode flag for preventing unnecessary API calls\n    if (isDemoMode) {\n      (window as any).__customgpt_demo_mode = true;\n    } else {\n      // Ensure demo mode is disabled for valid API keys\n      (window as any).__customgpt_demo_mode = false;\n    }\n    \n    // Agent initialization is now handled by the widget-specific store\n    // The WidgetStoreProvider will create and initialize the agent store\n    // which includes proper error handling and fallback mechanisms\n\n    // Create container based on mode\n    this.createContainer();\n    \n    // Render the widget first\n    this.render();\n    \n    // Initialize conversation after render to ensure ConversationManager is mounted\n    if (this.config.enableConversationManagement) {\n      const conversations = this.getConversations();\n      \n      if (conversations.length === 0) {\n        // Create initial conversation after a small delay to ensure components are mounted\n        setTimeout(async () => {\n          await this.createConversation('New Chat');\n        }, 100);\n      } else {\n        // Set current conversation to the first one\n        this.currentConversationId = conversations[0].id;\n        \n        // Update the widget conversation store if in isolated mode\n        if (this.config.isolateConversations !== false && typeof window !== 'undefined') {\n          // Wait a bit to ensure stores are initialized\n          setTimeout(() => {\n            const widgetStores = (window as any).__customgpt_widget_stores;\n            if (widgetStores && widgetStores[this.sessionId]) {\n              const conversationStore = widgetStores[this.sessionId].conversationStore;\n              const messageStore = widgetStores[this.sessionId].messageStore;\n              \n              if (conversationStore) {\n                const currentConv = conversations[0];\n                const fullConversation = {\n                  ...currentConv,\n                  id: parseInt(currentConv.id) || currentConv.id,\n                  project_id: parseInt(this.config.agentId as string) || 0,\n                  session_id: this.sessionId,\n                  name: currentConv.title\n                };\n                \n                console.log('[Widget] Setting initial conversation in store:', fullConversation);\n                conversationStore.getState().selectConversation(fullConversation as any);\n                \n                // Load messages for the initial conversation\n                if (messageStore) {\n                  messageStore.getState().loadMessages(currentConv.id);\n                }\n              }\n            }\n          }, 200);\n        } else if (this.config.isolateConversations === false && typeof window !== 'undefined') {\n          // Only sync with global store if explicitly not isolated\n          const { useConversationStore } = require('../store');\n          const currentConv = conversations[0];\n          const fullConversation = {\n            ...currentConv,\n            project_id: parseInt(this.config.agentId as string) || 0,\n            session_id: this.sessionId,\n            name: currentConv.title\n          };\n          \n          // Set only the current conversation\n          useConversationStore.setState({\n            conversations: [fullConversation as any],\n            currentConversation: fullConversation as any\n          });\n        }\n      }\n    }\n    \n    // For isolated widgets, we need to prevent the global store from being used\n    if (this.config.isolateConversations !== false && typeof window !== 'undefined') {\n      // Store the widget instance globally so components can access it\n      (window as any).__customgpt_widget_instances = (window as any).__customgpt_widget_instances || {};\n      (window as any).__customgpt_widget_instances[this.sessionId] = this;\n      \n      // Set the current active widget session\n      (window as any).__customgpt_active_widget_session = this.sessionId;\n    }\n  }\n\n  private createContainer() {\n    const { mode, containerId } = this.config;\n\n    if (mode === 'embedded' && containerId) {\n      // Use provided container\n      this.container = document.getElementById(containerId);\n      if (!this.container) {\n        throw new Error(`Container with id \"${containerId}\" not found`);\n      }\n    } else if (mode === 'floating') {\n      // Create floating container\n      this.container = document.createElement('div');\n      this.container.id = 'customgpt-floating-widget';\n      this.setupFloatingStyles();\n      document.body.appendChild(this.container);\n    } else {\n      // Create default container\n      this.container = document.createElement('div');\n      this.container.id = 'customgpt-widget';\n      document.body.appendChild(this.container);\n    }\n  }\n\n  private setupFloatingStyles() {\n    if (!this.container || this.config.mode !== 'floating') return;\n\n    const { position, width, height } = this.config;\n    \n    // Base floating styles\n    Object.assign(this.container.style, {\n      position: 'fixed',\n      zIndex: '9999',\n      width: width || '400px',\n      height: height || '600px',\n      boxShadow: '0 10px 25px rgba(0, 0, 0, 0.2)',\n      borderRadius: '12px',\n      overflow: 'hidden',\n      transition: 'all 0.3s ease',\n      backgroundColor: 'white', // Ensure background is set\n    });\n    \n    // Add class for styling\n    this.container.classList.add('floating-mode');\n    this.container.classList.add('customgpt-floating-container');\n\n    // Position-specific styles\n    switch (position) {\n      case 'bottom-right':\n        Object.assign(this.container.style, {\n          bottom: '20px',\n          right: '20px',\n        });\n        break;\n      case 'bottom-left':\n        Object.assign(this.container.style, {\n          bottom: '20px',\n          left: '20px',\n        });\n        break;\n      case 'top-right':\n        Object.assign(this.container.style, {\n          top: '20px',\n          right: '20px',\n        });\n        break;\n      case 'top-left':\n        Object.assign(this.container.style, {\n          top: '20px',\n          left: '20px',\n        });\n        break;\n    }\n\n    // Initially hidden for floating mode with proper initial state\n    this.container.style.display = 'none';\n    this.container.style.opacity = '0';\n    this.container.style.transform = 'translateY(20px)';\n  }\n\n  private render() {\n    if (!this.container) return;\n\n    // Apply proper styling based on mode\n    if (this.config.mode === 'embedded') {\n      this.container.classList.add('customgpt-embedded-widget');\n      // Apply width and height styles directly to container\n      Object.assign(this.container.style, {\n        width: this.config.width || '400px',\n        height: this.config.height || '600px',\n        margin: '0 auto', // Center by default\n        display: 'block',\n      });\n    }\n\n    // Only create root once\n    if (!this.root) {\n      this.root = createRoot(this.container);\n    }\n    \n    const WidgetApp = () => {\n      // DEPRECATED: This global reference is kept for backward compatibility\n      // New code should use WidgetContext instead\n      // Only set if not already set to avoid overwriting first widget\n      if (typeof window !== 'undefined' && !(window as any).__customgpt_widget_instance) {\n        (window as any).__customgpt_widget_instance = this;\n      }\n      \n      const handleClose = () => {\n        this.close();\n        this.config.onClose?.();\n      };\n\n      // Get current conversation ID or use thread ID\n      const currentConvId = this.currentConversationId || this.config.threadId;\n      \n      // For isolated mode, pass the widget instance to manage conversations locally\n      const widgetRef = this;\n      \n      // Create a unique key for this widget's conversations\n      const widgetKey = `widget_${this.sessionId}`;\n\n      return (\n        <WidgetStoreProvider sessionId={this.sessionId}>\n          <WidgetProvider widgetInstance={widgetRef}>\n            <div className={`customgpt-widget-wrapper widget-mode ${this.config.mode}-mode`}>\n              <ChatLayout\n                mode={this.config.mode === 'embedded' ? 'widget' : 'floating'}\n                onClose={this.config.mode === 'floating' ? handleClose : undefined}\n                showSidebar={false} // Disable sidebar for widget mode\n                className=\"w-full h-full\"\n                // Pass conversation management configuration\n                enableConversationManagement={this.config.enableConversationManagement}\n                maxConversations={this.config.maxConversations}\n                sessionId={this.sessionId}\n                threadId={currentConvId} // Pass current conversation ID\n                onConversationChange={this.config.onConversationChange}\n                onMessage={this.config.onMessage}\n                // Pass widget instance for isolated conversation management\n                widgetInstance={this.config.isolateConversations !== false ? widgetRef : undefined}\n                // Pass current conversations for isolated mode\n                conversations={this.config.isolateConversations !== false ? this.getConversations() : undefined}\n                currentConversation={this.config.isolateConversations !== false && this.currentConversationId ? \n                  this.getConversations().find(c => c.id === this.currentConversationId) : undefined}\n                // Pass refresh key to trigger ConversationManager updates\n                conversationRefreshKey={this.conversationRefreshKey}\n              />\n              <WidgetToaster sessionId={this.sessionId} />\n            </div>\n          </WidgetProvider>\n        </WidgetStoreProvider>\n      );\n    };\n\n    this.root.render(<WidgetApp />);\n\n    // Auto-open for embedded mode\n    if (this.config.mode === 'embedded') {\n      this.open();\n    }\n  }\n\n  /**\n   * Get all conversations for current session\n   * @returns Array of conversations\n   */\n  public getConversations(): any[] {\n    const stored = localStorage.getItem(`customgpt_conversations_${this.sessionId}`);\n    if (stored) {\n      try {\n        return JSON.parse(stored);\n      } catch (e) {\n        console.error('Failed to parse conversations:', e);\n      }\n    }\n    return [];\n  }\n\n  /**\n   * Switch to a different conversation\n   * @param conversationId - ID of conversation to switch to\n   */\n  public switchConversation(conversationId: string): void {\n    widgetDebugger.log('WIDGET', 'switchConversation called', {\n      conversationId,\n      conversationIdType: typeof conversationId,\n      sessionId: this.sessionId,\n      isolateConversations: this.config.isolateConversations,\n      currentConversations: this.getConversations().map(c => ({\n        id: c.id,\n        idType: typeof c.id,\n        title: c.title\n      }))\n    });\n    \n    const conversations = this.getConversations();\n    const conversation = conversations.find(c => c.id === conversationId || c.id === parseInt(conversationId));\n    \n    widgetDebugger.log('WIDGET', 'Found conversation', {\n      found: !!conversation,\n      conversationId,\n      searchedId: conversationId,\n      conversationDetails: conversation ? {\n        id: conversation.id,\n        idType: typeof conversation.id,\n        title: conversation.title,\n        session_id: conversation.session_id\n      } : null\n    });\n    \n    if (conversation) {\n      this.currentConversationId = conversationId;\n      \n      // Increment refresh key to trigger ConversationManager update\n      this.conversationRefreshKey++;\n      \n      // Load messages for the new conversation from widget store\n      if (this.config.isolateConversations !== false && typeof window !== 'undefined') {\n        // Get the widget's message store and load messages\n        const widgetStores = (window as any).__customgpt_widget_stores;\n        \n        widgetDebugger.log('WIDGET', 'Accessing widget stores', {\n          hasWidgetStores: !!widgetStores,\n          sessionId: this.sessionId,\n          hasSessionStore: widgetStores && !!widgetStores[this.sessionId],\n          availableSessions: widgetStores ? Object.keys(widgetStores) : []\n        });\n        \n        if (widgetStores && widgetStores[this.sessionId]) {\n          const messageStore = widgetStores[this.sessionId].messageStore;\n          const conversationStore = widgetStores[this.sessionId].conversationStore;\n          \n          if (messageStore) {\n            // Load messages for this conversation\n            widgetDebugger.log('WIDGET', 'Loading messages via store', {\n              conversationId,\n              storeHasLoadMessages: typeof messageStore.getState().loadMessages === 'function'\n            });\n            \n            widgetDebugger.traceMessageFlow('SWITCH_CONVERSATION', {\n              conversationId,\n              sessionId: this.sessionId,\n              action: 'Loading messages'\n            });\n            \n            messageStore.getState().loadMessages(conversationId);\n          }\n          \n          if (conversationStore) {\n            // Update the conversation store's currentConversation\n            widgetDebugger.log('WIDGET', 'Updating conversation store', {\n              conversationId: conversation.id,\n              conversationIdType: typeof conversation.id\n            });\n            \n            const fullConversation = {\n              ...conversation,\n              id: parseInt(conversation.id) || conversation.id, // Ensure proper ID type\n              project_id: parseInt(this.config.agentId as string) || 0,\n              session_id: this.sessionId,\n              name: conversation.title\n            };\n            conversationStore.getState().selectConversation(fullConversation as any);\n          }\n        } else {\n          widgetDebugger.log('WIDGET', 'Widget stores not found', {\n            sessionId: this.sessionId,\n            availableStores: Object.keys(widgetStores || {})\n          }, 'error');\n        }\n      }\n      \n      // Don't update the global store if we're in isolated mode\n      // The render() method will handle passing the correct conversation\n      if (!this.config.isolateConversations) {\n        // Only update global store if sharing conversations\n        if (typeof window !== 'undefined') {\n          const { useConversationStore } = require('../store');\n          \n          // Get all widget conversations\n          const allWidgetConversations = this.getConversations();\n          \n          // Convert all widget conversations to store format\n          const storeConversations = allWidgetConversations.map(conv => ({\n            ...conv,\n            project_id: parseInt(this.config.agentId as string) || 0,\n            session_id: this.sessionId,\n            name: conv.title\n          }));\n          \n          // Find the selected conversation with proper format\n          const fullConversation = storeConversations.find(c => c.id === conversationId);\n          \n          // Update store with all widget conversations\n          useConversationStore.setState({\n            conversations: storeConversations as any,\n            currentConversation: fullConversation as any\n          });\n        }\n      }\n      \n      // Trigger re-render with new conversation\n      this.render();\n      this.config.onConversationChange?.(conversation);\n    }\n  }\n\n  /**\n   * Create a new conversation\n   * @param title - Optional title for the conversation\n   * @returns The new conversation object\n   */\n  public async createConversation(title?: string): Promise<any> {\n    const conversations = this.getConversations();\n    \n    // Check max conversations limit (only if specified by user)\n    if (this.config.maxConversations && conversations.length >= this.config.maxConversations) {\n      console.warn(`Maximum conversation limit (${this.config.maxConversations}) reached`);\n      return null; // Return null instead of throwing error\n    }\n    \n    // Use the conversation store to create a proper API conversation\n    if (this.config.isolateConversations !== false && typeof window !== 'undefined') {\n      const widgetStores = (window as any).__customgpt_widget_stores;\n      if (widgetStores && widgetStores[this.sessionId]) {\n        const conversationStore = widgetStores[this.sessionId].conversationStore;\n        const messageStore = widgetStores[this.sessionId].messageStore;\n        \n        if (conversationStore) {\n          try {\n            // Create conversation via the store (which uses API)\n            await conversationStore.getState().createConversation(\n              parseInt(this.config.agentId as string) || 0,\n              title || `Conversation ${conversations.length + 1}`\n            );\n            \n            // Get the newly created conversation\n            const newConversation = conversationStore.getState().currentConversation;\n            \n            if (newConversation) {\n              // Add to widget's local conversation list\n              const widgetConversation = {\n                id: newConversation.id.toString(), // Ensure string ID for consistency\n                title: newConversation.name || title || `Conversation ${conversations.length + 1}`,\n                createdAt: newConversation.created_at || new Date().toISOString(),\n                messages: [],\n                project_id: newConversation.project_id,\n                session_id: newConversation.session_id,\n                name: newConversation.name\n              };\n              \n              conversations.unshift(widgetConversation);\n              this.saveConversations(conversations);\n              this.currentConversationId = widgetConversation.id;\n              \n              // Clear any existing messages for this conversation ID\n              if (messageStore) {\n                messageStore.getState().clearMessages(widgetConversation.id);\n              }\n              \n              // Increment refresh key to trigger ConversationManager update\n              this.conversationRefreshKey++;\n              \n              // Trigger re-render with new conversation\n              this.render();\n              \n              return widgetConversation;\n            }\n          } catch (error) {\n            console.error('Failed to create conversation via API:', error);\n            // Fall back to local creation if API fails\n          }\n        }\n      }\n    }\n    \n    // Fallback: Create conversation locally if API creation fails\n    const newConversation = {\n      id: `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      title: title || `Conversation ${conversations.length + 1}`,\n      createdAt: new Date().toISOString(),\n      messages: [],\n      project_id: parseInt(this.config.agentId as string) || 0,\n      session_id: this.sessionId,\n      name: title || `Conversation ${conversations.length + 1}`\n    };\n    \n    conversations.unshift(newConversation);\n    this.saveConversations(conversations);\n    this.currentConversationId = newConversation.id;\n    \n    // Increment refresh key to trigger ConversationManager update\n    this.conversationRefreshKey++;\n    \n    // Trigger re-render with new conversation\n    this.render();\n    \n    return newConversation;\n  }\n\n  /**\n   * Update conversation title\n   * @param conversationId - ID of conversation to update\n   * @param newTitle - New title for the conversation\n   */\n  public updateConversationTitle(conversationId: string, newTitle: string): void {\n    const conversations = this.getConversations();\n    const conversation = conversations.find(c => c.id === conversationId);\n    \n    if (conversation) {\n      conversation.title = newTitle;\n      this.saveConversations(conversations);\n      // Increment refresh key to trigger ConversationManager update\n      this.conversationRefreshKey++;\n      this.render();\n    }\n  }\n\n  /**\n   * Delete a conversation\n   * @param conversationId - ID of conversation to delete\n   */\n  public deleteConversation(conversationId: string): void {\n    const conversations = this.getConversations();\n    const filtered = conversations.filter(c => c.id !== conversationId);\n    \n    this.saveConversations(filtered);\n    \n    // Increment refresh key to trigger ConversationManager update\n    this.conversationRefreshKey++;\n    \n    // If deleting current conversation, switch to another or create new\n    if (this.currentConversationId === conversationId) {\n      if (filtered.length > 0) {\n        this.switchConversation(filtered[0].id);\n      } else {\n        this.createConversation().catch(err => \n          console.error('Failed to create conversation after deletion:', err)\n        );\n      }\n    } else {\n      // Still need to re-render to update the conversation list\n      this.render();\n    }\n  }\n\n  /**\n   * Save conversations to localStorage\n   * @param conversations - Array of conversations to save\n   */\n  private saveConversations(conversations: any[]): void {\n    try {\n      localStorage.setItem(\n        `customgpt_conversations_${this.sessionId}`,\n        JSON.stringify(conversations)\n      );\n    } catch (e) {\n      console.error('Failed to save conversations:', e);\n      // Handle quota exceeded error\n      if (e instanceof DOMException && e.name === 'QuotaExceededError') {\n        // Try to clean up old conversations\n        this.cleanupOldConversations();\n      }\n    }\n  }\n\n  /**\n   * Clean up old conversations to free up localStorage space\n   */\n  private cleanupOldConversations(): void {\n    const conversations = this.getConversations();\n    // Keep only the 3 most recent conversations\n    const recent = conversations.slice(0, 3);\n    this.saveConversations(recent);\n  }\n\n  // Public methods\n  public open() {\n    if (!this.container) return;\n\n    this.isOpen = true;\n    \n    if (this.config.mode === 'floating') {\n      this.container.style.display = 'block';\n      // Trigger animation\n      setTimeout(() => {\n        if (this.container) {\n          this.container.style.transform = 'translateY(0)';\n          this.container.style.opacity = '1';\n        }\n      }, 10);\n    }\n\n    this.config.onOpen?.();\n  }\n\n  public close() {\n    if (!this.container) return;\n\n    this.isOpen = false;\n\n    if (this.config.mode === 'floating') {\n      this.container.style.transform = 'translateY(20px)';\n      this.container.style.opacity = '0';\n      \n      setTimeout(() => {\n        if (this.container) {\n          this.container.style.display = 'none';\n        }\n      }, 300);\n    }\n  }\n\n  public toggle() {\n    if (this.isOpen) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  public destroy() {\n    if (this.root) {\n      this.root.unmount();\n    }\n    \n    if (this.container && this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container);\n    }\n    \n    // Clean up widget stores\n    if (typeof window !== 'undefined') {\n      const widgetStores = (window as any).__customgpt_widget_stores;\n      if (widgetStores && widgetStores[this.sessionId]) {\n        delete widgetStores[this.sessionId];\n      }\n      \n      // Clean up widget instance references\n      const instances = (window as any).__customgpt_widget_instances;\n      if (instances && instances[this.sessionId]) {\n        delete instances[this.sessionId];\n      }\n      \n      if (this.instanceKey) {\n        delete (window as any)[this.instanceKey];\n      }\n    }\n    \n    this.container = null;\n    this.root = null;\n  }\n\n  public updateConfig(newConfig: Partial<CustomGPTWidgetConfig>) {\n    this.config = { ...this.config, ...newConfig };\n    \n    // Re-render with new config\n    this.render();\n  }\n  \n  /**\n   * Force a re-render of the widget\n   * Useful for updating the UI after state changes\n   */\n  public refresh() {\n    this.render();\n  }\n\n  // Getters\n  public get isOpened() {\n    return this.isOpen;\n  }\n\n  public get configuration() {\n    return { ...this.config };\n  }\n}\n\n// Global API for the widget\ndeclare global {\n  interface Window {\n    CustomGPTWidget: {\n      init: (config: CustomGPTWidgetConfig) => CustomGPTWidget;\n      create: (config: CustomGPTWidgetConfig) => CustomGPTWidget;\n    };\n  }\n}\n\n// Export for UMD build\nconst CustomGPTWidgetAPI = {\n  init: (config: CustomGPTWidgetConfig): CustomGPTWidget => {\n    return new CustomGPTWidget(config);\n  },\n  \n  create: (config: CustomGPTWidgetConfig): CustomGPTWidget => {\n    return new CustomGPTWidget(config);\n  },\n};\n\n// Global assignment for browser usage\nif (typeof window !== 'undefined') {\n  window.CustomGPTWidget = CustomGPTWidgetAPI;\n}\n\n// For module usage\nexport { CustomGPTWidget, CustomGPTWidgetAPI };\nexport default CustomGPTWidgetAPI;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + {\"135\":\"300cf3128c7b3899f41e\",\"139\":\"b5b36620976f04410283\",\"236\":\"f4f1e2e8242e227a0fbf\",\"258\":\"088a5955ad60da7b0eac\",\"352\":\"932975b3c3dcb3907cb8\",\"365\":\"f366977150fc0db74e96\",\"404\":\"d6cb89542ef4f6025d04\",\"482\":\"61ff49824d046d57452e\",\"613\":\"3f83b3c90df78f917118\",\"638\":\"e1c53d34514d703a4e96\",\"964\":\"7561879d4b6c10001d9e\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t30: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = Object(typeof self !== 'undefined' ? self : this)[\"webpackChunkCustomGPTWidget\"] = Object(typeof self !== 'undefined' ? self : this)[\"webpackChunkCustomGPTWidget\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","__webpack_require__.nc = undefined;","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [96], () => (__webpack_require__(94426)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["root","factory","exports","module","define","amd","self","this","deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","useConversationStore","create","persist","set","get","conversations","currentConversation","loading","error","currentPage","totalPages","totalConversations","perPage","sortOrder","sortBy","userFilter","allConversations","searchQuery","searchMode","dateFilter","applyFilters","state","filtered","trim","query","toLowerCase","filter","conv","name","includes","id","toString","session_id","now","Date","filterDate","setHours","setDate","getDate","updated_at","setSearchQuery","setSearchMode","mode","setDateFilter","fetchConversations","async","projectId","params","logger","info","undefined","client","getClient","apiParams","page","per_page","order","orderBy","response","getConversations","responseType","hasData","data","dataLength","Array","isArray","length","paginationData","count","map","c","messagesCount","messages","current_page","last_page","total","errorType","Error","constructor","status","message","createConversation","newConversation","selectConversation","conversation","deleteConversation","find","conversationId","project_id","updatedAllConversations","updateConversation","sessionId","updatedConversation","ensureConversation","firstMessage","generateConversationName","toLocaleDateString","getSessionId","window","__customgpt_current_session","__customgpt_session","__customgpt_sessions","sessions","sessionIds","Object","keys","sessionStorage","getItem","Math","random","substr","setItem","e","partialize","onRehydrateStorage","cn","inputs","twMerge","clsx","generateId","substring","formatFileSize","bytes","i","floor","log","parseFloat","pow","toFixed","getFileIcon","fileType","type","isFileTypeAllowed","allowedTypes","some","formatTimestamp","timestamp","date","diffInMs","getTime","diffInMinutes","diffInHours","diffInDays","copyToClipboard","text","navigator","clipboard","writeText","parseStreamChunk","chunk","startsWith","slice","parsed","JSON","parse","content","citations","delta","choices","jsonError","parseError","cleanedMessage","replace","title","split","join","CONSTANTS","MAX_FILE_SIZE","ACCEPTED_FILE_TYPES","MAX_MESSAGE_LENGTH","API_TIMEOUT","STREAM_TIMEOUT","RETRY_ATTEMPTS","RETRY_DELAY","lerp","start","end","factor","clamp","value","min","max","distance2D","x1","y1","x2","y2","dx","dy","sqrt","hslToRgb","h","s","l","hue2rgb","p","q","t","round","Logger","_defineProperty","isClient","getInstance","instance","formatMessage","entry","level","category","stack","formatted","toUpperCase","stringify","writeToFile","toISOString","code","logs","push","warn","getLogs","clearLogs","apiRequest","endpoint","method","apiResponse","apiError","authCheck","authError","navigation","route","storeAction","store","action","DefaultTheme","BaseTheme","super","sphereRadius","gemini","idle","r","g","b","gradient","userSpeaking","processing","aiSpeaking","hover","instagram","ocean","sunset","aurora","particlePool","ObjectPool","x","y","z","velX","velY","velZ","age","dead","right","projX","projY","alpha","attack","hold","decay","initValue","holdValue","lastValue","stuckTime","accelX","accelY","accelZ","particle","next","prev","maxParticles","setColor","getColorPalette","onInit","getMaxParticles","onDraw","context","width","height","centerX","centerY","deltaTime","updateColors","updateParticles","renderParticles","onStateChange","newState","palette","VoiceState","USER_SPEAKING","framesPerRotation","colorTransitionSpeed","numToAddEachFrame","particleAlpha","particleRad","gravity","PROCESSING","AI_SPEAKING","IDLE","getThemeSpecificMetrics","particleCount","currentParticleCount","colorScheme","currentColorScheme","setColorScheme","scheme","colorSchemes","targetR","targetG","targetB","currentR","currentG","currentB","wait","dynamicNumParticles","mouseInfluence","particlesToCreate","createParticle","dynamicTurnSpeed","PI","turnAngle","theta","phi","acos","mouseDistortion","mouseBias","normalizedMouseX","normalizedMouseY","x0","sin","cos","y0","z0","velocityMultiplier","addParticle","sphereCenterY","sphereCenterZ","alphaMultiplier","vx0","vy0","vz0","newParticle","acquire","particleList","first","sinAngle","cosAngle","zMax","focalLength","nextParticle","randAccelX","randAccelY","randAccelZ","rotX","rotZ","m","radiusScale","updateParticleAlpha","recycleParticle","renderParticle","scale","finalAlpha","zeroAlphaDepth","particleSize","fillStyle","beginPath","arc","fill","shouldEnableGlow","release","onDispose","clear","useAgentStore","agents","currentAgent","paginationMeta","fetchAgents","getAgents","hasMore","nestedData","paginatedResponse","totalCount","fetchSettingsForAgents","agentsWithoutSettings","agent","settings","settingsPromises","settingsResponse","getAgentSettings","validResults","Promise","all","result","a","resolve","setTimeout","catch","loadMoreAgents","nextPage","newAgents","responseTotal","responsePage","findAgent","test","parseInt","getAgent","project_name","createAgent","newAgent","selectAgent","conversationStore","getState","messageStore","useMessageStore","clearMessages","agentWithSettings","setAgents","current","updateAgent","updatedAgent","updateSettings","formData","FormData","entries","forEach","key","append","String","updatedSettings","updateAgentSettings","deleteAgent","filteredAgents","replicateAgent","getAgentStats","PerformanceMonitor","targetFPS","lastTime","performance","update","currentTime","frameTime","frameCount","fps","fpsHistory","frameTimeHistory","maxHistorySize","shift","avgFPS","reduce","sum","currentFPS","performanceRatio","criticalThreshold","callbacks","onPerformanceCritical","warningThreshold","onPerformanceWarning","onFPSUpdate","setCallbacks","getCurrentMetrics","reset","DeviceCapabilityDetector","detectCapabilities","capabilities","isMobile","detectMobile","supportsWebGL","detectWebGL","hardwareConcurrency","memoryGB","memory","jsHeapSizeLimit","performanceLevel","benchmarkPerformance","isLowPowerDevice","detectLowPowerDevice","userAgent","canvas","document","createElement","getContext","cores","startTime","operations","benchmark","requestAnimationFrame","getCapabilities","createFn","resetFn","initialSize","maxSize","Set","available","obj","pop","inUse","size","oldest","values","add","has","delete","getStats","StreamHandler","config","timeout","retryAttempts","retryDelay","processStream","stream","abortController","AbortController","currentMessage","isComplete","reader","getReader","decoder","TextDecoder","buffer","timeoutId","cancel","onError","done","read","onComplete","decode","lines","line","processLine","clearTimeout","releaseLock","onChunk","citation","onCitation","abort","getCurrentMessage","isStreaming","globalStreamManager","maxConcurrentStreams","Map","startStream","streamId","streams","cancelStream","handler","cancelAllStreams","getActiveStreams","from","getStreamStatus","exists","getActiveStreamCount","THEME_COOKIE_NAME","getThemeFromCookie","themeCookie","cookie","applyThemeToDocument","theme","documentElement","classList","remove","setTheme","setThemeCookie","useConfigStore","apiKey","baseURL","setApiKey","setBaseURL","url","setThemeUtil","initializeTheme","useUIStore","sidebarOpen","settingsOpen","fontSize","setSidebarOpen","open","setSettingsOpen","className","setFontSize","formatDate","getDefaultDateRange","endDate","startDate","useAnalyticsStore","analytics","dateRange","fetchAnalytics","trafficReport","queriesReport","conversationsReport","analysisReport","getTrafficReport","getQueriesReport","getConversationsReport","getAnalysisReport","conversationsTotal","queriesTotal","avgQueriesPerConv","average_queries_per_conversation","Number","analyticsData","active","trend","item","created_at_interval","queries_number","queries","successful","query_status","failed","avgResponseTime","topQueries","traffic","uniqueUsers","sources","acc","source","request_source_number","pageViews","avgSessionDuration","bounceRate","users","statistics","totalMessages","avgMessagesPerConversation","satisfactionRate","responseAccuracy","errorMessage","localStorage","toast","setDateRange","exportAnalytics","format","jsonData","blob","Blob","URL","createObjectURL","href","download","body","appendChild","click","removeChild","revokeObjectURL","success","usePageStore","pages","paginationInfo","queryParams","limit","crawl_status","index_status","fetchPages","isClientInitialized","getPages","deletePage","pageId","reindexPage","setQueryParams","useSourceStore","currentSource","syncStatus","syncing","fetchSources","getSources","allSources","sitemaps","apiSource","sitemap_path","metadata","created_at","uploads","fetchSource","sourceId","uploadSources","files","uploadPromises","file","reject","updateSource","updates","deleteSource","bulkDelete","sourceIds","syncSources","progress","setFilter","selectSource","useProfileStore","profile","fetchProfile","getUserProfile","updateProfile","profilePhoto","updateUserProfile","errors","profile_photo","flat","activeRequests","useProjectSettingsStore","settingsLoading","settingsError","plugins","pluginsLoading","pluginsError","stats","statsLoading","statsError","fetchSettings","requestKey","settingsUpdate","defaultValues","ending_message","no_answer_message","try_asking_questions_msg","view_more_msg","view_less_msg","citations_answer_source_label_msg","citations_sources_label_msg","hang_in_there_msg","chatbot_siesta_msg","question","File","stringValue","fetchPlugins","getProjectPlugins","pluginsData","updatePlugin","pluginId","enabled","updateProjectPlugin","plugin","fetchStats","statsData","useLicenseStore","licenses","fetchLicenses","getLicenses","dataType","errorStatus","errorCode","responseText","createLicense","dataStructure","licenseKey","newLicense","license","licenseName","updateLicense","licenseId","deleteLicense","clearError","initializeStores","cleanupStores","LODManager","initialLOD","particleReduction","effectsDisabled","glowDisabled","simplifiedRendering","skipFrames","currentLOD","lodProfiles","updateLOD","metrics","lastPerformanceCheck","performanceHistory","adjustLODBasedOnFPS","getCurrentLOD","shouldSkipFrame","FrustumCuller","margin","updateBounds","bounds","left","top","bottom","near","far","isVisible","cullParticles","particles","getCullingStats","visible","culled","cullingRatio","BatchRenderer","addToBatch","color","glowEnabled","effectsEnabled","batchKey","batches","batch","maxBatchSize","renderBatches","lodSettings","save","shouldRenderEffects","shouldRenderGlow","renderSimplifiedBatch","renderFullBatch","restore","globalAlpha","moveTo","renderEffects","renderGlow","glowGradient","createRadialGradient","addColorStop","clearBatches","getBatchStats","batchCount","totalParticles","largestBatch","avgBatchSize","MemoryOptimizer","checkMemoryPressure","pressure","shouldCleanup","memInfo","usedJSHeapSize","memoryPressureThreshold","lastGCTime","gcInterval","getOptimizationSuggestions","reduceParticles","clearCaches","disableEffects","simplifyRendering","AnimationController","setTargetFPS","setupVisibilityHandling","actualInterval","shouldRenderFrame","lastFrameTime","getFrameTiming","interval","shouldThrottle","addEventListener","hidden","ThemePerformanceManager","canvasWidth","canvasHeight","lodManager","culler","batchRenderer","memoryOptimizer","animationController","shouldRender","memoryPressure","optimizationActive","getManagers","lod","animation","getPerformanceReport","culling","batching","performanceMonitor","performanceSettings","enableEffects","enableGlow","qualityLevel","initializePerformanceCallbacks","init","updateDimensions","initializePerformanceManager","setupPerformanceSettings","performanceManager","draw","displayWidth","displayHeight","projCenterX","projCenterY","perfUpdate","currentLODSettings","updateTiming","updateStateTransition","updateMouseInfluence","clearCanvas","shouldShowPerformanceOverlay","drawPerformanceOverlay","onUserSpeaking","setTargetState","onProcessing","onAiSpeaking","onReset","setMousePosition","mouseX","mouseY","targetMouseInfluence","isHovering","onMouseMove","setHovering","hovering","onHoverChange","dispose","getPerformanceMetrics","normalizedX","normalizedY","clearRect","detector","getOptimalParticleCount","quality","light","low","medium","high","heavy","performanceProfile","adjustPerformanceSettings","targetState","stateTransition","currentState","stateTransitionSpeed","deltaTimeAccumulator","animationTime","process","fillRect","font","fillText","getStateColor","idleColor","activeColor","getMouseInfluencedValue","baseValue","influencedValue","shouldEnableEffects","baseMax","getCurrentLODLevel","shouldUseSimplifiedRendering","getPerformanceManagers","isParticleVisible","managers","webpackEmptyContext","req","useChatSettingsStore","getSettings","agentId","response_source","chatbot_model","custom_persona","agent_capability","clearSettings","newSettings","DEMO_STORAGE_KEYS","UsageTracker","NEXT_PUBLIC_ANALYTICS_ENDPOINT","startFlushTimer","track","event","fullEvent","eventType","eventName","deploymentMode","getDeploymentMode","demoType","getDemoType","clientVersion","NEXT_PUBLIC_APP_VERSION","referrer","eventQueue","batchSize","flush","trackApiCall","statusCode","trackSessionStart","trackSessionEnd","reason","trackLimitReached","limitType","trackError","sessionData","demoSession","flushTimer","clearInterval","setInterval","flushInterval","events","fetch","analyticsEndpoint","headers","unshift","forceFlush","usageTracker","DEMO_ERROR_MESSAGES","retryAfter","proxyClient","isDemoMode","globalApiUrl","__customgpt_api_url","setApiUrl","apiUrl","setDemoApiKey","demoApiKey","request","options","requestId","controller","abortControllers","isFormData","baseHeaders","session","signal","responseData","contentLength","contentType","updated","ok","isFreeTrialMode","errorInfo","getErrorMessage","isFreeTrialError","streamRequest","errorText","errorData","cancelRequest","cancelAllRequests","URLSearchParams","queryString","getMessages","sendMessage","sendMessageStream","getMessageById","messageId","updateMessageFeedback","feedback","getCitation","citationId","previewCitationFile","uploadFile","getPageMetadata","updatePageMetadata","getLicense","createSitemapSource","executive_js","data_refresh_frequency","create_new_pages","remove_unexist_pages","refresh_existing_pages","uploadFileSource","updateSourceSettings","instantSyncSource","getCustomerIntelligence","getUserLimits","getDemoUsageStats","cleanupDemoSession","DirectCustomGPTClient","hasApiKey","json","clientInstance","initialized","initializeClient","getApiClient","resetApiClient","apiClient","MESSAGES_STORAGE_KEY","saveMessagesToStorage","stored","cache","fetchCitationDetails","citationIds","validCitationIds","validIds","isNaN","index","arr","indexOf","original","valid","validateCitationIds","description","hasContent","hasUrl","requested","fetched","streamingMessage","__customgpt_demo_mode","agentStore","agentName","messageLength","hasFiles","hasSessionId","isNew","message_count","userMessage","role","addMessage","assistantMessage","fileCount","messageContent","hasSourceIds","requestData","prompt","source_ids","contentPreview","updateStreamingMessage","then","citationDetails","updatedCurrent","streamError","finalMessage","messageData","openai_response","lastUserMessage","details","user_id","conversation_id","prompt_id","user_ip","user_agent","external_id","request_source","fallbackError","apiMessages","latestApiMessage","user_query","existingCitations","response_feedback","reaction","hasDetails","citationCount","enrichmentError","setupError","currentAgentFor403","is_chat_active","newMessages","conversationMessages","existingIndex","findIndex","promptId","promptIdMatch","match","updatedMessage","feedbackValue","getMessagesForConversation","cancelStreaming","loadMessages","availableConversations","messageTypes","formattedMessages","msg","baseTimestamp","formattedCount","sort","firstMessageTime","lastMessageTime","localSendingMessages","mergedMessages","localMsg","insertIndex","splice","cachedMessages","loadMessagesFromStorage","messageCount","setMessagesForConversation","regenerateLastResponse","lastAssistantMessage","lastAssistantIndex","userMessageId","assistantMessageId","userContent","updatedMessages","buttonVariants","cva","variants","variant","default","destructive","outline","secondary","ghost","link","premium","sm","lg","xl","icon","defaultVariants","Button","React","asChild","loadingText","children","disabled","onClick","props","ref","ripples","setRipples","handleClick","rect","currentTarget","getBoundingClientRect","rippleX","clientX","rippleY","clientY","rippleId","ripple","_jsxs","_jsx","style","transform","xmlns","viewBox","cx","cy","stroke","strokeWidth","d","displayName","sizeVariants","xs","container","md","shapeVariants","circle","rounded","square","Avatar","src","alt","shape","fallback","isSelected","imageError","setImageError","avatarUrl","chatbot_avatar","altText","sizeClasses","shapeClass","backgroundClass","handleImageError","renderFallbackIcon","iconClass","User","Bot","AgentAvatar","UserAvatar","MessageDetails","isExpanded","setIsExpanded","useState","handleCopyValue","Info","ChevronUp","ChevronDown","AnimatePresence","motion","div","initial","opacity","animate","exit","transition","duration","detailsText","Copy","DetailRow","label","onCopy","toLocaleString","truncate","CodeBlock","language","copied","setCopied","SyntaxHighlighter","oneDark","customStyle","borderRadius","StreamingCursor","MessageContent","cleanedContent","ReactMarkdown","remarkPlugins","remarkGfm","components","exec","target","rel","ExternalLink","MessageActions","onFeedback","isLastAssistant","setFeedback","handleFeedback","ThumbsUp","ThumbsDown","RotateCw","Message","isLast","onCitationClick","onPreviewClick","isUser","DemoModeContext","createContext","isRuntimeDemoMode","isInitialized","useDemoModeContext","useContext","Spinner","Loader2","Skeleton","LoadingOverlay","blur","MessageSkeleton","isAssistant","_","ConversationSkeleton","TooltipProvider","TooltipPrimitive","Tooltip","TooltipTrigger","TooltipContent","sideOffset","SpeechToTextButton","onTranscription","onTranscriptionStart","onTranscriptionEnd","isRecording","setIsRecording","isProcessing","setIsProcessing","recordingDuration","setRecordingDuration","mediaRecorderRef","useRef","audioChunksRef","recordingTimeoutRef","durationIntervalRef","stopRecording","useCallback","stop","startRecording","mediaDevices","getUserMedia","audio","mimeType","MediaRecorder","isTypeSupported","mediaRecorder","ondataavailable","onstop","audioBlob","getTracks","processAudio","elapsed","FileReader","readAsDataURL","onloadend","base64Data","__demoOpenAIKey","onerror","isActive","formatDuration","seconds","padStart","MicOff","Mic","AnimatedVoiceIcon","barHeights","bars","gap","animationDelay","background","DropdownMenu","DropdownMenuPrimitive","DropdownMenuTrigger","inset","ChevronRight","DropdownMenuContent","DropdownMenuItem","checked","Check","Circle","DropdownMenuLabel","DropdownMenuSeparator","FileChip","onRemove","fileIcon","_Fragment","AlertCircle","X","FileUploadButton","onUpload","fileInputRef","multiple","accept","onChange","Paperclip","RESPONSE_SOURCES","MessageSquare","Brain","Settings","CHATBOT_MODELS","Sparkles","Zap","COMMON_PERSONAS","AGENT_CAPABILITIES","enterprise","ChatInput","onSend","placeholder","maxLength","onVoiceClick","input","setInput","setFiles","isTranscribing","setIsTranscribing","isLoadingSettings","setIsLoadingSettings","showSettings","setShowSettings","textareaRef","updateLocalSettings","loadAgentSettings","loadedSettings","useEffect","updateSetting","validModels","adjustTextareaHeight","textarea","scrollHeight","maxHeight","handleSubmit","preventDefault","fileObjects","f","focus","handleFileUpload","newFiles","uploadFiles","simulateUpload","getRootProps","getInputProps","isDragActive","useDropzone","onDrop","noClick","noKeyboard","canSend","handleTranscription","prevInput","newInput","handleTranscriptionStart","handleTranscriptionEnd","Upload","removeFile","fileId","onSubmit","onKeyDown","shiftKey","rows","overflowY","Send","SlidersHorizontal","align","Icon","model","persona","capability","TypingIndicator","iconSizeClasses","display","parent","parentElement","innerHTML","AgentItem","onSelect","onSettingsClick","stopPropagation","AgentSelector","isOpen","setIsOpen","isSelectingAgent","setIsSelectingAgent","loadingSettings","setLoadingSettings","dropdownRef","fetchAgentSettings","agentsNeedingSettings","agentsToLoad","newSet","results","updatedAgents","handleClickOutside","contains","removeEventListener","handleRefresh","handleSelectAgent","RefreshCw","willOpen","location","BarChart3","useMediaQuery","matches","setMatches","media","matchMedia","listener","useBreakpoint","isTablet","isDesktop","isLargeScreen","isTouchDevice","isMobileOrTablet","isTabletOrDesktop","WidgetDebugger","debugEnabled","logEntry","logHistory","inspectLocalStorage","allKeys","widgetKeys","messageKeys","conversationKeys","contents","allKeysCount","widgetKeysCount","getDebugInfo","widgetInstance","currentConversationId","widgetStores","__customgpt_widget_stores","conversationCount","messagesMapSize","messagesMapKeys","hasMessageStore","hasConversationStore","hasAgentStore","debugConversation","traceMessageFlow","exportLogs","setDebugEnabled","__customgpt_debug","instances","__customgpt_widget_instances","instanceKeys","widgetDebugger","__customgpt_debug_trace","__customgpt_debug_storage","__customgpt_debug_clear","confirm","removeItem","createMessageStore","storageKey","cacheKey","actualKeys","messageIds","storageKeys","conversationIdType","currentMapKeys","demoResponse","currentMapSize","sessionStorageKey","sessionStored","hasSessionStored","sessionStoredLength","fromKey","hasCache","cacheSize","foundMessages","cacheKeys","cacheKeyTypes","k","checkedKeys","allLocalStorageKeys","hasMessages","newMap","newMapSize","newMapKeys","mapNowHasConversation","messageRole","existingMessageCount","mapHasConversation","newMessageCount","convId","messageIndex","createConversationStore","CONVERSATIONS_STORAGE_KEY","ACTIVITY_STORAGE_KEY","saveConversationsToStorage","loadConversationsFromStorage","loadActivityFromStorage","lastConversationActivity","loadConversations","widgetConvKey","widgetConvIds","widgetConversations","totalFromAPI","widgetSpecific","cached","cachedConversations","sessionConversations","totalCached","sessionSpecific","sessionIdForConv","deleted_at","existingConvIds","widgetSessionId","activity","saveActivityToStorage","createAgentStore","AGENTS_STORAGE_KEY","SELECTED_AGENT_KEY","saveAgentsToStorage","saveSelectedAgentToStorage","loadAgents","widget","__customgpt_widget_instance","hasWidget","configuredAgentId","fallbackAgent","is_shared","team_id","hasAvatar","hasSettings","demoAgent","selectedAgentId","loadSelectedAgentFromStorage","selectedAgent","demoAgents","widgetKey","messages_sent","users_interacted","last_message_at","WidgetStoreContext","WidgetStoreProvider","storesRef","Provider","stores","useWidgetStores","widgetToastQueues","WidgetToaster","Toaster","position","closeButton","toastOptions","zIndex","marginTop","richColors","getWidgetToast","globalToast","warning","dismiss","WidgetContext","WidgetProvider","useMemo","useWidgetSafe","CitationDetailsModal","onClose","setLoading","setError","citationData","setCitationData","useWidgetAgentStore","globalAgent","effectiveProjectId","hasImage","image","err","Loader","Globe","ImageIcon","CitationFilePreview","fileName","fileContent","setFileContent","setContentType","fetchFilePreview","content_type","FileText","handleDownload","Download","ConversationManager","maxConversations","onConversationChange","onCreateConversation","refreshKey","setConversations","editingId","setEditingId","editTitle","setEditTitle","handleEditSave","MessageCircle","strokeLinecap","strokeLinejoin","handleCreateConversation","Plus","autoFocus","handleSelectConversation","createdAt","handleEditStart","Edit2","handleDelete","Trash2","MessageErrorDisplay","propStatusCode","onRetry","parsedStatusCode","statusMatch","finalStatusCode","errorDetails","getErrorDetails","iconClassName","textClassName","UserX","showSupport","Search","CreditCard","supportUrl","ServerCrash","showRetry","XCircle","useIsInWidgetContext","isInWidget","globalStore","useGlobalMessageStore","widgetStore","useStore","useGlobalConversationStore","useGlobalAgentStore","ThemeManager","easing","crossfade","registerBuiltInThemes","initialize","currentTheme","registerTheme","registration","registeredThemes","unregisterTheme","themeId","getAvailableThemes","reg","getThemeMetadata","switchTheme","transitionOptions","isTransitioning","onThemeError","newTheme","performThemeTransition","getCurrentTheme","getCurrentThemeId","drawTransition","transitionTheme","previewColors","previewDescription","StarfieldTheme","JarvisTheme","LegoTheme","StarWarsTheme","OceanWaveTheme","NFTTheme","NothingPhoneTheme","MinecraftTheme","FuturisticTheme","VintageModernTheme","AuroraTheme","oldTheme","oldThemeId","transitionProgress","onTransitionStart","applyEasing","completeTransition","onThemeChange","onTransitionComplete","tempCanvas1","tempCanvas2","tempCtx1","tempCtx2","drawImage","Canvas","forwardRef","internalRef","canvasRef","themeManagerRef","isInitializedRef","themeManager","resizeCanvas","innerWidth","innerHeight","debouncedResize","func","delay","args","debounce","handleMouseMove","lastCall","timeSinceLastCall","throttle","handleMouseEnter","handleMouseLeave","animationFrameId","frameInterval","fpsTime","render","currentWidth","currentHeight","currentProjCenterX","currentProjCenterY","cancelAnimationFrame","getThemeManager","useVoiceSettingsStore","selectedVoice","selectedPersona","isVoiceModalOpen","setVoice","voice","setPersona","setVoiceModalOpen","VoiceSettings","useRouter","previewVoice","setPreviewVoice","previewPersona","setPreviewPersona","previewModel","setPreviewModel","desc","StreamingTTSManager","initAudioContext","audioContext","AudioContext","webkitAudioContext","resume","addTextChunk","audioBuffer","textToSpeech","audioQueue","isPlaying","playNextChunk","addAudioBuffer","addAudioBufferWithId","chunkId","pendingChunks","nextExpectedChunkId","response_format","arrayBuffer","decodeAudioData","onPlaybackComplete","createBufferSource","connect","destination","onended","stopPlayback","resetChunkCounter","isCurrentlyPlaying","getQueueLength","onPlaybackCompleted","callback","onStreamingError","destroy","close","speechManager","debug","stopSourceIfNeeded","audioLength","audioDuration","sourceIsStarted","streamingTTS","validate","sendData","createAudioBlob","wavBuffer","utils","encodeWAV","samples","sendStreamingData","voiceSettings","conversationLength","conversationThusFar","audioSize","lastMessages","preview","base64Encode","__demoCustomGPTKey","processStreamingResponse","handleError","fullResponse","transcript","currentStreamingActive","onStreamingTextChunk","audioUrl","audioId","queueAudioChunk","queueAudioChunkById","responseLength","onTranscriptReceived","onResponseReceived","onStreamingComplete","audioDataUrl","numericChunkId","sampleRate","numberOfChannels","clonedBlob","minDuration","hasCallbacks","setProjectId","setSessionId","setVoiceSettings","setChatbotModel","chatbotModel","onDebug","str","TextEncoder","encode","btoa","fromCharCode","Uint8Array","base64Decode","base64","binaryStr","atob","char","charCodeAt","clearConversation","getConversationThusFar","setConversationHistory","cleanedMessages","originalCount","stopAudio","parseMarkdownForVoice","encrypt","decrypt","encrypted","isValidApiKey","trimmedKey","STORAGE_KEY","OPENAI_STORAGE_KEY","ENCRYPTION_KEY","SESSION_KEY","SESSION_TIMEOUT","useDemoStore","openAIApiKey","encryptionKey","isAuthenticated","sessionStartTime","sessionTimeout","encKey","array","crypto","getRandomValues","byte","generateKey","sessionInfo","setOpenAIApiKey","clearApiKey","validateSession","initializeFromStorage","restoreSession","encryptedOpenAI","openAIKey","VoiceModalContent","projectName","setTranscript","agentResponse","setAgentResponse","isManualRecording","setIsManualRecording","setMediaRecorder","apiKeyError","setApiKeyError","isAgentSpeaking","setIsAgentSpeaking","isSettingsOpen","setIsSettingsOpen","voiceState","setVoiceState","isStreamingText","setIsStreamingText","streamingResponse","setStreamingResponse","currentUserMessageId","setCurrentUserMessageId","voiceConversation","setVoiceConversation","conversationSetupRef","checkOpenAIKeyAvailability","vad","useMicVAD","preSpeechPadFrames","positiveSpeechThreshold","negativeSpeechThreshold","minSpeechFrames","startOnLoad","workletURL","modelURL","onSpeechStart","onSpeechEnd","onVADMisfire","onMisfire","setupConversation","placeholderUserMessage","targetConversation","errorMsg","currentTitle","voiceTitle","cleanTranscript","words","updatedUserMessage","textChunk","newText","cleanResponse","onStreamingAudioReady","listening","pause","errored","handleToggleListening","recoveryError","permissionError","vadError","handleManualRecording","echoCancellation","noiseSuppression","autoGainControl","recorder","chunks","decodedAudio","channelData","getChannelData","audioArray","resampleRatio","newLength","Float32Array","srcIndex","srcIndexFloor","srcIndexCeil","fraction","hasAutoStarted","setHasAutoStarted","handleStopSpeech","jsx","global","pointerEvents","RotateLoader","AlertTriangle","flexDirection","animationDirection","animationDuration","StopCircle","VoiceModal","DEFAULT_EXAMPLE_PROMPTS","ExamplePromptCard","WelcomeMessage","onPromptClick","exampleQuestions","setExampleQuestions","example_questions","questionCount","fetchExampleQuestions","idx","MessageArea","scrollRef","isLoadingMessages","setIsLoadingMessages","prevConversationId","setPrevConversationId","selectedCitationId","setSelectedCitationId","citationModalOpen","setCitationModalOpen","previewCitationId","setPreviewCitationId","previewModalOpen","setPreviewModalOpen","setIsFreeTrialMode","freeTrialFlag","scrollBehavior","scrollTo","behavior","handleCitationClick","citationIndex","citationTitle","handlePreviewClick","filteredMessages","handleMessageFeedback","ChatHeader","onAgentSettings","enableConversationManagement","conversationRefreshKey","ChatContainer","threadId","onMessage","setCurrentConversationId","setIsVoiceModalOpen","voiceError","setVoiceError","agentCount","hasCurrentAgent","currentAgentName","initializeAgents","switchConversation","newConv","configuration","isAuthError","handleVoiceClick","Select","SelectPrimitive","SelectValue","SelectTrigger","SelectScrollUpButton","SelectScrollDownButton","SelectContent","SelectItem","SimpleSelect","onValueChange","option","ConversationDetailsModal","formatFullTimestamp","weekday","year","month","day","hour","minute","second","timeZoneName","Hash","Calendar","Clock","created_by","DeleteConversationDialog","conversationName","onConfirm","onCancel","isDeleting","setIsDeleting","ConversationItem","onDelete","onRename","isEditing","setIsEditing","editName","setEditName","showMenu","setShowMenu","showDetails","setShowDetails","showDetailsModal","setShowDetailsModal","showDeleteDialog","setShowDeleteDialog","isLoading","setIsLoading","inputRef","menuRef","select","handleSaveEdit","onBlur","MoreHorizontal","Edit3","ConversationSidebar","isCollapsed","onToggle","onConversationSelect","isCreating","setIsCreating","showSortFilter","setShowSortFilter","isSearching","setIsSearching","storeSearchQuery","storeSearchMode","storeDateFilter","localSearchQuery","setLocalSearchQuery","debouncedSearch","handleSearchModeChange","filteredConversations","handleRenameConversation","newName","handleSearch","Filter","handleDateFilterChange","Link","handleDeleteConversation","ChatLayout","showSidebar","sidebarCollapsed","setSidebarCollapsed","mobileSidebarOpen","setMobileSidebarOpen","storeCurrentConversation","conversationToLoad","handleToggleSidebar","CustomGPTWidget","enableCitations","enableFeedback","isolateConversations","modePrefix","containerId","uniqueId","generateSessionId","instanceKey","require","useProxy","proxyUrl","createContainer","currentConv","fullConversation","setState","__customgpt_active_widget_session","getElementById","setupFloatingStyles","assign","boxShadow","overflow","backgroundColor","createRoot","WidgetApp","currentConvId","handleClose","currentConversations","idType","found","searchedId","conversationDetails","hasWidgetStores","hasSessionStore","availableSessions","storeHasLoadMessages","availableStores","storeConversations","widgetConversation","saveConversations","updateConversationTitle","newTitle","DOMException","cleanupOldConversations","recent","onOpen","toggle","unmount","parentNode","updateConfig","newConfig","refresh","isOpened","CustomGPTWidgetAPI","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","n","getter","__esModule","getPrototypeOf","ns","def","getOwnPropertyNames","definition","o","defineProperty","enumerable","promises","u","miniCssF","globalThis","Function","prop","prototype","hasOwnProperty","script","needAttach","scripts","getElementsByTagName","getAttribute","charset","nc","setAttribute","onScriptComplete","onload","doneFns","bind","head","Symbol","toStringTag","installedChunks","installedChunkData","promise","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}