{"version":3,"file":"iframe-app.js","mappings":"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","sources":["webpack://customgpt-ui/webpack/runtime/chunk loaded","webpack://customgpt-ui/webpack/runtime/create fake namespace object","webpack://customgpt-ui/./node_modules/.pnpm/onnxruntime-web@1.22.0/node_modules/onnxruntime-web/dist/ sync","webpack://customgpt-ui/./src/store/config.ts","webpack://customgpt-ui/./src/lib/utils.ts","webpack://customgpt-ui/./src/lib/logger.ts","webpack://customgpt-ui/./src/lib/api/proxy-client.ts","webpack://customgpt-ui/./src/lib/api/client.ts","webpack://customgpt-ui/./src/store/conversations.ts","webpack://customgpt-ui/./src/lib/streaming/handler.ts","webpack://customgpt-ui/./src/store/messages.ts","webpack://customgpt-ui/./src/store/agents.ts","webpack://customgpt-ui/./src/store/analytics.ts","webpack://customgpt-ui/./src/store/ui.ts","webpack://customgpt-ui/./src/store/project-settings.ts","webpack://customgpt-ui/./src/store/pages.ts","webpack://customgpt-ui/./src/store/sources.ts","webpack://customgpt-ui/./src/store/profile.ts","webpack://customgpt-ui/./src/store/licenses.ts","webpack://customgpt-ui/./src/components/ui/button.tsx","webpack://customgpt-ui/./src/components/ui/avatar.tsx","webpack://customgpt-ui/./src/components/chat/CitationList.tsx","webpack://customgpt-ui/./src/components/chat/MessageDetails.tsx","webpack://customgpt-ui/./src/components/chat/Message.tsx","webpack://customgpt-ui/./src/components/ui/loading.tsx","webpack://customgpt-ui/./src/components/ui/tooltip.tsx","webpack://customgpt-ui/./src/components/voice/VoiceButton.tsx","webpack://customgpt-ui/./src/components/chat/ChatInput.tsx","webpack://customgpt-ui/./src/components/chat/TypingIndicator.tsx","webpack://customgpt-ui/./src/components/chat/AgentSelector.tsx","webpack://customgpt-ui/./src/components/chat/CitationDetailsModal.tsx","webpack://customgpt-ui/./src/components/chat/CitationFilePreview.tsx","webpack://customgpt-ui/./src/components/chat/ConversationManager.tsx","webpack://customgpt-ui/./src/components/chat/MessageErrorDisplay.tsx","webpack://customgpt-ui/./src/widget/WidgetContext.tsx","webpack://customgpt-ui/./src/widget/WidgetStoreContext.tsx","webpack://customgpt-ui/./src/hooks/useWidgetStore.ts","webpack://customgpt-ui/./src/components/voice/Canvas.tsx","webpack://customgpt-ui/./src/lib/voice/speech-manager.ts","webpack://customgpt-ui/./src/lib/voice/particle-manager.ts","webpack://customgpt-ui/./src/components/voice/VoiceModal.tsx","webpack://customgpt-ui/./src/components/chat/ChatContainer.tsx","webpack://customgpt-ui/./src/components/chat/ConversationDetailsModal.tsx","webpack://customgpt-ui/./src/components/chat/DeleteConversationDialog.tsx","webpack://customgpt-ui/./src/components/chat/ConversationSidebar.tsx","webpack://customgpt-ui/./src/components/chat/ChatLayout.tsx","webpack://customgpt-ui/./src/widget/iframe-app.tsx","webpack://customgpt-ui/webpack/bootstrap","webpack://customgpt-ui/webpack/runtime/compat get default export","webpack://customgpt-ui/webpack/runtime/define property getters","webpack://customgpt-ui/webpack/runtime/global","webpack://customgpt-ui/webpack/runtime/hasOwnProperty shorthand","webpack://customgpt-ui/webpack/runtime/make namespace object","webpack://customgpt-ui/webpack/runtime/jsonp chunk loading","webpack://customgpt-ui/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; (typeof current == 'object' || typeof current == 'function') && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 396;\nmodule.exports = webpackEmptyContext;","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConfigStore } from '@/types';\n\n/**\n * Configuration Store\n * \n * Updated to remove API key storage for security.\n * API key is now stored securely on the server.\n * Only theme and other non-sensitive settings are persisted.\n */\nexport const useConfigStore = create<ConfigStore>()(\n  persist(\n    (set, get) => ({\n      apiKey: null, // Deprecated - kept for interface compatibility\n      baseURL: 'https://app.customgpt.ai/api/v1', // Not used anymore, server handles this\n      theme: 'light',\n\n      setApiKey: (key: string) => {\n        // No-op - API key is not stored client-side anymore\n        // This method is kept for backward compatibility\n        console.warn('API key storage has been disabled for security. Configure API key in server environment variables.');\n      },\n\n      setBaseURL: (url: string) => {\n        // No-op - base URL is configured on server\n        console.warn('Base URL configuration has been moved to server. Update CUSTOMGPT_API_BASE_URL in environment variables.');\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Update document class for theme\n        if (typeof window !== 'undefined') {\n          document.documentElement.className = theme;\n        }\n      },\n    }),\n    {\n      name: 'customgpt-config',\n      // Only persist non-sensitive data\n      partialize: (state) => ({\n        theme: state.theme,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Apply theme on rehydration\n        if (state?.theme && typeof window !== 'undefined') {\n          document.documentElement.className = state.theme;\n        }\n      },\n    }\n  )\n);","/**\n * Utility Functions Library\n * \n * Common utility functions used throughout the application.\n * These utilities handle:\n * - CSS class merging for Tailwind\n * - ID generation\n * - File operations\n * - Date/time formatting\n * - Clipboard operations\n * - HTML sanitization\n * - API helpers\n * \n * Features:\n * - Pure, reusable utility functions with full TypeScript support\n * - Comprehensive JSDoc documentation with usage examples\n * - Robust edge case handling and error recovery\n * - Optimized performance with configurable options\n * - Production-ready implementations for common operations\n */\n\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\nimport DOMPurify from 'dompurify';\n\n/**\n * Utility function for combining Tailwind CSS classes\n * \n * This function combines clsx and tailwind-merge to:\n * 1. Support conditional classes (clsx)\n * 2. Properly merge Tailwind classes (tailwind-merge)\n * \n * @example\n * cn('px-2 py-1', 'px-4') // Returns: 'py-1 px-4'\n * cn('text-red-500', condition && 'text-blue-500')\n * cn(['text-sm', 'font-bold'], { 'opacity-50': isDisabled })\n * \n * @param inputs - Class strings, conditionals, arrays, or objects\n * @returns Merged class string\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Generate a unique ID\n * \n * Creates a unique identifier using random string and timestamp.\n * Not cryptographically secure - use for UI elements only.\n * \n * @example\n * generateId() // Returns: 'a1b2c3d41234567890'\n * \n * @returns Unique string ID\n */\nexport function generateId(): string {\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\n}\n\n/**\n * Format file size in bytes to human readable format\n * \n * Converts byte values to appropriate units (KB, MB, GB).\n * Always shows 2 decimal places except for bytes.\n * \n * @example\n * formatFileSize(0) // Returns: '0 Bytes'\n * formatFileSize(1024) // Returns: '1 KB'\n * formatFileSize(1536) // Returns: '1.5 KB'\n * formatFileSize(1048576) // Returns: '1 MB'\n * \n * @param bytes - File size in bytes\n * @returns Formatted string with appropriate unit\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * Get file icon based on file type\n * \n * Returns an emoji icon based on the MIME type or file extension.\n * Used in file upload UI components.\n * \n * @example\n * getFileIcon('application/pdf') // Returns: '📄'\n * getFileIcon('image/png') // Returns: '🖼️'\n * getFileIcon('text/plain') // Returns: '📝'\n * getFileIcon('unknown/type') // Returns: '📎' (default)\n * \n * @param fileType - MIME type or file extension\n * @returns Emoji icon representing the file type\n */\nexport function getFileIcon(fileType: string): string {\n  const type = fileType.toLowerCase();\n  \n  // Document types\n  if (type.includes('pdf')) return '📄';\n  if (type.includes('word') || type.includes('doc')) return '📄';\n  if (type.includes('text') || type.includes('txt')) return '📝';\n  \n  // Media types\n  if (type.includes('image')) return '🖼️';\n  if (type.includes('video')) return '🎥';\n  if (type.includes('audio')) return '🎵';\n  \n  // Data types\n  if (type.includes('excel') || type.includes('sheet')) return '📊';\n  if (type.includes('powerpoint') || type.includes('presentation')) return '📈';\n  if (type.includes('json')) return '📋';\n  if (type.includes('csv')) return '📊';\n  \n  // Archive types\n  if (type.includes('zip') || type.includes('rar')) return '🗜️';\n  \n  // Default icon\n  return '📎';\n}\n\n/**\n * Validate file type against allowed types\n * \n * Checks if a file type is in the allowed list.\n * Case-insensitive partial matching.\n * \n * @example\n * const allowed = ['image/', 'application/pdf'];\n * isFileTypeAllowed('image/png', allowed) // Returns: true\n * isFileTypeAllowed('IMAGE/JPEG', allowed) // Returns: true (case-insensitive)\n * isFileTypeAllowed('text/plain', allowed) // Returns: false\n * \n * @param fileType - MIME type to check\n * @param allowedTypes - List of allowed MIME types or patterns\n * @returns Whether the file type is allowed\n */\nexport function isFileTypeAllowed(fileType: string, allowedTypes: readonly string[]): boolean {\n  return allowedTypes.some(type => fileType.toLowerCase().includes(type.toLowerCase()));\n}\n\n/**\n * Format timestamp to human readable format\n * \n * Converts ISO timestamps to relative time strings.\n * Shows relative time for recent dates, absolute date for older.\n * \n * @example\n * // Assuming current time is 2024-01-01 12:00:00\n * formatTimestamp('2024-01-01T11:59:30Z') // Returns: 'Just now'\n * formatTimestamp('2024-01-01T11:30:00Z') // Returns: '30m ago'\n * formatTimestamp('2024-01-01T08:00:00Z') // Returns: '4h ago'\n * formatTimestamp('2023-12-25T12:00:00Z') // Returns: '7d ago'\n * formatTimestamp('2023-11-01T12:00:00Z') // Returns: '11/1/2023'\n * \n * @param timestamp - ISO date string\n * @returns Human-readable time difference or date\n */\nexport function formatTimestamp(timestamp: string): string {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diffInMs = now.getTime() - date.getTime();\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n  \n  // Recent times shown as relative\n  if (diffInMinutes < 1) return 'Just now';\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n  if (diffInHours < 24) return `${diffInHours}h ago`;\n  if (diffInDays < 7) return `${diffInDays}d ago`;\n  \n  // Older times shown as absolute date\n  return date.toLocaleDateString();\n}\n\n/**\n * Copy text to clipboard\n * \n * Uses the modern Clipboard API with fallback error handling.\n * Returns success/failure for UI feedback.\n * \n * @example\n * const success = await copyToClipboard('Hello, world!');\n * if (success) {\n *   toast.success('Copied to clipboard');\n * } else {\n *   toast.error('Failed to copy');\n * }\n * \n * @param text - Text to copy to clipboard\n * @returns Promise resolving to success boolean\n */\nexport async function copyToClipboard(text: string): Promise<boolean> {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch (error) {\n    // Copy failed, return false status\n    console.error('Failed to copy to clipboard:', error);\n    return false;\n  }\n}\n\n/**\n * Sanitize HTML content\n * \n * Removes dangerous HTML/JS to prevent XSS attacks.\n * Safe for rendering user-generated content.\n * Skips sanitization on server-side (SSR).\n * \n * @example\n * const dirty = '<script>alert(\"XSS\")</script><p>Hello</p>';\n * sanitizeHtml(dirty) // Returns: '<p>Hello</p>'\n * \n * const safe = '<p>Hello <strong>world</strong></p>';\n * sanitizeHtml(safe) // Returns: '<p>Hello <strong>world</strong></p>'\n * \n * @param html - Raw HTML string\n * @returns Sanitized HTML safe for rendering\n */\nexport function sanitizeHtml(html: string): string {\n  if (typeof window === 'undefined') {\n    return html; // Skip sanitization on server side (no DOM)\n  }\n  \n  return DOMPurify.sanitize(html, {\n    ALLOWED_TAGS: ['p', 'br', 'strong', 'em', 'code', 'pre', 'a', 'ul', 'ol', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n    ALLOWED_ATTR: ['href', 'target', 'rel', 'class'],\n  });\n}\n\n/**\n * Debounce function\n * \n * Delays function execution until after wait milliseconds have\n * elapsed since the last time it was invoked. Useful for search\n * inputs, window resize handlers, etc.\n * \n * @example\n * const debouncedSearch = debounce((query: string) => {\n *   console.log('Searching for:', query);\n * }, 300);\n * \n * // Rapid calls...\n * debouncedSearch('a');    // Won't execute\n * debouncedSearch('ab');   // Won't execute\n * debouncedSearch('abc');  // Will execute after 300ms\n * \n * @param func - Function to debounce\n * @param wait - Milliseconds to delay\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(null, args), wait);\n  };\n}\n\n/**\n * Throttle function\n * \n * Ensures function is called at most once per specified time period.\n * First call executes immediately, subsequent calls are ignored until\n * the time period expires.\n * \n * @example\n * const throttledScroll = throttle(() => {\n *   console.log('Scroll position:', window.scrollY);\n * }, 100);\n * \n * // During rapid scrolling:\n * // t=0ms: executes immediately\n * // t=50ms: ignored (still in throttle period)\n * // t=100ms: executes (throttle period expired)\n * \n * @param func - Function to throttle\n * @param limit - Minimum milliseconds between calls\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  \n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func.apply(null, args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n/**\n * Truncate text to specified length\n * \n * Cuts text at the specified length and adds ellipsis.\n * Trims whitespace from the cut point.\n * \n * @example\n * truncateText('Hello, world!', 5) // Returns: 'Hello...'\n * truncateText('Short', 10) // Returns: 'Short'\n * truncateText('Hello   ', 5) // Returns: 'Hello...' (trimmed)\n * \n * @param text - Text to truncate\n * @param maxLength - Maximum length before truncation\n * @returns Truncated text with ellipsis if needed\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength).trim() + '...';\n}\n\n/**\n * Validate CustomGPT API key format\n * \n * Checks if the provided string matches the CustomGPT API key format.\n * Format: {digits}|{alphanumeric_string}\n * - At least 3 digits before the pipe\n * - At least 20 alphanumeric characters after the pipe\n * \n * @example\n * isValidApiKey('123|abcdefghijklmnopqrst') // Returns: true\n * isValidApiKey('7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x') // Returns: true\n * isValidApiKey('12|short') // Returns: false (too few digits/chars)\n * isValidApiKey('no-pipe') // Returns: false (wrong format)\n * isValidApiKey('') // Returns: false (empty)\n * \n * @param apiKey - API key string to validate\n * @returns Whether the API key is valid\n */\nexport function isValidApiKey(apiKey: string): boolean {\n  if (!apiKey || typeof apiKey !== 'string') {\n    return false;\n  }\n  \n  // Trim whitespace\n  apiKey = apiKey.trim();\n  \n  // CustomGPT API key format: starts with digits followed by | then alphanumeric string\n  // Example: 7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x\n  // Must have at least 3 digits, pipe, and at least 20 characters after pipe\n  return /^\\d{3,}\\|[a-zA-Z0-9]{20,}$/.test(apiKey);\n}\n\n/**\n * Parse streaming response chunk\n * \n * Handles various SSE (Server-Sent Events) formats from the CustomGPT API.\n * Supports both standard SSE format and raw JSON lines.\n * \n * Formats handled:\n * - SSE events: \"event: progress\", \"event: finish\"\n * - SSE data: \"data: {json}\", \"data: [DONE]\"\n * - Raw JSON: {\"content\": \"...\", \"citations\": [...]}\n * - Plain text: \"data: plain text content\"\n * \n * @example\n * parseStreamChunk('data: {\"content\": \"Hello\"}') \n * // Returns: { type: 'content', content: 'Hello' }\n * \n * parseStreamChunk('data: [DONE]')\n * // Returns: { type: 'done' }\n * \n * parseStreamChunk('event: finish')\n * // Returns: { type: 'done' }\n * \n * @param chunk - Raw chunk from SSE stream\n * @returns Parsed chunk object or null if should be skipped\n */\nexport function parseStreamChunk(chunk: string): any | null {\n  try {\n    \n    // Skip event lines - CustomGPT sends \"event: progress\" etc.\n    if (chunk.startsWith('event: ')) {\n      const eventType = chunk.slice(7).trim();\n      \n      // Handle specific events if needed\n      if (eventType === 'finish') {\n        return { type: 'done' };\n      }\n      \n      // Skip other event types\n      return null;\n    }\n    \n    // Handle SSE format\n    if (chunk.startsWith('data: ')) {\n      const data = chunk.slice(6).trim();\n      \n      if (data === '[DONE]' || data === 'DONE') return { type: 'done' };\n      \n      // CustomGPT might send plain text data instead of JSON\n      // Try to parse as JSON first\n      try {\n        const parsed = JSON.parse(data);\n        \n        // Handle different response formats\n        if (typeof parsed === 'object') {\n          // If it already has a type, return as is\n          if (parsed.type) {\n            return parsed;\n          }\n          \n          // Handle CustomGPT format where content might be a direct property\n          if (parsed.content !== undefined) {\n            return { type: 'content', content: parsed.content, citations: parsed.citations };\n          }\n          \n          // Handle citation-only responses\n          if (parsed.citations && !parsed.content) {\n            return { type: 'citation', citations: parsed.citations };\n          }\n          \n          // Handle message field (some APIs use 'message' instead of 'content')\n          if (parsed.message !== undefined) {\n            return { type: 'content', content: parsed.message, citations: parsed.citations };\n          }\n          \n          // Handle delta format (some streaming APIs use delta.content)\n          if (parsed.delta && parsed.delta.content !== undefined) {\n            return { type: 'content', content: parsed.delta.content, citations: parsed.citations };\n          }\n          \n          // Handle choices format (OpenAI-style streaming)\n          if (parsed.choices && parsed.choices[0] && parsed.choices[0].delta) {\n            const delta = parsed.choices[0].delta;\n            if (delta.content !== undefined) {\n              return { type: 'content', content: delta.content, citations: parsed.citations };\n            }\n          }\n        }\n        \n        // Return the parsed data as is if we can't determine the format\n        return parsed;\n      } catch (jsonError) {\n        // If JSON parsing fails, treat it as plain text content\n        return { type: 'content', content: data };\n      }\n    }\n    \n    // Handle raw JSON lines (no \"data: \" prefix)\n    if (chunk.trim().startsWith('{')) {\n      try {\n        const parsed = JSON.parse(chunk.trim());\n        \n        if (parsed.content !== undefined || parsed.citations !== undefined) {\n          return { \n            type: parsed.content ? 'content' : 'citation', \n            content: parsed.content,\n            citations: parsed.citations \n          };\n        }\n        \n        // Handle message field\n        if (parsed.message !== undefined) {\n          return { type: 'content', content: parsed.message, citations: parsed.citations };\n        }\n        \n        return parsed;\n      } catch (parseError) {\n        console.warn('Failed to parse raw JSON chunk:', parseError);\n      }\n    }\n    \n    // Handle plain text responses (fallback)\n    if (chunk.trim() && !chunk.includes('data:') && !chunk.startsWith('{')) {\n      return { type: 'content', content: chunk.trim() };\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Failed to parse stream chunk:', chunk, error);\n    return null;\n  }\n}\n\n/**\n * Extract inline citations from text\n * \n * Finds all citation references in format [1], [2], etc.\n * Returns the original text and array of citation numbers.\n * \n * @example\n * extractInlineCitations('Hello [1] world [2]!')\n * // Returns: { text: 'Hello [1] world [2]!', citations: [1, 2] }\n * \n * extractInlineCitations('No citations here')\n * // Returns: { text: 'No citations here', citations: [] }\n * \n * @param text - Text potentially containing citations\n * @returns Object with text and citation numbers\n */\nexport function extractInlineCitations(text: string): { text: string; citations: number[] } {\n  const citationRegex = /\\[(\\d+)\\]/g;\n  const citations: number[] = [];\n  let match;\n  \n  while ((match = citationRegex.exec(text)) !== null) {\n    citations.push(parseInt(match[1]));\n  }\n  \n  return { text, citations };\n}\n\n/**\n * Create a delay promise\n * \n * Utility for adding delays in async functions.\n * Useful for retries, animations, or testing.\n * \n * @example\n * async function slowOperation() {\n *   console.log('Starting...');\n *   await delay(1000); // Wait 1 second\n *   console.log('Done!');\n * }\n * \n * @param ms - Milliseconds to delay\n * @returns Promise that resolves after delay\n */\nexport function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Retry a function with exponential backoff\n * \n * Retries a failing async function with increasing delays.\n * Delays: 1s, 2s, 4s, 8s, etc. (exponential)\n * \n * @example\n * // Retry API call up to 3 times\n * const data = await retryWithBackoff(\n *   () => fetch('/api/data').then(r => r.json()),\n *   3,    // max attempts\n *   1000  // base delay (1s)\n * );\n * \n * // Delays: attempt 1 = immediate, attempt 2 = 1s, attempt 3 = 2s\n * \n * @param fn - Async function to retry\n * @param maxAttempts - Maximum retry attempts (default: 3)\n * @param baseDelay - Base delay in ms (default: 1000)\n * @returns Result from successful function call\n * @throws Last error if all attempts fail\n */\nexport async function retryWithBackoff<T>(\n  fn: () => Promise<T>,\n  maxAttempts: number = 3,\n  baseDelay: number = 1000\n): Promise<T> {\n  let lastError: Error;\n  \n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n      \n      if (attempt === maxAttempts) {\n        throw lastError;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s, etc.\n      const delayTime = baseDelay * Math.pow(2, attempt - 1);\n      await delay(delayTime);\n    }\n  }\n  \n  throw lastError!;\n}\n\n/**\n * Check if device is mobile\n * \n * Based on viewport width (<768px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is mobile-sized\n */\nexport function isMobile(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth < 768;\n}\n\n/**\n * Check if device is tablet\n * \n * Based on viewport width (768px-1023px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is tablet-sized\n */\nexport function isTablet(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 768 && window.innerWidth < 1024;\n}\n\n/**\n * Check if device is desktop\n * \n * Based on viewport width (≥1024px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is desktop-sized\n */\nexport function isDesktop(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 1024;\n}\n\n/**\n * Get responsive container class\n * \n * Returns Tailwind classes for responsive container sizing.\n * - Mobile: Full width/height\n * - Tablet: Max 2xl width, centered\n * - Desktop: Max 4xl width, centered\n * \n * @returns Tailwind class string for container\n */\nexport function getResponsiveContainer(): string {\n  if (isMobile()) return 'w-full h-full';\n  if (isTablet()) return 'w-full max-w-2xl mx-auto';\n  return 'w-full max-w-4xl mx-auto';\n}\n\n/**\n * Format conversation name from first message\n * \n * Creates a conversation title from the first message.\n * Takes first 6 words, max 50 characters.\n * \n * @example\n * generateConversationName('Hello, can you help me with JavaScript?')\n * // Returns: 'Hello, can you help me with'\n * \n * generateConversationName('Short')\n * // Returns: 'Short'\n * \n * @param firstMessage - The first message in conversation\n * @returns Formatted conversation name\n */\nexport function generateConversationName(firstMessage: string): string {\n  const words = firstMessage.trim().split(/\\s+/);\n  const title = words.slice(0, 6).join(' ');\n  return title.length > 50 ? title.substring(0, 50).trim() + '...' : title;\n}\n\n/**\n * Validate URL format\n * \n * Checks if string is a valid URL using URL constructor.\n * \n * @example\n * isValidUrl('https://example.com') // Returns: true\n * isValidUrl('http://localhost:3000/path') // Returns: true\n * isValidUrl('not a url') // Returns: false\n * isValidUrl('') // Returns: false\n * \n * @param url - String to validate\n * @returns Whether string is a valid URL\n */\nexport function isValidUrl(url: string): boolean {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get file extension from filename\n * \n * Extracts the file extension in lowercase.\n * \n * @example\n * getFileExtension('document.pdf') // Returns: 'pdf'\n * getFileExtension('image.PNG') // Returns: 'png'\n * getFileExtension('no-extension') // Returns: ''\n * getFileExtension('multi.part.name.txt') // Returns: 'txt'\n * \n * @param filename - Filename to extract extension from\n * @returns Lowercase extension or empty string\n */\nexport function getFileExtension(filename: string): string {\n  return filename.split('.').pop()?.toLowerCase() || '';\n}\n\n/**\n * Check if file is an image\n * \n * Checks MIME type for image/ prefix.\n * \n * @example\n * isImageFile('image/png') // Returns: true\n * isImageFile('image/jpeg') // Returns: true\n * isImageFile('application/pdf') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is an image\n */\nexport function isImageFile(fileType: string): boolean {\n  return fileType.startsWith('image/');\n}\n\n/**\n * Check if file is a document\n * \n * Checks against common document MIME types including:\n * - PDF files\n * - Microsoft Word documents\n * - Plain text files\n * - CSV spreadsheets\n * - JSON/XML data files\n * \n * @example\n * isDocumentFile('application/pdf') // Returns: true\n * isDocumentFile('text/plain') // Returns: true\n * isDocumentFile('image/png') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is a supported document type\n */\nexport function isDocumentFile(fileType: string): boolean {\n  const documentTypes = [\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n  ];\n  return documentTypes.includes(fileType);\n}\n\n/**\n * Create download link for file\n * \n * Programmatically downloads content as a file.\n * Creates a blob URL and triggers download.\n * \n * @example\n * // Download text file\n * downloadFile('Hello, world!', 'greeting.txt');\n * \n * // Download JSON file\n * const data = { name: 'John', age: 30 };\n * downloadFile(\n *   JSON.stringify(data, null, 2),\n *   'data.json',\n *   'application/json'\n * );\n * \n * @param content - File content as string\n * @param filename - Name for downloaded file\n * @param mimeType - MIME type (default: 'text/plain')\n */\nexport function downloadFile(content: string, filename: string, mimeType: string = 'text/plain'): void {\n  const blob = new Blob([content], { type: mimeType });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n}\n\n/**\n * Escape HTML entities\n * \n * Prevents XSS by escaping HTML special characters.\n * Use when displaying user input as HTML.\n * \n * @example\n * escapeHtml('<script>alert(\"XSS\")</script>')\n * // Returns: '&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;'\n * \n * escapeHtml('Hello & \"world\"')\n * // Returns: 'Hello &amp; &quot;world&quot;'\n * \n * @param unsafe - Raw string that may contain HTML\n * @returns HTML-escaped string\n */\nexport function escapeHtml(unsafe: string): string {\n  return unsafe\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\n/**\n * Handle API errors and extract error message\n * \n * Normalizes various error formats into consistent structure.\n * Handles:\n * - API response errors (4xx, 5xx)\n * - Network/connection errors\n * - Client-side errors\n * \n * @example\n * try {\n *   await apiCall();\n * } catch (error) {\n *   const { message, code } = handleApiError(error);\n *   toast.error(message);\n *   if (code === 401) {\n *     // Handle unauthorized\n *   }\n * }\n * \n * @param error - Error object from API call\n * @returns Normalized error with message and optional code\n */\nexport function handleApiError(error: any): { message: string; code?: number } {\n  console.error('API Error:', error);\n  \n  if (error.response) {\n    // API responded with an error\n    const data = error.response.data;\n    // Handle nested error formats\n    if (data && data.data && data.data.message) {\n      return {\n        message: data.data.message,\n        code: data.data.code || error.response.status\n      };\n    }\n    // Handle direct message format\n    if (data && data.message) {\n      return {\n        message: data.message,\n        code: error.response.status\n      };\n    }\n    // Fallback to status code\n    return {\n      message: `API Error: ${error.response.status}`,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    // Request was made but no response received\n    return {\n      message: 'No response from server. Please check your connection.',\n      code: 0\n    };\n  } else {\n    // Something else happened (e.g., request setup error)\n    return {\n      message: error.message || 'An unexpected error occurred',\n      code: 0\n    };\n  }\n}\n\n/**\n * Constants for file uploads and API\n * \n * Central configuration for limits and constraints.\n * Modify these values to customize behavior:\n * \n * - MAX_FILE_SIZE: Maximum upload size per file\n * - ACCEPTED_FILE_TYPES: MIME types allowed for upload\n * - MAX_MESSAGE_LENGTH: Character limit for messages\n * - API_TIMEOUT: Request timeout for regular API calls\n * - STREAM_TIMEOUT: Timeout for streaming responses\n * - RETRY_ATTEMPTS: Number of retries on failure\n * - RETRY_DELAY: Base delay between retries\n * \n * @example\n * // Check file size\n * if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n *   throw new Error('File too large');\n * }\n * \n * // Configure retry\n * await retryWithBackoff(\n *   apiCall,\n *   CONSTANTS.RETRY_ATTEMPTS,\n *   CONSTANTS.RETRY_DELAY\n * );\n */\nexport const CONSTANTS = {\n  /** Maximum file size in bytes (10MB) */\n  MAX_FILE_SIZE: 10 * 1024 * 1024,\n  \n  /** Accepted MIME types for file uploads */\n  ACCEPTED_FILE_TYPES: [\n    // Documents\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n    // Images\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n  ],\n  \n  /** Maximum characters per message */\n  MAX_MESSAGE_LENGTH: 4000,\n  \n  /** API request timeout in milliseconds (30s) */\n  API_TIMEOUT: 30000,\n  \n  /** Streaming request timeout in milliseconds (60s) */\n  STREAM_TIMEOUT: 60000,\n  \n  /** Number of retry attempts for failed requests */\n  RETRY_ATTEMPTS: 3,\n  \n  /** Base delay between retries in milliseconds (1s) */\n  RETRY_DELAY: 1000,\n} as const;","export type LogLevel = 'info' | 'warn' | 'error';\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  category: string;\n  message: string;\n  data?: any;\n  error?: any;\n  stack?: string;\n}\n\nclass Logger {\n  private static instance: Logger;\n  private isClient: boolean;\n  private logs: LogEntry[] = [];\n\n  private constructor() {\n    this.isClient = typeof window !== 'undefined';\n  }\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  private formatMessage(entry: LogEntry): string {\n    const { timestamp, level, category, message, data, error, stack } = entry;\n    let formatted = `[${timestamp}] [${level.toUpperCase()}] [${category}] ${message}`;\n    \n    if (data) {\n      formatted += `\\nData: ${JSON.stringify(data, null, 2)}`;\n    }\n    \n    if (error) {\n      formatted += `\\nError: ${error.message || error}`;\n      if (stack) {\n        formatted += `\\nStack: ${stack}`;\n      }\n    }\n    \n    return formatted;\n  }\n\n  private writeToFile(entry: LogEntry) {\n    // File writing is handled by the API route\n    // This method is kept for compatibility\n  }\n\n  private log(level: LogLevel, category: string, message: string, data?: any, error?: any) {\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      category,\n      message,\n      data,\n      error: error ? { message: error.message, code: error.code, status: error.status } : undefined,\n      stack: error?.stack,\n    };\n\n    // Store in memory for client access\n    this.logs.push(entry);\n    if (this.logs.length > 1000) {\n      this.logs = this.logs.slice(-500); // Keep last 500 entries\n    }\n\n    // Console output with styling\n    const styles = {\n      info: 'color: #3B82F6; font-weight: normal;',\n      warn: 'color: #F59E0B; font-weight: bold;',\n      error: 'color: #EF4444; font-weight: bold;',\n    };\n\n    const prefix = `[${entry.timestamp.split('T')[1].split('.')[0]}] [${category}]`;\n    \n    if (this.isClient) {\n      console.log(`%c${prefix} ${message}`, styles[level]);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    } else {\n      const colorCodes = {\n        info: '\\x1b[36m',\n        warn: '\\x1b[33m',\n        error: '\\x1b[31m',\n      };\n      const reset = '\\x1b[0m';\n      console.log(`${colorCodes[level]}${prefix}${reset} ${message}`);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    }\n\n    // Server logging removed - all logs go to console only\n  }\n\n\n  info(category: string, message: string, data?: any) {\n    this.log('info', category, message, data);\n  }\n\n  warn(category: string, message: string, data?: any) {\n    this.log('warn', category, message, data);\n  }\n\n  error(category: string, message: string, error?: any, data?: any) {\n    this.log('error', category, message, data, error);\n  }\n\n  getLogs(): LogEntry[] {\n    return this.logs;\n  }\n\n  clearLogs() {\n    this.logs = [];\n  }\n\n  // API-specific logging helpers\n  apiRequest(endpoint: string, method: string, data?: any) {\n    this.info('API_REQUEST', `${method} ${endpoint}`, data);\n  }\n\n  apiResponse(endpoint: string, status: number, data?: any) {\n    const level = status >= 400 ? 'error' : 'info';\n    this.log(level, 'API_RESPONSE', `${endpoint} - Status: ${status}`, data);\n  }\n\n  apiError(endpoint: string, error: any) {\n    this.error('API_ERROR', `Failed request to ${endpoint}`, error);\n  }\n\n  // Auth-specific logging\n  authCheck(message: string, data?: any) {\n    this.info('AUTH', message, data);\n  }\n\n  authError(message: string, error?: any) {\n    this.error('AUTH_ERROR', message, error);\n  }\n\n  // Navigation logging\n  navigation(route: string, params?: any) {\n    this.info('NAVIGATION', `Navigating to ${route}`, params);\n  }\n\n  // Store operation logging\n  storeAction(store: string, action: string, data?: any) {\n    this.info('STORE', `${store}.${action}`, data);\n  }\n}\n\nexport const logger = Logger.getInstance();","/**\n * Proxy API Client\n * \n * This client communicates with our Next.js API routes which proxy\n * requests to CustomGPT. The API key is stored securely on the server.\n */\n\nimport type {\n  Agent,\n  AgentStats,\n  AgentSettings,\n  Conversation,\n  ChatMessage,\n  Citation,\n  APIResponse,\n  AgentsResponse,\n  ConversationsResponse,\n  MessagesResponse,\n  MessageResponse,\n  CitationResponse,\n  StreamChunk,\n  LimitsResponse,\n  UserProfile,\n} from '@/types';\nimport type { APIMessageResponse } from '@/types/message.types';\nimport type { \n  PagesListResponse, \n  DeletePageResponse, \n  ReindexPageResponse, \n  PagesQueryParams,\n  PageMetadata,\n  PageMetadataResponse\n} from '@/types/pages.types';\nimport type { \n  TrafficReportResponse, \n  QueriesReportResponse, \n  ConversationsReportResponse, \n  AnalysisReportResponse,\n  AnalysisInterval\n} from '@/types/reports.types';\nimport type { \n  SourcesListResponse, \n  SourceResponse, \n  DeleteSourceResponse,\n  UpdateSourceSettingsRequest,\n  CreateSitemapSourceRequest\n} from '@/types/sources.types';\nimport { parseStreamChunk, retryWithBackoff } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\ninterface UserProfileResponse {\n  status: 'success' | 'error';\n  data: UserProfile;\n}\n\n/**\n * ProxyCustomGPTClient\n * \n * Client that communicates with our server-side proxy endpoints.\n * No API key is needed client-side as it's stored on the server.\n */\nexport class ProxyCustomGPTClient {\n  private baseURL: string = '/api/proxy';\n  private timeout: number = 30000;\n  private abortControllers: Map<string, AbortController> = new Map();\n\n  constructor() {\n    logger.info('PROXY_CLIENT', 'Proxy API Client initialized', {\n      baseURL: this.baseURL,\n      timeout: this.timeout,\n    });\n  }\n\n  /**\n   * Make a request to the proxy API\n   */\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    const requestId = `${options.method || 'GET'}-${endpoint}-${Date.now()}`;\n    \n    logger.apiRequest(endpoint, options.method || 'GET', options.body);\n\n    try {\n      const controller = new AbortController();\n      this.abortControllers.set(requestId, controller);\n\n      const timeoutId = setTimeout(() => {\n        controller.abort();\n      }, this.timeout);\n\n      // Don't set Content-Type for FormData - let browser set it with boundary\n      const isFormData = options.body instanceof FormData;\n      const headers: HeadersInit = isFormData \n        ? { ...(options.headers as Record<string, string> || {}) }\n        : { \n            'Content-Type': 'application/json',\n            ...(options.headers as Record<string, string> || {})\n          };\n      \n      const response = await fetch(url, {\n        ...options,\n        headers,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n      this.abortControllers.delete(requestId);\n\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        throw {\n          message: responseData.error || `Request failed with status ${response.status}`,\n          status: response.status,\n          data: responseData,\n        };\n      }\n\n      logger.apiResponse(endpoint, response.status, responseData);\n      return responseData;\n    } catch (error: any) {\n      this.abortControllers.delete(requestId);\n      \n      if (error.name === 'AbortError') {\n        logger.apiError(endpoint, { message: 'Request timeout', code: 'TIMEOUT' });\n        throw new Error('Request timeout');\n      }\n\n      logger.apiError(endpoint, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Make a streaming request to the proxy API\n   */\n  private async streamRequest(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ReadableStream<Uint8Array>> {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    logger.apiRequest(endpoint, 'POST-STREAM', options.body);\n\n    const response = await fetch(url, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'text/event-stream',\n        ...options.headers,\n      },\n    });\n\n    if (!response.ok) {\n      const error = await response.text();\n      logger.apiError(endpoint, { message: error, status: response.status });\n      throw new Error(`Stream request failed: ${response.status}`);\n    }\n\n    logger.apiResponse(endpoint, response.status, 'Stream started');\n\n    return response.body!;\n  }\n\n  /**\n   * Cancel a specific request\n   */\n  cancelRequest(endpoint: string, method: string = 'GET'): void {\n    const controllers = Array.from(this.abortControllers.entries());\n    controllers.forEach(([key, controller]) => {\n      if (key.includes(`${method}-${endpoint}`)) {\n        controller.abort();\n        this.abortControllers.delete(key);\n      }\n    });\n  }\n\n  /**\n   * Cancel all pending requests\n   */\n  cancelAllRequests(): void {\n    this.abortControllers.forEach(controller => controller.abort());\n    this.abortControllers.clear();\n  }\n\n  // Agent Management\n  async getAgents(params?: {\n    page?: number;\n    per_page?: number;\n  }): Promise<AgentsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async createAgent(data: {\n    project_name: string;\n    sitemap_path?: string;\n    file_upload?: boolean;\n    webpage_url?: string;\n  }): Promise<APIResponse<Agent>> {\n    return this.request('/projects', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}`);\n  }\n\n  async updateAgent(id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }): Promise<APIResponse<Agent>> {\n    // Use FormData for multipart/form-data as specified in OpenAPI\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]) => {\n      if (value !== undefined) {\n        formData.append(key, String(value));\n      }\n    });\n\n    return this.request(`/projects/${id}`, {\n      method: 'POST', // Changed from PUT to POST as per OpenAPI spec\n      body: formData,\n    });\n  }\n\n  async deleteAgent(id: number): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async replicateAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}/replicate`, {\n      method: 'POST',\n    });\n  }\n\n  async getAgentStats(id: number): Promise<APIResponse<AgentStats>> {\n    return this.request(`/projects/${id}/stats`);\n  }\n\n  async getAgentSettings(id: number): Promise<APIResponse<AgentSettings>> {\n    return this.request(`/projects/${id}/settings`);\n  }\n\n  async updateAgentSettings(id: number, settings: Partial<AgentSettings> | FormData): Promise<APIResponse<AgentSettings>> {\n    const isFormData = settings instanceof FormData;\n    return this.request(`/projects/${id}/settings`, {\n      method: 'POST',\n      body: isFormData ? settings : JSON.stringify(settings),\n      headers: isFormData ? {} : { 'Content-Type': 'application/json' },\n    });\n  }\n\n  // Plugin Management\n  async getProjectPlugins(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request(`/projects/${projectId}/plugins`);\n  }\n\n  async updateProjectPlugin(\n    projectId: number,\n    pluginId: string,\n    data: { enabled: boolean }\n  ): Promise<APIResponse<{ updated: boolean }>> {\n    return this.request(`/projects/${projectId}/plugins/${pluginId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  // Conversation Management\n  async getConversations(projectId: number, params?: {\n    page?: number;\n    per_page?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: string;\n    userFilter?: 'all' | string;\n  }): Promise<ConversationsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.orderBy) queryParams.append('orderBy', params.orderBy);\n    if (params?.userFilter) queryParams.append('userFilter', params.userFilter);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async createConversation(projectId: number, data?: { name?: string }): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations`, {\n      method: 'POST',\n      body: JSON.stringify(data || {}),\n    });\n  }\n\n  async updateConversation(\n    projectId: number,\n    sessionId: string,\n    data: { name?: string }\n  ): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteConversation(projectId: number, sessionId: string): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Message Management\n  async getMessages(\n    projectId: number,\n    sessionId: string,\n    params?: {\n      page?: number;\n      per_page?: number;\n    }\n  ): Promise<MessagesResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async sendMessage(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      stream?: boolean;\n      source_ids?: string[];\n    }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async sendMessageStream(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      source_ids?: string[];\n    },\n    onChunk: (chunk: StreamChunk) => void,\n    onError?: (error: Error) => void,\n    onComplete?: () => void\n  ): Promise<void> {\n    try {\n      // Try the standard messages endpoint with stream=true parameter\n      const stream = await this.streamRequest(\n        `/projects/${projectId}/conversations/${sessionId}/messages`,\n        {\n          method: 'POST',\n          body: JSON.stringify({ ...data, stream: true }),\n        }\n      );\n\n      const reader = stream.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          onComplete?.();\n          break;\n        }\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const data = line.slice(6);\n              if (data === '[DONE]') {\n                onComplete?.();\n                return;\n              }\n              const chunk = parseStreamChunk(data);\n              if (chunk) {\n                onChunk(chunk);\n              }\n            } catch (e) {\n              console.error('Failed to parse chunk:', e);\n            }\n          }\n        }\n      }\n    } catch (error: any) {\n      onError?.(error);\n      throw error;\n    }\n  }\n\n  async getMessageById(\n    projectId: number,\n    sessionId: string,\n    messageId: number\n  ): Promise<APIMessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}`);\n  }\n\n  async updateMessageFeedback(\n    projectId: number,\n    sessionId: string,\n    messageId: number,\n    feedback: { feedback: 'thumbs_up' | 'thumbs_down' }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}/feedback`, {\n      method: 'PUT',\n      body: JSON.stringify(feedback),\n    });\n  }\n\n  // Citations\n  async getCitation(projectId: number, citationId: number): Promise<CitationResponse> {\n    return this.request(`/projects/${projectId}/citations/${citationId}`);\n  }\n\n  async previewCitationFile(id: string): Promise<any> {\n    return this.request(`/preview/${id}`);\n  }\n\n  // File Upload\n  async uploadFile(projectId: number, file: File, options?: {\n    onProgress?: (progress: number) => void;\n  }): Promise<SourceResponse> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // Use the correct /sources endpoint for file uploads\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  // Reports\n  async getTrafficReport(projectId: number): Promise<TrafficReportResponse> {\n    return this.request(`/projects/${projectId}/reports/traffic`);\n  }\n\n  async getQueriesReport(projectId: number): Promise<QueriesReportResponse> {\n    return this.request(`/projects/${projectId}/reports/queries`);\n  }\n\n  async getConversationsReport(projectId: number): Promise<ConversationsReportResponse> {\n    return this.request(`/projects/${projectId}/reports/conversations`);\n  }\n\n  async getAnalysisReport(projectId: number, interval?: AnalysisInterval): Promise<AnalysisReportResponse> {\n    const queryParams = new URLSearchParams();\n    if (interval) queryParams.append('interval', interval);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/reports/analysis${queryString ? `?${queryString}` : ''}`);\n  }\n\n  // Pages\n  async getPages(\n    projectId: number,\n    params?: PagesQueryParams\n  ): Promise<PagesListResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.crawl_status) queryParams.append('crawl_status', params.crawl_status);\n    if (params?.index_status) queryParams.append('index_status', params.index_status);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/pages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async deletePage(projectId: number, pageId: number): Promise<DeletePageResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async reindexPage(projectId: number, pageId: number): Promise<ReindexPageResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/reindex`, {\n      method: 'POST',\n    });\n  }\n\n  async getPageMetadata(projectId: number, pageId: number): Promise<PageMetadataResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/metadata`);\n  }\n\n  async updatePageMetadata(\n    projectId: number,\n    pageId: number,\n    metadata: Partial<PageMetadata>\n  ): Promise<PageMetadataResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/metadata`, {\n      method: 'PUT',\n      body: JSON.stringify(metadata),\n    });\n  }\n\n  // NOTE: This endpoint is not documented in the API\n  // Commenting out until we confirm it exists\n  // async previewFile(pageId: number): Promise<any> {\n  //   return this.request(`/page_file/${pageId}`);\n  // }\n\n  // Licenses\n  async getLicenses(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request(`/projects/${projectId}/licenses`);\n  }\n\n  async createLicense(projectId: number, data: { name: string }): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/licenses`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/licenses/${licenseId}`);\n  }\n\n  async updateLicense(\n    projectId: number,\n    licenseId: string,\n    data: { name?: string; is_active?: boolean }\n  ): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/licenses/${licenseId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/licenses/${licenseId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Sources\n  async getSources(projectId: number): Promise<SourcesListResponse> {\n    return this.request(`/projects/${projectId}/sources`);\n  }\n\n  async createSitemapSource(\n    projectId: number,\n    data: CreateSitemapSourceRequest\n  ): Promise<SourceResponse> {\n    // Convert JSON data to FormData as the API expects multipart/form-data\n    const formData = new FormData();\n    formData.append('sitemap_path', data.sitemap_path);\n    if (data.executive_js !== undefined) {\n      formData.append('executive_js', String(data.executive_js));\n    }\n    if (data.data_refresh_frequency !== undefined) {\n      formData.append('data_refresh_frequency', data.data_refresh_frequency);\n    }\n    if (data.create_new_pages !== undefined) {\n      formData.append('create_new_pages', String(data.create_new_pages));\n    }\n    if (data.remove_unexist_pages !== undefined) {\n      formData.append('remove_unexist_pages', String(data.remove_unexist_pages));\n    }\n    if (data.refresh_existing_pages !== undefined) {\n      formData.append('refresh_existing_pages', data.refresh_existing_pages);\n    }\n\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  async uploadFileSource(projectId: number, formData: FormData): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  /**\n   * Update source settings\n   * Updates the settings for an existing source.\n   * API endpoint: PUT /projects/{projectId}/sources/{sourceId}\n   */\n  async updateSourceSettings(\n    projectId: number,\n    sourceId: number,\n    settings: UpdateSourceSettingsRequest\n  ): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'PUT',\n      body: JSON.stringify(settings),\n    });\n  }\n\n  async deleteSource(projectId: number, sourceId: number): Promise<DeleteSourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async instantSyncSource(projectId: number, sourceId: number): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}/instant-sync`, {\n      method: 'PUT',\n    });\n  }\n\n  // User\n  async getUserLimits(): Promise<LimitsResponse> {\n    return this.request('/user/limits');\n  }\n\n  async getUserProfile(): Promise<UserProfileResponse> {\n    return this.request('/user');\n  }\n\n  async updateUserProfile(formData: FormData): Promise<UserProfileResponse> {\n    return this.request('/user', {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n}\n\n// Export singleton instance\nexport const proxyClient = new ProxyCustomGPTClient();","/**\n * CustomGPT API Client\n * \n * This file now uses the proxy client that communicates with our Next.js API routes.\n * The API key is stored securely on the server and never exposed to the client.\n * \n * Migration from direct API calls to proxy:\n * - All API calls now go through /api/proxy/* endpoints\n * - No API key is needed or stored client-side\n * - Server handles authentication with CustomGPT\n */\n\n// Re-export everything from the proxy client\nexport { proxyClient as apiClient } from './proxy-client';\nexport type { ProxyCustomGPTClient as CustomGPTClient } from './proxy-client';\n\n// Export a singleton instance getter\nimport { proxyClient } from './proxy-client';\n\nlet initialized = false;\n\n/**\n * Initialize the API client\n * No longer needs API key as it's handled server-side\n */\nexport function initializeClient(config?: any): void {\n  // Mark as initialized without needing API key\n  initialized = true;\n}\n\n/**\n * Get the API client instance\n */\nexport function getClient() {\n  return proxyClient;\n}\n\n/**\n * Check if client is initialized\n */\nexport function isClientInitialized(): boolean {\n  // Always return true since proxy client doesn't need initialization\n  return true;\n}","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConversationStore, Conversation } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateConversationName } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n// Session-based conversation isolation\nconst getSessionId = (): string => {\n  // Check if we're running on the server\n  if (typeof window === 'undefined') {\n    return 'server-session';\n  }\n  \n  // Use the current widget session if available\n  if ((window as any).__customgpt_current_session) {\n    return (window as any).__customgpt_current_session;\n  }\n  \n  // Check if we're in widget mode with session configuration\n  if ((window as any).__customgpt_session) {\n    return (window as any).__customgpt_session.sessionId;\n  }\n  \n  // Check for instance-specific sessions (for isolated widgets)\n  if ((window as any).__customgpt_sessions) {\n    // For isolated widgets, we need to determine which session to use\n    // This is tricky since stores are global - we'll use the most recent session\n    const sessions = (window as any).__customgpt_sessions;\n    const sessionIds = Object.keys(sessions);\n    if (sessionIds.length > 0) {\n      // Return the most recently created session\n      return sessionIds[sessionIds.length - 1];\n    }\n  }\n  \n  // Fallback to browser-based session ID\n  try {\n    let sessionId = sessionStorage.getItem('customgpt_session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      sessionStorage.setItem('customgpt_session_id', sessionId);\n    }\n    return sessionId;\n  } catch (e) {\n    // Fallback if sessionStorage is not available\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n};\n\nexport const useConversationStore = create<ConversationStore>()(\n  persist(\n    (set, get) => ({\n      conversations: [],\n      currentConversation: null,\n      loading: false,\n      error: null,\n      // Pagination state\n      currentPage: 1,\n      totalPages: 1,\n      totalConversations: 0,\n      perPage: 20,\n      // Sorting and filtering state\n      sortOrder: 'desc' as const,\n      sortBy: 'id',\n      userFilter: 'all' as const,\n\n      fetchConversations: async (projectId: number, params?: {\n        page?: number;\n        per_page?: number;\n        order?: 'asc' | 'desc';\n        orderBy?: string;\n        userFilter?: 'all' | string;\n      }) => {\n        logger.info('CONVERSATIONS', 'Fetching conversations', { projectId, params });\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          // Merge params with current state\n          const queryParams = {\n            page: params?.page ?? get().currentPage,\n            per_page: params?.per_page ?? get().perPage,\n            order: params?.order ?? get().sortOrder,\n            orderBy: params?.orderBy ?? get().sortBy,\n            userFilter: params?.userFilter ?? get().userFilter,\n          };\n          \n          const response = await client.getConversations(projectId, queryParams);\n          logger.info('CONVERSATIONS', 'API response received', { \n            projectId,\n            responseType: typeof response,\n            hasData: !!(response as any)?.data,\n            dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n          });\n          \n          // Handle different response formats\n          let conversations = [];\n          let paginationData = null;\n          \n          if (response && typeof response === 'object') {\n            // Standard paginated response format\n            if ((response as any).data && (response as any).data.data) {\n              conversations = (response as any).data.data;\n              paginationData = (response as any).data;\n            } else if (Array.isArray((response as any).data)) {\n              conversations = (response as any).data;\n            } else if (Array.isArray(response)) {\n              conversations = response;\n            }\n          }\n          \n          logger.info('CONVERSATIONS', 'Processed conversations', {\n            count: conversations.length,\n            paginationData,\n            conversations: conversations.map((c: any) => ({ \n              id: c.id, \n              name: c.name,\n              messagesCount: c.messages?.length || 0 \n            }))\n          });\n          \n          // Update state with conversations and pagination data\n          set({ \n            conversations, \n            loading: false,\n            // Update pagination state if available\n            currentPage: paginationData?.current_page ?? 1,\n            totalPages: paginationData?.last_page ?? 1,\n            totalConversations: paginationData?.total ?? conversations.length,\n            // Update sorting/filtering if params were provided\n            ...(params?.order && { sortOrder: params.order }),\n            ...(params?.orderBy && { sortBy: params.orderBy }),\n            ...(params?.userFilter && { userFilter: params.userFilter }),\n          });\n        } catch (error) {\n          logger.error('CONVERSATIONS', 'Failed to fetch conversations', error, {\n            projectId,\n            errorType: error instanceof Error ? error.constructor.name : typeof error,\n            status: (error as any)?.status,\n            message: (error as any)?.message\n          });\n          // Don't clear existing conversations on error - preserve local state\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to fetch conversations',\n            loading: false,\n            // Keep existing conversations instead of clearing them\n          });\n        }\n      },\n\n      createConversation: async (projectId: number, name?: string) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createConversation(projectId, name ? { name } : undefined);\n          const newConversation = response.data;\n          \n          set(state => ({ \n            conversations: [newConversation, ...state.conversations],\n            currentConversation: newConversation,\n            loading: false,\n          }));\n        } catch (error) {\n          console.error('Failed to create conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      selectConversation: (conversation: Conversation | null) => {\n        set({ currentConversation: conversation });\n      },\n\n      deleteConversation: async (conversationId: string | number) => {\n        const { conversations, currentConversation } = get();\n        const conversation = conversations.find(c => c.id.toString() === conversationId.toString());\n        \n        if (!conversation) return;\n\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteConversation(conversation.project_id, conversation.session_id);\n          \n          const updatedConversations = conversations.filter(c => c.id.toString() !== conversationId.toString());\n          \n          set({ \n            conversations: updatedConversations,\n            currentConversation: currentConversation?.id.toString() === conversationId.toString() \n              ? (updatedConversations.length > 0 ? updatedConversations[0] : null)\n              : currentConversation,\n            loading: false,\n          });\n        } catch (error) {\n          console.error('Failed to delete conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      updateConversation: async (conversationId: number, sessionId: string, data: { name: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateConversation(conversationId, sessionId, data);\n          const updatedConversation = response.data;\n          \n          set(state => ({ \n            conversations: state.conversations.map(c => \n              c.id === conversationId ? updatedConversation : c\n            ),\n            currentConversation: state.currentConversation?.id === conversationId \n              ? updatedConversation \n              : state.currentConversation,\n            loading: false,\n          }));\n        } catch (error) {\n          console.error('Failed to update conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      // Auto-create conversation if none exists\n      ensureConversation: async (projectId: number, firstMessage?: string) => {\n        const { currentConversation } = get();\n        \n        // If we have a current conversation for this project, use it\n        if (currentConversation && currentConversation.project_id === projectId) {\n          return currentConversation;\n        }\n        \n        // If no current conversation, always create a new one\n        // This ensures that seeing the welcome screen (currentConversation = null) \n        // always results in starting a fresh conversation\n        const name = firstMessage \n          ? generateConversationName(firstMessage)\n          : `Chat ${new Date().toLocaleDateString()}`;\n          \n        await get().createConversation(projectId, name);\n        return get().currentConversation!;\n      },\n    }),\n    {\n      name: `customgpt-conversations-${getSessionId()}`,\n      partialize: (state) => ({\n        conversations: state.conversations,\n        // Don't persist currentConversation to always start fresh\n      }),\n      onRehydrateStorage: () => (state) => {\n        if (state) {\n          // Ensure conversations is an array\n          if (!Array.isArray(state.conversations)) {\n            state.conversations = [];\n          }\n          \n          // Clear current conversation on fresh app load to start with welcome screen\n          state.currentConversation = null;\n        }\n      },\n    }\n  )\n);","import type { StreamChunk, Citation, StreamCallbacks, StreamHandlerConfig } from '@/types';\nimport { parseStreamChunk } from '@/lib/utils';\n\nexport interface StreamMessage {\n  id: string;\n  content: string;\n  citations: Citation[];\n  isComplete: boolean;\n}\n\nexport class StreamHandler {\n  private config: Required<StreamHandlerConfig>;\n  private abortController: AbortController | null = null;\n  private currentMessage: StreamMessage | null = null;\n\n  constructor(config: StreamHandlerConfig = {}) {\n    this.config = {\n      timeout: config.timeout || 60000,\n      retryAttempts: config.retryAttempts || 3,\n      retryDelay: config.retryDelay || 1000,\n    };\n  }\n\n  /**\n   * Process a streaming response\n   */\n  async processStream(\n    stream: ReadableStream,\n    callbacks: StreamCallbacks\n  ): Promise<StreamMessage> {\n    this.abortController = new AbortController();\n    this.currentMessage = {\n      id: this.generateId(),\n      content: '',\n      citations: [],\n      isComplete: false,\n    };\n\n    const reader = stream.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    // Set timeout\n    const timeoutId = setTimeout(() => {\n      this.cancel();\n      callbacks.onError?.(new Error('Stream timeout'));\n    }, this.config.timeout);\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) {\n          this.currentMessage.isComplete = true;\n          callbacks.onComplete?.();\n          break;\n        }\n\n        // Decode chunk and add to buffer\n        buffer += decoder.decode(value, { stream: true });\n        \n        // Process complete lines\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n        for (const line of lines) {\n          if (line.trim()) {\n            await this.processLine(line, callbacks);\n          }\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        callbacks.onError?.(new Error('Stream cancelled'));\n      } else {\n        callbacks.onError?.(error instanceof Error ? error : new Error('Unknown streaming error'));\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      reader.releaseLock();\n      this.abortController = null;\n    }\n\n    return this.currentMessage;\n  }\n\n  /**\n   * Process a single line from the stream\n   */\n  private async processLine(line: string, callbacks: StreamCallbacks): Promise<void> {\n    const chunk = parseStreamChunk(line);\n    \n    if (!chunk || !this.currentMessage) return;\n\n    switch (chunk.type) {\n      case 'content':\n        if (chunk.content) {\n          this.currentMessage.content += chunk.content;\n          callbacks.onChunk?.(chunk.content);\n        }\n        break;\n\n      case 'citation':\n        if (chunk.citations) {\n          this.currentMessage.citations.push(...chunk.citations);\n          chunk.citations.forEach((citation: Citation) => {\n            callbacks.onCitation?.(citation);\n          });\n        }\n        break;\n\n      case 'done':\n        this.currentMessage.isComplete = true;\n        callbacks.onComplete?.();\n        return;\n\n      case 'error':\n        callbacks.onError?.(new Error(chunk.error || 'Stream error'));\n        return;\n\n      default:\n        // Handle unknown chunk types gracefully\n        console.warn('Unknown stream chunk type:', chunk.type);\n    }\n  }\n\n  /**\n   * Cancel the current stream\n   */\n  cancel(): void {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n  }\n\n  /**\n   * Get current message state\n   */\n  getCurrentMessage(): StreamMessage | null {\n    return this.currentMessage;\n  }\n\n  /**\n   * Check if streaming is active\n   */\n  isStreaming(): boolean {\n    return this.abortController !== null && this.currentMessage !== null && !this.currentMessage.isComplete;\n  }\n\n  private generateId(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n}\n\n/**\n * Utility class for managing multiple concurrent streams\n */\nexport class StreamManager {\n  private streams: Map<string, StreamHandler> = new Map();\n  private maxConcurrentStreams: number;\n\n  constructor(maxConcurrentStreams: number = 3) {\n    this.maxConcurrentStreams = maxConcurrentStreams;\n  }\n\n  /**\n   * Start a new stream\n   */\n  async startStream(\n    streamId: string,\n    stream: ReadableStream,\n    callbacks: StreamCallbacks,\n    config?: StreamHandlerConfig\n  ): Promise<StreamMessage> {\n    // Check if we're at the concurrent limit\n    if (this.streams.size >= this.maxConcurrentStreams) {\n      throw new Error(`Maximum concurrent streams (${this.maxConcurrentStreams}) reached`);\n    }\n\n    // Cancel existing stream with same ID if it exists\n    if (this.streams.has(streamId)) {\n      this.cancelStream(streamId);\n    }\n\n    const handler = new StreamHandler(config);\n    this.streams.set(streamId, handler);\n\n    try {\n      const result = await handler.processStream(stream, {\n        ...callbacks,\n        onComplete: () => {\n          this.streams.delete(streamId);\n          callbacks.onComplete?.();\n        },\n        onError: (error) => {\n          this.streams.delete(streamId);\n          callbacks.onError?.(error);\n        },\n      });\n\n      return result;\n    } catch (error) {\n      this.streams.delete(streamId);\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel a specific stream\n   */\n  cancelStream(streamId: string): void {\n    const handler = this.streams.get(streamId);\n    if (handler) {\n      handler.cancel();\n      this.streams.delete(streamId);\n    }\n  }\n\n  /**\n   * Cancel all active streams\n   */\n  cancelAllStreams(): void {\n    this.streams.forEach(handler => handler.cancel());\n    this.streams.clear();\n  }\n\n  /**\n   * Get active stream IDs\n   */\n  getActiveStreams(): string[] {\n    return Array.from(this.streams.keys());\n  }\n\n  /**\n   * Get stream status\n   */\n  getStreamStatus(streamId: string): {\n    exists: boolean;\n    isStreaming: boolean;\n    message: StreamMessage | null;\n  } {\n    const handler = this.streams.get(streamId);\n    \n    if (!handler) {\n      return { exists: false, isStreaming: false, message: null };\n    }\n\n    return {\n      exists: true,\n      isStreaming: handler.isStreaming(),\n      message: handler.getCurrentMessage(),\n    };\n  }\n\n  /**\n   * Get number of active streams\n   */\n  getActiveStreamCount(): number {\n    return this.streams.size;\n  }\n}\n\n/**\n * Parse Server-Sent Events (SSE) data\n */\nexport function parseSSEData(data: string): any | null {\n  try {\n    if (data === '[DONE]') {\n      return { type: 'done' };\n    }\n    \n    const parsed = JSON.parse(data);\n    \n    // Handle different response formats\n    if (parsed.choices && parsed.choices[0]) {\n      const choice = parsed.choices[0];\n      \n      if (choice.delta && choice.delta.content) {\n        return {\n          type: 'content',\n          content: choice.delta.content,\n        };\n      }\n      \n      if (choice.message && choice.message.content) {\n        return {\n          type: 'content',\n          content: choice.message.content,\n        };\n      }\n    }\n    \n    // Handle CustomGPT format\n    if (parsed.content) {\n      return {\n        type: 'content',\n        content: parsed.content,\n        citations: parsed.citations || [],\n      };\n    }\n    \n    return parsed;\n  } catch (error) {\n    console.error('Failed to parse SSE data:', error);\n    return null;\n  }\n}\n\n\n/**\n * Validate stream format\n */\nexport function validateStreamChunk(chunk: any): boolean {\n  if (!chunk || typeof chunk !== 'object') {\n    return false;\n  }\n\n  // Must have a type\n  if (!chunk.type || typeof chunk.type !== 'string') {\n    return false;\n  }\n\n  // Validate specific types\n  switch (chunk.type) {\n    case 'content':\n      return typeof chunk.content === 'string';\n    \n    case 'citation':\n      return Array.isArray(chunk.citations);\n    \n    case 'done':\n    case 'error':\n      return true;\n    \n    default:\n      return false;\n  }\n}\n\n// Global stream manager instance\nexport const globalStreamManager = new StreamManager();","/**\n * Message Store - Core Chat Functionality\n * \n * This store manages all message-related state and operations.\n * It's the heart of the chat system, handling:\n * - Message sending and receiving\n * - Real-time streaming responses\n * - Message history management\n * - Local storage fallback\n * - Error handling and retries\n * \n * Architecture:\n * - Uses Map for efficient conversation-based message storage\n * - Integrates with agent and conversation stores\n * - Handles both streaming and non-streaming API responses\n * - Provides local storage backup for offline access\n * \n * Key Features:\n * - Automatic conversation creation if needed\n * - Streaming with fallback to non-streaming\n * - Optimistic UI updates\n * - Message feedback tracking\n * - File upload support\n * \n * Features:\n * - Real-time streaming with local storage persistence\n * - Robust error handling with graceful fallbacks\n * - Comprehensive logging and debugging support\n * - Optimistic UI updates with consistent message ordering\n */\n\nimport { create } from 'zustand';\nimport type { MessageStore, ChatMessage, Citation, FeedbackType, MessageDetails, MessageMetadata } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useAgentStore } from './agents';\nimport { useConversationStore } from './conversations';\nimport { generateId } from '@/lib/utils';\nimport { globalStreamManager } from '@/lib/streaming/handler';\nimport { logger } from '@/lib/logger';\nimport { toast } from 'sonner';\n\n/**\n * Local storage configuration\n * Provides offline access and caching for better UX\n */\nconst MESSAGES_STORAGE_KEY = 'customgpt-messages-cache';\n\n/**\n * Save messages to local storage\n * Provides a fallback when API is unavailable\n * @param conversationId - The conversation to save messages for\n * @param messages - Array of messages to save\n */\nfunction saveMessagesToStorage(conversationId: string, messages: ChatMessage[]) {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    const cache = stored ? JSON.parse(stored) : {};\n    cache[conversationId] = messages;\n    localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n  } catch (error) {\n    // Silent fail - storage is optional\n  }\n}\n\n/**\n * Load messages from local storage\n * Used as fallback when API is unavailable\n * @param conversationId - The conversation to load messages for\n * @returns Array of messages or null if not found\n */\nfunction loadMessagesFromStorage(conversationId: string): ChatMessage[] | null {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    if (!stored) return null;\n    const cache = JSON.parse(stored);\n    return cache[conversationId] || null;\n  } catch (error) {\n    // Silent fail - storage is optional\n    return null;\n  }\n}\n\n/**\n * Fetch citation details by IDs\n * \n * Converts citation IDs to full citation objects with title, source, content\n * \n * @param citationIds - Array of citation IDs\n * @param projectId - The project/agent ID\n * @returns Array of citation objects with details\n */\nasync function fetchCitationDetails(citationIds: number[], projectId: number): Promise<Citation[]> {\n  const client = getClient();\n  const citations: Citation[] = [];\n  \n  for (let i = 0; i < citationIds.length; i++) {\n    const citationId = citationIds[i];\n    \n    try {\n      const response = await client.getCitation(projectId, citationId);\n      \n      if (response.data) {\n        citations.push({\n          id: citationId.toString(), // Convert to string as per Citation interface\n          index: i + 1, // 1-based index for display\n          title: response.data.title || `Citation ${i + 1}`,\n          source: response.data.url,\n          url: response.data.url,\n          content: response.data.description || '',\n        });\n      }\n    } catch (error) {\n      logger.warn('MESSAGES', 'Failed to fetch citation details', {\n        citationId,\n        error: error instanceof Error ? error.message : String(error)\n      });\n      // Fallback citation object if fetch fails\n      citations.push({\n        id: citationId.toString(), // Convert to string\n        index: i + 1,\n        title: `Citation ${i + 1}`,\n        source: '',\n        url: '',\n        content: 'Citation details unavailable',\n      });\n    }\n  }\n  \n  return citations;\n}\n\n/**\n * Message Store Implementation\n * \n * State Structure:\n * - messages: Map<conversationId, ChatMessage[]> - All messages grouped by conversation\n * - streamingMessage: Current message being streamed (null when not streaming)\n * - isStreaming: Whether a message is currently being streamed\n * - loading: General loading state for message operations\n * - error: Current error message if any\n */\nexport const useMessageStore = create<MessageStore>((set, get) => ({\n  // Initialize with empty state\n  messages: new Map(),\n  streamingMessage: null,\n  isStreaming: false,\n  loading: false,\n  error: null,\n\n  /**\n   * Send a message to the current agent\n   * \n   * Flow:\n   * 1. Validate agent selection\n   * 2. Ensure conversation exists (create if needed)\n   * 3. Create and add user message (optimistic update)\n   * 4. Upload files if present\n   * 5. Start streaming response\n   * 6. Fall back to non-streaming if streaming fails\n   * 7. Handle errors gracefully\n   * \n   * \n   * @param content - Message text\n   * @param files - Optional file attachments\n   */\n  sendMessage: async (content: string, files?: File[]) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    if (!currentAgent) {\n      logger.error('MESSAGES', 'No agent selected when trying to send message');\n      throw new Error('No agent selected');\n    }\n\n    logger.info('MESSAGES', 'Sending message', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name,\n      messageLength: content.length,\n      hasFiles: files && files.length > 0\n    });\n\n    // Ensure we have a conversation\n    const conversation = await conversationStore.ensureConversation(\n      currentAgent.id,\n      content\n    );\n\n    logger.info('MESSAGES', 'Conversation ensured', {\n      conversationId: conversation.id,\n      sessionId: conversation.session_id,\n      hasSessionId: !!conversation.session_id,\n      isNew: !conversation.message_count || conversation.message_count === 0\n    });\n\n    if (!conversation.session_id) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversation });\n      throw new Error('Conversation missing session_id');\n    }\n\n    set({ loading: true, error: null });\n\n    // Create user message\n    const userMessage: ChatMessage = {\n      id: generateId(),\n      role: 'user',\n      content,\n      timestamp: new Date().toISOString(),\n      status: 'sending',\n    };\n\n    // Add user message to store\n    get().addMessage(conversation.id.toString(), userMessage);\n\n    // Create assistant message placeholder\n    const assistantMessage: ChatMessage = {\n      id: generateId(),\n      role: 'assistant',\n      content: '',\n      timestamp: new Date().toISOString(),\n      citations: [],\n    };\n\n    set({ \n      streamingMessage: assistantMessage,\n      isStreaming: true,\n      loading: false,\n    });\n\n    try {\n      // Handle file uploads if present\n      let sourceIds: string[] = [];\n      if (files && files.length > 0) {\n        const client = getClient();\n        const uploadResponses = await Promise.all(\n          files.map(file => client.uploadFile(currentAgent.id, file))\n        );\n        \n        // Extract source IDs from upload responses\n        sourceIds = uploadResponses\n          .filter(response => response?.data?.id)\n          .map(response => response.data.id.toString());\n          \n        logger.info('MESSAGES', 'Files uploaded successfully', {\n          fileCount: files.length,\n          sourceIds: sourceIds\n        });\n      }\n\n      // Update user message status\n      userMessage.status = 'sent';\n      get().addMessage(conversation.id.toString(), userMessage);\n\n      // Start streaming with correct parameters\n      const client = getClient();\n      \n      logger.info('MESSAGES', 'Starting message stream', {\n        agentId: currentAgent.id,\n        sessionId: conversation.session_id,\n        messageContent: content.substring(0, 50),\n        hasSourceIds: sourceIds.length > 0,\n        sourceIds: sourceIds\n      });\n      \n      try {\n        // Prepare the request data\n        const requestData: { prompt: string; source_ids?: string[] } = { \n          prompt: content || '' // Ensure we always have a prompt, even if empty\n        };\n        \n        // Add source_ids if we have uploaded files\n        if (sourceIds.length > 0) {\n          requestData.source_ids = sourceIds;\n          \n          // If no text prompt was provided, add a default prompt for file analysis\n          if (!content.trim()) {\n            requestData.prompt = 'Please analyze the uploaded file(s).';\n          }\n        }\n        \n        await client.sendMessageStream(\n          currentAgent.id,\n          conversation.session_id,  // Use session_id instead of id\n          requestData,\n          (chunk) => {\n              logger.info('MESSAGES', 'Received stream chunk', { \n                type: chunk.type, \n                hasContent: !!chunk.content,\n                contentLength: chunk.content?.length,\n                contentPreview: chunk.content?.substring(0, 50)\n              });\n              \n              if (chunk.type === 'content' && chunk.content) {\n                get().updateStreamingMessage(chunk.content, chunk.citations);\n              } else if (chunk.type === 'citation' && chunk.citations) {\n                // Handle citation-only chunks\n                const current = get().streamingMessage;\n                if (current && chunk.citations && Array.isArray(chunk.citations)) {\n                  // Check if citations are IDs or objects\n                  if (chunk.citations.length > 0 && typeof chunk.citations[0] === 'number') {\n                    // Fetch citation details asynchronously\n                    fetchCitationDetails(chunk.citations as any as number[], currentAgent.id).then(citationDetails => {\n                      const updatedCurrent = get().streamingMessage;\n                      if (updatedCurrent) {\n                        set({\n                          streamingMessage: {\n                            ...updatedCurrent,\n                            citations: citationDetails\n                          }\n                        });\n                      }\n                    });\n                  } else {\n                    // Citations might already be objects\n                    set({\n                      streamingMessage: {\n                        ...current,\n                        citations: chunk.citations\n                      }\n                    });\n                  }\n                }\n              }\n            },\n            async (streamError) => {\n              logger.error('MESSAGES', 'Streaming failed, attempting fallback to non-streaming', streamError, {\n                errorMessage: streamError.message,\n                agentId: currentAgent.id,\n                sessionId: conversation.session_id\n              });\n              \n              // Try fallback to non-streaming API\n              try {\n                logger.info('MESSAGES', 'Using non-streaming fallback');\n                \n                const response = await client.sendMessage(\n                  currentAgent.id,\n                  conversation.session_id,\n                  { \n                    prompt: requestData.prompt,\n                    stream: false,\n                    source_ids: requestData.source_ids\n                  }\n                );\n                \n                // Update streaming message with the complete response\n                const finalMessage = get().streamingMessage;\n                if (finalMessage && response) {\n                  // Handle different response formats from API\n                  let messageData: any;\n                  if (response.data) {\n                    messageData = response.data;\n                  } else {\n                    // Direct response format - cast to any to handle the actual API structure\n                    messageData = response as any;\n                  }\n                  \n                  finalMessage.content = messageData?.openai_response || messageData?.content || 'No response received';\n                  \n                  // Fetch citation details if needed\n                  if (messageData?.citations && Array.isArray(messageData.citations) && messageData.citations.length > 0) {\n                    if (typeof messageData.citations[0] === 'number') {\n                      // Citations are IDs, fetch details\n                      finalMessage.citations = await fetchCitationDetails(messageData.citations, currentAgent.id);\n                    } else {\n                      // Citations might already be objects\n                      finalMessage.citations = messageData.citations;\n                    }\n                  } else {\n                    finalMessage.citations = [];\n                  }\n                  \n                  finalMessage.status = 'sent';\n                  \n                  // Update the message ID to include the prompt ID if available\n                  if (messageData?.id) {\n                    finalMessage.id = `${messageData.id}-assistant`;\n                    // Also update the user message ID\n                    const conversationMessages = get().messages.get(conversation.id.toString()) || [];\n                    const lastUserMessage = conversationMessages.filter(m => m.role === 'user').pop();\n                    if (lastUserMessage && lastUserMessage.id === userMessage.id) {\n                      lastUserMessage.id = `${messageData.id}-user`;\n                      get().addMessage(conversation.id.toString(), lastUserMessage);\n                    }\n                  }\n                  \n                  // Add details from the API response\n                  finalMessage.details = {\n                    user_id: messageData?.user_id,\n                    conversation_id: messageData?.conversation_id,\n                    updated_at: messageData?.updated_at,\n                    prompt_id: messageData?.id,\n                    metadata: messageData?.metadata ? {\n                      user_ip: messageData.metadata.user_ip,\n                      user_agent: messageData.metadata.user_agent,\n                      external_id: messageData.metadata.external_id,\n                      request_source: messageData.metadata.request_source,\n                    } : undefined,\n                  };\n                  get().addMessage(conversation.id.toString(), finalMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                logger.info('MESSAGES', 'Fallback to non-streaming successful');\n                \n              } catch (fallbackError: any) {\n                logger.error('MESSAGES', 'Both streaming and non-streaming failed', fallbackError);\n                \n                // Update assistant message with error\n                const errorMessage = get().streamingMessage;\n                if (errorMessage) {\n                  errorMessage.content = 'Sorry, I encountered an error while processing your message. Please try again.';\n                  errorMessage.status = 'error';\n                  get().addMessage(conversation.id.toString(), errorMessage);\n                }\n                \n                // Extract error details including status code\n                let errorText = 'Communication error';\n                if (fallbackError.status) {\n                  switch (fallbackError.status) {\n                    case 429:\n                      errorText = 'You have exhausted your current query credits. Please contact customer service for assistance.';\n                      break;\n                    case 401:\n                      errorText = 'API Token is either missing or invalid';\n                      break;\n                    case 404:\n                      errorText = 'Agent or conversation not found';\n                      break;\n                    case 400:\n                      errorText = 'Invalid request format';\n                      break;\n                    default:\n                      errorText = fallbackError.message || `Error ${fallbackError.status}`;\n                  }\n                } else if (fallbackError.message) {\n                  errorText = fallbackError.message;\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                  error: errorText,\n                });\n              }\n            },\n            async () => {\n              // onComplete callback - enrich streaming message with API data\n              const finalMessage = get().streamingMessage;\n              if (finalMessage) {\n                finalMessage.status = 'sent';\n                \n                // Add message immediately to ensure it's visible\n                get().addMessage(conversation.id.toString(), finalMessage);\n                \n                // Clear streaming state now that message is added\n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                // Fetch latest messages to enrich the streaming message with API metadata\n                try {\n                  logger.info('MESSAGES', 'Enriching streaming message with API data');\n                  const client = getClient();\n                  const response = await client.getMessages(currentAgent.id, conversation.session_id);\n                  \n                  // Process API response to find messages\n                  let apiMessages = [];\n                  if (response && typeof response === 'object') {\n                    if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n                      apiMessages = (response as any).data.messages.data;\n                    } else if (Array.isArray((response as any).data)) {\n                      apiMessages = (response as any).data;\n                    } else if (Array.isArray(response)) {\n                      apiMessages = response;\n                    } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n                      apiMessages = (response as any).data.data;\n                    }\n                  }\n                  \n                  if (apiMessages.length > 0) {\n                    // Find the most recent assistant message (should be our streaming message)\n                    const latestApiMessage = apiMessages[apiMessages.length - 1];\n                    \n                    if (latestApiMessage && latestApiMessage.openai_response) {\n                      // Enrich the streaming message with API data\n                      finalMessage.id = `${latestApiMessage.id}-assistant`;\n                      finalMessage.timestamp = latestApiMessage.created_at || latestApiMessage.timestamp || finalMessage.timestamp;\n                      \n                      // Add full message details\n                      finalMessage.details = {\n                        user_id: latestApiMessage.user_id,\n                        conversation_id: latestApiMessage.conversation_id,\n                        updated_at: latestApiMessage.updated_at,\n                        prompt_id: latestApiMessage.id,\n                        metadata: latestApiMessage.metadata ? {\n                          user_ip: latestApiMessage.metadata.user_ip,\n                          user_agent: latestApiMessage.metadata.user_agent,\n                          external_id: latestApiMessage.metadata.external_id,\n                          request_source: latestApiMessage.metadata.request_source,\n                        } : undefined,\n                      };\n                      \n                      // Also enrich the user message with proper ID and details\n                      const conversationMessages = get().messages.get(conversation.id.toString()) || [];\n                      const lastUserMessage = conversationMessages.filter(m => m.role === 'user').pop();\n                      if (lastUserMessage && lastUserMessage.id === userMessage.id && latestApiMessage.user_query) {\n                        lastUserMessage.id = `${latestApiMessage.id}-user`;\n                        lastUserMessage.timestamp = latestApiMessage.created_at || latestApiMessage.timestamp || lastUserMessage.timestamp;\n                        lastUserMessage.details = {\n                          user_id: latestApiMessage.user_id,\n                          conversation_id: latestApiMessage.conversation_id,\n                          updated_at: latestApiMessage.updated_at,\n                          prompt_id: latestApiMessage.id,\n                          metadata: latestApiMessage.metadata ? {\n                            user_ip: latestApiMessage.metadata.user_ip,\n                            user_agent: latestApiMessage.metadata.user_agent,\n                            external_id: latestApiMessage.metadata.external_id,\n                            request_source: latestApiMessage.metadata.request_source,\n                          } : undefined,\n                        };\n                        get().addMessage(conversation.id.toString(), lastUserMessage);\n                      }\n                      \n                      // Enrich citations if they exist\n                      // Preserve existing citations from streaming if API doesn't provide them\n                      const existingCitations = finalMessage.citations || [];\n                      \n                      if (latestApiMessage.citations && Array.isArray(latestApiMessage.citations) && latestApiMessage.citations.length > 0) {\n                        if (typeof latestApiMessage.citations[0] === 'number') {\n                          // Citations are IDs, fetch details\n                          const citationDetails = await fetchCitationDetails(latestApiMessage.citations, currentAgent.id);\n                          finalMessage.citations = citationDetails;\n                        } else {\n                          // Citations might already be objects\n                          finalMessage.citations = latestApiMessage.citations;\n                        }\n                      } else {\n                        // Keep existing citations from streaming if API doesn't provide any\n                        finalMessage.citations = existingCitations;\n                      }\n                      \n                      // Update feedback if present\n                      if (latestApiMessage.response_feedback?.reaction) {\n                        finalMessage.feedback = latestApiMessage.response_feedback.reaction === 'liked' ? 'like' : \n                                               latestApiMessage.response_feedback.reaction === 'disliked' ? 'dislike' : \n                                               undefined;\n                      }\n                      \n                      // Update the enriched message in the store (it's already added, so this updates it)\n                      get().addMessage(conversation.id.toString(), finalMessage);\n                      \n                      logger.info('MESSAGES', 'Successfully enriched streaming message with API data', {\n                        messageId: finalMessage.id,\n                        hasDetails: !!finalMessage.details,\n                        citationCount: finalMessage.citations?.length || 0\n                      });\n                    } else {\n                      // API message exists but doesn't have expected format\n                      logger.info('MESSAGES', 'API message format mismatch, keeping original message');\n                    }\n                  } else {\n                    // No API messages found\n                    logger.info('MESSAGES', 'No API messages found for enrichment');\n                  }\n                } catch (enrichmentError) {\n                  logger.warn('MESSAGES', 'Failed to enrich streaming message, keeping basic version', enrichmentError);\n                  // Message is already added, enrichment failed but user can still see the response\n                }\n              }\n            }\n        );\n      } catch (setupError) {\n        logger.error('MESSAGES', 'Failed to setup streaming', setupError);\n        throw setupError;\n      }\n    } catch (error: any) {\n      logger.error('MESSAGES', 'Failed to send message', error, {\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n        status: error.status,\n        agentId: currentAgent.id,\n        conversationId: conversation.id,\n        sessionId: conversation.session_id\n      });\n      \n      // Update user message status\n      userMessage.status = 'error';\n      get().addMessage(conversation.id.toString(), userMessage);\n      \n      // Extract error details including status code\n      let errorText = 'Failed to send message';\n      if (error.status) {\n        switch (error.status) {\n          case 429:\n            errorText = 'You have exhausted your current query credits. Please contact customer service for assistance.';\n            break;\n          case 401:\n            errorText = 'API Token is either missing or invalid';\n            break;\n          case 403:\n            // Check if agent is inactive by looking at current agent status\n            const agentStore = useAgentStore.getState();\n            const { currentAgent: currentAgentFor403 } = agentStore;\n            if (currentAgentFor403 && !currentAgentFor403.is_chat_active) {\n              errorText = 'Agent is inactive - no documents uploaded. Please add documents to activate the agent.';\n            } else {\n              errorText = 'Access denied. You don\\'t have permission to access this resource.';\n            }\n            break;\n          case 404:\n            errorText = 'Agent or conversation not found';\n            break;\n          case 400:\n            errorText = 'Invalid request format';\n            break;\n          case 500:\n            errorText = 'Internal server error. Please try again later.';\n            break;\n          default:\n            errorText = error.message || `Error ${error.status}`;\n        }\n      } else if (error.message) {\n        errorText = error.message;\n      }\n      \n      set({ \n        streamingMessage: null,\n        isStreaming: false,\n        error: errorText,\n        loading: false,\n      });\n      \n      throw error;\n    }\n  },\n\n  /**\n   * Add or update a message in the store\n   * \n   * Features:\n   * - Handles both new messages and updates\n   * - Maintains message order\n   * - Automatically saves to local storage\n   * - Efficient update using message ID lookup\n   * \n   * @param conversationId - The conversation to add the message to\n   * @param message - The message to add or update\n   */\n  addMessage: (conversationId: string, message: ChatMessage) => {\n    set(state => {\n      const newMessages = new Map(state.messages);\n      const conversationMessages = newMessages.get(conversationId) || [];\n      \n      // Check if message already exists and update it\n      const existingIndex = conversationMessages.findIndex(m => m.id === message.id);\n      if (existingIndex >= 0) {\n        // Update existing message\n        conversationMessages[existingIndex] = message;\n      } else {\n        // Add new message\n        conversationMessages.push(message);\n      }\n      \n      newMessages.set(conversationId, conversationMessages);\n      \n      // Save to local storage as fallback\n      saveMessagesToStorage(conversationId, conversationMessages);\n      \n      return { messages: newMessages };\n    });\n  },\n\n  /**\n   * Update the currently streaming message\n   * \n   * Used during streaming to append content chunks\n   * and update citations as they arrive\n   * \n   * @param content - Content chunk to append\n   * @param citations - Updated citations (optional)\n   */\n  updateStreamingMessage: (content: string, citations?: Citation[]) => {\n    set(state => {\n      if (!state.streamingMessage) return state;\n      \n      return {\n        streamingMessage: {\n          ...state.streamingMessage,\n          content: state.streamingMessage.content + content, // Append content\n          citations: citations || state.streamingMessage.citations, // Update citations if provided\n        },\n      };\n    });\n  },\n\n  clearMessages: (conversationId?: string) => {\n    set(state => {\n      if (conversationId) {\n        const newMessages = new Map(state.messages);\n        newMessages.delete(conversationId);\n        return { messages: newMessages };\n      } else {\n        // Clear all messages\n        return { messages: new Map() };\n      }\n    });\n  },\n\n  updateMessageFeedback: async (messageId: string, feedback: FeedbackType) => {\n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    const { currentConversation } = conversationStore;\n    \n    if (!currentAgent || !currentConversation) {\n      logger.warn('MESSAGES', 'Cannot update feedback - missing agent or conversation');\n      return;\n    }\n\n    // Find the message\n    const conversationMessages = get().messages.get(currentConversation.id.toString()) || [];\n    const message = conversationMessages.find(m => m.id === messageId);\n    \n    if (!message) {\n      logger.warn('MESSAGES', 'Message not found for feedback update', { messageId });\n      return;\n    }\n\n    // Get the prompt ID from message details or try to extract from message ID\n    let promptId: number | undefined;\n    \n    if (message.details?.prompt_id) {\n      promptId = message.details.prompt_id;\n    } else {\n      // Try to extract from message ID format \"{promptId}-assistant\" or \"{promptId}-user\"\n      const promptIdMatch = message.id.match(/^(\\d+)-/);\n      if (promptIdMatch) {\n        promptId = parseInt(promptIdMatch[1]);\n      }\n    }\n    \n    if (!promptId) {\n      logger.error('MESSAGES', 'Could not determine prompt ID for message', { messageId, details: message.details });\n      toast.error('Unable to update feedback. Message ID not found.');\n      return;\n    }\n    const sessionId = currentConversation.session_id;\n    \n    if (!sessionId) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversationId: currentConversation.id });\n      return;\n    }\n\n    try {\n      // Update local state immediately (optimistic update)\n      const updatedMessage = { ...message, feedback };\n      get().addMessage(currentConversation.id.toString(), updatedMessage);\n\n      // Send to API\n      const client = getClient();\n      \n      // Map feedback directly to API format (no neutral option)\n      const feedbackValue = feedback === 'like' ? 'thumbs_up' : 'thumbs_down';\n      \n      logger.info('MESSAGES', 'Updating message feedback', {\n        projectId: currentAgent.id,\n        sessionId,\n        promptId,\n        feedback: feedbackValue\n      });\n      \n      const response = await client.updateMessageFeedback(\n        currentAgent.id,\n        sessionId,\n        promptId,\n        { feedback: feedbackValue }\n      );\n      \n      // The feedback was already updated optimistically above\n      // The response doesn't include the updated message data in the expected format\n      logger.info('MESSAGES', 'Message feedback updated successfully');\n      \n      // Show success toast\n      toast.success('Thanks for your feedback!');\n      \n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to update message feedback', error);\n      \n      // Revert local state on error\n      get().addMessage(currentConversation.id.toString(), message);\n      \n      // Show error toast\n      if ((error as any)?.status === 401) {\n        toast.error('Authentication failed. Please log in again.');\n      } else if ((error as any)?.status === 404) {\n        toast.error('Message not found.');\n      } else {\n        toast.error('Failed to update feedback. Please try again.');\n      }\n    }\n  },\n\n  // Utility methods\n  getMessagesForConversation: (conversationId: string): ChatMessage[] => {\n    return get().messages.get(conversationId) || [];\n  },\n\n  cancelStreaming: () => {\n    globalStreamManager.cancelAllStreams();\n    set({ \n      streamingMessage: null,\n      isStreaming: false,\n    });\n  },\n\n  /**\n   * Load message history for a conversation\n   * \n   * API Response Handling:\n   * - Supports multiple response formats from the API\n   * - Converts API format to internal ChatMessage format\n   * - Falls back to local storage if API fails\n   * - Handles both user_query and openai_response fields\n   * - Fetches citation details for citation IDs\n   * \n   * @param conversationId - The conversation to load messages for\n   */\n  loadMessages: async (conversationId: string) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    if (isDemoMode) {\n      logger.info('MESSAGES', 'Skipping message load in demo mode', { conversationId });\n      // Just ensure the conversation has an entry in the messages map\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    // Skip API calls for locally created conversations (they don't exist on server)\n    if (conversationId.startsWith('conv_')) {\n      logger.info('MESSAGES', 'Skipping API load for local conversation', { conversationId });\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    const { currentAgent } = agentStore;\n    const { conversations } = conversationStore;\n    \n    if (!currentAgent) {\n      logger.warn('MESSAGES', 'No current agent when loading messages', { conversationId });\n      return;\n    }\n\n    // Find the conversation to get its session_id\n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) {\n      logger.error('MESSAGES', 'Conversation not found in store', { \n        conversationId,\n        availableConversations: conversations.map(c => c.id)\n      });\n      // Don't set error, just ensure empty message array exists\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n\n    logger.info('MESSAGES', 'Loading messages for conversation', {\n      conversationId,\n      sessionId: conversation.session_id,\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n\n    set({ loading: true, error: null });\n\n    try {\n      const client = getClient();\n      const response = await client.getMessages(currentAgent.id, conversation.session_id);\n      logger.info('MESSAGES', 'Messages API response received', {\n        conversationId,\n        responseType: typeof response,\n        hasData: !!(response as any)?.data,\n        dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n      });\n      \n      // Handle different response formats from the API\n      let messages = [];\n      if (response && typeof response === 'object') {\n        // API documentation shows response format: { status: \"success\", data: { conversation: {...}, messages: { data: [...] } } }\n        if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n          messages = (response as any).data.messages.data;\n        } else if (Array.isArray((response as any).data)) {\n          messages = (response as any).data;\n        } else if (Array.isArray(response)) {\n          messages = response;\n        } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n          messages = (response as any).data.data;\n        }\n      }\n      \n      logger.info('MESSAGES', 'Processing messages', {\n        conversationId,\n        messagesCount: messages.length,\n        messageTypes: messages.map((m: any) => m.role || 'unknown')\n      });\n      \n      // Convert API messages to our format\n      // Each API message contains both user_query and openai_response, so we need to create two ChatMessage objects\n      const formattedMessages: ChatMessage[] = [];\n      \n      if (Array.isArray(messages)) {\n        // Process messages and fetch citation details\n        for (const msg of messages) {\n          const baseTimestamp = msg.created_at || msg.timestamp || new Date().toISOString();\n          \n          // Add user message\n          if (msg.user_query) {\n            formattedMessages.push({\n              id: `${msg.id}-user` || `user-${Math.random()}`,\n              role: 'user',\n              content: msg.user_query,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              details: {\n                user_id: msg.user_id,\n                conversation_id: msg.conversation_id,\n                updated_at: msg.updated_at,\n                prompt_id: msg.id,\n                metadata: msg.metadata ? {\n                  user_ip: msg.metadata.user_ip,\n                  user_agent: msg.metadata.user_agent,\n                  external_id: msg.metadata.external_id,\n                  request_source: msg.metadata.request_source,\n                } : undefined,\n              },\n            });\n          }\n          \n          // Add assistant message\n          if (msg.openai_response) {\n            // Fetch citation details if citations exist\n            let citationDetails: Citation[] = [];\n            if (msg.citations && Array.isArray(msg.citations) && msg.citations.length > 0) {\n              // Check if citations are already objects (future-proofing) or just IDs\n              if (typeof msg.citations[0] === 'number') {\n                // Citations are IDs, fetch details\n                citationDetails = await fetchCitationDetails(msg.citations, currentAgent.id);\n              } else {\n                // Citations might already be objects, use as is\n                citationDetails = msg.citations;\n              }\n            }\n            \n            formattedMessages.push({\n              id: `${msg.id}-assistant` || `assistant-${Math.random()}`,\n              role: 'assistant',\n              content: msg.openai_response,\n              citations: citationDetails,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              feedback: msg.response_feedback?.reaction === 'liked' ? 'like' : \n                       msg.response_feedback?.reaction === 'disliked' ? 'dislike' : \n                       undefined,\n              details: {\n                user_id: msg.user_id,\n                conversation_id: msg.conversation_id,\n                updated_at: msg.updated_at,\n                prompt_id: msg.id,\n                metadata: msg.metadata ? {\n                  user_ip: msg.metadata.user_ip,\n                  user_agent: msg.metadata.user_agent,\n                  external_id: msg.metadata.external_id,\n                  request_source: msg.metadata.request_source,\n                } : undefined,\n              },\n            });\n          }\n        }\n      }\n\n      logger.info('MESSAGES', 'Messages formatted successfully', {\n        conversationId,\n        formattedCount: formattedMessages.length\n      });\n\n      // Sort messages by timestamp to ensure chronological order\n      formattedMessages.sort((a, b) => {\n        const dateA = new Date(a.timestamp).getTime();\n        const dateB = new Date(b.timestamp).getTime();\n        return dateA - dateB; // Ascending order (oldest first)\n      });\n\n      logger.info('MESSAGES', 'Messages sorted by timestamp', {\n        conversationId,\n        firstMessageTime: formattedMessages[0]?.timestamp,\n        lastMessageTime: formattedMessages[formattedMessages.length - 1]?.timestamp\n      });\n\n      set(state => {\n        const newMessages = new Map(state.messages);\n        \n        // Preserve any local messages that might be in sending state\n        const existingMessages = state.messages.get(conversationId) || [];\n        const localSendingMessages = existingMessages.filter(msg => \n          msg.status === 'sending' || \n          (msg.role === 'user' && \n           new Date(msg.timestamp).getTime() > Date.now() - 5000) // Messages sent in last 5 seconds\n        );\n        \n        // Merge local sending messages with API messages\n        const mergedMessages = [...formattedMessages];\n        for (const localMsg of localSendingMessages) {\n          if (!mergedMessages.find(m => m.id === localMsg.id)) {\n            // Insert local message at the appropriate position based on timestamp\n            const insertIndex = mergedMessages.findIndex(m => \n              new Date(m.timestamp).getTime() > new Date(localMsg.timestamp).getTime()\n            );\n            if (insertIndex === -1) {\n              mergedMessages.push(localMsg);\n            } else {\n              mergedMessages.splice(insertIndex, 0, localMsg);\n            }\n          }\n        }\n        \n        newMessages.set(conversationId, mergedMessages);\n        \n        // Save to local storage as fallback\n        saveMessagesToStorage(conversationId, mergedMessages);\n        \n        return { \n          messages: newMessages,\n          loading: false,\n        };\n      });\n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to load messages', error, {\n        conversationId,\n        agentId: currentAgent.id,\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        status: (error as any)?.status,\n        message: (error as any)?.message\n      });\n      \n      // Try to load from local storage as fallback\n      const cachedMessages = loadMessagesFromStorage(conversationId);\n      if (cachedMessages && cachedMessages.length > 0) {\n        logger.info('MESSAGES', 'Using cached messages as fallback', {\n          conversationId,\n          messageCount: cachedMessages.length\n        });\n        \n        // Sort cached messages by timestamp to ensure chronological order\n        cachedMessages.sort((a, b) => {\n          const dateA = new Date(a.timestamp).getTime();\n          const dateB = new Date(b.timestamp).getTime();\n          return dateA - dateB; // Ascending order (oldest first)\n        });\n        \n        set(state => {\n          const newMessages = new Map(state.messages);\n          newMessages.set(conversationId, cachedMessages);\n          return { \n            messages: newMessages,\n            loading: false,\n            error: 'Using cached messages (API unavailable)'\n          };\n        });\n      } else {\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to load messages',\n          loading: false,\n        });\n      }\n    }\n  },\n}));","/**\n * Agent Store - Chatbot Management\n * \n * This store manages all agent (chatbot) related state and operations.\n * Agents are the core entities in CustomGPT - each agent is a trained\n * chatbot with its own knowledge base and settings.\n * \n * Features:\n * - CRUD operations for agents\n * - Persistent state using localStorage\n * - Auto-selection of first agent\n * - Agent statistics fetching\n * - License management support\n * \n * State Persistence:\n * - Uses Zustand persist middleware\n * - Stores: agents list and current selection\n * - Survives page refreshes\n * \n * Features:\n * - Multi-format API response handling with backward compatibility\n * - Automatic agent state synchronization across operations\n * - Optimistic UI updates for seamless user experience\n * - Comprehensive error handling with graceful recovery\n */\n\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { AgentStore, Agent } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useConversationStore } from './conversations';\nimport { useMessageStore } from './messages';\n\n/**\n * Agent Store Implementation\n * \n * Persisted to localStorage with key 'customgpt-agent-store'\n * Automatically hydrates on app load\n */\nexport const useAgentStore = create<AgentStore>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      agents: [],\n      currentAgent: null,\n      loading: false,\n      error: null,\n      paginationMeta: undefined,\n\n      /**\n       * Fetch agents from the API with enterprise-scale pagination\n       * \n       * Strategy for 1000+ projects:\n       * - Load first batch (100 items) immediately for UI responsiveness\n       * - Load additional batches as needed via loadMoreAgents()\n       * - Auto-selects first agent if none selected\n       * - Maintains total count for pagination UI\n       */\n      fetchAgents: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Load first batch with larger page size for better UX\n          const response = await client.getAgents({ page: 1, per_page: 100 });\n          \n          let agents: Agent[] = [];\n          let total = 0;\n          let hasMore = false;\n          \n          // Handle different response formats from the API\n          if (response && typeof response === 'object') {\n            // Check for nested pagination format: { data: { data: [...], total: ..., current_page: ... } }\n            if ('data' in response && (response as any).data && typeof (response as any).data === 'object' && 'data' in (response as any).data) {\n              const nestedData = (response as any).data;\n              agents = Array.isArray(nestedData.data) ? nestedData.data : [];\n              total = nestedData.total || agents.length;\n              const currentPage = nestedData.current_page || 1;\n              const perPage = nestedData.per_page || 100;\n              hasMore = nestedData.last_page ? currentPage < nestedData.last_page : false;\n            } else if ('data' in response && 'total' in response) {\n              // Flat paginated response format\n              const paginatedResponse = response as { data: Agent[]; total: number; page: number; per_page: number };\n              agents = paginatedResponse.data;\n              total = paginatedResponse.total;\n              hasMore = total > paginatedResponse.per_page;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              agents = (response as any).data;\n              total = agents.length;\n              hasMore = false;\n            } else if (Array.isArray(response)) {\n              // Legacy format: [...]\n              agents = response as Agent[];\n              total = agents.length;\n              hasMore = false;\n            }\n          }\n          \n          set({ \n            agents, \n            loading: false,\n            // Always update pagination metadata with fresh data\n            paginationMeta: { \n              currentPage: 1, \n              totalCount: total, \n              hasMore,\n              perPage: 100\n            },\n            // Auto-select first agent if none selected\n            currentAgent: get().currentAgent || (agents.length > 0 ? agents[0] : null)\n          });\n        } catch (error) {\n          console.error('Failed to fetch agents:', error);\n          set({ \n            agents: [], \n            error: error instanceof Error ? error.message : 'Failed to fetch agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Load more agents for large datasets (enterprise accounts)\n       * Appends to existing agents list\n       */\n      loadMoreAgents: async () => {\n        const state = get();\n        const paginationMeta = (state as any).paginationMeta;\n        \n        if (!paginationMeta?.hasMore || state.loading) return;\n        \n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const nextPage = paginationMeta.currentPage + 1;\n          \n          const response = await client.getAgents({ \n            page: nextPage, \n            per_page: paginationMeta.perPage \n          });\n          \n          if (response && 'data' in response) {\n            let newAgents: Agent[] = [];\n            let responseTotal = 0;\n            let responsePage = nextPage;\n            \n            // Handle nested format: { data: { data: [...] } }\n            if (response.data && typeof response.data === 'object' && 'data' in response.data) {\n              const nestedData = (response as any).data;\n              newAgents = Array.isArray(nestedData.data) ? nestedData.data : [];\n              responseTotal = nestedData.total || 0;\n              responsePage = nestedData.current_page || nextPage;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              newAgents = (response as any).data;\n              responseTotal = paginationMeta.totalCount;\n            }\n            \n            set(state => ({ \n              agents: [...state.agents, ...newAgents],\n              loading: false,\n              paginationMeta: {\n                ...paginationMeta,\n                currentPage: responsePage,\n                hasMore: (responsePage * paginationMeta.perPage + newAgents.length) < responseTotal\n              }\n            }));\n          }\n        } catch (error) {\n          console.error('Failed to load more agents:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to load more agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Search for a specific agent by ID or name\n       * Useful for enterprise accounts with many projects\n       */\n      findAgent: async (query: string | number) => {\n        try {\n          const client = getClient();\n          \n          // If query is numeric, assume it's an ID and try to fetch directly\n          if (typeof query === 'number' || /^\\d+$/.test(query.toString())) {\n            const id = typeof query === 'number' ? query : parseInt(query.toString());\n            try {\n              const response = await client.getAgent(id);\n              const agent = response.data;\n              \n              // Add to agents list if not already present\n              const state = get();\n              if (!state.agents.find(a => a.id === agent.id)) {\n                set(state => ({ \n                  agents: [agent, ...state.agents] \n                }));\n              }\n              \n              return agent;\n            } catch {\n              // ID not found or no access, fall through to search\n            }\n          }\n          \n          // For text search, we'd need a search endpoint (not implemented in current API)\n          // For now, search within loaded agents\n          const state = get();\n          const found = state.agents.find(agent => \n            agent.project_name.toLowerCase().includes(query.toString().toLowerCase()) ||\n            agent.id.toString() === query.toString()\n          );\n          \n          return found || null;\n        } catch (error) {\n          console.error('Failed to find agent:', error);\n          return null;\n        }\n      },\n\n      /**\n       * Create a new agent\n       * \n       * @param data - Agent creation data\n       * @param data.project_name - Display name for the agent\n       * @param data.sitemap_path - URL for sitemap-based training\n       * @param data.files - Files for file-based training\n       * @param data.is_shared - Whether agent is publicly accessible\n       * \n       * Behavior:\n       * - Adds new agent to beginning of list\n       * - Auto-selects the new agent\n       * - Returns the created agent\n       * - Throws error on failure\n       */\n      createAgent: async (data: {\n        project_name: string;\n        sitemap_path?: string;\n        files?: File[];\n        is_shared?: boolean;\n      }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createAgent(data);\n          const newAgent = response.data;\n          \n          // Optimistic update - add to list and select immediately\n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to create agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create agent',\n            loading: false \n          });\n          throw error; // Re-throw for component error handling\n        }\n      },\n\n      /**\n       * Select an agent as the current active agent\n       * This agent will be used for all chat operations\n       * \n       * @param agent - The agent to select\n       */\n      selectAgent: async (agent: Agent) => {\n        // Clear conversation state when switching agents\n        const conversationStore = useConversationStore.getState();\n        const messageStore = useMessageStore.getState();\n        \n        // Set the new agent first\n        set({ currentAgent: agent });\n        \n        // Clear current conversation to show welcome screen\n        conversationStore.selectConversation(null);\n        \n        // Clear all messages from the previous agent\n        messageStore.clearMessages();\n        \n        // Fetch conversations for the new agent\n        try {\n          await conversationStore.fetchConversations(agent.id);\n        } catch (error) {\n          console.error('Failed to fetch conversations for new agent:', error);\n          // Even if fetch fails, we've already cleared the old state\n        }\n      },\n\n      /**\n       * Manually set the agents list\n       * Used for optimistic updates or manual state management\n       * \n       * Features:\n       * - Validates current agent still exists\n       * - Auto-selects first agent if current is removed\n       * - Maintains agent selection when possible\n       * \n       * @param agents - New list of agents\n       */\n      setAgents: (agents: Agent[]) => {\n        set({ \n          agents,\n          // Update current agent if it's no longer in the list\n          currentAgent: (() => {\n            const current = get().currentAgent;\n            if (!current) return agents.length > 0 ? agents[0] : null;\n            \n            // Check if current agent still exists in new list\n            const stillExists = agents.find(a => a.id === current.id);\n            return stillExists || (agents.length > 0 ? agents[0] : null);\n          })()\n        });\n      },\n      \n      updateAgent: async (id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateAgent(id, data);\n          const updatedAgent = response.data;\n          \n          set(state => ({\n            agents: state.agents.map(a => a.id === id ? updatedAgent : a),\n            currentAgent: state.currentAgent?.id === id ? updatedAgent : state.currentAgent,\n            loading: false,\n          }));\n          \n          return updatedAgent;\n        } catch (error) {\n          console.error('Failed to update agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      deleteAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteAgent(id);\n          \n          set(state => {\n            const filteredAgents = state.agents.filter(a => a.id !== id);\n            return {\n              agents: filteredAgents,\n              currentAgent: state.currentAgent?.id === id \n                ? (filteredAgents.length > 0 ? filteredAgents[0] : null)\n                : state.currentAgent,\n              loading: false,\n            };\n          });\n        } catch (error) {\n          console.error('Failed to delete agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      replicateAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.replicateAgent(id);\n          const newAgent = response.data;\n          \n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to replicate agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to replicate agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      getAgentStats: async (id: number) => {\n        try {\n          const client = getClient();\n          const response = await client.getAgentStats(id);\n          return response.data;\n        } catch (error) {\n          console.error('Failed to get agent stats:', error);\n          throw error;\n        }\n      },\n    }),\n    {\n      name: 'customgpt-agents',\n      partialize: (state) => ({\n        currentAgent: state.currentAgent,\n      }),\n    }\n  )\n);","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface AnalyticsData {\n  conversations: {\n    total: number;\n    active: number;\n    trend: number;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  queries: {\n    total: number;\n    successful: number;\n    failed: number;\n    avgResponseTime: number;\n    topQueries: Array<{\n      query: string;\n      count: number;\n    }>;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  traffic: {\n    uniqueUsers: number;\n    pageViews: number;\n    avgSessionDuration: number;\n    bounceRate: number;\n    data: Array<{\n      date: string;\n      users: number;\n      pageViews: number;\n    }>;\n  };\n  statistics: {\n    totalMessages: number;\n    totalConversations: number;\n    avgMessagesPerConversation: number;\n    satisfactionRate: number;\n    responseAccuracy: number;\n  };\n}\n\ninterface AnalyticsState {\n  analytics: AnalyticsData | null;\n  loading: boolean;\n  error: string | null;\n  dateRange: {\n    startDate: string;\n    endDate: string;\n  };\n  \n  // Actions\n  fetchAnalytics: (projectId: number) => Promise<void>;\n  setDateRange: (startDate: string, endDate: string) => void;\n  exportAnalytics: (format: 'csv' | 'json' | 'pdf') => Promise<void>;\n  reset: () => void;\n}\n\n// Helper function to format dates for API\nconst formatDate = (date: Date): string => {\n  return date.toISOString().split('T')[0];\n};\n\n// Get default date range (last 30 days)\nconst getDefaultDateRange = () => {\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - 30);\n  \n  return {\n    startDate: formatDate(startDate),\n    endDate: formatDate(endDate),\n  };\n};\n\nexport const useAnalyticsStore = create<AnalyticsState>((set, get) => ({\n  analytics: null,\n  loading: false,\n  error: null,\n  dateRange: getDefaultDateRange(),\n\n  fetchAnalytics: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Fetch all reports data in parallel using documented endpoints\n      const [trafficReport, queriesReport, conversationsReport, analysisReport] = await Promise.all([\n        client.getTrafficReport(projectId),\n        client.getQueriesReport(projectId),\n        client.getConversationsReport(projectId),\n        client.getAnalysisReport(projectId, 'daily'),\n      ]);\n\n      // Transform the data to match our interface using actual API response structure\n      const analyticsData: AnalyticsData = {\n        conversations: {\n          total: conversationsReport.data?.total || 0,\n          active: Math.floor((conversationsReport.data?.total || 0) * 0.7), // Estimate active conversations\n          trend: 0, // Calculate trend from data if needed\n          data: analysisReport.data?.conversations?.map((item: any) => ({\n            date: item.created_at_interval,\n            count: Number(item.queries_number) || 0,\n          })) || [],\n        },\n        queries: {\n          total: queriesReport.data?.total || 0,\n          successful: queriesReport.data?.query_status?.find((s: any) => s.status === 'success')?.count || 0,\n          failed: queriesReport.data?.query_status?.find((s: any) => s.status === 'failed')?.count || 0,\n          avgResponseTime: 0, // Not provided by API\n          topQueries: [], // Not provided by these endpoints\n          data: analysisReport.data?.queries?.map((item: any) => ({\n            date: item.created_at_interval,\n            count: Number(item.queries_number) || 0,\n          })) || [],\n        },\n        traffic: {\n          uniqueUsers: trafficReport.data?.sources?.reduce((acc: number, source: any) => acc + (source.request_source_number || 0), 0) || 0,\n          pageViews: trafficReport.data?.sources?.reduce((acc: number, source: any) => acc + (source.request_source_number || 0), 0) || 0,\n          avgSessionDuration: 0, // Not provided by API\n          bounceRate: 0, // Not provided by API\n          data: trafficReport.data?.sources?.map((source: any) => ({\n            date: new Date().toISOString().split('T')[0], // Current date as traffic report doesn't have dates\n            users: source.request_source_number || 0,\n            pageViews: source.request_source_number || 0,\n          })) || [],\n        },\n        statistics: {\n          totalMessages: queriesReport.data?.total || 0,\n          totalConversations: conversationsReport.data?.total || 0,\n          avgMessagesPerConversation: Number(conversationsReport.data?.average_queries_per_conversation) || 0,\n          satisfactionRate: 0, // Not provided by API\n          responseAccuracy: 0, // Not provided by API\n        },\n      };\n\n      set({ analytics: analyticsData, loading: false });\n    } catch (error: any) {\n      console.error('Failed to fetch analytics:', error);\n      \n      let errorMessage = 'Failed to fetch analytics';\n      if (error.status === 401) {\n        errorMessage = 'Authentication required. Please log in again.';\n        toast.error('Your session has expired. Please log in again.');\n      } else if (error.status === 404) {\n        errorMessage = 'Analytics data not found for this project.';\n        toast.error('No analytics data available yet.');\n      } else if (error.status === 500) {\n        errorMessage = 'Server error occurred. Please try again later.';\n        toast.error('Server error. Please try again later.');\n      } else {\n        toast.error('Failed to fetch analytics data');\n      }\n      \n      set({ \n        analytics: null,\n        error: errorMessage,\n        loading: false,\n      });\n    }\n  },\n\n  setDateRange: (startDate: string, endDate: string) => {\n    set({ dateRange: { startDate, endDate } });\n  },\n\n  exportAnalytics: async (format: 'csv' | 'json' | 'pdf') => {\n    const analytics = get().analytics;\n    if (!analytics) {\n      toast.error('No analytics data to export');\n      return;\n    }\n\n    try {\n      // Implementation would depend on the format\n      switch (format) {\n        case 'json':\n          const jsonData = JSON.stringify(analytics, null, 2);\n          const blob = new Blob([jsonData], { type: 'application/json' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `analytics-${new Date().toISOString()}.json`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          URL.revokeObjectURL(url);\n          toast.success('Analytics exported successfully');\n          break;\n          \n        case 'csv':\n          // Would need a CSV conversion library or custom implementation\n          toast.info('CSV export not yet implemented');\n          break;\n          \n        case 'pdf':\n          // Would need a PDF generation library\n          toast.info('PDF export not yet implemented');\n          break;\n      }\n    } catch (error) {\n      console.error('Failed to export analytics:', error);\n      toast.error('Failed to export analytics');\n    }\n  },\n\n  reset: () => {\n    set({\n      analytics: null,\n      loading: false,\n      error: null,\n      dateRange: getDefaultDateRange(),\n    });\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { UIStore } from '@/types';\n\nexport const useUIStore = create<UIStore>()(\n  persist(\n    (set) => ({\n      sidebarOpen: true,\n      settingsOpen: false,\n      theme: 'light',\n      fontSize: 'md',\n\n      setSidebarOpen: (open: boolean) => {\n        set({ sidebarOpen: open });\n      },\n\n      setSettingsOpen: (open: boolean) => {\n        set({ settingsOpen: open });\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Apply theme to document\n        if (typeof window !== 'undefined') {\n          document.documentElement.className = theme;\n        }\n      },\n\n      setFontSize: (size: 'sm' | 'md' | 'lg') => {\n        set({ fontSize: size });\n        \n        // Apply font size to document\n        if (typeof window !== 'undefined') {\n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (size) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }),\n    {\n      name: 'customgpt-ui',\n      partialize: (state) => ({\n        sidebarOpen: state.sidebarOpen,\n        theme: state.theme,\n        fontSize: state.fontSize,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Apply theme and font size on rehydration\n        if (typeof window !== 'undefined' && state) {\n          document.documentElement.className = state.theme;\n          \n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (state.fontSize) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { toast } from 'sonner';\nimport { getClient } from '@/lib/api/client';\nimport type { APIResponse, AgentStats } from '@/types';\n\nexport interface ProjectSettings {\n  // Appearance\n  chatbot_avatar?: string;\n  chatbot_background_type?: 'image' | 'color';\n  chatbot_background?: string;\n  chatbot_background_color?: string;\n  chatbot_color?: string;\n  chatbot_toolbar_color?: string;\n  chatbot_title?: string;\n  chatbot_title_color?: string;\n  user_avatar?: string;\n  spotlight_avatar_enabled?: boolean;\n  spotlight_avatar?: string;\n  spotlight_avatar_shape?: 'rectangle' | 'circle' | 'rounded' | 'square';\n  spotlight_avatar_type?: 'default' | 'animated' | '3d' | 'custom';\n  user_avatar_orientation?: 'agent-left-user-right' | 'agent-right-user-left' | 'both-left' | 'both-right';\n  \n  // Messages & Behavior\n  default_prompt?: string;\n  example_questions?: string[];\n  persona_instructions?: string;\n  response_source?: 'default' | 'own_content' | 'openai_content';\n  chatbot_model?: string;\n  chatbot_msg_lang?: string;\n  input_field_addendum?: string;\n  \n  // Messages\n  hang_in_there_msg?: string;\n  chatbot_siesta_msg?: string;\n  no_answer_message?: string;\n  ending_message?: string;\n  try_asking_questions_msg?: string;\n  view_more_msg?: string;\n  view_less_msg?: string;\n  \n  // Citations\n  enable_citations?: number;\n  citations_view_type?: 'user' | 'show' | 'hide';\n  citations_answer_source_label_msg?: string;\n  citations_sources_label_msg?: string;\n  image_citation_display?: 'default' | 'inline' | 'none';\n  enable_inline_citations_api?: boolean;\n  hide_sources_from_responses?: boolean;\n  \n  // Features\n  enable_feedbacks?: boolean;\n  is_loading_indicator_enabled?: boolean;\n  remove_branding?: boolean;\n  private_deployment?: boolean;\n  enable_recaptcha_for_public_chatbots?: boolean;\n  is_selling_enabled?: boolean;\n  license_slug?: boolean;\n  selling_url?: string;\n  can_share_conversation?: boolean;\n  can_export_conversation?: boolean;\n  conversation_time_window?: boolean;\n  conversation_retention_period?: 'day' | 'week' | 'month' | 'quarter' | 'year' | 'custom';\n  conversation_retention_days?: number;\n  enable_agent_knowledge_base_awareness?: boolean;\n  markdown_enabled?: boolean;\n}\n\nexport interface ProjectPlugin {\n  id: string;\n  name: string;\n  enabled: boolean;\n  description?: string;\n  category?: string;\n  settings?: Record<string, any>;\n}\n\n// Using AgentStats from the API instead of custom ProjectStats\nexport type ProjectStats = AgentStats;\n\nexport interface ProjectSettingsStore {\n  // Settings\n  settings: ProjectSettings | null;\n  settingsLoading: boolean;\n  settingsError: string | null;\n\n  // Plugins\n  plugins: ProjectPlugin[];\n  pluginsLoading: boolean;\n  pluginsError: string | null;\n\n  // Stats\n  stats: ProjectStats | null;\n  statsLoading: boolean;\n  statsError: string | null;\n\n  // Actions\n  fetchSettings: (projectId: number) => Promise<void>;\n  updateSettings: (projectId: number, settings: Partial<ProjectSettings>) => Promise<void>;\n  fetchPlugins: (projectId: number) => Promise<void>;\n  updatePlugin: (projectId: number, pluginId: string, enabled: boolean) => Promise<void>;\n  fetchStats: (projectId: number) => Promise<void>;\n  reset: () => void;\n}\n\n// Track active requests to prevent duplicates\nconst activeRequests = new Map<string, boolean>();\n\nexport const useProjectSettingsStore = create<ProjectSettingsStore>((set, get) => ({\n  // Initial state\n  settings: null,\n  settingsLoading: false,\n  settingsError: null,\n  plugins: [],\n  pluginsLoading: false,\n  pluginsError: null,\n  stats: null,\n  statsLoading: false,\n  statsError: null,\n\n  // Fetch project settings\n  fetchSettings: async (projectId: number) => {\n    const requestKey = `settings-${projectId}`;\n    \n    // Prevent duplicate requests\n    if (activeRequests.get(requestKey)) {\n      return;\n    }\n    \n    activeRequests.set(requestKey, true);\n    \n    // Clear previous errors and set loading state\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      const response = await getClient().getAgentSettings(projectId);\n\n      // The API client returns the data directly, not wrapped with status\n      if (response && response.data) {\n        set({ \n          settings: response.data, \n          settingsLoading: false,\n          settingsError: null // Explicitly clear error on success\n        });\n      } else if (response) {\n        // If response exists but doesn't have data property, it might be the direct data\n        set({ \n          settings: response as any, \n          settingsLoading: false,\n          settingsError: null\n        });\n      } else {\n        throw new Error('Failed to fetch project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      // Only show toast for actual errors, not for expected scenarios\n      if (error instanceof Error && !error.message.includes('404')) {\n        toast.error(errorMessage);\n      }\n    } finally {\n      activeRequests.delete(requestKey);\n    }\n  },\n\n  // Update project settings\n  updateSettings: async (projectId: number, settingsUpdate: Partial<ProjectSettings>) => {\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      // Create FormData for multipart/form-data\n      const formData = new FormData();\n      \n      Object.entries(settingsUpdate).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          if (key === 'example_questions' && Array.isArray(value)) {\n            // Handle array fields - use bracket notation without index\n            value.forEach((question) => {\n              formData.append(`example_questions[]`, question);\n            });\n          } else if (value instanceof File) {\n            // Handle file uploads\n            formData.append(key, value);\n          } else {\n            // Handle regular fields\n            formData.append(key, String(value));\n          }\n        }\n      });\n\n      const response = await getClient().updateAgentSettings(projectId, formData);\n\n      // The API client returns the data directly\n      if (response) {\n        // Instead of merging, re-fetch the settings to ensure we have the latest data\n        set({ settingsLoading: false });\n        \n        // Re-fetch settings to get the updated data from server\n        await get().fetchSettings(projectId);\n        \n        toast.success('Project settings updated successfully');\n      } else {\n        throw new Error('Failed to update project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project plugins\n  fetchPlugins: async (projectId: number) => {\n    set({ pluginsLoading: true, pluginsError: null });\n\n    try {\n      const response = await getClient().getProjectPlugins(projectId);\n\n      // The API client returns the data directly\n      if (response) {\n        const pluginsData = response.data || response;\n        set({ \n          plugins: Array.isArray(pluginsData) ? pluginsData : [], \n          pluginsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project plugins');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project plugins';\n      set({ \n        pluginsError: errorMessage, \n        pluginsLoading: false,\n        plugins: [] // Fallback to empty array\n      });\n      console.warn('Plugins not available:', errorMessage);\n    }\n  },\n\n  // Update project plugin\n  updatePlugin: async (projectId: number, pluginId: string, enabled: boolean) => {\n    try {\n      // This endpoint might not exist yet, so we'll implement it as a placeholder\n      const response = await getClient().updateProjectPlugin(projectId, pluginId, { enabled });\n\n      // The API client returns the data directly\n      if (response) {\n        // Update plugin in store\n        const plugins = get().plugins.map(plugin =>\n          plugin.id === pluginId ? { ...plugin, enabled } : plugin\n        );\n        \n        set({ plugins });\n        toast.success(`Plugin ${enabled ? 'enabled' : 'disabled'} successfully`);\n      } else {\n        throw new Error('Failed to update plugin');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update plugin';\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project stats\n  fetchStats: async (projectId: number) => {\n    set({ statsLoading: true, statsError: null });\n\n    try {\n      const response = await getClient().getAgentStats(projectId);\n\n      // The API client returns the data directly\n      if (response) {\n        const statsData = response.data || response;\n        set({ \n          stats: statsData, \n          statsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project stats');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project stats';\n      set({ \n        statsError: errorMessage, \n        statsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Reset store\n  reset: () => {\n    set({\n      settings: null,\n      settingsLoading: false,\n      settingsError: null,\n      plugins: [],\n      pluginsLoading: false,\n      pluginsError: null,\n      stats: null,\n      statsLoading: false,\n      statsError: null,\n    });\n  },\n}));","import { create } from 'zustand';\nimport { getClient, isClientInitialized } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { Page, PagesQueryParams } from '@/types/pages.types';\n\ninterface PagesState {\n  pages: Page[];\n  loading: boolean;\n  error: string | null;\n  paginationInfo: {\n    current_page: number;\n    total: number;\n    per_page: number;\n    last_page: number;\n  };\n  queryParams: PagesQueryParams;\n  \n  // Actions\n  fetchPages: (projectId: number) => Promise<void>;\n  deletePage: (projectId: number, pageId: number) => Promise<void>;\n  reindexPage: (projectId: number, pageId: number) => Promise<void>;\n  \n  // UI State\n  setQueryParams: (params: Partial<PagesQueryParams>) => void;\n  reset: () => void;\n}\n\nexport const usePageStore = create<PagesState>((set, get) => ({\n  pages: [],\n  loading: false,\n  error: null,\n  paginationInfo: {\n    current_page: 1,\n    total: 0,\n    per_page: 20,\n    last_page: 1\n  },\n  queryParams: {\n    page: 1,\n    limit: 20,\n    order: 'desc',\n    crawl_status: 'all',\n    index_status: 'all'\n  },\n\n  fetchPages: async (projectId: number) => {\n    if (!isClientInitialized()) {\n      set({ error: 'API client not initialized' });\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const { queryParams } = get();\n      const response = await client.getPages(projectId, queryParams);\n      \n      set({ \n        pages: response.data.pages.data,\n        paginationInfo: {\n          current_page: response.data.pages.current_page,\n          total: response.data.pages.total,\n          per_page: response.data.pages.per_page,\n          last_page: response.data.pages.last_page\n        },\n        loading: false \n      });\n    } catch (error: any) {\n      console.error('Failed to fetch pages:', error);\n      \n      let errorMessage = 'Failed to fetch pages';\n      if (error.status === 400) {\n        errorMessage = 'Invalid request. Please check the project ID.';\n      } else if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Project not found.';\n      } else if (error.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  deletePage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deletePage(projectId, pageId);\n      \n      set(state => ({\n        pages: state.pages.filter(page => page.id !== pageId),\n        loading: false,\n      }));\n      \n      toast.success('Page deleted successfully');\n    } catch (error: any) {\n      console.error('Failed to delete page:', error);\n      \n      let errorMessage = 'Failed to delete page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Page not found.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  reindexPage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.reindexPage(projectId, pageId);\n      \n      // Update local state to show queued status\n      set(state => ({\n        pages: state.pages.map(page => \n          page.id === pageId \n            ? { ...page, crawl_status: 'queued', index_status: 'queued' }\n            : page\n        ),\n        loading: false,\n      }));\n      \n      toast.success('Page reindexing started');\n    } catch (error: any) {\n      console.error('Failed to reindex page:', error);\n      \n      let errorMessage = 'Failed to reindex page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 403) {\n        errorMessage = 'The page could not be reindexed.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  setQueryParams: (params: Partial<PagesQueryParams>) => {\n    set(state => ({\n      queryParams: { ...state.queryParams, ...params },\n    }));\n  },\n\n  reset: () => {\n    set({\n      pages: [],\n      loading: false,\n      error: null,\n      paginationInfo: {\n        current_page: 1,\n        total: 0,\n        per_page: 20,\n        last_page: 1\n      },\n      queryParams: {\n        page: 1,\n        limit: 20,\n        order: 'desc',\n        crawl_status: 'all',\n        index_status: 'all'\n      },\n    });\n  },\n}));","// Sources store - provides state management for source data\n// Currently uses direct API calls in components\n\nimport { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface Source {\n  id: string;\n  project_id: number;\n  name: string;\n  type: 'file' | 'url' | 'text' | 'api';\n  status: 'active' | 'inactive' | 'processing' | 'error';\n  size?: number;\n  file_type?: string;\n  url?: string;\n  content?: string;\n  metadata?: {\n    description?: string;\n    tags?: string[];\n    author?: string;\n    lastIndexed?: string;\n    [key: string]: any;\n  };\n  created_at: string;\n  updated_at: string;\n  indexed_at?: string;\n  error_message?: string;\n}\n\ninterface SourcesState {\n  sources: Source[];\n  currentSource: Source | null;\n  loading: boolean;\n  error: string | null;\n  searchQuery: string;\n  filter: {\n    status?: 'active' | 'inactive' | 'processing' | 'error' | 'all';\n    type?: 'file' | 'url' | 'text' | 'api' | 'all';\n    sortBy?: 'name' | 'created_at' | 'updated_at' | 'size';\n    sortOrder?: 'asc' | 'desc';\n  };\n  syncStatus: {\n    syncing: boolean;\n    lastSync?: string;\n    progress?: number;\n  };\n  \n  // Actions\n  fetchSources: (projectId: number) => Promise<void>;\n  fetchSource: (projectId: number, sourceId: string) => Promise<void>;\n  uploadSources: (projectId: number, files: File[]) => Promise<void>;\n  updateSource: (projectId: number, sourceId: string, updates: Partial<Source>) => Promise<void>;\n  deleteSource: (projectId: number, sourceId: string) => Promise<void>;\n  bulkDelete: (projectId: number, sourceIds: string[]) => Promise<void>;\n  syncSources: (projectId: number) => Promise<void>;\n  \n  // UI State\n  setSearchQuery: (query: string) => void;\n  setFilter: (filter: Partial<SourcesState['filter']>) => void;\n  selectSource: (source: Source | null) => void;\n  reset: () => void;\n}\n\n// Store implementation for source management\nexport const useSourceStore = create<SourcesState>((set, get) => ({\n  sources: [],\n  currentSource: null,\n  loading: false,\n  error: null,\n  searchQuery: '',\n  filter: {\n    status: 'all',\n    type: 'all',\n    sortBy: 'updated_at',\n    sortOrder: 'desc',\n  },\n  syncStatus: {\n    syncing: false,\n  },\n\n  fetchSources: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getSources(projectId);\n      \n      // Extract all sources from sitemaps and uploads\n      const allSources: Source[] = [];\n      \n      if (response.data.sitemaps) {\n        // Map API source structure to store's Source interface\n        response.data.sitemaps.forEach((apiSource: any) => {\n          allSources.push({\n            id: apiSource.id.toString(),\n            project_id: projectId,\n            name: apiSource.settings.sitemap_path || `Source ${apiSource.id}`,\n            type: 'url', // Map 'sitemap' to 'url'\n            status: 'active',\n            metadata: {\n              ...apiSource.settings,\n              pages: apiSource.pages,\n            },\n            created_at: apiSource.created_at,\n            updated_at: apiSource.updated_at,\n          });\n        });\n      }\n      \n      if (response.data.uploads) {\n        const uploads = Array.isArray(response.data.uploads) \n          ? response.data.uploads \n          : [response.data.uploads];\n          \n        uploads.forEach((apiSource: any) => {\n          allSources.push({\n            id: apiSource.id.toString(),\n            project_id: projectId,\n            name: `Upload ${apiSource.id}`,\n            type: 'file',\n            status: 'active',\n            metadata: {\n              ...apiSource.settings,\n              pages: apiSource.pages,\n            },\n            created_at: apiSource.created_at,\n            updated_at: apiSource.updated_at,\n          });\n        });\n      }\n      \n      set({ sources: allSources, loading: false });\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch sources',\n        loading: false,\n      });\n      toast.error('Failed to load sources');\n    }\n  },\n\n  fetchSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      // const client = getClient();\n      // const response = await client.getSource(projectId, sourceId);\n      \n      // const source = response.data;\n      // set({ currentSource: source, loading: false });\n      throw new Error('getSource API method not available');\n      \n      // Update in the list as well\n      // set(state => ({\n      //   sources: state.sources.map(s => s.id === sourceId ? source : s),\n      // }));\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch source',\n        loading: false,\n      });\n      toast.error('Failed to load source details');\n    }\n  },\n\n  uploadSources: async (projectId: number, files: File[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Upload files one by one for better progress tracking\n      const uploadPromises = files.map(file => \n        Promise.reject(new Error('uploadFile API method not available'))\n      );\n      \n      const responses = await Promise.all(uploadPromises);\n      \n      // Refresh sources list\n      await get().fetchSources(projectId);\n      \n      toast.success(`Successfully uploaded ${files.length} file(s)`);\n      set({ loading: false });\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to upload sources',\n        loading: false,\n      });\n      toast.error('Failed to upload files');\n      throw error;\n    }\n  },\n\n  updateSource: async (projectId: number, sourceId: string, updates: Partial<Source>) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      // await client.updateSource(projectId, sourceId, {\n      throw new Error('updateSource API method not available');\n      /*\n        name: updates.name,\n        metadata: updates.metadata,\n        status: updates.status,\n      }); */\n      \n      set(state => ({\n        sources: state.sources.map(source => \n          source.id === sourceId \n            ? { ...source, ...updates, updated_at: new Date().toISOString() } \n            : source\n        ),\n        currentSource: state.currentSource?.id === sourceId \n          ? { ...state.currentSource, ...updates, updated_at: new Date().toISOString() }\n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source updated successfully');\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to update source',\n        loading: false,\n      });\n      toast.error('Failed to update source');\n      throw error;\n    }\n  },\n\n  deleteSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteSource(projectId, parseInt(sourceId));\n      \n      set(state => ({\n        sources: state.sources.filter(source => source.id !== sourceId),\n        currentSource: state.currentSource?.id === sourceId ? null : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source deleted successfully');\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete source',\n        loading: false,\n      });\n      toast.error('Failed to delete source');\n      throw error;\n    }\n  },\n\n  bulkDelete: async (projectId: number, sourceIds: string[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Delete sources in parallel\n      await Promise.all(\n        sourceIds.map(sourceId => client.deleteSource(projectId, parseInt(sourceId)))\n      );\n      \n      set(state => ({\n        sources: state.sources.filter(source => !sourceIds.includes(source.id)),\n        currentSource: sourceIds.includes(state.currentSource?.id || '') \n          ? null \n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success(`Successfully deleted ${sourceIds.length} source(s)`);\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete sources',\n        loading: false,\n      });\n      toast.error('Failed to delete sources');\n      throw error;\n    }\n  },\n\n  syncSources: async (projectId: number) => {\n    set(state => ({\n      syncStatus: { ...state.syncStatus, syncing: true, progress: 0 }\n    }));\n    \n    try {\n      const client = getClient();\n      // await client.syncSources(projectId);\n      throw new Error('syncSources API method not available');\n      \n      // Refresh sources after sync\n      await get().fetchSources(projectId);\n      \n      set(state => ({\n        syncStatus: {\n          syncing: false,\n          lastSync: new Date().toISOString(),\n          progress: 100,\n        }\n      }));\n      \n      toast.success('Sources synchronized successfully');\n    } catch (error) {\n      set(state => ({\n        syncStatus: { ...state.syncStatus, syncing: false },\n        error: error instanceof Error ? error.message : 'Failed to sync sources',\n      }));\n      toast.error('Failed to sync sources');\n      throw error;\n    }\n  },\n\n  setSearchQuery: (query: string) => {\n    set({ searchQuery: query });\n  },\n\n  setFilter: (filter: Partial<SourcesState['filter']>) => {\n    set(state => ({\n      filter: { ...state.filter, ...filter },\n    }));\n  },\n\n  selectSource: (source: Source | null) => {\n    set({ currentSource: source });\n  },\n\n  reset: () => {\n    set({\n      sources: [],\n      currentSource: null,\n      loading: false,\n      error: null,\n      searchQuery: '',\n      filter: {\n        status: 'all',\n        type: 'all',\n        sortBy: 'updated_at',\n        sortOrder: 'desc',\n      },\n      syncStatus: {\n        syncing: false,\n      },\n    });\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { UserProfileStore, UserProfile } from '@/types';\n\n// CustomGPT.ai API Response format\ninterface CustomGPTResponse<T> {\n  status: 'success' | 'error';\n  data: T;\n}\n\nexport const useProfileStore = create<UserProfileStore>()(\n  persist(\n    (set, get) => ({\n      // Initial State\n      profile: null,\n      loading: false,\n      error: null,\n\n      // Profile Management - GET /api/v1/user\n      fetchProfile: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.getUserProfile();\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n          } else {\n            throw new Error('Failed to fetch profile');\n          }\n        } catch (error: any) {\n          console.error('Failed to fetch profile:', error);\n          \n          let errorMessage = 'Failed to fetch profile';\n          \n          if (error.status === 401) {\n            errorMessage = 'Authentication required. Please log in again.';\n            toast.error('Your session has expired. Please log in again.');\n          } else if (error.status === 500) {\n            errorMessage = 'Server error occurred. Please try again later.';\n            toast.error('Server error. Please try again later.');\n          } else {\n            toast.error('Failed to load profile');\n          }\n          \n          set({ \n            error: errorMessage,\n            loading: false \n          });\n        }\n      },\n\n      // Profile Update - POST /api/v1/user (multipart/form-data)\n      updateProfile: async (name: string, profilePhoto?: File) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Create FormData for multipart request\n          const formData = new FormData();\n          formData.append('name', name);\n          \n          if (profilePhoto) {\n            formData.append('profile_photo', profilePhoto);\n          }\n          \n          const response = await client.updateUserProfile(formData);\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n            toast.success('Profile updated successfully');\n          } else {\n            throw new Error('Failed to update profile');\n          }\n        } catch (error: any) {\n          console.error('Failed to update profile:', error);\n          \n          let errorMessage = 'Failed to update profile';\n          \n          if (error.status === 401) {\n            errorMessage = 'Authentication required. Please log in again.';\n            toast.error('Your session has expired. Please log in again.');\n          } else if (error.status === 500) {\n            errorMessage = 'Server error occurred. Please try again later.';\n            toast.error('Server error. Please try again later.');\n          } else {\n            toast.error('Failed to update profile');\n          }\n          \n          set({ \n            error: errorMessage,\n            loading: false \n          });\n        }\n      },\n\n      // Utility\n      reset: () => {\n        set({\n          profile: null,\n          loading: false,\n          error: null,\n        });\n      },\n    }),\n    {\n      name: 'profile-store',\n      partialize: (state) => ({\n        profile: state.profile,\n      }),\n    }\n  )\n);","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport type { AgentLicense } from '@/types';\n\ninterface LicenseStore {\n  licenses: AgentLicense[];\n  loading: boolean;\n  error: string | null;\n  \n  fetchLicenses: (projectId: number) => Promise<void>;\n  createLicense: (projectId: number, name: string) => Promise<AgentLicense>;\n  updateLicense: (projectId: number, licenseId: string, name: string) => Promise<void>;\n  deleteLicense: (projectId: number, licenseId: string) => Promise<void>;\n  clearError: () => void;\n}\n\nexport const useLicenseStore = create<LicenseStore>((set, get) => ({\n  licenses: [],\n  loading: false,\n  error: null,\n\n  fetchLicenses: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getLicenses(projectId);\n      \n      logger.info('LICENSES', 'API Response', {\n        projectId,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataType: Array.isArray(response?.data) ? 'array' : typeof response?.data,\n        dataLength: Array.isArray(response?.data) ? response.data.length : 0,\n        fullResponse: response\n      });\n      \n      // Handle response format based on API documentation\n      const licenses = Array.isArray(response.data) ? response.data : [];\n      \n      logger.info('LICENSES', 'Processed licenses', {\n        count: licenses.length,\n        licenses: licenses.map((l: any) => ({ \n          name: l.name, \n          key: l.key?.substring(0, 8) + '...', \n          project_id: l.project_id \n        }))\n      });\n      \n      set({ \n        licenses,\n        loading: false \n      });\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to fetch licenses', {\n        projectId,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        fullError: error\n      });\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch licenses';\n      set({ \n        error: errorMessage,\n        loading: false,\n        licenses: []\n      });\n    }\n  },\n\n  createLicense: async (projectId: number, name: string) => {\n    set({ loading: true, error: null });\n    \n    logger.info('LICENSES', 'Creating license', {\n      projectId,\n      name\n    });\n    \n    try {\n      const client = getClient();\n      const response = await client.createLicense(projectId, { name });\n      \n      logger.info('LICENSES', 'Create license API response', {\n        projectId,\n        name,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataStructure: response?.data ? Object.keys(response.data) : [],\n        licenseKey: response.data?.licenseKey?.substring(0, 8) + '...',\n        fullResponse: response\n      });\n      \n      // Handle response format based on API documentation\n      // Response contains { license: {...}, licenseKey: \"...\" }\n      const newLicense = response.data?.license || response.data;\n      \n      if (newLicense) {\n        logger.info('LICENSES', 'New license created', {\n          licenseName: newLicense.name,\n          licenseKey: newLicense.key?.substring(0, 8) + '...',\n          project_id: newLicense.project_id\n        });\n        \n        set(state => ({\n          licenses: [...state.licenses, newLicense],\n          loading: false\n        }));\n      }\n      \n      return newLicense;\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to create license', {\n        projectId,\n        name,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        fullError: error\n      });\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to create license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  updateLicense: async (projectId: number, licenseId: string, name: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.updateLicense(projectId, licenseId, { name });\n      \n      logger.info('LICENSES', 'Updated license', {\n        projectId,\n        licenseId,\n        name\n      });\n      \n      // Handle response format based on API documentation\n      const updatedLicense = (response as any).license || response.data;\n      \n      if (updatedLicense) {\n        set(state => ({\n          licenses: state.licenses.map(license => \n            license.key === licenseId ? { ...license, name, updated_at: new Date().toISOString() } : license\n          ),\n          loading: false\n        }));\n      }\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to update license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to update license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  deleteLicense: async (projectId: number, licenseId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteLicense(projectId, licenseId);\n      \n      logger.info('LICENSES', 'Deleted license', {\n        projectId,\n        licenseId\n      });\n      \n      set(state => ({\n        licenses: state.licenses.filter(license => license.key !== licenseId),\n        loading: false\n      }));\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to delete license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to delete license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  clearError: () => {\n    set({ error: null });\n  }\n}));","/**\n * Button Component\n * \n * Reusable button component with multiple variants and sizes.\n * Built with class-variance-authority for type-safe styling.\n * \n * Variants:\n * - default: Primary brand button with shadow\n * - destructive: Red danger button for destructive actions\n * - outline: Secondary button with border\n * - secondary: Gray background button\n * - ghost: Transparent button with hover state\n * - link: Text-only button styled as link\n * \n * Sizes:\n * - default: Standard size (h-10)\n * - sm: Small size (h-8)\n * - lg: Large size (h-12)\n * - icon: Square icon button (10x10)\n * \n * Features:\n * - Full keyboard accessibility\n * - Focus ring for keyboard navigation\n * - Disabled state handling\n * - Smooth transitions\n * - Responsive to all button HTML attributes\n * \n * Usage examples:\n * <Button>Click me</Button>\n * <Button variant=\"destructive\">Delete</Button>\n * <Button size=\"sm\" variant=\"outline\">Cancel</Button>\n * <Button size=\"icon\" variant=\"ghost\"><Icon /></Button>\n * \n * Features:\n * - Comprehensive variant system with brand-consistent styling\n * - Professional color schemes aligned with design guidelines\n * - Loading states with integrated spinner animations\n * - Button group functionality for complex interfaces\n * - Full icon support with flexible positioning options\n */\n\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\n/**\n * Button variant configuration using class-variance-authority\n * \n * Base classes apply to all buttons, then variant-specific\n * classes are added based on the variant and size props.\n */\nconst buttonVariants = cva(\n  // Base classes for all buttons\n  'inline-flex items-center justify-center rounded-lg text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background',\n  {\n    variants: {\n      variant: {\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90 shadow-sm',\n        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-sm',\n        outline: 'border border-input bg-background hover:bg-accent hover:text-accent-foreground',\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n        ghost: 'hover:bg-accent hover:text-accent-foreground',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-10 py-2 px-4',\n        sm: 'h-8 px-3 text-xs',\n        lg: 'h-12 px-8',\n        icon: 'h-10 w-10',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\n/**\n * Button component props\n * \n * Extends standard HTML button attributes with variant props\n * @property variant - Visual style variant\n * @property size - Button size preset\n * @property asChild - Whether to render as child component (for composition)\n */\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\n/**\n * Button Component\n * \n * Forward ref component for proper ref handling in forms\n * and other use cases requiring direct DOM access.\n */\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    return (\n      <button\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };","/**\n * Avatar Component\n * \n * Reusable avatar component that displays agent avatars with fallback to default icons.\n * Supports different sizes, shapes, and fallback icons for various use cases.\n * \n * Features:\n * - Image loading with error handling\n * - Multiple size variants\n * - Customizable fallback icons\n * - Consistent styling across the application\n * - Accessibility support\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot, User } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport type { Agent } from '@/types';\n\nexport interface AvatarProps {\n  /** Agent/project data containing avatar information */\n  agent?: Agent | null;\n  /** Avatar image URL (alternative to agent prop) */\n  src?: string;\n  /** Alt text for the image */\n  alt?: string;\n  /** Size variant */\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  /** Shape variant */\n  shape?: 'circle' | 'rounded' | 'square';\n  /** Fallback icon type */\n  fallback?: 'bot' | 'user' | 'none';\n  /** Whether this avatar represents a selected/active state */\n  isSelected?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Avatar size configurations\n */\nconst sizeVariants = {\n  xs: {\n    container: 'w-4 h-4',\n    icon: 'w-2 h-2'\n  },\n  sm: {\n    container: 'w-6 h-6', \n    icon: 'w-3 h-3'\n  },\n  md: {\n    container: 'w-8 h-8',\n    icon: 'w-4 h-4'\n  },\n  lg: {\n    container: 'w-10 h-10',\n    icon: 'w-5 h-5'\n  },\n  xl: {\n    container: 'w-12 h-12',\n    icon: 'w-6 h-6'\n  }\n};\n\n/**\n * Avatar shape configurations\n */\nconst shapeVariants = {\n  circle: 'rounded-full',\n  rounded: 'rounded-lg', \n  square: 'rounded-none'\n};\n\n/**\n * Avatar Component\n * \n * Displays agent avatar with proper fallbacks and error handling.\n * \n * @param agent - Agent object containing avatar settings\n * @param src - Direct image URL (overrides agent avatar)\n * @param alt - Alt text for accessibility\n * @param size - Size variant (xs, sm, md, lg, xl)\n * @param shape - Shape variant (circle, rounded, square)\n * @param fallback - Fallback icon type\n * @param isSelected - Whether avatar represents selected state\n * @param className - Additional CSS classes\n */\nexport const Avatar: React.FC<AvatarProps> = ({\n  agent,\n  src,\n  alt,\n  size = 'md',\n  shape = 'circle',\n  fallback = 'bot',\n  isSelected = false,\n  className\n}) => {\n  const [imageError, setImageError] = React.useState(false);\n  \n  // Determine the avatar URL from props or agent settings\n  const avatarUrl = src || agent?.settings?.chatbot_avatar;\n  \n  // Generate alt text if not provided\n  const altText = alt || (agent?.project_name ? `${agent.project_name} avatar` : 'Avatar');\n  \n  // Get size and shape classes\n  const sizeClasses = sizeVariants[size];\n  const shapeClass = shapeVariants[shape];\n  \n  // Determine background color based on state\n  const backgroundClass = isSelected \n    ? 'bg-brand-600' \n    : 'bg-gray-200 hover:bg-gray-300 transition-colors';\n  \n  // Handle image load error\n  const handleImageError = () => {\n    setImageError(true);\n  };\n  \n  // Reset error state when avatar URL changes\n  React.useEffect(() => {\n    setImageError(false);\n  }, [avatarUrl]);\n  \n  // Render fallback icon\n  const renderFallbackIcon = () => {\n    if (fallback === 'none') return null;\n    \n    const iconClass = cn(\n      sizeClasses.icon,\n      isSelected ? 'text-white' : 'text-gray-600'\n    );\n    \n    switch (fallback) {\n      case 'user':\n        return <User className={iconClass} />;\n      case 'bot':\n      default:\n        return <Bot className={iconClass} />;\n    }\n  };\n  \n  return (\n    <div className={cn(\n      'flex items-center justify-center flex-shrink-0 overflow-hidden',\n      sizeClasses.container,\n      shapeClass,\n      backgroundClass,\n      className\n    )}>\n      {avatarUrl && !imageError ? (\n        <img\n          src={avatarUrl}\n          alt={altText}\n          className=\"w-full h-full object-cover\"\n          onError={handleImageError}\n          loading=\"lazy\"\n        />\n      ) : (\n        renderFallbackIcon()\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Avatar Component\n * \n * Specialized avatar component for agent/project displays.\n * Uses 'bot' fallback by default and extracts name for alt text.\n * \n * @param agent - Agent object\n * @param size - Size variant\n * @param isSelected - Selection state\n * @param className - Additional classes\n */\nexport const AgentAvatar: React.FC<{\n  agent?: Agent | null;\n  size?: AvatarProps['size'];\n  isSelected?: boolean;\n  className?: string;\n}> = ({ agent, size = 'md', isSelected = false, className }) => {\n  return (\n    <Avatar\n      agent={agent}\n      size={size}\n      shape=\"circle\"\n      fallback=\"bot\"\n      isSelected={isSelected}\n      alt={agent?.project_name ? `${agent.project_name} avatar` : 'Agent avatar'}\n      className={className}\n    />\n  );\n};\n\n/**\n * User Avatar Component\n * \n * Specialized avatar component for user displays.\n * Uses 'user' fallback by default.\n * \n * @param src - Avatar image URL\n * @param size - Size variant  \n * @param className - Additional classes\n */\nexport const UserAvatar: React.FC<{\n  src?: string;\n  size?: AvatarProps['size'];\n  className?: string;\n}> = ({ src, size = 'md', className }) => {\n  return (\n    <Avatar\n      src={src}\n      size={size}\n      shape=\"circle\"\n      fallback=\"user\"\n      alt=\"User avatar\"\n      className={className}\n    />\n  );\n};","/**\n * Citation List Component\n * \n * Displays a list of source citations from the AI's response.\n * Shows where the information came from with expandable details.\n * \n * Features:\n * - Expandable citation cards\n * - Confidence score visualization\n * - Direct source links\n * - Show more/less functionality\n * - Smooth expand/collapse animations\n * - Citation numbering\n * - View details modal integration\n * \n * UI/UX:\n * - Compact card design\n * - Progressive disclosure pattern\n * - Visual confidence indicators\n * - Hover states for interactivity\n * - Staggered animation on load\n * \n * Citation Display:\n * - Title and source URL\n * - Content preview\n * - Confidence percentage\n * - External link to source\n * - Details button for modal\n * \n * Features:\n * - Advanced citation filtering and intelligent search capabilities\n * - Professional export functionality for research workflows\n * - Enhanced confidence visualization with detailed analytics\n * - Smart citation grouping by domain and source type\n * - Interactive tooltips and one-click copy functionality\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  BookOpen, \n  ChevronDown, \n  ExternalLink,\n  FileText \n} from 'lucide-react';\n\nimport type { CitationProps, Citation } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\n/**\n * Props for individual citation card\n * \n * @property citation - Citation data object\n * @property index - Display index (1-based)\n * @property isExpanded - Whether card is expanded\n * @property onToggle - Toggle expansion callback\n * @property onClick - Optional click handler for details\n * @property onPreviewClick - Optional click handler for file preview\n */\ninterface CitationCardProps {\n  citation: Citation;\n  index: number;\n  isExpanded: boolean;\n  onToggle: () => void;\n  onClick?: (citation: Citation) => void;\n  onPreviewClick?: (citation: Citation) => void;\n}\n\n/**\n * Citation Card Component\n * \n * Individual citation with expandable details.\n * Shows title, source, content, and confidence score.\n */\nconst CitationCard: React.FC<CitationCardProps> = ({\n  citation,\n  index,\n  isExpanded,\n  onToggle,\n  onClick,\n  onPreviewClick,\n}) => {\n  return (\n    <div className=\"border border-gray-200 rounded-lg overflow-hidden transition-all hover:border-gray-300\">\n      <button\n        onClick={onToggle}\n        className=\"w-full px-3 py-2 flex items-center gap-3 hover:bg-gray-50 transition-colors text-left\"\n      >\n        {/* Citation Index */}\n        <div className=\"flex-shrink-0 w-6 h-6 rounded bg-brand-100 flex items-center justify-center\">\n          <span className=\"text-xs font-medium text-brand-700\">{index}</span>\n        </div>\n        \n        {/* Citation Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"font-medium text-sm text-gray-900 line-clamp-1\">\n            {citation.title}\n          </div>\n          <div className=\"text-xs text-gray-500 line-clamp-1\">\n            {citation.source || citation.url}\n          </div>\n        </div>\n        \n        {/* Expand Icon */}\n        <ChevronDown\n          className={cn(\n            'w-4 h-4 text-gray-400 transition-transform flex-shrink-0',\n            isExpanded && 'rotate-180'\n          )}\n        />\n      </button>\n      \n      {/* Expanded Content */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: 'auto', opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"px-3 py-2 border-t border-gray-100 bg-gray-50\">\n              <p className=\"text-sm text-gray-700 mb-2\">\n                {citation.content}\n              </p>\n              \n              \n              {/* Actions */}\n              <div className=\"flex items-center gap-2\">\n                {citation.url && (\n                  <a\n                    href={citation.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"inline-flex items-center gap-1 text-xs text-brand-600 hover:text-brand-700 transition-colors\"\n                  >\n                    View source\n                    <ExternalLink className=\"w-3 h-3\" />\n                  </a>\n                )}\n                \n                {onClick && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onClick(citation)}\n                    className=\"h-6 px-2 text-xs\"\n                  >\n                    View details\n                  </Button>\n                )}\n                \n                {onPreviewClick && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onPreviewClick(citation)}\n                    className=\"h-6 px-2 text-xs\"\n                  >\n                    <FileText className=\"w-3 h-3 mr-1\" />\n                    Preview file\n                  </Button>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\n/**\n * Citation List Component\n * \n * Main component that renders a list of citations with progressive disclosure.\n * Handles expansion state and show more/less functionality.\n * \n * @param citations - Array of citation objects to display\n * @param onCitationClick - Optional handler for citation detail clicks\n * @param maxVisible - Maximum citations to show initially (default: 5)\n * @param className - Additional CSS classes\n */\nexport const CitationList: React.FC<CitationProps & { onPreviewClick?: (citation: Citation) => void }> = ({ \n  citations, \n  onCitationClick,\n  onPreviewClick,\n  maxVisible = 5,\n  className \n}) => {\n  // Track which citations are expanded\n  const [expanded, setExpanded] = useState<Set<string>>(new Set());\n  // Track whether to show all citations or just maxVisible\n  const [showAll, setShowAll] = useState(false);\n  \n  const visibleCitations = showAll ? citations : citations.slice(0, maxVisible);\n  const hasMore = citations.length > maxVisible;\n\n  /**\n   * Toggle citation expansion state\n   * \n   * Uses Set for efficient lookup and update of expanded citations\n   */\n  const toggleExpanded = (citationId: string) => {\n    const newExpanded = new Set(expanded);\n    if (expanded.has(citationId)) {\n      newExpanded.delete(citationId);\n    } else {\n      newExpanded.add(citationId);\n    }\n    setExpanded(newExpanded);\n  };\n\n  if (citations.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={cn('mt-4 space-y-2', className)}>\n      {/* Header */}\n      <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n        <BookOpen className=\"w-4 h-4\" />\n        <span className=\"font-medium\">Sources</span>\n        <span className=\"text-gray-400\">({citations.length})</span>\n        \n        {hasMore && (\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => setShowAll(!showAll)}\n            className=\"ml-auto h-6 px-2 text-xs\"\n          >\n            {showAll ? 'Show less' : `Show all ${citations.length}`}\n          </Button>\n        )}\n      </div>\n      \n      {/* Citations */}\n      <div className=\"space-y-2\">\n        <AnimatePresence>\n          {visibleCitations.map((citation, idx) => (\n            <motion.div\n              key={citation.id}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.2, delay: idx * 0.05 }}\n            >\n              <CitationCard\n                citation={citation}\n                index={idx + 1}\n                isExpanded={expanded.has(citation.id)}\n                onToggle={() => toggleExpanded(citation.id)}\n                onClick={onCitationClick}\n                onPreviewClick={onPreviewClick}\n              />\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n      \n      {/* Load More Button */}\n      {hasMore && !showAll && (\n        <div className=\"pt-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setShowAll(true)}\n            className=\"w-full\"\n          >\n            Show {citations.length - maxVisible} more sources\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Message Details Component\n * \n * Displays additional metadata and information about a message\n * that's not shown in the main UI. Includes user ID, conversation ID,\n * metadata, and timestamps.\n * \n * Features:\n * - Collapsible details section\n * - Formatted metadata display\n * - Copy functionality for technical details\n * - Responsive layout\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { ChevronDown, ChevronUp, Copy, Info } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { cn, copyToClipboard } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport type { MessageDetails as MessageDetailsType } from '@/types';\n\ninterface MessageDetailsProps {\n  /** The message details to display */\n  details?: MessageDetailsType;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Format a key name to be more readable\n */\nconst formatKey = (key: string): string => {\n  return key\n    .split('_')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n};\n\n/**\n * Format a value for display\n */\nconst formatValue = (value: any): string => {\n  if (value === null || value === undefined) {\n    return 'N/A';\n  }\n  if (typeof value === 'object') {\n    return JSON.stringify(value, null, 2);\n  }\n  return String(value);\n};\n\nexport const MessageDetails: React.FC<MessageDetailsProps> = ({ details, className }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  if (!details) {\n    return null;\n  }\n\n  const handleCopyAll = async () => {\n    const detailsText = JSON.stringify(details, null, 2);\n    const success = await copyToClipboard(detailsText);\n    if (success) {\n      toast.success('Details copied to clipboard');\n    }\n  };\n\n  const handleCopyValue = async (value: string) => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      toast.success('Value copied to clipboard');\n    }\n  };\n\n  return (\n    <div className={cn('mt-2', className)}>\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"flex items-center gap-1 text-xs text-gray-500 hover:text-gray-700 transition-colors\"\n      >\n        <Info className=\"w-3 h-3\" />\n        <span>More Details</span>\n        {isExpanded ? (\n          <ChevronUp className=\"w-3 h-3\" />\n        ) : (\n          <ChevronDown className=\"w-3 h-3\" />\n        )}\n      </button>\n\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"mt-2 p-3 bg-gray-50 rounded-lg border border-gray-200\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className=\"text-xs font-semibold text-gray-700\">Message Details</h4>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={handleCopyAll}\n                  className=\"h-6 px-2 text-xs\"\n                >\n                  <Copy className=\"w-3 h-3 mr-1\" />\n                  Copy All\n                </Button>\n              </div>\n\n              <div className=\"space-y-2\">\n                {/* Basic Details */}\n                {details.user_id !== undefined && (\n                  <DetailRow\n                    label=\"User ID\"\n                    value={String(details.user_id)}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n                \n                {details.conversation_id !== undefined && (\n                  <DetailRow\n                    label=\"Conversation ID\"\n                    value={String(details.conversation_id)}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n                \n                {details.updated_at && (\n                  <DetailRow\n                    label=\"Updated At\"\n                    value={new Date(details.updated_at).toLocaleString()}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n\n                {/* Metadata Section */}\n                {details.metadata && (\n                  <div className=\"mt-3 pt-2 border-t border-gray-200\">\n                    <h5 className=\"text-xs font-semibold text-gray-600 mb-2\">Metadata</h5>\n                    \n                    {details.metadata.user_ip && (\n                      <DetailRow\n                        label=\"User IP\"\n                        value={details.metadata.user_ip}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                    \n                    {details.metadata.user_agent && (\n                      <DetailRow\n                        label=\"User Agent\"\n                        value={details.metadata.user_agent}\n                        onCopy={handleCopyValue}\n                        truncate\n                      />\n                    )}\n                    \n                    {details.metadata.external_id && (\n                      <DetailRow\n                        label=\"External ID\"\n                        value={details.metadata.external_id}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                    \n                    {details.metadata.request_source && (\n                      <DetailRow\n                        label=\"Request Source\"\n                        value={details.metadata.request_source}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\ninterface DetailRowProps {\n  label: string;\n  value: string;\n  onCopy: (value: string) => void;\n  truncate?: boolean;\n}\n\nconst DetailRow: React.FC<DetailRowProps> = ({ label, value, onCopy, truncate }) => {\n  return (\n    <div className=\"flex items-start justify-between gap-2 text-xs\">\n      <span className=\"text-gray-600 font-medium whitespace-nowrap\">{label}:</span>\n      <div className=\"flex items-center gap-1 flex-1 min-w-0\">\n        <span \n          className={cn(\n            \"text-gray-800 break-all\",\n            truncate && \"truncate\"\n          )}\n          title={truncate ? value : undefined}\n        >\n          {value}\n        </span>\n        <button\n          onClick={() => onCopy(value)}\n          className=\"p-1 text-gray-400 hover:text-gray-600 transition-colors flex-shrink-0\"\n          title=\"Copy value\"\n        >\n          <Copy className=\"w-3 h-3\" />\n        </button>\n      </div>\n    </div>\n  );\n};","/**\n * Message Component\n * \n * Displays individual chat messages with rich formatting support.\n * \n * Features:\n * - Markdown rendering with GitHub Flavored Markdown\n * - Syntax highlighting for code blocks\n * - Copy functionality for code and messages\n * - User feedback (thumbs up/down)\n * - Citation display and interaction\n * - Animated entrance and streaming cursor\n * - Different layouts for user vs assistant messages\n * \n * Customization:\n * - Modify avatar styles in the component\n * - Adjust markdown prose styles\n * - Customize code block themes (currently using oneDark)\n * - Change animation settings\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { motion } from 'framer-motion';\nimport { \n  Bot, \n  User, \n  Copy, \n  ThumbsUp, \n  ThumbsDown, \n  RotateCw,\n  ExternalLink \n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { MessageProps, Citation, ChatMessage } from '@/types';\nimport { cn, copyToClipboard, formatTimestamp } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { AgentAvatar, UserAvatar } from '@/components/ui/avatar';\nimport { CitationList } from './CitationList';\nimport { MessageDetails } from './MessageDetails';\n\ninterface CodeBlockProps {\n  /** Programming language for syntax highlighting */\n  language: string;\n  /** Code content to display */\n  value: string;\n}\n\n/**\n * CodeBlock Component\n * \n * Renders code with syntax highlighting and a copy button.\n * Uses react-syntax-highlighter with the oneDark theme.\n * Copy button appears on hover.\n */\nconst CodeBlock: React.FC<CodeBlockProps> = ({ language, value }) => {\n  const [copied, setCopied] = useState(false);\n  \n  const handleCopy = async () => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      setCopied(true);\n      toast.success('Code copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    }\n  };\n\n  return (\n    <div className=\"relative group\">\n      <div className=\"absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          onClick={handleCopy}\n          className=\"h-6 px-2 text-xs bg-foreground text-background hover:bg-foreground/90\"\n        >\n          {copied ? 'Copied!' : 'Copy'}\n        </Button>\n      </div>\n      <SyntaxHighlighter\n        language={language}\n        style={oneDark}\n        customStyle={{\n          margin: 0,\n          borderRadius: '0.5rem',\n          fontSize: '0.875rem',\n        }}\n      >\n        {value}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\n/**\n * StreamingCursor Component\n * \n * Animated blinking cursor shown at the end of streaming messages\n * to indicate the AI is still generating content\n */\nconst StreamingCursor: React.FC = () => (\n  <span className=\"inline-block w-0.5 h-4 bg-foreground animate-blink ml-0.5 align-middle\" />\n);\n\ninterface MessageContentProps {\n  /** Markdown content to render */\n  content: string;\n  /** Whether the message is currently being streamed */\n  isStreaming?: boolean;\n}\n\n/**\n * MessageContent Component\n * \n * Renders message content with full markdown support including:\n * - Headers, lists, tables (via GFM)\n * - Inline and block code with syntax highlighting\n * - Links that open in new tabs\n * - Streaming cursor when content is being generated\n */\nconst MessageContent: React.FC<MessageContentProps> = ({ content, isStreaming }) => {\n  // Remove <CONTEXT> and </CONTEXT> tags from the content\n  const cleanedContent = content.replace(/<CONTEXT>|<\\/CONTEXT>/g, '').trim();\n  \n  return (\n    <div className=\"prose prose-sm max-w-none text-foreground\">\n      <ReactMarkdown\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || '');\n            const isInline = !match;\n            return !isInline && match ? (\n              <CodeBlock\n                language={match[1]}\n                value={String(children).replace(/\\n$/, '')}\n                {...props}\n              />\n            ) : (\n              <code className=\"px-1 py-0.5 rounded bg-muted text-sm font-medium\" {...props}>\n                {children}\n              </code>\n            );\n          },\n          a({ href, children }) {\n            return (\n              <a\n                href={href}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-brand-600 hover:text-brand-700 no-underline hover:underline inline-flex items-center gap-1\"\n              >\n                {children}\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            );\n          },\n        }}\n      >\n        {cleanedContent}\n      </ReactMarkdown>\n      {isStreaming && <StreamingCursor />}\n    </div>\n  );\n};\n\ninterface MessageActionsProps {\n  /** The message object containing content and metadata */\n  message: ChatMessage;\n  /** Handler for user feedback */\n  onFeedback?: (feedback: 'like' | 'dislike') => void;\n}\n\n/**\n * MessageActions Component\n * \n * Action buttons for assistant messages:\n * - Copy message content\n * - Thumbs up/down feedback\n * - Regenerate response (placeholder)\n * \n * Only visible on hover for cleaner UI\n */\nconst MessageActions: React.FC<MessageActionsProps> = ({ message, onFeedback }) => {\n  const [feedback, setFeedback] = useState<'like' | 'dislike' | null>(\n    message.feedback || null\n  );\n\n  const handleCopy = async () => {\n    const success = await copyToClipboard(message.content);\n    if (success) {\n      toast.success('Message copied to clipboard');\n    }\n  };\n\n  const handleFeedback = (type: 'like' | 'dislike') => {\n    setFeedback(type);\n    onFeedback?.(type);\n    toast.success('Thanks for your feedback!');\n  };\n\n  const handleRegenerate = () => {\n    // This would trigger message regeneration\n    toast.info('Regenerating response...');\n  };\n\n  return (\n    <div className=\"mt-3 flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleCopy}\n        className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n        title=\"Copy message\"\n      >\n        <Copy className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('like')}\n        className={cn(\n          'h-8 w-8 text-muted-foreground hover:text-foreground',\n          feedback === 'like' && 'text-success hover:text-success/90'\n        )}\n        title=\"Good response\"\n      >\n        <ThumbsUp className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('dislike')}\n        className={cn(\n          'h-8 w-8 text-muted-foreground hover:text-foreground',\n          feedback === 'dislike' && 'text-destructive hover:text-destructive/90'\n        )}\n        title=\"Bad response\"\n      >\n        <ThumbsDown className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleRegenerate}\n        className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n        title=\"Regenerate response\"\n      >\n        <RotateCw className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n};\n\n/**\n * Message Component - Main Export\n * \n * Renders a complete message with avatar, content, citations, and actions.\n * \n * Layout:\n * - User messages: White background, user avatar, plain text\n * - Assistant messages: Gray background, bot avatar, markdown content\n * \n * Features:\n * - Smooth entrance animation with Framer Motion\n * - Hover effects for action visibility\n * - Status indicators (sending, error)\n * - Timestamp display\n * - Citation list integration\n * \n * @param message - The message data to display\n * @param isStreaming - Whether this message is being streamed\n * @param isLast - Whether this is the last message (affects scrolling)\n * @param onCitationClick - Handler for citation interactions\n * @param onFeedback - Handler for user feedback\n * @param className - Additional CSS classes\n */\nexport const Message: React.FC<MessageProps> = ({ \n  message,\n  agent,\n  isStreaming = false, \n  isLast = false,\n  onCitationClick,\n  onPreviewClick,\n  onFeedback,\n  className \n}) => {\n  const isUser = message.role === 'user';\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n      className={cn(\n        'group relative px-4 py-6 transition-colors',\n        isUser ? 'bg-background' : 'bg-muted border-y border-border',\n        'hover:bg-opacity-80',\n        className\n      )}\n    >\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"flex-shrink-0\">\n          {isUser ? (\n            <UserAvatar \n              size=\"md\" \n              className=\"bg-secondary\"\n            />\n          ) : (\n            <AgentAvatar \n              agent={agent}\n              size=\"md\"\n              className=\"bg-background border border-border\"\n            />\n          )}\n        </div>\n        \n        {/* Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          {/* Message Status */}\n          {message.status && message.status !== 'sent' && (\n            <div className=\"mb-2 text-xs text-muted-foreground\">\n              {message.status === 'sending' && 'Sending...'}\n              {message.status === 'error' && (\n                <span className=\"text-red-500\">Failed to send</span>\n              )}\n            </div>\n          )}\n          \n          {/* Message Content */}\n          {isUser ? (\n            <p className=\"text-foreground whitespace-pre-wrap\">{message.content}</p>\n          ) : (\n            <MessageContent \n              content={message.content} \n              isStreaming={isStreaming}\n            />\n          )}\n          \n          {/* Citations */}\n          {message.citations && message.citations.length > 0 && (\n            <CitationList \n              citations={message.citations}\n              onCitationClick={onCitationClick}\n              onPreviewClick={onPreviewClick}\n            />\n          )}\n          \n          {/* Timestamp */}\n          <div className=\"mt-2 text-xs text-muted-foreground\">\n            {formatTimestamp(message.timestamp)}\n          </div>\n          \n          {/* Message Details (hidden by default) */}\n          <MessageDetails details={message.details} />\n          \n          {/* Actions */}\n          {!isUser && !isStreaming && (\n            <MessageActions \n              message={message}\n              onFeedback={onFeedback}\n            />\n          )}\n        </div>\n      </div>\n    </motion.div>\n  );\n};","/**\n * Loading Components\n * \n * Reusable loading indicators for consistent loading states across the app.\n * Includes spinner, skeleton loaders, and full-page loading states.\n */\n\nimport React from 'react';\nimport { cn } from '@/lib/utils';\nimport { Loader2 } from 'lucide-react';\n\ninterface SpinnerProps {\n  /** Size of the spinner */\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  /** Additional CSS classes */\n  className?: string;\n  /** Label for accessibility */\n  label?: string;\n}\n\n/**\n * Spinner Component\n * \n * Animated spinning loader for inline and overlay loading states\n */\nexport const Spinner: React.FC<SpinnerProps> = ({ \n  size = 'md', \n  className,\n  label = 'Loading...'\n}) => {\n  const sizeClasses = {\n    sm: 'h-4 w-4',\n    md: 'h-6 w-6',\n    lg: 'h-8 w-8',\n    xl: 'h-12 w-12'\n  };\n\n  return (\n    <Loader2 \n      className={cn(\n        'animate-spin text-primary',\n        sizeClasses[size],\n        className\n      )}\n      aria-label={label}\n    />\n  );\n};\n\ninterface SkeletonProps {\n  /** Additional CSS classes */\n  className?: string;\n  /** Whether to animate the skeleton */\n  animate?: boolean;\n}\n\n/**\n * Skeleton Component\n * \n * Placeholder loading state for content\n */\nexport const Skeleton: React.FC<SkeletonProps> = ({ \n  className,\n  animate = true\n}) => {\n  return (\n    <div\n      className={cn(\n        'bg-muted rounded',\n        animate && 'animate-pulse',\n        className\n      )}\n    />\n  );\n};\n\ninterface LoadingDotsProps {\n  /** Size of the dots */\n  size?: 'sm' | 'md' | 'lg';\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * LoadingDots Component\n * \n * Three animated dots for typing/processing indicators\n */\nexport const LoadingDots: React.FC<LoadingDotsProps> = ({ \n  size = 'md',\n  className \n}) => {\n  const sizeClasses = {\n    sm: 'h-1 w-1',\n    md: 'h-1.5 w-1.5',\n    lg: 'h-2 w-2'\n  };\n\n  return (\n    <div className={cn('flex space-x-1', className)}>\n      <div className={cn(\n        'bg-muted-foreground rounded-full animate-bounce',\n        sizeClasses[size],\n        '[animation-delay:-0.3s]'\n      )} />\n      <div className={cn(\n        'bg-muted-foreground rounded-full animate-bounce',\n        sizeClasses[size],\n        '[animation-delay:-0.15s]'\n      )} />\n      <div className={cn(\n        'bg-muted-foreground rounded-full animate-bounce',\n        sizeClasses[size]\n      )} />\n    </div>\n  );\n};\n\ninterface LoadingOverlayProps {\n  /** Whether the overlay is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Whether to blur the background */\n  blur?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * LoadingOverlay Component\n * \n * Full-screen or container overlay with loading indicator\n */\nexport const LoadingOverlay: React.FC<LoadingOverlayProps> = ({ \n  visible,\n  message,\n  blur = true,\n  className\n}) => {\n  if (!visible) return null;\n\n  return (\n    <div className={cn(\n      'absolute inset-0 z-50 flex items-center justify-center',\n      'bg-background/80 transition-opacity duration-200',\n      blur && 'backdrop-blur-sm',\n      className\n    )}>\n      <div className=\"flex flex-col items-center space-y-3\">\n        <Spinner size=\"lg\" />\n        {message && (\n          <p className=\"text-sm text-muted-foreground\">{message}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface MessageSkeletonProps {\n  /** Whether this represents an assistant message */\n  isAssistant?: boolean;\n  /** Number of lines to show */\n  lines?: number;\n}\n\n/**\n * MessageSkeleton Component\n * \n * Skeleton loader specifically for chat messages\n */\nexport const MessageSkeleton: React.FC<MessageSkeletonProps> = ({ \n  isAssistant = false,\n  lines = 3\n}) => {\n  return (\n    <div className={cn(\n      'flex gap-3 p-4',\n      isAssistant ? 'bg-muted' : 'bg-background'\n    )}>\n      {/* Avatar */}\n      <Skeleton className=\"h-8 w-8 rounded-full flex-shrink-0\" />\n      \n      {/* Message content */}\n      <div className=\"flex-1 space-y-2\">\n        {Array.from({ length: lines }).map((_, i) => (\n          <Skeleton \n            key={i}\n            className={cn(\n              'h-4',\n              i === lines - 1 ? 'w-3/4' : 'w-full'\n            )}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\ninterface ConversationSkeletonProps {\n  /** Number of conversation items to show */\n  count?: number;\n}\n\n/**\n * ConversationSkeleton Component\n * \n * Skeleton loader for conversation list items\n */\nexport const ConversationSkeleton: React.FC<ConversationSkeletonProps> = ({ \n  count = 3 \n}) => {\n  return (\n    <div className=\"space-y-2 p-2\">\n      {Array.from({ length: count }).map((_, i) => (\n        <div key={i} className=\"p-3 rounded-lg\">\n          <Skeleton className=\"h-4 w-3/4 mb-2\" />\n          <Skeleton className=\"h-3 w-1/2\" />\n        </div>\n      ))}\n    </div>\n  );\n};\n\ninterface LoadingButtonProps {\n  /** Whether the button is in loading state */\n  loading: boolean;\n  /** Button content when not loading */\n  children: React.ReactNode;\n  /** Loading text to display */\n  loadingText?: string;\n  /** Additional CSS classes */\n  className?: string;\n  /** Other button props */\n  [key: string]: any;\n}\n\n/**\n * LoadingButton Component\n * \n * Button with integrated loading state\n */\nexport const LoadingButton: React.FC<LoadingButtonProps> = ({ \n  loading,\n  children,\n  loadingText = 'Loading...',\n  className,\n  disabled,\n  ...props\n}) => {\n  return (\n    <button\n      className={cn(\n        'relative',\n        loading && 'cursor-not-allowed opacity-70',\n        className\n      )}\n      disabled={disabled || loading}\n      {...props}\n    >\n      {loading ? (\n        <span className=\"flex items-center justify-center gap-2\">\n          <Spinner size=\"sm\" />\n          <span>{loadingText}</span>\n        </span>\n      ) : (\n        children\n      )}\n    </button>\n  );\n};\n\ninterface ScreenLoadingProps {\n  /** Whether the screen loading is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Optional icon to show with the loading message */\n  icon?: React.ReactNode;\n  /** Background opacity (0-100) */\n  opacity?: number;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * ScreenLoading Component\n * \n * Full-screen loading overlay for page/screen transitions\n * with customizable message and icon\n */\nexport const ScreenLoading: React.FC<ScreenLoadingProps> = ({\n  visible,\n  message = 'Loading...',\n  icon,\n  opacity = 95,\n  className\n}) => {\n  if (!visible) return null;\n\n  return (\n    <div className={cn(\n      'fixed inset-0 z-[100] flex items-center justify-center',\n      'transition-all duration-300',\n      className\n    )}\n    style={{ backgroundColor: `rgba(255, 255, 255, ${opacity / 100})` }}>\n      <div className=\"flex flex-col items-center space-y-4 p-8\">\n        <div className=\"relative\">\n          {icon ? (\n            <div className=\"flex items-center justify-center w-16 h-16 bg-brand-50 rounded-full mb-2\">\n              {icon}\n            </div>\n          ) : (\n            <Spinner size=\"xl\" />\n          )}\n        </div>\n        {message && (\n          <div className=\"text-center\">\n            <p className=\"text-lg font-medium text-gray-900 mb-1\">{message}</p>\n            <div className=\"flex items-center justify-center space-x-1\">\n              <LoadingDots size=\"md\" />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface PageLoadingProps {\n  /** Whether the page loading is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Show skeleton content instead of spinner */\n  showSkeleton?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * PageLoading Component\n * \n * In-page loading state for content areas\n * with optional skeleton loading\n */\nexport const PageLoading: React.FC<PageLoadingProps> = ({\n  visible,\n  message = 'Loading page...',\n  showSkeleton = false,\n  className\n}) => {\n  if (!visible) return null;\n\n  if (showSkeleton) {\n    return (\n      <div className={cn('space-y-4 p-6', className)}>\n        <div className=\"space-y-3\">\n          <Skeleton className=\"h-8 w-1/3\" />\n          <Skeleton className=\"h-4 w-2/3\" />\n          <Skeleton className=\"h-4 w-1/2\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <div key={i} className=\"space-y-3\">\n              <Skeleton className=\"h-32 w-full rounded-lg\" />\n              <Skeleton className=\"h-4 w-3/4\" />\n              <Skeleton className=\"h-3 w-1/2\" />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\n      'flex flex-col items-center justify-center p-12',\n      className\n    )}>\n      <Spinner size=\"lg\" />\n      <p className=\"mt-4 text-gray-600\">{message}</p>\n    </div>\n  );\n};","\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md bg-gray-900 px-3 py-1.5 text-xs text-gray-50 animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }","'use client';\n\nimport { Mic } from 'lucide-react';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n\ninterface VoiceButtonProps {\n  onClick: () => void;\n  disabled?: boolean;\n}\n\nexport function VoiceButton({ onClick, disabled }: VoiceButtonProps) {\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <button\n            type=\"button\"\n            onClick={onClick}\n            disabled={disabled}\n            className=\"\n              relative h-10 w-10 flex-shrink-0 rounded-full\n              bg-gradient-to-br from-purple-500 via-pink-500 to-red-500\n              hover:from-purple-600 hover:via-pink-600 hover:to-red-600\n              active:from-purple-700 active:via-pink-700 active:to-red-700\n              disabled:from-gray-400 disabled:via-gray-500 disabled:to-gray-600\n              shadow-lg hover:shadow-xl active:shadow-md\n              transition-all duration-200 ease-in-out\n              hover:scale-105 active:scale-95\n              disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100\n              group\n              flex items-center justify-center\n              border-2 border-white/20 hover:border-white/30\n            \"\n          >\n            {/* Animated background glow */}\n            <div className=\"\n              absolute inset-0 rounded-full\n              bg-gradient-to-br from-purple-400/30 via-pink-400/30 to-red-400/30\n              opacity-0 group-hover:opacity-100\n              animate-pulse\n              transition-opacity duration-300\n              blur-sm\n            \" />\n            \n            {/* Mic icon with enhanced styling */}\n            <Mic className=\"\n              h-5 w-5 text-white relative z-10\n              drop-shadow-sm\n              group-hover:drop-shadow-md\n              transition-all duration-200\n            \" />\n          </button>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p>Try voice mode</p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}","/**\n * ChatInput Component\n * \n * Rich input field for sending messages and uploading files.\n * \n * Features:\n * - Auto-expanding textarea (up to 200px height)\n * - File upload with drag-and-drop support\n * - File type and size validation\n * - Progress tracking for uploads\n * - Character count display\n * - Keyboard shortcuts (Enter to send, Shift+Enter for newline)\n * - Animated file chips and drag overlay\n * \n * Customization:\n * - Modify CONSTANTS in utils for file limits\n * - Adjust max textarea height (line 144)\n * - Customize accepted file types\n * - Style the drag overlay and file chips\n */\n\n'use client';\n\nimport React, { useState, useRef, useCallback, KeyboardEvent, FormEvent } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Send, \n  Square, \n  Paperclip, \n  X,\n  Upload,\n  AlertCircle \n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { InputProps, FileUpload } from '@/types';\nimport { cn, formatFileSize, getFileIcon, isFileTypeAllowed, generateId, CONSTANTS } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Spinner } from '@/components/ui/loading';\nimport { VoiceButton } from '@/components/voice/VoiceButton';\n\ninterface FileChipProps {\n  /** File upload object with metadata */\n  file: FileUpload;\n  /** Handler to remove this file */\n  onRemove: () => void;\n}\n\n/**\n * FileChip Component\n * \n * Displays an uploaded or uploading file with:\n * - File icon based on type\n * - Name and size\n * - Upload progress bar\n * - Remove button\n * - Error state indication\n */\nconst FileChip: React.FC<FileChipProps> = ({ file, onRemove }) => {\n  const fileIcon = getFileIcon(file.type);\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"flex items-center gap-2 px-3 py-1.5 bg-muted hover:bg-accent rounded-lg transition-colors\"\n    >\n      <div className=\"text-muted-foreground\">{fileIcon}</div>\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"text-sm font-medium text-foreground truncate\">\n          {file.name}\n        </div>\n        <div className=\"text-xs text-muted-foreground flex items-center gap-2\">\n          <span>{formatFileSize(file.size)}</span>\n          {file.status === 'uploading' && (\n            <>\n              <span>•</span>\n              <span>{file.progress}%</span>\n            </>\n          )}\n          {file.status === 'error' && (\n            <>\n              <span>•</span>\n              <span className=\"text-destructive flex items-center gap-1\">\n                <AlertCircle className=\"w-3 h-3\" />\n                Error\n              </span>\n            </>\n          )}\n        </div>\n      </div>\n      \n      {/* Progress Bar */}\n      {file.status === 'uploading' && (\n        <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-muted rounded-b\">\n          <div \n            className=\"h-full bg-brand-500 rounded-b transition-all duration-300\"\n            style={{ width: `${file.progress}%` }}\n          />\n        </div>\n      )}\n      \n      <button\n        onClick={onRemove}\n        className=\"p-0.5 rounded hover:bg-accent-foreground/20 transition-colors\"\n        disabled={file.status === 'uploading'}\n      >\n        <X className=\"w-3 h-3 text-muted-foreground\" />\n      </button>\n    </motion.div>\n  );\n};\n\ninterface FileUploadButtonProps {\n  /** Handler called when files are selected */\n  onUpload: (files: File[]) => void;\n  /** Whether the button is disabled */\n  disabled?: boolean;\n}\n\n/**\n * FileUploadButton Component\n * \n * Hidden file input with visible button trigger.\n * Accepts multiple files based on ACCEPTED_FILE_TYPES.\n */\nconst FileUploadButton: React.FC<FileUploadButtonProps> = ({ onUpload, disabled }) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    if (files.length > 0) {\n      onUpload(files);\n      e.target.value = '';\n    }\n  };\n  \n  return (\n    <>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept={CONSTANTS.ACCEPTED_FILE_TYPES.join(',')}\n        onChange={handleChange}\n        className=\"hidden\"\n      />\n      <Button\n        type=\"button\"\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleClick}\n        disabled={disabled}\n        className=\"h-10 w-10 text-muted-foreground hover:text-foreground\"\n        title=\"Upload files\"\n      >\n        <Paperclip className=\"h-5 w-5\" />\n      </Button>\n    </>\n  );\n};\n\n/**\n * ChatInput Component - Main Export\n * \n * Complete chat input with message composition and file upload.\n * \n * Props:\n * @param onSend - Handler called with message content and files\n * @param disabled - Disables input during message sending\n * @param placeholder - Placeholder text for the textarea\n * @param maxLength - Maximum message length (default from CONSTANTS)\n * @param className - Additional CSS classes\n * @param onVoiceClick - Handler for voice mode button click\n * \n * State Management:\n * - input: Current message text\n * - files: Array of uploaded/uploading files\n * - isDragOver: Drag-and-drop state\n * \n * @example\n * <ChatInput \n *   onSend={(message, files) => handleSend(message, files)}\n *   disabled={isLoading}\n *   onVoiceClick={() => setVoiceModalOpen(true)}\n * />\n */\nexport const ChatInput: React.FC<InputProps> = ({ \n  onSend,\n  disabled = false,\n  placeholder = \"Send a message...\",\n  maxLength = CONSTANTS.MAX_MESSAGE_LENGTH,\n  className,\n  onVoiceClick\n}) => {\n  const [input, setInput] = useState('');\n  const [files, setFiles] = useState<FileUpload[]>([]);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \n  /**\n   * Auto-resize textarea based on content\n   * Grows up to maxHeight (200px) then scrolls\n   */\n  const adjustTextareaHeight = useCallback(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      const scrollHeight = textarea.scrollHeight;\n      const maxHeight = 200; // Max height in pixels - customize as needed\n      textarea.style.height = `${Math.min(scrollHeight, maxHeight)}px`;\n    }\n  }, []);\n  \n  // Handle text input changes\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    if (value.length <= maxLength) {\n      setInput(value);\n      adjustTextareaHeight();\n    }\n  };\n  \n  // Handle key presses\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e as any);\n    }\n  };\n  \n  // Handle form submission\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    \n    if (disabled) return;\n    if (!input.trim() && files.length === 0) return;\n    \n    // Convert FileUpload objects to File objects\n    const fileObjects = files\n      .filter(f => f.status === 'uploaded')\n      .map(f => f.file); // Use the actual File object\n    \n    onSend(input.trim(), fileObjects);\n    \n    // Reset form\n    setInput('');\n    setFiles([]);\n    \n    // Reset textarea height\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n    }\n    \n    // Focus textarea\n    setTimeout(() => {\n      textareaRef.current?.focus();\n    }, 0);\n  };\n  \n  /**\n   * Handle file uploads with validation\n   * Checks file size and type before accepting\n   * Shows toast notifications for validation errors\n   */\n  const handleFileUpload = useCallback((newFiles: File[]) => {\n    const validFiles = newFiles.filter(file => {\n      // Check file size against MAX_FILE_SIZE constant\n      if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n        toast.error(`File \"${file.name}\" is too large. Maximum size is ${formatFileSize(CONSTANTS.MAX_FILE_SIZE)}`);\n        return false;\n      }\n      \n      // Check file type against ACCEPTED_FILE_TYPES\n      if (!isFileTypeAllowed(file.type, CONSTANTS.ACCEPTED_FILE_TYPES)) {\n        toast.error(`File type \"${file.type}\" is not supported`);\n        return false;\n      }\n      \n      return true;\n    });\n    \n    const uploadFiles: FileUpload[] = validFiles.map(file => ({\n      id: generateId(),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      status: 'uploading',\n      progress: 0,\n      file: file, // Store the actual File object\n    }));\n    \n    setFiles(prev => [...prev, ...uploadFiles]);\n    \n    // Simulate file upload\n    uploadFiles.forEach(uploadFile => {\n      simulateUpload(uploadFile);\n    });\n    \n  }, []);\n  \n  /**\n   * Simulate file upload progress\n   * In production, replace with actual upload logic\n   * Updates progress in 100ms intervals\n   */\n  const simulateUpload = (uploadFile: FileUpload) => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 20;\n      \n      if (progress >= 100) {\n        progress = 100;\n        clearInterval(interval);\n        \n        // Mark file as uploaded\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, status: 'uploaded' as const, progress: 100 }\n            : f\n        ));\n      } else {\n        // Update progress\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, progress: Math.round(progress) }\n            : f\n        ));\n      }\n    }, 100);\n  };\n  \n  // Remove file\n  const removeFile = (fileId: string) => {\n    setFiles(prev => prev.filter(f => f.id !== fileId));\n  };\n  \n  /**\n   * Dropzone configuration for drag-and-drop\n   * - Accepts files based on ACCEPTED_FILE_TYPES\n   * - Validates file size\n   * - Shows overlay on drag\n   * - Disabled click/keyboard to use custom button\n   */\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: handleFileUpload,\n    noClick: true, // Use custom button instead\n    noKeyboard: true,\n    accept: CONSTANTS.ACCEPTED_FILE_TYPES.reduce((acc, type) => {\n      acc[type] = [];\n      return acc;\n    }, {} as Record<string, string[]>),\n    maxSize: CONSTANTS.MAX_FILE_SIZE,\n    onDragEnter: () => setIsDragOver(true),\n    onDragLeave: () => setIsDragOver(false),\n  });\n  \n  const canSend = !disabled && (input.trim() || files.some(f => f.status === 'uploaded'));\n  \n  return (\n    <div \n      {...getRootProps()}\n      className={cn(\n        'border-t border-border bg-background px-4 py-3 relative',\n        isDragActive && 'bg-brand-50',\n        className\n      )}\n    >\n      <input {...getInputProps()} />\n      \n      {/* Drag Overlay */}\n      <AnimatePresence>\n        {isDragActive && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-brand-50 border-2 border-dashed border-brand-300 rounded-lg flex items-center justify-center z-10\"\n          >\n            <div className=\"text-center\">\n              <Upload className=\"w-8 h-8 text-brand-600 mx-auto mb-2\" />\n              <p className=\"text-brand-700 font-medium\">Drop files here to upload</p>\n              <p className=\"text-brand-600 text-sm\">\n                Supports PDF, DOC, TXT, and more\n              </p>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* File Preview */}\n      <AnimatePresence>\n        {files.length > 0 && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"mb-2 flex flex-wrap gap-2\"\n          >\n            {files.map((file) => (\n              <FileChip\n                key={file.id}\n                file={file}\n                onRemove={() => removeFile(file.id)}\n              />\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      <form onSubmit={handleSubmit} className=\"flex items-end gap-2\">\n        {/* File Upload Button */}\n        <FileUploadButton\n          onUpload={handleFileUpload}\n          disabled={disabled}\n        />\n        \n        {/* Voice Button */}\n        {onVoiceClick && (\n          <VoiceButton\n            onClick={onVoiceClick}\n            disabled={disabled}\n          />\n        )}\n        \n        {/* Text Input */}\n        <div className=\"flex-1 relative\">\n          <textarea\n            ref={textareaRef}\n            value={input}\n            onChange={handleInputChange}\n            onKeyDown={handleKeyDown}\n            placeholder={placeholder}\n            disabled={disabled}\n            rows={1}\n            className={cn(\n              'w-full resize-none rounded-lg border border-input bg-background',\n              'px-3 py-2 pr-12',\n              'focus:outline-none focus:ring-2 focus:ring-brand-500 focus:border-transparent',\n              'disabled:opacity-50 disabled:cursor-not-allowed',\n              'min-h-[44px] max-h-[200px]',\n              'placeholder:text-muted-foreground text-foreground'\n            )}\n            style={{\n              height: 'auto',\n              overflowY: input.split('\\n').length > 5 ? 'auto' : 'hidden',\n            }}\n          />\n          \n          {/* Character Count */}\n          {input.length > 0 && (\n            <div className=\"absolute bottom-2 right-2 text-xs text-muted-foreground pointer-events-none\">\n              {input.length}/{maxLength}\n            </div>\n          )}\n        </div>\n        \n        {/* Send Button */}\n        <Button\n          type=\"submit\"\n          size=\"icon\"\n          disabled={!canSend}\n          className={cn(\n            'h-10 w-10 flex-shrink-0',\n            'transition-all duration-200'\n          )}\n          title={disabled ? 'Sending message...' : 'Send message'}\n        >\n          {disabled ? (\n            <Spinner size=\"sm\" className=\"text-white\" />\n          ) : (\n            <Send className=\"h-5 w-5\" />\n          )}\n        </Button>\n      </form>\n      \n      {/* Input Hints */}\n      <div className=\"mt-2 flex items-center justify-between text-xs text-muted-foreground\">\n        <span>Press Enter to send, Shift+Enter for new line</span>\n      </div>\n    </div>\n  );\n};","/**\n * Typing Indicator Component\n * \n * Shows animated typing indicator when AI is generating a response.\n * Provides visual feedback that the system is processing.\n * \n * Features:\n * - Three-dot bouncing animation\n * - AI avatar display\n * - Staggered animation delays\n * - Consistent styling with messages\n * - Subtle bounce effect\n * \n * Animation:\n * - Uses CSS animations defined in globals.css\n * - animate-bounce-subtle class for smooth motion\n * - Staggered delays (0ms, 100ms, 200ms)\n * - Creates wave-like effect\n * \n * Design:\n * - Matches message component layout\n * - Gray background for distinction\n * - Centered in chat container\n * - Responsive max-width\n * \n * Features:\n * - Multiple animation styles for enhanced visual feedback\n * - Contextual status messages for different AI processing states\n * - Progress indicators with time estimation for long operations\n * - Professional avatar customization with brand consistency\n * - Advanced loading patterns including skeleton alternatives\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n/**\n * Props for TypingIndicator\n * \n * @property className - Additional CSS classes for styling\n */\ninterface TypingIndicatorProps {\n  className?: string;\n}\n\n/**\n * Typing Indicator Component\n * \n * Displays animated dots to indicate AI is typing/processing.\n * Maintains visual consistency with message components.\n */\nexport const TypingIndicator: React.FC<TypingIndicatorProps> = ({ className }) => {\n  return (\n    <div className={cn(\n      'px-4 py-6 bg-muted border-y border-border',\n      className\n    )}>\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"w-8 h-8 rounded-full bg-background border border-border flex items-center justify-center flex-shrink-0\">\n          <Bot className=\"w-4 h-4 text-brand-600\" />\n        </div>\n        \n        {/* Typing Animation */}\n        <div className=\"flex items-center gap-1 py-2\">\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle\" />\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle delay-100\" />\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle delay-200\" />\n        </div>\n      </div>\n    </div>\n  );\n};","/**\n * Agent Selector Component\n * \n * Dropdown selector for switching between different CustomGPT agents.\n * Displays the current agent and allows users to select from available agents.\n * \n * Features:\n * - Current agent display with avatar\n * - Dropdown list of all available agents\n * - Agent metadata display (model, status)\n * - Quick settings access per agent\n * - Refresh agents functionality\n * - Loading and error states\n * - Click-outside-to-close behavior\n * - Smooth animations\n * \n * State Management:\n * - Uses agentStore for agent data\n * - Local state for dropdown open/close\n * - Automatic agent fetching on dropdown open\n * \n * UI/UX:\n * - Visual selection indicator (checkmark)\n * - Hover states for better interactivity\n * - Loading skeleton for initial load\n * - Error state with retry option\n * - Empty state guidance\n * \n * Features:\n * - Comprehensive agent selection with real-time filtering\n * - Intelligent agent management with favorites and categories\n * - Quick agent creation workflow integration\n * - Professional avatar display with status indicators\n * - Full keyboard navigation and accessibility support\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Bot, \n  ChevronDown, \n  Settings, \n  RefreshCw,\n  AlertCircle,\n  Check,\n  BarChart3,\n  User\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { useAgentStore } from '@/store';\nimport { Spinner } from '@/components/ui/loading';\nimport { getClient } from '@/lib/api/client';\n\n/**\n * Props for AgentSelector component\n * \n * @property className - Additional CSS classes\n * @property showSettings - Whether to show settings button for each agent\n * @property onSettingsClick - Callback when settings button is clicked\n */\ninterface AgentSelectorProps {\n  className?: string;\n  showSettings?: boolean;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Props for agent avatar component\n */\ninterface AgentAvatarProps {\n  agent: Agent | null;\n  size?: 'sm' | 'md';\n  isSelected?: boolean;\n  className?: string;\n}\n\n/**\n * Props for individual agent item in dropdown\n * \n * @property agent - Agent data object\n * @property isSelected - Whether this agent is currently selected\n * @property onSelect - Callback when agent is selected\n * @property onSettingsClick - Optional callback for settings button\n */\ninterface AgentItemProps {\n  agent: Agent;\n  isSelected: boolean;\n  onSelect: (agent: Agent) => void;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Agent Avatar Component\n * \n * Displays agent avatar with fallback to default icon\n */\nconst AgentAvatar: React.FC<AgentAvatarProps> = ({ \n  agent, \n  size = 'md', \n  isSelected = false, \n  className \n}) => {\n  const sizeClasses = {\n    sm: 'w-6 h-6',\n    md: 'w-8 h-8'\n  };\n  \n  const iconSizeClasses = {\n    sm: 'w-3 h-3',\n    md: 'w-4 h-4'\n  };\n\n  const avatarUrl = agent?.settings?.chatbot_avatar;\n\n  return (\n    <div className={cn(\n      'rounded-full flex items-center justify-center flex-shrink-0 overflow-hidden',\n      sizeClasses[size],\n      isSelected ? 'bg-brand-600' : 'bg-gray-200',\n      className\n    )}>\n      {avatarUrl ? (\n        <img\n          src={avatarUrl}\n          alt={`${agent?.project_name} avatar`}\n          className=\"w-full h-full object-cover\"\n          onError={(e) => {\n            // Fallback to icon if image fails to load\n            const target = e.target as HTMLImageElement;\n            target.style.display = 'none';\n            const parent = target.parentElement;\n            if (parent) {\n              const icon = document.createElement('div');\n              icon.className = `w-full h-full flex items-center justify-center`;\n              icon.innerHTML = `<svg class=\"${iconSizeClasses[size]} ${isSelected ? 'text-white' : 'text-gray-600'}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"></path></svg>`;\n              parent.appendChild(icon);\n            }\n          }}\n        />\n      ) : (\n        <User className={cn(\n          iconSizeClasses[size],\n          isSelected ? 'text-white' : 'text-gray-600'\n        )} />\n      )}\n    </div>\n  );\n};\n\n/**\n * Individual Agent Item Component\n * \n * Renders a single agent in the dropdown list with:\n * - Agent avatar and name\n * - Selection indicator\n * - Metadata (model, status)\n * - Settings button (optional)\n */\nconst AgentItem: React.FC<AgentItemProps> = ({ \n  agent, \n  isSelected, \n  onSelect, \n  onSettingsClick \n}) => {\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-between p-3 rounded-lg cursor-pointer transition-colors group',\n        'hover:bg-gray-50',\n        isSelected && 'bg-brand-50 hover:bg-brand-100'\n      )}\n      onClick={() => onSelect(agent)}\n    >\n      <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n        {/* Avatar */}\n        <AgentAvatar \n          agent={agent}\n          size=\"md\"\n          isSelected={isSelected}\n        />\n        \n        {/* Agent Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"font-medium text-gray-900 truncate\">\n              {agent.project_name}\n            </h3>\n            {isSelected && (\n              <Check className=\"w-4 h-4 text-brand-600 flex-shrink-0\" />\n            )}\n          </div>\n          \n          {/* Status */}\n          <div className=\"mt-1 text-xs text-gray-400\">\n            <span>Status: {agent.is_chat_active ? 'Active' : 'Inactive'}</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Settings Button */}\n      {onSettingsClick && (\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onSettingsClick(agent);\n          }}\n          className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-gray-400 hover:text-gray-600\"\n          title=\"Agent Settings\"\n        >\n          <Settings className=\"h-3 w-3\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Selector Component\n * \n * Main component that provides agent switching functionality.\n * Manages dropdown state and handles agent selection.\n * \n * @param className - Additional CSS classes for styling\n * @param showSettings - Whether to show settings buttons (default: true)\n * @param onSettingsClick - Handler for agent settings clicks\n */\nexport const AgentSelector: React.FC<AgentSelectorProps> = ({ \n  className,\n  showSettings = true,\n  onSettingsClick\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isSelectingAgent, setIsSelectingAgent] = useState(false);\n  const [loadingSettings, setLoadingSettings] = useState<Set<number>>(new Set());\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  \n  const { \n    agents, \n    currentAgent, \n    loading, \n    error, \n    fetchAgents, \n    loadMoreAgents,\n    selectAgent,\n    setAgents,\n    paginationMeta\n  } = useAgentStore();\n\n  /**\n   * Fetch settings for agents that don't have them loaded\n   */\n  const fetchAgentSettings = async (agentsToLoad: Agent[]) => {\n    const agentsNeedingSettings = agentsToLoad.filter(agent => \n      !agent.settings && !loadingSettings.has(agent.id)\n    );\n\n    if (agentsNeedingSettings.length === 0) return;\n\n    // Mark agents as loading\n    setLoadingSettings(prev => {\n      const newSet = new Set(prev);\n      agentsNeedingSettings.forEach(agent => newSet.add(agent.id));\n      return newSet;\n    });\n\n    try {\n      const client = getClient();\n      const settingsPromises = agentsNeedingSettings.map(async (agent) => {\n        try {\n          const response = await client.getAgentSettings(agent.id);\n          return {\n            agentId: agent.id,\n            settings: response.data || response\n          };\n        } catch (error) {\n          console.warn(`Failed to load settings for agent ${agent.id}:`, error);\n          return {\n            agentId: agent.id,\n            settings: null\n          };\n        }\n      });\n\n      const results = await Promise.all(settingsPromises);\n      \n      // Update agents with their settings\n      const updatedAgents = agents.map(agent => {\n        const result = results.find(r => r.agentId === agent.id);\n        if (result && result.settings) {\n          return { ...agent, settings: result.settings };\n        }\n        return agent;\n      });\n\n      setAgents(updatedAgents);\n\n    } catch (error) {\n      console.error('Failed to fetch agent settings:', error);\n    } finally {\n      // Clear loading state\n      setLoadingSettings(prev => {\n        const newSet = new Set(prev);\n        agentsNeedingSettings.forEach(agent => newSet.delete(agent.id));\n        return newSet;\n      });\n    }\n  };\n\n  /**\n   * Close dropdown when clicking outside\n   * \n   * Uses mousedown event for better UX (closes before click completes)\n   */\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [isOpen]);\n\n  /**\n   * Refresh agents list\n   * \n   * Fetches latest agents from the API and shows toast feedback.\n   * This will temporarily cause avatars to flicker as settings are reloaded.\n   */\n  const handleRefresh = async () => {\n    try {\n      await fetchAgents();\n      toast.success('Agents refreshed');\n    } catch (error) {\n      toast.error('Failed to refresh agents');\n    }\n  };\n\n  /**\n   * Handle agent selection\n   * \n   * Updates the current agent, closes dropdown, and shows confirmation\n   */\n  const handleSelectAgent = async (agent: Agent) => {\n    if (isSelectingAgent) return; // Prevent multiple selections\n    \n    setIsSelectingAgent(true);\n    try {\n      await selectAgent(agent);\n      setIsOpen(false);\n      toast.success(`Switched to ${agent.project_name}`);\n    } catch (error) {\n      toast.error('Failed to switch agent');\n    } finally {\n      // Add a small delay to show the loading state briefly\n      setTimeout(() => {\n        setIsSelectingAgent(false);\n      }, 300);\n    }\n  };\n\n  /**\n   * Fetch settings when agents are loaded and dropdown is open\n   * Only runs when needed to prevent unnecessary API calls\n   */\n  useEffect(() => {\n    if (isOpen && agents.length > 0) {\n      // Only fetch if there are agents without settings\n      const agentsNeedingSettings = agents.some(agent => !agent.settings);\n      if (agentsNeedingSettings) {\n        fetchAgentSettings(agents);\n      }\n    }\n  }, [isOpen, agents.length]);\n\n  /**\n   * Toggle dropdown and conditionally fetch agents\n   * \n   * Only fetches agents if the array is empty to prevent flickering.\n   * Settings are fetched via useEffect when agents are loaded.\n   */\n  const handleToggleDropdown = async () => {\n    const willOpen = !isOpen;\n    setIsOpen(willOpen);\n    \n    // Only fetch agents if we don't have any yet\n    // This prevents flickering caused by replacing agents that have settings\n    // with fresh agents that don't have settings loaded\n    if (willOpen && agents.length === 0) {\n      try {\n        await fetchAgents();\n      } catch (error) {\n        // Don't show error toast here as it might be annoying\n      }\n    }\n  };\n\n  if (loading && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-muted animate-pulse\" />\n          <div className=\"flex-1\">\n            <div className=\"h-4 bg-muted rounded animate-pulse mb-2\" />\n            <div className=\"h-3 bg-muted/50 rounded animate-pulse w-3/4\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-red-100 flex items-center justify-center flex-shrink-0\">\n            <AlertCircle className=\"w-4 h-4 text-red-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-red-600 font-medium\">Failed to load agents</p>\n            <p className=\"text-xs text-red-500\">{error}</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            className=\"text-red-600 hover:text-red-700\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentAgent && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-gray-200 flex items-center justify-center flex-shrink-0\">\n            <Bot className=\"w-4 h-4 text-gray-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-gray-600 font-medium\">No agents available</p>\n            <p className=\"text-xs text-gray-500\">Check your API configuration</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            disabled={loading}\n          >\n            <RefreshCw className={cn('w-4 h-4', loading && 'animate-spin')} />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('relative', className)} ref={dropdownRef}>\n      {/* Loading overlay when selecting agent */}\n      {isSelectingAgent && (\n        <div className=\"absolute inset-0 bg-background/80 backdrop-blur-sm rounded-lg flex items-center justify-center z-50\">\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <Spinner size=\"sm\" />\n            <span className=\"text-foreground\">Switching agent...</span>\n          </div>\n        </div>\n      )}\n      {/* Selected Agent Display */}\n      <button\n        onClick={handleToggleDropdown}\n        className={cn(\n          'w-full p-3 bg-background border border-border rounded-lg text-left transition-colors',\n          'hover:bg-accent focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent',\n          isOpen && 'ring-2 ring-ring border-transparent'\n        )}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            {/* Avatar */}\n            <AgentAvatar \n              agent={currentAgent}\n              size=\"md\"\n              isSelected={true}\n            />\n            \n            {/* Agent Info */}\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-medium text-gray-900 truncate\">\n                {currentAgent?.project_name || 'Select Agent'}\n              </h3>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {/* Analytics Button */}\n            {currentAgent && (\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  // Navigate to projects page with analytics tab\n                  window.location.href = `/projects?id=${currentAgent.id}&tab=analytics`;\n                }}\n                title=\"View Analytics\"\n                className=\"text-gray-600 hover:text-gray-900\"\n              >\n                <BarChart3 className=\"w-4 h-4\" />\n              </Button>\n            )}\n            \n            {/* Refresh Button */}\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleRefresh();\n              }}\n              disabled={loading}\n              className=\"h-6 w-6 text-gray-400 hover:text-gray-600\"\n              title=\"Refresh Agents\"\n            >\n              <RefreshCw className={cn('h-3 w-3', loading && 'animate-spin')} />\n            </Button>\n            \n            {/* Dropdown Arrow */}\n            <ChevronDown className={cn(\n              'w-4 h-4 text-gray-400 transition-transform',\n              isOpen && 'rotate-180'\n            )} />\n          </div>\n        </div>\n      </button>\n\n      {/* Dropdown */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-background border border-border rounded-lg shadow-lg z-50 max-h-80 overflow-y-auto\"\n          >\n            <div className=\"p-2\">\n              {/* Header */}\n              <div className=\"px-2 py-1 mb-2\">\n                <h4 className=\"text-xs font-medium text-gray-500 uppercase tracking-wide\">\n                  Available Agents ({Array.isArray(agents) ? agents.length : 0}\n                  {paginationMeta?.totalCount && paginationMeta.totalCount !== agents.length && (\n                    <span> of {paginationMeta.totalCount}</span>\n                  )})\n                </h4>\n              </div>\n              \n              {/* Agent List */}\n              <div className=\"space-y-1\">\n                {Array.isArray(agents) && agents.length > 0 ? (\n                  agents.map((agent) => (\n                    <AgentItem\n                      key={agent.id}\n                      agent={agent}\n                      isSelected={currentAgent?.id === agent.id}\n                      onSelect={handleSelectAgent}\n                      onSettingsClick={showSettings ? onSettingsClick : undefined}\n                    />\n                  ))\n                ) : (\n                  <div className=\"px-2 py-4 text-center\">\n                    <p className=\"text-sm text-gray-500\">No agents found</p>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={handleRefresh}\n                      className=\"mt-2\"\n                    >\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Refresh\n                    </Button>\n                  </div>\n                )}\n              </div>\n              \n              {/* Load More Button */}\n              {Array.isArray(agents) && agents.length > 0 && paginationMeta?.hasMore && (\n                <div className=\"px-2 py-2 border-t\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={async () => {\n                      try {\n                        await loadMoreAgents();\n                      } catch (error) {\n                        console.error('Failed to load more agents:', error);\n                      }\n                    }}\n                    disabled={loading}\n                    className=\"w-full\"\n                  >\n                    {loading ? (\n                      <>\n                        <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Loading...\n                      </>\n                    ) : (\n                      <>\n                        <ChevronDown className=\"w-4 h-4 mr-2\" />\n                        Load More Agents\n                      </>\n                    )}\n                  </Button>\n                </div>\n              )}\n              \n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","/**\n * Citation Details Modal Component\n * \n * Modal dialog that displays detailed information about a citation,\n * including Open Graph data fetched from the cited source.\n * \n * Features:\n * - Open Graph data display (title, description, image)\n * - Loading and error states\n * - Responsive modal design\n * - Image preview with error handling\n * - Direct link to source\n * - Citation metadata display\n * - Smooth animations\n * \n * API Integration:\n * - Fetches citation details via getCitation API\n * - Handles Open Graph data response\n * - Graceful error handling\n * - Automatic retry on prop changes\n * \n * UI/UX:\n * - Backdrop click to close\n * - Escape key support (via close button)\n * - Loading spinner during fetch\n * - Error message display\n * - Image fallback on load error\n * \n * Features:\n * - Advanced citation caching for improved performance\n * - Professional sharing and bookmarking functionality\n * - Enhanced image preview with zoom and gallery modes\n * - Citation analytics and usage tracking\n * - Comprehensive export options and related citation discovery\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  ExternalLink,\n  Loader,\n  AlertCircle,\n  Globe,\n  Image as ImageIcon\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { useAgentStore } from '@/store/agents';\n\n/**\n * Open Graph data structure for citations\n * \n * @property id - Citation ID\n * @property url - Source URL\n * @property title - Page title from Open Graph\n * @property description - Page description\n * @property image - Optional preview image URL\n */\ninterface CitationOpenGraphData {\n  id: number;\n  url: string;\n  title: string;\n  description: string;\n  image?: string;\n}\n\n/**\n * Props for CitationDetailsModal\n * \n * @property isOpen - Whether modal is visible\n * @property onClose - Callback to close modal\n * @property citationId - ID of citation to display\n * @property projectId - Optional project ID (uses current agent if not provided)\n */\ninterface CitationDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: number | string;\n  projectId?: number;\n}\n\n/**\n * Citation Details Modal Component\n * \n * Displays rich preview of citation with Open Graph data.\n * Fetches citation details from API when opened.\n */\nexport const CitationDetailsModal: React.FC<CitationDetailsModalProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  projectId\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [citationData, setCitationData] = useState<CitationOpenGraphData | null>(null);\n  const [imageError, setImageError] = useState(false);\n  \n  const { currentAgent } = useAgentStore();\n  const effectiveProjectId = projectId || currentAgent?.id;\n\n  /**\n   * Fetch citation details when modal opens\n   * \n   * Triggers API call when modal becomes visible and required data is available\n   */\n  useEffect(() => {\n    if (isOpen && effectiveProjectId && citationId) {\n      fetchCitationDetails();\n    }\n  }, [isOpen, effectiveProjectId, citationId]);\n\n  /**\n   * Fetch citation Open Graph data from API\n   * \n   * Handles:\n   * - Parameter validation\n   * - API call with proper typing\n   * - Error handling with user-friendly messages\n   * - Loading state management\n   * - Logging for debugging\n   */\n  const fetchCitationDetails = async () => {\n    if (!effectiveProjectId || !citationId) {\n      setError('Missing project or citation information');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    setImageError(false);\n\n    try {\n      const client = getClient();\n      const response = await client.getCitation(\n        effectiveProjectId, \n        typeof citationId === 'string' ? parseInt(citationId, 10) : citationId\n      );\n      \n      if (response.data) {\n        setCitationData(response.data as unknown as CitationOpenGraphData);\n        logger.info('CITATION', 'Citation details fetched', {\n          citationId,\n          projectId: effectiveProjectId,\n          hasImage: !!response.data.image\n        });\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch citation details';\n      setError(errorMessage);\n      logger.error('CITATION', 'Failed to fetch citation details', {\n        error: err,\n        citationId,\n        projectId: effectiveProjectId\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        {/* Backdrop */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onClick={onClose}\n          className=\"absolute inset-0 bg-black/50\"\n        />\n\n        {/* Modal */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.95 }}\n          className=\"relative bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-hidden\"\n        >\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b\">\n            <h2 className=\"text-lg font-semibold text-gray-900\">\n              Citation Details\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className=\"h-8 w-8\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-4 overflow-y-auto max-h-[calc(90vh-120px)]\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-gray-400\" />\n              </div>\n            ) : error ? (\n              <div className=\"flex items-center gap-3 p-4 bg-red-50 rounded-lg\">\n                <AlertCircle className=\"h-5 w-5 text-red-600 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-red-900\">Error loading citation</p>\n                  <p className=\"text-sm text-red-700 mt-1\">{error}</p>\n                </div>\n              </div>\n            ) : citationData ? (\n              <div className=\"space-y-4\">\n                {/* Open Graph Image */}\n                {citationData.image && !imageError && (\n                  <div className=\"relative rounded-lg overflow-hidden bg-gray-100\">\n                    <img\n                      src={citationData.image}\n                      alt={citationData.title}\n                      className=\"w-full h-auto\"\n                      onError={() => setImageError(true)}\n                    />\n                  </div>\n                )}\n\n                {/* Title */}\n                <div>\n                  <h3 className=\"text-xl font-semibold text-gray-900\">\n                    {citationData.title}\n                  </h3>\n                </div>\n\n                {/* URL */}\n                <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n                  <Globe className=\"h-4 w-4\" />\n                  <a\n                    href={citationData.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"hover:text-brand-600 transition-colors truncate\"\n                  >\n                    {citationData.url}\n                  </a>\n                </div>\n\n                {/* Description */}\n                {citationData.description && (\n                  <div className=\"prose prose-gray max-w-none\">\n                    <p className=\"text-gray-700\">{citationData.description}</p>\n                  </div>\n                )}\n\n                {/* Metadata */}\n                <div className=\"pt-4 border-t space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span className=\"text-gray-500\">Citation ID</span>\n                    <span className=\"font-mono text-gray-700\">#{citationData.id}</span>\n                  </div>\n                  {citationData.image && (\n                    <div className=\"flex items-center justify-between text-sm\">\n                      <span className=\"text-gray-500\">Has preview image</span>\n                      <ImageIcon className=\"h-4 w-4 text-gray-400\" />\n                    </div>\n                  )}\n                </div>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t bg-gray-50\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-xs text-gray-500\">\n                Open Graph data from cited source\n              </div>\n              {citationData && (\n                <a\n                  href={citationData.url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"inline-flex items-center gap-2 px-3 py-1.5 text-sm font-medium text-brand-600 hover:text-brand-700 transition-colors\"\n                >\n                  Visit source\n                  <ExternalLink className=\"h-3.5 w-3.5\" />\n                </a>\n              )}\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};","'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  FileText,\n  Download,\n  Loader,\n  AlertCircle,\n  Copy,\n  Check\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { toast } from 'sonner';\n\ninterface CitationFilePreviewProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: string;\n  fileName?: string;\n}\n\nexport const CitationFilePreview: React.FC<CitationFilePreviewProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  fileName = 'Citation File'\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [fileContent, setFileContent] = useState<string | null>(null);\n  const [contentType, setContentType] = useState<string>('text/plain');\n  const [copied, setCopied] = useState(false);\n\n  useEffect(() => {\n    if (isOpen && citationId) {\n      fetchFilePreview();\n    }\n  }, [isOpen, citationId]);\n\n  const fetchFilePreview = async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const client = getClient();\n      const response = await client.previewCitationFile(citationId);\n      \n      // Handle different response formats\n      if (typeof response === 'string') {\n        setFileContent(response);\n        setContentType('text/plain');\n      } else if (response.data) {\n        setFileContent(response.data.content || response.data);\n        setContentType(response.data.content_type || 'text/plain');\n      } else {\n        setFileContent(JSON.stringify(response, null, 2));\n        setContentType('application/json');\n      }\n      \n      logger.info('CITATION_PREVIEW', 'File preview fetched', {\n        citationId,\n        contentLength: fileContent?.length\n      });\n    } catch (err: any) {\n      logger.error('CITATION_PREVIEW', 'Failed to fetch file preview', {\n        error: err,\n        citationId\n      });\n      \n      if (err.status === 400) {\n        setError('Invalid citation ID.');\n      } else if (err.status === 401) {\n        setError('Authentication failed. Please log in again.');\n      } else if (err.status === 403) {\n        setError('Access denied. You do not have permission to view this file.');\n      } else if (err.status === 404) {\n        setError('Citation file not found.');\n      } else if (err.status === 500) {\n        setError('Server error. Please try again later.');\n      } else {\n        setError('Failed to load file preview.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCopy = async () => {\n    if (!fileContent) return;\n    \n    try {\n      await navigator.clipboard.writeText(fileContent);\n      setCopied(true);\n      toast.success('Content copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      toast.error('Failed to copy content');\n    }\n  };\n\n  const handleDownload = () => {\n    if (!fileContent) return;\n    \n    const blob = new Blob([fileContent], { type: contentType });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast.success('File downloaded');\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        {/* Backdrop */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onClick={onClose}\n          className=\"absolute inset-0 bg-black/50\"\n        />\n\n        {/* Modal */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.95 }}\n          className=\"relative bg-white rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden\"\n        >\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b\">\n            <div className=\"flex items-center gap-3\">\n              <FileText className=\"h-5 w-5 text-gray-600\" />\n              <h2 className=\"text-lg font-semibold text-gray-900\">\n                {fileName}\n              </h2>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleCopy}\n                disabled={!fileContent}\n              >\n                {copied ? (\n                  <>\n                    <Check className=\"h-4 w-4 mr-2\" />\n                    Copied\n                  </>\n                ) : (\n                  <>\n                    <Copy className=\"h-4 w-4 mr-2\" />\n                    Copy\n                  </>\n                )}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleDownload}\n                disabled={!fileContent}\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onClose}\n                className=\"h-8 w-8\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-4 overflow-y-auto max-h-[calc(90vh-120px)]\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-gray-400\" />\n              </div>\n            ) : error ? (\n              <div className=\"flex items-center gap-3 p-4 bg-red-50 rounded-lg\">\n                <AlertCircle className=\"h-5 w-5 text-red-600 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-red-900\">Error loading file</p>\n                  <p className=\"text-sm text-red-700 mt-1\">{error}</p>\n                </div>\n              </div>\n            ) : fileContent ? (\n              <div className=\"font-mono text-sm bg-gray-50 rounded-lg p-4\">\n                <pre className=\"whitespace-pre-wrap break-words\">\n                  {fileContent}\n                </pre>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t bg-gray-50\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-xs text-gray-500\">\n                Citation ID: {citationId}\n              </div>\n              <div className=\"text-xs text-gray-500\">\n                {contentType}\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};","/**\n * Conversation Manager Component\n * \n * Provides conversation switching UI for widget and floating modes.\n * Shows a list of conversations with ability to create new ones and switch between them.\n * \n * Features:\n * - Conversation list with titles and timestamps\n * - Create new conversation button\n * - Switch between conversations\n * - Edit conversation titles inline\n * - Delete conversations\n * - Session-based isolation\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Plus, MessageCircle, Edit2, Trash2, Check, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils';\n\ninterface Conversation {\n  id: string;\n  title: string;\n  createdAt: string;\n  messages: any[];\n}\n\ninterface ConversationManagerProps {\n  sessionId: string;\n  maxConversations?: number;\n  currentConversationId?: string;\n  onConversationChange?: (conversation: Conversation) => void;\n  onCreateConversation?: () => void;\n  className?: string;\n  refreshKey?: number; // Add refresh key to force re-render\n}\n\nexport const ConversationManager: React.FC<ConversationManagerProps> = ({\n  sessionId,\n  maxConversations,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  className,\n  refreshKey,\n}) => {\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editTitle, setEditTitle] = useState('');\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Load conversations from localStorage\n  useEffect(() => {\n    const loadConversations = () => {\n      const stored = localStorage.getItem(`customgpt_conversations_${sessionId}`);\n      if (stored) {\n        try {\n          const parsed = JSON.parse(stored);\n          setConversations(parsed);\n        } catch (e) {\n          console.error('Failed to parse conversations:', e);\n        }\n      }\n    };\n\n    loadConversations();\n    // Listen for storage changes\n    window.addEventListener('storage', loadConversations);\n    return () => window.removeEventListener('storage', loadConversations);\n  }, [sessionId, refreshKey]); // Add refreshKey as dependency\n\n  const handleCreateConversation = () => {\n    if (maxConversations && conversations.length >= maxConversations) {\n      toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n      return;\n    }\n    onCreateConversation?.();\n  };\n\n  const handleSelectConversation = (conversation: Conversation) => {\n    onConversationChange?.(conversation);\n    setIsExpanded(false);\n  };\n\n  const handleEditStart = (conversation: Conversation) => {\n    setEditingId(conversation.id);\n    setEditTitle(conversation.title);\n  };\n\n  const handleEditSave = (conversationId: string) => {\n    const updated = conversations.map(c =>\n      c.id === conversationId ? { ...c, title: editTitle } : c\n    );\n    setConversations(updated);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(updated)\n    );\n    setEditingId(null);\n  };\n\n  const handleDelete = (conversationId: string) => {\n    if (conversations.length <= 1) {\n      toast.error('Cannot delete the last conversation');\n      return;\n    }\n    \n    const filtered = conversations.filter(c => c.id !== conversationId);\n    setConversations(filtered);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(filtered)\n    );\n    \n    // If deleting current conversation, switch to another\n    if (currentConversationId === conversationId && filtered.length > 0) {\n      onConversationChange?.(filtered[0]);\n    }\n  };\n\n  const currentConversation = conversations.find(c => c.id === currentConversationId);\n\n  return (\n    <div className={cn('relative', className)}>\n      {/* Collapsed View */}\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"flex items-center gap-2 px-3 py-2 text-sm font-medium text-gray-700 hover:bg-gray-100 rounded-lg transition-colors w-full\"\n      >\n        <MessageCircle className=\"w-4 h-4\" />\n        <span className=\"truncate flex-1 text-left\">\n          {currentConversation?.title || 'Select Conversation'}\n        </span>\n        <svg\n          className={cn('w-4 h-4 transition-transform', isExpanded && 'rotate-180')}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n        </svg>\n      </button>\n\n      {/* Expanded View */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-white rounded-lg shadow-lg border border-gray-200 z-50 max-h-80 overflow-y-auto\"\n          >\n            {/* New Conversation Button */}\n            <button\n              onClick={handleCreateConversation}\n              disabled={maxConversations ? conversations.length >= maxConversations : false}\n              className=\"flex items-center gap-2 w-full px-4 py-3 text-sm font-medium text-brand-600 hover:bg-brand-50 disabled:opacity-50 disabled:cursor-not-allowed border-b\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              New Conversation\n            </button>\n\n            {/* Conversation List */}\n            <div className=\"py-2\">\n              {conversations.map((conversation) => (\n                <div\n                  key={conversation.id}\n                  className={cn(\n                    'group flex items-center px-4 py-2 hover:bg-gray-50',\n                    currentConversationId === conversation.id && 'bg-brand-50'\n                  )}\n                >\n                  {editingId === conversation.id ? (\n                    // Edit Mode\n                    <div className=\"flex items-center gap-2 flex-1\">\n                      <input\n                        type=\"text\"\n                        value={editTitle}\n                        onChange={(e) => setEditTitle(e.target.value)}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') handleEditSave(conversation.id);\n                          if (e.key === 'Escape') setEditingId(null);\n                        }}\n                        className=\"flex-1 px-2 py-1 text-sm border rounded focus:outline-none focus:ring-1 focus:ring-brand-500\"\n                        autoFocus\n                      />\n                      <button\n                        onClick={() => handleEditSave(conversation.id)}\n                        className=\"p-1 text-green-600 hover:bg-green-50 rounded\"\n                      >\n                        <Check className=\"w-4 h-4\" />\n                      </button>\n                      <button\n                        onClick={() => setEditingId(null)}\n                        className=\"p-1 text-gray-400 hover:bg-gray-100 rounded\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  ) : (\n                    // View Mode\n                    <>\n                      <button\n                        onClick={() => handleSelectConversation(conversation)}\n                        className=\"flex-1 text-left\"\n                      >\n                        <div className=\"text-sm font-medium text-gray-900 truncate\">\n                          {conversation.title}\n                        </div>\n                        <div className=\"text-xs text-gray-500\">\n                          {new Date(conversation.createdAt).toLocaleDateString()}\n                        </div>\n                      </button>\n                      <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <button\n                          onClick={() => handleEditStart(conversation)}\n                          className=\"p-1 text-gray-400 hover:text-gray-600 hover:bg-gray-100 rounded\"\n                        >\n                          <Edit2 className=\"w-3 h-3\" />\n                        </button>\n                        <button\n                          onClick={() => handleDelete(conversation.id)}\n                          className=\"p-1 text-gray-400 hover:text-red-600 hover:bg-red-50 rounded\"\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </button>\n                      </div>\n                    </>\n                  )}\n                </div>\n              ))}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","/**\n * Message Error Display Component\n * \n * Displays error messages with appropriate styling and context based on HTTP status codes.\n * Provides user-friendly error messages and actionable guidance.\n */\n\nimport React from 'react';\nimport { AlertCircle, XCircle, CreditCard, UserX, Search, ServerCrash } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface MessageErrorDisplayProps {\n  error: string | Error;\n  statusCode?: number;\n  onRetry?: () => void;\n  className?: string;\n}\n\n/**\n * Parse error to extract status code and message\n */\nconst parseError = (error: string | Error): { statusCode?: number; message: string } => {\n  if (typeof error === 'string') {\n    // Try to extract status code from error message\n    const statusMatch = error.match(/(\\d{3})/);\n    const statusCode = statusMatch ? parseInt(statusMatch[1]) : undefined;\n    return { statusCode, message: error };\n  }\n  \n  return { \n    statusCode: (error as any).status || (error as any).statusCode,\n    message: error.message \n  };\n};\n\n/**\n * Get error details based on status code\n */\nconst getErrorDetails = (statusCode?: number, message?: string) => {\n  switch (statusCode) {\n    case 400:\n      return {\n        icon: AlertCircle,\n        title: 'Invalid Request',\n        description: 'The request format is invalid. Please check your input and try again.',\n        className: 'border-orange-200 bg-orange-50',\n        iconClassName: 'text-orange-600',\n        textClassName: 'text-orange-800',\n      };\n      \n    case 401:\n      return {\n        icon: UserX,\n        title: 'Authentication Failed',\n        description: 'Your API key is either missing or invalid. Please check your API key configuration.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showSupport: true,\n      };\n      \n    case 403:\n      // Check if this is an inactive agent error\n      const isInactiveAgent = message && (\n        message.toLowerCase().includes('inactive') ||\n        message.toLowerCase().includes('no documents') ||\n        message.toLowerCase().includes('agent is not active') ||\n        message.toLowerCase().includes('project is not active') ||\n        message.toLowerCase().includes('no documents uploaded')\n      );\n      \n      if (isInactiveAgent) {\n        return {\n          icon: AlertCircle,\n          title: 'Agent Inactive',\n          description: 'This agent is inactive. Please add documents to activate it before starting a conversation.',\n          className: 'border-orange-200 bg-orange-50',\n          iconClassName: 'text-orange-600',\n          textClassName: 'text-orange-800',\n        };\n      }\n      \n      return {\n        icon: UserX,\n        title: 'Access Denied',\n        description: 'You don\\'t have permission to access this resource. Please check your API key permissions.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showSupport: true,\n      };\n      \n    case 404:\n      return {\n        icon: Search,\n        title: 'Not Found',\n        description: 'The requested agent or conversation was not found. It may have been deleted or you may not have access.',\n        className: 'border-gray-200 bg-gray-50',\n        iconClassName: 'text-gray-600',\n        textClassName: 'text-gray-800',\n      };\n      \n    case 429:\n      return {\n        icon: CreditCard,\n        title: 'Query Credits Exhausted',\n        description: 'You have exhausted your current query credits. Please contact customer service for assistance.',\n        className: 'border-yellow-200 bg-yellow-50',\n        iconClassName: 'text-yellow-600',\n        textClassName: 'text-yellow-800',\n        showSupport: true,\n        supportUrl: 'https://customgpt.freshdesk.com/support/home',\n      };\n      \n    case 500:\n    case 502:\n    case 503:\n    case 504:\n      return {\n        icon: ServerCrash,\n        title: 'Server Error',\n        description: 'An internal server error occurred. Please try again later or contact support if the issue persists.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showRetry: true,\n      };\n      \n    default:\n      return {\n        icon: XCircle,\n        title: 'Error',\n        description: message || 'An unexpected error occurred. Please try again.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showRetry: true,\n      };\n  }\n};\n\nexport const MessageErrorDisplay: React.FC<MessageErrorDisplayProps> = ({\n  error,\n  statusCode: propStatusCode,\n  onRetry,\n  className,\n}) => {\n  const { statusCode: parsedStatusCode, message } = parseError(error);\n  const finalStatusCode = propStatusCode || parsedStatusCode;\n  \n  const errorDetails = getErrorDetails(finalStatusCode, message);\n  const Icon = errorDetails.icon;\n  \n  return (\n    <div\n      className={cn(\n        'p-4 rounded-lg border',\n        errorDetails.className,\n        className\n      )}\n    >\n      <div className=\"flex items-start gap-3\">\n        <Icon className={cn('w-5 h-5 mt-0.5 flex-shrink-0', errorDetails.iconClassName)} />\n        \n        <div className=\"flex-1 space-y-2\">\n          <div>\n            <h3 className={cn('font-medium', errorDetails.textClassName)}>\n              {errorDetails.title}\n              {finalStatusCode && ` (${finalStatusCode})`}\n            </h3>\n            <p className={cn('text-sm mt-1', errorDetails.textClassName, 'opacity-90')}>\n              {errorDetails.description}\n            </p>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"flex items-center gap-2 mt-3\">\n            {errorDetails.showRetry && onRetry && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={onRetry}\n                className=\"text-xs\"\n              >\n                Try Again\n              </Button>\n            )}\n            \n            {errorDetails.showSupport && (\n              <a\n                href={errorDetails.supportUrl || 'https://customgpt.freshdesk.com/support/home'}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-xs underline hover:no-underline\"\n              >\n                Contact Support\n              </a>\n            )}\n          </div>\n          \n          {/* Technical Details (collapsed by default) */}\n          {message && message !== errorDetails.description && (\n            <details className=\"mt-3\">\n              <summary className={cn('text-xs cursor-pointer', errorDetails.textClassName, 'opacity-70')}>\n                Technical Details\n              </summary>\n              <pre className={cn(\n                'mt-2 p-2 text-xs rounded bg-white bg-opacity-50 overflow-x-auto',\n                errorDetails.textClassName,\n                'opacity-80'\n              )}>\n                {message}\n              </pre>\n            </details>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","import React, { createContext, useContext } from 'react';\n\n// Widget instance type - we'll define the actual widget interface based on what we need\ninterface WidgetInstance {\n  sessionId: string;\n  createConversation: (title?: string) => any;\n  switchConversation: (conversationId: string) => void;\n  getConversations: () => any[];\n  updateConversationTitle: (conversationId: string, newTitle: string) => void;\n  deleteConversation: (conversationId: string) => void;\n  configuration?: any;\n}\n\n// Create the context with undefined default\nconst WidgetContext = createContext<WidgetInstance | undefined>(undefined);\n\n// Provider component props\ninterface WidgetProviderProps {\n  widgetInstance: WidgetInstance;\n  children: React.ReactNode;\n}\n\n// Provider component that will wrap the widget's React tree\nexport const WidgetProvider: React.FC<WidgetProviderProps> = ({ widgetInstance, children }) => {\n  return (\n    <WidgetContext.Provider value={widgetInstance}>\n      {children}\n    </WidgetContext.Provider>\n  );\n};\n\n// Custom hook to use the widget instance from any component\nexport const useWidget = (): WidgetInstance => {\n  const context = useContext(WidgetContext);\n  if (!context) {\n    throw new Error('useWidget must be used within a WidgetProvider');\n  }\n  return context;\n};\n\n// Optional: Hook that returns null instead of throwing if no widget context\nexport const useWidgetSafe = (): WidgetInstance | null => {\n  const context = useContext(WidgetContext);\n  return context || null;\n};","import React, { createContext, useContext, useRef, ReactNode } from 'react';\nimport { StoreApi } from 'zustand';\nimport { createMessageStore, MessageStore } from '../store/widget-stores/messages';\nimport { createConversationStore, ConversationStore } from '../store/widget-stores/conversations';\nimport { createAgentStore, AgentStore } from '../store/widget-stores/agents';\n\n/**\n * Widget Store Context\n * \n * Provides instance-specific Zustand stores for each widget.\n * This ensures complete data isolation between multiple widgets.\n * \n * Each widget instance gets its own:\n * - Message store (for chat messages)\n * - Conversation store (for conversation management)\n * - Agent store (for agent selection)\n * \n * The config store remains global as API configuration should be shared.\n */\n\ninterface WidgetStores {\n  messageStore: StoreApi<MessageStore>;\n  conversationStore: StoreApi<ConversationStore>;\n  agentStore: StoreApi<AgentStore>;\n}\n\ninterface WidgetStoreContextValue {\n  stores: WidgetStores;\n}\n\nexport const WidgetStoreContext = createContext<WidgetStoreContextValue | null>(null);\n\ninterface WidgetStoreProviderProps {\n  children: ReactNode;\n  sessionId: string;\n}\n\n/**\n * Widget Store Provider\n * \n * Creates and provides instance-specific stores for a widget.\n * Stores are created once per widget instance and reused.\n */\nexport const WidgetStoreProvider: React.FC<WidgetStoreProviderProps> = ({ \n  children, \n  sessionId \n}) => {\n  // Use ref to ensure stores are only created once per widget instance\n  const storesRef = useRef<WidgetStores | null>(null);\n  \n  if (!storesRef.current) {\n    // Create stores in the correct order, passing references to dependent stores\n    const agentStore = createAgentStore(sessionId);\n    const conversationStore = createConversationStore(sessionId);\n    const messageStore = createMessageStore(sessionId, agentStore, conversationStore);\n    \n    storesRef.current = {\n      messageStore,\n      conversationStore,\n      agentStore,\n    };\n  }\n  \n  return (\n    <WidgetStoreContext.Provider value={{ stores: storesRef.current }}>\n      {children}\n    </WidgetStoreContext.Provider>\n  );\n};\n\n/**\n * Hook to access widget-specific stores\n */\nexport const useWidgetStores = (): WidgetStores => {\n  const context = useContext(WidgetStoreContext);\n  if (!context) {\n    throw new Error('useWidgetStores must be used within WidgetStoreProvider');\n  }\n  return context.stores;\n};\n\n/**\n * Individual store hooks for easier access\n */\nexport const useWidgetMessageStore = () => {\n  const { messageStore } = useWidgetStores();\n  return messageStore;\n};\n\nexport const useWidgetConversationStore = () => {\n  const { conversationStore } = useWidgetStores();\n  return conversationStore;\n};\n\nexport const useWidgetAgentStore = () => {\n  const { agentStore } = useWidgetStores();\n  return agentStore;\n};","/**\n * Widget Store Hooks\n * \n * These hooks automatically select between global and widget-specific stores\n * based on whether the component is rendered inside a widget context.\n */\n\nimport { useContext } from 'react';\nimport { useStore } from 'zustand';\nimport { WidgetStoreContext } from '../widget/WidgetStoreContext';\nimport { useMessageStore as useGlobalMessageStore } from '../store';\nimport { useConversationStore as useGlobalConversationStore } from '../store';\nimport { useAgentStore as useGlobalAgentStore } from '../store';\nimport type { MessageStore } from '../store/widget-stores/messages';\nimport type { ConversationStore } from '../store/widget-stores/conversations';\nimport type { AgentStore } from '../store/widget-stores/agents';\n\n/**\n * Check if we're inside a widget context\n */\nfunction useIsInWidgetContext(): boolean {\n  try {\n    const context = useContext(WidgetStoreContext);\n    return context !== null;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get widget stores if inside widget context\n */\nfunction useWidgetStores() {\n  const context = useContext(WidgetStoreContext);\n  return context?.stores;\n}\n\n/**\n * Message store hook that automatically selects the correct store\n */\nexport function useMessageStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  \n  if (isInWidget && widgetStores) {\n    // Use widget-specific store\n    return useStore(widgetStores.messageStore);\n  }\n  \n  // Use global store\n  return useGlobalMessageStore();\n}\n\n/**\n * Conversation store hook that automatically selects the correct store\n */\nexport function useConversationStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  \n  if (isInWidget && widgetStores) {\n    // Use widget-specific store\n    return useStore(widgetStores.conversationStore);\n  }\n  \n  // Use global store\n  return useGlobalConversationStore();\n}\n\n/**\n * Agent store hook that automatically selects the correct store\n */\nexport function useAgentStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  \n  if (isInWidget && widgetStores) {\n    // Use widget-specific store\n    return useStore(widgetStores.agentStore);\n  }\n  \n  // Use global store\n  return useGlobalAgentStore();\n}\n\n/**\n * Export convenience functions to check store source\n */\nexport function useIsUsingWidgetStore(): boolean {\n  return useIsInWidgetContext();\n}\n\n/**\n * Get the current session ID if in widget context\n */\nexport function useWidgetSessionId(): string | null {\n  const context = useContext(WidgetStoreContext);\n  if (!context) return null;\n  \n  // Extract session ID from the store's localStorage key\n  const messageStore = context.stores.messageStore;\n  const state = messageStore.getState();\n  \n  // Session ID would need to be added to context for retrieval\n  return null;\n}","import { useEffect, useRef, forwardRef } from \"react\";\n\ninterface CanvasProps {\n  draw: (context: CanvasRenderingContext2D, displayWidth: number, displayHeight: number, projCenterX: number, projCenterY: number) => void;\n}\n\nconst Canvas = forwardRef<HTMLCanvasElement, CanvasProps>(({ draw }, ref) => {\n  const internalRef = useRef<HTMLCanvasElement>(null);\n  const canvasRef = (ref as any) || internalRef;\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const context = canvas.getContext('2d');\n    if (!context) return;\n\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvas);\n\n    // Set up projection center coordinates at the center of the canvas\n    const displayWidth = canvas.width;\n    const displayHeight = canvas.height;\n    const projCenterX = displayWidth / 2;\n    const projCenterY = displayHeight / 2;\n\n    let animationFrameId: number;\n\n    const render = () => {\n      draw(context, displayWidth, displayHeight, projCenterX, projCenterY);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    \n    render();\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n      window.removeEventListener('resize', resizeCanvas);\n    };\n  }, [draw]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"absolute inset-0 w-full h-full\"\n      style={{ background: '#000000' }}\n    />\n  );\n});\n\nCanvas.displayName = 'Canvas';\n\nexport default Canvas;","import { utils } from \"@ricky0123/vad-react\";\n\nexport interface VoiceCallbacks {\n  onUserSpeaking?: () => void;\n  onProcessing?: () => void;\n  onAiSpeaking?: () => void;\n  onReset?: () => void;\n  onError?: (error: string) => void;\n  onDebug?: (message: string, data?: any) => void;\n  // New callbacks for message store integration\n  onTranscriptReceived?: (transcript: string) => void;\n  onResponseReceived?: (response: string) => void;\n}\n\nclass SpeechManager {\n  private source: AudioBufferSourceNode | null = null;\n  private sourceIsStarted = false;\n  private conversationThusFar: any[] = [];\n  private callbacks: VoiceCallbacks = {};\n  private projectId: string | null = null;\n\n  setCallbacks(callbacks: VoiceCallbacks) {\n    this.callbacks = callbacks;\n    this.debug(\"Callbacks set\", { hasCallbacks: Object.keys(callbacks) });\n  }\n\n  setProjectId(projectId: string) {\n    this.projectId = projectId;\n    this.debug(\"Project ID set\", { projectId });\n  }\n\n  private debug(message: string, data?: any) {\n    const timestamp = new Date().toISOString();\n    console.log(`🎯 [SPEECH-MANAGER ${timestamp}] ${message}`, data || '');\n    this.callbacks.onDebug?.(message, data);\n  }\n\n  private error(message: string, error?: any) {\n    const timestamp = new Date().toISOString();\n    console.error(`❌ [SPEECH-MANAGER ${timestamp}] ${message}`, error || '');\n    this.callbacks.onError?.(message);\n  }\n\n  onSpeechStart = () => {\n    this.debug(\"Speech started - user is speaking\");\n    this.callbacks.onUserSpeaking?.();\n    this.stopSourceIfNeeded();\n  };\n\n  onSpeechEnd = async (audio: Float32Array) => {\n    this.debug(\"Speech ended\", { \n      audioLength: audio.length,\n      audioDuration: `${audio.length / 16000}s` // Assuming 16kHz sample rate\n    });\n    await this.processAudio(audio);\n  };\n\n  onMisfire = () => {\n    this.debug(\"VAD misfire - noise detected but not speech\");\n    this.callbacks.onReset?.();\n  };\n\n  private stopSourceIfNeeded = () => {\n    if (this.source && this.sourceIsStarted) {\n      this.debug(\"Stopping current audio playback\");\n      this.source.stop(0);\n      this.sourceIsStarted = false;\n    }\n  };\n\n  private processAudio = async (audio: Float32Array) => {\n    this.debug(\"Processing audio started\");\n    this.callbacks.onProcessing?.();\n    \n    try {\n      const blob = this.createAudioBlob(audio);\n      await this.validate(blob);\n      await this.sendData(blob);\n    } catch (error) {\n      this.error('Error processing audio', error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private createAudioBlob = (audio: Float32Array): Blob => {\n    const wavBuffer = utils.encodeWAV(audio);\n    const blob = new Blob([wavBuffer], { type: 'audio/wav' });\n    this.debug(\"Created audio blob\", { \n      size: `${(blob.size / 1024).toFixed(2)}KB`,\n      type: blob.type \n    });\n    return blob;\n  };\n\n  private sendData = async (blob: Blob) => {\n    this.debug(\"Preparing to send audio data to server\");\n    \n    if (!this.projectId) {\n      this.error('No project ID set - cannot send audio');\n      this.callbacks.onReset?.();\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append(\"audio\", blob, \"audio.wav\");\n    formData.append(\"projectId\", this.projectId);\n\n    this.debug(\"Sending request to voice API\", {\n      projectId: this.projectId,\n      conversationLength: this.conversationThusFar.length,\n      audioSize: `${(blob.size / 1024).toFixed(2)}KB`\n    });\n\n    try {\n      const response = await fetch(\"/api/proxy/voice/inference\", {\n        method: \"POST\",\n        body: formData,\n        headers: {\n          'conversation': this.base64Encode(JSON.stringify(this.conversationThusFar))\n        }\n      });\n\n      this.debug(\"Response received\", {\n        status: response.status,\n        ok: response.ok,\n        headers: Object.fromEntries(response.headers.entries())\n      });\n\n      if (!response.ok) {\n        const error = await response.text();\n        throw new Error(`API Error (${response.status}): ${error}`);\n      }\n\n      const textHeader = response.headers.get(\"text\");\n      if (!textHeader) {\n        throw new Error(\"No text header in response\");\n      }\n\n      const newMessages = JSON.parse(this.base64Decode(textHeader));\n      this.debug(\"Messages decoded\", { newMessages });\n      \n      // Extract user transcript and AI response for conversation store\n      if (newMessages.length > 0) {\n        if (newMessages[0].role === 'user') {\n          const transcript = newMessages[0].content;\n          this.callbacks.onDebug?.(`You said: \"${transcript}\"`, newMessages[0]);\n          this.callbacks.onTranscriptReceived?.(transcript);\n        }\n        \n        if (newMessages.length > 1 && newMessages[1].role === 'assistant') {\n          const response = newMessages[1].content;\n          this.callbacks.onResponseReceived?.(response);\n        } else if (newMessages.length === 1 && newMessages[0].role === 'assistant') {\n          // Sometimes only the assistant response is returned\n          const response = newMessages[0].content;\n          this.callbacks.onResponseReceived?.(response);\n        }\n      }\n      \n      this.conversationThusFar.push(...newMessages);\n      \n      const audioBlob = await response.blob();\n      this.debug(\"Audio blob received\", {\n        size: `${(audioBlob.size / 1024).toFixed(2)}KB`,\n        type: audioBlob.type\n      });\n      \n      await this.handleSuccess(audioBlob);\n    } catch (error) {\n      this.error(\"Failed to send audio data\", error);\n      this.handleError(error);\n    }\n  };\n\n  private base64Encode(str: string): string {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(str);\n    return window.btoa(String.fromCharCode(...new Uint8Array(data)));\n  }\n\n  private base64Decode(base64: string): string {\n    const binaryStr = window.atob(base64);\n    const bytes = new Uint8Array([...binaryStr].map((char) => char.charCodeAt(0)));\n    return new TextDecoder().decode(bytes);\n  }\n\n  private handleSuccess = async (blob: Blob) => {\n    this.debug(\"Playing AI response audio\");\n    \n    try {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      this.stopSourceIfNeeded();\n\n      const arrayBuffer = await blob.arrayBuffer();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      this.debug(\"Audio decoded\", {\n        duration: `${audioBuffer.duration.toFixed(2)}s`,\n        sampleRate: audioBuffer.sampleRate,\n        numberOfChannels: audioBuffer.numberOfChannels\n      });\n\n      this.source = audioContext.createBufferSource();\n      this.source.buffer = audioBuffer;\n      this.source.connect(audioContext.destination);\n      this.source.start(0);\n      this.sourceIsStarted = true;\n      \n      this.source.onended = () => {\n        this.debug(\"Audio playback ended\");\n        this.callbacks.onReset?.();\n      };\n\n      this.callbacks.onAiSpeaking?.();\n    } catch (error) {\n      this.error(\"Failed to play audio\", error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private handleError = (error: any) => {\n    this.error(`Error encountered: ${error.message}`, error);\n    this.callbacks.onReset?.();\n  };\n\n  private validate = async (data: Blob) => {\n    this.debug(\"Validating audio duration\");\n    \n    try {\n      // Clone the blob to avoid consuming the arrayBuffer\n      const clonedBlob = new Blob([data], { type: data.type });\n      const arrayBuffer = await clonedBlob.arrayBuffer();\n      const audioContext = new AudioContext();\n      const decodedData = await audioContext.decodeAudioData(arrayBuffer);\n      const duration = decodedData.duration;\n      const minDuration = 0.4;\n\n      this.debug(\"Audio validation\", {\n        duration: `${duration.toFixed(2)}s`,\n        minDuration: `${minDuration}s`,\n        valid: duration >= minDuration\n      });\n\n      if (duration < minDuration) {\n        throw new Error(`Duration is ${duration}s, which is less than minimum of ${minDuration}s`);\n      }\n    } catch (error) {\n      this.error(\"Audio validation failed\", error);\n      throw error;\n    }\n  };\n\n  clearConversation() {\n    this.conversationThusFar = [];\n  }\n\n  getConversationThusFar() {\n    return this.conversationThusFar;\n  }\n}\n\nexport const speechManager = new SpeechManager();","const sphereRad = 280 // 20..500\nconst radius_sp = 1 // 1..2\nlet framesPerRotation = 5000\nlet r: number, g: number, b: number  // particle color\n\nconst setLightBlue = () => {\n    r = 52\n    g = 235\n    b = 222\n}\nconst setOrange = () => {\n    r = 255\n    g = 191\n    b = 0\n}\nconst setViolet = () => {\n    r = 235\n    g = 67\n    b = 250\n}\nconst setFuchsia = () => {\n    r = 201\n    g = 10\n    b = 144\n}\n\nsetLightBlue()\n\nconst turnSpeed = () => 2 * Math.PI / framesPerRotation //the sphere will rotate at this speed (one complete rotation every 1600 frames).\n\nconst onUserSpeaking = () => {\n    console.log(\"🎤 [PARTICLE] User speaking - changing to orange\")\n    framesPerRotation = 5000\n    setOrange()\n}\nconst onProcessing = () => {\n    console.log(\"⚙️ [PARTICLE] Processing - changing to violet, spinning faster\")\n    framesPerRotation = 1000\n    setViolet()\n}\nconst onAiSpeaking = () => {\n    console.log(\"🤖 [PARTICLE] AI speaking - changing to fuchsia\")\n    framesPerRotation = 5000\n    setFuchsia()\n}\nconst reset = () => {\n    console.log(\"🔄 [PARTICLE] Reset - back to light blue\")\n    framesPerRotation = 5000\n    setLightBlue()\n}\n\nconst wait = 1\nlet count = wait - 1\nconst numToAddEachFrame = 8\nconst particleList: any = {\n    first: undefined\n}\nconst recycleBin: any = {\n    first: undefined\n}\nconst particleAlpha = 1 // maximum alpha\nconst fLen = 320 // represents the distance from the viewer to z=0 depth.\nlet m: number\n\n// we will not draw coordinates if they have too large of a z-coordinate (which means they are very close to the observer).\nconst zMax = fLen - 2\nlet turnAngle = 1 //initial angle\nconst sphereCenterY = 0, sphereCenterZ = -3 - sphereRad\nconst particleRad = 2.5\n\n//alpha values will lessen as particles move further back, causing depth-based darkening:\nconst zeroAlphaDepth = -750\n\n//random acceleration factors - causes some random motion\nconst randAccelX = 0.1, randAccelY = 0.1, randAccelZ = 0.1\nconst gravity = -0 //try changing to a positive number (not too large, for example 0.3), or negative for floating upwards.\nconst rgbString = () => \"rgba(\" + r + \",\" + g + \",\" + b + \",\" //partial string for color which will be completed by appending alpha value.\n//we are defining a lot of variables used in the screen update functions globally so that they don't have to be redefined every frame.\nlet p: any\nlet outsideTest: boolean\nlet nextParticle: any\nlet sinAngle: number\nlet cosAngle: number\nlet rotX: number, rotZ: number\nlet depthAlphaFactor: number\nlet i: number\nlet theta: number, phi: number\nlet x0: number, y0: number, z0: number\n\nfunction draw(context: CanvasRenderingContext2D, displayWidth: number, displayHeight: number, projCenterX: number, projCenterY: number) {\n    //if enough time has elapsed, we will add new particles.\n    count++\n    if (count >= wait) {\n\n        count = 0\n        for (i = 0; i < numToAddEachFrame; i++) {\n            theta = Math.random() * 2 * Math.PI\n            phi = Math.acos(Math.random() * 2 - 1)\n            x0 = sphereRad * Math.sin(phi) * Math.cos(theta)\n            y0 = sphereRad * Math.sin(phi) * Math.sin(theta)\n            z0 = sphereRad * Math.cos(phi)\n\n            //We use the addParticle function to add a new particle. The parameters set the position and velocity components.\n            //Note that the velocity parameters will cause the particle to initially fly outwards away from the sphere center (after\n            //it becomes unstuck).\n            const p = addParticle(x0, sphereCenterY + y0, sphereCenterZ + z0, 0.002 * x0, 0.002 * y0, 0.002 * z0)\n\n            //we set some \"envelope\" parameters which will control the evolving alpha of the particles.\n            p.attack = 50\n            p.hold = 50\n            p.decay = 100\n            p.initValue = 0\n            p.holdValue = particleAlpha\n            p.lastValue = 0\n\n            //the particle will be stuck in one place until this time has elapsed:\n            p.stuckTime = 90 + Math.random() * 20\n\n            p.accelX = 0\n            p.accelY = gravity\n            p.accelZ = 0\n        }\n    }\n\n    //update viewing angle\n    turnAngle = (turnAngle + turnSpeed()) % (2 * Math.PI)\n    sinAngle = Math.sin(turnAngle)\n    cosAngle = Math.cos(turnAngle)\n\n    //background fill\n    context.fillStyle = \"#000000\"\n    context.fillRect(0, 0, displayWidth, displayHeight)\n\n    //update and draw particles\n    p = particleList.first\n    while (p != null) {\n        //before list is altered record next particle\n        nextParticle = p.next\n\n        //update age\n        p.age++\n\n        //if the particle is past its \"stuck\" time, it will begin to move.\n        if (p.age > p.stuckTime) {\n            p.velX += p.accelX + randAccelX * (Math.random() * 2 - 1)\n            p.velY += p.accelY + randAccelY * (Math.random() * 2 - 1)\n            p.velZ += p.accelZ + randAccelZ * (Math.random() * 2 - 1)\n\n            p.x += p.velX\n            p.y += p.velY\n            p.z += p.velZ\n        }\n\n        /*\n        We are doing two things here to calculate display coordinates.\n        The whole display is being rotated around a vertical axis, so we first calculate rotated coordinates for\n        x and z (but the y coordinate will not change).\n        Then, we take the new coordinates (rotX, y, rotZ), and project these onto the 2D view plane.\n        */\n        rotX = cosAngle * p.x + sinAngle * (p.z - sphereCenterZ)\n        rotZ = -sinAngle * p.x + cosAngle * (p.z - sphereCenterZ) + sphereCenterZ\n        m = radius_sp * fLen / (fLen - rotZ)\n        p.projX = rotX * m + projCenterX\n        p.projY = p.y * m + projCenterY\n\n        //update alpha according to envelope parameters.\n        if (p.age < p.attack + p.hold + p.decay) {\n            if (p.age < p.attack) {\n                p.alpha = (p.holdValue - p.initValue) / p.attack * p.age + p.initValue\n            } else if (p.age < p.attack + p.hold) {\n                p.alpha = p.holdValue\n            } else if (p.age < p.attack + p.hold + p.decay) {\n                p.alpha = (p.lastValue - p.holdValue) / p.decay * (p.age - p.attack - p.hold) + p.holdValue\n            }\n        } else {\n            p.dead = true\n        }\n\n        //see if the particle is still within the viewable range.\n        outsideTest = (p.projX > displayWidth) || (p.projX < 0) || (p.projY < 0) || (p.projY > displayHeight) || (rotZ > zMax);\n\n        if (outsideTest || p.dead) {\n            recycle(p)\n        } else {\n            //depth-dependent darkening\n            depthAlphaFactor = (1 - rotZ / zeroAlphaDepth)\n            depthAlphaFactor = (depthAlphaFactor > 1) ? 1 : ((depthAlphaFactor < 0) ? 0 : depthAlphaFactor)\n            context.fillStyle = rgbString() + depthAlphaFactor * p.alpha + \")\"\n\n            //draw\n            context.beginPath()\n            context.arc(p.projX, p.projY, m * particleRad, 0, 2 * Math.PI, false)\n            context.closePath()\n            context.fill()\n        }\n\n        p = nextParticle\n    }\n}\n\nfunction addParticle(x0: number, y0: number, z0: number, vx0: number, vy0: number, vz0: number) {\n    let newParticle: any\n\n    //check recycle bin for available drop:\n    if (recycleBin.first != null) {\n        newParticle = recycleBin.first\n        //remove from bin\n        if (newParticle.next != null) {\n            recycleBin.first = newParticle.next\n            newParticle.next.prev = null\n        } else {\n            recycleBin.first = null\n        }\n    }\n    //if the recycle bin is empty, create a new particle (a new empty object):\n    else {\n        newParticle = {}\n    }\n\n    //add to beginning of particle list\n    if (particleList.first == null) {\n        particleList.first = newParticle\n        newParticle.prev = null\n        newParticle.next = null\n    } else {\n        newParticle.next = particleList.first\n        particleList.first.prev = newParticle\n        particleList.first = newParticle\n        newParticle.prev = null\n    }\n\n    //initialize\n    newParticle.x = x0\n    newParticle.y = y0\n    newParticle.z = z0\n    newParticle.velX = vx0\n    newParticle.velY = vy0\n    newParticle.velZ = vz0\n    newParticle.age = 0\n    newParticle.dead = false\n    newParticle.right = Math.random() < 0.5;\n    return newParticle\n}\n\nfunction recycle(p: any) {\n    //remove from particleList\n    if (particleList.first === p) {\n        if (p.next != null) {\n            p.next.prev = null\n            particleList.first = p.next\n        } else {\n            particleList.first = null\n        }\n    } else {\n        if (p.next == null) {\n            p.prev.next = null\n        } else {\n            p.prev.next = p.next\n            p.next.prev = p.prev\n        }\n    }\n    //add to recycle bin\n    if (recycleBin.first == null) {\n        recycleBin.first = p\n        p.prev = null\n        p.next = null\n    } else {\n        p.next = recycleBin.first\n        recycleBin.first.prev = p\n        recycleBin.first = p\n        p.prev = null\n    }\n}\n\nexport const particleActions = {\n    onUserSpeaking,\n    onProcessing,\n    onAiSpeaking,\n    reset,\n    draw,\n    init: () => {} // No initialization needed for this implementation\n};","'use client';\n\nimport { useEffect, useState, useRef, useCallback } from 'react';\nimport { useMicVAD } from '@ricky0123/vad-react';\nimport RotateLoader from 'react-spinners/RotateLoader';\nimport { X } from 'lucide-react';\nimport Canvas from './Canvas';\nimport { speechManager } from '@/lib/voice/speech-manager';\nimport { particleActions } from '@/lib/voice/particle-manager';\nimport { useMessageStore, useConversationStore } from '@/hooks/useWidgetStore';\nimport { generateId } from '@/lib/utils';\n\ninterface VoiceModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  projectId: string;\n  projectName?: string;\n}\n\nexport function VoiceModal({ isOpen, onClose, projectId, projectName }: VoiceModalProps) {\n  const [loading, setLoading] = useState(true);\n  const [transcript, setTranscript] = useState('');\n  const [debugMessages, setDebugMessages] = useState<string[]>([]);\n  const [isManualRecording, setIsManualRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  \n  // Message store integration\n  const { addMessage } = useMessageStore();\n  const { currentConversation, ensureConversation } = useConversationStore();\n  const [currentUserMessageId, setCurrentUserMessageId] = useState<string | null>(null);\n\n  const vad = useMicVAD({\n    preSpeechPadFrames: 5,\n    positiveSpeechThreshold: 0.90,  // Back to AIUI settings\n    negativeSpeechThreshold: 0.75,   // Back to AIUI settings\n    minSpeechFrames: 4,              // Back to AIUI settings\n    startOnLoad: false,              // Start manually to handle permissions properly\n    workletURL: '/vad.worklet.bundle.min.js',\n    modelURL: '/silero_vad.onnx',\n    onSpeechStart: () => {\n      console.log('🎤 [VAD] Speech started detected');\n      const debugMsg = `${new Date().toLocaleTimeString()} - VAD: Speech started`;\n      setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n      speechManager.onSpeechStart();\n    },\n    onSpeechEnd: (audio) => {\n      console.log('🎤 [VAD] Speech ended, audio length:', audio.length);\n      const debugMsg = `${new Date().toLocaleTimeString()} - VAD: Speech ended, audio length: ${audio.length}`;\n      setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n      speechManager.onSpeechEnd(audio);\n    },\n    onVADMisfire: () => {\n      console.log('🎤 [VAD] Misfire detected');\n      const debugMsg = `${new Date().toLocaleTimeString()} - VAD: Misfire (noise detected)`;\n      setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n      speechManager.onMisfire();\n    }\n  });\n\n  // Set up speech manager when modal opens\n  useEffect(() => {\n    if (isOpen && projectId) {\n      console.log('🔧 [VOICE-MODAL] Setting up speech manager');\n      speechManager.setProjectId(projectId);\n      speechManager.setCallbacks({\n        onUserSpeaking: () => {\n          particleActions.onUserSpeaking();\n          setTranscript('');\n        },\n        onProcessing: () => {\n          particleActions.onProcessing();\n        },\n        onAiSpeaking: () => particleActions.onAiSpeaking(),\n        onReset: () => particleActions.reset(),\n        onDebug: (message: string, data?: any) => {\n          const debugMsg = `${new Date().toLocaleTimeString()} - ${message}`;\n          setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n        },\n        onError: (error: string) => {\n          const errorMsg = `${new Date().toLocaleTimeString()} - ERROR: ${error}`;\n          setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n        },\n        onTranscriptReceived: async (transcript: string) => {\n          console.log('🎯 [VOICE-MODAL] Transcript received:', transcript);\n          setTranscript(transcript);\n          \n          // Ensure we have a conversation\n          const conversation = await ensureConversation(parseInt(projectId), transcript);\n          \n          // Create and add user message to chat\n          const userMessage = {\n            id: generateId(),\n            role: 'user' as const,\n            content: transcript,\n            timestamp: new Date().toISOString(),\n            status: 'sent' as const,\n          };\n          \n          setCurrentUserMessageId(userMessage.id);\n          addMessage(conversation.id.toString(), userMessage);\n          \n          const debugMsg = `${new Date().toLocaleTimeString()} - Added user message to chat: \"${transcript}\"`;\n          setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n        },\n        onResponseReceived: async (response: string) => {\n          console.log('🎯 [VOICE-MODAL] Response received:', response);\n          \n          if (currentConversation) {\n            // Create and add assistant message to chat\n            const assistantMessage = {\n              id: generateId(),\n              role: 'assistant' as const,\n              content: response,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n              citations: [], // Voice responses typically don't have citations\n            };\n            \n            addMessage(currentConversation.id.toString(), assistantMessage);\n            \n            const debugMsg = `${new Date().toLocaleTimeString()} - Added AI response to chat: \"${response.substring(0, 50)}...\"`;\n            setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n          }\n        }\n      });\n    }\n    \n    // Clean up when modal closes\n    if (!isOpen) {\n      speechManager.clearConversation();\n      setTranscript('');\n      setDebugMessages([]);\n    }\n  }, [isOpen, projectId]);\n\n  // Define handleToggleListening before useEffect that uses it\n  const handleToggleListening = useCallback(async () => {\n    console.log('🔘 [VOICE-MODAL] Toggle listening clicked', { \n      vadLoading: vad.loading,\n      vadListening: vad.listening,\n      vadErrored: vad.errored\n    });\n    \n    // Enhanced error handling for VAD\n    if (vad.errored) {\n      console.error('❌ [VOICE-MODAL] VAD is in error state, attempting recovery...');\n      const errorMsg = `${new Date().toLocaleTimeString()} - VAD ERROR: Attempting to recover. Check browser console.`;\n      setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n      \n      // Try to restart VAD after error\n      try {\n        console.log('🔄 [VOICE-MODAL] Attempting VAD recovery...');\n        // Wait a moment then try to start\n        setTimeout(() => {\n          if (!vad.listening && !vad.loading) {\n            console.log('🔄 [VOICE-MODAL] Retry VAD start after error');\n            vad.start();\n          }\n        }, 1000);\n        return;\n      } catch (recoveryError) {\n        console.error('❌ [VOICE-MODAL] VAD recovery failed:', recoveryError);\n        const errorMsg = `${new Date().toLocaleTimeString()} - ERROR: VAD recovery failed. Try refreshing the page.`;\n        setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n        return;\n      }\n    }\n    \n    try {\n      if (vad.listening) {\n        console.log('⏸️ [VOICE-MODAL] Pausing VAD');\n        vad.pause();\n        const debugMsg = `${new Date().toLocaleTimeString()} - VAD paused`;\n        setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n      } else {\n        console.log('▶️ [VOICE-MODAL] Starting VAD');\n        \n        // Enhanced microphone permission check\n        try {\n          console.log('🎤 [VOICE-MODAL] Checking microphone permissions...');\n          const stream = await navigator.mediaDevices.getUserMedia({ \n            audio: {\n              channelCount: 1,\n              echoCancellation: true,\n              noiseSuppression: true,\n              sampleRate: 16000\n            } \n          });\n          \n          // Test the stream briefly\n          const audioContext = new AudioContext();\n          const source = audioContext.createMediaStreamSource(stream);\n          console.log('🎯 [VOICE-MODAL] Audio context created successfully');\n          \n          // Clean up test resources\n          source.disconnect();\n          audioContext.close();\n          stream.getTracks().forEach(track => track.stop());\n          \n          console.log('🎯 [VOICE-MODAL] Microphone permission granted and tested');\n        } catch (permissionError) {\n          console.error('❌ [VOICE-MODAL] Microphone permission or setup failed:', permissionError);\n          const errorMessage = permissionError instanceof Error ? permissionError.message : 'Check permissions.';\n          const errorMsg = `${new Date().toLocaleTimeString()} - ERROR: Microphone setup failed. ${errorMessage}`;\n          setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n          return;\n        }\n        \n        // Start VAD with additional error handling\n        try {\n          vad.start();\n          const debugMsg = `${new Date().toLocaleTimeString()} - VAD started successfully`;\n          setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n        } catch (vadError) {\n          console.error('❌ [VOICE-MODAL] VAD start failed:', vadError);\n          const errorMessage = vadError instanceof Error ? vadError.message : 'Unknown error';\n          const errorMsg = `${new Date().toLocaleTimeString()} - ERROR: VAD failed to start. ${errorMessage}`;\n          setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n        }\n      }\n    } catch (error) {\n      console.error('❌ [VOICE-MODAL] Error in toggle listening:', error);\n      const errorMsg = `${new Date().toLocaleTimeString()} - ERROR: ${error instanceof Error ? error.message : 'Failed to toggle VAD'}`;\n      setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n    }\n  }, [vad]);\n\n  // Manual recording fallback when VAD fails\n  const handleManualRecording = useCallback(async () => {\n    console.log('🎤 [MANUAL] Starting manual recording fallback');\n    \n    try {\n      if (!isManualRecording) {\n        // Start manual recording\n        const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n        const recorder = new MediaRecorder(stream);\n        const chunks: Blob[] = [];\n        \n        recorder.ondataavailable = (event) => {\n          if (event.data.size > 0) {\n            chunks.push(event.data);\n          }\n        };\n        \n        recorder.onstop = async () => {\n          console.log('🎤 [MANUAL] Recording stopped, processing audio...');\n          const audioBlob = new Blob(chunks, { type: 'audio/wav' });\n          \n          try {\n            // Create audio context for decoding compressed audio\n            const audioContext = new AudioContext();\n            \n            // Convert blob to ArrayBuffer\n            const audioBuffer = await audioBlob.arrayBuffer();\n            \n            // Decode the compressed audio to get raw PCM data\n            const decodedAudio = await audioContext.decodeAudioData(audioBuffer);\n            console.log('🎯 [MANUAL] Audio decoded:', {\n              sampleRate: decodedAudio.sampleRate,\n              channels: decodedAudio.numberOfChannels,\n              duration: decodedAudio.duration,\n              length: decodedAudio.length\n            });\n            \n            // Convert to mono Float32Array (match VAD format)\n            const channelData = decodedAudio.getChannelData(0); // Get first channel\n            const audioArray = new Float32Array(channelData);\n            \n            console.log('🎯 [MANUAL] Audio converted to Float32Array:', audioArray.length, 'samples');\n            \n            // Process through speech manager\n            speechManager.onSpeechStart();\n            await speechManager.onSpeechEnd(audioArray);\n            \n            // Clean up audio context\n            await audioContext.close();\n            \n          } catch (error) {\n            console.error('❌ [MANUAL] Audio decoding failed:', error);\n            const errorMsg = `${new Date().toLocaleTimeString()} - Manual recording audio decode failed: ${error instanceof Error ? error.message : 'Unknown error'}`;\n            setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n          }\n          \n          // Clean up recording resources\n          stream.getTracks().forEach(track => track.stop());\n          setIsManualRecording(false);\n          setMediaRecorder(null);\n        };\n        \n        setMediaRecorder(recorder);\n        setIsManualRecording(true);\n        recorder.start();\n        \n        const debugMsg = `${new Date().toLocaleTimeString()} - Manual recording started (VAD fallback)`;\n        setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n        \n      } else {\n        // Stop manual recording\n        if (mediaRecorder) {\n          mediaRecorder.stop();\n        }\n      }\n    } catch (error) {\n      console.error('❌ [MANUAL] Manual recording failed:', error);\n      const errorMsg = `${new Date().toLocaleTimeString()} - Manual recording failed: ${error instanceof Error ? error.message : 'Unknown error'}`;\n      setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n    }\n  }, [isManualRecording, mediaRecorder]);\n\n  // Track if we've already auto-started to prevent loops\n  const [hasAutoStarted, setHasAutoStarted] = useState(false);\n\n  // Handle VAD state updates with comprehensive error checking\n  useEffect(() => {\n    console.log('🔄 [VOICE-MODAL] VAD state changed', { \n      isOpen,\n      vadLoading: vad.loading, \n      vadListening: vad.listening,\n      vadUserSpeaking: vad.userSpeaking,\n      vadErrored: vad.errored,\n      hasAutoStarted\n    });\n    \n    // Check for VAD errors\n    if (vad.errored) {\n      console.error('❌ [VOICE-MODAL] VAD encountered an error');\n      const errorMsg = `${new Date().toLocaleTimeString()} - VAD ERROR: Check console and microphone permissions`;\n      setDebugMessages(prev => [...prev.slice(-10), errorMsg]);\n      return;\n    }\n    \n    // Auto-start VAD when it finishes loading (like AIUI behavior) - but only once\n    if (isOpen && !vad.loading && !vad.listening && !vad.errored && !hasAutoStarted) {\n      console.log('🎯 [VOICE-MODAL] VAD loaded successfully, attempting auto-start...');\n      const debugMsg = `${new Date().toLocaleTimeString()} - VAD loaded, attempting auto-start`;\n      setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n      \n      setHasAutoStarted(true);\n      // Use setTimeout to break the synchronous cycle and allow for proper initialization\n      setTimeout(() => {\n        handleToggleListening();\n      }, 300); // Increased delay for better stability\n    }\n    \n    // If VAD is in error state but we haven't tried recovery, attempt recovery\n    if (isOpen && !vad.loading && vad.errored && hasAutoStarted) {\n      console.log('🔄 [VOICE-MODAL] VAD in error state, scheduling recovery attempt...');\n      const debugMsg = `${new Date().toLocaleTimeString()} - VAD error detected, will attempt recovery`;\n      setDebugMessages(prev => [...prev.slice(-10), debugMsg]);\n      \n      // Don't continuously retry, just once more after a delay\n      setTimeout(() => {\n        if (vad.errored && !vad.listening) {\n          console.log('🔄 [VOICE-MODAL] Executing VAD recovery attempt');\n          handleToggleListening();\n        }\n      }, 1500);\n    }\n    \n    // Pause when modal closes\n    if (!isOpen && vad.listening) {\n      console.log('🛑 [VOICE-MODAL] Pausing VAD (modal closed)');\n      vad.pause();\n    }\n  }, [isOpen, vad.loading, vad.listening, vad.errored, hasAutoStarted]);\n\n  // Reset auto-start flag when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setHasAutoStarted(false);\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setLoading(vad.loading);\n  }, [vad.loading]);\n\n  return (\n    <>\n      {isOpen && (\n        <div className=\"fixed inset-0 z-50 bg-black\">\n          {loading ? (\n            <div className=\"flex items-center justify-center h-full\">\n              <RotateLoader\n                loading={loading}\n                color=\"#27eab6\"\n                aria-label=\"Loading Voice\"\n                data-testid=\"loader\"\n              />\n            </div>\n          ) : (\n            <>\n              {/* Canvas for particle animation */}\n              <Canvas draw={particleActions.draw} />\n              \n              {/* Close button */}\n              <button\n                onClick={onClose}\n                className=\"absolute top-8 right-8 w-12 h-12 rounded-full bg-white/10 hover:bg-white/20 backdrop-blur-sm flex items-center justify-center transition-colors\"\n                aria-label=\"Close voice mode\"\n              >\n                <X className=\"w-6 h-6 text-white\" />\n              </button>\n              \n              {/* Control buttons */}\n              <div className=\"absolute bottom-12 left-1/2 transform -translate-x-1/2 flex gap-4\">\n                <button\n                  onClick={handleToggleListening}\n                  className={`px-8 py-4 rounded-full font-medium transition-all transform hover:scale-105 ${\n                    vad.listening\n                      ? 'bg-red-500 hover:bg-red-600 text-white shadow-lg shadow-red-500/50'\n                      : 'bg-white/10 hover:bg-white/20 text-white backdrop-blur-sm'\n                  }`}\n                >\n                  {vad.listening ? 'Pause' : 'Resume'}\n                </button>\n                \n                {/* Manual recording fallback if VAD fails */}\n                {vad.errored && (\n                  <>\n                    <button\n                      onClick={handleManualRecording}\n                      className={`px-6 py-4 rounded-full font-medium transition-all transform hover:scale-105 ${\n                        isManualRecording\n                          ? 'bg-red-500 hover:bg-red-600 text-white shadow-lg shadow-red-500/50'\n                          : 'bg-green-500 hover:bg-green-600 text-white'\n                      }`}\n                    >\n                      {isManualRecording ? 'Stop Recording' : 'Manual Record'}\n                    </button>\n                    <button\n                      onClick={() => window.location.reload()}\n                      className=\"px-6 py-4 rounded-full font-medium bg-blue-500 hover:bg-blue-600 text-white transition-all transform hover:scale-105\"\n                    >\n                      Reload & Retry\n                    </button>\n                  </>\n                )}\n              </div>\n\n              {/* Status display */}\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-center pointer-events-none\">\n                <p className=\"text-2xl font-light mb-2\">\n                  {isManualRecording \n                    ? 'Recording...' \n                    : vad.errored \n                    ? 'Error - Try Manual Mode' \n                    : vad.listening \n                    ? 'Listening...' \n                    : 'Paused'}\n                </p>\n                {vad.errored && !isManualRecording && (\n                  <p className=\"text-sm text-red-300 max-w-md mx-auto mb-2\">\n                    VAD worklet failed to load. Use \"Manual Record\" button below or reload page.\n                  </p>\n                )}\n                {isManualRecording && (\n                  <p className=\"text-sm text-green-300 max-w-md mx-auto mb-2\">\n                    Press \"Stop Recording\" when you finish speaking.\n                  </p>\n                )}\n                {transcript && (\n                  <p className=\"text-lg text-white/70 max-w-md mx-auto\">\"{transcript}\"</p>\n                )}\n              </div>\n\n              {/* Debug console - Always visible for debugging */}\n              <div className=\"absolute bottom-32 left-8 right-8 max-w-2xl mx-auto max-h-40 overflow-y-auto bg-black/30 backdrop-blur-sm rounded-lg p-4\">\n                <div className=\"text-xs text-green-400 font-mono space-y-1\">\n                  <div className={`${vad.errored ? 'text-red-400' : 'text-yellow-400'}`}>\n                    VAD Status: {vad.loading ? 'Loading...' : vad.errored ? 'ERROR' : vad.listening ? 'Listening' : 'Paused'}\n                  </div>\n                  <div className=\"text-yellow-400\">User Speaking: {vad.userSpeaking ? 'Yes' : 'No'}</div>\n                  <div className=\"text-yellow-400\">Project ID: {projectId || 'Not Set'}</div>\n                  <div className={`${vad.errored ? 'text-red-400' : 'text-blue-400'}`}>\n                    VAD Error: {vad.errored ? 'Yes - Check microphone permissions' : 'No'}\n                  </div>\n                  <div className=\"text-blue-400\">Model Files: /silero_vad.onnx, /vad.worklet.bundle.min.js</div>\n                  {debugMessages.length > 0 ? (\n                    debugMessages.slice(-6).map((msg, i) => (\n                      <div key={i} className={`opacity-90 ${msg.includes('ERROR') ? 'text-red-300' : ''}`}>{msg}</div>\n                    ))\n                  ) : (\n                    <div className=\"text-gray-400\">Initializing VAD... Check console for details</div>\n                  )}\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      )}\n    </>\n  );\n}","/**\n * ChatContainer Component\n * \n * Main chat interface component that manages the entire chat experience.\n * This is the primary component for integrating CustomGPT chat functionality.\n * \n * Features:\n * - Message display with streaming support\n * - Agent selection and switching\n * - Citation handling with modal details\n * - Multiple deployment modes (standalone, widget, floating)\n * - Welcome screen with example prompts\n * - Error handling and authorization checks\n * \n * For customization:\n * - Example questions are now fetched from agent settings API\n * - Modify DEFAULT_EXAMPLE_PROMPTS for fallback starter questions\n * - Customize WelcomeMessage for branding\n * - Adjust ChatHeader for different layouts\n * - Style using Tailwind classes throughout\n */\n\n'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Sparkles, Bot } from 'lucide-react';\nimport Link from 'next/link';\nimport { toast } from 'sonner';\n\nimport type { ChatMessage, Citation, Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Message } from './Message';\nimport { ChatInput } from './ChatInput';\nimport { TypingIndicator } from './TypingIndicator';\nimport { AgentSelector } from './AgentSelector';\nimport { CitationDetailsModal } from './CitationDetailsModal';\nimport { CitationFilePreview } from './CitationFilePreview';\nimport { ConversationManager } from './ConversationManager';\nimport { MessageErrorDisplay } from './MessageErrorDisplay';\nimport { logger } from '@/lib/logger';\nimport { useWidgetSafe } from '@/widget/WidgetContext';\nimport { useMessageStore, useConversationStore, useAgentStore } from '@/hooks/useWidgetStore';\nimport { MessageSkeleton, LoadingOverlay } from '@/components/ui/loading';\nimport { getClient } from '@/lib/api/client';\nimport { VoiceModal } from '@/components/voice/VoiceModal';\n\n/**\n * Default example prompts shown to users when starting a new conversation\n * These are used as fallback when API-sourced example questions are not available\n */\nconst DEFAULT_EXAMPLE_PROMPTS = [\n  \"What can you help me with?\",\n  \"Explain this document\", \n  \"Summarize key points\",\n  \"Answer my questions\",\n];\n\ninterface ExamplePromptCardProps {\n  /** The prompt text to display */\n  prompt: string;\n  /** Handler called when the prompt is clicked */\n  onClick: (prompt: string) => void;\n}\n\n/**\n * ExamplePromptCard Component\n * \n * Clickable card showing an example prompt that users can select\n * to quickly start a conversation\n */\nconst ExamplePromptCard: React.FC<ExamplePromptCardProps> = ({ prompt, onClick }) => {\n  return (\n    <button\n      onClick={() => onClick(prompt)}\n      className=\"p-3 text-left bg-card border border-border rounded-lg hover:border-accent hover:shadow-sm transition-all text-sm text-card-foreground\"\n    >\n      {prompt}\n    </button>\n  );\n};\n\ninterface WelcomeMessageProps {\n  /** Handler called when an example prompt is clicked */\n  onPromptClick: (prompt: string) => void;\n}\n\n/**\n * WelcomeMessage Component\n * \n * Displays a welcome screen when no messages exist in the conversation.\n * Shows the agent name, welcome text, and example prompts.\n * Fetches agent-specific example questions from API with fallback to defaults.\n * Uses Framer Motion for smooth animations.\n */\nconst WelcomeMessage: React.FC<WelcomeMessageProps> = ({ onPromptClick }) => {\n  const { currentAgent } = useAgentStore();\n  const [exampleQuestions, setExampleQuestions] = useState<string[]>(DEFAULT_EXAMPLE_PROMPTS);\n  const [loading, setLoading] = useState(false);\n  \n  /**\n   * Fetch agent settings to get custom example questions\n   */\n  useEffect(() => {\n    const fetchExampleQuestions = async () => {\n      if (!currentAgent) {\n        return;\n      }\n\n      // If we already have example questions from settings, use them\n      if (currentAgent.settings?.example_questions && currentAgent.settings.example_questions.length > 0) {\n        setExampleQuestions(currentAgent.settings.example_questions);\n        return;\n      }\n\n      setLoading(true);\n      try {\n        const client = getClient();\n        const response = await client.getAgentSettings(currentAgent.id);\n        const settings = response.data || response;\n        \n        // Use API example questions if available, otherwise keep defaults\n        if (settings.example_questions && settings.example_questions.length > 0) {\n          setExampleQuestions(settings.example_questions);\n          \n          logger.info('UI', 'Loaded custom example questions from API', {\n            agentId: currentAgent.id,\n            questionCount: settings.example_questions.length\n          });\n        } else {\n          logger.info('UI', 'No custom example questions found, using defaults', {\n            agentId: currentAgent.id\n          });\n        }\n      } catch (error) {\n        logger.warn('UI', 'Failed to load agent settings for example questions', {\n          agentId: currentAgent.id,\n          error: error instanceof Error ? error.message : String(error)\n        });\n        // Keep default questions on error\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchExampleQuestions();\n  }, [currentAgent]);\n  \n  return (\n    <div className=\"flex flex-col items-center justify-center h-full px-4 py-8\">\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className=\"text-center max-w-md\"\n      >\n        {/* Logo */}\n        <div className=\"w-16 h-16 rounded-full flex items-center justify-center mb-6 mx-auto\">\n          <img \n            src=\"/logo.png\" \n            alt=\"CustomGPT.ai Logo\" \n            className=\"w-16 h-16 rounded-full\"\n          />\n        </div>\n        \n        {/* Welcome Text */}\n        <h3 className=\"text-xl font-semibold text-foreground mb-2\">\n          Welcome to {currentAgent?.project_name || 'CustomGPT'}!\n        </h3>\n        <p className=\"text-muted-foreground mb-8\">\n          I'm here to help answer your questions and assist with your tasks. How can I help you today?\n        </p>\n        \n        {/* Example Prompts */}\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 w-full\">\n          {exampleQuestions.map((prompt, idx) => (\n            <motion.div\n              key={`${currentAgent?.id}-${idx}`} // Include agent ID to force re-render on agent change\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3, delay: 0.1 + (idx * 0.1) }}\n            >\n              <ExamplePromptCard\n                prompt={prompt}\n                onClick={onPromptClick}\n              />\n            </motion.div>\n          ))}\n        </div>\n        \n        {/* Loading indicator for example questions */}\n        {loading && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className=\"mt-4\"\n          >\n            <p className=\"text-xs text-muted-foreground\">Loading custom questions...</p>\n          </motion.div>\n        )}\n      </motion.div>\n    </div>\n  );\n};\n\ninterface MessageAreaProps {\n  /** Additional CSS classes for styling */\n  className?: string;\n}\n\n/**\n * MessageArea Component\n * \n * Scrollable area that displays all messages in the current conversation.\n * Handles:\n * - Message rendering with streaming support\n * - Auto-scrolling to latest messages\n * - Citation click handling\n * - Error display\n * - Welcome message when empty\n * - Loading states with typing indicator\n */\nconst MessageArea: React.FC<MessageAreaProps> = ({ className }) => {\n  const { \n    messages, \n    streamingMessage, \n    isStreaming,\n    error,\n    sendMessage,\n    updateMessageFeedback,\n    loading \n  } = useMessageStore();\n  const { currentConversation } = useConversationStore();\n  const { currentAgent } = useAgentStore();\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMessages, setIsLoadingMessages] = React.useState(false);\n  const [prevConversationId, setPrevConversationId] = React.useState<string | null>(null);\n  \n  // Citation modal state - tracks which citation is being viewed\n  const [selectedCitationId, setSelectedCitationId] = React.useState<number | string | null>(null);\n  const [citationModalOpen, setCitationModalOpen] = React.useState(false);\n  \n  // Citation preview state\n  const [previewCitationId, setPreviewCitationId] = React.useState<string | null>(null);\n  const [previewModalOpen, setPreviewModalOpen] = React.useState(false);\n  \n  const conversationMessages = currentConversation \n    ? messages.get(currentConversation.id.toString()) || []\n    : [];\n  \n  // Detect conversation change\n  useEffect(() => {\n    if (currentConversation && currentConversation.id.toString() !== prevConversationId) {\n      setIsLoadingMessages(true);\n      setPrevConversationId(currentConversation.id.toString());\n      \n      // Set a timeout to hide loading after a reasonable time\n      const timeout = setTimeout(() => {\n        setIsLoadingMessages(false);\n      }, 1000);\n      \n      return () => clearTimeout(timeout);\n    }\n  }, [currentConversation, prevConversationId]);\n  \n  // Hide loading when messages arrive OR when message loading completes\n  useEffect(() => {\n    if (isLoadingMessages && (conversationMessages.length > 0 || !loading)) {\n      setIsLoadingMessages(false);\n    }\n  }, [conversationMessages, isLoadingMessages, loading]);\n  \n  /**\n   * Auto-scroll effect\n   * Automatically scrolls to the bottom when new messages arrive\n   * or when streaming messages are updated\n   * \n   * Uses instant scroll for conversation switches to avoid annoying\n   * scroll animations when clicking on past chats with many messages.\n   * Uses smooth scroll for new messages and streaming updates.\n   */\n  useEffect(() => {\n    if (scrollRef.current) {\n      // Use instant scroll when loading messages (conversation switch)\n      // Use smooth scroll for real-time message additions and streaming\n      const scrollBehavior = isLoadingMessages ? 'auto' : 'smooth';\n      \n      scrollRef.current.scrollTo({\n        top: scrollRef.current.scrollHeight,\n        behavior: scrollBehavior,\n      });\n    }\n  }, [conversationMessages, streamingMessage, isLoadingMessages]);\n  \n  const handleExamplePrompt = (prompt: string) => {\n    logger.info('UI', 'Example prompt clicked', { prompt });\n    sendMessage(prompt);\n  };\n  \n  const handleCitationClick = (citation: Citation) => {\n    logger.info('UI', 'Citation clicked', {\n      citationId: citation.id,\n      citationIndex: citation.index,\n      citationTitle: citation.title\n    });\n    \n    // Open citation details modal with the citation ID\n    if (citation.id) {\n      setSelectedCitationId(citation.id);\n      setCitationModalOpen(true);\n    }\n  };\n  \n  const handlePreviewClick = (citation: Citation) => {\n    logger.info('UI', 'Citation preview requested', {\n      citationId: citation.id,\n      citationTitle: citation.title\n    });\n    \n    // Open preview modal with the citation ID\n    if (citation.id) {\n      setPreviewCitationId(citation.id);\n      setPreviewModalOpen(true);\n    }\n  };\n  \n  const handleMessageFeedback = async (messageId: string, feedback: 'like' | 'dislike') => {\n    logger.info('UI', 'Message feedback provided', {\n      messageId,\n      feedback\n    });\n    \n    // Call the message store to update feedback\n    await updateMessageFeedback(messageId, feedback);\n  };\n  \n  return (\n    <div\n      ref={scrollRef}\n      className={cn(\n        'flex-1 overflow-y-auto scroll-smooth',\n        'bg-gradient-to-b from-muted/50 to-background',\n        className\n      )}\n    >\n      {/* Error Message */}\n      {error && (\n        <div className=\"p-4 m-4\">\n          <MessageErrorDisplay \n            error={error}\n            onRetry={() => {\n              // Clear error and retry sending last message if applicable\n              const conversationMessages = currentConversation \n                ? messages.get(currentConversation.id.toString()) || []\n                : [];\n              const lastUserMessage = conversationMessages\n                .filter(m => m.role === 'user')\n                .pop();\n              \n              if (lastUserMessage && lastUserMessage.status === 'error') {\n                sendMessage(lastUserMessage.content);\n              }\n            }}\n          />\n        </div>\n      )}\n\n      {/* Loading state when switching conversations */}\n      {isLoadingMessages && (\n        <LoadingOverlay \n          visible={true} \n          message={conversationMessages.length > 0 ? \"Loading conversation...\" : \"Switching to conversation...\"}\n          blur={true}\n        />\n      )}\n      \n      {/* Message skeleton fallback for empty conversations */}\n      {isLoadingMessages && conversationMessages.length === 0 && !isStreaming && (\n        <div className=\"space-y-0 opacity-30\">\n          <MessageSkeleton isAssistant={false} lines={2} />\n          <MessageSkeleton isAssistant={true} lines={3} />\n          <MessageSkeleton isAssistant={false} lines={1} />\n          <MessageSkeleton isAssistant={true} lines={4} />\n        </div>\n      )}\n\n      {/* Welcome Message */}\n      {conversationMessages.length === 0 && !streamingMessage && !error && !isLoadingMessages && (\n        <WelcomeMessage onPromptClick={handleExamplePrompt} />\n      )}\n      \n      {/* Messages */}\n      {conversationMessages.length > 0 && (\n        <div className=\"space-y-0\">\n          {conversationMessages.map((message, index) => (\n            <Message\n              key={message.id}\n              message={message}\n              agent={currentAgent}\n              isLast={index === conversationMessages.length - 1}\n              onCitationClick={handleCitationClick}\n              onPreviewClick={handlePreviewClick}\n              onFeedback={(feedback) => handleMessageFeedback(message.id, feedback)}\n            />\n          ))}\n        </div>\n      )}\n      \n      {/* Streaming Message */}\n      {streamingMessage && (\n        <Message\n          message={streamingMessage}\n          agent={currentAgent}\n          isStreaming={true}\n          isLast={true}\n          onCitationClick={handleCitationClick}\n          onPreviewClick={handlePreviewClick}\n        />\n      )}\n      \n      {/* Typing Indicator */}\n      {isStreaming && !streamingMessage && (\n        <TypingIndicator />\n      )}\n      \n      {/* Citation Details Modal */}\n      {selectedCitationId && (\n        <CitationDetailsModal\n          isOpen={citationModalOpen}\n          onClose={() => {\n            setCitationModalOpen(false);\n            setSelectedCitationId(null);\n          }}\n          citationId={selectedCitationId}\n          projectId={currentAgent?.id}\n        />\n      )}\n      \n      {/* Citation File Preview Modal */}\n      {previewCitationId && (\n        <CitationFilePreview\n          isOpen={previewModalOpen}\n          onClose={() => {\n            setPreviewModalOpen(false);\n            setPreviewCitationId(null);\n          }}\n          citationId={previewCitationId}\n          fileName={`Citation_${previewCitationId}.txt`}\n        />\n      )}\n    </div>\n  );\n};\n\ninterface ChatHeaderProps {\n  /** Deployment mode affects header layout */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler for agent settings button */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Current conversation ID */\n  currentConversationId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback to create new conversation */\n  onCreateConversation?: () => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n}\n\n/**\n * ChatHeader Component\n * \n * Header bar for the chat interface. Layout changes based on deployment mode:\n * - Standalone: Full header with agent selector\n * - Widget/Floating: Compact header with close button\n * \n * Shows agent status (online/offline) and provides agent switching\n */\nconst ChatHeader: React.FC<ChatHeaderProps> = ({ \n  mode = 'standalone', \n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  conversationRefreshKey\n}) => {\n  const { currentAgent } = useAgentStore();\n  \n  if (mode === 'widget' || mode === 'floating') {\n    return (\n      <header className=\"border-b border-border bg-background\">\n        {/* Conversation Manager */}\n        {enableConversationManagement && sessionId && (\n          <div className=\"px-4 py-2 border-b border-border\">\n            <ConversationManager\n              sessionId={sessionId}\n              maxConversations={maxConversations}\n              currentConversationId={currentConversationId}\n              onConversationChange={onConversationChange}\n              onCreateConversation={onCreateConversation}\n              className=\"w-full\"\n              refreshKey={conversationRefreshKey}\n            />\n          </div>\n        )}\n        \n        {/* Header Content */}\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            <div className=\"w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0\">\n              <img \n                src=\"/logo.png\" \n                alt=\"CustomGPT.ai Logo\" \n                className=\"w-8 h-8 rounded-lg\"\n              />\n            </div>\n            <div className=\"min-w-0 flex-1\">\n              <h2 className=\"font-semibold text-foreground truncate\">\n                {currentAgent?.project_name || 'CustomGPT Assistant'}\n              </h2>\n              <p className=\"text-xs text-muted-foreground\">\n                {currentAgent?.is_chat_active ? 'Online' : 'Offline'}\n              </p>\n            </div>\n          </div>\n          \n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"p-1.5 rounded-lg hover:bg-accent hover:text-accent-foreground transition-colors flex-shrink-0\"\n            >\n              <span className=\"sr-only\">Close</span>\n              ×\n            </button>\n          )}\n        </div>\n      </header>\n    );\n  }\n  \n  // For standalone mode, show agent selector header\n  if (mode === 'standalone') {\n    return (\n      <header className=\"flex items-center justify-between px-4 py-3 border-b border-border bg-background\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-lg bg-brand-500 flex items-center justify-center\">\n            <Bot className=\"w-5 h-5 text-white\" />\n          </div>\n          <h1 className=\"text-lg font-semibold text-foreground\">\n            Agent Chat\n          </h1>\n        </div>\n        \n        <div className=\"flex-1 max-w-xs ml-4\">\n          <AgentSelector\n            onSettingsClick={onAgentSettings}\n            className=\"w-full\"\n          />\n        </div>\n      </header>\n    );\n  }\n  \n  return null;\n};\n\ninterface ChatContainerProps {\n  /** Deployment mode - affects layout and styling */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Additional CSS classes */\n  className?: string;\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler when agent settings are requested */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Specific conversation thread to load */\n  threadId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback when message is sent/received */\n  onMessage?: (message: any) => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n}\n\n/**\n * ChatContainer Component - Main Export\n * \n * The primary chat interface component. Can be deployed in three modes:\n * \n * 1. Standalone: Full-page chat interface\n *    - Use when chat is the main feature\n *    - No fixed dimensions, fills container\n * \n * 2. Widget: Embedded chat widget\n *    - Use for embedding in existing pages\n *    - Fixed dimensions with shadow\n * \n * 3. Floating: Floating chat bubble\n *    - Use for overlay chat interfaces\n *    - Fixed dimensions with stronger shadow\n * \n * @example\n * // Standalone mode\n * <ChatContainer mode=\"standalone\" />\n * \n * @example\n * // Widget mode with close handler\n * <ChatContainer \n *   mode=\"widget\" \n *   onClose={() => setShowChat(false)}\n * />\n */\nexport const ChatContainer: React.FC<ChatContainerProps> = ({ \n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  conversationRefreshKey\n}) => {\n  const { sendMessage, isStreaming, cancelStreaming } = useMessageStore();\n  const { fetchAgents, agents, currentAgent } = useAgentStore();\n  const { currentConversation } = useConversationStore();\n  \n  // Get widget instance from context\n  const widget = useWidgetSafe();\n  \n  // Track current conversation for the widget\n  const [currentConversationId, setCurrentConversationId] = React.useState<string | null>(null);\n  \n  // Voice modal state\n  const [isVoiceModalOpen, setIsVoiceModalOpen] = React.useState(false);\n  \n  // Handle conversation management\n  const handleConversationChange = (conversation: any) => {\n    setCurrentConversationId(conversation.id);\n    onConversationChange?.(conversation);\n    // The widget will handle the actual conversation switch\n    if (widget) {\n      widget.switchConversation(conversation.id);\n    }\n  };\n  \n  const handleCreateConversation = () => {\n    if (widget) {\n      const newConv = widget.createConversation();\n      if (newConv) {\n        setCurrentConversationId(newConv.id);\n      } else {\n        // Show user-friendly message when conversation limit is reached\n        const maxConversations = widget.configuration?.maxConversations || 5;\n        toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n      }\n    }\n  };\n\n  /**\n   * Agent initialization effect\n   * Fetches available agents when the component first mounts\n   * Only runs if agents haven't been loaded yet\n   */\n  useEffect(() => {\n    const initializeAgents = async () => {\n      // Only fetch if we don't have agents and no current agent\n      if (agents.length === 0 && !currentAgent) {\n        logger.info('UI', 'Initializing agents on ChatContainer mount');\n        try {\n          await fetchAgents();\n          logger.info('UI', 'Agents initialized successfully', {\n            agentCount: agents.length\n          });\n        } catch (error) {\n          logger.error('UI', 'Failed to initialize agents', error, {\n            errorMessage: error instanceof Error ? error.message : String(error)\n          });\n          console.error('Failed to initialize agents:', error);\n        }\n      } else {\n        logger.info('UI', 'Agents already initialized', {\n          agentCount: agents.length,\n          hasCurrentAgent: !!currentAgent,\n          currentAgentName: currentAgent?.project_name\n        });\n      }\n    };\n\n    initializeAgents();\n  }, []); // Empty dependency array to run only once on mount\n  \n  const handleSendMessage = async (content: string, files?: File[]) => {\n    logger.info('UI', 'Sending message from ChatContainer', {\n      contentLength: content.length,\n      hasFiles: files && files.length > 0,\n      fileCount: files?.length || 0,\n      currentAgent: currentAgent?.project_name,\n      agentId: currentAgent?.id\n    });\n    \n    try {\n      await sendMessage(content, files);\n      logger.info('UI', 'Message sent successfully');\n    } catch (error) {\n      logger.error('UI', 'Failed to send message from ChatContainer', error, {\n        errorMessage: error instanceof Error ? error.message : String(error),\n        isAuthError: error instanceof Error && (error.message.includes('403') || error.message.includes('unauthorized'))\n      });\n      console.error('Failed to send message:', error);\n    }\n  };\n  \n  const handleStopGeneration = () => {\n    logger.info('UI', 'User cancelled streaming generation');\n    cancelStreaming();\n  };\n  \n  const handleAgentSettings = (agent: Agent) => {\n    logger.info('UI', 'Agent settings requested', {\n      agentId: agent.id,\n      agentName: agent.project_name\n    });\n    onAgentSettings?.(agent);\n  };\n  \n  return (\n    <div\n      className={cn(\n        'flex flex-col bg-background',\n        mode === 'standalone' && 'h-full',\n        mode === 'widget' && 'h-[600px] w-[400px] rounded-lg shadow-xl border border-border',\n        mode === 'floating' && 'h-[600px] w-[400px] rounded-lg shadow-2xl border border-border',\n        className\n      )}\n    >\n      <ChatHeader \n        mode={mode} \n        onClose={onClose}\n        onAgentSettings={handleAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        currentConversationId={currentConversationId || currentConversation?.id.toString()}\n        onConversationChange={handleConversationChange}\n        onCreateConversation={handleCreateConversation}\n        conversationRefreshKey={conversationRefreshKey}\n      />\n      <MessageArea className=\"flex-1\" />\n      <ChatInput\n        onSend={handleSendMessage}\n        disabled={isStreaming}\n        placeholder={isStreaming ? \"AI is thinking...\" : \"Send a message...\"}\n        onVoiceClick={() => setIsVoiceModalOpen(true)}\n      />\n      \n      {/* Branding Footer */}\n      {(mode === 'widget' || mode === 'floating') && (\n        <div className=\"px-4 py-2 border-t border-border bg-muted\">\n          <a\n            href=\"https://customgpt.ai\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className=\"text-xs text-muted-foreground hover:text-foreground transition-colors block text-center\"\n          >\n            Powered by CustomGPT.ai\n          </a>\n        </div>\n      )}\n      \n      {/* Voice Modal */}\n      {currentAgent && (\n        <VoiceModal\n          isOpen={isVoiceModalOpen}\n          onClose={() => setIsVoiceModalOpen(false)}\n          projectId={currentAgent.id.toString()}\n          projectName={currentAgent.project_name}\n        />\n      )}\n    </div>\n  );\n};","import React from 'react';\nimport { X, Calendar, User, Hash, Clock, AlertCircle, Copy, Download, Share2 } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { toast } from 'sonner';\nimport type { Conversation } from '@/types';\nimport { Button } from '@/components/ui/button';\nimport { formatTimestamp } from '@/lib/utils';\n\ninterface ConversationDetailsModalProps {\n  conversation: Conversation | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onExport?: (conversation: Conversation) => void;\n  onShare?: (conversation: Conversation) => void;\n}\n\nexport const ConversationDetailsModal: React.FC<ConversationDetailsModalProps> = ({\n  conversation,\n  isOpen,\n  onClose,\n  onExport,\n  onShare,\n}) => {\n  if (!isOpen || !conversation) return null;\n\n  const copyToClipboard = (text: string, label: string) => {\n    navigator.clipboard.writeText(text);\n    toast.success(`${label} copied to clipboard`);\n  };\n\n  const formatFullTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'short'\n    });\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black bg-opacity-50 z-50\"\n            onClick={onClose}\n          />\n\n          {/* Modal */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.95 }}\n            className=\"fixed inset-x-0 top-[10%] mx-auto max-w-2xl bg-white rounded-lg shadow-xl z-50 max-h-[80vh] overflow-hidden\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            {/* Header */}\n            <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">Conversation Details</h2>\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={onClose}\n                className=\"h-8 w-8\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n\n            {/* Content */}\n            <div className=\"p-6 space-y-6 overflow-y-auto max-h-[calc(80vh-200px)]\">\n              {/* Basic Information */}\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-500 uppercase tracking-wider mb-3\">\n                  Basic Information\n                </h3>\n                <div className=\"bg-gray-50 rounded-lg p-4 space-y-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-sm font-medium text-gray-700\">Conversation Name</span>\n                    </div>\n                    <span className=\"text-sm text-gray-900 font-medium\">{conversation.name}</span>\n                  </div>\n\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-sm font-medium text-gray-700\">Conversation ID</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-sm text-gray-900 font-mono\">{conversation.id}</span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"h-6 w-6\"\n                        onClick={() => copyToClipboard(conversation.id.toString(), 'Conversation ID')}\n                      >\n                        <Copy className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-sm font-medium text-gray-700\">Session ID</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-sm text-gray-900 font-mono truncate max-w-[300px]\" title={conversation.session_id}>\n                        {conversation.session_id}\n                      </span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className=\"h-6 w-6\"\n                        onClick={() => copyToClipboard(conversation.session_id, 'Session ID')}\n                      >\n                        <Copy className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-sm font-medium text-gray-700\">Project ID</span>\n                    </div>\n                    <span className=\"text-sm text-gray-900\">{conversation.project_id}</span>\n                  </div>\n\n                  {conversation.message_count !== undefined && (\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <Hash className=\"h-4 w-4 text-gray-400\" />\n                        <span className=\"text-sm font-medium text-gray-700\">Message Count</span>\n                      </div>\n                      <span className=\"text-sm text-gray-900\">{conversation.message_count} messages</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Timestamps */}\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-500 uppercase tracking-wider mb-3\">\n                  Timeline\n                </h3>\n                <div className=\"bg-gray-50 rounded-lg p-4 space-y-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-sm font-medium text-gray-700\">Created At</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <span className=\"text-sm text-gray-900 block\">{formatFullTimestamp(conversation.created_at)}</span>\n                      <span className=\"text-xs text-gray-500\">({formatTimestamp(conversation.created_at)})</span>\n                    </div>\n                  </div>\n\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className=\"h-4 w-4 text-gray-400\" />\n                      <span className=\"text-sm font-medium text-gray-700\">Last Updated</span>\n                    </div>\n                    <div className=\"text-right\">\n                      <span className=\"text-sm text-gray-900 block\">{formatFullTimestamp(conversation.updated_at)}</span>\n                      <span className=\"text-xs text-gray-500\">({formatTimestamp(conversation.updated_at)})</span>\n                    </div>\n                  </div>\n\n                  {conversation.deleted_at && (\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <AlertCircle className=\"h-4 w-4 text-red-400\" />\n                        <span className=\"text-sm font-medium text-red-700\">Deleted At</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <span className=\"text-sm text-red-900 block\">{formatFullTimestamp(conversation.deleted_at)}</span>\n                        <span className=\"text-xs text-red-500\">({formatTimestamp(conversation.deleted_at)})</span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* User Information */}\n              {conversation.created_by && (\n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-500 uppercase tracking-wider mb-3\">\n                    User Information\n                  </h3>\n                  <div className=\"bg-gray-50 rounded-lg p-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <User className=\"h-4 w-4 text-gray-400\" />\n                        <span className=\"text-sm font-medium text-gray-700\">Created By</span>\n                      </div>\n                      <span className=\"text-sm text-gray-900\">User ID: {conversation.created_by}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Actions */}\n              <div>\n                <h3 className=\"text-sm font-medium text-gray-500 uppercase tracking-wider mb-3\">\n                  Actions\n                </h3>\n                <div className=\"flex gap-3\">\n                  {onExport && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => onExport(conversation)}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Download className=\"h-4 w-4\" />\n                      Export Conversation\n                    </Button>\n                  )}\n                  {onShare && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => onShare(conversation)}\n                      className=\"flex items-center gap-2\"\n                    >\n                      <Share2 className=\"h-4 w-4\" />\n                      Share Conversation\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Footer */}\n            <div className=\"p-6 border-t border-gray-200 bg-gray-50\">\n              <div className=\"flex justify-end\">\n                <Button onClick={onClose}>\n                  Close\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};","import React, { useState } from 'react';\nimport { AlertTriangle, Trash2, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface DeleteConversationDialogProps {\n  isOpen: boolean;\n  conversationName: string;\n  messageCount?: number;\n  onConfirm: () => Promise<void>;\n  onCancel: () => void;\n}\n\nexport const DeleteConversationDialog: React.FC<DeleteConversationDialogProps> = ({\n  isOpen,\n  conversationName,\n  messageCount,\n  onConfirm,\n  onCancel,\n}) => {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleConfirm = async () => {\n    setIsDeleting(true);\n    setError(null);\n    \n    try {\n      await onConfirm();\n    } catch (err: any) {\n      console.error('Delete failed:', err);\n      \n      // Parse error message based on status code\n      let errorMessage = 'Failed to delete conversation';\n      \n      if (err.status === 400) {\n        errorMessage = 'Invalid request. Please try again.';\n      } else if (err.status === 401) {\n        errorMessage = 'Authentication failed. Please refresh the page and try again.';\n      } else if (err.status === 404) {\n        errorMessage = 'Conversation not found. It may have already been deleted.';\n      } else if (err.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      setIsDeleting(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black bg-opacity-50 z-50\"\n            onClick={!isDeleting ? onCancel : undefined}\n          />\n\n          {/* Dialog */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            exit={{ opacity: 0, scale: 0.95 }}\n            className=\"fixed left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-full max-w-md bg-white rounded-lg shadow-xl z-50\"\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className=\"p-6\">\n              {/* Header */}\n              <div className=\"flex items-start gap-4\">\n                <div className=\"p-3 bg-red-100 rounded-full\">\n                  <AlertTriangle className=\"w-6 h-6 text-red-600\" />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className=\"text-lg font-semibold text-gray-900\">\n                    Delete Conversation\n                  </h3>\n                  <p className=\"mt-2 text-sm text-gray-600\">\n                    Are you sure you want to delete <strong>\"{conversationName}\"</strong>?\n                  </p>\n                  \n                  {messageCount !== undefined && messageCount > 0 && (\n                    <p className=\"mt-2 text-sm text-gray-500\">\n                      This conversation contains {messageCount} message{messageCount !== 1 ? 's' : ''}.\n                    </p>\n                  )}\n                  \n                  <div className=\"mt-3 p-3 bg-red-50 rounded-lg\">\n                    <p className=\"text-sm text-red-800 font-medium\">\n                      ⚠️ This action cannot be undone\n                    </p>\n                    <p className=\"text-xs text-red-700 mt-1\">\n                      All messages and data associated with this conversation will be permanently deleted.\n                    </p>\n                  </div>\n\n                  {/* Error Display */}\n                  {error && (\n                    <div className=\"mt-3 p-3 bg-red-100 border border-red-200 rounded-lg\">\n                      <p className=\"text-sm text-red-900 font-medium\">\n                        Error: {error}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className=\"mt-6 flex items-center gap-3 justify-end\">\n                <Button\n                  variant=\"outline\"\n                  onClick={onCancel}\n                  disabled={isDeleting}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleConfirm}\n                  disabled={isDeleting}\n                  className=\"min-w-[100px]\"\n                >\n                  {isDeleting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                      Deleting...\n                    </>\n                  ) : (\n                    <>\n                      <Trash2 className=\"w-4 h-4 mr-2\" />\n                      Delete\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};","/**\n * Conversation Sidebar Component\n * \n * Manages the conversation list and provides quick navigation\n * between different chat sessions. Includes conversation management\n * features like create, rename, and delete.\n * \n * Features:\n * - Conversation list with search/filter\n * - Create new conversation\n * - Rename conversations inline\n * - Delete conversations with confirmation\n * - Agent management access\n * - Data source management\n * - Analytics dashboard access\n * - Collapsible sidebar\n * \n * State Management:\n * - Conversations from conversationStore\n * - Current conversation selection\n * - Search/filter state (local)\n * - Collapse state (passed from parent)\n * \n * UI/UX Features:\n * - Hover states and animations\n * - Keyboard shortcuts (future enhancement)\n * - Context menu for conversation actions\n * - Auto-scroll to selected conversation\n * - Responsive design for mobile\n * \n * Features:\n * - Advanced conversation organization with categories and search\n * - Bulk conversation management with export/import capabilities\n * - Customizable sidebar design with responsive layout\n * - Professional conversation management with templates and pinning\n * - Comprehensive conversation history and analytics\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport Link from 'next/link';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  MessageSquare, \n  Plus, \n  MoreHorizontal, \n  Trash2, \n  Edit3, \n  Calendar,\n  Search,\n  X,\n  Bot,\n  Filter,\n  ChevronDown,\n  ChevronUp,\n  Info,\n  Download,\n  Share2,\n  Clock,\n  User\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Conversation } from '@/types';\nimport { useConversationStore, useAgentStore, useMessageStore } from '@/hooks/useWidgetStore';\nimport { cn, formatTimestamp, generateConversationName } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { logger } from '@/lib/logger';\nimport { ConversationDetailsModal } from './ConversationDetailsModal';\nimport { DeleteConversationDialog } from './DeleteConversationDialog';\nimport { ConversationSkeleton, Spinner } from '@/components/ui/loading';\n\n/**\n * Props for individual conversation item\n * \n * @property conversation - Conversation data object\n * @property isSelected - Whether this conversation is currently active\n * @property onSelect - Callback when conversation is clicked\n * @property onDelete - Callback for deleting conversation\n * @property onRename - Callback for renaming conversation\n */\ninterface ConversationItemProps {\n  conversation: Conversation;\n  isSelected: boolean;\n  onSelect: (conversation: Conversation) => void;\n  onDelete: (conversationId: string) => void;\n  onRename: (conversationId: string, newName: string) => void;\n}\n\n/**\n * Individual Conversation Item Component\n * \n * Renders a single conversation in the sidebar with actions.\n * Features inline editing and context menu for management.\n */\nconst ConversationItem: React.FC<ConversationItemProps> = ({\n  conversation,\n  isSelected,\n  onSelect,\n  onDelete,\n  onRename\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editName, setEditName] = useState(conversation.name);\n  const [showMenu, setShowMenu] = useState(false);\n  const [showDetails, setShowDetails] = useState(false);\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  // Close menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setShowMenu(false);\n      }\n    };\n\n    if (showMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [showMenu]);\n\n  // Focus input when editing starts\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n      inputRef.current.select();\n    }\n  }, [isEditing]);\n\n  const handleEdit = () => {\n    setIsEditing(true);\n    setShowMenu(false);\n  };\n\n  const handleSaveEdit = () => {\n    if (editName.trim() && editName.trim() !== conversation.name) {\n      onRename(conversation.id.toString(), editName.trim());\n    }\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSaveEdit();\n    } else if (e.key === 'Escape') {\n      handleCancelEdit();\n    }\n  };\n\n  const handleDelete = () => {\n    setShowDeleteDialog(true);\n    setShowMenu(false);\n  };\n\n  const handleConfirmDelete = async () => {\n    await onDelete(conversation.id.toString());\n    setShowDeleteDialog(false);\n  };\n\n  return (\n    <div\n      className={cn(\n        'group relative p-3 rounded-lg cursor-pointer transition-colors',\n        'hover:bg-accent',\n        isSelected && 'bg-accent/50 hover:bg-accent/70'\n      )}\n      onClick={async () => {\n        if (isEditing || isLoading) return;\n        setIsLoading(true);\n        try {\n          await onSelect(conversation);\n        } finally {\n          setIsLoading(false);\n        }\n      }}\n    >\n      {/* Loading overlay for individual conversation */}\n      {isLoading && (\n        <div className=\"absolute inset-0 bg-background/70 backdrop-blur-sm rounded-lg flex items-center justify-center z-10\">\n          <Spinner size=\"sm\" />\n        </div>\n      )}\n      \n      <div className=\"flex items-start justify-between gap-2\">\n        <div className=\"flex-1 min-w-0\">\n          {isEditing ? (\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={editName}\n              onChange={(e) => setEditName(e.target.value)}\n              onBlur={handleSaveEdit}\n              onKeyDown={handleKeyDown}\n              className=\"w-full px-2 py-1 text-sm font-medium text-foreground bg-background border border-input rounded focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent\"\n              maxLength={100}\n            />\n          ) : (\n            <h3 className=\"font-medium text-foreground text-sm truncate\">\n              {conversation.name}\n            </h3>\n          )}\n          \n          <div className=\"flex items-center gap-2 mt-1 text-xs text-muted-foreground\">\n            <Clock className=\"w-3 h-3\" />\n            <span title={new Date(conversation.updated_at).toLocaleString()}>\n              {formatTimestamp(conversation.updated_at)}\n            </span>\n            {conversation.message_count !== undefined && (\n              <>\n                <span>•</span>\n                <MessageSquare className=\"w-3 h-3\" />\n                <span>{conversation.message_count}</span>\n              </>\n            )}\n          </div>\n          \n          {/* More Details Button */}\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              setShowDetails(!showDetails);\n            }}\n            className=\"flex items-center gap-1 mt-2 text-xs text-muted-foreground hover:text-foreground transition-colors\"\n          >\n            {showDetails ? (\n              <>\n                <ChevronUp className=\"w-3 h-3\" />\n                Hide Details\n              </>\n            ) : (\n              <>\n                <ChevronDown className=\"w-3 h-3\" />\n                More Details\n              </>\n            )}\n          </button>\n          \n          {/* Expandable Details Section */}\n          <AnimatePresence>\n            {showDetails && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                exit={{ opacity: 0, height: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"mt-2 pt-2 border-t border-border\"\n              >\n                <div className=\"space-y-1 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Session ID:</span>\n                    <span className=\"font-mono text-foreground truncate max-w-[150px]\" title={conversation.session_id}>\n                      {conversation.session_id}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Created:</span>\n                    <span className=\"text-foreground\">{formatTimestamp(conversation.created_at)}</span>\n                  </div>\n                  {conversation.deleted_at && (\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-destructive\">Deleted:</span>\n                      <span className=\"text-destructive\">{formatTimestamp(conversation.deleted_at)}</span>\n                    </div>\n                  )}\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Menu Button */}\n        {!isEditing && (\n          <div className=\"relative\" ref={menuRef}>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setShowMenu(!showMenu);\n              }}\n              className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-muted-foreground hover:text-foreground\"\n            >\n              <MoreHorizontal className=\"h-3 w-3\" />\n            </Button>\n\n            {/* Dropdown Menu */}\n            <AnimatePresence>\n              {showMenu && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.95, y: -5 }}\n                  animate={{ opacity: 1, scale: 1, y: 0 }}\n                  exit={{ opacity: 0, scale: 0.95, y: -5 }}\n                  transition={{ duration: 0.1 }}\n                  className=\"absolute right-0 top-6 mt-1 w-40 bg-background border border-border rounded-lg shadow-lg z-50\"\n                >\n                  <div className=\"py-1\">\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setShowDetailsModal(true);\n                        setShowMenu(false);\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-foreground hover:bg-accent\"\n                    >\n                      <Info className=\"w-3 h-3\" />\n                      View Details\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEdit();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-foreground hover:bg-accent\"\n                    >\n                      <Edit3 className=\"w-3 h-3\" />\n                      Rename\n                    </button>\n                    <div className=\"border-t border-border my-1\" />\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDelete();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-destructive hover:bg-destructive/10\"\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                      Delete\n                    </button>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        )}\n      </div>\n\n      {/* Conversation Details Modal */}\n      <ConversationDetailsModal\n        conversation={conversation}\n        isOpen={showDetailsModal}\n        onClose={() => setShowDetailsModal(false)}\n        onExport={(conv) => {\n          // Export functionality\n          const data = JSON.stringify(conv, null, 2);\n          const blob = new Blob([data], { type: 'application/json' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `conversation-${conv.id}-${new Date().toISOString().split('T')[0]}.json`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          URL.revokeObjectURL(url);\n          toast.success('Conversation exported successfully');\n        }}\n        onShare={(conv) => {\n          // Share functionality\n          const shareUrl = `${window.location.origin}/chat/${conv.session_id}`;\n          navigator.clipboard.writeText(shareUrl);\n          toast.success('Share link copied to clipboard');\n        }}\n      />\n\n      {/* Delete Conversation Dialog */}\n      <DeleteConversationDialog\n        isOpen={showDeleteDialog}\n        conversationName={conversation.name}\n        messageCount={conversation.message_count}\n        onConfirm={handleConfirmDelete}\n        onCancel={() => setShowDeleteDialog(false)}\n      />\n    </div>\n  );\n};\n\ninterface ConversationSidebarProps {\n  className?: string;\n  isCollapsed?: boolean;\n  onToggle?: () => void;\n}\n\nexport const ConversationSidebar: React.FC<ConversationSidebarProps> = ({\n  className,\n  isCollapsed = false,\n  onToggle\n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isCreating, setIsCreating] = useState(false);\n  const [showSortFilter, setShowSortFilter] = useState(false);\n  const [searchMode, setSearchMode] = useState<'name' | 'id' | 'session'>('name');\n  const [dateFilter, setDateFilter] = useState<'all' | 'today' | 'week' | 'month'>('all');\n  \n  const { \n    conversations, \n    currentConversation, \n    loading, \n    error,\n    fetchConversations,\n    createConversation,\n    selectConversation,\n    deleteConversation,\n    updateConversation,\n    // Pagination state\n    currentPage,\n    totalPages,\n    totalConversations,\n    perPage,\n    // Sorting and filtering state\n    sortOrder,\n    sortBy,\n    userFilter\n  } = useConversationStore();\n  \n  const { currentAgent } = useAgentStore();\n  const { clearMessages, loadMessages } = useMessageStore();\n\n  // Fetch conversations when agent changes\n  useEffect(() => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (currentAgent && !isDemoMode) {\n      logger.info('UI', 'Agent changed in sidebar, fetching conversations', {\n        agentId: currentAgent.id,\n        agentName: currentAgent.project_name,\n        isActive: currentAgent.is_chat_active\n      });\n      fetchConversations(currentAgent.id);\n    } else if (!currentAgent) {\n      logger.warn('UI', 'No current agent selected in sidebar');\n    } else if (isDemoMode) {\n      logger.info('UI', 'Skipping conversation fetch in demo mode');\n    }\n  }, [currentAgent, fetchConversations]);\n\n  // Filter conversations based on search query and advanced filters\n  \n  const filteredConversations = Array.isArray(conversations) \n    ? conversations.filter(conversation => {\n        // Search filter\n        if (searchQuery) {\n          const query = searchQuery.toLowerCase();\n          switch (searchMode) {\n            case 'name':\n              if (!conversation.name.toLowerCase().includes(query)) return false;\n              break;\n            case 'id':\n              if (!conversation.id.toString().includes(query)) return false;\n              break;\n            case 'session':\n              if (!conversation.session_id.toLowerCase().includes(query)) return false;\n              break;\n          }\n        }\n        \n        // Date filter\n        if (dateFilter !== 'all') {\n          const convDate = new Date(conversation.updated_at);\n          const now = new Date();\n          const diffDays = Math.floor((now.getTime() - convDate.getTime()) / (1000 * 60 * 60 * 24));\n          \n          switch (dateFilter) {\n            case 'today':\n              if (diffDays > 0) return false;\n              break;\n            case 'week':\n              if (diffDays > 7) return false;\n              break;\n            case 'month':\n              if (diffDays > 30) return false;\n              break;\n          }\n        }\n        \n        return true;\n      })\n    : [];\n\n  const handleNewConversation = async () => {\n    if (!currentAgent || isCreating) return;\n    \n    logger.info('UI', 'Creating new conversation', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n    \n    setIsCreating(true);\n    try {\n      const name = `New Chat ${new Date().toLocaleDateString()}`;\n      await createConversation(currentAgent.id, name);\n      clearMessages(); // Clear current messages when starting new conversation\n      logger.info('UI', 'New conversation created successfully', { name });\n      toast.success('New conversation created');\n    } catch (error) {\n      logger.error('UI', 'Failed to create conversation', error, {\n        agentId: currentAgent.id,\n        errorMessage: error instanceof Error ? error.message : String(error)\n      });\n      toast.error('Failed to create new conversation');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const handleSelectConversation = async (conversation: Conversation) => {\n    // Prevent multiple clicks while switching\n    if (loading) return;\n    \n    logger.info('UI', 'Selecting conversation', {\n      conversationId: conversation.id,\n      conversationName: conversation.name,\n      projectId: conversation.project_id,\n      messageCount: conversation.message_count\n    });\n    \n    selectConversation(conversation);\n    \n    // Load messages for the selected conversation\n    try {\n      logger.info('UI', 'Loading messages for selected conversation', {\n        conversationId: conversation.id,\n        agentId: currentAgent?.id,\n        agentName: currentAgent?.project_name\n      });\n      \n      await loadMessages(conversation.id.toString());\n      \n      logger.info('UI', 'Messages loaded successfully for conversation', {\n        conversationId: conversation.id\n      });\n    } catch (error) {\n      logger.error('UI', 'Failed to load messages for conversation', error, {\n        conversationId: conversation.id,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        errorType: error instanceof Error ? error.constructor.name : typeof error\n      });\n      toast.error('Failed to load conversation messages');\n    }\n  };\n\n  const handleDeleteConversation = async (conversationId: string) => {\n    try {\n      await deleteConversation(conversationId);\n      toast.success('Conversation deleted');\n    } catch (error) {\n      toast.error('Failed to delete conversation');\n    }\n  };\n\n  const handleRenameConversation = async (conversationId: string, newName: string) => {\n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) return;\n    \n    try {\n      await updateConversation(conversation.project_id, conversation.session_id, { name: newName });\n      toast.success('Conversation renamed');\n    } catch (error) {\n      toast.error('Failed to rename conversation');\n    }\n  };\n\n  if (isCollapsed) {\n    return (\n      <div className={cn('w-12 bg-muted border-r border-border flex flex-col', className)}>\n        <div className=\"p-2\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggle}\n            className=\"w-8 h-8\"\n            title=\"Expand sidebar\"\n          >\n            <MessageSquare className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('w-80 bg-muted border-r border-border flex flex-col', className)}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-border bg-background\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h2 className=\"font-semibold text-foreground\">Conversations</h2>\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggle}\n            className=\"h-8 w-8\"\n            title=\"Collapse sidebar\"\n          >\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </div>\n        \n        {/* Search */}\n        <div className=\"space-y-2\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <input\n              type=\"text\"\n              placeholder={`Search by ${searchMode}...`}\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full pl-9 pr-3 py-2 text-sm border border-input bg-background text-foreground rounded-lg focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent placeholder:text-muted-foreground\"\n            />\n          </div>\n          \n          {/* Search Mode Selector */}\n          <div className=\"flex gap-1\">\n            <button\n              onClick={() => setSearchMode('name')}\n              className={cn(\n                \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                searchMode === 'name' \n                  ? \"bg-brand-500 text-white\" \n                  : \"bg-muted text-muted-foreground hover:bg-accent\"\n              )}\n            >\n              Name\n            </button>\n            <button\n              onClick={() => setSearchMode('id')}\n              className={cn(\n                \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                searchMode === 'id' \n                  ? \"bg-brand-500 text-white\" \n                  : \"bg-muted text-muted-foreground hover:bg-accent\"\n              )}\n            >\n              ID\n            </button>\n            <button\n              onClick={() => setSearchMode('session')}\n              className={cn(\n                \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                searchMode === 'session' \n                  ? \"bg-brand-500 text-white\" \n                  : \"bg-muted text-muted-foreground hover:bg-accent\"\n              )}\n            >\n              Session\n            </button>\n          </div>\n        </div>\n        \n        {/* Sort and Filter Toggle */}\n        <Button\n          size=\"sm\"\n          variant=\"outline\"\n          onClick={() => setShowSortFilter(!showSortFilter)}\n          className=\"w-full mt-2 justify-center gap-2\"\n        >\n          <Filter className=\"h-3 w-3\" />\n          Sort & Filter\n          {showSortFilter ? <ChevronUp className=\"h-3 w-3\" /> : <ChevronDown className=\"h-3 w-3\" />}\n        </Button>\n        \n        {/* Sort and Filter Options */}\n        <AnimatePresence>\n          {showSortFilter && (\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"space-y-3 mt-3 overflow-hidden\"\n            >\n              {/* Sort Options */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Sort By</label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <select\n                    value={sortBy}\n                    onChange={(e) => {\n                      if (currentAgent) {\n                        fetchConversations(currentAgent.id, { \n                          page: 1, \n                          orderBy: e.target.value \n                        });\n                      }\n                    }}\n                    className=\"px-2 py-1 text-xs border border-input bg-background text-foreground rounded focus:outline-none focus:ring-2 focus:ring-ring\"\n                  >\n                    <option value=\"id\">Date Created</option>\n                    <option value=\"updated_at\">Last Updated</option>\n                    <option value=\"name\">Name</option>\n                  </select>\n                  \n                  <select\n                    value={sortOrder}\n                    onChange={(e) => {\n                      if (currentAgent) {\n                        fetchConversations(currentAgent.id, { \n                          page: 1, \n                          order: e.target.value as 'asc' | 'desc' \n                        });\n                      }\n                    }}\n                    className=\"px-2 py-1 text-xs border border-input bg-background text-foreground rounded focus:outline-none focus:ring-2 focus:ring-ring\"\n                  >\n                    <option value=\"desc\">Newest First</option>\n                    <option value=\"asc\">Oldest First</option>\n                  </select>\n                </div>\n              </div>\n              \n              {/* Date Filter */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Filter By Date</label>\n                <select\n                  value={dateFilter}\n                  onChange={(e) => setDateFilter(e.target.value as 'all' | 'today' | 'week' | 'month')}\n                  className=\"w-full px-2 py-1 text-xs border border-input bg-background text-foreground rounded focus:outline-none focus:ring-2 focus:ring-ring\"\n                >\n                  <option value=\"all\">All Time</option>\n                  <option value=\"today\">Today</option>\n                  <option value=\"week\">Last 7 Days</option>\n                  <option value=\"month\">Last 30 Days</option>\n                </select>\n              </div>\n              \n              {/* User Filter */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Filter By User</label>\n                <select\n                  value={userFilter}\n                  onChange={(e) => {\n                    if (currentAgent) {\n                      fetchConversations(currentAgent.id, { \n                        page: 1, \n                        userFilter: e.target.value \n                      });\n                    }\n                  }}\n                  className=\"w-full px-2 py-1 text-xs border border-input bg-background text-foreground rounded focus:outline-none focus:ring-2 focus:ring-ring\"\n                >\n                  <option value=\"all\">All Users</option>\n                  {/* Additional user options could be dynamically loaded */}\n                </select>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"p-4 space-y-2\">\n        <Link href=\"/dashboard/projects/create\">\n          <Button\n            className=\"w-full justify-start gap-2\"\n            variant=\"default\"\n          >\n            <Bot className=\"w-4 h-4\" />\n            Create New Agent\n          </Button>\n        </Link>\n        \n        <Button\n          onClick={handleNewConversation}\n          disabled={!currentAgent || isCreating}\n          className=\"w-full justify-start gap-2\"\n          variant=\"outline\"\n        >\n          {isCreating ? (\n            <>\n              <Spinner size=\"sm\" />\n              <span>Creating...</span>\n            </>\n          ) : (\n            <>\n              <Plus className=\"w-4 h-4\" />\n              <span>New Chat</span>\n            </>\n          )}\n        </Button>\n      </div>\n\n      {/* Conversations List */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {loading && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <ConversationSkeleton count={5} />\n        ) : error && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <div className=\"p-4 text-center\">\n            <p className=\"text-sm text-destructive mb-2\">Failed to load conversations</p>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => currentAgent && fetchConversations(currentAgent.id)}\n            >\n              Try Again\n            </Button>\n          </div>\n        ) : filteredConversations.length === 0 ? (\n          <div className=\"p-4 text-center\">\n            <MessageSquare className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">\n              {searchQuery ? 'No conversations found' : 'No conversations yet'}\n            </p>\n            {!searchQuery && (\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Start a new conversation to get going\n              </p>\n            )}\n            {currentAgent && (\n              <div className=\"text-xs text-muted-foreground mt-2 space-y-1\">\n                <p>Agent: {currentAgent.project_name} (ID: {currentAgent.id})</p>\n                {error && (\n                  <p className=\"text-destructive\">Error: {error}</p>\n                )}\n                <p>Conversations loaded: {conversations.length}</p>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"p-2 space-y-1\">\n            {filteredConversations.map((conversation) => (\n              <ConversationItem\n                key={conversation.id}\n                conversation={conversation}\n                isSelected={currentConversation?.id === conversation.id}\n                onSelect={handleSelectConversation}\n                onDelete={(id) => handleDeleteConversation(id)}\n                onRename={handleRenameConversation}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Footer with Pagination */}\n      <div className=\"p-4 border-t border-border bg-background space-y-3\">\n        <div className=\"text-xs text-muted-foreground text-center\">\n          {searchQuery ? (\n            <>\n              {filteredConversations.length} result{filteredConversations.length !== 1 ? 's' : ''}\n            </>\n          ) : (\n            <>\n              Showing {conversations.length} of {totalConversations} conversation{totalConversations !== 1 ? 's' : ''}\n            </>\n          )}\n          {currentAgent && (\n            <span className=\"block mt-1\">\n              Agent: {currentAgent.project_name}\n            </span>\n          )}\n        </div>\n        \n        {/* Pagination Controls */}\n        {totalPages > 1 && !searchQuery && (\n          <div className=\"flex items-center justify-between gap-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                if (currentAgent && currentPage > 1) {\n                  fetchConversations(currentAgent.id, { page: currentPage - 1 });\n                }\n              }}\n              disabled={currentPage === 1 || loading}\n            >\n              <ChevronDown className=\"h-3 w-3 rotate-90\" />\n            </Button>\n            \n            <span className=\"text-xs text-muted-foreground\">\n              Page {currentPage} of {totalPages}\n            </span>\n            \n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                if (currentAgent && currentPage < totalPages) {\n                  fetchConversations(currentAgent.id, { page: currentPage + 1 });\n                }\n              }}\n              disabled={currentPage === totalPages || loading}\n            >\n              <ChevronDown className=\"h-3 w-3 -rotate-90\" />\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};","/**\n * Chat Layout Component\n * \n * Top-level layout component that orchestrates the chat interface.\n * Handles different deployment modes and manages the conversation sidebar.\n * \n * Deployment Modes:\n * - standalone: Full chat with sidebar (default for main app)\n * - widget: Embeddable chat without sidebar\n * - floating: Popup-style chat without sidebar\n * \n * Features:\n * - Responsive sidebar with collapse/expand\n * - Automatic message loading on conversation change\n * - Mode-specific rendering logic\n * - Clean separation of concerns\n * \n * Architecture:\n * - ChatLayout (this) - Layout orchestration\n *   - ConversationSidebar - Conversation list and management\n *   - ChatContainer - Main chat interface\n *     - Message - Individual messages\n *     - ChatInput - Message input area\n * \n * State Management:\n * - currentConversation from conversationStore\n * - loadMessages from messageStore\n * - Local state for sidebar collapse\n * \n * Features:\n * - Multiple deployment modes with flexible configuration\n * - Professional sidebar with persistent state and responsive design\n * - Full keyboard navigation and accessibility support\n * - Mobile-optimized interface with adaptive layout\n * - Customizable sidebar positioning and behavior options\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport type { Agent } from '@/types';\nimport { ChatContainer } from './ChatContainer';\nimport { ConversationSidebar } from './ConversationSidebar';\nimport { useConversationStore, useMessageStore } from '@/hooks/useWidgetStore';\n\n/**\n * Props for ChatLayout component\n * \n * @property mode - Deployment mode: standalone (with sidebar), widget, or floating\n * @property className - Additional CSS classes for styling\n * @property onClose - Callback for closing chat (widget/floating modes)\n * @property onAgentSettings - Callback for opening agent settings\n * @property showSidebar - Whether to show sidebar (only applies to standalone mode)\n * @property enableConversationManagement - Enable conversation switching UI\n * @property maxConversations - Maximum conversations per session\n * @property sessionId - Session ID for conversation isolation\n * @property threadId - Specific conversation thread to load\n * @property onConversationChange - Callback when conversation changes\n * @property onMessage - Callback when message is sent/received\n */\ninterface ChatLayoutProps {\n  mode?: 'standalone' | 'widget' | 'floating';\n  className?: string;\n  onClose?: () => void;\n  onAgentSettings?: (agent: Agent) => void;\n  showSidebar?: boolean;\n  enableConversationManagement?: boolean;\n  maxConversations?: number;\n  sessionId?: string;\n  threadId?: string;\n  onConversationChange?: (conversation: any) => void;\n  onMessage?: (message: any) => void;\n  widgetInstance?: any; // Widget instance for isolated conversation management\n  conversations?: any[]; // Current conversations for isolated mode\n  currentConversation?: any; // Current conversation for isolated mode\n  conversationRefreshKey?: number; // Key to trigger ConversationManager refresh\n}\n\n/**\n * Chat Layout Component\n * \n * Orchestrates the overall chat interface layout based on deployment mode.\n * In standalone mode, includes a collapsible conversation sidebar.\n * In widget/floating modes, renders only the chat container.\n */\nexport const ChatLayout: React.FC<ChatLayoutProps> = ({\n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  showSidebar = true,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  widgetInstance,\n  conversations,\n  currentConversation,\n  conversationRefreshKey\n}) => {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const { currentConversation: storeCurrentConversation } = useConversationStore();\n  const { loadMessages } = useMessageStore();\n\n  /**\n   * Load messages when conversation changes\n   * \n   * Automatically fetches messages from the store when user\n   * switches between conversations. This ensures the chat\n   * always shows the correct message history.\n   */\n  useEffect(() => {\n    // Skip API calls in demo mode to prevent errors\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (storeCurrentConversation && !isDemoMode) {\n      loadMessages(storeCurrentConversation.id.toString());\n    }\n  }, [storeCurrentConversation, loadMessages]);\n\n  // Hide sidebar for widget and floating modes\n  // Only standalone mode shows the conversation sidebar\n  const shouldShowSidebar = showSidebar && mode === 'standalone';\n\n  /**\n   * Toggle sidebar collapsed state\n   * \n   * Toggles sidebar visibility with potential for session persistence\n   * to enhance user experience across application sessions\n   */\n  const handleToggleSidebar = () => {\n    setSidebarCollapsed(!sidebarCollapsed);\n  };\n\n  if (!shouldShowSidebar) {\n    // For widget/floating modes, just show the chat container\n    return (\n      <ChatContainer\n        mode={mode}\n        className={className}\n        onClose={onClose}\n        onAgentSettings={onAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        threadId={threadId}\n        onConversationChange={onConversationChange}\n        onMessage={onMessage}\n        conversationRefreshKey={conversationRefreshKey}\n      />\n    );\n  }\n\n  return (\n    <div className=\"flex h-full bg-white\">\n      {/* Sidebar */}\n      <ConversationSidebar\n        isCollapsed={sidebarCollapsed}\n        onToggle={handleToggleSidebar}\n      />\n      \n      {/* Main Chat Area */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        <ChatContainer\n          mode={mode}\n          className=\"h-full\"\n          onClose={onClose}\n          onAgentSettings={onAgentSettings}\n          enableConversationManagement={enableConversationManagement}\n          maxConversations={maxConversations}\n          sessionId={sessionId}\n          threadId={threadId}\n          onConversationChange={onConversationChange}\n          onMessage={onMessage}\n          conversationRefreshKey={conversationRefreshKey}\n        />\n      </div>\n    </div>\n  );\n};","import React, { useEffect, useState } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Toaster } from 'sonner';\n\nimport '../app/globals.css';\nimport { useAgentStore } from '../store';\nimport { ChatLayout } from '../components/chat/ChatLayout';\n\ninterface IframeConfig {\n  agentId: number | string;\n  agentName?: string;\n  mode: 'embedded' | 'floating' | 'widget';\n  theme: 'light' | 'dark';\n  enableCitations: boolean;\n  enableFeedback: boolean;\n  sessionId?: string;\n  threadId?: string;\n  isolateConversations?: boolean;\n}\n\nconst IframeApp: React.FC = () => {\n  const [config, setConfig] = useState<IframeConfig | null>(null);\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    // Parse URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    const agentIdParam = urlParams.get('agentId');\n    \n    const iframeConfig: IframeConfig = {\n      agentId: agentIdParam ? (isNaN(Number(agentIdParam)) ? agentIdParam : Number(agentIdParam)) : '',\n      agentName: urlParams.get('agentName') || undefined,\n      mode: (urlParams.get('mode') as any) || 'embedded',\n      theme: (urlParams.get('theme') as any) || 'light',\n      enableCitations: urlParams.get('enableCitations') !== 'false',\n      enableFeedback: urlParams.get('enableFeedback') !== 'false',\n      sessionId: urlParams.get('sessionId') || undefined,\n      threadId: urlParams.get('threadId') || undefined,\n      isolateConversations: urlParams.get('isolateConversations') === 'true',\n    };\n    \n    if (!iframeConfig.agentId) {\n      console.error('CustomGPT: Agent ID is required');\n      return;\n    }\n\n    setConfig(iframeConfig);\n    \n    // Set up the agent - create a minimal agent object with the provided ID\n    const agent: any = {\n      id: typeof iframeConfig.agentId === 'string' ? parseInt(iframeConfig.agentId) : iframeConfig.agentId,\n      project_name: iframeConfig.agentName || `Agent ${iframeConfig.agentId}`,\n      is_chat_active: true,\n    };\n    useAgentStore.getState().selectAgent(agent);\n\n    // Set up message handling with parent window\n    setupMessageHandling();\n\n    // Notify parent that iframe is ready\n    postMessageToParent('ready', { config: iframeConfig });\n    setIsReady(true);\n  }, []);\n\n  const setupMessageHandling = () => {\n    window.addEventListener('message', (event) => {\n      const { type, data } = event.data;\n\n      switch (type) {\n        case 'customgpt-open':\n          handleOpen();\n          break;\n        case 'customgpt-close':\n          handleClose();\n          break;\n        case 'customgpt-config-update':\n          handleConfigUpdate(data);\n          break;\n      }\n    });\n\n    // Handle window resize for responsive behavior\n    const handleResize = () => {\n      postMessageToParent('resize', {\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Send initial size\n    setTimeout(handleResize, 100);\n  };\n\n  const postMessageToParent = (type: string, data: any = {}) => {\n    if (window.parent && window.parent !== window) {\n      window.parent.postMessage({\n        type: `customgpt-${type}`,\n        data\n      }, '*');\n    }\n  };\n\n  const handleOpen = () => {\n    // Handle any iframe-specific open logic\n  };\n\n  const handleClose = () => {\n    // Handle any iframe-specific close logic\n    postMessageToParent('close');\n  };\n\n  const handleConfigUpdate = (newConfig: Partial<IframeConfig>) => {\n    if (config) {\n      const updatedConfig = { ...config, ...newConfig };\n      setConfig(updatedConfig);\n      \n      // Update agent if needed\n      if (newConfig.agentId || newConfig.agentName) {\n        const agent: any = {\n          id: typeof updatedConfig.agentId === 'string' ? parseInt(updatedConfig.agentId) : updatedConfig.agentId,\n          project_name: updatedConfig.agentName || `Agent ${updatedConfig.agentId}`,\n          is_chat_active: true,\n        };\n        useAgentStore.getState().selectAgent(agent);\n      }\n    }\n  };\n\n  const handleMessage = (message: any) => {\n    // Relay messages to parent window\n    postMessageToParent('message', message);\n  };\n\n  const handleError = (error: any) => {\n    // Relay errors to parent window\n    postMessageToParent('error', error);\n    console.error('Widget error:', error);\n  };\n\n  // Show loading state until config is available\n  if (!config || !isReady) {\n    return (\n      <div className=\"flex items-center justify-center h-screen bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading CustomGPT...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen bg-gray-50\">\n      <ChatLayout\n        mode=\"widget\"\n        showSidebar={false} // No sidebar in iframe mode\n        onClose={config.mode === 'floating' ? handleClose : undefined}\n      />\n      <Toaster \n        position=\"top-center\"\n        closeButton\n        toastOptions={{\n          style: { \n            zIndex: 10000\n          }\n        }}\n      />\n    </div>\n  );\n};\n\n// Initialize the app\nconst initIframeApp = () => {\n  const container = document.getElementById('iframe-app');\n  if (container) {\n    const root = createRoot(container);\n    root.render(<IframeApp />);\n  }\n};\n\n// Auto-initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initIframeApp);\n} else {\n  initIframeApp();\n}\n\nexport default IframeApp;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t437: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkcustomgpt_ui\"] = self[\"webpackChunkcustomgpt_ui\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [96], () => (__webpack_require__(5802)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","webpackEmptyContext","req","e","Error","code","keys","resolve","id","module","exports","create","persist","set","get","apiKey","baseURL","theme","setApiKey","key","setBaseURL","url","setTheme","window","document","documentElement","className","name","partialize","state","onRehydrateStorage","cn","inputs","twMerge","clsx","generateId","Math","random","toString","substring","Date","now","formatFileSize","bytes","i","floor","log","parseFloat","pow","toFixed","formatTimestamp","timestamp","date","diffInMs","getTime","diffInMinutes","diffInHours","diffInDays","toLocaleDateString","async","copyToClipboard","text","navigator","clipboard","writeText","error","parseStreamChunk","chunk","startsWith","slice","trim","type","data","parsed","JSON","parse","undefined","content","citations","message","delta","choices","jsonError","parseError","includes","CONSTANTS","MAX_FILE_SIZE","ACCEPTED_FILE_TYPES","MAX_MESSAGE_LENGTH","API_TIMEOUT","STREAM_TIMEOUT","RETRY_ATTEMPTS","RETRY_DELAY","Logger","constructor","_defineProperty","this","isClient","getInstance","instance","formatMessage","entry","level","category","stack","formatted","toUpperCase","stringify","writeToFile","toISOString","status","logs","push","length","split","info","warn","getLogs","clearLogs","apiRequest","endpoint","method","apiResponse","apiError","authCheck","authError","navigation","route","params","storeAction","store","action","logger","proxyClient","Map","timeout","request","options","requestId","body","controller","AbortController","abortControllers","timeoutId","setTimeout","abort","headers","FormData","response","fetch","signal","clearTimeout","delete","responseData","json","ok","streamRequest","cancelRequest","Array","from","entries","forEach","cancelAllRequests","clear","getAgents","queryParams","URLSearchParams","page","append","per_page","queryString","createAgent","getAgent","updateAgent","formData","Object","value","String","deleteAgent","replicateAgent","getAgentStats","getAgentSettings","updateAgentSettings","settings","isFormData","getProjectPlugins","projectId","updateProjectPlugin","pluginId","getConversations","order","orderBy","userFilter","createConversation","updateConversation","sessionId","deleteConversation","getMessages","sendMessage","sendMessageStream","onChunk","onError","onComplete","reader","stream","getReader","decoder","TextDecoder","buffer","done","read","decode","lines","pop","line","getMessageById","messageId","updateMessageFeedback","feedback","getCitation","citationId","previewCitationFile","uploadFile","file","getTrafficReport","getQueriesReport","getConversationsReport","getAnalysisReport","interval","getPages","limit","crawl_status","index_status","deletePage","pageId","reindexPage","getPageMetadata","updatePageMetadata","metadata","getLicenses","createLicense","getLicense","licenseId","updateLicense","deleteLicense","getSources","createSitemapSource","sitemap_path","executive_js","data_refresh_frequency","create_new_pages","remove_unexist_pages","refresh_existing_pages","uploadFileSource","updateSourceSettings","sourceId","deleteSource","instantSyncSource","getUserLimits","getUserProfile","updateUserProfile","getClient","useConversationStore","conversations","currentConversation","loading","currentPage","totalPages","totalConversations","perPage","sortOrder","sortBy","fetchConversations","client","responseType","hasData","dataLength","isArray","paginationData","count","map","c","messagesCount","messages","current_page","last_page","total","errorType","newConversation","selectConversation","conversation","find","conversationId","project_id","session_id","updatedConversations","filter","updatedConversation","ensureConversation","firstMessage","title","join","generateConversationName","getSessionId","__customgpt_current_session","__customgpt_session","__customgpt_sessions","sessions","sessionIds","sessionStorage","getItem","substr","setItem","StreamHandler","config","retryAttempts","retryDelay","processStream","callbacks","abortController","currentMessage","isComplete","cancel","processLine","releaseLock","citation","onCitation","getCurrentMessage","isStreaming","globalStreamManager","maxConcurrentStreams","startStream","streamId","streams","size","has","cancelStream","handler","cancelAllStreams","getActiveStreams","getStreamStatus","exists","getActiveStreamCount","MESSAGES_STORAGE_KEY","saveMessagesToStorage","stored","localStorage","cache","fetchCitationDetails","citationIds","index","source","description","useMessageStore","streamingMessage","files","__customgpt_demo_mode","agentStore","useAgentStore","getState","conversationStore","currentAgent","agentId","agentName","project_name","messageLength","hasFiles","hasSessionId","isNew","message_count","userMessage","role","addMessage","assistantMessage","sourceIds","Promise","all","fileCount","messageContent","hasSourceIds","requestData","prompt","source_ids","hasContent","contentLength","contentPreview","updateStreamingMessage","current","then","citationDetails","updatedCurrent","streamError","errorMessage","finalMessage","messageData","openai_response","lastUserMessage","m","details","user_id","conversation_id","updated_at","prompt_id","user_ip","user_agent","external_id","request_source","fallbackError","errorText","apiMessages","latestApiMessage","created_at","user_query","existingCitations","response_feedback","reaction","hasDetails","citationCount","enrichmentError","setupError","currentAgentFor403","is_chat_active","newMessages","conversationMessages","existingIndex","findIndex","clearMessages","promptId","promptIdMatch","match","parseInt","toast","updatedMessage","feedbackValue","success","getMessagesForConversation","cancelStreaming","loadMessages","availableConversations","messageTypes","formattedMessages","msg","baseTimestamp","formattedCount","sort","a","b","firstMessageTime","lastMessageTime","localSendingMessages","mergedMessages","localMsg","insertIndex","splice","cachedMessages","loadMessagesFromStorage","messageCount","agents","paginationMeta","fetchAgents","hasMore","nestedData","paginatedResponse","totalCount","loadMoreAgents","nextPage","newAgents","responseTotal","responsePage","findAgent","query","test","agent","toLowerCase","newAgent","selectAgent","messageStore","setAgents","updatedAgent","filteredAgents","formatDate","sidebarOpen","settingsOpen","fontSize","setSidebarOpen","open","setSettingsOpen","setFontSize","root","classList","remove","add","getDefaultDateRange","endDate","startDate","setDate","getDate","activeRequests","analytics","dateRange","fetchAnalytics","trafficReport","queriesReport","conversationsReport","analysisReport","analyticsData","active","trend","item","created_at_interval","Number","queries_number","queries","successful","query_status","s","failed","avgResponseTime","topQueries","traffic","uniqueUsers","sources","reduce","acc","request_source_number","pageViews","avgSessionDuration","bounceRate","users","statistics","totalMessages","avgMessagesPerConversation","average_queries_per_conversation","satisfactionRate","responseAccuracy","setDateRange","exportAnalytics","format","jsonData","blob","Blob","URL","createObjectURL","createElement","href","download","appendChild","click","removeChild","revokeObjectURL","reset","pages","paginationInfo","fetchPages","setQueryParams","currentSource","searchQuery","syncStatus","syncing","fetchSources","allSources","sitemaps","apiSource","uploads","fetchSource","uploadSources","uploadPromises","reject","updateSource","updates","bulkDelete","syncSources","progress","setSearchQuery","setFilter","selectSource","profile","fetchProfile","updateProfile","profilePhoto","settingsLoading","settingsError","plugins","pluginsLoading","pluginsError","stats","statsLoading","statsError","fetchSettings","requestKey","updateSettings","settingsUpdate","question","File","fetchPlugins","pluginsData","updatePlugin","enabled","plugin","fetchStats","statsData","licenses","fetchLicenses","dataType","fullResponse","l","errorStatus","errorCode","fullError","dataStructure","licenseKey","newLicense","license","licenseName","clearError","buttonVariants","cva","variants","variant","default","destructive","outline","secondary","ghost","link","sm","lg","icon","defaultVariants","Button","React","asChild","props","ref","_jsx","displayName","sizeVariants","xs","container","md","xl","shapeVariants","circle","rounded","square","Avatar","src","alt","shape","fallback","isSelected","imageError","setImageError","avatarUrl","chatbot_avatar","altText","sizeClasses","shapeClass","backgroundClass","children","handleImageError","renderFallbackIcon","iconClass","User","Bot","AgentAvatar","UserAvatar","CitationCard","isExpanded","onToggle","onClick","onPreviewClick","_jsxs","ChevronDown","AnimatePresence","motion","div","initial","height","opacity","animate","exit","transition","duration","target","rel","ExternalLink","FileText","CitationList","onCitationClick","maxVisible","expanded","setExpanded","useState","Set","showAll","setShowAll","visibleCitations","BookOpen","idx","y","delay","newExpanded","toggleExpanded","MessageDetails","setIsExpanded","handleCopyValue","Info","ChevronUp","detailsText","Copy","DetailRow","label","onCopy","toLocaleString","truncate","CodeBlock","language","copied","setCopied","SyntaxHighlighter","style","oneDark","customStyle","margin","borderRadius","StreamingCursor","MessageContent","cleanedContent","replace","ReactMarkdown","remarkPlugins","remarkGfm","components","exec","MessageActions","onFeedback","setFeedback","handleFeedback","ThumbsUp","ThumbsDown","handleRegenerate","RotateCw","Message","isLast","isUser","Spinner","Loader2","Skeleton","LoadingOverlay","visible","blur","MessageSkeleton","isAssistant","_","ConversationSkeleton","TooltipProvider","TooltipPrimitive","Tooltip","TooltipTrigger","TooltipContent","sideOffset","VoiceButton","disabled","Mic","FileChip","onRemove","fileIcon","fileType","getFileIcon","scale","_Fragment","AlertCircle","width","X","FileUploadButton","onUpload","fileInputRef","useRef","multiple","accept","onChange","handleClick","Paperclip","ChatInput","onSend","placeholder","maxLength","onVoiceClick","input","setInput","setFiles","isDragOver","setIsDragOver","textareaRef","adjustTextareaHeight","useCallback","textarea","scrollHeight","maxHeight","min","handleSubmit","preventDefault","fileObjects","f","focus","handleFileUpload","newFiles","uploadFiles","some","prev","simulateUpload","setInterval","clearInterval","round","getRootProps","getInputProps","isDragActive","useDropzone","onDrop","noClick","noKeyboard","maxSize","onDragEnter","onDragLeave","canSend","Upload","removeFile","fileId","onSubmit","onKeyDown","shiftKey","rows","overflowY","Send","TypingIndicator","iconSizeClasses","display","parent","parentElement","innerHTML","AgentItem","onSelect","onSettingsClick","Check","stopPropagation","Settings","AgentSelector","showSettings","isOpen","setIsOpen","isSelectingAgent","setIsSelectingAgent","loadingSettings","setLoadingSettings","dropdownRef","useEffect","handleClickOutside","event","contains","addEventListener","removeEventListener","handleRefresh","handleSelectAgent","agentsNeedingSettings","agentsToLoad","newSet","settingsPromises","results","updatedAgents","result","r","fetchAgentSettings","RefreshCw","willOpen","location","BarChart3","CitationDetailsModal","onClose","setLoading","setError","citationData","setCitationData","effectiveProjectId","hasImage","image","err","Loader","Globe","ImageIcon","CitationFilePreview","fileName","fileContent","setFileContent","contentType","setContentType","fetchFilePreview","content_type","handleDownload","Download","ConversationManager","maxConversations","currentConversationId","onConversationChange","onCreateConversation","refreshKey","setConversations","editingId","setEditingId","editTitle","setEditTitle","loadConversations","handleEditSave","updated","MessageCircle","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","handleCreateConversation","Plus","autoFocus","handleSelectConversation","createdAt","handleEditStart","Edit2","filtered","handleDelete","Trash2","MessageErrorDisplay","statusCode","propStatusCode","onRetry","parsedStatusCode","statusMatch","finalStatusCode","errorDetails","getErrorDetails","iconClassName","textClassName","UserX","showSupport","Search","CreditCard","supportUrl","ServerCrash","showRetry","XCircle","Icon","WidgetContext","createContext","WidgetStoreContext","useIsInWidgetContext","useContext","useWidgetStores","context","stores","isInWidget","widgetStores","useStore","useGlobalMessageStore","useGlobalConversationStore","useGlobalAgentStore","Canvas","forwardRef","draw","internalRef","canvasRef","canvas","getContext","resizeCanvas","innerWidth","innerHeight","displayWidth","displayHeight","projCenterX","projCenterY","animationFrameId","render","requestAnimationFrame","cancelAnimationFrame","background","speechManager","debug","onUserSpeaking","stopSourceIfNeeded","audioLength","audio","audioDuration","processAudio","onReset","sourceIsStarted","stop","onProcessing","createAudioBlob","validate","sendData","wavBuffer","utils","encodeWAV","conversationLength","conversationThusFar","audioSize","base64Encode","fromEntries","textHeader","base64Decode","transcript","onDebug","onTranscriptReceived","onResponseReceived","audioBlob","handleSuccess","handleError","audioContext","AudioContext","webkitAudioContext","arrayBuffer","audioBuffer","decodeAudioData","sampleRate","numberOfChannels","createBufferSource","connect","destination","start","onended","onAiSpeaking","clonedBlob","minDuration","valid","setCallbacks","hasCallbacks","setProjectId","str","TextEncoder","encode","btoa","fromCharCode","Uint8Array","base64","binaryStr","atob","char","charCodeAt","clearConversation","getConversationThusFar","sphereRad","g","framesPerRotation","setLightBlue","wait","particleList","first","recycleBin","turnAngle","sphereCenterZ","rgbString","p","outsideTest","nextParticle","sinAngle","cosAngle","rotX","rotZ","depthAlphaFactor","theta","phi","x0","y0","z0","addParticle","vx0","vy0","vz0","newParticle","next","x","z","velX","velY","velZ","age","dead","right","recycle","particleActions","PI","acos","sin","cos","attack","hold","decay","initValue","holdValue","lastValue","stuckTime","accelX","accelY","accelZ","fillStyle","fillRect","radius_sp","projX","projY","alpha","fLen","beginPath","arc","closePath","init","VoiceModal","projectName","setTranscript","debugMessages","setDebugMessages","isManualRecording","setIsManualRecording","mediaRecorder","setMediaRecorder","currentUserMessageId","setCurrentUserMessageId","vad","useMicVAD","preSpeechPadFrames","positiveSpeechThreshold","negativeSpeechThreshold","minSpeechFrames","startOnLoad","workletURL","modelURL","onSpeechStart","debugMsg","toLocaleTimeString","onSpeechEnd","onVADMisfire","onMisfire","errorMsg","handleToggleListening","errored","listening","recoveryError","pause","mediaDevices","getUserMedia","channelCount","echoCancellation","noiseSuppression","createMediaStreamSource","disconnect","close","getTracks","track","permissionError","vadError","handleManualRecording","recorder","MediaRecorder","chunks","ondataavailable","onstop","channelData","getChannelData","audioArray","Float32Array","hasAutoStarted","setHasAutoStarted","RotateLoader","color","reload","userSpeaking","DEFAULT_EXAMPLE_PROMPTS","ExamplePromptCard","WelcomeMessage","onPromptClick","exampleQuestions","setExampleQuestions","example_questions","questionCount","fetchExampleQuestions","MessageArea","scrollRef","isLoadingMessages","setIsLoadingMessages","prevConversationId","setPrevConversationId","selectedCitationId","setSelectedCitationId","citationModalOpen","setCitationModalOpen","previewCitationId","setPreviewCitationId","previewModalOpen","setPreviewModalOpen","scrollBehavior","scrollTo","top","behavior","handleCitationClick","citationIndex","citationTitle","handlePreviewClick","handleMessageFeedback","ChatHeader","mode","onAgentSettings","enableConversationManagement","conversationRefreshKey","ChatContainer","threadId","onMessage","widget","setCurrentConversationId","isVoiceModalOpen","setIsVoiceModalOpen","agentCount","hasCurrentAgent","currentAgentName","initializeAgents","switchConversation","newConv","configuration","isAuthError","ConversationDetailsModal","onExport","onShare","formatFullTimestamp","weekday","year","month","day","hour","minute","second","timeZoneName","Hash","Calendar","Clock","deleted_at","created_by","Share2","DeleteConversationDialog","conversationName","onConfirm","onCancel","isDeleting","setIsDeleting","AlertTriangle","ConversationItem","onDelete","onRename","isEditing","setIsEditing","editName","setEditName","showMenu","setShowMenu","showDetails","setShowDetails","showDetailsModal","setShowDetailsModal","showDeleteDialog","setShowDeleteDialog","isLoading","setIsLoading","inputRef","menuRef","select","handleSaveEdit","onBlur","MessageSquare","MoreHorizontal","Edit3","conv","shareUrl","origin","ConversationSidebar","isCollapsed","isCreating","setIsCreating","showSortFilter","setShowSortFilter","searchMode","setSearchMode","dateFilter","setDateFilter","isDemoMode","isActive","filteredConversations","convDate","diffDays","handleRenameConversation","newName","Filter","Link","handleDeleteConversation","ChatLayout","showSidebar","widgetInstance","sidebarCollapsed","setSidebarCollapsed","storeCurrentConversation","handleToggleSidebar","IframeApp","setConfig","isReady","setIsReady","urlParams","search","agentIdParam","iframeConfig","isNaN","enableCitations","enableFeedback","isolateConversations","setupMessageHandling","postMessageToParent","handleOpen","handleClose","handleConfigUpdate","handleResize","postMessage","newConfig","updatedConfig","Toaster","position","closeButton","toastOptions","zIndex","initIframeApp","getElementById","createRoot","readyState","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","n","getter","__esModule","getPrototypeOf","obj","t","ns","def","indexOf","getOwnPropertyNames","definition","o","defineProperty","enumerable","globalThis","Function","prop","prototype","hasOwnProperty","Symbol","toStringTag","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}