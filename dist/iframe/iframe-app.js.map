{"version":3,"file":"iframe-app.js","mappings":"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","sources":["webpack://customgpt-ui/webpack/runtime/chunk loaded","webpack://customgpt-ui/webpack/runtime/create fake namespace object","webpack://customgpt-ui/webpack/runtime/load script","webpack://customgpt-ui/./src/lib/voice/utils/math.ts","webpack://customgpt-ui/./src/lib/voice/themes/DefaultTheme.ts","webpack://customgpt-ui/./src/lib/voice/utils/performance.ts","webpack://customgpt-ui/./src/lib/voice/themes/IVoiceTheme.ts","webpack://customgpt-ui/./src/lib/theme.ts","webpack://customgpt-ui/./src/store/config.ts","webpack://customgpt-ui/./src/lib/utils.ts","webpack://customgpt-ui/./src/lib/logger.ts","webpack://customgpt-ui/./src/lib/constants/demo-limits.ts","webpack://customgpt-ui/./src/lib/analytics/usage-tracker.ts","webpack://customgpt-ui/./src/lib/constants/error-messages.ts","webpack://customgpt-ui/./src/lib/api/proxy-client.ts","webpack://customgpt-ui/./src/lib/api/client.ts","webpack://customgpt-ui/./src/store/conversations.ts","webpack://customgpt-ui/./src/store/chat-settings.ts","webpack://customgpt-ui/./src/lib/streaming/handler.ts","webpack://customgpt-ui/./src/store/messages.ts","webpack://customgpt-ui/./src/store/agents.ts","webpack://customgpt-ui/./src/store/analytics.ts","webpack://customgpt-ui/./src/store/ui.ts","webpack://customgpt-ui/./src/store/project-settings.ts","webpack://customgpt-ui/./src/store/pages.ts","webpack://customgpt-ui/./src/store/sources.ts","webpack://customgpt-ui/./src/store/profile.ts","webpack://customgpt-ui/./src/store/licenses.ts","webpack://customgpt-ui/./src/components/ui/button.tsx","webpack://customgpt-ui/./src/components/ui/avatar.tsx","webpack://customgpt-ui/./src/components/chat/CitationList.tsx","webpack://customgpt-ui/./src/components/chat/MessageDetails.tsx","webpack://customgpt-ui/./src/components/chat/Message.tsx","webpack://customgpt-ui/./src/contexts/DemoModeContext.tsx","webpack://customgpt-ui/./src/components/ui/loading.tsx","webpack://customgpt-ui/./src/components/ui/tooltip.tsx","webpack://customgpt-ui/./src/components/voice/SpeechToTextButton.tsx","webpack://customgpt-ui/./src/components/voice/AnimatedVoiceIcon.tsx","webpack://customgpt-ui/./src/components/ui/dropdown-menu.tsx","webpack://customgpt-ui/./src/components/chat/ChatInput.tsx","webpack://customgpt-ui/./src/components/chat/TypingIndicator.tsx","webpack://customgpt-ui/./src/components/chat/AgentSelector.tsx","webpack://customgpt-ui/./src/hooks/useMediaQuery.ts","webpack://customgpt-ui/./src/components/chat/CitationDetailsModal.tsx","webpack://customgpt-ui/./src/components/chat/CitationFilePreview.tsx","webpack://customgpt-ui/./src/components/chat/ConversationManager.tsx","webpack://customgpt-ui/./src/components/chat/MessageErrorDisplay.tsx","webpack://customgpt-ui/./src/widget/WidgetContext.tsx","webpack://customgpt-ui/./src/widget/WidgetStoreContext.tsx","webpack://customgpt-ui/./src/hooks/useWidgetStore.ts","webpack://customgpt-ui/./src/lib/voice/themes/ThemeManager.ts","webpack://customgpt-ui/./src/components/voice/Canvas.tsx","webpack://customgpt-ui/./src/lib/utils/throttle.ts","webpack://customgpt-ui/./src/store/voice-settings.ts","webpack://customgpt-ui/./src/components/voice/VoiceSettings.tsx","webpack://customgpt-ui/./src/lib/voice/streaming-tts.ts","webpack://customgpt-ui/./src/lib/voice/speech-manager.ts","webpack://customgpt-ui/./src/lib/voice/utils.ts","webpack://customgpt-ui/./src/lib/crypto.ts","webpack://customgpt-ui/./src/store/demo.ts","webpack://customgpt-ui/./src/components/voice/VoiceModal.tsx","webpack://customgpt-ui/./src/components/chat/ChatContainer.tsx","webpack://customgpt-ui/./src/components/chat/ConversationDetailsModal.tsx","webpack://customgpt-ui/./src/components/chat/DeleteConversationDialog.tsx","webpack://customgpt-ui/./src/components/chat/ConversationSidebar.tsx","webpack://customgpt-ui/./src/components/chat/ChatLayout.tsx","webpack://customgpt-ui/./src/widget/iframe-app.tsx","webpack://customgpt-ui/./src/lib/voice/themes/PerformanceOptimizations.ts","webpack://customgpt-ui/./src/lib/voice/themes/BaseTheme.ts","webpack://customgpt-ui/./node_modules/.pnpm/onnxruntime-web@1.22.0/node_modules/onnxruntime-web/dist/ sync","webpack://customgpt-ui/webpack/bootstrap","webpack://customgpt-ui/webpack/runtime/compat get default export","webpack://customgpt-ui/webpack/runtime/define property getters","webpack://customgpt-ui/webpack/runtime/ensure chunk","webpack://customgpt-ui/webpack/runtime/get javascript chunk filename","webpack://customgpt-ui/webpack/runtime/get mini-css chunk filename","webpack://customgpt-ui/webpack/runtime/global","webpack://customgpt-ui/webpack/runtime/hasOwnProperty shorthand","webpack://customgpt-ui/webpack/runtime/make namespace object","webpack://customgpt-ui/webpack/runtime/publicPath","webpack://customgpt-ui/webpack/runtime/jsonp chunk loading","webpack://customgpt-ui/webpack/runtime/nonce","webpack://customgpt-ui/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; (typeof current == 'object' || typeof current == 'function') && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"customgpt-ui:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","/**\n * Mathematical utilities for voice themes\n * \n * Common mathematical functions and helpers used across different voice themes\n */\n\n/**\n * Linear interpolation between two values\n */\nexport const lerp = (start: number, end: number, factor: number): number => {\n  return start + (end - start) * factor;\n};\n\n/**\n * Smooth step interpolation (ease in/out)\n */\nexport const smoothStep = (edge0: number, edge1: number, x: number): number => {\n  const t = Math.max(0, Math.min(1, (x - edge0) / (edge1 - edge0)));\n  return t * t * (3 - 2 * t);\n};\n\n/**\n * Clamp a value between min and max\n */\nexport const clamp = (value: number, min: number, max: number): number => {\n  return Math.max(min, Math.min(max, value));\n};\n\n/**\n * Map a value from one range to another\n */\nexport const map = (value: number, inMin: number, inMax: number, outMin: number, outMax: number): number => {\n  return ((value - inMin) / (inMax - inMin)) * (outMax - outMin) + outMin;\n};\n\n/**\n * Generate random number between min and max\n */\nexport const random = (min: number, max: number): number => {\n  return Math.random() * (max - min) + min;\n};\n\n/**\n * Generate random integer between min and max (inclusive)\n */\nexport const randomInt = (min: number, max: number): number => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Distance between two 2D points\n */\nexport const distance2D = (x1: number, y1: number, x2: number, y2: number): number => {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\n/**\n * Distance between two 3D points\n */\nexport const distance3D = (x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number => {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const dz = z2 - z1;\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n};\n\n/**\n * Normalize angle to 0-2π range\n */\nexport const normalizeAngle = (angle: number): number => {\n  while (angle < 0) angle += 2 * Math.PI;\n  while (angle >= 2 * Math.PI) angle -= 2 * Math.PI;\n  return angle;\n};\n\n/**\n * Convert degrees to radians\n */\nexport const degToRad = (degrees: number): number => {\n  return degrees * (Math.PI / 180);\n};\n\n/**\n * Convert radians to degrees\n */\nexport const radToDeg = (radians: number): number => {\n  return radians * (180 / Math.PI);\n};\n\n/**\n * Sine wave with customizable amplitude, frequency, and phase\n */\nexport const sineWave = (time: number, amplitude: number = 1, frequency: number = 1, phase: number = 0): number => {\n  return amplitude * Math.sin(frequency * time + phase);\n};\n\n/**\n * Cosine wave with customizable amplitude, frequency, and phase\n */\nexport const cosineWave = (time: number, amplitude: number = 1, frequency: number = 1, phase: number = 0): number => {\n  return amplitude * Math.cos(frequency * time + phase);\n};\n\n/**\n * 3D rotation around X axis\n */\nexport const rotateX = (x: number, y: number, z: number, angle: number): [number, number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return [\n    x,\n    y * cos - z * sin,\n    y * sin + z * cos\n  ];\n};\n\n/**\n * 3D rotation around Y axis\n */\nexport const rotateY = (x: number, y: number, z: number, angle: number): [number, number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return [\n    x * cos + z * sin,\n    y,\n    -x * sin + z * cos\n  ];\n};\n\n/**\n * 3D rotation around Z axis\n */\nexport const rotateZ = (x: number, y: number, z: number, angle: number): [number, number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return [\n    x * cos - y * sin,\n    x * sin + y * cos,\n    z\n  ];\n};\n\n/**\n * 3D to 2D projection\n */\nexport const project3D = (x: number, y: number, z: number, focalLength: number, centerX: number, centerY: number): [number, number] => {\n  const scale = focalLength / (focalLength - z);\n  return [\n    x * scale + centerX,\n    y * scale + centerY\n  ];\n};\n\n/**\n * Cubic bezier curve interpolation\n */\nexport const cubicBezier = (t: number, p0: number, p1: number, p2: number, p3: number): number => {\n  const oneMinusT = 1 - t;\n  return oneMinusT * oneMinusT * oneMinusT * p0 +\n         3 * oneMinusT * oneMinusT * t * p1 +\n         3 * oneMinusT * t * t * p2 +\n         t * t * t * p3;\n};\n\n/**\n * Noise function (simplified Perlin-like noise)\n */\nexport const noise = (x: number, y: number = 0): number => {\n  const n = Math.sin(x * 12.9898 + y * 78.233) * 43758.5453;\n  return (n - Math.floor(n)) * 2 - 1;\n};\n\n/**\n * HSL to RGB conversion\n */\nexport const hslToRgb = (h: number, s: number, l: number): [number, number, number] => {\n  h = h / 360;\n  s = s / 100;\n  l = l / 100;\n\n  const hue2rgb = (p: number, q: number, t: number): number => {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1/6) return p + (q - p) * 6 * t;\n    if (t < 1/2) return q;\n    if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n    return p;\n  };\n\n  if (s === 0) {\n    return [l * 255, l * 255, l * 255];\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    return [\n      Math.round(hue2rgb(p, q, h + 1/3) * 255),\n      Math.round(hue2rgb(p, q, h) * 255),\n      Math.round(hue2rgb(p, q, h - 1/3) * 255)\n    ];\n  }\n};\n\n/**\n * Easing functions - these are aliases for common easing patterns\n */\nexport const easeInOutQuart = (t: number): number => {\n  return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t;\n};\n\nexport const easeInOutCubic = (t: number): number => {\n  return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n};\n\nexport const easeOutBounce = (t: number): number => {\n  if (t < 1 / 2.75) {\n    return 7.5625 * t * t;\n  } else if (t < 2 / 2.75) {\n    return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;\n  } else if (t < 2.5 / 2.75) {\n    return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;\n  } else {\n    return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;\n  }\n};\n\nexport const easeInOutSine = (t: number): number => {\n  return -(Math.cos(Math.PI * t) - 1) / 2;\n};\n\nexport const easeInOutExpo = (t: number): number => {\n  if (t === 0) return 0;\n  if (t === 1) return 1;\n  return t < 0.5\n    ? Math.pow(2, 20 * t - 10) / 2\n    : (2 - Math.pow(2, -20 * t + 10)) / 2;\n};\n\n/**\n * 2D Perlin-like noise function\n */\nexport const noise2D = (x: number, y: number): number => {\n  const n = Math.sin(x * 12.9898 + y * 78.233) * 43758.5453;\n  return (n - Math.floor(n)) * 2 - 1;\n};\n\n/**\n * Alias for smoothStep to maintain compatibility\n */\nexport const smoothstep = smoothStep;","/**\n * Default Theme - Classic Particle Sphere\n * \n * The original particle sphere theme, refactored to use the new theme system.\n * Features a 3D rotating sphere of particles with smooth color transitions.\n */\n\nimport { BaseTheme } from './BaseTheme';\nimport { VoiceState } from './IVoiceTheme';\nimport { lerp } from '../utils/math';\nimport { ObjectPool } from '../utils/performance';\n\ninterface Particle {\n  x: number;\n  y: number;\n  z: number;\n  velX: number;\n  velY: number;\n  velZ: number;\n  age: number;\n  dead: boolean;\n  right: boolean;\n  projX: number;\n  projY: number;\n  alpha: number;\n  attack: number;\n  hold: number;\n  decay: number;\n  initValue: number;\n  holdValue: number;\n  lastValue: number;\n  stuckTime: number;\n  accelX: number;\n  accelY: number;\n  accelZ: number;\n  next?: Particle;\n  prev?: Particle;\n}\n\ninterface ColorPalette {\n  r: number;\n  g: number;\n  b: number;\n  gradient: number[];\n}\n\ninterface ColorScheme {\n  idle: ColorPalette;\n  userSpeaking: ColorPalette;\n  processing: ColorPalette;\n  aiSpeaking: ColorPalette;\n  hover: ColorPalette;\n}\n\nexport class DefaultTheme extends BaseTheme {\n  readonly id = 'default';\n  readonly name = 'Classic Sphere';\n  readonly description = 'The original 3D particle sphere with smooth color transitions';\n  readonly category = 'particle' as const;\n  readonly performanceProfile = 'medium' as const;\n\n  // Sphere configuration\n  private sphereRadius = 280;\n  private radiusScale = 1;\n  private framesPerRotation = 5000;\n  private focalLength = 320;\n  private zeroAlphaDepth = -750;\n  private sphereCenterY = 0;\n  private sphereCenterZ = -3 - this.sphereRadius;\n\n  // Particle system\n  private particlePool: ObjectPool<Particle>;\n  private particleList: { first?: Particle } = {};\n  private recycleBin: { first?: Particle } = {};\n  private currentParticleCount = 0;\n  private maxParticles = 200;\n\n  // Color system\n  private currentR = 52;\n  private currentG = 235;\n  private currentB = 222;\n  private targetR = 52;\n  private targetG = 235;\n  private targetB = 222;\n  private colorTransitionSpeed = 0.05;\n  private currentColorScheme = 'gemini';\n\n  // Animation parameters\n  private turnAngle = 1;\n  private wait = 2;\n  private count = 0;\n  private numToAddEachFrame = 3;\n  private particleAlpha = 1;\n  private particleRad = 2.5;\n  private gravity = 0;\n  private randAccelX = 0.1;\n  private randAccelY = 0.1;\n  private randAccelZ = 0.1;\n\n  // Color schemes\n  private colorSchemes: Record<string, ColorScheme> = {\n    gemini: {\n      idle: { r: 66, g: 133, b: 244, gradient: [66, 133, 244, 52, 168, 83] },\n      userSpeaking: { r: 234, g: 67, b: 53, gradient: [234, 67, 53, 251, 188, 5] },\n      processing: { r: 155, g: 64, b: 224, gradient: [155, 64, 224, 66, 133, 244] },\n      aiSpeaking: { r: 52, g: 168, b: 83, gradient: [52, 168, 83, 66, 133, 244] },\n      hover: { r: 251, g: 188, b: 5, gradient: [251, 188, 5, 234, 67, 53] }\n    },\n    instagram: {\n      idle: { r: 228, g: 64, b: 95, gradient: [228, 64, 95, 247, 119, 55] },\n      userSpeaking: { r: 247, g: 119, b: 55, gradient: [247, 119, 55, 252, 175, 69] },\n      processing: { r: 193, g: 53, b: 132, gradient: [193, 53, 132, 228, 64, 95] },\n      aiSpeaking: { r: 252, g: 175, b: 69, gradient: [252, 175, 69, 247, 119, 55] },\n      hover: { r: 131, g: 58, b: 180, gradient: [131, 58, 180, 193, 53, 132] }\n    },\n    ocean: {\n      idle: { r: 0, g: 119, b: 190, gradient: [0, 119, 190, 0, 168, 232] },\n      userSpeaking: { r: 0, g: 168, b: 232, gradient: [0, 168, 232, 0, 201, 255] },\n      processing: { r: 0, g: 201, b: 255, gradient: [0, 201, 255, 100, 255, 218] },\n      aiSpeaking: { r: 100, g: 255, b: 218, gradient: [100, 255, 218, 0, 168, 232] },\n      hover: { r: 0, g: 150, b: 199, gradient: [0, 150, 199, 0, 201, 255] }\n    },\n    sunset: {\n      idle: { r: 255, g: 107, b: 107, gradient: [255, 107, 107, 255, 193, 7] },\n      userSpeaking: { r: 255, g: 193, b: 7, gradient: [255, 193, 7, 255, 142, 83] },\n      processing: { r: 255, g: 142, b: 83, gradient: [255, 142, 83, 255, 107, 107] },\n      aiSpeaking: { r: 255, g: 230, b: 109, gradient: [255, 230, 109, 255, 193, 7] },\n      hover: { r: 255, g: 171, b: 64, gradient: [255, 171, 64, 255, 107, 107] }\n    },\n    aurora: {\n      idle: { r: 0, g: 201, b: 255, gradient: [0, 201, 255, 146, 254, 157] },\n      userSpeaking: { r: 146, g: 254, b: 157, gradient: [146, 254, 157, 0, 255, 193] },\n      processing: { r: 0, g: 255, b: 193, gradient: [0, 255, 193, 186, 85, 255] },\n      aiSpeaking: { r: 186, g: 85, b: 255, gradient: [186, 85, 255, 0, 201, 255] },\n      hover: { r: 120, g: 255, b: 214, gradient: [120, 255, 214, 186, 85, 255] }\n    }\n  };\n\n  constructor() {\n    super();\n    \n    // Initialize particle pool\n    this.particlePool = new ObjectPool<Particle>(\n      () => ({\n        x: 0, y: 0, z: 0, velX: 0, velY: 0, velZ: 0,\n        age: 0, dead: false, right: false, projX: 0, projY: 0, alpha: 0,\n        attack: 0, hold: 0, decay: 0, initValue: 0, holdValue: 0, lastValue: 0,\n        stuckTime: 0, accelX: 0, accelY: 0, accelZ: 0\n      }),\n      (particle) => {\n        particle.age = 0;\n        particle.dead = false;\n        particle.alpha = 0;\n        particle.next = undefined;\n        particle.prev = undefined;\n      },\n      50,\n      this.maxParticles\n    );\n\n    this.setColor(this.getColorPalette().idle);\n  }\n\n  protected onInit(): void {\n    this.maxParticles = this.getMaxParticles();\n  }\n\n  protected onDraw(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number,\n    deltaTime: number\n  ): void {\n    this.updateColors();\n    this.updateParticles(context, width, height, centerX, centerY);\n    this.renderParticles(context, width, height, centerX, centerY);\n  }\n\n  protected onStateChange(newState: VoiceState): void {\n    const palette = this.getColorPalette();\n    \n    switch (newState) {\n      case VoiceState.USER_SPEAKING:\n        this.framesPerRotation = 2000;\n        this.colorTransitionSpeed = 0.15;\n        this.setColor(palette.userSpeaking);\n        this.numToAddEachFrame = 5;\n        this.particleAlpha = 1.2;\n        this.particleRad = 3.5;\n        this.gravity = 0.1;\n        break;\n        \n      case VoiceState.PROCESSING:\n        this.framesPerRotation = 500;\n        this.colorTransitionSpeed = 0.2;\n        this.setColor(palette.processing);\n        this.numToAddEachFrame = 8;\n        this.particleAlpha = 1.5;\n        this.particleRad = 4;\n        this.gravity = 0;\n        break;\n        \n      case VoiceState.AI_SPEAKING:\n        this.framesPerRotation = 2500;\n        this.colorTransitionSpeed = 0.1;\n        this.setColor(palette.aiSpeaking);\n        this.numToAddEachFrame = 4;\n        this.particleAlpha = 1.3;\n        this.particleRad = 3;\n        this.gravity = -0.05;\n        break;\n        \n      case VoiceState.IDLE:\n      default:\n        this.framesPerRotation = 5000;\n        this.colorTransitionSpeed = 0.05;\n        this.setColor(palette.idle);\n        this.numToAddEachFrame = 3;\n        this.particleAlpha = 1;\n        this.particleRad = 2.5;\n        this.gravity = 0;\n        break;\n    }\n  }\n\n  protected getThemeSpecificMetrics() {\n    return {\n      particleCount: this.currentParticleCount,\n      maxParticles: this.maxParticles,\n      colorScheme: this.currentColorScheme\n    };\n  }\n\n  /**\n   * Set color scheme (public method for external use)\n   */\n  setColorScheme(scheme: string): void {\n    if (this.colorSchemes[scheme]) {\n      this.currentColorScheme = scheme;\n      // Update current color based on current state\n      const palette = this.getColorPalette();\n      this.setColor(palette.idle); // Will be overridden by current state\n    }\n  }\n\n  // Private methods - core particle system logic\n\n  private getColorPalette(): ColorScheme {\n    return this.colorSchemes[this.currentColorScheme] || this.colorSchemes.gemini;\n  }\n\n  private setColor(palette: ColorPalette): void {\n    this.targetR = palette.r;\n    this.targetG = palette.g;\n    this.targetB = palette.b;\n  }\n\n  private updateColors(): void {\n    this.currentR = lerp(this.currentR, this.targetR, this.colorTransitionSpeed);\n    this.currentG = lerp(this.currentG, this.targetG, this.colorTransitionSpeed);\n    this.currentB = lerp(this.currentB, this.targetB, this.colorTransitionSpeed);\n  }\n\n  private updateParticles(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number\n  ): void {\n    // Create new particles\n    this.count++;\n    if (this.count >= this.wait && this.currentParticleCount < this.maxParticles) {\n      this.count = 0;\n      const dynamicNumParticles = Math.floor(this.numToAddEachFrame * (1 + this.mouseInfluence * 0.5));\n      const particlesToCreate = Math.min(dynamicNumParticles, this.maxParticles - this.currentParticleCount);\n      \n      for (let i = 0; i < particlesToCreate; i++) {\n        this.createParticle();\n      }\n    }\n\n    // Update rotation\n    const turnSpeed = 2 * Math.PI / this.framesPerRotation;\n    const dynamicTurnSpeed = turnSpeed * (1 + this.mouseInfluence * 0.3);\n    this.turnAngle = (this.turnAngle + dynamicTurnSpeed) % (2 * Math.PI);\n  }\n\n  private createParticle(): void {\n    const theta = Math.random() * 2 * Math.PI;\n    const phi = Math.acos(Math.random() * 2 - 1);\n    \n    // Add mouse influence to particle positioning\n    const mouseDistortion = this.mouseInfluence * 0.3;\n    const mouseBias = {\n      x: this.normalizedMouseX * mouseDistortion * this.sphereRadius * 0.5,\n      y: this.normalizedMouseY * mouseDistortion * this.sphereRadius * 0.5,\n      z: 0\n    };\n    \n    const x0 = this.sphereRadius * Math.sin(phi) * Math.cos(theta) + mouseBias.x;\n    const y0 = this.sphereRadius * Math.sin(phi) * Math.sin(theta) + mouseBias.y;\n    const z0 = this.sphereRadius * Math.cos(phi) + mouseBias.z;\n\n    const velocityMultiplier = 0.002 * (1 + this.mouseInfluence * 0.5);\n    const particle = this.addParticle(\n      x0,\n      this.sphereCenterY + y0,\n      this.sphereCenterZ + z0,\n      velocityMultiplier * x0,\n      velocityMultiplier * y0,\n      velocityMultiplier * z0\n    );\n\n    // Set particle envelope parameters\n    const alphaMultiplier = 1 + this.mouseInfluence * 0.3;\n    particle.attack = Math.floor(30 / (1 + this.mouseInfluence * 0.5));\n    particle.hold = Math.floor(30 * (1 + this.mouseInfluence * 0.5));\n    particle.decay = 60;\n    particle.initValue = 0;\n    particle.holdValue = this.particleAlpha * alphaMultiplier;\n    particle.lastValue = 0;\n    particle.stuckTime = Math.floor((45 + Math.random() * 15) / (1 + this.mouseInfluence * 0.3));\n\n    // Enhanced acceleration with mouse influence\n    particle.accelX = this.normalizedMouseX * this.mouseInfluence * 0.001;\n    particle.accelY = this.gravity + (this.normalizedMouseY * this.mouseInfluence * 0.001);\n    particle.accelZ = 0;\n  }\n\n  private addParticle(x0: number, y0: number, z0: number, vx0: number, vy0: number, vz0: number): Particle {\n    const newParticle = this.particlePool.acquire();\n    this.currentParticleCount++;\n\n    // Add to beginning of particle list\n    if (this.particleList.first) {\n      newParticle.next = this.particleList.first;\n      this.particleList.first.prev = newParticle;\n    }\n    this.particleList.first = newParticle;\n    newParticle.prev = undefined;\n\n    // Initialize particle\n    newParticle.x = x0;\n    newParticle.y = y0;\n    newParticle.z = z0;\n    newParticle.velX = vx0;\n    newParticle.velY = vy0;\n    newParticle.velZ = vz0;\n    newParticle.age = 0;\n    newParticle.dead = false;\n    newParticle.right = Math.random() < 0.5;\n\n    return newParticle;\n  }\n\n  private renderParticles(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number\n  ): void {\n    const sinAngle = Math.sin(this.turnAngle);\n    const cosAngle = Math.cos(this.turnAngle);\n    const zMax = this.focalLength - 2;\n\n    let particle = this.particleList.first;\n    \n    while (particle) {\n      const nextParticle = particle.next;\n\n      // Update particle age\n      particle.age++;\n\n      // Move particle if not stuck\n      if (particle.age > particle.stuckTime) {\n        particle.velX += particle.accelX + this.randAccelX * (Math.random() * 2 - 1);\n        particle.velY += particle.accelY + this.randAccelY * (Math.random() * 2 - 1);\n        particle.velZ += particle.accelZ + this.randAccelZ * (Math.random() * 2 - 1);\n\n        particle.x += particle.velX;\n        particle.y += particle.velY;\n        particle.z += particle.velZ;\n      }\n\n      // Calculate 3D rotation and projection\n      const rotX = cosAngle * particle.x + sinAngle * (particle.z - this.sphereCenterZ);\n      const rotZ = -sinAngle * particle.x + cosAngle * (particle.z - this.sphereCenterZ) + this.sphereCenterZ;\n      const m = this.radiusScale * this.focalLength / (this.focalLength - rotZ);\n      \n      particle.projX = rotX * m + centerX;\n      particle.projY = particle.y * m + centerY;\n\n      // Update alpha based on envelope\n      this.updateParticleAlpha(particle);\n\n      // Check if particle should be rendered or recycled\n      const outsideTest = (\n        particle.projX > width || particle.projX < 0 ||\n        particle.projY < 0 || particle.projY > height ||\n        rotZ > zMax\n      );\n\n      if (outsideTest || particle.dead) {\n        this.recycleParticle(particle);\n      } else {\n        this.renderParticle(context, particle, rotZ, m);\n      }\n\n      particle = nextParticle;\n    }\n  }\n\n  private updateParticleAlpha(particle: Particle): void {\n    if (particle.age < particle.attack + particle.hold + particle.decay) {\n      if (particle.age < particle.attack) {\n        particle.alpha = (particle.holdValue - particle.initValue) / particle.attack * particle.age + particle.initValue;\n      } else if (particle.age < particle.attack + particle.hold) {\n        particle.alpha = particle.holdValue;\n      } else {\n        particle.alpha = (particle.lastValue - particle.holdValue) / particle.decay * (particle.age - particle.attack - particle.hold) + particle.holdValue;\n      }\n    } else {\n      particle.dead = true;\n    }\n  }\n\n  private renderParticle(context: CanvasRenderingContext2D, particle: Particle, rotZ: number, scale: number): void {\n    // Depth-dependent alpha\n    const depthAlphaFactor = Math.max(0, Math.min(1, 1 - rotZ / this.zeroAlphaDepth));\n    const finalAlpha = depthAlphaFactor * particle.alpha;\n    const particleSize = scale * this.particleRad * (1 + this.mouseInfluence * 0.2);\n\n    // Draw main particle\n    context.fillStyle = `rgba(${Math.floor(this.currentR)}, ${Math.floor(this.currentG)}, ${Math.floor(this.currentB)}, ${finalAlpha})`;\n    context.beginPath();\n    context.arc(particle.projX, particle.projY, particleSize, 0, 2 * Math.PI);\n    context.fill();\n\n    // Draw glow effect if enabled and appropriate\n    if (this.shouldEnableGlow() && this.mouseInfluence > 0.5 && finalAlpha > 0.3) {\n      context.fillStyle = `rgba(${Math.floor(this.currentR)}, ${Math.floor(this.currentG)}, ${Math.floor(this.currentB)}, ${finalAlpha * 0.3})`;\n      context.beginPath();\n      context.arc(particle.projX, particle.projY, particleSize * 1.5, 0, 2 * Math.PI);\n      context.fill();\n    }\n  }\n\n  private recycleParticle(particle: Particle): void {\n    this.currentParticleCount = Math.max(0, this.currentParticleCount - 1);\n\n    // Remove from particle list\n    if (this.particleList.first === particle) {\n      this.particleList.first = particle.next;\n      if (particle.next) {\n        particle.next.prev = undefined;\n      }\n    } else {\n      if (particle.prev) {\n        particle.prev.next = particle.next;\n      }\n      if (particle.next) {\n        particle.next.prev = particle.prev;\n      }\n    }\n\n    // Return to pool\n    this.particlePool.release(particle);\n  }\n\n  protected onDispose(): void {\n    // Clean up all particles\n    this.particleList.first = undefined;\n    this.currentParticleCount = 0;\n    this.particlePool.clear();\n  }\n}","/**\n * Performance monitoring utilities for voice themes\n * \n * Provides performance tracking, FPS monitoring, and device capability detection\n */\n\nexport interface PerformanceMetrics {\n  fps: number;\n  frameTime: number;\n  memoryUsage?: number;\n  particleCount?: number;\n  objectCount?: number;\n  drawCalls?: number;\n}\n\nexport interface DeviceCapabilities {\n  isMobile: boolean;\n  isLowPowerDevice: boolean;\n  supportsWebGL: boolean;\n  hardwareConcurrency: number;\n  memoryGB?: number;\n  performanceLevel: 'low' | 'medium' | 'high';\n}\n\n/**\n * Performance monitor for tracking FPS and frame timing\n */\nexport class PerformanceMonitor {\n  private frameCount = 0;\n  private lastTime = 0;\n  private currentFPS = 60;\n  private frameTime = 16.67;\n  private fpsHistory: number[] = [];\n  private frameTimeHistory: number[] = [];\n  private maxHistorySize = 60; // Keep 1 second of history at 60fps\n  private warningThreshold = 0.8;\n  private criticalThreshold = 0.6;\n\n  private callbacks: {\n    onFPSUpdate?: (fps: number) => void;\n    onPerformanceWarning?: (metrics: PerformanceMetrics) => void;\n    onPerformanceCritical?: (metrics: PerformanceMetrics) => void;\n  } = {};\n\n  constructor(targetFPS = 60) {\n    this.lastTime = performance.now();\n  }\n\n  /**\n   * Call this every frame to update performance metrics\n   */\n  update(): PerformanceMetrics {\n    const currentTime = performance.now();\n    const deltaTime = currentTime - this.lastTime;\n    this.frameTime = deltaTime;\n    \n    // Update FPS calculation\n    this.frameCount++;\n    const fps = 1000 / deltaTime;\n    this.fpsHistory.push(fps);\n    this.frameTimeHistory.push(deltaTime);\n\n    // Keep history size manageable\n    if (this.fpsHistory.length > this.maxHistorySize) {\n      this.fpsHistory.shift();\n      this.frameTimeHistory.shift();\n    }\n\n    // Calculate average FPS over recent history\n    const avgFPS = this.fpsHistory.reduce((sum, fps) => sum + fps, 0) / this.fpsHistory.length;\n    this.currentFPS = avgFPS;\n\n    // Check for performance issues\n    const targetFPS = 30; // Conservative target for voice themes\n    const performanceRatio = avgFPS / targetFPS;\n\n    if (performanceRatio < this.criticalThreshold) {\n      this.callbacks.onPerformanceCritical?.({\n        fps: avgFPS,\n        frameTime: deltaTime\n      });\n    } else if (performanceRatio < this.warningThreshold) {\n      this.callbacks.onPerformanceWarning?.({\n        fps: avgFPS,\n        frameTime: deltaTime\n      });\n    }\n\n    // Update callbacks\n    if (this.frameCount % 30 === 0) { // Update every 30 frames (~0.5 seconds)\n      this.callbacks.onFPSUpdate?.(avgFPS);\n    }\n\n    this.lastTime = currentTime;\n\n    return {\n      fps: avgFPS,\n      frameTime: deltaTime\n    };\n  }\n\n  /**\n   * Set performance monitoring callbacks\n   */\n  setCallbacks(callbacks: typeof this.callbacks) {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Get current performance metrics\n   */\n  getCurrentMetrics(): PerformanceMetrics {\n    return {\n      fps: this.currentFPS,\n      frameTime: this.frameTime\n    };\n  }\n\n  /**\n   * Reset performance tracking\n   */\n  reset() {\n    this.frameCount = 0;\n    this.fpsHistory = [];\n    this.frameTimeHistory = [];\n    this.lastTime = performance.now();\n  }\n}\n\n/**\n * Detect device capabilities for performance optimization\n */\nexport class DeviceCapabilityDetector {\n  private static instance: DeviceCapabilityDetector;\n  private capabilities: DeviceCapabilities | null = null;\n\n  static getInstance(): DeviceCapabilityDetector {\n    if (!DeviceCapabilityDetector.instance) {\n      DeviceCapabilityDetector.instance = new DeviceCapabilityDetector();\n    }\n    return DeviceCapabilityDetector.instance;\n  }\n\n  /**\n   * Detect and cache device capabilities\n   */\n  async detectCapabilities(): Promise<DeviceCapabilities> {\n    if (this.capabilities) {\n      return this.capabilities;\n    }\n\n    const isMobile = this.detectMobile();\n    const supportsWebGL = this.detectWebGL();\n    const hardwareConcurrency = navigator.hardwareConcurrency || 4;\n    \n    let memoryGB: number | undefined;\n    if ('memory' in (navigator as any)) {\n      memoryGB = (navigator as any).memory.jsHeapSizeLimit / (1024 ** 3);\n    }\n\n    // Performance benchmarking\n    const performanceLevel = await this.benchmarkPerformance();\n    const isLowPowerDevice = this.detectLowPowerDevice(hardwareConcurrency, memoryGB, performanceLevel);\n\n    this.capabilities = {\n      isMobile,\n      isLowPowerDevice,\n      supportsWebGL,\n      hardwareConcurrency,\n      memoryGB,\n      performanceLevel\n    };\n\n    return this.capabilities;\n  }\n\n  private detectMobile(): boolean {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n  }\n\n  private detectWebGL(): boolean {\n    try {\n      const canvas = document.createElement('canvas');\n      return !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n    } catch {\n      return false;\n    }\n  }\n\n  private detectLowPowerDevice(cores: number, memoryGB?: number, performanceLevel?: string): boolean {\n    // Heuristics for low-power device detection\n    if (cores <= 2) return true;\n    if (memoryGB && memoryGB < 2) return true;\n    if (performanceLevel === 'low') return true;\n    return false;\n  }\n\n  private async benchmarkPerformance(): Promise<'low' | 'medium' | 'high'> {\n    return new Promise((resolve) => {\n      const startTime = performance.now();\n      let operations = 0;\n      const maxTime = 50; // 50ms benchmark window\n\n      const benchmark = () => {\n        const currentTime = performance.now();\n        if (currentTime - startTime >= maxTime) {\n          // Classify performance based on operations completed\n          if (operations < 100000) {\n            resolve('low');\n          } else if (operations < 500000) {\n            resolve('medium');\n          } else {\n            resolve('high');\n          }\n          return;\n        }\n\n        // Simple mathematical operations\n        for (let i = 0; i < 1000; i++) {\n          Math.sin(Math.random() * Math.PI * 2);\n          operations++;\n        }\n\n        requestAnimationFrame(benchmark);\n      };\n\n      requestAnimationFrame(benchmark);\n    });\n  }\n\n  /**\n   * Get cached capabilities or detect if not available\n   */\n  getCapabilities(): DeviceCapabilities | null {\n    return this.capabilities;\n  }\n}\n\n/**\n * Memory pool for efficient particle/object management\n */\nexport class ObjectPool<T> {\n  private available: T[] = [];\n  private inUse = new Set<T>();\n  private createFn: () => T;\n  private resetFn?: (obj: T) => void;\n  private maxSize: number;\n\n  constructor(createFn: () => T, resetFn?: (obj: T) => void, initialSize = 10, maxSize = 1000) {\n    this.createFn = createFn;\n    this.resetFn = resetFn;\n    this.maxSize = maxSize;\n\n    // Pre-populate pool\n    for (let i = 0; i < initialSize; i++) {\n      this.available.push(this.createFn());\n    }\n  }\n\n  /**\n   * Get an object from the pool\n   */\n  acquire(): T {\n    let obj: T;\n\n    if (this.available.length > 0) {\n      obj = this.available.pop()!;\n    } else if (this.inUse.size < this.maxSize) {\n      obj = this.createFn();\n    } else {\n      // Pool is full, reuse oldest object\n      const oldest = this.inUse.values().next().value;\n      if (oldest) {\n        this.release(oldest);\n        obj = oldest;\n      } else {\n        // Fallback: create new object if somehow there's nothing to reuse\n        obj = this.createFn();\n      }\n    }\n\n    this.inUse.add(obj);\n    return obj;\n  }\n\n  /**\n   * Return an object to the pool\n   */\n  release(obj: T): void {\n    if (this.inUse.has(obj)) {\n      this.inUse.delete(obj);\n      if (this.resetFn) {\n        this.resetFn(obj);\n      }\n      this.available.push(obj);\n    }\n  }\n\n  /**\n   * Get pool statistics\n   */\n  getStats() {\n    return {\n      available: this.available.length,\n      inUse: this.inUse.size,\n      total: this.available.length + this.inUse.size\n    };\n  }\n\n  /**\n   * Clear the entire pool\n   */\n  clear(): void {\n    this.available = [];\n    this.inUse.clear();\n  }\n}\n\n/**\n * Utility to get optimal performance settings based on device capabilities\n */\nexport const getOptimalSettings = async (): Promise<{\n  targetFPS: number;\n  maxParticles: number;\n  enableEffects: boolean;\n  enableGlow: boolean;\n  qualityLevel: 'low' | 'medium' | 'high';\n}> => {\n  const detector = DeviceCapabilityDetector.getInstance();\n  const capabilities = await detector.detectCapabilities();\n\n  if (capabilities.performanceLevel === 'low' || capabilities.isLowPowerDevice) {\n    return {\n      targetFPS: 24,\n      maxParticles: 50,\n      enableEffects: false,\n      enableGlow: false,\n      qualityLevel: 'low'\n    };\n  } else if (capabilities.performanceLevel === 'medium') {\n    return {\n      targetFPS: 30,\n      maxParticles: 150,\n      enableEffects: true,\n      enableGlow: false,\n      qualityLevel: 'medium'\n    };\n  } else {\n    return {\n      targetFPS: 60,\n      maxParticles: 300,\n      enableEffects: true,\n      enableGlow: true,\n      qualityLevel: 'high'\n    };\n  }\n};","/**\n * Voice Theme Interface\n * \n * Defines the contract that all voice interaction themes must implement.\n * Each theme provides unique visual feedback for different voice states.\n */\n\nexport interface IVoiceTheme {\n  /**\n   * Unique identifier for the theme\n   */\n  readonly id: string;\n\n  /**\n   * Display name for the theme\n   */\n  readonly name: string;\n\n  /**\n   * Theme description\n   */\n  readonly description: string;\n\n  /**\n   * Theme category for UI organization\n   */\n  readonly category: 'particle' | 'geometric' | 'advanced' | 'artistic';\n\n  /**\n   * Performance profile for mobile optimization\n   */\n  readonly performanceProfile: 'light' | 'medium' | 'heavy';\n\n  /**\n   * Initialize the theme with canvas context and dimensions\n   */\n  init(context: CanvasRenderingContext2D, width: number, height: number): void;\n\n  /**\n   * Main drawing function called every frame\n   */\n  draw(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void;\n\n  /**\n   * User is speaking state\n   */\n  onUserSpeaking(): void;\n\n  /**\n   * Processing/analyzing speech state\n   */\n  onProcessing(): void;\n\n  /**\n   * AI is responding state\n   */\n  onAiSpeaking(): void;\n\n  /**\n   * Reset to idle state\n   */\n  reset(): void;\n\n  /**\n   * Handle mouse/touch position updates\n   */\n  setMousePosition(x: number, y: number, canvasWidth: number, canvasHeight: number): void;\n\n  /**\n   * Handle mouse/touch hover state\n   */\n  setHovering(hovering: boolean): void;\n\n  /**\n   * Cleanup resources when theme is deactivated\n   */\n  dispose(): void;\n\n  /**\n   * Get current performance metrics\n   */\n  getPerformanceMetrics(): {\n    particleCount?: number;\n    objectCount?: number;\n    memoryUsage?: number;\n    averageFPS?: number;\n  };\n}\n\n/**\n * Theme metadata for UI display\n */\nexport interface ThemeMetadata {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  performanceProfile: string;\n  previewColors: string[];\n  previewDescription: string;\n}\n\n/**\n * Voice state enumeration\n */\nexport enum VoiceState {\n  IDLE = 'idle',\n  USER_SPEAKING = 'userSpeaking',\n  PROCESSING = 'processing',\n  AI_SPEAKING = 'aiSpeaking'\n}\n\n/**\n * Performance settings for different device types\n */\nexport interface PerformanceSettings {\n  targetFPS: number;\n  maxParticles: number;\n  enableEffects: boolean;\n  enableGlow: boolean;\n  qualityLevel: 'low' | 'medium' | 'high';\n}\n\n/**\n * Theme factory function type\n */\nexport type ThemeFactory = () => IVoiceTheme;","/**\n * Theme utilities for persistent theme management\n * \n * Uses cookies for theme persistence to ensure the theme\n * is available during server-side rendering and prevents\n * flash of incorrect theme on page load.\n */\n\nexport type Theme = 'light' | 'dark';\n\nconst THEME_COOKIE_NAME = 'customgpt-theme';\nconst THEME_COOKIE_MAX_AGE = 365 * 24 * 60 * 60; // 1 year in seconds\n\n/**\n * Get theme from cookie\n */\nexport function getThemeFromCookie(): Theme {\n  if (typeof window === 'undefined') return 'light';\n  \n  const cookies = document.cookie.split(';');\n  const themeCookie = cookies.find(cookie => \n    cookie.trim().startsWith(`${THEME_COOKIE_NAME}=`)\n  );\n  \n  if (themeCookie) {\n    const value = themeCookie.split('=')[1].trim();\n    return value === 'dark' ? 'dark' : 'light';\n  }\n  \n  return 'light';\n}\n\n/**\n * Set theme in cookie\n */\nexport function setThemeCookie(theme: Theme) {\n  if (typeof window === 'undefined') return;\n  \n  // Set cookie with max age and path\n  document.cookie = `${THEME_COOKIE_NAME}=${theme}; max-age=${THEME_COOKIE_MAX_AGE}; path=/; SameSite=Lax`;\n}\n\n/**\n * Apply theme to document\n */\nexport function applyThemeToDocument(theme: Theme) {\n  if (typeof window === 'undefined') return;\n  \n  if (theme === 'dark') {\n    document.documentElement.classList.add('dark');\n  } else {\n    document.documentElement.classList.remove('dark');\n  }\n}\n\n/**\n * Initialize theme from cookie and apply to document\n */\nexport function initializeTheme(): Theme {\n  const theme = getThemeFromCookie();\n  applyThemeToDocument(theme);\n  return theme;\n}\n\n/**\n * Set theme and persist to cookie\n */\nexport function setTheme(theme: Theme) {\n  setThemeCookie(theme);\n  applyThemeToDocument(theme);\n}","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConfigStore } from '@/types';\nimport { setTheme as setThemeUtil, getThemeFromCookie, initializeTheme } from '@/lib/theme';\n\n/**\n * Configuration Store\n * \n * Updated to remove API key storage for security.\n * API key is now stored securely on the server.\n * Theme is persisted using cookies for better SSR support.\n */\nexport const useConfigStore = create<ConfigStore>()(\n  persist(\n    (set, get) => ({\n      apiKey: null, // Deprecated - kept for interface compatibility\n      baseURL: 'https://app.customgpt.ai/api/v1', // Not used anymore, server handles this\n      theme: (typeof window !== 'undefined' ? getThemeFromCookie() : 'light') as 'light' | 'dark',\n\n      setApiKey: (key: string) => {\n        // No-op - API key is not stored client-side anymore\n        // This method is kept for backward compatibility\n        console.warn('API key storage has been disabled for security. Configure API key in server environment variables.');\n      },\n\n      setBaseURL: (url: string) => {\n        // No-op - base URL is configured on server\n        console.warn('Base URL configuration has been moved to server. Update CUSTOMGPT_API_BASE_URL in environment variables.');\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Update cookie and document class for theme\n        if (typeof window !== 'undefined') {\n          setThemeUtil(theme);\n        }\n      },\n    }),\n    {\n      name: 'customgpt-config',\n      // Only persist non-sensitive data\n      partialize: (state) => ({\n        theme: state.theme,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Initialize theme from cookie on rehydration\n        if (typeof window !== 'undefined') {\n          const theme = initializeTheme();\n          if (state && state.theme !== theme) {\n            state.theme = theme;\n          }\n        }\n      },\n    }\n  )\n);","/**\n * Utility Functions Library\n * \n * Common utility functions used throughout the application.\n * These utilities handle:\n * - CSS class merging for Tailwind\n * - ID generation\n * - File operations\n * - Date/time formatting\n * - Clipboard operations\n * - HTML sanitization\n * - API helpers\n * \n * Features:\n * - Pure, reusable utility functions with full TypeScript support\n * - Comprehensive JSDoc documentation with usage examples\n * - Robust edge case handling and error recovery\n * - Optimized performance with configurable options\n * - Production-ready implementations for common operations\n */\n\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\nimport DOMPurify from 'dompurify';\n\n/**\n * Utility function for combining Tailwind CSS classes\n * \n * This function combines clsx and tailwind-merge to:\n * 1. Support conditional classes (clsx)\n * 2. Properly merge Tailwind classes (tailwind-merge)\n * \n * @example\n * cn('px-2 py-1', 'px-4') // Returns: 'py-1 px-4'\n * cn('text-red-500', condition && 'text-blue-500')\n * cn(['text-sm', 'font-bold'], { 'opacity-50': isDisabled })\n * \n * @param inputs - Class strings, conditionals, arrays, or objects\n * @returns Merged class string\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Generate a unique ID\n * \n * Creates a unique identifier using random string and timestamp.\n * Not cryptographically secure - use for UI elements only.\n * \n * @example\n * generateId() // Returns: 'a1b2c3d41234567890'\n * \n * @returns Unique string ID\n */\nexport function generateId(): string {\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\n}\n\n/**\n * Format file size in bytes to human readable format\n * \n * Converts byte values to appropriate units (KB, MB, GB).\n * Always shows 2 decimal places except for bytes.\n * \n * @example\n * formatFileSize(0) // Returns: '0 Bytes'\n * formatFileSize(1024) // Returns: '1 KB'\n * formatFileSize(1536) // Returns: '1.5 KB'\n * formatFileSize(1048576) // Returns: '1 MB'\n * \n * @param bytes - File size in bytes\n * @returns Formatted string with appropriate unit\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * Get file icon based on file type\n * \n * Returns an emoji icon based on the MIME type or file extension.\n * Used in file upload UI components.\n * \n * @example\n * getFileIcon('application/pdf') // Returns: '📄'\n * getFileIcon('image/png') // Returns: '🖼️'\n * getFileIcon('text/plain') // Returns: '📝'\n * getFileIcon('unknown/type') // Returns: '📎' (default)\n * \n * @param fileType - MIME type or file extension\n * @returns Emoji icon representing the file type\n */\nexport function getFileIcon(fileType: string): string {\n  const type = fileType.toLowerCase();\n  \n  // Document types\n  if (type.includes('pdf')) return '📄';\n  if (type.includes('word') || type.includes('doc')) return '📄';\n  if (type.includes('text') || type.includes('txt')) return '📝';\n  \n  // Media types\n  if (type.includes('image')) return '🖼️';\n  if (type.includes('video')) return '🎥';\n  if (type.includes('audio')) return '🎵';\n  \n  // Data types\n  if (type.includes('excel') || type.includes('sheet')) return '📊';\n  if (type.includes('powerpoint') || type.includes('presentation')) return '📈';\n  if (type.includes('json')) return '📋';\n  if (type.includes('csv')) return '📊';\n  \n  // Archive types\n  if (type.includes('zip') || type.includes('rar')) return '🗜️';\n  \n  // Default icon\n  return '📎';\n}\n\n/**\n * Validate file type against allowed types\n * \n * Checks if a file type is in the allowed list.\n * Case-insensitive partial matching.\n * \n * @example\n * const allowed = ['image/', 'application/pdf'];\n * isFileTypeAllowed('image/png', allowed) // Returns: true\n * isFileTypeAllowed('IMAGE/JPEG', allowed) // Returns: true (case-insensitive)\n * isFileTypeAllowed('text/plain', allowed) // Returns: false\n * \n * @param fileType - MIME type to check\n * @param allowedTypes - List of allowed MIME types or patterns\n * @returns Whether the file type is allowed\n */\nexport function isFileTypeAllowed(fileType: string, allowedTypes: readonly string[]): boolean {\n  return allowedTypes.some(type => fileType.toLowerCase().includes(type.toLowerCase()));\n}\n\n/**\n * Format timestamp to human readable format\n * \n * Converts ISO timestamps to relative time strings.\n * Shows relative time for recent dates, absolute date for older.\n * \n * @example\n * // Assuming current time is 2024-01-01 12:00:00\n * formatTimestamp('2024-01-01T11:59:30Z') // Returns: 'Just now'\n * formatTimestamp('2024-01-01T11:30:00Z') // Returns: '30m ago'\n * formatTimestamp('2024-01-01T08:00:00Z') // Returns: '4h ago'\n * formatTimestamp('2023-12-25T12:00:00Z') // Returns: '7d ago'\n * formatTimestamp('2023-11-01T12:00:00Z') // Returns: '11/1/2023'\n * \n * @param timestamp - ISO date string\n * @returns Human-readable time difference or date\n */\nexport function formatTimestamp(timestamp: string): string {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diffInMs = now.getTime() - date.getTime();\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n  \n  // Recent times shown as relative\n  if (diffInMinutes < 1) return 'Just now';\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n  if (diffInHours < 24) return `${diffInHours}h ago`;\n  if (diffInDays < 7) return `${diffInDays}d ago`;\n  \n  // Older times shown as absolute date\n  return date.toLocaleDateString();\n}\n\n/**\n * Copy text to clipboard\n * \n * Uses the modern Clipboard API with fallback error handling.\n * Returns success/failure for UI feedback.\n * \n * @example\n * const success = await copyToClipboard('Hello, world!');\n * if (success) {\n *   toast.success('Copied to clipboard');\n * } else {\n *   toast.error('Failed to copy');\n * }\n * \n * @param text - Text to copy to clipboard\n * @returns Promise resolving to success boolean\n */\nexport async function copyToClipboard(text: string): Promise<boolean> {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch (error) {\n    // Copy failed, return false status\n    console.error('Failed to copy to clipboard:', error);\n    return false;\n  }\n}\n\n/**\n * Sanitize HTML content\n * \n * Removes dangerous HTML/JS to prevent XSS attacks.\n * Safe for rendering user-generated content.\n * Skips sanitization on server-side (SSR).\n * \n * @example\n * const dirty = '<script>alert(\"XSS\")</script><p>Hello</p>';\n * sanitizeHtml(dirty) // Returns: '<p>Hello</p>'\n * \n * const safe = '<p>Hello <strong>world</strong></p>';\n * sanitizeHtml(safe) // Returns: '<p>Hello <strong>world</strong></p>'\n * \n * @param html - Raw HTML string\n * @returns Sanitized HTML safe for rendering\n */\nexport function sanitizeHtml(html: string): string {\n  if (typeof window === 'undefined') {\n    return html; // Skip sanitization on server side (no DOM)\n  }\n  \n  return DOMPurify.sanitize(html, {\n    ALLOWED_TAGS: ['p', 'br', 'strong', 'em', 'code', 'pre', 'a', 'ul', 'ol', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n    ALLOWED_ATTR: ['href', 'target', 'rel', 'class'],\n  });\n}\n\n/**\n * Debounce function\n * \n * Delays function execution until after wait milliseconds have\n * elapsed since the last time it was invoked. Useful for search\n * inputs, window resize handlers, etc.\n * \n * @example\n * const debouncedSearch = debounce((query: string) => {\n *   console.log('Searching for:', query);\n * }, 300);\n * \n * // Rapid calls...\n * debouncedSearch('a');    // Won't execute\n * debouncedSearch('ab');   // Won't execute\n * debouncedSearch('abc');  // Will execute after 300ms\n * \n * @param func - Function to debounce\n * @param wait - Milliseconds to delay\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(null, args), wait);\n  };\n}\n\n/**\n * Throttle function\n * \n * Ensures function is called at most once per specified time period.\n * First call executes immediately, subsequent calls are ignored until\n * the time period expires.\n * \n * @example\n * const throttledScroll = throttle(() => {\n *   console.log('Scroll position:', window.scrollY);\n * }, 100);\n * \n * // During rapid scrolling:\n * // t=0ms: executes immediately\n * // t=50ms: ignored (still in throttle period)\n * // t=100ms: executes (throttle period expired)\n * \n * @param func - Function to throttle\n * @param limit - Minimum milliseconds between calls\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  \n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func.apply(null, args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n/**\n * Truncate text to specified length\n * \n * Cuts text at the specified length and adds ellipsis.\n * Trims whitespace from the cut point.\n * \n * @example\n * truncateText('Hello, world!', 5) // Returns: 'Hello...'\n * truncateText('Short', 10) // Returns: 'Short'\n * truncateText('Hello   ', 5) // Returns: 'Hello...' (trimmed)\n * \n * @param text - Text to truncate\n * @param maxLength - Maximum length before truncation\n * @returns Truncated text with ellipsis if needed\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength).trim() + '...';\n}\n\n/**\n * Validate CustomGPT API key format\n * \n * Checks if the provided string matches the CustomGPT API key format.\n * Format: {digits}|{alphanumeric_string}\n * - At least 3 digits before the pipe\n * - At least 20 alphanumeric characters after the pipe\n * \n * @example\n * isValidApiKey('123|abcdefghijklmnopqrst') // Returns: true\n * isValidApiKey('7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x') // Returns: true\n * isValidApiKey('12|short') // Returns: false (too few digits/chars)\n * isValidApiKey('no-pipe') // Returns: false (wrong format)\n * isValidApiKey('') // Returns: false (empty)\n * \n * @param apiKey - API key string to validate\n * @returns Whether the API key is valid\n */\nexport function isValidApiKey(apiKey: string): boolean {\n  if (!apiKey || typeof apiKey !== 'string') {\n    return false;\n  }\n  \n  // Trim whitespace\n  apiKey = apiKey.trim();\n  \n  // CustomGPT API key format: starts with digits followed by | then alphanumeric string\n  // Example: 7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x\n  // Must have at least 3 digits, pipe, and at least 20 characters after pipe\n  return /^\\d{3,}\\|[a-zA-Z0-9]{20,}$/.test(apiKey);\n}\n\n/**\n * Parse streaming response chunk\n * \n * Handles various SSE (Server-Sent Events) formats from the CustomGPT API.\n * Supports both standard SSE format and raw JSON lines.\n * \n * Formats handled:\n * - SSE events: \"event: progress\", \"event: finish\"\n * - SSE data: \"data: {json}\", \"data: [DONE]\"\n * - Raw JSON: {\"content\": \"...\", \"citations\": [...]}\n * - Plain text: \"data: plain text content\"\n * \n * @example\n * parseStreamChunk('data: {\"content\": \"Hello\"}') \n * // Returns: { type: 'content', content: 'Hello' }\n * \n * parseStreamChunk('data: [DONE]')\n * // Returns: { type: 'done' }\n * \n * parseStreamChunk('event: finish')\n * // Returns: { type: 'done' }\n * \n * @param chunk - Raw chunk from SSE stream\n * @returns Parsed chunk object or null if should be skipped\n */\nexport function parseStreamChunk(chunk: string): any | null {\n  try {\n    \n    // Skip event lines - CustomGPT sends \"event: progress\" etc.\n    if (chunk.startsWith('event: ')) {\n      const eventType = chunk.slice(7).trim();\n      \n      // Handle specific events if needed\n      if (eventType === 'finish') {\n        return { type: 'done' };\n      }\n      \n      // Skip other event types\n      return null;\n    }\n    \n    // Handle SSE format\n    if (chunk.startsWith('data: ')) {\n      const data = chunk.slice(6).trim();\n      \n      if (data === '[DONE]' || data === 'DONE') return { type: 'done' };\n      \n      // CustomGPT might send plain text data instead of JSON\n      // Try to parse as JSON first\n      try {\n        const parsed = JSON.parse(data);\n        \n        // Handle different response formats\n        if (typeof parsed === 'object') {\n          // If it already has a type, return as is\n          if (parsed.type) {\n            return parsed;\n          }\n          \n          // Handle CustomGPT format where content might be a direct property\n          if (parsed.content !== undefined) {\n            return { type: 'content', content: parsed.content, citations: parsed.citations };\n          }\n          \n          // Handle citation-only responses\n          if (parsed.citations && !parsed.content) {\n            return { type: 'citation', citations: parsed.citations };\n          }\n          \n          // Handle message field (some APIs use 'message' instead of 'content')\n          if (parsed.message !== undefined) {\n            return { type: 'content', content: parsed.message, citations: parsed.citations };\n          }\n          \n          // Handle delta format (some streaming APIs use delta.content)\n          if (parsed.delta && parsed.delta.content !== undefined) {\n            return { type: 'content', content: parsed.delta.content, citations: parsed.citations };\n          }\n          \n          // Handle choices format (OpenAI-style streaming)\n          if (parsed.choices && parsed.choices[0] && parsed.choices[0].delta) {\n            const delta = parsed.choices[0].delta;\n            if (delta.content !== undefined) {\n              return { type: 'content', content: delta.content, citations: parsed.citations };\n            }\n          }\n        }\n        \n        // Return the parsed data as is if we can't determine the format\n        return parsed;\n      } catch (jsonError) {\n        // If JSON parsing fails, treat it as plain text content\n        return { type: 'content', content: data };\n      }\n    }\n    \n    // Handle raw JSON lines (no \"data: \" prefix)\n    if (chunk.trim().startsWith('{')) {\n      try {\n        const parsed = JSON.parse(chunk.trim());\n        \n        if (parsed.content !== undefined || parsed.citations !== undefined) {\n          return { \n            type: parsed.content ? 'content' : 'citation', \n            content: parsed.content,\n            citations: parsed.citations \n          };\n        }\n        \n        // Handle message field\n        if (parsed.message !== undefined) {\n          return { type: 'content', content: parsed.message, citations: parsed.citations };\n        }\n        \n        return parsed;\n      } catch (parseError) {\n        console.warn('Failed to parse raw JSON chunk:', parseError);\n      }\n    }\n    \n    // Handle plain text responses (fallback)\n    if (chunk.trim() && !chunk.includes('data:') && !chunk.startsWith('{')) {\n      return { type: 'content', content: chunk.trim() };\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Failed to parse stream chunk:', chunk, error);\n    return null;\n  }\n}\n\n/**\n * Extract inline citations from text\n * \n * Finds all citation references in format [1], [2], etc.\n * Returns the original text and array of citation numbers.\n * \n * @example\n * extractInlineCitations('Hello [1] world [2]!')\n * // Returns: { text: 'Hello [1] world [2]!', citations: [1, 2] }\n * \n * extractInlineCitations('No citations here')\n * // Returns: { text: 'No citations here', citations: [] }\n * \n * @param text - Text potentially containing citations\n * @returns Object with text and citation numbers\n */\nexport function extractInlineCitations(text: string): { text: string; citations: number[] } {\n  const citationRegex = /\\[(\\d+)\\]/g;\n  const citations: number[] = [];\n  let match;\n  \n  while ((match = citationRegex.exec(text)) !== null) {\n    citations.push(parseInt(match[1]));\n  }\n  \n  return { text, citations };\n}\n\n/**\n * Create a delay promise\n * \n * Utility for adding delays in async functions.\n * Useful for retries, animations, or testing.\n * \n * @example\n * async function slowOperation() {\n *   console.log('Starting...');\n *   await delay(1000); // Wait 1 second\n *   console.log('Done!');\n * }\n * \n * @param ms - Milliseconds to delay\n * @returns Promise that resolves after delay\n */\nexport function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Retry a function with exponential backoff\n * \n * Retries a failing async function with increasing delays.\n * Delays: 1s, 2s, 4s, 8s, etc. (exponential)\n * \n * @example\n * // Retry API call up to 3 times\n * const data = await retryWithBackoff(\n *   () => fetch('/api/data').then(r => r.json()),\n *   3,    // max attempts\n *   1000  // base delay (1s)\n * );\n * \n * // Delays: attempt 1 = immediate, attempt 2 = 1s, attempt 3 = 2s\n * \n * @param fn - Async function to retry\n * @param maxAttempts - Maximum retry attempts (default: 3)\n * @param baseDelay - Base delay in ms (default: 1000)\n * @returns Result from successful function call\n * @throws Last error if all attempts fail\n */\nexport async function retryWithBackoff<T>(\n  fn: () => Promise<T>,\n  maxAttempts: number = 3,\n  baseDelay: number = 1000\n): Promise<T> {\n  let lastError: Error;\n  \n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n      \n      if (attempt === maxAttempts) {\n        throw lastError;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s, etc.\n      const delayTime = baseDelay * Math.pow(2, attempt - 1);\n      await delay(delayTime);\n    }\n  }\n  \n  throw lastError!;\n}\n\n/**\n * Check if device is mobile\n * \n * Based on viewport width (<768px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is mobile-sized\n */\nexport function isMobile(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth < 768;\n}\n\n/**\n * Check if device is tablet\n * \n * Based on viewport width (768px-1023px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is tablet-sized\n */\nexport function isTablet(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 768 && window.innerWidth < 1024;\n}\n\n/**\n * Check if device is desktop\n * \n * Based on viewport width (≥1024px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is desktop-sized\n */\nexport function isDesktop(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 1024;\n}\n\n/**\n * Get responsive container class\n * \n * Returns Tailwind classes for responsive container sizing.\n * - Mobile: Full width/height\n * - Tablet: Max 2xl width, centered\n * - Desktop: Max 4xl width, centered\n * \n * @returns Tailwind class string for container\n */\nexport function getResponsiveContainer(): string {\n  if (isMobile()) return 'w-full h-full';\n  if (isTablet()) return 'w-full max-w-2xl mx-auto';\n  return 'w-full max-w-4xl mx-auto';\n}\n\n/**\n * Format conversation name from first message\n * \n * Creates a conversation title from the first message.\n * Takes first 6 words, max 50 characters.\n * \n * @example\n * generateConversationName('Hello, can you help me with JavaScript?')\n * // Returns: 'Hello, can you help me with'\n * \n * generateConversationName('Short')\n * // Returns: 'Short'\n * \n * @param firstMessage - The first message in conversation\n * @returns Formatted conversation name\n */\nexport function generateConversationName(firstMessage: string): string {\n  // Remove common API/system prefixes\n  let cleanedMessage = firstMessage.trim();\n  \n  // Remove OpenAI- prefix or similar system prefixes\n  cleanedMessage = cleanedMessage.replace(/^(OpenAI-|System-|API-|Assistant:|User:)\\s*/i, '');\n  \n  const words = cleanedMessage.split(/\\s+/);\n  const title = words.slice(0, 6).join(' ');\n  return title.length > 50 ? title.substring(0, 50).trim() + '...' : title;\n}\n\n/**\n * Validate URL format\n * \n * Checks if string is a valid URL using URL constructor.\n * \n * @example\n * isValidUrl('https://example.com') // Returns: true\n * isValidUrl('http://localhost:3000/path') // Returns: true\n * isValidUrl('not a url') // Returns: false\n * isValidUrl('') // Returns: false\n * \n * @param url - String to validate\n * @returns Whether string is a valid URL\n */\nexport function isValidUrl(url: string): boolean {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get file extension from filename\n * \n * Extracts the file extension in lowercase.\n * \n * @example\n * getFileExtension('document.pdf') // Returns: 'pdf'\n * getFileExtension('image.PNG') // Returns: 'png'\n * getFileExtension('no-extension') // Returns: ''\n * getFileExtension('multi.part.name.txt') // Returns: 'txt'\n * \n * @param filename - Filename to extract extension from\n * @returns Lowercase extension or empty string\n */\nexport function getFileExtension(filename: string): string {\n  return filename.split('.').pop()?.toLowerCase() || '';\n}\n\n/**\n * Check if file is an image\n * \n * Checks MIME type for image/ prefix.\n * \n * @example\n * isImageFile('image/png') // Returns: true\n * isImageFile('image/jpeg') // Returns: true\n * isImageFile('application/pdf') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is an image\n */\nexport function isImageFile(fileType: string): boolean {\n  return fileType.startsWith('image/');\n}\n\n/**\n * Check if file is a document\n * \n * Checks against common document MIME types including:\n * - PDF files\n * - Microsoft Word documents\n * - Plain text files\n * - CSV spreadsheets\n * - JSON/XML data files\n * \n * @example\n * isDocumentFile('application/pdf') // Returns: true\n * isDocumentFile('text/plain') // Returns: true\n * isDocumentFile('image/png') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is a supported document type\n */\nexport function isDocumentFile(fileType: string): boolean {\n  const documentTypes = [\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n  ];\n  return documentTypes.includes(fileType);\n}\n\n/**\n * Create download link for file\n * \n * Programmatically downloads content as a file.\n * Creates a blob URL and triggers download.\n * \n * @example\n * // Download text file\n * downloadFile('Hello, world!', 'greeting.txt');\n * \n * // Download JSON file\n * const data = { name: 'John', age: 30 };\n * downloadFile(\n *   JSON.stringify(data, null, 2),\n *   'data.json',\n *   'application/json'\n * );\n * \n * @param content - File content as string\n * @param filename - Name for downloaded file\n * @param mimeType - MIME type (default: 'text/plain')\n */\nexport function downloadFile(content: string, filename: string, mimeType: string = 'text/plain'): void {\n  const blob = new Blob([content], { type: mimeType });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n}\n\n/**\n * Escape HTML entities\n * \n * Prevents XSS by escaping HTML special characters.\n * Use when displaying user input as HTML.\n * \n * @example\n * escapeHtml('<script>alert(\"XSS\")</script>')\n * // Returns: '&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;'\n * \n * escapeHtml('Hello & \"world\"')\n * // Returns: 'Hello &amp; &quot;world&quot;'\n * \n * @param unsafe - Raw string that may contain HTML\n * @returns HTML-escaped string\n */\nexport function escapeHtml(unsafe: string): string {\n  return unsafe\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\n/**\n * Handle API errors and extract error message\n * \n * Normalizes various error formats into consistent structure.\n * Handles:\n * - API response errors (4xx, 5xx)\n * - Network/connection errors\n * - Client-side errors\n * \n * @example\n * try {\n *   await apiCall();\n * } catch (error) {\n *   const { message, code } = handleApiError(error);\n *   toast.error(message);\n *   if (code === 401) {\n *     // Handle unauthorized\n *   }\n * }\n * \n * @param error - Error object from API call\n * @returns Normalized error with message and optional code\n */\nexport function handleApiError(error: any): { message: string; code?: number } {\n  console.error('API Error:', error);\n  \n  if (error.response) {\n    // API responded with an error\n    const data = error.response.data;\n    // Handle nested error formats\n    if (data && data.data && data.data.message) {\n      return {\n        message: data.data.message,\n        code: data.data.code || error.response.status\n      };\n    }\n    // Handle direct message format\n    if (data && data.message) {\n      return {\n        message: data.message,\n        code: error.response.status\n      };\n    }\n    // Fallback to status code\n    return {\n      message: `API Error: ${error.response.status}`,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    // Request was made but no response received\n    return {\n      message: 'No response from server. Please check your connection.',\n      code: 0\n    };\n  } else {\n    // Something else happened (e.g., request setup error)\n    return {\n      message: error.message || 'An unexpected error occurred',\n      code: 0\n    };\n  }\n}\n\n/**\n * Constants for file uploads and API\n * \n * Central configuration for limits and constraints.\n * Modify these values to customize behavior:\n * \n * - MAX_FILE_SIZE: Maximum upload size per file\n * - ACCEPTED_FILE_TYPES: MIME types allowed for upload\n * - MAX_MESSAGE_LENGTH: Character limit for messages\n * - API_TIMEOUT: Request timeout for regular API calls\n * - STREAM_TIMEOUT: Timeout for streaming responses\n * - RETRY_ATTEMPTS: Number of retries on failure\n * - RETRY_DELAY: Base delay between retries\n * \n * @example\n * // Check file size\n * if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n *   throw new Error('File too large');\n * }\n * \n * // Configure retry\n * await retryWithBackoff(\n *   apiCall,\n *   CONSTANTS.RETRY_ATTEMPTS,\n *   CONSTANTS.RETRY_DELAY\n * );\n */\nexport const CONSTANTS = {\n  /** Maximum file size in bytes (10MB) */\n  MAX_FILE_SIZE: 10 * 1024 * 1024,\n  \n  /** Accepted MIME types for file uploads */\n  ACCEPTED_FILE_TYPES: [\n    // Documents\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n    // Images\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n  ],\n  \n  /** Maximum characters per message */\n  MAX_MESSAGE_LENGTH: 4000,\n  \n  /** API request timeout in milliseconds (30s) */\n  API_TIMEOUT: 30000,\n  \n  /** Streaming request timeout in milliseconds (60s) */\n  STREAM_TIMEOUT: 60000,\n  \n  /** Number of retry attempts for failed requests */\n  RETRY_ATTEMPTS: 3,\n  \n  /** Base delay between retries in milliseconds (1s) */\n  RETRY_DELAY: 1000,\n} as const;","export type LogLevel = 'info' | 'warn' | 'error';\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  category: string;\n  message: string;\n  data?: any;\n  error?: any;\n  stack?: string;\n}\n\nclass Logger {\n  private static instance: Logger;\n  private isClient: boolean;\n  private logs: LogEntry[] = [];\n\n  private constructor() {\n    this.isClient = typeof window !== 'undefined';\n  }\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  private formatMessage(entry: LogEntry): string {\n    const { timestamp, level, category, message, data, error, stack } = entry;\n    let formatted = `[${timestamp}] [${level.toUpperCase()}] [${category}] ${message}`;\n    \n    if (data) {\n      formatted += `\\nData: ${JSON.stringify(data, null, 2)}`;\n    }\n    \n    if (error) {\n      formatted += `\\nError: ${error.message || error}`;\n      if (stack) {\n        formatted += `\\nStack: ${stack}`;\n      }\n    }\n    \n    return formatted;\n  }\n\n  private writeToFile(entry: LogEntry) {\n    // File writing is handled by the API route\n    // This method is kept for compatibility\n  }\n\n  private log(level: LogLevel, category: string, message: string, data?: any, error?: any) {\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      category,\n      message,\n      data,\n      error: error ? { message: error.message, code: error.code, status: error.status } : undefined,\n      stack: error?.stack,\n    };\n\n    // Store in memory for client access\n    this.logs.push(entry);\n    if (this.logs.length > 1000) {\n      this.logs = this.logs.slice(-500); // Keep last 500 entries\n    }\n\n    // Console output with styling\n    const styles = {\n      info: 'color: #3B82F6; font-weight: normal;',\n      warn: 'color: #F59E0B; font-weight: bold;',\n      error: 'color: #EF4444; font-weight: bold;',\n    };\n\n    const prefix = `[${entry.timestamp.split('T')[1].split('.')[0]}] [${category}]`;\n    \n    if (this.isClient) {\n      console.log(`%c${prefix} ${message}`, styles[level]);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    } else {\n      const colorCodes = {\n        info: '\\x1b[36m',\n        warn: '\\x1b[33m',\n        error: '\\x1b[31m',\n      };\n      const reset = '\\x1b[0m';\n      console.log(`${colorCodes[level]}${prefix}${reset} ${message}`);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    }\n\n    // Server logging removed - all logs go to console only\n  }\n\n\n  info(category: string, message: string, data?: any) {\n    this.log('info', category, message, data);\n  }\n\n  warn(category: string, message: string, data?: any) {\n    this.log('warn', category, message, data);\n  }\n\n  error(category: string, message: string, error?: any, data?: any) {\n    this.log('error', category, message, data, error);\n  }\n\n  getLogs(): LogEntry[] {\n    return this.logs;\n  }\n\n  clearLogs() {\n    this.logs = [];\n  }\n\n  // API-specific logging helpers\n  apiRequest(endpoint: string, method: string, data?: any) {\n    this.info('API_REQUEST', `${method} ${endpoint}`, data);\n  }\n\n  apiResponse(endpoint: string, status: number, data?: any) {\n    const level = status >= 400 ? 'error' : 'info';\n    this.log(level, 'API_RESPONSE', `${endpoint} - Status: ${status}`, data);\n  }\n\n  apiError(endpoint: string, error: any) {\n    this.error('API_ERROR', `Failed request to ${endpoint}`, error);\n  }\n\n  // Auth-specific logging\n  authCheck(message: string, data?: any) {\n    this.info('AUTH', message, data);\n  }\n\n  authError(message: string, error?: any) {\n    this.error('AUTH_ERROR', message, error);\n  }\n\n  // Navigation logging\n  navigation(route: string, params?: any) {\n    this.info('NAVIGATION', `Navigating to ${route}`, params);\n  }\n\n  // Store operation logging\n  storeAction(store: string, action: string, data?: any) {\n    this.info('STORE', `${store}.${action}`, data);\n  }\n}\n\nexport const logger = Logger.getInstance();","/**\n * Demo Mode Usage Limits Constants\n * \n * Central configuration for all demo mode restrictions and limits.\n * Modify these values to adjust demo mode behavior.\n */\n\n// Free Trial Mode Limits (No API Key)\nexport const FREE_TRIAL_LIMITS = {\n  // Resource Limits\n  MAX_PROJECTS: 1,\n  MAX_CONVERSATIONS: 2,\n  MAX_MESSAGES_PER_CONVERSATION: 2,\n  \n  // Time Limits (in milliseconds)\n  SESSION_DURATION: 1 * 60 * 1000, // 5 minutes\n  SESSION_WARNING_TIME: 5 * 60 * 1000, // Show warning 5 minutes before expiry\n  \n  // Rate Limits\n  MAX_REQUESTS_PER_MINUTE: 10,\n  COOLDOWN_BETWEEN_MESSAGES: 2000, // 2 seconds between messages\n  \n  // Feature Restrictions\n  ALLOW_FILE_UPLOAD: false,\n  ALLOW_SITEMAP_UPLOAD: false,\n  ALLOW_DELETE_OPERATIONS: false,\n  ALLOW_PROJECT_SETTINGS: false,\n  ALLOW_VOICE_MODE: false,\n  \n  // UI Messages\n  SESSION_EXPIRY_WARNING: \"Your free trial session will expire in 5 minutes\",\n  SESSION_EXPIRED_MESSAGE: \"Your free trial session has expired. Please refresh to start a new session.\",\n  LIMIT_REACHED_MESSAGE: {\n    projects: \"Free trial limit reached: Maximum 1 project allowed\",\n    conversations: \"Free trial limit reached: Maximum 2 conversations allowed\",\n    messages: \"Free trial limit reached: Maximum 2 messages per conversation\"\n  }\n} as const;\n\n// User API Key Demo Mode Limits\nexport const USER_DEMO_LIMITS = {\n  // Time Limits (in milliseconds)\n  SESSION_DURATION: 120 * 60 * 1000, // 120 minutes (2 hours)\n  SESSION_WARNING_TIME: 10 * 60 * 1000, // Show warning 10 minutes before expiry\n  \n  // No resource limits for user API key mode\n  MAX_PROJECTS: Infinity,\n  MAX_CONVERSATIONS: Infinity,\n  MAX_MESSAGES_PER_CONVERSATION: Infinity,\n  \n  // Features all enabled\n  ALLOW_FILE_UPLOAD: true,\n  ALLOW_SITEMAP_UPLOAD: true,\n  ALLOW_DELETE_OPERATIONS: true,\n  ALLOW_PROJECT_SETTINGS: true,\n  ALLOW_VOICE_MODE: true,\n  \n  // UI Messages\n  SESSION_EXPIRY_WARNING: \"Your demo session will expire in 10 minutes\",\n  SESSION_EXPIRED_MESSAGE: \"Your demo session has expired. Please refresh to start a new session.\"\n} as const;\n\n// Session Storage Keys\nexport const DEMO_STORAGE_KEYS = {\n  DEPLOYMENT_MODE: 'customgpt.deploymentMode',\n  FREE_TRIAL_MODE: 'customgpt.freeTrialMode',\n  FREE_TRIAL_SESSION: 'customgpt.freeTrialSession',\n  DEMO_SESSION: 'customgpt.demoSession',\n  API_KEY: 'customgpt.apiKey',\n  OPENAI_KEY: 'customgpt.openAIApiKey',\n  SESSION_START: 'customgpt.sessionStart',\n  AUTO_DETECTED: 'customgpt.autoDetected'\n} as const;\n\n// API Headers\nexport const DEMO_API_HEADERS = {\n  DEPLOYMENT_MODE: 'X-Deployment-Mode',\n  API_KEY: 'X-CustomGPT-API-Key',\n  SESSION_ID: 'X-Demo-Session-ID',\n  FREE_TRIAL: 'X-Free-Trial-Mode'\n} as const;\n\n// Type definitions for session data\nexport interface FreeTrialSession {\n  sessionId: string;\n  startTime: number;\n  projectCount: number;\n  conversationCount: number;\n  messageCount: number;\n  lastActivity: number;\n}\n\nexport interface DemoSession {\n  sessionId: string;\n  startTime: number;\n  lastActivity: number;\n}\n\n// Helper functions\nexport function isSessionExpired(startTime: number, duration: number): boolean {\n  return Date.now() - startTime > duration;\n}\n\nexport function getTimeRemaining(startTime: number, duration: number): number {\n  const elapsed = Date.now() - startTime;\n  const remaining = duration - elapsed;\n  return Math.max(0, remaining);\n}\n\nexport function shouldShowWarning(startTime: number, duration: number, warningTime: number): boolean {\n  const remaining = getTimeRemaining(startTime, duration);\n  return remaining > 0 && remaining <= warningTime;\n}","/**\n * Usage Analytics Tracker\n * \n * Tracks usage across different deployment modes and sends analytics\n * to your backend for monitoring and analysis.\n */\n\nimport { DEMO_STORAGE_KEYS } from '@/lib/constants/demo-limits';\n\nexport interface UsageEvent {\n  // Event identification\n  eventType: 'api_call' | 'session_start' | 'session_end' | 'limit_reached' | 'error';\n  eventName: string;\n  timestamp: number;\n  \n  // Deployment information\n  deploymentMode: 'production' | 'demo';\n  demoType?: 'free-trial' | 'user-api-key' | 'none';\n  \n  // Session information\n  sessionId?: string;\n  userId?: string; // If available from your auth system\n  \n  // Request details\n  endpoint?: string;\n  method?: string;\n  statusCode?: number;\n  \n  // Usage metrics\n  projectCount?: number;\n  conversationCount?: number;\n  messageCount?: number;\n  \n  // Client information\n  clientVersion?: string;\n  userAgent?: string;\n  referrer?: string;\n  \n  // Additional metadata\n  metadata?: Record<string, any>;\n}\n\nclass UsageTracker {\n  private static instance: UsageTracker;\n  private analyticsEndpoint: string = process.env.NEXT_PUBLIC_ANALYTICS_ENDPOINT || '/api/analytics';\n  private batchSize: number = 10;\n  private flushInterval: number = 30000; // 30 seconds\n  private eventQueue: UsageEvent[] = [];\n  private flushTimer: NodeJS.Timeout | null = null;\n\n  private constructor() {\n    // Start flush timer\n    this.startFlushTimer();\n  }\n\n  static getInstance(): UsageTracker {\n    if (!UsageTracker.instance) {\n      UsageTracker.instance = new UsageTracker();\n    }\n    return UsageTracker.instance;\n  }\n\n  /**\n   * Track a usage event\n   */\n  track(event: Partial<UsageEvent>): void {\n    const fullEvent: UsageEvent = {\n      eventType: event.eventType || 'api_call',\n      eventName: event.eventName || 'unknown',\n      timestamp: Date.now(),\n      deploymentMode: this.getDeploymentMode(),\n      demoType: this.getDemoType(),\n      sessionId: this.getSessionId(),\n      clientVersion: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',\n      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined,\n      referrer: typeof window !== 'undefined' ? document.referrer : undefined,\n      ...event\n    };\n\n    this.eventQueue.push(fullEvent);\n\n    // Flush if batch size reached\n    if (this.eventQueue.length >= this.batchSize) {\n      this.flush();\n    }\n  }\n\n  /**\n   * Track API call\n   */\n  trackApiCall(endpoint: string, method: string, statusCode?: number): void {\n    this.track({\n      eventType: 'api_call',\n      eventName: `${method} ${endpoint}`,\n      endpoint,\n      method,\n      statusCode\n    });\n  }\n\n  /**\n   * Track session start\n   */\n  trackSessionStart(): void {\n    this.track({\n      eventType: 'session_start',\n      eventName: 'session_started',\n      metadata: {\n        mode: this.getDemoType() || 'production'\n      }\n    });\n  }\n\n  /**\n   * Track session end\n   */\n  trackSessionEnd(reason?: string): void {\n    this.track({\n      eventType: 'session_end',\n      eventName: 'session_ended',\n      metadata: {\n        reason,\n        mode: this.getDemoType() || 'production'\n      }\n    });\n  }\n\n  /**\n   * Track limit reached\n   */\n  trackLimitReached(limitType: 'projects' | 'conversations' | 'messages'): void {\n    this.track({\n      eventType: 'limit_reached',\n      eventName: `${limitType}_limit_reached`,\n      metadata: {\n        limitType\n      }\n    });\n  }\n\n  /**\n   * Track error\n   */\n  trackError(error: string, context?: any): void {\n    this.track({\n      eventType: 'error',\n      eventName: 'error_occurred',\n      metadata: {\n        error,\n        context\n      }\n    });\n  }\n\n  /**\n   * Get deployment mode\n   */\n  private getDeploymentMode(): 'production' | 'demo' {\n    if (typeof window === 'undefined') return 'production';\n    \n    const mode = localStorage.getItem(DEMO_STORAGE_KEYS.DEPLOYMENT_MODE);\n    return mode === 'demo' ? 'demo' : 'production';\n  }\n\n  /**\n   * Get demo type\n   */\n  private getDemoType(): 'free-trial' | 'user-api-key' | 'none' {\n    if (typeof window === 'undefined') return 'none';\n    \n    const deploymentMode = localStorage.getItem(DEMO_STORAGE_KEYS.DEPLOYMENT_MODE);\n    if (deploymentMode !== 'demo') return 'none';\n    \n    const isFreeTrialMode = localStorage.getItem(DEMO_STORAGE_KEYS.FREE_TRIAL_MODE) === 'true';\n    return isFreeTrialMode ? 'free-trial' : 'user-api-key';\n  }\n\n  /**\n   * Get session ID\n   */\n  private getSessionId(): string | undefined {\n    if (typeof window === 'undefined') return undefined;\n    \n    // Try to get from session storage (for free trial)\n    const sessionData = sessionStorage.getItem(DEMO_STORAGE_KEYS.FREE_TRIAL_SESSION);\n    if (sessionData) {\n      try {\n        const session = JSON.parse(sessionData);\n        return session.sessionId;\n      } catch (e) {\n        // Ignore parse errors\n      }\n    }\n    \n    // Try to get from regular demo session\n    const demoSession = sessionStorage.getItem(DEMO_STORAGE_KEYS.DEMO_SESSION);\n    if (demoSession) {\n      try {\n        const session = JSON.parse(demoSession);\n        return session.sessionId;\n      } catch (e) {\n        // Ignore parse errors\n      }\n    }\n    \n    return undefined;\n  }\n\n  /**\n   * Start flush timer\n   */\n  private startFlushTimer(): void {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n    }\n    \n    this.flushTimer = setInterval(() => {\n      if (this.eventQueue.length > 0) {\n        this.flush();\n      }\n    }, this.flushInterval);\n  }\n\n  /**\n   * Flush events to backend\n   */\n  private async flush(): Promise<void> {\n    if (this.eventQueue.length === 0) return;\n    \n    const events = [...this.eventQueue];\n    this.eventQueue = [];\n    \n    try {\n      // If you have a custom analytics endpoint, send the data there\n      if (process.env.NEXT_PUBLIC_ANALYTICS_ENDPOINT) {\n        await fetch(this.analyticsEndpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ events }),\n        });\n      } else {\n        // Otherwise, just log to console for now\n        console.log('[UsageTracker] Analytics events:', events);\n      }\n    } catch (error) {\n      console.error('[UsageTracker] Failed to send analytics:', error);\n      // Re-queue events on failure\n      this.eventQueue.unshift(...events);\n    }\n  }\n\n  /**\n   * Force flush all pending events\n   */\n  async forceFlush(): Promise<void> {\n    await this.flush();\n  }\n}\n\n// Export singleton instance\nexport const usageTracker = UsageTracker.getInstance();\n\n// Add event listeners for automatic tracking\nif (typeof window !== 'undefined') {\n  // Track page visibility changes\n  document.addEventListener('visibilitychange', () => {\n    if (document.hidden) {\n      usageTracker.forceFlush();\n    }\n  });\n  \n  // Track before unload\n  window.addEventListener('beforeunload', () => {\n    usageTracker.forceFlush();\n  });\n}","/**\n * Error Messages for Demo Mode\n */\n\nexport const DEMO_ERROR_MESSAGES = {\n  RATE_LIMIT: {\n    title: 'Rate Limit Reached',\n    message: 'The free trial is experiencing high demand. Please wait a moment and try again.',\n    retryAfter: 60, // seconds\n  },\n  SESSION_EXPIRED: {\n    title: 'Session Expired',\n    message: 'Your free trial session has expired. Please refresh the page to start a new session.',\n  },\n  LIMIT_REACHED: {\n    title: 'Limit Reached',\n    message: 'You have reached the maximum allowed for this free trial session.',\n  },\n  API_ERROR: {\n    title: 'Service Error',\n    message: 'Unable to process your request. Please try again later.',\n  },\n};\n\nexport function getErrorMessage(status: number, isFreeTrialMode: boolean): { title: string; message: string } {\n  if (status === 429 && isFreeTrialMode) {\n    return DEMO_ERROR_MESSAGES.RATE_LIMIT;\n  }\n  \n  if (status === 403 && isFreeTrialMode) {\n    return DEMO_ERROR_MESSAGES.LIMIT_REACHED;\n  }\n  \n  if (status >= 500) {\n    return DEMO_ERROR_MESSAGES.API_ERROR;\n  }\n  \n  return {\n    title: 'Error',\n    message: 'An unexpected error occurred. Please try again.',\n  };\n}","/**\n * Proxy API Client\n * \n * This client communicates with our Next.js API routes which proxy\n * requests to CustomGPT. The API key is stored securely on the server.\n */\n\nimport type {\n  Agent,\n  AgentStats,\n  AgentSettings,\n  Conversation,\n  ChatMessage,\n  Citation,\n  APIResponse,\n  AgentsResponse,\n  ConversationsResponse,\n  MessagesResponse,\n  MessageResponse,\n  CitationResponse,\n  StreamChunk,\n  LimitsResponse,\n  UserProfile,\n  CustomerIntelligenceResponse,\n} from '@/types';\nimport type { APIMessageResponse } from '@/types/message.types';\nimport type { \n  PagesListResponse, \n  DeletePageResponse, \n  ReindexPageResponse, \n  PagesQueryParams,\n  PageMetadata,\n  PageMetadataResponse\n} from '@/types/pages.types';\nimport type { \n  TrafficReportResponse, \n  QueriesReportResponse, \n  ConversationsReportResponse, \n  AnalysisReportResponse,\n  AnalysisInterval\n} from '@/types/reports.types';\nimport type { \n  SourcesListResponse, \n  SourceResponse, \n  DeleteSourceResponse,\n  UpdateSourceSettingsRequest,\n  CreateSitemapSourceRequest\n} from '@/types/sources.types';\nimport { parseStreamChunk, retryWithBackoff } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\nimport { usageTracker } from '@/lib/analytics/usage-tracker';\nimport { getErrorMessage } from '@/lib/constants/error-messages';\n\ninterface UserProfileResponse {\n  status: 'success' | 'error';\n  data: UserProfile;\n}\n\n/**\n * ProxyCustomGPTClient\n * \n * Client that communicates with our server-side proxy endpoints.\n * No API key is needed client-side as it's stored on the server.\n */\nexport class ProxyCustomGPTClient {\n  private baseURL: string = '/api/proxy';\n  private timeout: number = 30000;\n  private abortControllers: Map<string, AbortController> = new Map();\n  private isDemoMode: boolean = false;\n  private demoApiKey: string | null = null;\n\n  constructor() {\n    // Demo mode is determined at runtime from localStorage\n    if (typeof window !== 'undefined') {\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode');\n      this.isDemoMode = deploymentMode === 'demo';\n    }\n    \n    logger.info('PROXY_CLIENT', 'Proxy API Client initialized', {\n      baseURL: this.baseURL,\n      timeout: this.timeout,\n      isDemoMode: this.isDemoMode,\n    });\n  }\n  \n  /**\n   * Set demo mode API key\n   */\n  public setDemoApiKey(apiKey: string | null) {\n    this.demoApiKey = apiKey;\n  }\n\n  /**\n   * Make a request to the proxy API\n   */\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    const requestId = `${options.method || 'GET'}-${endpoint}-${Date.now()}`;\n    \n    logger.apiRequest(endpoint, options.method || 'GET', options.body);\n\n    try {\n      const controller = new AbortController();\n      this.abortControllers.set(requestId, controller);\n\n      const timeoutId = setTimeout(() => {\n        controller.abort();\n      }, this.timeout);\n\n      // Don't set Content-Type for FormData - let browser set it with boundary\n      const isFormData = options.body instanceof FormData;\n      const baseHeaders: Record<string, string> = {\n        ...(options.headers as Record<string, string> || {})\n      };\n      \n      // Add deployment mode header\n      const deploymentMode = typeof window !== 'undefined' \n        ? localStorage.getItem('customgpt.deploymentMode') || 'production'\n        : 'production';\n      baseHeaders['X-Deployment-Mode'] = deploymentMode;\n      \n      // Check if free trial mode\n      const isFreeTrialMode = typeof window !== 'undefined' \n        ? localStorage.getItem('customgpt.freeTrialMode') === 'true'\n        : false;\n      \n      if (isFreeTrialMode) {\n        baseHeaders['X-Free-Trial-Mode'] = 'true';\n        \n        // Add session ID from session storage\n        const sessionData = sessionStorage.getItem('customgpt.freeTrialSession');\n        if (sessionData) {\n          try {\n            const session = JSON.parse(sessionData);\n            if (session.sessionId) {\n              baseHeaders['X-Demo-Session-ID'] = session.sessionId;\n            }\n          } catch (e) {\n            console.error('[ProxyClient] Failed to parse session data:', e);\n          }\n        }\n        \n        console.log('[ProxyClient] Free trial mode - using server-side demo key');\n      } else if (deploymentMode === 'demo' && this.demoApiKey) {\n        // Add demo mode API key if available\n        baseHeaders['X-CustomGPT-API-Key'] = this.demoApiKey;\n        console.log('[ProxyClient] Added demo API key to request headers');\n      } else if (deploymentMode === 'demo' && !this.demoApiKey) {\n        console.warn('[ProxyClient] Demo mode but no API key available for request');\n      }\n      \n      const headers: HeadersInit = isFormData \n        ? baseHeaders\n        : { \n            'Content-Type': 'application/json',\n            ...baseHeaders\n          };\n      \n      const response = await fetch(url, {\n        ...options,\n        headers,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n      this.abortControllers.delete(requestId);\n\n      const responseData = await response.json();\n\n      // Track API call\n      usageTracker.trackApiCall(endpoint, options.method || 'GET', response.status);\n\n      if (!response.ok) {\n        // Track error\n        usageTracker.trackError(`API Error: ${response.status}`, {\n          endpoint,\n          method: options.method || 'GET',\n          error: responseData.error\n        });\n        \n        // Get user-friendly error message for demo mode\n        const isFreeTrialMode = baseHeaders['X-Free-Trial-Mode'] === 'true';\n        const errorInfo = getErrorMessage(response.status, isFreeTrialMode);\n        \n        throw {\n          message: responseData.error || errorInfo.message,\n          status: response.status,\n          data: responseData,\n          title: errorInfo.title,\n          isFreeTrialError: isFreeTrialMode && response.status === 429,\n        };\n      }\n\n      logger.apiResponse(endpoint, response.status, responseData);\n      return responseData;\n    } catch (error: any) {\n      this.abortControllers.delete(requestId);\n      \n      if (error.name === 'AbortError') {\n        logger.apiError(endpoint, { message: 'Request timeout', code: 'TIMEOUT' });\n        throw new Error('Request timeout');\n      }\n\n      logger.apiError(endpoint, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Make a streaming request to the proxy API\n   */\n  private async streamRequest(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ReadableStream<Uint8Array>> {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    logger.apiRequest(endpoint, 'POST-STREAM', options.body);\n\n    // Build headers with demo mode support\n    const baseHeaders: Record<string, string> = {\n      'Content-Type': 'application/json',\n      'Accept': 'text/event-stream',\n      ...(options.headers as Record<string, string> || {})\n    };\n    \n    // Add deployment mode header\n    const deploymentMode = typeof window !== 'undefined' \n      ? localStorage.getItem('customgpt.deploymentMode') || 'production'\n      : 'production';\n    baseHeaders['X-Deployment-Mode'] = deploymentMode;\n    \n    // Check if free trial mode\n    const isFreeTrialMode = typeof window !== 'undefined' \n      ? localStorage.getItem('customgpt.freeTrialMode') === 'true'\n      : false;\n    \n    if (isFreeTrialMode) {\n      baseHeaders['X-Free-Trial-Mode'] = 'true';\n      \n      // Add session ID from session storage\n      const sessionData = sessionStorage.getItem('customgpt.freeTrialSession');\n      if (sessionData) {\n        try {\n          const session = JSON.parse(sessionData);\n          if (session.sessionId) {\n            baseHeaders['X-Demo-Session-ID'] = session.sessionId;\n          }\n        } catch (e) {\n          console.error('[ProxyClient] Failed to parse session data:', e);\n        }\n      }\n      \n      console.log('[ProxyClient] Free trial mode - using server-side demo key for streaming');\n    } else if (deploymentMode === 'demo' && this.demoApiKey) {\n      // Add demo mode API key if available\n      baseHeaders['X-CustomGPT-API-Key'] = this.demoApiKey;\n      console.log('[ProxyClient] Added demo API key to streaming request headers');\n    } else if (deploymentMode === 'demo' && !this.demoApiKey) {\n      console.warn('[ProxyClient] Demo mode but no API key available for streaming request');\n    }\n\n    const response = await fetch(url, {\n      ...options,\n      headers: baseHeaders,\n    });\n\n    if (!response.ok) {\n      let errorMessage = `Stream request failed: ${response.status}`;\n      try {\n        const errorText = await response.text();\n        const errorData = JSON.parse(errorText);\n        errorMessage = errorData.error || errorData.message || errorMessage;\n      } catch {\n        // If not JSON, use the status message\n      }\n      logger.apiError(endpoint, { message: errorMessage, status: response.status });\n      throw new Error(errorMessage);\n    }\n\n    logger.apiResponse(endpoint, response.status, 'Stream started');\n\n    return response.body!;\n  }\n\n  /**\n   * Cancel a specific request\n   */\n  cancelRequest(endpoint: string, method: string = 'GET'): void {\n    const controllers = Array.from(this.abortControllers.entries());\n    controllers.forEach(([key, controller]) => {\n      if (key.includes(`${method}-${endpoint}`)) {\n        controller.abort();\n        this.abortControllers.delete(key);\n      }\n    });\n  }\n\n  /**\n   * Cancel all pending requests\n   */\n  cancelAllRequests(): void {\n    this.abortControllers.forEach(controller => controller.abort());\n    this.abortControllers.clear();\n  }\n\n  // Agent Management\n  async getAgents(params?: {\n    page?: number;\n    per_page?: number;\n  }): Promise<AgentsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async createAgent(data: {\n    project_name: string;\n    sitemap_path?: string;\n    file_upload?: boolean;\n    webpage_url?: string;\n  }): Promise<APIResponse<Agent>> {\n    return this.request('/projects', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}`);\n  }\n\n  async updateAgent(id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }): Promise<APIResponse<Agent>> {\n    // Use FormData for multipart/form-data as specified in OpenAPI\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]) => {\n      if (value !== undefined) {\n        formData.append(key, String(value));\n      }\n    });\n\n    return this.request(`/projects/${id}`, {\n      method: 'POST', // Changed from PUT to POST as per OpenAPI spec\n      body: formData,\n    });\n  }\n\n  async deleteAgent(id: number): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async replicateAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}/replicate`, {\n      method: 'POST',\n    });\n  }\n\n  async getAgentStats(id: number): Promise<APIResponse<AgentStats>> {\n    return this.request(`/projects/${id}/stats`);\n  }\n\n  async getAgentSettings(id: number): Promise<APIResponse<AgentSettings>> {\n    return this.request(`/projects/${id}/settings`);\n  }\n\n  async updateAgentSettings(id: number, settings: Partial<AgentSettings> | FormData): Promise<APIResponse<AgentSettings>> {\n    const isFormData = settings instanceof FormData;\n    return this.request(`/projects/${id}/settings`, {\n      method: 'POST',\n      body: isFormData ? settings : JSON.stringify(settings),\n      headers: isFormData ? {} : { 'Content-Type': 'application/json' },\n    });\n  }\n\n  // Plugin Management\n  async getProjectPlugins(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request(`/projects/${projectId}/plugins`);\n  }\n\n  async updateProjectPlugin(\n    projectId: number,\n    pluginId: string,\n    data: { enabled: boolean }\n  ): Promise<APIResponse<{ updated: boolean }>> {\n    return this.request(`/projects/${projectId}/plugins/${pluginId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  // Conversation Management\n  async getConversations(projectId: number, params?: {\n    page?: number;\n    per_page?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: string;\n    userFilter?: 'all' | string;\n  }): Promise<ConversationsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.orderBy) queryParams.append('orderBy', params.orderBy);\n    if (params?.userFilter) queryParams.append('userFilter', params.userFilter);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async createConversation(projectId: number, data?: { name?: string }): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations`, {\n      method: 'POST',\n      body: JSON.stringify(data || {}),\n    });\n  }\n\n  async updateConversation(\n    projectId: number,\n    sessionId: string,\n    data: { name?: string }\n  ): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteConversation(projectId: number, sessionId: string): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Message Management\n  async getMessages(\n    projectId: number,\n    sessionId: string,\n    params?: {\n      page?: number;\n      per_page?: number;\n    }\n  ): Promise<MessagesResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async sendMessage(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      stream?: boolean;\n      source_ids?: string[];\n      response_source?: string;\n      chatbot_model?: string;\n      custom_persona?: string;\n      agent_capability?: string;\n    }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n\n  async sendMessageStream(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      source_ids?: string[];\n      response_source?: string;\n      chatbot_model?: string;\n      custom_persona?: string;\n      agent_capability?: string;\n    },\n    onChunk: (chunk: StreamChunk) => void,\n    onError?: (error: Error) => void,\n    onComplete?: () => void\n  ): Promise<void> {\n    try {\n      // Try the standard messages endpoint with stream=true parameter\n      const stream = await this.streamRequest(\n        `/projects/${projectId}/conversations/${sessionId}/messages`,\n        {\n          method: 'POST',\n          body: JSON.stringify({ ...data, stream: true }),\n        }\n      );\n\n      const reader = stream.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          onComplete?.();\n          break;\n        }\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const data = line.slice(6);\n              if (data === '[DONE]') {\n                onComplete?.();\n                return;\n              }\n              const chunk = parseStreamChunk(data);\n              if (chunk) {\n                onChunk(chunk);\n              }\n            } catch (e) {\n              console.error('Failed to parse chunk:', e);\n            }\n          }\n        }\n      }\n    } catch (error: any) {\n      onError?.(error);\n      throw error;\n    }\n  }\n\n  async getMessageById(\n    projectId: number,\n    sessionId: string,\n    messageId: number\n  ): Promise<APIMessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}`);\n  }\n\n  async updateMessageFeedback(\n    projectId: number,\n    sessionId: string,\n    messageId: number,\n    feedback: { feedback: 'thumbs_up' | 'thumbs_down' }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}/feedback`, {\n      method: 'PUT',\n      body: JSON.stringify(feedback),\n    });\n  }\n\n  // Citations\n  async getCitation(projectId: number, citationId: number): Promise<CitationResponse> {\n    return this.request(`/projects/${projectId}/citations/${citationId}`);\n  }\n\n  async previewCitationFile(id: string): Promise<any> {\n    return this.request(`/preview/${id}`);\n  }\n\n  // File Upload\n  async uploadFile(projectId: number, file: File, options?: {\n    onProgress?: (progress: number) => void;\n  }): Promise<SourceResponse> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // Use the correct /sources endpoint for file uploads\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  // Reports\n  async getTrafficReport(projectId: number): Promise<TrafficReportResponse> {\n    return this.request(`/projects/${projectId}/reports/traffic`);\n  }\n\n  async getQueriesReport(projectId: number): Promise<QueriesReportResponse> {\n    return this.request(`/projects/${projectId}/reports/queries`);\n  }\n\n  async getConversationsReport(projectId: number): Promise<ConversationsReportResponse> {\n    return this.request(`/projects/${projectId}/reports/conversations`);\n  }\n\n  async getAnalysisReport(projectId: number, interval?: AnalysisInterval): Promise<AnalysisReportResponse> {\n    const queryParams = new URLSearchParams();\n    if (interval) queryParams.append('interval', interval);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/reports/analysis${queryString ? `?${queryString}` : ''}`);\n  }\n\n  // Pages\n  async getPages(\n    projectId: number,\n    params?: PagesQueryParams\n  ): Promise<PagesListResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.crawl_status) queryParams.append('crawl_status', params.crawl_status);\n    if (params?.index_status) queryParams.append('index_status', params.index_status);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/pages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async deletePage(projectId: number, pageId: number): Promise<DeletePageResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async reindexPage(projectId: number, pageId: number): Promise<ReindexPageResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/reindex`, {\n      method: 'POST',\n    });\n  }\n\n  async getPageMetadata(projectId: number, pageId: number): Promise<PageMetadataResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/metadata`);\n  }\n\n  async updatePageMetadata(\n    projectId: number,\n    pageId: number,\n    metadata: Partial<PageMetadata>\n  ): Promise<PageMetadataResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/metadata`, {\n      method: 'PUT',\n      body: JSON.stringify(metadata),\n    });\n  }\n\n  // NOTE: This endpoint is not documented in the API\n  // Commenting out until we confirm it exists\n  // async previewFile(pageId: number): Promise<any> {\n  //   return this.request(`/page_file/${pageId}`);\n  // }\n\n  // Licenses\n  async getLicenses(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request(`/projects/${projectId}/license_keys`);\n  }\n\n  async createLicense(projectId: number, data: { name: string }): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`);\n  }\n\n  async updateLicense(\n    projectId: number,\n    licenseId: string,\n    data: { name?: string; is_active?: boolean }\n  ): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Sources\n  async getSources(projectId: number): Promise<SourcesListResponse> {\n    return this.request(`/projects/${projectId}/sources`);\n  }\n\n  async createSitemapSource(\n    projectId: number,\n    data: CreateSitemapSourceRequest\n  ): Promise<SourceResponse> {\n    // Convert JSON data to FormData as the API expects multipart/form-data\n    const formData = new FormData();\n    formData.append('sitemap_path', data.sitemap_path);\n    if (data.executive_js !== undefined) {\n      formData.append('executive_js', String(data.executive_js));\n    }\n    if (data.data_refresh_frequency !== undefined) {\n      formData.append('data_refresh_frequency', data.data_refresh_frequency);\n    }\n    if (data.create_new_pages !== undefined) {\n      formData.append('create_new_pages', String(data.create_new_pages));\n    }\n    if (data.remove_unexist_pages !== undefined) {\n      formData.append('remove_unexist_pages', String(data.remove_unexist_pages));\n    }\n    if (data.refresh_existing_pages !== undefined) {\n      formData.append('refresh_existing_pages', data.refresh_existing_pages);\n    }\n\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  async uploadFileSource(projectId: number, formData: FormData): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  /**\n   * Update source settings\n   * Updates the settings for an existing source.\n   * API endpoint: PUT /projects/{projectId}/sources/{sourceId}\n   */\n  async updateSourceSettings(\n    projectId: number,\n    sourceId: number,\n    settings: UpdateSourceSettingsRequest\n  ): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'PUT',\n      body: JSON.stringify(settings),\n    });\n  }\n\n  async deleteSource(projectId: number, sourceId: number): Promise<DeleteSourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async instantSyncSource(projectId: number, sourceId: number): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}/instant-sync`, {\n      method: 'PUT',\n    });\n  }\n\n  // Customer Intelligence\n  async getCustomerIntelligence(\n    projectId: number,\n    page: number = 1,\n    limit: number = 100\n  ): Promise<CustomerIntelligenceResponse> {\n    return this.request(`/projects/${projectId}/reports/intelligence?page=${page}&limit=${limit}`);\n  }\n\n  // User\n  async getUserLimits(): Promise<LimitsResponse> {\n    return this.request('/user/limits');\n  }\n\n  async getUserProfile(): Promise<UserProfileResponse> {\n    return this.request('/user');\n  }\n\n  async updateUserProfile(formData: FormData): Promise<UserProfileResponse> {\n    return this.request('/user', {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  // Demo Mode\n  async getDemoUsageStats(): Promise<{\n    status: string;\n    data: {\n      usage: {\n        projects: { used: number; limit: number; remaining: number };\n        conversations: { used: number; limit: number; remaining: number };\n        messages: { total: number; limitPerConversation: number; byConversation: Record<string, number> };\n      };\n      session: {\n        sessionId: string;\n        startTime: number;\n        expiresAt: number;\n        remainingTime: number;\n      };\n    };\n  }> {\n    // Add session start time header\n    const sessionData = sessionStorage.getItem('customgpt.freeTrialSession');\n    let startTime = Date.now();\n    \n    if (sessionData) {\n      try {\n        const session = JSON.parse(sessionData);\n        startTime = session.startTime || Date.now();\n      } catch (e) {\n        console.error('[ProxyClient] Failed to parse session data:', e);\n      }\n    }\n    \n    return this.request('/demo/usage', {\n      headers: {\n        'X-Session-Start-Time': startTime.toString()\n      }\n    });\n  }\n  \n  async cleanupDemoSession(): Promise<{\n    status: string;\n    data: {\n      sessionId: string;\n      totalResources: number;\n      successCount: number;\n      failureCount: number;\n      results: Array<{\n        success: boolean;\n        resourceId: string;\n        resourceType: string;\n        error?: string;\n      }>;\n    };\n  }> {\n    return this.request('/demo/cleanup', {\n      method: 'POST'\n    });\n  }\n}\n\n// Export singleton instance\nexport const proxyClient = new ProxyCustomGPTClient();","/**\n * CustomGPT API Client\n * \n * This file now uses the proxy client that communicates with our Next.js API routes.\n * The API key is stored securely on the server and never exposed to the client.\n * \n * Migration from direct API calls to proxy:\n * - All API calls now go through /api/proxy/* endpoints\n * - No API key is needed or stored client-side\n * - Server handles authentication with CustomGPT\n */\n\n// Re-export everything from the proxy client\nexport { proxyClient as apiClient } from './proxy-client';\nexport type { ProxyCustomGPTClient as CustomGPTClient } from './proxy-client';\n\n// Export a singleton instance getter\nimport { proxyClient } from './proxy-client';\n\nlet initialized = false;\n\n/**\n * Initialize the API client\n * No longer needs API key as it's handled server-side\n */\nexport function initializeClient(config?: any): void {\n  // Mark as initialized without needing API key\n  initialized = true;\n}\n\n/**\n * Get the API client instance\n */\nexport function getClient() {\n  return proxyClient;\n}\n\n/**\n * Check if client is initialized\n */\nexport function isClientInitialized(): boolean {\n  // Always return true since proxy client doesn't need initialization\n  return true;\n}","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConversationStore, Conversation } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateConversationName } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n// Session-based conversation isolation\nconst getSessionId = (): string => {\n  // Check if we're running on the server\n  if (typeof window === 'undefined') {\n    return 'server-session';\n  }\n  \n  // Use the current widget session if available\n  if ((window as any).__customgpt_current_session) {\n    return (window as any).__customgpt_current_session;\n  }\n  \n  // Check if we're in widget mode with session configuration\n  if ((window as any).__customgpt_session) {\n    return (window as any).__customgpt_session.sessionId;\n  }\n  \n  // Check for instance-specific sessions (for isolated widgets)\n  if ((window as any).__customgpt_sessions) {\n    // For isolated widgets, we need to determine which session to use\n    // This is tricky since stores are global - we'll use the most recent session\n    const sessions = (window as any).__customgpt_sessions;\n    const sessionIds = Object.keys(sessions);\n    if (sessionIds.length > 0) {\n      // Return the most recently created session\n      return sessionIds[sessionIds.length - 1];\n    }\n  }\n  \n  // Fallback to browser-based session ID\n  try {\n    let sessionId = sessionStorage.getItem('customgpt_session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      sessionStorage.setItem('customgpt_session_id', sessionId);\n    }\n    return sessionId;\n  } catch (e) {\n    // Fallback if sessionStorage is not available\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n};\n\nexport const useConversationStore = create<ConversationStore>()(\n  persist(\n    (set, get) => ({\n      conversations: [],\n      currentConversation: null,\n      loading: false,\n      error: null,\n      // Pagination state\n      currentPage: 1,\n      totalPages: 1,\n      totalConversations: 0,\n      perPage: 20,\n      // Sorting and filtering state\n      sortOrder: 'desc' as const,\n      sortBy: 'id',\n      userFilter: 'all' as const,\n\n      fetchConversations: async (projectId: number, params?: {\n        page?: number;\n        per_page?: number;\n        order?: 'asc' | 'desc';\n        orderBy?: string;\n        userFilter?: 'all' | string;\n        searchQuery?: string;\n        searchMode?: 'name' | 'id' | 'session';\n        dateFilter?: 'today' | 'week' | 'month';\n      }) => {\n        logger.info('CONVERSATIONS', 'Fetching conversations', { projectId, params });\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          // Merge params with current state\n          const queryParams = {\n            page: params?.page ?? get().currentPage,\n            per_page: params?.per_page ?? get().perPage,\n            order: params?.order ?? get().sortOrder,\n            orderBy: params?.orderBy ?? get().sortBy,\n            userFilter: params?.userFilter ?? get().userFilter,\n            searchQuery: params?.searchQuery,\n            searchMode: params?.searchMode,\n            dateFilter: params?.dateFilter,\n          };\n          \n          const response = await client.getConversations(projectId, queryParams);\n          logger.info('CONVERSATIONS', 'API response received', { \n            projectId,\n            responseType: typeof response,\n            hasData: !!(response as any)?.data,\n            dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n          });\n          \n          // Handle different response formats\n          let conversations = [];\n          let paginationData = null;\n          \n          if (response && typeof response === 'object') {\n            // Standard paginated response format\n            if ((response as any).data && (response as any).data.data) {\n              conversations = (response as any).data.data;\n              paginationData = (response as any).data;\n            } else if (Array.isArray((response as any).data)) {\n              conversations = (response as any).data;\n            } else if (Array.isArray(response)) {\n              conversations = response;\n            }\n          }\n          \n          logger.info('CONVERSATIONS', 'Processed conversations', {\n            count: conversations.length,\n            paginationData,\n            conversations: conversations.map((c: any) => ({ \n              id: c.id, \n              name: c.name,\n              messagesCount: c.messages?.length || 0 \n            }))\n          });\n          \n          // Update state with conversations and pagination data\n          set({ \n            conversations, \n            loading: false,\n            // Update pagination state if available\n            currentPage: paginationData?.current_page ?? 1,\n            totalPages: paginationData?.last_page ?? 1,\n            totalConversations: paginationData?.total ?? conversations.length,\n            // Update sorting/filtering if params were provided\n            ...(params?.order && { sortOrder: params.order }),\n            ...(params?.orderBy && { sortBy: params.orderBy }),\n            ...(params?.userFilter && { userFilter: params.userFilter }),\n          });\n        } catch (error) {\n          logger.error('CONVERSATIONS', 'Failed to fetch conversations', error, {\n            projectId,\n            errorType: error instanceof Error ? error.constructor.name : typeof error,\n            status: (error as any)?.status,\n            message: (error as any)?.message\n          });\n          // Don't clear existing conversations on error - preserve local state\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to fetch conversations',\n            loading: false,\n            // Keep existing conversations instead of clearing them\n          });\n        }\n      },\n\n      createConversation: async (projectId: number, name?: string) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createConversation(projectId, name ? { name } : undefined);\n          const newConversation = response.data;\n          \n          set(state => ({ \n            conversations: [newConversation, ...state.conversations],\n            currentConversation: newConversation,\n            loading: false,\n          }));\n        } catch (error) {\n          console.error('Failed to create conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      selectConversation: (conversation: Conversation | null) => {\n        set({ currentConversation: conversation });\n      },\n\n      deleteConversation: async (conversationId: string | number) => {\n        const { conversations, currentConversation } = get();\n        const conversation = conversations.find(c => c.id.toString() === conversationId.toString());\n        \n        if (!conversation) return;\n\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteConversation(conversation.project_id, conversation.session_id);\n          \n          const updatedConversations = conversations.filter(c => c.id.toString() !== conversationId.toString());\n          \n          set({ \n            conversations: updatedConversations,\n            currentConversation: currentConversation?.id.toString() === conversationId.toString() \n              ? (updatedConversations.length > 0 ? updatedConversations[0] : null)\n              : currentConversation,\n            loading: false,\n          });\n        } catch (error) {\n          console.error('Failed to delete conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      updateConversation: async (conversationId: number, sessionId: string, data: { name: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateConversation(conversationId, sessionId, data);\n          const updatedConversation = response.data;\n          \n          set(state => ({ \n            conversations: state.conversations.map(c => \n              c.id === conversationId ? updatedConversation : c\n            ),\n            currentConversation: state.currentConversation?.id === conversationId \n              ? updatedConversation \n              : state.currentConversation,\n            loading: false,\n          }));\n        } catch (error) {\n          console.error('Failed to update conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      // Auto-create conversation if none exists\n      ensureConversation: async (projectId: number, firstMessage?: string) => {\n        const { currentConversation } = get();\n        \n        // If we have a current conversation for this project, use it\n        if (currentConversation && currentConversation.project_id === projectId) {\n          return currentConversation;\n        }\n        \n        // If no current conversation, always create a new one\n        // This ensures that seeing the welcome screen (currentConversation = null) \n        // always results in starting a fresh conversation\n        const name = firstMessage \n          ? generateConversationName(firstMessage)\n          : `Chat ${new Date().toLocaleDateString()}`;\n          \n        await get().createConversation(projectId, name);\n        return get().currentConversation!;\n      },\n    }),\n    {\n      name: `customgpt-conversations-${getSessionId()}`,\n      partialize: (state) => ({\n        conversations: state.conversations,\n        // Don't persist currentConversation to always start fresh\n      }),\n      onRehydrateStorage: () => (state) => {\n        if (state) {\n          // Ensure conversations is an array\n          if (!Array.isArray(state.conversations)) {\n            state.conversations = [];\n          }\n          \n          // Clear current conversation on fresh app load to start with welcome screen\n          state.currentConversation = null;\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { AgentSettings } from '@/types';\n\ninterface ChatSettingsState {\n  // Current chat settings per agent\n  settings: Record<number, Partial<AgentSettings>>;\n  \n  // Get settings for a specific agent\n  getSettings: (agentId: number) => Partial<AgentSettings>;\n  \n  // Update settings for a specific agent\n  updateSettings: (agentId: number, updates: Partial<AgentSettings>) => void;\n  \n  // Clear settings for an agent\n  clearSettings: (agentId: number) => void;\n}\n\nexport const useChatSettingsStore = create<ChatSettingsState>()(\n  persist(\n    (set, get) => ({\n      settings: {},\n\n      getSettings: (agentId: number) => {\n        const settings = get().settings[agentId] || {};\n        return {\n          response_source: settings.response_source || 'own_content',\n          chatbot_model: settings.chatbot_model || 'gpt-4-o',\n          custom_persona: settings.custom_persona || 'professional',\n          agent_capability: settings.agent_capability || 'optimal-choice',\n          ...settings,\n        };\n      },\n\n      updateSettings: (agentId: number, updates: Partial<AgentSettings>) => {\n        set((state) => ({\n          settings: {\n            ...state.settings,\n            [agentId]: {\n              ...state.settings[agentId],\n              ...updates,\n            },\n          },\n        }));\n      },\n\n      clearSettings: (agentId: number) => {\n        set((state) => {\n          const newSettings = { ...state.settings };\n          delete newSettings[agentId];\n          return { settings: newSettings };\n        });\n      },\n    }),\n    {\n      name: 'customgpt-chat-settings',\n    }\n  )\n);","import type { StreamChunk, Citation, StreamCallbacks, StreamHandlerConfig } from '@/types';\nimport { parseStreamChunk } from '@/lib/utils';\n\nexport interface StreamMessage {\n  id: string;\n  content: string;\n  citations: Citation[];\n  isComplete: boolean;\n}\n\nexport class StreamHandler {\n  private config: Required<StreamHandlerConfig>;\n  private abortController: AbortController | null = null;\n  private currentMessage: StreamMessage | null = null;\n\n  constructor(config: StreamHandlerConfig = {}) {\n    this.config = {\n      timeout: config.timeout || 60000,\n      retryAttempts: config.retryAttempts || 3,\n      retryDelay: config.retryDelay || 1000,\n    };\n  }\n\n  /**\n   * Process a streaming response\n   */\n  async processStream(\n    stream: ReadableStream,\n    callbacks: StreamCallbacks\n  ): Promise<StreamMessage> {\n    this.abortController = new AbortController();\n    this.currentMessage = {\n      id: this.generateId(),\n      content: '',\n      citations: [],\n      isComplete: false,\n    };\n\n    const reader = stream.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    // Set timeout\n    const timeoutId = setTimeout(() => {\n      this.cancel();\n      callbacks.onError?.(new Error('Stream timeout'));\n    }, this.config.timeout);\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) {\n          this.currentMessage.isComplete = true;\n          callbacks.onComplete?.();\n          break;\n        }\n\n        // Decode chunk and add to buffer\n        buffer += decoder.decode(value, { stream: true });\n        \n        // Process complete lines\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n        for (const line of lines) {\n          if (line.trim()) {\n            await this.processLine(line, callbacks);\n          }\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        callbacks.onError?.(new Error('Stream cancelled'));\n      } else {\n        callbacks.onError?.(error instanceof Error ? error : new Error('Unknown streaming error'));\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      reader.releaseLock();\n      this.abortController = null;\n    }\n\n    return this.currentMessage;\n  }\n\n  /**\n   * Process a single line from the stream\n   */\n  private async processLine(line: string, callbacks: StreamCallbacks): Promise<void> {\n    const chunk = parseStreamChunk(line);\n    \n    if (!chunk || !this.currentMessage) return;\n\n    switch (chunk.type) {\n      case 'content':\n        if (chunk.content) {\n          this.currentMessage.content += chunk.content;\n          callbacks.onChunk?.(chunk.content);\n        }\n        break;\n\n      case 'citation':\n        if (chunk.citations) {\n          this.currentMessage.citations.push(...chunk.citations);\n          chunk.citations.forEach((citation: Citation) => {\n            callbacks.onCitation?.(citation);\n          });\n        }\n        break;\n\n      case 'done':\n        this.currentMessage.isComplete = true;\n        callbacks.onComplete?.();\n        return;\n\n      case 'error':\n        callbacks.onError?.(new Error(chunk.error || 'Stream error'));\n        return;\n\n      default:\n        // Handle unknown chunk types gracefully\n        console.warn('Unknown stream chunk type:', chunk.type);\n    }\n  }\n\n  /**\n   * Cancel the current stream\n   */\n  cancel(): void {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n  }\n\n  /**\n   * Get current message state\n   */\n  getCurrentMessage(): StreamMessage | null {\n    return this.currentMessage;\n  }\n\n  /**\n   * Check if streaming is active\n   */\n  isStreaming(): boolean {\n    return this.abortController !== null && this.currentMessage !== null && !this.currentMessage.isComplete;\n  }\n\n  private generateId(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n}\n\n/**\n * Utility class for managing multiple concurrent streams\n */\nexport class StreamManager {\n  private streams: Map<string, StreamHandler> = new Map();\n  private maxConcurrentStreams: number;\n\n  constructor(maxConcurrentStreams: number = 3) {\n    this.maxConcurrentStreams = maxConcurrentStreams;\n  }\n\n  /**\n   * Start a new stream\n   */\n  async startStream(\n    streamId: string,\n    stream: ReadableStream,\n    callbacks: StreamCallbacks,\n    config?: StreamHandlerConfig\n  ): Promise<StreamMessage> {\n    // Check if we're at the concurrent limit\n    if (this.streams.size >= this.maxConcurrentStreams) {\n      throw new Error(`Maximum concurrent streams (${this.maxConcurrentStreams}) reached`);\n    }\n\n    // Cancel existing stream with same ID if it exists\n    if (this.streams.has(streamId)) {\n      this.cancelStream(streamId);\n    }\n\n    const handler = new StreamHandler(config);\n    this.streams.set(streamId, handler);\n\n    try {\n      const result = await handler.processStream(stream, {\n        ...callbacks,\n        onComplete: () => {\n          this.streams.delete(streamId);\n          callbacks.onComplete?.();\n        },\n        onError: (error) => {\n          this.streams.delete(streamId);\n          callbacks.onError?.(error);\n        },\n      });\n\n      return result;\n    } catch (error) {\n      this.streams.delete(streamId);\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel a specific stream\n   */\n  cancelStream(streamId: string): void {\n    const handler = this.streams.get(streamId);\n    if (handler) {\n      handler.cancel();\n      this.streams.delete(streamId);\n    }\n  }\n\n  /**\n   * Cancel all active streams\n   */\n  cancelAllStreams(): void {\n    this.streams.forEach(handler => handler.cancel());\n    this.streams.clear();\n  }\n\n  /**\n   * Get active stream IDs\n   */\n  getActiveStreams(): string[] {\n    return Array.from(this.streams.keys());\n  }\n\n  /**\n   * Get stream status\n   */\n  getStreamStatus(streamId: string): {\n    exists: boolean;\n    isStreaming: boolean;\n    message: StreamMessage | null;\n  } {\n    const handler = this.streams.get(streamId);\n    \n    if (!handler) {\n      return { exists: false, isStreaming: false, message: null };\n    }\n\n    return {\n      exists: true,\n      isStreaming: handler.isStreaming(),\n      message: handler.getCurrentMessage(),\n    };\n  }\n\n  /**\n   * Get number of active streams\n   */\n  getActiveStreamCount(): number {\n    return this.streams.size;\n  }\n}\n\n/**\n * Parse Server-Sent Events (SSE) data\n */\nexport function parseSSEData(data: string): any | null {\n  try {\n    if (data === '[DONE]') {\n      return { type: 'done' };\n    }\n    \n    const parsed = JSON.parse(data);\n    \n    // Handle different response formats\n    if (parsed.choices && parsed.choices[0]) {\n      const choice = parsed.choices[0];\n      \n      if (choice.delta && choice.delta.content) {\n        return {\n          type: 'content',\n          content: choice.delta.content,\n        };\n      }\n      \n      if (choice.message && choice.message.content) {\n        return {\n          type: 'content',\n          content: choice.message.content,\n        };\n      }\n    }\n    \n    // Handle CustomGPT format\n    if (parsed.content) {\n      return {\n        type: 'content',\n        content: parsed.content,\n        citations: parsed.citations || [],\n      };\n    }\n    \n    return parsed;\n  } catch (error) {\n    console.error('Failed to parse SSE data:', error);\n    return null;\n  }\n}\n\n\n/**\n * Validate stream format\n */\nexport function validateStreamChunk(chunk: any): boolean {\n  if (!chunk || typeof chunk !== 'object') {\n    return false;\n  }\n\n  // Must have a type\n  if (!chunk.type || typeof chunk.type !== 'string') {\n    return false;\n  }\n\n  // Validate specific types\n  switch (chunk.type) {\n    case 'content':\n      return typeof chunk.content === 'string';\n    \n    case 'citation':\n      return Array.isArray(chunk.citations);\n    \n    case 'done':\n    case 'error':\n      return true;\n    \n    default:\n      return false;\n  }\n}\n\n// Global stream manager instance\nexport const globalStreamManager = new StreamManager();","/**\n * Message Store - Core Chat Functionality\n * \n * This store manages all message-related state and operations.\n * It's the heart of the chat system, handling:\n * - Message sending and receiving\n * - Real-time streaming responses\n * - Message history management\n * - Local storage fallback\n * - Error handling and retries\n * \n * Architecture:\n * - Uses Map for efficient conversation-based message storage\n * - Integrates with agent and conversation stores\n * - Handles both streaming and non-streaming API responses\n * - Provides local storage backup for offline access\n * \n * Key Features:\n * - Automatic conversation creation if needed\n * - Streaming with fallback to non-streaming\n * - Optimistic UI updates\n * - Message feedback tracking\n * - File upload support\n * \n * Features:\n * - Real-time streaming with local storage persistence\n * - Robust error handling with graceful fallbacks\n * - Comprehensive logging and debugging support\n * - Optimistic UI updates with consistent message ordering\n */\n\nimport { create } from 'zustand';\nimport type { MessageStore, ChatMessage, Citation, FeedbackType, MessageDetails, MessageMetadata } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useAgentStore } from './agents';\nimport { useConversationStore } from './conversations';\nimport { useChatSettingsStore } from './chat-settings';\nimport { generateId } from '@/lib/utils';\nimport { globalStreamManager } from '@/lib/streaming/handler';\nimport { logger } from '@/lib/logger';\nimport { toast } from 'sonner';\n\n/**\n * Local storage configuration\n * Provides offline access and caching for better UX\n */\nconst MESSAGES_STORAGE_KEY = 'customgpt-messages-cache';\n\n/**\n * Save messages to local storage\n * Provides a fallback when API is unavailable\n * @param conversationId - The conversation to save messages for\n * @param messages - Array of messages to save\n */\nfunction saveMessagesToStorage(conversationId: string, messages: ChatMessage[]) {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    const cache = stored ? JSON.parse(stored) : {};\n    cache[conversationId] = messages;\n    localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n  } catch (error) {\n    // Silent fail - storage is optional\n  }\n}\n\n/**\n * Load messages from local storage\n * Used as fallback when API is unavailable\n * @param conversationId - The conversation to load messages for\n * @returns Array of messages or null if not found\n */\nfunction loadMessagesFromStorage(conversationId: string): ChatMessage[] | null {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    if (!stored) return null;\n    const cache = JSON.parse(stored);\n    return cache[conversationId] || null;\n  } catch (error) {\n    // Silent fail - storage is optional\n    return null;\n  }\n}\n\n/**\n * Fetch citation details by IDs\n * \n * Converts citation IDs to full citation objects with title, source, content\n * \n * @param citationIds - Array of citation IDs\n * @param projectId - The project/agent ID\n * @returns Array of citation objects with details\n */\n/**\n * Validate and filter citation IDs\n * \n * @param citationIds - Raw citation IDs from API\n * @returns Filtered array of valid citation IDs\n */\nfunction validateCitationIds(citationIds: any[]): number[] {\n  if (!Array.isArray(citationIds)) {\n    logger.warn('MESSAGES', 'Citation IDs is not an array', { citationIds });\n    return [];\n  }\n  \n  const validIds = citationIds\n    .filter(id => typeof id === 'number' && !isNaN(id) && id > 0)\n    .filter((id, index, arr) => arr.indexOf(id) === index); // Remove duplicates\n  \n  if (validIds.length !== citationIds.length) {\n    logger.warn('MESSAGES', 'Filtered out invalid citation IDs', {\n      original: citationIds,\n      valid: validIds,\n      filtered: citationIds.length - validIds.length\n    });\n  }\n  \n  return validIds;\n}\n\nasync function fetchCitationDetails(citationIds: number[], projectId: number): Promise<Citation[]> {\n  // Validate input citation IDs\n  const validCitationIds = validateCitationIds(citationIds);\n  \n  if (validCitationIds.length === 0) {\n    logger.warn('MESSAGES', 'No valid citation IDs to fetch', { citationIds });\n    return [];\n  }\n  \n  logger.info('MESSAGES', 'Fetching citation details', {\n    projectId,\n    citationIds: validCitationIds,\n    count: validCitationIds.length\n  });\n  \n  const client = getClient();\n  const citations: Citation[] = [];\n  \n  for (let i = 0; i < validCitationIds.length; i++) {\n    const citationId = validCitationIds[i];\n    \n    try {\n      const response = await client.getCitation(projectId, citationId);\n      \n      if (response.data) {\n        const citation = {\n          id: citationId.toString(), // Convert to string as per Citation interface\n          index: i + 1, // 1-based index for display\n          title: response.data.title || `Citation ${i + 1}`,\n          source: response.data.url,\n          url: response.data.url,\n          content: response.data.description || '',\n        };\n        citations.push(citation);\n        \n        logger.info('MESSAGES', 'Citation fetched successfully', {\n          citationId,\n          title: citation.title,\n          hasContent: !!citation.content,\n          hasUrl: !!citation.url\n        });\n      } else {\n        logger.warn('MESSAGES', 'Citation API returned empty data', {\n          citationId,\n          response\n        });\n      }\n    } catch (error) {\n      logger.warn('MESSAGES', 'Failed to fetch citation details', {\n        citationId,\n        projectId,\n        error: error instanceof Error ? error.message : String(error),\n        errorType: error instanceof Error ? error.constructor.name : typeof error\n      });\n      // Only create fallback citations for actual errors, not empty responses\n      // This reduces wrong citations from appearing\n      if (error instanceof Error && error.message.includes('404')) {\n        logger.info('MESSAGES', 'Citation not found, skipping fallback', { citationId });\n        // Skip creating fallback for 404 errors - citation simply doesn't exist\n        continue;\n      } else {\n        // Create fallback only for network/server errors\n        citations.push({\n          id: citationId.toString(), // Convert to string\n          index: i + 1,\n          title: `Citation ${i + 1}`,\n          source: '',\n          url: '',\n          content: 'Citation details unavailable',\n        });\n      }\n    }\n  }\n  \n  logger.info('MESSAGES', 'Citation fetching completed', {\n    requested: validCitationIds.length,\n    fetched: citations.length,\n    success: citations.filter(c => c.content !== 'Citation details unavailable').length\n  });\n  \n  return citations;\n}\n\n/**\n * Message Store Implementation\n * \n * State Structure:\n * - messages: Map<conversationId, ChatMessage[]> - All messages grouped by conversation\n * - streamingMessage: Current message being streamed (null when not streaming)\n * - isStreaming: Whether a message is currently being streamed\n * - loading: General loading state for message operations\n * - error: Current error message if any\n */\nexport const useMessageStore = create<MessageStore>((set, get) => ({\n  // Initialize with empty state\n  messages: new Map(),\n  streamingMessage: null,\n  isStreaming: false,\n  loading: false,\n  error: null,\n\n  /**\n   * Send a message to the current agent\n   * \n   * Flow:\n   * 1. Validate agent selection\n   * 2. Ensure conversation exists (create if needed)\n   * 3. Create and add user message (optimistic update)\n   * 4. Upload files if present\n   * 5. Start streaming response\n   * 6. Fall back to non-streaming if streaming fails\n   * 7. Handle errors gracefully\n   * \n   * \n   * @param content - Message text\n   * @param files - Optional file attachments\n   */\n  sendMessage: async (content: string, files?: File[]) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    if (!currentAgent) {\n      logger.error('MESSAGES', 'No agent selected when trying to send message');\n      \n      // Check if this is due to missing API keys\n      const response = await fetch('/api/proxy/user/limits').catch(() => null);\n      if (!response || response.status === 401 || response.status === 500) {\n        throw new Error('API key not configured. Please add CUSTOMGPT_API_KEY to your .env.local file and restart the server.');\n      }\n      \n      throw new Error('No agent selected. Please select or create an agent first.');\n    }\n\n    logger.info('MESSAGES', 'Sending message', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name,\n      messageLength: content.length,\n      hasFiles: files && files.length > 0\n    });\n\n    // Ensure we have a conversation\n    const conversation = await conversationStore.ensureConversation(\n      currentAgent.id,\n      content\n    );\n\n    logger.info('MESSAGES', 'Conversation ensured', {\n      conversationId: conversation.id,\n      sessionId: conversation.session_id,\n      hasSessionId: !!conversation.session_id,\n      isNew: !conversation.message_count || conversation.message_count === 0\n    });\n\n    if (!conversation.session_id) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversation });\n      throw new Error('Conversation missing session_id');\n    }\n\n    set({ loading: true, error: null });\n\n    // Create user message\n    const userMessage: ChatMessage = {\n      id: generateId(),\n      role: 'user',\n      content,\n      timestamp: new Date().toISOString(),\n      status: 'sending',\n    };\n\n    // Add user message to store\n    get().addMessage(conversation.id.toString(), userMessage);\n\n    // Create assistant message placeholder\n    const assistantMessage: ChatMessage = {\n      id: generateId(),\n      role: 'assistant',\n      content: '',\n      timestamp: new Date().toISOString(),\n      citations: [],\n    };\n\n    set({ \n      streamingMessage: assistantMessage,\n      isStreaming: true,\n      loading: false,\n    });\n\n    try {\n      // Handle file uploads if present\n      let sourceIds: string[] = [];\n      if (files && files.length > 0) {\n        const client = getClient();\n        const uploadResponses = await Promise.all(\n          files.map(file => client.uploadFile(currentAgent.id, file))\n        );\n        \n        // Extract source IDs from upload responses\n        sourceIds = uploadResponses\n          .filter(response => response?.data?.id)\n          .map(response => response.data.id.toString());\n          \n        logger.info('MESSAGES', 'Files uploaded successfully', {\n          fileCount: files.length,\n          sourceIds: sourceIds\n        });\n      }\n\n      // Update user message status\n      userMessage.status = 'sent';\n      get().addMessage(conversation.id.toString(), userMessage);\n\n      // Start streaming with correct parameters\n      const client = getClient();\n      \n      logger.info('MESSAGES', 'Starting message stream', {\n        agentId: currentAgent.id,\n        sessionId: conversation.session_id,\n        messageContent: content.substring(0, 50),\n        hasSourceIds: sourceIds.length > 0,\n        sourceIds: sourceIds\n      });\n      \n      try {\n        // Get chat settings for current agent\n        const chatSettings = useChatSettingsStore.getState().getSettings(currentAgent.id);\n        \n        // Prepare the request data - only send fields that the API accepts\n        const requestData: { \n          prompt: string; \n          source_ids?: string[];\n          response_source?: string;\n        } = { \n          prompt: content || '', // Ensure we always have a prompt, even if empty\n          response_source: chatSettings.response_source || 'default',\n        };\n        \n        // Add source_ids if we have uploaded files\n        if (sourceIds.length > 0) {\n          requestData.source_ids = sourceIds;\n          \n          // If no text prompt was provided, add a default prompt for file analysis\n          if (!content.trim()) {\n            requestData.prompt = 'Please analyze the uploaded file(s).';\n          }\n        }\n        \n        await client.sendMessageStream(\n          currentAgent.id,\n          conversation.session_id,  // Use session_id instead of id\n          requestData,\n          (chunk) => {\n              logger.info('MESSAGES', 'Received stream chunk', { \n                type: chunk.type, \n                hasContent: !!chunk.content,\n                contentLength: chunk.content?.length,\n                contentPreview: chunk.content?.substring(0, 50)\n              });\n              \n              if (chunk.type === 'content' && chunk.content) {\n                get().updateStreamingMessage(chunk.content, chunk.citations);\n              } else if (chunk.type === 'citation' && chunk.citations) {\n                // Handle citation-only chunks\n                const current = get().streamingMessage;\n                if (current && chunk.citations && Array.isArray(chunk.citations)) {\n                  // Check if citations are IDs or objects\n                  if (chunk.citations.length > 0 && typeof chunk.citations[0] === 'number') {\n                    // Fetch citation details asynchronously\n                    fetchCitationDetails(chunk.citations as any as number[], currentAgent.id).then(citationDetails => {\n                      const updatedCurrent = get().streamingMessage;\n                      if (updatedCurrent) {\n                        set({\n                          streamingMessage: {\n                            ...updatedCurrent,\n                            citations: citationDetails\n                          }\n                        });\n                      }\n                    });\n                  } else {\n                    // Citations might already be objects\n                    set({\n                      streamingMessage: {\n                        ...current,\n                        citations: chunk.citations\n                      }\n                    });\n                  }\n                }\n              }\n            },\n            async (streamError) => {\n              logger.error('MESSAGES', 'Streaming failed, attempting fallback to non-streaming', streamError, {\n                errorMessage: streamError.message,\n                agentId: currentAgent.id,\n                sessionId: conversation.session_id\n              });\n              \n              // Try fallback to non-streaming API\n              try {\n                logger.info('MESSAGES', 'Using non-streaming fallback');\n                \n                const response = await client.sendMessage(\n                  currentAgent.id,\n                  conversation.session_id,\n                  { \n                    prompt: requestData.prompt,\n                    stream: false,\n                    source_ids: requestData.source_ids\n                  }\n                );\n                \n                // Update streaming message with the complete response\n                const finalMessage = get().streamingMessage;\n                if (finalMessage && response) {\n                  // Handle different response formats from API\n                  let messageData: any;\n                  if (response.data) {\n                    messageData = response.data;\n                  } else {\n                    // Direct response format - cast to any to handle the actual API structure\n                    messageData = response as any;\n                  }\n                  \n                  finalMessage.content = messageData?.openai_response || messageData?.content || 'No response received';\n                  \n                  // Fetch citation details if needed\n                  if (messageData?.citations && Array.isArray(messageData.citations) && messageData.citations.length > 0) {\n                    if (typeof messageData.citations[0] === 'number') {\n                      // Citations are IDs, fetch details\n                      finalMessage.citations = await fetchCitationDetails(messageData.citations, currentAgent.id);\n                    } else {\n                      // Citations might already be objects\n                      finalMessage.citations = messageData.citations;\n                    }\n                  } else {\n                    finalMessage.citations = [];\n                  }\n                  \n                  finalMessage.status = 'sent';\n                  \n                  // Update the message ID to include the prompt ID if available\n                  if (messageData?.id) {\n                    finalMessage.id = `${messageData.id}-assistant`;\n                    // Also update the user message ID\n                    const conversationMessages = get().messages.get(conversation.id.toString()) || [];\n                    const lastUserMessage = conversationMessages.filter(m => m.role === 'user').pop();\n                    if (lastUserMessage && lastUserMessage.id === userMessage.id) {\n                      lastUserMessage.id = `${messageData.id}-user`;\n                      get().addMessage(conversation.id.toString(), lastUserMessage);\n                    }\n                  }\n                  \n                  // Add details from the API response\n                  finalMessage.details = {\n                    user_id: messageData?.user_id,\n                    conversation_id: messageData?.conversation_id,\n                    updated_at: messageData?.updated_at,\n                    prompt_id: messageData?.id,\n                    metadata: messageData?.metadata ? {\n                      user_ip: messageData.metadata.user_ip,\n                      user_agent: messageData.metadata.user_agent,\n                      external_id: messageData.metadata.external_id,\n                      request_source: messageData.metadata.request_source,\n                    } : undefined,\n                  };\n                  get().addMessage(conversation.id.toString(), finalMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                logger.info('MESSAGES', 'Fallback to non-streaming successful');\n                \n              } catch (fallbackError: any) {\n                logger.error('MESSAGES', 'Both streaming and non-streaming failed', fallbackError);\n                \n                // Update assistant message with error\n                const errorMessage = get().streamingMessage;\n                if (errorMessage) {\n                  errorMessage.content = 'Sorry, I encountered an error while processing your message. Please try again.';\n                  errorMessage.status = 'error';\n                  get().addMessage(conversation.id.toString(), errorMessage);\n                }\n                \n                // Extract error details including status code\n                let errorText = 'Communication error';\n                if (fallbackError.status) {\n                  switch (fallbackError.status) {\n                    case 429:\n                      errorText = 'You have exhausted your current query credits. Please contact customer service for assistance.';\n                      break;\n                    case 401:\n                      errorText = 'API Token is either missing or invalid';\n                      break;\n                    case 404:\n                      errorText = 'Agent or conversation not found';\n                      break;\n                    case 400:\n                      errorText = 'Invalid request format';\n                      break;\n                    default:\n                      errorText = fallbackError.message || `Error ${fallbackError.status}`;\n                  }\n                } else if (fallbackError.message) {\n                  errorText = fallbackError.message;\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                  error: errorText,\n                });\n              }\n            },\n            async () => {\n              // onComplete callback - enrich streaming message with API data\n              const finalMessage = get().streamingMessage;\n              if (finalMessage) {\n                finalMessage.status = 'sent';\n                \n                // Add message immediately to ensure it's visible\n                get().addMessage(conversation.id.toString(), finalMessage);\n                \n                // Clear streaming state now that message is added\n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                // Fetch latest messages to enrich the streaming message with API metadata\n                try {\n                  logger.info('MESSAGES', 'Enriching streaming message with API data');\n                  const client = getClient();\n                  const response = await client.getMessages(currentAgent.id, conversation.session_id);\n                  \n                  // Process API response to find messages\n                  let apiMessages = [];\n                  if (response && typeof response === 'object') {\n                    if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n                      apiMessages = (response as any).data.messages.data;\n                    } else if (Array.isArray((response as any).data)) {\n                      apiMessages = (response as any).data;\n                    } else if (Array.isArray(response)) {\n                      apiMessages = response;\n                    } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n                      apiMessages = (response as any).data.data;\n                    }\n                  }\n                  \n                  if (apiMessages.length > 0) {\n                    // Find the most recent assistant message (should be our streaming message)\n                    const latestApiMessage = apiMessages[apiMessages.length - 1];\n                    \n                    if (latestApiMessage && latestApiMessage.openai_response) {\n                      // Enrich the streaming message with API data\n                      finalMessage.id = `${latestApiMessage.id}-assistant`;\n                      finalMessage.timestamp = latestApiMessage.created_at || latestApiMessage.timestamp || finalMessage.timestamp;\n                      \n                      // Add full message details\n                      finalMessage.details = {\n                        user_id: latestApiMessage.user_id,\n                        conversation_id: latestApiMessage.conversation_id,\n                        updated_at: latestApiMessage.updated_at,\n                        prompt_id: latestApiMessage.id,\n                        metadata: latestApiMessage.metadata ? {\n                          user_ip: latestApiMessage.metadata.user_ip,\n                          user_agent: latestApiMessage.metadata.user_agent,\n                          external_id: latestApiMessage.metadata.external_id,\n                          request_source: latestApiMessage.metadata.request_source,\n                        } : undefined,\n                      };\n                      \n                      // Also enrich the user message with proper ID and details\n                      const conversationMessages = get().messages.get(conversation.id.toString()) || [];\n                      const lastUserMessage = conversationMessages.filter(m => m.role === 'user').pop();\n                      if (lastUserMessage && lastUserMessage.id === userMessage.id && latestApiMessage.user_query) {\n                        lastUserMessage.id = `${latestApiMessage.id}-user`;\n                        lastUserMessage.timestamp = latestApiMessage.created_at || latestApiMessage.timestamp || lastUserMessage.timestamp;\n                        lastUserMessage.details = {\n                          user_id: latestApiMessage.user_id,\n                          conversation_id: latestApiMessage.conversation_id,\n                          updated_at: latestApiMessage.updated_at,\n                          prompt_id: latestApiMessage.id,\n                          metadata: latestApiMessage.metadata ? {\n                            user_ip: latestApiMessage.metadata.user_ip,\n                            user_agent: latestApiMessage.metadata.user_agent,\n                            external_id: latestApiMessage.metadata.external_id,\n                            request_source: latestApiMessage.metadata.request_source,\n                          } : undefined,\n                        };\n                        get().addMessage(conversation.id.toString(), lastUserMessage);\n                      }\n                      \n                      // Enrich citations if they exist\n                      // Preserve existing citations from streaming if API doesn't provide them\n                      const existingCitations = finalMessage.citations || [];\n                      \n                      if (latestApiMessage.citations && Array.isArray(latestApiMessage.citations) && latestApiMessage.citations.length > 0) {\n                        if (typeof latestApiMessage.citations[0] === 'number') {\n                          // Citations are IDs, fetch details\n                          const citationDetails = await fetchCitationDetails(latestApiMessage.citations, currentAgent.id);\n                          finalMessage.citations = citationDetails;\n                        } else {\n                          // Citations might already be objects\n                          finalMessage.citations = latestApiMessage.citations;\n                        }\n                      } else {\n                        // Keep existing citations from streaming if API doesn't provide any\n                        finalMessage.citations = existingCitations;\n                      }\n                      \n                      // Update feedback if present\n                      if (latestApiMessage.response_feedback?.reaction) {\n                        finalMessage.feedback = latestApiMessage.response_feedback.reaction === 'liked' ? 'like' : \n                                               latestApiMessage.response_feedback.reaction === 'disliked' ? 'dislike' : \n                                               undefined;\n                      }\n                      \n                      // Update the enriched message in the store (it's already added, so this updates it)\n                      get().addMessage(conversation.id.toString(), finalMessage);\n                      \n                      logger.info('MESSAGES', 'Successfully enriched streaming message with API data', {\n                        messageId: finalMessage.id,\n                        hasDetails: !!finalMessage.details,\n                        citationCount: finalMessage.citations?.length || 0\n                      });\n                    } else {\n                      // API message exists but doesn't have expected format\n                      logger.info('MESSAGES', 'API message format mismatch, keeping original message');\n                    }\n                  } else {\n                    // No API messages found\n                    logger.info('MESSAGES', 'No API messages found for enrichment');\n                  }\n                } catch (enrichmentError) {\n                  logger.warn('MESSAGES', 'Failed to enrich streaming message, keeping basic version', enrichmentError);\n                  // Message is already added, enrichment failed but user can still see the response\n                }\n              }\n            }\n        );\n      } catch (setupError) {\n        logger.error('MESSAGES', 'Failed to setup streaming', setupError);\n        throw setupError;\n      }\n    } catch (error: any) {\n      logger.error('MESSAGES', 'Failed to send message', error, {\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n        status: error.status,\n        agentId: currentAgent.id,\n        conversationId: conversation.id,\n        sessionId: conversation.session_id\n      });\n      \n      // Update user message status\n      userMessage.status = 'error';\n      get().addMessage(conversation.id.toString(), userMessage);\n      \n      // Extract error details including status code\n      let errorText = 'Failed to send message';\n      if (error.status) {\n        switch (error.status) {\n          case 429:\n            errorText = 'You have exhausted your current query credits. Please contact customer service for assistance.';\n            break;\n          case 401:\n            errorText = 'API Token is either missing or invalid';\n            break;\n          case 403:\n            // Check if agent is inactive by looking at current agent status\n            const agentStore = useAgentStore.getState();\n            const { currentAgent: currentAgentFor403 } = agentStore;\n            if (currentAgentFor403 && !currentAgentFor403.is_chat_active) {\n              errorText = 'Agent is inactive - no documents uploaded. Please add documents to activate the agent.';\n            } else {\n              errorText = 'Access denied. You don\\'t have permission to access this resource.';\n            }\n            break;\n          case 404:\n            errorText = 'Agent or conversation not found';\n            break;\n          case 400:\n            errorText = 'Invalid request format';\n            break;\n          case 500:\n            errorText = 'Internal server error. Please try again later.';\n            break;\n          default:\n            errorText = error.message || `Error ${error.status}`;\n        }\n      } else if (error.message) {\n        errorText = error.message;\n      }\n      \n      set({ \n        streamingMessage: null,\n        isStreaming: false,\n        error: errorText,\n        loading: false,\n      });\n      \n      throw error;\n    }\n  },\n\n  /**\n   * Add or update a message in the store\n   * \n   * Features:\n   * - Handles both new messages and updates\n   * - Maintains message order\n   * - Automatically saves to local storage\n   * - Efficient update using message ID lookup\n   * \n   * @param conversationId - The conversation to add the message to\n   * @param message - The message to add or update\n   */\n  addMessage: (conversationId: string, message: ChatMessage) => {\n    set(state => {\n      const newMessages = new Map(state.messages);\n      const conversationMessages = newMessages.get(conversationId) || [];\n      \n      // Check if message already exists and update it\n      const existingIndex = conversationMessages.findIndex(m => m.id === message.id);\n      if (existingIndex >= 0) {\n        // Update existing message\n        conversationMessages[existingIndex] = message;\n      } else {\n        // Add new message\n        conversationMessages.push(message);\n      }\n      \n      newMessages.set(conversationId, conversationMessages);\n      \n      // Save to local storage as fallback\n      saveMessagesToStorage(conversationId, conversationMessages);\n      \n      return { messages: newMessages };\n    });\n  },\n\n  /**\n   * Update the currently streaming message\n   * \n   * Used during streaming to append content chunks\n   * and update citations as they arrive\n   * \n   * @param content - Content chunk to append\n   * @param citations - Updated citations (optional)\n   */\n  updateStreamingMessage: (content: string, citations?: Citation[]) => {\n    set(state => {\n      if (!state.streamingMessage) return state;\n      \n      return {\n        streamingMessage: {\n          ...state.streamingMessage,\n          content: state.streamingMessage.content + content, // Append content\n          citations: citations || state.streamingMessage.citations, // Update citations if provided\n        },\n      };\n    });\n  },\n\n  clearMessages: (conversationId?: string) => {\n    set(state => {\n      if (conversationId) {\n        const newMessages = new Map(state.messages);\n        newMessages.delete(conversationId);\n        return { messages: newMessages };\n      } else {\n        // Clear all messages\n        return { messages: new Map() };\n      }\n    });\n  },\n\n  updateMessageFeedback: async (messageId: string, feedback: FeedbackType) => {\n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    const { currentConversation } = conversationStore;\n    \n    if (!currentAgent || !currentConversation) {\n      logger.warn('MESSAGES', 'Cannot update feedback - missing agent or conversation');\n      return;\n    }\n\n    // Find the message\n    const conversationMessages = get().messages.get(currentConversation.id.toString()) || [];\n    const message = conversationMessages.find(m => m.id === messageId);\n    \n    if (!message) {\n      logger.warn('MESSAGES', 'Message not found for feedback update', { messageId });\n      return;\n    }\n\n    // Get the prompt ID from message details or try to extract from message ID\n    let promptId: number | undefined;\n    \n    if (message.details?.prompt_id) {\n      promptId = message.details.prompt_id;\n    } else {\n      // Try to extract from message ID format \"{promptId}-assistant\" or \"{promptId}-user\"\n      const promptIdMatch = message.id.match(/^(\\d+)-/);\n      if (promptIdMatch) {\n        promptId = parseInt(promptIdMatch[1]);\n      }\n    }\n    \n    if (!promptId) {\n      logger.error('MESSAGES', 'Could not determine prompt ID for message', { messageId, details: message.details });\n      toast.error('Unable to update feedback. Message ID not found.');\n      return;\n    }\n    const sessionId = currentConversation.session_id;\n    \n    if (!sessionId) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversationId: currentConversation.id });\n      return;\n    }\n\n    try {\n      // Update local state immediately (optimistic update)\n      const updatedMessage = { ...message, feedback };\n      get().addMessage(currentConversation.id.toString(), updatedMessage);\n\n      // Send to API\n      const client = getClient();\n      \n      // Map feedback directly to API format (no neutral option)\n      const feedbackValue = feedback === 'like' ? 'thumbs_up' : 'thumbs_down';\n      \n      logger.info('MESSAGES', 'Updating message feedback', {\n        projectId: currentAgent.id,\n        sessionId,\n        promptId,\n        feedback: feedbackValue\n      });\n      \n      const response = await client.updateMessageFeedback(\n        currentAgent.id,\n        sessionId,\n        promptId,\n        { feedback: feedbackValue }\n      );\n      \n      // The feedback was already updated optimistically above\n      // The response doesn't include the updated message data in the expected format\n      logger.info('MESSAGES', 'Message feedback updated successfully');\n      \n      // Show success toast\n      toast.success('Thanks for your feedback!');\n      \n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to update message feedback', error);\n      \n      // Revert local state on error\n      get().addMessage(currentConversation.id.toString(), message);\n      \n      // Show error toast\n      if ((error as any)?.status === 401) {\n        toast.error('Authentication failed. Please log in again.');\n      } else if ((error as any)?.status === 404) {\n        toast.error('Message not found.');\n      } else {\n        toast.error('Failed to update feedback. Please try again.');\n      }\n    }\n  },\n\n  // Utility methods\n  getMessagesForConversation: (conversationId: string): ChatMessage[] => {\n    return get().messages.get(conversationId) || [];\n  },\n\n  cancelStreaming: () => {\n    globalStreamManager.cancelAllStreams();\n    set({ \n      streamingMessage: null,\n      isStreaming: false,\n    });\n  },\n\n  /**\n   * Load message history for a conversation\n   * \n   * API Response Handling:\n   * - Supports multiple response formats from the API\n   * - Converts API format to internal ChatMessage format\n   * - Falls back to local storage if API fails\n   * - Handles both user_query and openai_response fields\n   * - Fetches citation details for citation IDs\n   * \n   * @param conversationId - The conversation to load messages for\n   */\n  loadMessages: async (conversationId: string) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    if (isDemoMode) {\n      logger.info('MESSAGES', 'Skipping message load in demo mode', { conversationId });\n      // Just ensure the conversation has an entry in the messages map\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    // Skip API calls for locally created conversations (they don't exist on server)\n    if (conversationId.startsWith('conv_')) {\n      logger.info('MESSAGES', 'Skipping API load for local conversation', { conversationId });\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    const { currentAgent } = agentStore;\n    const { conversations } = conversationStore;\n    \n    if (!currentAgent) {\n      logger.warn('MESSAGES', 'No current agent when loading messages', { conversationId });\n      return;\n    }\n\n    // Find the conversation to get its session_id\n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) {\n      logger.error('MESSAGES', 'Conversation not found in store', { \n        conversationId,\n        availableConversations: conversations.map(c => c.id)\n      });\n      // Don't set error, just ensure empty message array exists\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n\n    logger.info('MESSAGES', 'Loading messages for conversation', {\n      conversationId,\n      sessionId: conversation.session_id,\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n\n    set({ loading: true, error: null });\n\n    try {\n      const client = getClient();\n      const response = await client.getMessages(currentAgent.id, conversation.session_id);\n      logger.info('MESSAGES', 'Messages API response received', {\n        conversationId,\n        responseType: typeof response,\n        hasData: !!(response as any)?.data,\n        dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n      });\n      \n      // Handle different response formats from the API\n      let messages = [];\n      if (response && typeof response === 'object') {\n        // API documentation shows response format: { status: \"success\", data: { conversation: {...}, messages: { data: [...] } } }\n        if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n          messages = (response as any).data.messages.data;\n        } else if (Array.isArray((response as any).data)) {\n          messages = (response as any).data;\n        } else if (Array.isArray(response)) {\n          messages = response;\n        } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n          messages = (response as any).data.data;\n        }\n      }\n      \n      logger.info('MESSAGES', 'Processing messages', {\n        conversationId,\n        messagesCount: messages.length,\n        messageTypes: messages.map((m: any) => m.role || 'unknown')\n      });\n      \n      // Convert API messages to our format\n      // Each API message contains both user_query and openai_response, so we need to create two ChatMessage objects\n      const formattedMessages: ChatMessage[] = [];\n      \n      if (Array.isArray(messages)) {\n        // Process messages and fetch citation details\n        for (const msg of messages) {\n          const baseTimestamp = msg.created_at || msg.timestamp || new Date().toISOString();\n          \n          // Add user message\n          if (msg.user_query) {\n            formattedMessages.push({\n              id: `${msg.id}-user` || `user-${Math.random()}`,\n              role: 'user',\n              content: msg.user_query,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              details: {\n                user_id: msg.user_id,\n                conversation_id: msg.conversation_id,\n                updated_at: msg.updated_at,\n                prompt_id: msg.id,\n                metadata: msg.metadata ? {\n                  user_ip: msg.metadata.user_ip,\n                  user_agent: msg.metadata.user_agent,\n                  external_id: msg.metadata.external_id,\n                  request_source: msg.metadata.request_source,\n                } : undefined,\n              },\n            });\n          }\n          \n          // Add assistant message\n          if (msg.openai_response) {\n            // Fetch citation details if citations exist\n            let citationDetails: Citation[] = [];\n            if (msg.citations && Array.isArray(msg.citations) && msg.citations.length > 0) {\n              // Check if citations are already objects (future-proofing) or just IDs\n              if (typeof msg.citations[0] === 'number') {\n                // Citations are IDs, fetch details\n                citationDetails = await fetchCitationDetails(msg.citations, currentAgent.id);\n              } else {\n                // Citations might already be objects, use as is\n                citationDetails = msg.citations;\n              }\n            }\n            \n            formattedMessages.push({\n              id: `${msg.id}-assistant` || `assistant-${Math.random()}`,\n              role: 'assistant',\n              content: msg.openai_response,\n              citations: citationDetails,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              feedback: msg.response_feedback?.reaction === 'liked' ? 'like' : \n                       msg.response_feedback?.reaction === 'disliked' ? 'dislike' : \n                       undefined,\n              details: {\n                user_id: msg.user_id,\n                conversation_id: msg.conversation_id,\n                updated_at: msg.updated_at,\n                prompt_id: msg.id,\n                metadata: msg.metadata ? {\n                  user_ip: msg.metadata.user_ip,\n                  user_agent: msg.metadata.user_agent,\n                  external_id: msg.metadata.external_id,\n                  request_source: msg.metadata.request_source,\n                } : undefined,\n              },\n            });\n          }\n        }\n      }\n\n      logger.info('MESSAGES', 'Messages formatted successfully', {\n        conversationId,\n        formattedCount: formattedMessages.length\n      });\n\n      // Sort messages by timestamp to ensure chronological order\n      formattedMessages.sort((a, b) => {\n        const dateA = new Date(a.timestamp).getTime();\n        const dateB = new Date(b.timestamp).getTime();\n        return dateA - dateB; // Ascending order (oldest first)\n      });\n\n      logger.info('MESSAGES', 'Messages sorted by timestamp', {\n        conversationId,\n        firstMessageTime: formattedMessages[0]?.timestamp,\n        lastMessageTime: formattedMessages[formattedMessages.length - 1]?.timestamp\n      });\n\n      set(state => {\n        const newMessages = new Map(state.messages);\n        \n        // Preserve any local messages that might be in sending state\n        const existingMessages = state.messages.get(conversationId) || [];\n        const localSendingMessages = existingMessages.filter(msg => \n          msg.status === 'sending' || \n          (msg.role === 'user' && \n           new Date(msg.timestamp).getTime() > Date.now() - 5000) // Messages sent in last 5 seconds\n        );\n        \n        // Merge local sending messages with API messages\n        const mergedMessages = [...formattedMessages];\n        for (const localMsg of localSendingMessages) {\n          if (!mergedMessages.find(m => m.id === localMsg.id)) {\n            // Insert local message at the appropriate position based on timestamp\n            const insertIndex = mergedMessages.findIndex(m => \n              new Date(m.timestamp).getTime() > new Date(localMsg.timestamp).getTime()\n            );\n            if (insertIndex === -1) {\n              mergedMessages.push(localMsg);\n            } else {\n              mergedMessages.splice(insertIndex, 0, localMsg);\n            }\n          }\n        }\n        \n        newMessages.set(conversationId, mergedMessages);\n        \n        // Save to local storage as fallback\n        saveMessagesToStorage(conversationId, mergedMessages);\n        \n        return { \n          messages: newMessages,\n          loading: false,\n        };\n      });\n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to load messages', error, {\n        conversationId,\n        agentId: currentAgent.id,\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        status: (error as any)?.status,\n        message: (error as any)?.message\n      });\n      \n      // Try to load from local storage as fallback\n      const cachedMessages = loadMessagesFromStorage(conversationId);\n      if (cachedMessages && cachedMessages.length > 0) {\n        logger.info('MESSAGES', 'Using cached messages as fallback', {\n          conversationId,\n          messageCount: cachedMessages.length\n        });\n        \n        // Sort cached messages by timestamp to ensure chronological order\n        cachedMessages.sort((a, b) => {\n          const dateA = new Date(a.timestamp).getTime();\n          const dateB = new Date(b.timestamp).getTime();\n          return dateA - dateB; // Ascending order (oldest first)\n        });\n        \n        set(state => {\n          const newMessages = new Map(state.messages);\n          newMessages.set(conversationId, cachedMessages);\n          return { \n            messages: newMessages,\n            loading: false,\n            error: 'Using cached messages (API unavailable)'\n          };\n        });\n      } else {\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to load messages',\n          loading: false,\n        });\n      }\n    }\n  },\n  \n  /**\n   * Clear the error state\n   */\n  clearError: () => {\n    set({ error: null });\n  },\n  \n  /**\n   * Set messages for a specific conversation\n   * Used for updating conversation messages directly\n   */\n  setMessagesForConversation: (conversationId: string, messages: ChatMessage[]) => {\n    set(state => {\n      const newMessages = new Map(state.messages);\n      newMessages.set(conversationId, messages);\n      return { messages: newMessages };\n    });\n  },\n}));","/**\n * Agent Store - Chatbot Management\n * \n * This store manages all agent (chatbot) related state and operations.\n * Agents are the core entities in CustomGPT - each agent is a trained\n * chatbot with its own knowledge base and settings.\n * \n * Features:\n * - CRUD operations for agents\n * - Persistent state using localStorage\n * - Auto-selection of first agent\n * - Agent statistics fetching\n * - License management support\n * \n * State Persistence:\n * - Uses Zustand persist middleware\n * - Stores: agents list and current selection\n * - Survives page refreshes\n * \n * Features:\n * - Multi-format API response handling with backward compatibility\n * - Automatic agent state synchronization across operations\n * - Optimistic UI updates for seamless user experience\n * - Comprehensive error handling with graceful recovery\n */\n\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { AgentStore, Agent } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useConversationStore } from './conversations';\nimport { useMessageStore } from './messages';\n\n/**\n * Agent Store Implementation\n * \n * Persisted to localStorage with key 'customgpt-agent-store'\n * Automatically hydrates on app load\n */\nexport const useAgentStore = create<AgentStore>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      agents: [],\n      currentAgent: null,\n      loading: false,\n      error: null,\n      paginationMeta: undefined,\n\n      /**\n       * Fetch agents from the API with enterprise-scale pagination\n       * \n       * Strategy for 1000+ projects:\n       * - Load first batch (100 items) immediately for UI responsiveness\n       * - Load additional batches as needed via loadMoreAgents()\n       * - Auto-selects first agent if none selected\n       * - Maintains total count for pagination UI\n       */\n      fetchAgents: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Load first batch with larger page size for better UX\n          const response = await client.getAgents({ page: 1, per_page: 100 });\n          \n          let agents: Agent[] = [];\n          let total = 0;\n          let hasMore = false;\n          \n          // Handle different response formats from the API\n          if (response && typeof response === 'object') {\n            // Check for nested pagination format: { data: { data: [...], total: ..., current_page: ... } }\n            if ('data' in response && (response as any).data && typeof (response as any).data === 'object' && 'data' in (response as any).data) {\n              const nestedData = (response as any).data;\n              agents = Array.isArray(nestedData.data) ? nestedData.data : [];\n              total = nestedData.total || agents.length;\n              const currentPage = nestedData.current_page || 1;\n              const perPage = nestedData.per_page || 100;\n              hasMore = nestedData.last_page ? currentPage < nestedData.last_page : false;\n            } else if ('data' in response && 'total' in response) {\n              // Flat paginated response format\n              const paginatedResponse = response as { data: Agent[]; total: number; page: number; per_page: number };\n              agents = paginatedResponse.data;\n              total = paginatedResponse.total;\n              hasMore = total > paginatedResponse.per_page;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              agents = (response as any).data;\n              total = agents.length;\n              hasMore = false;\n            } else if (Array.isArray(response)) {\n              // Legacy format: [...]\n              agents = response as Agent[];\n              total = agents.length;\n              hasMore = false;\n            }\n          }\n          \n          set({ \n            agents, \n            loading: false,\n            // Always update pagination metadata with fresh data\n            paginationMeta: { \n              currentPage: 1, \n              totalCount: total, \n              hasMore,\n              perPage: 100\n            },\n            // Auto-select first agent if none selected\n            currentAgent: get().currentAgent || (agents.length > 0 ? agents[0] : null)\n          });\n          \n          // Fetch settings for the current agent to get avatar\n          const currentAgent = get().currentAgent;\n          if (currentAgent && !currentAgent.settings) {\n            try {\n              const client = getClient();\n              const settingsResponse = await client.getAgentSettings(currentAgent.id);\n              if (settingsResponse && settingsResponse.data) {\n                const agentWithSettings = { ...currentAgent, settings: settingsResponse.data };\n                set({ currentAgent: agentWithSettings });\n                \n                // Also update in the agents list\n                set(state => ({\n                  agents: state.agents.map(a => \n                    a.id === currentAgent.id ? agentWithSettings : a\n                  )\n                }));\n              }\n            } catch (error) {\n              console.error('Failed to fetch current agent settings:', error);\n            }\n          }\n        } catch (error) {\n          console.error('Failed to fetch agents:', error);\n          set({ \n            agents: [], \n            error: error instanceof Error ? error.message : 'Failed to fetch agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Load more agents for large datasets (enterprise accounts)\n       * Appends to existing agents list\n       */\n      loadMoreAgents: async () => {\n        const state = get();\n        const paginationMeta = (state as any).paginationMeta;\n        \n        if (!paginationMeta?.hasMore || state.loading) return;\n        \n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const nextPage = paginationMeta.currentPage + 1;\n          \n          const response = await client.getAgents({ \n            page: nextPage, \n            per_page: paginationMeta.perPage \n          });\n          \n          if (response && 'data' in response) {\n            let newAgents: Agent[] = [];\n            let responseTotal = 0;\n            let responsePage = nextPage;\n            \n            // Handle nested format: { data: { data: [...] } }\n            if (response.data && typeof response.data === 'object' && 'data' in response.data) {\n              const nestedData = (response as any).data;\n              newAgents = Array.isArray(nestedData.data) ? nestedData.data : [];\n              responseTotal = nestedData.total || 0;\n              responsePage = nestedData.current_page || nextPage;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              newAgents = (response as any).data;\n              responseTotal = paginationMeta.totalCount;\n            }\n            \n            set(state => ({ \n              agents: [...state.agents, ...newAgents],\n              loading: false,\n              paginationMeta: {\n                ...paginationMeta,\n                currentPage: responsePage,\n                hasMore: (responsePage * paginationMeta.perPage + newAgents.length) < responseTotal\n              }\n            }));\n          }\n        } catch (error) {\n          console.error('Failed to load more agents:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to load more agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Search for a specific agent by ID or name\n       * Useful for enterprise accounts with many projects\n       */\n      findAgent: async (query: string | number) => {\n        try {\n          const client = getClient();\n          \n          // If query is numeric, assume it's an ID and try to fetch directly\n          if (typeof query === 'number' || /^\\d+$/.test(query.toString())) {\n            const id = typeof query === 'number' ? query : parseInt(query.toString());\n            try {\n              const response = await client.getAgent(id);\n              const agent = response.data;\n              \n              // Add to agents list if not already present\n              const state = get();\n              if (!state.agents.find(a => a.id === agent.id)) {\n                set(state => ({ \n                  agents: [agent, ...state.agents] \n                }));\n              }\n              \n              return agent;\n            } catch {\n              // ID not found or no access, fall through to search\n            }\n          }\n          \n          // For text search, we'd need a search endpoint (not implemented in current API)\n          // For now, search within loaded agents\n          const state = get();\n          const found = state.agents.find(agent => \n            agent.project_name.toLowerCase().includes(query.toString().toLowerCase()) ||\n            agent.id.toString() === query.toString()\n          );\n          \n          return found || null;\n        } catch (error) {\n          console.error('Failed to find agent:', error);\n          return null;\n        }\n      },\n\n      /**\n       * Create a new agent\n       * \n       * @param data - Agent creation data\n       * @param data.project_name - Display name for the agent\n       * @param data.sitemap_path - URL for sitemap-based training\n       * @param data.files - Files for file-based training\n       * @param data.is_shared - Whether agent is publicly accessible\n       * \n       * Behavior:\n       * - Adds new agent to beginning of list\n       * - Auto-selects the new agent\n       * - Returns the created agent\n       * - Throws error on failure\n       */\n      createAgent: async (data: {\n        project_name: string;\n        sitemap_path?: string;\n        files?: File[];\n        is_shared?: boolean;\n      }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createAgent(data);\n          const newAgent = response.data;\n          \n          // Optimistic update - add to list and select immediately\n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to create agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create agent',\n            loading: false \n          });\n          throw error; // Re-throw for component error handling\n        }\n      },\n\n      /**\n       * Select an agent as the current active agent\n       * This agent will be used for all chat operations\n       * \n       * @param agent - The agent to select\n       */\n      selectAgent: async (agent: Agent) => {\n        // Clear conversation state when switching agents\n        const conversationStore = useConversationStore.getState();\n        const messageStore = useMessageStore.getState();\n        \n        // Set the new agent first\n        set({ currentAgent: agent });\n        \n        // Clear current conversation to show welcome screen\n        conversationStore.selectConversation(null);\n        \n        // Clear all messages from the previous agent\n        messageStore.clearMessages();\n        \n        // Fetch agent settings to get avatar and other details\n        try {\n          const client = getClient();\n          const settingsResponse = await client.getAgentSettings(agent.id);\n          if (settingsResponse && settingsResponse.data) {\n            // Update the agent with settings\n            const agentWithSettings = { ...agent, settings: settingsResponse.data };\n            set({ currentAgent: agentWithSettings });\n            \n            // Also update in the agents list\n            set(state => ({\n              agents: state.agents.map(a => \n                a.id === agent.id ? agentWithSettings : a\n              )\n            }));\n          }\n        } catch (error) {\n          console.error('Failed to fetch agent settings:', error);\n          // Continue without settings\n        }\n        \n        // Fetch conversations for the new agent\n        try {\n          await conversationStore.fetchConversations(agent.id);\n        } catch (error) {\n          console.error('Failed to fetch conversations for new agent:', error);\n          // Even if fetch fails, we've already cleared the old state\n        }\n      },\n\n      /**\n       * Manually set the agents list\n       * Used for optimistic updates or manual state management\n       * \n       * Features:\n       * - Validates current agent still exists\n       * - Auto-selects first agent if current is removed\n       * - Maintains agent selection when possible\n       * \n       * @param agents - New list of agents\n       */\n      setAgents: (agents: Agent[]) => {\n        set({ \n          agents,\n          // Update current agent if it's no longer in the list\n          currentAgent: (() => {\n            const current = get().currentAgent;\n            if (!current) return agents.length > 0 ? agents[0] : null;\n            \n            // Check if current agent still exists in new list\n            const stillExists = agents.find(a => a.id === current.id);\n            return stillExists || (agents.length > 0 ? agents[0] : null);\n          })()\n        });\n      },\n      \n      updateAgent: async (id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateAgent(id, data);\n          const updatedAgent = response.data;\n          \n          set(state => ({\n            agents: state.agents.map(a => a.id === id ? updatedAgent : a),\n            currentAgent: state.currentAgent?.id === id ? updatedAgent : state.currentAgent,\n            loading: false,\n          }));\n          \n          return updatedAgent;\n        } catch (error) {\n          console.error('Failed to update agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      deleteAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteAgent(id);\n          \n          set(state => {\n            const filteredAgents = state.agents.filter(a => a.id !== id);\n            return {\n              agents: filteredAgents,\n              currentAgent: state.currentAgent?.id === id \n                ? (filteredAgents.length > 0 ? filteredAgents[0] : null)\n                : state.currentAgent,\n              loading: false,\n            };\n          });\n        } catch (error) {\n          console.error('Failed to delete agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      replicateAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.replicateAgent(id);\n          const newAgent = response.data;\n          \n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to replicate agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to replicate agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      getAgentStats: async (id: number) => {\n        try {\n          const client = getClient();\n          const response = await client.getAgentStats(id);\n          return response.data;\n        } catch (error) {\n          console.error('Failed to get agent stats:', error);\n          throw error;\n        }\n      },\n    }),\n    {\n      name: 'customgpt-agents',\n      partialize: (state) => ({\n        currentAgent: state.currentAgent,\n      }),\n    }\n  )\n);","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface AnalyticsData {\n  conversations: {\n    total: number;\n    active: number;\n    trend: number;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  queries: {\n    total: number;\n    successful: number;\n    failed: number;\n    avgResponseTime: number;\n    topQueries: Array<{\n      query: string;\n      count: number;\n    }>;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  traffic: {\n    uniqueUsers: number;\n    pageViews: number;\n    avgSessionDuration: number;\n    bounceRate: number;\n    data: Array<{\n      date: string;\n      users: number;\n      pageViews: number;\n    }>;\n  };\n  statistics: {\n    totalMessages: number;\n    totalConversations: number;\n    avgMessagesPerConversation: number;\n    satisfactionRate: number;\n    responseAccuracy: number;\n  };\n}\n\ninterface AnalyticsState {\n  analytics: AnalyticsData | null;\n  loading: boolean;\n  error: string | null;\n  dateRange: {\n    startDate: string;\n    endDate: string;\n  };\n  \n  // Actions\n  fetchAnalytics: (projectId: number) => Promise<void>;\n  setDateRange: (startDate: string, endDate: string) => void;\n  exportAnalytics: (format: 'csv' | 'json' | 'pdf') => Promise<void>;\n  reset: () => void;\n}\n\n// Helper function to format dates for API\nconst formatDate = (date: Date): string => {\n  return date.toISOString().split('T')[0];\n};\n\n// Get default date range (last 30 days)\nconst getDefaultDateRange = () => {\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - 30);\n  \n  return {\n    startDate: formatDate(startDate),\n    endDate: formatDate(endDate),\n  };\n};\n\nexport const useAnalyticsStore = create<AnalyticsState>((set, get) => ({\n  analytics: null,\n  loading: false,\n  error: null,\n  dateRange: getDefaultDateRange(),\n\n  fetchAnalytics: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Fetch all reports data in parallel using documented endpoints\n      const [trafficReport, queriesReport, conversationsReport, analysisReport] = await Promise.all([\n        client.getTrafficReport(projectId),\n        client.getQueriesReport(projectId),\n        client.getConversationsReport(projectId),\n        client.getAnalysisReport(projectId, 'daily'),\n      ]);\n\n      // Transform the data to match our interface using actual API response structure\n      // Handle cases where API returns empty arrays instead of numbers\n      const conversationsTotal = Array.isArray(conversationsReport.data?.total) ? 0 : (conversationsReport.data?.total || 0);\n      const queriesTotal = Array.isArray(queriesReport.data?.total) ? 0 : (queriesReport.data?.total || 0);\n      const avgQueriesPerConv = Array.isArray(conversationsReport.data?.average_queries_per_conversation) \n        ? 0 \n        : (Number(conversationsReport.data?.average_queries_per_conversation) || 0);\n\n      const analyticsData: AnalyticsData = {\n        conversations: {\n          total: conversationsTotal,\n          active: Math.floor(conversationsTotal * 0.7), // Estimate active conversations\n          trend: 0, // Calculate trend from data if needed\n          data: Array.isArray(analysisReport.data?.conversations) \n            ? analysisReport.data.conversations.map((item: any) => ({\n                date: item.created_at_interval,\n                count: Number(item.queries_number) || 0,\n              }))\n            : [],\n        },\n        queries: {\n          total: queriesTotal,\n          successful: Array.isArray(queriesReport.data?.query_status) \n            ? (queriesReport.data.query_status.find((s: any) => s.status === 'success')?.count || 0)\n            : 0,\n          failed: Array.isArray(queriesReport.data?.query_status)\n            ? (queriesReport.data.query_status.find((s: any) => s.status === 'failed')?.count || 0)\n            : 0,\n          avgResponseTime: 0, // Not provided by API\n          topQueries: [], // Not provided by these endpoints\n          data: Array.isArray(analysisReport.data?.queries)\n            ? analysisReport.data.queries.map((item: any) => ({\n                date: item.created_at_interval,\n                count: Number(item.queries_number) || 0,\n              }))\n            : [],\n        },\n        traffic: {\n          uniqueUsers: Array.isArray(trafficReport.data?.sources)\n            ? trafficReport.data.sources.reduce((acc: number, source: any) => acc + (source.request_source_number || 0), 0)\n            : 0,\n          pageViews: Array.isArray(trafficReport.data?.sources)\n            ? trafficReport.data.sources.reduce((acc: number, source: any) => acc + (source.request_source_number || 0), 0)\n            : 0,\n          avgSessionDuration: 0, // Not provided by API\n          bounceRate: 0, // Not provided by API\n          data: Array.isArray(trafficReport.data?.sources)\n            ? trafficReport.data.sources.map((source: any) => ({\n                date: new Date().toISOString().split('T')[0], // Current date as traffic report doesn't have dates\n                users: source.request_source_number || 0,\n                pageViews: source.request_source_number || 0,\n              }))\n            : [],\n        },\n        statistics: {\n          totalMessages: queriesTotal,\n          totalConversations: conversationsTotal,\n          avgMessagesPerConversation: avgQueriesPerConv,\n          satisfactionRate: 0, // Not provided by API\n          responseAccuracy: 0, // Not provided by API\n        },\n      };\n\n      set({ analytics: analyticsData, loading: false });\n    } catch (error: any) {\n      console.error('Failed to fetch analytics:', error);\n      \n      let errorMessage = 'Failed to fetch analytics';\n      if (error.status === 401) {\n        const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : 'production';\n        const isDemoMode = deploymentMode === 'demo';\n        if (isDemoMode) {\n          errorMessage = 'API key authentication failed. Please check your API key.';\n          toast.error('Authentication failed. Please check your API key in demo settings.');\n        } else {\n          errorMessage = 'Authentication required. Please check your API key configuration.';\n          toast.error('Authentication failed. Please check your API key configuration.');\n        }\n      } else if (error.status === 404) {\n        errorMessage = 'Analytics data not found for this project.';\n        toast.error('No analytics data available yet.');\n      } else if (error.status === 500) {\n        errorMessage = 'Server error occurred. Please try again later.';\n        toast.error('Server error. Please try again later.');\n      } else {\n        toast.error('Failed to fetch analytics data');\n      }\n      \n      set({ \n        analytics: null,\n        error: errorMessage,\n        loading: false,\n      });\n    }\n  },\n\n  setDateRange: (startDate: string, endDate: string) => {\n    set({ dateRange: { startDate, endDate } });\n  },\n\n  exportAnalytics: async (format: 'csv' | 'json' | 'pdf') => {\n    const analytics = get().analytics;\n    if (!analytics) {\n      toast.error('No analytics data to export');\n      return;\n    }\n\n    try {\n      // Implementation would depend on the format\n      switch (format) {\n        case 'json':\n          const jsonData = JSON.stringify(analytics, null, 2);\n          const blob = new Blob([jsonData], { type: 'application/json' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `analytics-${new Date().toISOString()}.json`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          URL.revokeObjectURL(url);\n          toast.success('Analytics exported successfully');\n          break;\n          \n        case 'csv':\n          // Would need a CSV conversion library or custom implementation\n          toast.info('CSV export not yet implemented');\n          break;\n          \n        case 'pdf':\n          // Would need a PDF generation library\n          toast.info('PDF export not yet implemented');\n          break;\n      }\n    } catch (error) {\n      console.error('Failed to export analytics:', error);\n      toast.error('Failed to export analytics');\n    }\n  },\n\n  reset: () => {\n    set({\n      analytics: null,\n      loading: false,\n      error: null,\n      dateRange: getDefaultDateRange(),\n    });\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { UIStore } from '@/types';\n\nexport const useUIStore = create<UIStore>()(\n  persist(\n    (set) => ({\n      sidebarOpen: true,\n      settingsOpen: false,\n      theme: 'light',\n      fontSize: 'md',\n\n      setSidebarOpen: (open: boolean) => {\n        set({ sidebarOpen: open });\n      },\n\n      setSettingsOpen: (open: boolean) => {\n        set({ settingsOpen: open });\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Apply theme to document\n        if (typeof window !== 'undefined') {\n          document.documentElement.className = theme;\n        }\n      },\n\n      setFontSize: (size: 'sm' | 'md' | 'lg') => {\n        set({ fontSize: size });\n        \n        // Apply font size to document\n        if (typeof window !== 'undefined') {\n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (size) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }),\n    {\n      name: 'customgpt-ui',\n      partialize: (state) => ({\n        sidebarOpen: state.sidebarOpen,\n        theme: state.theme,\n        fontSize: state.fontSize,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Apply theme and font size on rehydration\n        if (typeof window !== 'undefined' && state) {\n          document.documentElement.className = state.theme;\n          \n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (state.fontSize) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { toast } from 'sonner';\nimport { getClient } from '@/lib/api/client';\nimport type { APIResponse, AgentStats } from '@/types';\n\nexport interface ProjectSettings {\n  // Appearance\n  chatbot_avatar?: string;\n  chatbot_background_type?: 'image' | 'color';\n  chatbot_background?: string;\n  chatbot_background_color?: string;\n  chatbot_color?: string;\n  chatbot_toolbar_color?: string;\n  chatbot_title?: string;\n  chatbot_title_color?: string;\n  user_avatar?: string;\n  spotlight_avatar_enabled?: boolean;\n  spotlight_avatar?: string;\n  spotlight_avatar_shape?: 'rectangle' | 'circle' | 'rounded' | 'square';\n  spotlight_avatar_type?: 'default' | 'animated' | '3d' | 'custom';\n  user_avatar_orientation?: 'agent-left-user-right' | 'agent-right-user-left' | 'both-left' | 'both-right';\n  \n  // Messages & Behavior\n  default_prompt?: string;\n  example_questions?: string[];\n  persona_instructions?: string;\n  response_source?: 'default' | 'own_content' | 'openai_content';\n  chatbot_model?: string;\n  custom_persona?: string;\n  agent_capability?: 'fastest-responses' | 'optimal-choice' | 'advanced-reasoning' | 'complex-tasks';\n  chatbot_msg_lang?: string;\n  input_field_addendum?: string;\n  \n  // Messages\n  hang_in_there_msg?: string;\n  chatbot_siesta_msg?: string;\n  no_answer_message?: string;\n  ending_message?: string;\n  try_asking_questions_msg?: string;\n  view_more_msg?: string;\n  view_less_msg?: string;\n  \n  // Citations\n  enable_citations?: number;\n  citations_view_type?: 'user' | 'show' | 'hide';\n  citations_answer_source_label_msg?: string;\n  citations_sources_label_msg?: string;\n  image_citation_display?: 'default' | 'inline' | 'none';\n  enable_inline_citations_api?: boolean;\n  hide_sources_from_responses?: boolean;\n  \n  // Features\n  enable_feedbacks?: boolean;\n  is_loading_indicator_enabled?: boolean;\n  remove_branding?: boolean;\n  private_deployment?: boolean;\n  enable_recaptcha_for_public_chatbots?: boolean;\n  is_selling_enabled?: boolean;\n  license_slug?: boolean;\n  selling_url?: string;\n  can_share_conversation?: boolean;\n  can_export_conversation?: boolean;\n  conversation_time_window?: boolean;\n  conversation_retention_period?: 'day' | 'week' | 'month' | 'quarter' | 'year' | 'custom';\n  conversation_retention_days?: number;\n  enable_agent_knowledge_base_awareness?: boolean;\n  markdown_enabled?: boolean;\n}\n\nexport interface ProjectPlugin {\n  id: string;\n  name: string;\n  enabled: boolean;\n  description?: string;\n  category?: string;\n  settings?: Record<string, any>;\n}\n\n// Using AgentStats from the API instead of custom ProjectStats\nexport type ProjectStats = AgentStats;\n\nexport interface ProjectSettingsStore {\n  // Settings\n  settings: ProjectSettings | null;\n  settingsLoading: boolean;\n  settingsError: string | null;\n\n  // Plugins\n  plugins: ProjectPlugin[];\n  pluginsLoading: boolean;\n  pluginsError: string | null;\n\n  // Stats\n  stats: ProjectStats | null;\n  statsLoading: boolean;\n  statsError: string | null;\n\n  // Actions\n  fetchSettings: (projectId: number) => Promise<void>;\n  updateSettings: (projectId: number, settings: Partial<ProjectSettings>) => Promise<void>;\n  fetchPlugins: (projectId: number) => Promise<void>;\n  updatePlugin: (projectId: number, pluginId: string, enabled: boolean) => Promise<void>;\n  fetchStats: (projectId: number) => Promise<void>;\n  reset: () => void;\n}\n\n// Track active requests to prevent duplicates\nconst activeRequests = new Map<string, boolean>();\n\nexport const useProjectSettingsStore = create<ProjectSettingsStore>((set, get) => ({\n  // Initial state\n  settings: null,\n  settingsLoading: false,\n  settingsError: null,\n  plugins: [],\n  pluginsLoading: false,\n  pluginsError: null,\n  stats: null,\n  statsLoading: false,\n  statsError: null,\n\n  // Fetch project settings\n  fetchSettings: async (projectId: number) => {\n    const requestKey = `settings-${projectId}`;\n    \n    // Prevent duplicate requests\n    if (activeRequests.get(requestKey)) {\n      return;\n    }\n    \n    activeRequests.set(requestKey, true);\n    \n    // Clear previous errors and set loading state\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      const response = await getClient().getAgentSettings(projectId);\n\n      // The API client returns the data directly, not wrapped with status\n      if (response && response.data) {\n        set({ \n          settings: response.data, \n          settingsLoading: false,\n          settingsError: null // Explicitly clear error on success\n        });\n      } else if (response) {\n        // If response exists but doesn't have data property, it might be the direct data\n        set({ \n          settings: response as any, \n          settingsLoading: false,\n          settingsError: null\n        });\n      } else {\n        throw new Error('Failed to fetch project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      // Only show toast for actual errors, not for expected scenarios\n      if (error instanceof Error && !error.message.includes('404')) {\n        toast.error(errorMessage);\n      }\n    } finally {\n      activeRequests.delete(requestKey);\n    }\n  },\n\n  // Update project settings\n  updateSettings: async (projectId: number, settingsUpdate: Partial<ProjectSettings>) => {\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      // Create FormData for multipart/form-data\n      const formData = new FormData();\n      \n      Object.entries(settingsUpdate).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          if (key === 'example_questions' && Array.isArray(value)) {\n            // Handle array fields - use bracket notation without index\n            value.forEach((question) => {\n              formData.append(`example_questions[]`, question);\n            });\n          } else if (value instanceof File) {\n            // Handle file uploads\n            formData.append(key, value);\n          } else {\n            // Handle regular fields\n            formData.append(key, String(value));\n          }\n        }\n      });\n\n      const response = await getClient().updateAgentSettings(projectId, formData);\n\n      // The API client returns the data directly\n      if (response) {\n        // Instead of merging, re-fetch the settings to ensure we have the latest data\n        set({ settingsLoading: false });\n        \n        // Re-fetch settings to get the updated data from server\n        await get().fetchSettings(projectId);\n        \n        toast.success('Project settings updated successfully');\n      } else {\n        throw new Error('Failed to update project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project plugins\n  fetchPlugins: async (projectId: number) => {\n    set({ pluginsLoading: true, pluginsError: null });\n\n    try {\n      const response = await getClient().getProjectPlugins(projectId);\n\n      // The API client returns the data directly\n      if (response) {\n        const pluginsData = response.data || response;\n        set({ \n          plugins: Array.isArray(pluginsData) ? pluginsData : [], \n          pluginsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project plugins');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project plugins';\n      set({ \n        pluginsError: errorMessage, \n        pluginsLoading: false,\n        plugins: [] // Fallback to empty array\n      });\n      console.warn('Plugins not available:', errorMessage);\n    }\n  },\n\n  // Update project plugin\n  updatePlugin: async (projectId: number, pluginId: string, enabled: boolean) => {\n    try {\n      // This endpoint might not exist yet, so we'll implement it as a placeholder\n      const response = await getClient().updateProjectPlugin(projectId, pluginId, { enabled });\n\n      // The API client returns the data directly\n      if (response) {\n        // Update plugin in store\n        const plugins = get().plugins.map(plugin =>\n          plugin.id === pluginId ? { ...plugin, enabled } : plugin\n        );\n        \n        set({ plugins });\n        toast.success(`Plugin ${enabled ? 'enabled' : 'disabled'} successfully`);\n      } else {\n        throw new Error('Failed to update plugin');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update plugin';\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project stats\n  fetchStats: async (projectId: number) => {\n    set({ statsLoading: true, statsError: null });\n\n    try {\n      const response = await getClient().getAgentStats(projectId);\n\n      // The API client returns the data directly\n      if (response) {\n        const statsData = response.data || response;\n        set({ \n          stats: statsData, \n          statsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project stats');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project stats';\n      set({ \n        statsError: errorMessage, \n        statsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Reset store\n  reset: () => {\n    set({\n      settings: null,\n      settingsLoading: false,\n      settingsError: null,\n      plugins: [],\n      pluginsLoading: false,\n      pluginsError: null,\n      stats: null,\n      statsLoading: false,\n      statsError: null,\n    });\n  },\n}));","import { create } from 'zustand';\nimport { getClient, isClientInitialized } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { Page, PagesQueryParams } from '@/types/pages.types';\n\ninterface PagesState {\n  pages: Page[];\n  loading: boolean;\n  error: string | null;\n  paginationInfo: {\n    current_page: number;\n    total: number;\n    per_page: number;\n    last_page: number;\n  };\n  queryParams: PagesQueryParams;\n  \n  // Actions\n  fetchPages: (projectId: number) => Promise<void>;\n  deletePage: (projectId: number, pageId: number) => Promise<void>;\n  reindexPage: (projectId: number, pageId: number) => Promise<void>;\n  \n  // UI State\n  setQueryParams: (params: Partial<PagesQueryParams>) => void;\n  reset: () => void;\n}\n\nexport const usePageStore = create<PagesState>((set, get) => ({\n  pages: [],\n  loading: false,\n  error: null,\n  paginationInfo: {\n    current_page: 1,\n    total: 0,\n    per_page: 20,\n    last_page: 1\n  },\n  queryParams: {\n    page: 1,\n    limit: 20,\n    order: 'desc',\n    crawl_status: 'all',\n    index_status: 'all'\n  },\n\n  fetchPages: async (projectId: number) => {\n    if (!isClientInitialized()) {\n      set({ error: 'API client not initialized' });\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const { queryParams } = get();\n      const response = await client.getPages(projectId, queryParams);\n      \n      set({ \n        pages: response.data.pages.data,\n        paginationInfo: {\n          current_page: response.data.pages.current_page,\n          total: response.data.pages.total,\n          per_page: response.data.pages.per_page,\n          last_page: response.data.pages.last_page\n        },\n        loading: false \n      });\n    } catch (error: any) {\n      console.error('Failed to fetch pages:', error);\n      \n      let errorMessage = 'Failed to fetch pages';\n      if (error.status === 400) {\n        errorMessage = 'Invalid request. Please check the project ID.';\n      } else if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Project not found.';\n      } else if (error.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  deletePage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deletePage(projectId, pageId);\n      \n      set(state => ({\n        pages: state.pages.filter(page => page.id !== pageId),\n        loading: false,\n      }));\n      \n      toast.success('Page deleted successfully');\n    } catch (error: any) {\n      console.error('Failed to delete page:', error);\n      \n      let errorMessage = 'Failed to delete page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Page not found.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  reindexPage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.reindexPage(projectId, pageId);\n      \n      // Update local state to show queued status\n      set(state => ({\n        pages: state.pages.map(page => \n          page.id === pageId \n            ? { ...page, crawl_status: 'queued', index_status: 'queued' }\n            : page\n        ),\n        loading: false,\n      }));\n      \n      toast.success('Page reindexing started');\n    } catch (error: any) {\n      console.error('Failed to reindex page:', error);\n      \n      let errorMessage = 'Failed to reindex page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 403) {\n        errorMessage = 'The page could not be reindexed.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  setQueryParams: (params: Partial<PagesQueryParams>) => {\n    set(state => ({\n      queryParams: { ...state.queryParams, ...params },\n    }));\n  },\n\n  reset: () => {\n    set({\n      pages: [],\n      loading: false,\n      error: null,\n      paginationInfo: {\n        current_page: 1,\n        total: 0,\n        per_page: 20,\n        last_page: 1\n      },\n      queryParams: {\n        page: 1,\n        limit: 20,\n        order: 'desc',\n        crawl_status: 'all',\n        index_status: 'all'\n      },\n    });\n  },\n}));","// Sources store - provides state management for source data\n// Currently uses direct API calls in components\n\nimport { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface Source {\n  id: string;\n  project_id: number;\n  name: string;\n  type: 'file' | 'url' | 'text' | 'api';\n  status: 'active' | 'inactive' | 'processing' | 'error';\n  size?: number;\n  file_type?: string;\n  url?: string;\n  content?: string;\n  metadata?: {\n    description?: string;\n    tags?: string[];\n    author?: string;\n    lastIndexed?: string;\n    [key: string]: any;\n  };\n  created_at: string;\n  updated_at: string;\n  indexed_at?: string;\n  error_message?: string;\n}\n\ninterface SourcesState {\n  sources: Source[];\n  currentSource: Source | null;\n  loading: boolean;\n  error: string | null;\n  searchQuery: string;\n  filter: {\n    status?: 'active' | 'inactive' | 'processing' | 'error' | 'all';\n    type?: 'file' | 'url' | 'text' | 'api' | 'all';\n    sortBy?: 'name' | 'created_at' | 'updated_at' | 'size';\n    sortOrder?: 'asc' | 'desc';\n  };\n  syncStatus: {\n    syncing: boolean;\n    lastSync?: string;\n    progress?: number;\n  };\n  \n  // Actions\n  fetchSources: (projectId: number) => Promise<void>;\n  fetchSource: (projectId: number, sourceId: string) => Promise<void>;\n  uploadSources: (projectId: number, files: File[]) => Promise<void>;\n  updateSource: (projectId: number, sourceId: string, updates: Partial<Source>) => Promise<void>;\n  deleteSource: (projectId: number, sourceId: string) => Promise<void>;\n  bulkDelete: (projectId: number, sourceIds: string[]) => Promise<void>;\n  syncSources: (projectId: number) => Promise<void>;\n  \n  // UI State\n  setSearchQuery: (query: string) => void;\n  setFilter: (filter: Partial<SourcesState['filter']>) => void;\n  selectSource: (source: Source | null) => void;\n  reset: () => void;\n}\n\n// Store implementation for source management\nexport const useSourceStore = create<SourcesState>((set, get) => ({\n  sources: [],\n  currentSource: null,\n  loading: false,\n  error: null,\n  searchQuery: '',\n  filter: {\n    status: 'all',\n    type: 'all',\n    sortBy: 'updated_at',\n    sortOrder: 'desc',\n  },\n  syncStatus: {\n    syncing: false,\n  },\n\n  fetchSources: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getSources(projectId);\n      \n      // Extract all sources from sitemaps and uploads\n      const allSources: Source[] = [];\n      \n      if (response.data.sitemaps) {\n        // Map API source structure to store's Source interface\n        response.data.sitemaps.forEach((apiSource: any) => {\n          allSources.push({\n            id: apiSource.id.toString(),\n            project_id: projectId,\n            name: apiSource.settings.sitemap_path || `Source ${apiSource.id}`,\n            type: 'url', // Map 'sitemap' to 'url'\n            status: 'active',\n            metadata: {\n              ...apiSource.settings,\n              pages: apiSource.pages,\n            },\n            created_at: apiSource.created_at,\n            updated_at: apiSource.updated_at,\n          });\n        });\n      }\n      \n      if (response.data.uploads) {\n        const uploads = Array.isArray(response.data.uploads) \n          ? response.data.uploads \n          : [response.data.uploads];\n          \n        uploads.forEach((apiSource: any) => {\n          allSources.push({\n            id: apiSource.id.toString(),\n            project_id: projectId,\n            name: `Upload ${apiSource.id}`,\n            type: 'file',\n            status: 'active',\n            metadata: {\n              ...apiSource.settings,\n              pages: apiSource.pages,\n            },\n            created_at: apiSource.created_at,\n            updated_at: apiSource.updated_at,\n          });\n        });\n      }\n      \n      set({ sources: allSources, loading: false });\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch sources',\n        loading: false,\n      });\n      toast.error('Failed to load sources');\n    }\n  },\n\n  fetchSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      // const client = getClient();\n      // const response = await client.getSource(projectId, sourceId);\n      \n      // const source = response.data;\n      // set({ currentSource: source, loading: false });\n      throw new Error('getSource API method not available');\n      \n      // Update in the list as well\n      // set(state => ({\n      //   sources: state.sources.map(s => s.id === sourceId ? source : s),\n      // }));\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch source',\n        loading: false,\n      });\n      toast.error('Failed to load source details');\n    }\n  },\n\n  uploadSources: async (projectId: number, files: File[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Upload files one by one for better progress tracking\n      const uploadPromises = files.map(file => \n        Promise.reject(new Error('uploadFile API method not available'))\n      );\n      \n      const responses = await Promise.all(uploadPromises);\n      \n      // Refresh sources list\n      await get().fetchSources(projectId);\n      \n      toast.success(`Successfully uploaded ${files.length} file(s)`);\n      set({ loading: false });\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to upload sources',\n        loading: false,\n      });\n      toast.error('Failed to upload files');\n      throw error;\n    }\n  },\n\n  updateSource: async (projectId: number, sourceId: string, updates: Partial<Source>) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      // await client.updateSource(projectId, sourceId, {\n      throw new Error('updateSource API method not available');\n      /*\n        name: updates.name,\n        metadata: updates.metadata,\n        status: updates.status,\n      }); */\n      \n      set(state => ({\n        sources: state.sources.map(source => \n          source.id === sourceId \n            ? { ...source, ...updates, updated_at: new Date().toISOString() } \n            : source\n        ),\n        currentSource: state.currentSource?.id === sourceId \n          ? { ...state.currentSource, ...updates, updated_at: new Date().toISOString() }\n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source updated successfully');\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to update source',\n        loading: false,\n      });\n      toast.error('Failed to update source');\n      throw error;\n    }\n  },\n\n  deleteSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteSource(projectId, parseInt(sourceId));\n      \n      set(state => ({\n        sources: state.sources.filter(source => source.id !== sourceId),\n        currentSource: state.currentSource?.id === sourceId ? null : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source deleted successfully');\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete source',\n        loading: false,\n      });\n      toast.error('Failed to delete source');\n      throw error;\n    }\n  },\n\n  bulkDelete: async (projectId: number, sourceIds: string[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Delete sources in parallel\n      await Promise.all(\n        sourceIds.map(sourceId => client.deleteSource(projectId, parseInt(sourceId)))\n      );\n      \n      set(state => ({\n        sources: state.sources.filter(source => !sourceIds.includes(source.id)),\n        currentSource: sourceIds.includes(state.currentSource?.id || '') \n          ? null \n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success(`Successfully deleted ${sourceIds.length} source(s)`);\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete sources',\n        loading: false,\n      });\n      toast.error('Failed to delete sources');\n      throw error;\n    }\n  },\n\n  syncSources: async (projectId: number) => {\n    set(state => ({\n      syncStatus: { ...state.syncStatus, syncing: true, progress: 0 }\n    }));\n    \n    try {\n      const client = getClient();\n      // await client.syncSources(projectId);\n      throw new Error('syncSources API method not available');\n      \n      // Refresh sources after sync\n      await get().fetchSources(projectId);\n      \n      set(state => ({\n        syncStatus: {\n          syncing: false,\n          lastSync: new Date().toISOString(),\n          progress: 100,\n        }\n      }));\n      \n      toast.success('Sources synchronized successfully');\n    } catch (error) {\n      set(state => ({\n        syncStatus: { ...state.syncStatus, syncing: false },\n        error: error instanceof Error ? error.message : 'Failed to sync sources',\n      }));\n      toast.error('Failed to sync sources');\n      throw error;\n    }\n  },\n\n  setSearchQuery: (query: string) => {\n    set({ searchQuery: query });\n  },\n\n  setFilter: (filter: Partial<SourcesState['filter']>) => {\n    set(state => ({\n      filter: { ...state.filter, ...filter },\n    }));\n  },\n\n  selectSource: (source: Source | null) => {\n    set({ currentSource: source });\n  },\n\n  reset: () => {\n    set({\n      sources: [],\n      currentSource: null,\n      loading: false,\n      error: null,\n      searchQuery: '',\n      filter: {\n        status: 'all',\n        type: 'all',\n        sortBy: 'updated_at',\n        sortOrder: 'desc',\n      },\n      syncStatus: {\n        syncing: false,\n      },\n    });\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { UserProfileStore, UserProfile } from '@/types';\n\n// CustomGPT.ai API Response format\ninterface CustomGPTResponse<T> {\n  status: 'success' | 'error';\n  data: T;\n}\n\nexport const useProfileStore = create<UserProfileStore>()(\n  persist(\n    (set, get) => ({\n      // Initial State\n      profile: null,\n      loading: false,\n      error: null,\n\n      // Profile Management - GET /api/v1/user\n      fetchProfile: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.getUserProfile();\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n          } else {\n            throw new Error('Failed to fetch profile');\n          }\n        } catch (error: any) {\n          console.error('Failed to fetch profile:', error);\n          \n          let errorMessage = 'Failed to fetch profile';\n          \n          if (error.status === 401) {\n            const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : null;\n            const isDemoMode = deploymentMode === 'demo';\n            if (isDemoMode) {\n              errorMessage = 'API key authentication failed. Please check your API key.';\n              toast.error('Authentication failed. Please check your API key in demo settings.');\n            } else {\n              errorMessage = 'Authentication required. Please check your API key configuration.';\n              toast.error('Authentication failed. Please check your API key configuration.');\n            }\n          } else if (error.status === 500) {\n            errorMessage = 'Server error occurred. Please try again later.';\n            toast.error('Server error. Please try again later.');\n          } else {\n            toast.error('Failed to load profile');\n          }\n          \n          set({ \n            error: errorMessage,\n            loading: false \n          });\n        }\n      },\n\n      // Profile Update - POST /api/v1/user (multipart/form-data)\n      updateProfile: async (name: string, profilePhoto?: File) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Create FormData for multipart request\n          const formData = new FormData();\n          formData.append('name', name);\n          \n          if (profilePhoto) {\n            formData.append('profile_photo', profilePhoto);\n          }\n          \n          const response = await client.updateUserProfile(formData);\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n            toast.success('Profile updated successfully');\n          } else {\n            throw new Error('Failed to update profile');\n          }\n        } catch (error: any) {\n          console.error('Failed to update profile:', error);\n          \n          let errorMessage = 'Failed to update profile';\n          \n          if (error.status === 401) {\n            const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : null;\n            const isDemoMode = deploymentMode === 'demo';\n            if (isDemoMode) {\n              errorMessage = 'API key authentication failed. Please check your API key.';\n              toast.error('Authentication failed. Please check your API key in demo settings.');\n            } else {\n              errorMessage = 'Authentication required. Please check your API key configuration.';\n              toast.error('Authentication failed. Please check your API key configuration.');\n            }\n          } else if (error.status === 422 || error.status === 400) {\n            // Handle validation errors\n            if (error.data?.data?.errors) {\n              const errors = error.data.data.errors;\n              if (errors.profile_photo && Array.isArray(errors.profile_photo)) {\n                errorMessage = errors.profile_photo[0];\n                toast.error(errorMessage);\n              } else {\n                // Handle other validation errors\n                const firstError = Object.values(errors).flat()[0] as string;\n                errorMessage = firstError || 'Validation error occurred';\n                toast.error(errorMessage);\n              }\n            } else {\n              errorMessage = error.message || 'Validation error occurred';\n              toast.error(errorMessage);\n            }\n          } else if (error.status === 500) {\n            errorMessage = 'Server error occurred. Please try again later.';\n            toast.error('Server error. Please try again later.');\n          } else {\n            errorMessage = error.message || 'Failed to update profile';\n            toast.error(errorMessage);\n          }\n          \n          set({ \n            error: errorMessage,\n            loading: false \n          });\n        }\n      },\n\n      // Utility\n      reset: () => {\n        set({\n          profile: null,\n          loading: false,\n          error: null,\n        });\n      },\n    }),\n    {\n      name: 'profile-store',\n      partialize: (state) => ({\n        profile: state.profile,\n      }),\n    }\n  )\n);","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport type { AgentLicense } from '@/types';\n\ninterface LicenseStore {\n  licenses: AgentLicense[];\n  loading: boolean;\n  error: string | null;\n  \n  fetchLicenses: (projectId: number) => Promise<void>;\n  createLicense: (projectId: number, name: string) => Promise<AgentLicense>;\n  updateLicense: (projectId: number, licenseId: string, name: string) => Promise<void>;\n  deleteLicense: (projectId: number, licenseId: string) => Promise<void>;\n  clearError: () => void;\n}\n\nexport const useLicenseStore = create<LicenseStore>((set, get) => ({\n  licenses: [],\n  loading: false,\n  error: null,\n\n  fetchLicenses: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getLicenses(projectId);\n      \n      logger.info('LICENSES', 'API Response', {\n        projectId,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataType: Array.isArray(response?.data) ? 'array' : typeof response?.data,\n        dataLength: Array.isArray(response?.data) ? response.data.length : 0\n      });\n      \n      // Handle response format based on API documentation\n      const licenses = Array.isArray(response.data) ? response.data : [];\n      \n      logger.info('LICENSES', 'Processed licenses', {\n        count: licenses.length,\n        licenses: licenses.map((l: any) => ({ \n          name: l.name, \n          key: l.key?.substring(0, 8) + '...', \n          project_id: l.project_id \n        }))\n      });\n      \n      set({ \n        licenses,\n        loading: false \n      });\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to fetch licenses', {\n        projectId,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        responseText: error?.responseText || 'No response text'\n      });\n      \n      // Handle JSON parsing errors specifically\n      let errorMessage = 'Failed to fetch licenses';\n      if (error?.status === 403 || error?.data?.message?.includes('not allowed')) {\n        // This is expected for some projects - don't show an error\n        errorMessage = '';\n        set({ \n          error: null,\n          loading: false,\n          licenses: []\n        });\n        throw error; // Still throw to handle in component\n      } else if (error?.message?.includes('Unexpected token')) {\n        errorMessage = 'API returned invalid response format. This may be a server configuration issue.';\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      \n      if (errorMessage) {\n        set({ \n          error: errorMessage,\n          loading: false,\n          licenses: []\n        });\n      }\n    }\n  },\n\n  createLicense: async (projectId: number, name: string) => {\n    set({ loading: true, error: null });\n    \n    logger.info('LICENSES', 'Creating license', {\n      projectId,\n      name\n    });\n    \n    try {\n      const client = getClient();\n      const response = await client.createLicense(projectId, { name });\n      \n      logger.info('LICENSES', 'Create license API response', {\n        projectId,\n        name,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataStructure: response?.data ? Object.keys(response.data) : [],\n        licenseKey: response.data?.licenseKey?.substring(0, 8) + '...'\n      });\n      \n      // Handle response format based on API documentation\n      // Response contains { license: {...}, licenseKey: \"...\" }\n      const newLicense = response.data?.license || response.data;\n      \n      if (newLicense) {\n        logger.info('LICENSES', 'New license created', {\n          licenseName: newLicense.name,\n          licenseKey: newLicense.key?.substring(0, 8) + '...',\n          project_id: newLicense.project_id\n        });\n        \n        set(state => ({\n          licenses: [...state.licenses, newLicense],\n          loading: false\n        }));\n      }\n      \n      return newLicense;\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to create license', {\n        projectId,\n        name,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        responseText: error?.responseText || 'No response text'\n      });\n      \n      // Handle JSON parsing errors specifically\n      let errorMessage = 'Failed to create license';\n      if (error?.message?.includes('Unexpected token')) {\n        errorMessage = 'API returned invalid response format. This may be a server configuration issue.';\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  updateLicense: async (projectId: number, licenseId: string, name: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.updateLicense(projectId, licenseId, { name });\n      \n      logger.info('LICENSES', 'Updated license', {\n        projectId,\n        licenseId,\n        name\n      });\n      \n      // Handle response format based on API documentation\n      const updatedLicense = (response as any).license || response.data;\n      \n      if (updatedLicense) {\n        set(state => ({\n          licenses: state.licenses.map(license => \n            license.key === licenseId ? { ...license, name, updated_at: new Date().toISOString() } : license\n          ),\n          loading: false\n        }));\n      }\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to update license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to update license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  deleteLicense: async (projectId: number, licenseId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteLicense(projectId, licenseId);\n      \n      logger.info('LICENSES', 'Deleted license', {\n        projectId,\n        licenseId\n      });\n      \n      set(state => ({\n        licenses: state.licenses.filter(license => license.key !== licenseId),\n        loading: false\n      }));\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to delete license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to delete license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  clearError: () => {\n    set({ error: null });\n  }\n}));","/**\n * Button Component\n * \n * Reusable button component with multiple variants and sizes.\n * Built with class-variance-authority for type-safe styling.\n * \n * Variants:\n * - default: Primary brand button with shadow\n * - destructive: Red danger button for destructive actions\n * - outline: Secondary button with border\n * - secondary: Gray background button\n * - ghost: Transparent button with hover state\n * - link: Text-only button styled as link\n * \n * Sizes:\n * - default: Standard size (h-10)\n * - sm: Small size (h-8)\n * - lg: Large size (h-12)\n * - icon: Square icon button (10x10)\n * \n * Features:\n * - Full keyboard accessibility\n * - Focus ring for keyboard navigation\n * - Disabled state handling\n * - Smooth transitions\n * - Responsive to all button HTML attributes\n * \n * Usage examples:\n * <Button>Click me</Button>\n * <Button variant=\"destructive\">Delete</Button>\n * <Button size=\"sm\" variant=\"outline\">Cancel</Button>\n * <Button size=\"icon\" variant=\"ghost\"><Icon /></Button>\n * \n * Features:\n * - Comprehensive variant system with brand-consistent styling\n * - Professional color schemes aligned with design guidelines\n * - Loading states with integrated spinner animations\n * - Button group functionality for complex interfaces\n * - Full icon support with flexible positioning options\n */\n\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\n/**\n * Button variant configuration using class-variance-authority\n * \n * Base classes apply to all buttons, then variant-specific\n * classes are added based on the variant and size props.\n */\nconst buttonVariants = cva(\n  // Enhanced base classes with premium feel\n  'relative inline-flex items-center justify-center font-medium transition-all duration-200 ease-out focus-visible:outline-none disabled:opacity-50 disabled:cursor-not-allowed disabled:pointer-events-none transform-gpu active:scale-[0.98]',\n  {\n    variants: {\n      variant: {\n        default: [\n          'bg-primary text-primary-foreground shadow-sm',\n          'hover:bg-primary-hover hover:shadow-md hover:scale-[1.02]',\n          'focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2',\n          'active:bg-primary-active',\n          'transition-all duration-200',\n        ].join(' '),\n        destructive: [\n          'bg-destructive text-destructive-foreground shadow-sm',\n          'hover:bg-destructive/90 hover:shadow-md hover:scale-[1.02]',\n          'focus-visible:ring-2 focus-visible:ring-destructive/50 focus-visible:ring-offset-2',\n          'active:bg-destructive/80',\n        ].join(' '),\n        outline: [\n          'border border-input bg-background/50 backdrop-blur-sm',\n          'hover:bg-accent hover:text-accent-foreground hover:border-accent',\n          'focus-visible:ring-2 focus-visible:ring-accent/50 focus-visible:ring-offset-2',\n          'transition-all duration-200',\n        ].join(' '),\n        secondary: [\n          'bg-secondary text-secondary-foreground',\n          'hover:bg-secondary/80 hover:shadow-sm',\n          'focus-visible:ring-2 focus-visible:ring-secondary/50 focus-visible:ring-offset-2',\n        ].join(' '),\n        ghost: [\n          'hover:bg-accent hover:text-accent-foreground',\n          'focus-visible:ring-2 focus-visible:ring-accent/50 focus-visible:ring-offset-2',\n          'data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n        ].join(' '),\n        link: [\n          'text-primary underline-offset-4 hover:underline',\n          'focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2',\n          'hover:text-primary-hover',\n        ].join(' '),\n        premium: [\n          'bg-gradient-to-r from-primary to-primary-hover text-primary-foreground',\n          'shadow-md hover:shadow-lg hover:scale-[1.02]',\n          'focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2',\n          'before:absolute before:inset-0 before:bg-white/20 before:opacity-0',\n          'hover:before:opacity-100 before:transition-opacity before:duration-200',\n          'overflow-hidden',\n        ].join(' '),\n      },\n      size: {\n        default: 'h-10 rounded-lg px-4 py-2 text-sm',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-12 rounded-lg px-8 text-base',\n        xl: 'h-14 rounded-xl px-10 text-lg',\n        icon: 'h-10 w-10 rounded-lg',\n        'icon-sm': 'h-8 w-8 rounded-md',\n        'icon-lg': 'h-12 w-12 rounded-lg',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\n/**\n * Button component props\n * \n * Extends standard HTML button attributes with variant props\n * @property variant - Visual style variant\n * @property size - Button size preset\n * @property asChild - Whether to render as child component (for composition)\n */\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  loading?: boolean;\n  loadingText?: string;\n}\n\n/**\n * Button Component\n * \n * Forward ref component for proper ref handling in forms\n * and other use cases requiring direct DOM access.\n */\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ \n    className, \n    variant, \n    size, \n    asChild = false, \n    loading = false,\n    loadingText,\n    children,\n    disabled,\n    onClick,\n    ...props \n  }, ref) => {\n    const [ripples, setRipples] = React.useState<Array<{ x: number; y: number; id: number }>>([]);\n    \n    const handleClick = React.useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      if (loading || disabled) return;\n      \n      // Add ripple effect\n      const button = e.currentTarget;\n      const rect = button.getBoundingClientRect();\n      const rippleX = e.clientX - rect.left;\n      const rippleY = e.clientY - rect.top;\n      const rippleId = Date.now();\n      \n      setRipples(prev => [...prev, { x: rippleX, y: rippleY, id: rippleId }]);\n      \n      // Remove ripple after animation\n      setTimeout(() => {\n        setRipples(prev => prev.filter(ripple => ripple.id !== rippleId));\n      }, 600);\n      \n      // Call original onClick\n      onClick?.(e);\n    }, [loading, disabled, onClick]);\n    \n    return (\n      <button\n        className={cn(\n          buttonVariants({ variant, size, className }),\n          'relative overflow-hidden',\n          loading && 'cursor-wait'\n        )}\n        ref={ref}\n        disabled={loading || disabled}\n        onClick={handleClick}\n        {...props}\n      >\n        {/* Ripple effects */}\n        {ripples.map(ripple => (\n          <span\n            key={ripple.id}\n            className=\"absolute pointer-events-none\"\n            style={{\n              left: ripple.x,\n              top: ripple.y,\n              transform: 'translate(-50%, -50%)',\n            }}\n          >\n            <span className=\"block animate-ripple rounded-full bg-white/30 dark:bg-white/20\" \n              style={{\n                width: 0,\n                height: 0,\n                animation: 'ripple-expand 0.6s ease-out forwards',\n              }}\n            />\n          </span>\n        ))}\n        \n        {/* Loading spinner */}\n        {loading && (\n          <span className=\"absolute inset-0 flex items-center justify-center bg-inherit\">\n            <svg\n              className=\"animate-spin h-4 w-4\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              />\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              />\n            </svg>\n          </span>\n        )}\n        \n        {/* Button content */}\n        <span className={cn(\n          'relative z-10 inline-flex items-center',\n          loading && 'opacity-0'\n        )}>\n          {children}\n        </span>\n        \n        {/* Loading text */}\n        {loading && loadingText && (\n          <span className=\"absolute inset-0 flex items-center justify-center\">\n            <span className=\"ml-6\">{loadingText}</span>\n          </span>\n        )}\n      </button>\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };","/**\n * Avatar Component\n * \n * Reusable avatar component that displays agent avatars with fallback to default icons.\n * Supports different sizes, shapes, and fallback icons for various use cases.\n * \n * Features:\n * - Image loading with error handling\n * - Multiple size variants\n * - Customizable fallback icons\n * - Consistent styling across the application\n * - Accessibility support\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot, User } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport type { Agent } from '@/types';\n\nexport interface AvatarProps {\n  /** Agent/project data containing avatar information */\n  agent?: Agent | null;\n  /** Avatar image URL (alternative to agent prop) */\n  src?: string;\n  /** Alt text for the image */\n  alt?: string;\n  /** Size variant */\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  /** Shape variant */\n  shape?: 'circle' | 'rounded' | 'square';\n  /** Fallback icon type */\n  fallback?: 'bot' | 'user' | 'none';\n  /** Whether this avatar represents a selected/active state */\n  isSelected?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Avatar size configurations\n */\nconst sizeVariants = {\n  xs: {\n    container: 'w-4 h-4',\n    icon: 'w-2 h-2'\n  },\n  sm: {\n    container: 'w-6 h-6', \n    icon: 'w-3 h-3'\n  },\n  md: {\n    container: 'w-8 h-8',\n    icon: 'w-4 h-4'\n  },\n  lg: {\n    container: 'w-10 h-10',\n    icon: 'w-5 h-5'\n  },\n  xl: {\n    container: 'w-12 h-12',\n    icon: 'w-6 h-6'\n  }\n};\n\n/**\n * Avatar shape configurations\n */\nconst shapeVariants = {\n  circle: 'rounded-full',\n  rounded: 'rounded-lg', \n  square: 'rounded-none'\n};\n\n/**\n * Avatar Component\n * \n * Displays agent avatar with proper fallbacks and error handling.\n * \n * @param agent - Agent object containing avatar settings\n * @param src - Direct image URL (overrides agent avatar)\n * @param alt - Alt text for accessibility\n * @param size - Size variant (xs, sm, md, lg, xl)\n * @param shape - Shape variant (circle, rounded, square)\n * @param fallback - Fallback icon type\n * @param isSelected - Whether avatar represents selected state\n * @param className - Additional CSS classes\n */\nexport const Avatar: React.FC<AvatarProps> = ({\n  agent,\n  src,\n  alt,\n  size = 'md',\n  shape = 'circle',\n  fallback = 'bot',\n  isSelected = false,\n  className\n}) => {\n  const [imageError, setImageError] = React.useState(false);\n  \n  // Determine the avatar URL from props or agent settings\n  const avatarUrl = src || agent?.settings?.chatbot_avatar;\n  \n  // Generate alt text if not provided\n  const altText = alt || (agent?.project_name ? `${agent.project_name} avatar` : 'Avatar');\n  \n  // Get size and shape classes\n  const sizeClasses = sizeVariants[size];\n  const shapeClass = shapeVariants[shape];\n  \n  // Determine background color based on state\n  const backgroundClass = isSelected \n    ? 'bg-primary shadow-md' \n    : 'bg-muted hover:bg-accent transition-all duration-200';\n  \n  // Handle image load error\n  const handleImageError = () => {\n    setImageError(true);\n  };\n  \n  // Reset error state when avatar URL changes\n  React.useEffect(() => {\n    setImageError(false);\n  }, [avatarUrl]);\n  \n  // Render fallback icon\n  const renderFallbackIcon = () => {\n    if (fallback === 'none') return null;\n    \n    const iconClass = cn(\n      sizeClasses.icon,\n      isSelected ? 'text-primary-foreground' : 'text-muted-foreground'\n    );\n    \n    switch (fallback) {\n      case 'user':\n        return <User className={iconClass} />;\n      case 'bot':\n      default:\n        return <Bot className={iconClass} />;\n    }\n  };\n  \n  return (\n    <div className={cn(\n      'relative flex items-center justify-center flex-shrink-0 overflow-hidden',\n      'ring-2 ring-transparent',\n      'hover:ring-primary/20 hover:scale-105',\n      'transition-all duration-200',\n      isSelected && 'ring-primary ring-offset-2 ring-offset-background',\n      sizeClasses.container,\n      shapeClass,\n      backgroundClass,\n      className\n    )}>\n      {avatarUrl && !imageError ? (\n        <img\n          src={avatarUrl}\n          alt={altText}\n          className=\"w-full h-full object-cover\"\n          onError={handleImageError}\n          loading=\"lazy\"\n        />\n      ) : (\n        renderFallbackIcon()\n      )}\n      {/* Online indicator (optional) */}\n      {isSelected && (\n        <div className=\"absolute -bottom-0.5 -right-0.5 h-3 w-3 rounded-full bg-success border-2 border-background\" />\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Avatar Component\n * \n * Specialized avatar component for agent/project displays.\n * Uses 'bot' fallback by default and extracts name for alt text.\n * \n * @param agent - Agent object\n * @param size - Size variant\n * @param isSelected - Selection state\n * @param className - Additional classes\n */\nexport const AgentAvatar: React.FC<{\n  agent?: Agent | null;\n  size?: AvatarProps['size'];\n  isSelected?: boolean;\n  className?: string;\n}> = ({ agent, size = 'md', isSelected = false, className }) => {\n  return (\n    <Avatar\n      agent={agent}\n      size={size}\n      shape=\"circle\"\n      fallback=\"bot\"\n      isSelected={isSelected}\n      alt={agent?.project_name ? `${agent.project_name} avatar` : 'Agent avatar'}\n      className={className}\n    />\n  );\n};\n\n/**\n * User Avatar Component\n * \n * Specialized avatar component for user displays.\n * Uses 'user' fallback by default.\n * \n * @param src - Avatar image URL\n * @param size - Size variant  \n * @param className - Additional classes\n */\nexport const UserAvatar: React.FC<{\n  src?: string;\n  size?: AvatarProps['size'];\n  className?: string;\n}> = ({ src, size = 'md', className }) => {\n  return (\n    <Avatar\n      src={src}\n      size={size}\n      shape=\"circle\"\n      fallback=\"user\"\n      alt=\"User avatar\"\n      className={className}\n    />\n  );\n};","/**\n * Citation List Component\n * \n * Displays a list of source citations from the AI's response.\n * Shows where the information came from with expandable details.\n * \n * Features:\n * - Expandable citation cards\n * - Confidence score visualization\n * - Direct source links\n * - Show more/less functionality\n * - Smooth expand/collapse animations\n * - Citation numbering\n * - View details modal integration\n * \n * UI/UX:\n * - Compact card design\n * - Progressive disclosure pattern\n * - Visual confidence indicators\n * - Hover states for interactivity\n * - Staggered animation on load\n * \n * Citation Display:\n * - Title and source URL\n * - Content preview\n * - Confidence percentage\n * - External link to source\n * - Details button for modal\n * \n * Features:\n * - Advanced citation filtering and intelligent search capabilities\n * - Professional export functionality for research workflows\n * - Enhanced confidence visualization with detailed analytics\n * - Smart citation grouping by domain and source type\n * - Interactive tooltips and one-click copy functionality\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  BookOpen, \n  ChevronDown, \n  ExternalLink,\n  FileText \n} from 'lucide-react';\n\nimport type { CitationProps, Citation } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\n/**\n * Props for individual citation card\n * \n * @property citation - Citation data object\n * @property index - Display index (1-based)\n * @property isExpanded - Whether card is expanded\n * @property onToggle - Toggle expansion callback\n * @property onClick - Optional click handler for details\n * @property onPreviewClick - Optional click handler for file preview\n */\ninterface CitationCardProps {\n  citation: Citation;\n  index: number;\n  isExpanded: boolean;\n  onToggle: () => void;\n  onClick?: (citation: Citation) => void;\n  onPreviewClick?: (citation: Citation) => void;\n}\n\n/**\n * Citation Card Component\n * \n * Individual citation with expandable details.\n * Shows title, source, content, and confidence score.\n */\nconst CitationCard: React.FC<CitationCardProps> = ({\n  citation,\n  index,\n  isExpanded,\n  onToggle,\n  onClick,\n  onPreviewClick,\n}) => {\n  return (\n    <div className=\"border border-border rounded-lg overflow-hidden transition-all hover:border-border/80\">\n      <button\n        onClick={onToggle}\n        className=\"w-full px-3 py-2 flex items-center gap-3 hover:bg-accent transition-colors text-left\"\n      >\n        {/* Citation Index */}\n        <div className=\"flex-shrink-0 w-6 h-6 rounded bg-brand-100 flex items-center justify-center\">\n          <span className=\"text-xs font-medium text-brand-700\">{index}</span>\n        </div>\n        \n        {/* Citation Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"font-medium text-sm text-foreground line-clamp-1\">\n            {citation.title}\n          </div>\n          <div className=\"text-xs text-muted-foreground line-clamp-1\">\n            {citation.source || citation.url}\n          </div>\n        </div>\n        \n        {/* Expand Icon */}\n        <ChevronDown\n          className={cn(\n            'w-4 h-4 text-muted-foreground transition-transform flex-shrink-0',\n            isExpanded && 'rotate-180'\n          )}\n        />\n      </button>\n      \n      {/* Expanded Content */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: 'auto', opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"px-3 py-2 border-t border-border bg-accent\">\n              <p className=\"text-sm text-foreground mb-2\">\n                {citation.content}\n              </p>\n              \n              \n              {/* Actions */}\n              <div className=\"flex items-center gap-2\">\n                {citation.url && (\n                  <a\n                    href={citation.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"inline-flex items-center gap-1 text-xs text-brand-600 hover:text-brand-700 transition-colors\"\n                  >\n                    View source\n                    <ExternalLink className=\"w-3 h-3\" />\n                  </a>\n                )}\n                \n                {onClick && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onClick(citation)}\n                    className=\"h-6 px-2 text-xs\"\n                  >\n                    View details\n                  </Button>\n                )}\n                \n                {onPreviewClick && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onPreviewClick(citation)}\n                    className=\"h-6 px-2 text-xs\"\n                  >\n                    <FileText className=\"w-3 h-3 mr-1\" />\n                    Preview file\n                  </Button>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\n/**\n * Citation List Component\n * \n * Main component that renders a list of citations with progressive disclosure.\n * Handles expansion state and show more/less functionality.\n * \n * @param citations - Array of citation objects to display\n * @param onCitationClick - Optional handler for citation detail clicks\n * @param maxVisible - Maximum citations to show initially (default: 5)\n * @param className - Additional CSS classes\n */\nexport const CitationList: React.FC<CitationProps & { onPreviewClick?: (citation: Citation) => void }> = ({ \n  citations, \n  onCitationClick,\n  onPreviewClick,\n  maxVisible = 5,\n  className \n}) => {\n  // Track which citations are expanded\n  const [expanded, setExpanded] = useState<Set<string>>(new Set());\n  // Track whether to show all citations or just maxVisible\n  const [showAll, setShowAll] = useState(false);\n  \n  const visibleCitations = showAll ? citations : citations.slice(0, maxVisible);\n  const hasMore = citations.length > maxVisible;\n\n  /**\n   * Toggle citation expansion state\n   * \n   * Uses Set for efficient lookup and update of expanded citations\n   */\n  const toggleExpanded = (citationId: string) => {\n    const newExpanded = new Set(expanded);\n    if (expanded.has(citationId)) {\n      newExpanded.delete(citationId);\n    } else {\n      newExpanded.add(citationId);\n    }\n    setExpanded(newExpanded);\n  };\n\n  if (citations.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={cn('mt-4 space-y-2', className)}>\n      {/* Header */}\n      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n        <BookOpen className=\"w-4 h-4\" />\n        <span className=\"font-medium\">Sources</span>\n        <span className=\"text-muted-foreground\">({citations.length})</span>\n        \n        {hasMore && (\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => setShowAll(!showAll)}\n            className=\"ml-auto h-6 px-2 text-xs\"\n          >\n            {showAll ? 'Show less' : `Show all ${citations.length}`}\n          </Button>\n        )}\n      </div>\n      \n      {/* Citations */}\n      <div className=\"space-y-2\">\n        <AnimatePresence>\n          {visibleCitations.map((citation, idx) => (\n            <motion.div\n              key={citation.id}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.2, delay: idx * 0.05 }}\n            >\n              <CitationCard\n                citation={citation}\n                index={idx + 1}\n                isExpanded={expanded.has(citation.id)}\n                onToggle={() => toggleExpanded(citation.id)}\n                onClick={onCitationClick}\n                onPreviewClick={onPreviewClick}\n              />\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n      \n      {/* Load More Button */}\n      {hasMore && !showAll && (\n        <div className=\"pt-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setShowAll(true)}\n            className=\"w-full\"\n          >\n            Show {citations.length - maxVisible} more sources\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Message Details Component\n * \n * Displays additional metadata and information about a message\n * that's not shown in the main UI. Includes user ID, conversation ID,\n * metadata, and timestamps.\n * \n * Features:\n * - Collapsible details section\n * - Formatted metadata display\n * - Copy functionality for technical details\n * - Responsive layout\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { ChevronDown, ChevronUp, Copy, Info } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { cn, copyToClipboard } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport type { MessageDetails as MessageDetailsType } from '@/types';\n\ninterface MessageDetailsProps {\n  /** The message details to display */\n  details?: MessageDetailsType;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Format a key name to be more readable\n */\nconst formatKey = (key: string): string => {\n  return key\n    .split('_')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n};\n\n/**\n * Format a value for display\n */\nconst formatValue = (value: any): string => {\n  if (value === null || value === undefined) {\n    return 'N/A';\n  }\n  if (typeof value === 'object') {\n    return JSON.stringify(value, null, 2);\n  }\n  return String(value);\n};\n\nexport const MessageDetails: React.FC<MessageDetailsProps> = ({ details, className }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  if (!details) {\n    return null;\n  }\n\n  const handleCopyAll = async () => {\n    const detailsText = JSON.stringify(details, null, 2);\n    const success = await copyToClipboard(detailsText);\n    if (success) {\n      toast.success('Details copied to clipboard');\n    }\n  };\n\n  const handleCopyValue = async (value: string) => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      toast.success('Value copied to clipboard');\n    }\n  };\n\n  return (\n    <div className={cn('mt-2', className)}>\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"flex items-center gap-1 text-xs text-muted-foreground hover:text-foreground transition-colors\"\n      >\n        <Info className=\"w-3 h-3\" />\n        <span>More Details</span>\n        {isExpanded ? (\n          <ChevronUp className=\"w-3 h-3\" />\n        ) : (\n          <ChevronDown className=\"w-3 h-3\" />\n        )}\n      </button>\n\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"mt-2 p-3 bg-accent rounded-lg border border-border\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className=\"text-xs font-semibold text-foreground\">Message Details</h4>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={handleCopyAll}\n                  className=\"h-6 px-2 text-xs\"\n                >\n                  <Copy className=\"w-3 h-3 mr-1\" />\n                  Copy All\n                </Button>\n              </div>\n\n              <div className=\"space-y-2\">\n                {/* Basic Details */}\n                {details.user_id !== undefined && (\n                  <DetailRow\n                    label=\"User ID\"\n                    value={String(details.user_id)}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n                \n                {details.conversation_id !== undefined && (\n                  <DetailRow\n                    label=\"Conversation ID\"\n                    value={String(details.conversation_id)}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n                \n                {details.updated_at && (\n                  <DetailRow\n                    label=\"Updated At\"\n                    value={new Date(details.updated_at).toLocaleString()}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n\n                {/* Metadata Section */}\n                {details.metadata && (\n                  <div className=\"mt-3 pt-2 border-t border-border\">\n                    <h5 className=\"text-xs font-semibold text-muted-foreground mb-2\">Metadata</h5>\n                    \n                    {details.metadata.user_ip && (\n                      <DetailRow\n                        label=\"User IP\"\n                        value={details.metadata.user_ip}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                    \n                    {details.metadata.user_agent && (\n                      <DetailRow\n                        label=\"User Agent\"\n                        value={details.metadata.user_agent}\n                        onCopy={handleCopyValue}\n                        truncate\n                      />\n                    )}\n                    \n                    {details.metadata.external_id && (\n                      <DetailRow\n                        label=\"External ID\"\n                        value={details.metadata.external_id}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                    \n                    {details.metadata.request_source && (\n                      <DetailRow\n                        label=\"Request Source\"\n                        value={details.metadata.request_source}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\ninterface DetailRowProps {\n  label: string;\n  value: string;\n  onCopy: (value: string) => void;\n  truncate?: boolean;\n}\n\nconst DetailRow: React.FC<DetailRowProps> = ({ label, value, onCopy, truncate }) => {\n  return (\n    <div className=\"flex items-start justify-between gap-2 text-xs\">\n      <span className=\"text-muted-foreground font-medium whitespace-nowrap\">{label}:</span>\n      <div className=\"flex items-center gap-1 flex-1 min-w-0\">\n        <span \n          className={cn(\n            \"text-foreground break-all\",\n            truncate && \"truncate\"\n          )}\n          title={truncate ? value : undefined}\n        >\n          {value}\n        </span>\n        <button\n          onClick={() => onCopy(value)}\n          className=\"p-1 text-muted-foreground hover:text-foreground transition-colors flex-shrink-0\"\n          title=\"Copy value\"\n        >\n          <Copy className=\"w-3 h-3\" />\n        </button>\n      </div>\n    </div>\n  );\n};","/**\n * Message Component\n * \n * Displays individual chat messages with rich formatting support.\n * \n * Features:\n * - Markdown rendering with GitHub Flavored Markdown\n * - Syntax highlighting for code blocks\n * - Copy functionality for code and messages\n * - User feedback (thumbs up/down)\n * - Citation display and interaction\n * - Animated entrance and streaming cursor\n * - Different layouts for user vs assistant messages\n * \n * Customization:\n * - Modify avatar styles in the component\n * - Adjust markdown prose styles\n * - Customize code block themes (currently using oneDark)\n * - Change animation settings\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { motion } from 'framer-motion';\nimport { \n  Bot, \n  User, \n  Copy, \n  ThumbsUp, \n  ThumbsDown, \n  RotateCw,\n  ExternalLink \n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { MessageProps, Citation, ChatMessage } from '@/types';\nimport { cn, copyToClipboard, formatTimestamp } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { AgentAvatar, UserAvatar } from '@/components/ui/avatar';\nimport { CitationList } from './CitationList';\nimport { MessageDetails } from './MessageDetails';\n\ninterface CodeBlockProps {\n  /** Programming language for syntax highlighting */\n  language: string;\n  /** Code content to display */\n  value: string;\n}\n\n/**\n * CodeBlock Component\n * \n * Renders code with syntax highlighting and a copy button.\n * Uses react-syntax-highlighter with the oneDark theme.\n * Copy button appears on hover.\n */\nconst CodeBlock: React.FC<CodeBlockProps> = ({ language, value }) => {\n  const [copied, setCopied] = useState(false);\n  \n  const handleCopy = async () => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      setCopied(true);\n      toast.success('Code copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    }\n  };\n\n  return (\n    <div className=\"relative group\">\n      <div className=\"absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          onClick={handleCopy}\n          className=\"h-6 px-2 text-xs bg-foreground text-background hover:bg-foreground/90\"\n        >\n          {copied ? 'Copied!' : 'Copy'}\n        </Button>\n      </div>\n      <SyntaxHighlighter\n        language={language}\n        style={oneDark}\n        customStyle={{\n          margin: 0,\n          borderRadius: '0.5rem',\n          fontSize: '0.875rem',\n        }}\n      >\n        {value}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\n/**\n * StreamingCursor Component\n * \n * Animated blinking cursor shown at the end of streaming messages\n * to indicate the AI is still generating content\n */\nconst StreamingCursor: React.FC = () => (\n  <span className=\"inline-block w-0.5 h-4 bg-foreground animate-blink ml-0.5 align-middle\" />\n);\n\ninterface MessageContentProps {\n  /** Markdown content to render */\n  content: string;\n  /** Whether the message is currently being streamed */\n  isStreaming?: boolean;\n}\n\n/**\n * MessageContent Component\n * \n * Renders message content with full markdown support including:\n * - Headers, lists, tables (via GFM)\n * - Inline and block code with syntax highlighting\n * - Links that open in new tabs\n * - Streaming cursor when content is being generated\n */\nconst MessageContent: React.FC<MessageContentProps> = ({ content, isStreaming }) => {\n  // Remove <CONTEXT> and </CONTEXT> tags from the content\n  const cleanedContent = content.replace(/<CONTEXT>|<\\/CONTEXT>/g, '').trim();\n  \n  return (\n    <div className=\"prose prose-sm max-w-none text-foreground\">\n      <ReactMarkdown\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || '');\n            const isInline = !match;\n            return !isInline && match ? (\n              <CodeBlock\n                language={match[1]}\n                value={String(children).replace(/\\n$/, '')}\n                {...props}\n              />\n            ) : (\n              <code className=\"px-1 py-0.5 rounded bg-muted text-sm font-medium\" {...props}>\n                {children}\n              </code>\n            );\n          },\n          a({ href, children }) {\n            return (\n              <a\n                href={href}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-brand-600 hover:text-brand-700 no-underline hover:underline inline-flex items-center gap-1\"\n              >\n                {children}\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            );\n          },\n        }}\n      >\n        {cleanedContent}\n      </ReactMarkdown>\n      {isStreaming && <StreamingCursor />}\n    </div>\n  );\n};\n\ninterface MessageActionsProps {\n  /** The message object containing content and metadata */\n  message: ChatMessage;\n  /** Handler for user feedback */\n  onFeedback?: (feedback: 'like' | 'dislike') => void;\n}\n\n/**\n * MessageActions Component\n * \n * Action buttons for assistant messages:\n * - Copy message content\n * - Thumbs up/down feedback\n * - Regenerate response (placeholder)\n * \n * Only visible on hover for cleaner UI\n */\nconst MessageActions: React.FC<MessageActionsProps> = ({ message, onFeedback }) => {\n  const [feedback, setFeedback] = useState<'like' | 'dislike' | null>(\n    message.feedback || null\n  );\n\n  const handleCopy = async () => {\n    const success = await copyToClipboard(message.content);\n    if (success) {\n      toast.success('Message copied to clipboard');\n    }\n  };\n\n  const handleFeedback = (type: 'like' | 'dislike') => {\n    setFeedback(type);\n    onFeedback?.(type);\n    toast.success('Thanks for your feedback!');\n  };\n\n  const handleRegenerate = () => {\n    // This would trigger message regeneration\n    toast.info('Regenerating response...');\n  };\n\n  return (\n    <div className=\"mt-3 flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleCopy}\n        className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n        title=\"Copy message\"\n      >\n        <Copy className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('like')}\n        className={cn(\n          'h-8 w-8 text-muted-foreground hover:text-foreground',\n          feedback === 'like' && 'text-success hover:text-success/90'\n        )}\n        title=\"Good response\"\n      >\n        <ThumbsUp className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('dislike')}\n        className={cn(\n          'h-8 w-8 text-muted-foreground hover:text-foreground',\n          feedback === 'dislike' && 'text-destructive hover:text-destructive/90'\n        )}\n        title=\"Bad response\"\n      >\n        <ThumbsDown className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleRegenerate}\n        className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n        title=\"Regenerate response\"\n      >\n        <RotateCw className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  );\n};\n\n/**\n * Message Component - Main Export\n * \n * Renders a complete message with avatar, content, citations, and actions.\n * \n * Layout:\n * - User messages: White background, user avatar, plain text\n * - Assistant messages: Gray background, bot avatar, markdown content\n * \n * Features:\n * - Smooth entrance animation with Framer Motion\n * - Hover effects for action visibility\n * - Status indicators (sending, error)\n * - Timestamp display\n * - Citation list integration\n * \n * @param message - The message data to display\n * @param isStreaming - Whether this message is being streamed\n * @param isLast - Whether this is the last message (affects scrolling)\n * @param onCitationClick - Handler for citation interactions\n * @param onFeedback - Handler for user feedback\n * @param className - Additional CSS classes\n */\nexport const Message: React.FC<MessageProps> = ({ \n  message,\n  agent,\n  isStreaming = false, \n  isLast = false,\n  onCitationClick,\n  onPreviewClick,\n  onFeedback,\n  className \n}) => {\n  const isUser = message.role === 'user';\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n      className={cn(\n        'group relative px-4 py-6 transition-colors',\n        isUser ? 'bg-background' : 'bg-muted border-y border-border',\n        'hover:bg-opacity-80',\n        className\n      )}\n    >\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"flex-shrink-0\">\n          {isUser ? (\n            <UserAvatar \n              size=\"md\" \n              className=\"bg-secondary\"\n            />\n          ) : (\n            <AgentAvatar \n              agent={agent}\n              size=\"md\"\n              className=\"bg-background border border-border\"\n            />\n          )}\n        </div>\n        \n        {/* Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          {/* Message Status */}\n          {message.status && message.status !== 'sent' && (\n            <div className=\"mb-2 text-xs text-muted-foreground\">\n              {message.status === 'sending' && 'Sending...'}\n              {message.status === 'error' && (\n                <span className=\"text-red-500\">Failed to send</span>\n              )}\n            </div>\n          )}\n          \n          {/* Message Content */}\n          {isUser ? (\n            <p className=\"text-foreground whitespace-pre-wrap\">{message.content}</p>\n          ) : (\n            <MessageContent \n              content={message.content} \n              isStreaming={isStreaming}\n            />\n          )}\n          \n          {/* Citations */}\n          {message.citations && message.citations.length > 0 && (\n            <CitationList \n              citations={message.citations}\n              onCitationClick={onCitationClick}\n              onPreviewClick={onPreviewClick}\n            />\n          )}\n          \n          {/* Timestamp */}\n          <div className=\"mt-2 text-xs text-muted-foreground\">\n            {formatTimestamp(message.timestamp)}\n          </div>\n          \n          {/* Message Details (hidden by default) */}\n          <MessageDetails details={message.details} />\n          \n          {/* Actions */}\n          {!isUser && !isStreaming && (\n            <MessageActions \n              message={message}\n              onFeedback={onFeedback}\n            />\n          )}\n        </div>\n      </div>\n    </motion.div>\n  );\n};","/**\n * Demo Mode Context\n * \n * Provides runtime demo mode status throughout the app\n */\n\n'use client';\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\ninterface DemoModeContextType {\n  isRuntimeDemoMode: boolean;\n  deploymentMode: 'demo' | 'production' | null;\n  isInitialized: boolean;\n  isFreeTrialMode: boolean;\n}\n\nconst DemoModeContext = createContext<DemoModeContextType>({\n  isRuntimeDemoMode: false,\n  deploymentMode: null,\n  isInitialized: false,\n  isFreeTrialMode: false,\n});\n\nexport const useDemoModeContext = () => {\n  const context = useContext(DemoModeContext);\n  if (!context) {\n    throw new Error('useDemoModeContext must be used within DemoModeProvider');\n  }\n  return context;\n};\n\ninterface DemoModeContextProviderProps {\n  children: React.ReactNode;\n}\n\nexport function DemoModeContextProvider({ children }: DemoModeContextProviderProps) {\n  const [deploymentMode, setDeploymentMode] = useState<'demo' | 'production' | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isFreeTrialMode, setIsFreeTrialMode] = useState(false);\n\n  useEffect(() => {\n    // Get the runtime deployment mode from localStorage\n    const mode = localStorage.getItem('customgpt.deploymentMode') as 'demo' | 'production' | null;\n    const freeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n    setDeploymentMode(mode);\n    setIsFreeTrialMode(freeTrialFlag === 'true');\n    setIsInitialized(true);\n\n    // Listen for storage changes\n    const handleStorageChange = () => {\n      const newMode = localStorage.getItem('customgpt.deploymentMode') as 'demo' | 'production' | null;\n      const newFreeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n      setDeploymentMode(newMode);\n      setIsFreeTrialMode(newFreeTrialFlag === 'true');\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    \n    // Also listen for custom events for same-window updates\n    window.addEventListener('deploymentModeChanged', handleStorageChange);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('deploymentModeChanged', handleStorageChange);\n    };\n  }, []);\n\n  const value: DemoModeContextType = {\n    isRuntimeDemoMode: deploymentMode === 'demo',\n    deploymentMode,\n    isInitialized,\n    isFreeTrialMode,\n  };\n\n  return (\n    <DemoModeContext.Provider value={value}>\n      {children}\n    </DemoModeContext.Provider>\n  );\n}","/**\n * Loading Components\n * \n * Reusable loading indicators for consistent loading states across the app.\n * Includes spinner, skeleton loaders, and full-page loading states.\n */\n\nimport React from 'react';\nimport { cn } from '@/lib/utils';\nimport { Loader2 } from 'lucide-react';\n\ninterface SpinnerProps {\n  /** Size of the spinner */\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  /** Additional CSS classes */\n  className?: string;\n  /** Label for accessibility */\n  label?: string;\n}\n\n/**\n * Spinner Component\n * \n * Animated spinning loader for inline and overlay loading states\n */\nexport const Spinner: React.FC<SpinnerProps> = ({ \n  size = 'md', \n  className,\n  label = 'Loading...'\n}) => {\n  const sizeClasses = {\n    sm: 'h-4 w-4',\n    md: 'h-6 w-6',\n    lg: 'h-8 w-8',\n    xl: 'h-12 w-12'\n  };\n\n  return (\n    <div className=\"relative inline-flex\">\n      <Loader2 \n        className={cn(\n          'animate-spin text-primary transition-all duration-200',\n          sizeClasses[size],\n          className\n        )}\n        aria-label={label}\n      />\n      {/* Subtle glow effect */}\n      <div className={cn(\n        'absolute inset-0 animate-pulse rounded-full bg-primary/20 blur-xl',\n        sizeClasses[size]\n      )} />\n    </div>\n  );\n};\n\ninterface SkeletonProps {\n  /** Additional CSS classes */\n  className?: string;\n  /** Whether to animate the skeleton */\n  animate?: boolean;\n}\n\n/**\n * Skeleton Component\n * \n * Placeholder loading state for content\n */\nexport const Skeleton: React.FC<SkeletonProps> = ({ \n  className,\n  animate = true\n}) => {\n  return (\n    <div\n      className={cn(\n        'relative overflow-hidden rounded-lg bg-muted',\n        animate && 'shimmer',\n        className\n      )}\n    >\n      {animate && (\n        <div className=\"absolute inset-0 -translate-x-full animate-[shimmer_2s_infinite] bg-gradient-to-r from-transparent via-white/10 to-transparent\" />\n      )}\n    </div>\n  );\n};\n\ninterface LoadingDotsProps {\n  /** Size of the dots */\n  size?: 'sm' | 'md' | 'lg';\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * LoadingDots Component\n * \n * Three animated dots for typing/processing indicators\n */\nexport const LoadingDots: React.FC<LoadingDotsProps> = ({ \n  size = 'md',\n  className \n}) => {\n  const sizeClasses = {\n    sm: 'h-1.5 w-1.5',\n    md: 'h-2 w-2',\n    lg: 'h-2.5 w-2.5'\n  };\n\n  return (\n    <div className={cn('flex items-center space-x-1.5', className)}>\n      {[0, 1, 2].map((index) => (\n        <div\n          key={index}\n          className={cn(\n            'rounded-full bg-primary/60',\n            'animate-[pulse_1.4s_ease-in-out_infinite]',\n            sizeClasses[size]\n          )}\n          style={{\n            animationDelay: `${index * 0.15}s`,\n            animationFillMode: 'both',\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\ninterface LoadingOverlayProps {\n  /** Whether the overlay is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Whether to blur the background */\n  blur?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * LoadingOverlay Component\n * \n * Full-screen or container overlay with loading indicator\n */\nexport const LoadingOverlay: React.FC<LoadingOverlayProps> = ({ \n  visible,\n  message,\n  blur = true,\n  className\n}) => {\n  if (!visible) return null;\n\n  return (\n    <div className={cn(\n      'absolute inset-0 z-50 flex items-center justify-center',\n      'bg-background/60 transition-all duration-300',\n      blur && 'backdrop-blur-md',\n      'animate-in fade-in-0 duration-200',\n      className\n    )}>\n      <div className={cn(\n        'flex flex-col items-center space-y-4 p-6',\n        'bg-background/90 backdrop-blur-sm',\n        'rounded-xl border border-border/50',\n        'shadow-xl',\n        'animate-in zoom-in-95 duration-300'\n      )}>\n        <Spinner size=\"lg\" />\n        {message && (\n          <p className=\"text-sm text-muted-foreground font-medium\">{message}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface MessageSkeletonProps {\n  /** Whether this represents an assistant message */\n  isAssistant?: boolean;\n  /** Number of lines to show */\n  lines?: number;\n}\n\n/**\n * MessageSkeleton Component\n * \n * Skeleton loader specifically for chat messages\n */\nexport const MessageSkeleton: React.FC<MessageSkeletonProps> = ({ \n  isAssistant = false,\n  lines = 3\n}) => {\n  return (\n    <div className={cn(\n      'flex gap-3 p-4',\n      isAssistant ? 'bg-muted' : 'bg-background'\n    )}>\n      {/* Avatar */}\n      <Skeleton className=\"h-8 w-8 rounded-full flex-shrink-0\" />\n      \n      {/* Message content */}\n      <div className=\"flex-1 space-y-2\">\n        {Array.from({ length: lines }).map((_, i) => (\n          <Skeleton \n            key={i}\n            className={cn(\n              'h-4',\n              i === lines - 1 ? 'w-3/4' : 'w-full'\n            )}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\ninterface ConversationSkeletonProps {\n  /** Number of conversation items to show */\n  count?: number;\n}\n\n/**\n * ConversationSkeleton Component\n * \n * Skeleton loader for conversation list items\n */\nexport const ConversationSkeleton: React.FC<ConversationSkeletonProps> = ({ \n  count = 3 \n}) => {\n  return (\n    <div className=\"space-y-2 p-2\">\n      {Array.from({ length: count }).map((_, i) => (\n        <div key={i} className=\"p-3 rounded-lg\">\n          <Skeleton className=\"h-4 w-3/4 mb-2\" />\n          <Skeleton className=\"h-3 w-1/2\" />\n        </div>\n      ))}\n    </div>\n  );\n};\n\ninterface LoadingButtonProps {\n  /** Whether the button is in loading state */\n  loading: boolean;\n  /** Button content when not loading */\n  children: React.ReactNode;\n  /** Loading text to display */\n  loadingText?: string;\n  /** Additional CSS classes */\n  className?: string;\n  /** Other button props */\n  [key: string]: any;\n}\n\n/**\n * LoadingButton Component\n * \n * Button with integrated loading state\n */\nexport const LoadingButton: React.FC<LoadingButtonProps> = ({ \n  loading,\n  children,\n  loadingText = 'Loading...',\n  className,\n  disabled,\n  ...props\n}) => {\n  return (\n    <button\n      className={cn(\n        'relative',\n        loading && 'cursor-not-allowed opacity-70',\n        className\n      )}\n      disabled={disabled || loading}\n      {...props}\n    >\n      {loading ? (\n        <span className=\"flex items-center justify-center gap-2\">\n          <Spinner size=\"sm\" />\n          <span>{loadingText}</span>\n        </span>\n      ) : (\n        children\n      )}\n    </button>\n  );\n};\n\ninterface ScreenLoadingProps {\n  /** Whether the screen loading is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Optional icon to show with the loading message */\n  icon?: React.ReactNode;\n  /** Background opacity (0-100) */\n  opacity?: number;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * ScreenLoading Component\n * \n * Full-screen loading overlay for page/screen transitions\n * with customizable message and icon\n */\nexport const ScreenLoading: React.FC<ScreenLoadingProps> = ({\n  visible,\n  message = 'Loading...',\n  icon,\n  opacity = 95,\n  className\n}) => {\n  if (!visible) return null;\n\n  return (\n    <div className={cn(\n      'fixed inset-0 z-[100] flex items-center justify-center',\n      'bg-background/90 backdrop-blur-lg',\n      'transition-all duration-500',\n      'animate-in fade-in-0',\n      className\n    )}>\n      <div className={cn(\n        'flex flex-col items-center space-y-6 p-10',\n        'animate-in zoom-in-95 slide-in-from-bottom-4 duration-500'\n      )}>\n        <div className=\"relative\">\n          {icon ? (\n            <div className={cn(\n              'flex items-center justify-center w-20 h-20',\n              'bg-primary/10 rounded-2xl',\n              'shadow-lg shadow-primary/20',\n              'animate-pulse'\n            )}>\n              {icon}\n            </div>\n          ) : (\n            <Spinner size=\"xl\" />\n          )}\n        </div>\n        {message && (\n          <div className=\"text-center space-y-2\">\n            <p className=\"text-lg font-semibold text-foreground\">{message}</p>\n            <LoadingDots size=\"md\" />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface PageLoadingProps {\n  /** Whether the page loading is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Show skeleton content instead of spinner */\n  showSkeleton?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * PageLoading Component\n * \n * In-page loading state for content areas\n * with optional skeleton loading\n */\nexport const PageLoading: React.FC<PageLoadingProps> = ({\n  visible,\n  message = 'Loading page...',\n  showSkeleton = false,\n  className\n}) => {\n  if (!visible) return null;\n\n  if (showSkeleton) {\n    return (\n      <div className={cn('space-y-4 p-6', className)}>\n        <div className=\"space-y-3\">\n          <Skeleton className=\"h-8 w-1/3\" />\n          <Skeleton className=\"h-4 w-2/3\" />\n          <Skeleton className=\"h-4 w-1/2\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <div key={i} className=\"space-y-3\">\n              <Skeleton className=\"h-32 w-full rounded-lg\" />\n              <Skeleton className=\"h-4 w-3/4\" />\n              <Skeleton className=\"h-3 w-1/2\" />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\n      'flex flex-col items-center justify-center p-12',\n      className\n    )}>\n      <Spinner size=\"lg\" />\n      <p className=\"mt-4 text-gray-600\">{message}</p>\n    </div>\n  );\n};","\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 6, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden\",\n        \"rounded-lg px-3.5 py-2\",\n        \"bg-gray-900 dark:bg-gray-100 backdrop-blur-sm\",\n        \"text-xs font-medium text-white dark:text-gray-900\",\n        \"shadow-lg shadow-black/20\",\n        \"border border-gray-800 dark:border-gray-200\",\n        \"animate-in fade-in-0 zoom-in-95\",\n        \"data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95\",\n        \"data-[side=bottom]:slide-in-from-top-2\",\n        \"data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2\",\n        \"data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    >\n      {props.children}\n      <TooltipPrimitive.Arrow \n        className=\"fill-gray-900 dark:fill-gray-100\"\n        width={8}\n        height={4}\n      />\n    </TooltipPrimitive.Content>\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }","'use client';\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport { Mic, MicOff, Loader2 } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n\ninterface SpeechToTextButtonProps {\n  onTranscription: (text: string) => void;\n  onTranscriptionStart?: () => void;\n  onTranscriptionEnd?: () => void;\n  disabled?: boolean;\n  isMobile?: boolean;\n  className?: string;\n}\n\nexport function SpeechToTextButton({ \n  onTranscription, \n  onTranscriptionStart,\n  onTranscriptionEnd,\n  disabled = false, \n  isMobile = false,\n  className \n}: SpeechToTextButtonProps) {\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [recordingDuration, setRecordingDuration] = useState(0);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n  const recordingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const durationIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const stopRecording = useCallback(() => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      // Don't call onTranscriptionEnd here - let processAudio handle it\n      \n      if (recordingTimeoutRef.current) {\n        clearTimeout(recordingTimeoutRef.current);\n        recordingTimeoutRef.current = null;\n      }\n      \n      if (durationIntervalRef.current) {\n        clearInterval(durationIntervalRef.current);\n        durationIntervalRef.current = null;\n      }\n      \n      setRecordingDuration(0);\n    }\n  }, []);\n\n  const startRecording = useCallback(async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      \n      const mimeType = MediaRecorder.isTypeSupported('audio/webm') \n        ? 'audio/webm' \n        : 'audio/mp4';\n      \n      const mediaRecorder = new MediaRecorder(stream, { mimeType });\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = async () => {\n        const audioBlob = new Blob(audioChunksRef.current, { type: mimeType });\n        stream.getTracks().forEach(track => track.stop());\n        \n        // Process the audio\n        await processAudio(audioBlob);\n      };\n\n      mediaRecorder.start();\n      setIsRecording(true);\n      onTranscriptionStart?.();\n      \n      // Start duration timer\n      const startTime = Date.now();\n      durationIntervalRef.current = setInterval(() => {\n        const elapsed = Math.floor((Date.now() - startTime) / 1000);\n        setRecordingDuration(elapsed);\n      }, 100) as any;\n\n      // Auto-stop recording after 30 seconds\n      recordingTimeoutRef.current = setTimeout(() => {\n        stopRecording();\n        toast.info('Recording stopped after 30 seconds');\n      }, 30000);\n\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      toast.error('Unable to access microphone. Please check your permissions.');\n      onTranscriptionEnd?.();\n    }\n  }, [stopRecording, onTranscriptionStart, onTranscriptionEnd]);\n\n  const processAudio = async (audioBlob: Blob) => {\n    setIsProcessing(true);\n\n    try {\n      // Convert blob to base64 for sending\n      const reader = new FileReader();\n      reader.readAsDataURL(audioBlob);\n      \n      reader.onloadend = async () => {\n        const base64Audio = reader.result as string;\n        const base64Data = base64Audio.split(',')[1];\n\n        // Check for demo mode and add appropriate headers\n        const headers: Record<string, string> = {\n          'Content-Type': 'application/json',\n        };\n        \n        // Add deployment mode header\n        const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n        headers['X-Deployment-Mode'] = deploymentMode;\n        \n        // In demo mode, add OpenAI key from window object if available\n        if (deploymentMode === 'demo' && (window as any).__demoOpenAIKey) {\n          headers['X-OpenAI-API-Key'] = (window as any).__demoOpenAIKey;\n        }\n\n        const response = await fetch('/api/proxy/voice/transcribe', {\n          method: 'POST',\n          headers,\n          body: JSON.stringify({\n            audio: base64Data,\n            mimeType: audioBlob.type,\n          }),\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({ error: 'Transcription failed' }));\n          \n          // Check if it's an OpenAI API key error\n          if (response.status === 500 && errorData.error && errorData.error.includes('OpenAI API key')) {\n            toast.error(errorData.error);\n            throw new Error('OpenAI API key not configured');\n          }\n          \n          throw new Error(errorData.error || 'Transcription failed');\n        }\n\n        const data = await response.json();\n        \n        if (data.text) {\n          onTranscription(data.text);\n          toast.success('Speech transcribed successfully');\n        } else {\n          throw new Error('No transcription received');\n        }\n      };\n\n      reader.onerror = () => {\n        throw new Error('Failed to process audio');\n      };\n\n    } catch (error) {\n      console.error('Transcription error:', error);\n      \n      // Don't show duplicate toast for OpenAI API key error\n      if (error instanceof Error && error.message === 'OpenAI API key not configured') {\n        // Toast already shown above\n      } else if (error instanceof Error && error.message) {\n        toast.error(error.message);\n      } else {\n        toast.error('Failed to transcribe speech. Please try again.');\n      }\n    } finally {\n      setIsProcessing(false);\n      onTranscriptionEnd?.();\n    }\n  };\n\n  const handleClick = () => {\n    if (isRecording) {\n      stopRecording();\n    } else {\n      startRecording();\n    }\n  };\n\n  const isActive = isRecording || isProcessing;\n\n  // Format duration as MM:SS\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button\n            type=\"button\"\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={handleClick}\n            disabled={disabled || isProcessing}\n            className={cn(\n              \"relative text-muted-foreground hover:text-foreground transition-all\",\n              isActive && \"text-red-600 hover:text-red-700\",\n              isRecording && \"animate-pulse bg-red-50 hover:bg-red-100\",\n              className\n            )}\n          >\n            {isProcessing ? (\n              <div className=\"relative\">\n                <Loader2 className={cn(\n                  \"animate-spin\",\n                  isMobile ? \"h-5 w-5\" : \"h-5 w-5\"\n                )} />\n                <span className=\"absolute -bottom-5 left-1/2 -translate-x-1/2 text-[10px] text-muted-foreground whitespace-nowrap\">\n                  Processing...\n                </span>\n              </div>\n            ) : isRecording ? (\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 bg-red-500 rounded-full animate-ping opacity-25\" />\n                <MicOff className={cn(\n                  \"relative z-10\",\n                  isMobile ? \"h-5 w-5\" : \"h-5 w-5\"\n                )} />\n                {/* Recording duration */}\n                {recordingDuration > 0 && (\n                  <span className=\"absolute -bottom-5 left-1/2 -translate-x-1/2 text-[10px] text-red-600 font-medium whitespace-nowrap\">\n                    {formatDuration(recordingDuration)}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <Mic className={cn(isMobile ? \"h-5 w-5\" : \"h-5 w-5\")} />\n            )}\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p>\n            {isProcessing ? 'Processing your speech...' : isRecording ? `Recording... ${formatDuration(recordingDuration)}` : 'Click to start speech-to-text'}\n          </p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}","'use client';\n\nimport React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface AnimatedVoiceIconProps {\n  className?: string;\n  isActive?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nexport function AnimatedVoiceIcon({ \n  className, \n  isActive = false,\n  size = 'md' \n}: AnimatedVoiceIconProps) {\n  const sizeClasses = {\n    sm: 'w-5 h-5',\n    md: 'w-6 h-6',\n    lg: 'w-7 h-7'\n  };\n\n  const barHeights = {\n    sm: ['h-2', 'h-3', 'h-2.5', 'h-3', 'h-2'],\n    md: ['h-3', 'h-4', 'h-3.5', 'h-4', 'h-3'],\n    lg: ['h-3.5', 'h-5', 'h-4.5', 'h-5', 'h-3.5']\n  };\n\n  const bars = size === 'sm' ? barHeights.sm : size === 'md' ? barHeights.md : barHeights.lg;\n\n  return (\n    <div className={cn(\n      'flex items-center justify-center',\n      sizeClasses[size],\n      className\n    )}\n    style={{ gap: '2px' }}>\n      {bars.map((height, index) => (\n        <div\n          key={index}\n          className={cn(\n            'rounded-full transition-all duration-300',\n            height,\n            isActive && 'animate-voice-pulse'\n          )}\n          style={{\n            width: size === 'lg' ? '3px' : size === 'md' ? '2.5px' : '2px',\n            animationDelay: isActive ? `${index * 100}ms` : '0ms',\n            background: isActive \n              ? `linear-gradient(to top, \n                  hsl(${260 + index * 20}, 85%, 55%), \n                  hsl(${320 + index * 20}, 85%, 65%))` \n              : `linear-gradient(to top,\n                  hsl(${260 + index * 15}, 80%, 55%),\n                  hsl(${280 + index * 15}, 80%, 65%))`\n          }}\n        />\n      ))}\n    </div>\n  );\n}","\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-pointer select-none items-center\",\n      \"rounded-md px-3 py-2 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4 transition-transform duration-200 data-[state=open]:rotate-90\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden\",\n      \"rounded-lg border border-gray-200/50 dark:border-gray-800/30\",\n      \"bg-background/95 backdrop-blur-md\",\n      \"p-1.5 text-foreground\",\n      \"shadow-lg shadow-black/10\",\n      \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n      \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n      \"data-[side=bottom]:slide-in-from-top-2\",\n      \"data-[side=left]:slide-in-from-right-2\",\n      \"data-[side=right]:slide-in-from-left-2\",\n      \"data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 6, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden\",\n        \"rounded-lg border border-gray-200/50 dark:border-gray-800/30\",\n        \"bg-background/95 backdrop-blur-md\",\n        \"p-1.5 text-foreground\",\n        \"shadow-lg shadow-black/10\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n        \"data-[side=bottom]:slide-in-from-top-2\",\n        \"data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2\",\n        \"data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer select-none items-center\",\n      \"rounded-md px-3 py-2 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground hover:scale-[0.98]\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      \"active:scale-[0.96]\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer select-none items-center\",\n      \"rounded-md py-2 pl-8 pr-3 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-4 w-4 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-3.5 w-3.5 animate-in zoom-in-0 duration-200\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer select-none items-center\",\n      \"rounded-md py-2 pl-8 pr-3 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-4 w-4 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2.5 w-2.5 fill-current animate-in zoom-in-0 duration-200\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-3 py-2 text-xs font-semibold\",\n      \"text-muted-foreground uppercase tracking-wider\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\n      \"-mx-1.5 my-1.5 h-px\",\n      \"bg-gradient-to-r from-transparent via-gray-200/50 dark:via-gray-800/20 to-transparent\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-[10px] tracking-widest\",\n        \"text-muted-foreground/70\",\n        \"font-medium uppercase\",\n        \"px-1.5 py-0.5 rounded\",\n        \"bg-muted/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}","/**\n * ChatInput Component\n * \n * Rich input field for sending messages and uploading files.\n * \n * Features:\n * - Auto-expanding textarea (up to 200px height)\n * - File upload with drag-and-drop support\n * - Speech-to-text transcription using OpenAI Whisper\n * - File type and size validation\n * - Progress tracking for uploads\n * - Character count display\n * - Keyboard shortcuts (Enter to send, Shift+Enter for newline)\n * - Animated file chips and drag overlay\n * \n * Customization:\n * - Modify CONSTANTS in utils for file limits\n * - Adjust max textarea height (line 144)\n * - Customize accepted file types\n * - Style the drag overlay and file chips\n */\n\n'use client';\n\nimport React, { useState, useRef, useCallback, KeyboardEvent, FormEvent, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Send, \n  Paperclip, \n  X,\n  Upload,\n  AlertCircle,\n  ChevronDown,\n  Settings,\n  Sparkles,\n  Brain,\n  Zap,\n  MessageSquare,\n  User,\n  Bot,\n  SlidersHorizontal\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { InputProps, FileUpload, AgentSettings } from '@/types';\nimport { useDemoModeContext } from '@/contexts/DemoModeContext';\nimport { cn, formatFileSize, getFileIcon, isFileTypeAllowed, generateId, CONSTANTS } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Spinner } from '@/components/ui/loading';\nimport { SpeechToTextButton } from '@/components/voice/SpeechToTextButton';\nimport { AnimatedVoiceIcon } from '@/components/voice/AnimatedVoiceIcon';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n  DropdownMenuLabel,\n} from '@/components/ui/dropdown-menu';\nimport { useAgentStore } from '@/store/agents';\nimport { useChatSettingsStore } from '@/store/chat-settings';\nimport { getClient } from '@/lib/api/client';\n\ninterface FileChipProps {\n  /** File upload object with metadata */\n  file: FileUpload;\n  /** Handler to remove this file */\n  onRemove: () => void;\n}\n\n/**\n * FileChip Component\n * \n * Displays an uploaded or uploading file with:\n * - File icon based on type\n * - Name and size\n * - Upload progress bar\n * - Remove button\n * - Error state indication\n */\nconst FileChip: React.FC<FileChipProps> = ({ file, onRemove }) => {\n  const fileIcon = getFileIcon(file.type);\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"flex items-center gap-2 px-3 py-1.5 bg-muted hover:bg-accent rounded-lg transition-colors\"\n    >\n      <div className=\"text-muted-foreground\">{fileIcon}</div>\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"text-sm font-medium text-foreground truncate\">\n          {file.name}\n        </div>\n        <div className=\"text-xs text-muted-foreground flex items-center gap-2\">\n          <span>{formatFileSize(file.size)}</span>\n          {file.status === 'uploading' && (\n            <>\n              <span>•</span>\n              <span>{file.progress}%</span>\n            </>\n          )}\n          {file.status === 'error' && (\n            <>\n              <span>•</span>\n              <span className=\"text-destructive flex items-center gap-1\">\n                <AlertCircle className=\"w-3 h-3\" />\n                Error\n              </span>\n            </>\n          )}\n        </div>\n      </div>\n      \n      {/* Progress Bar */}\n      {file.status === 'uploading' && (\n        <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-muted rounded-b\">\n          <div \n            className=\"h-full bg-brand-500 rounded-b transition-all duration-300\"\n            style={{ width: `${file.progress}%` }}\n          />\n        </div>\n      )}\n      \n      <button\n        onClick={onRemove}\n        className=\"p-0.5 rounded hover:bg-accent-foreground/20 transition-colors\"\n        disabled={file.status === 'uploading'}\n      >\n        <X className=\"w-3 h-3 text-muted-foreground\" />\n      </button>\n    </motion.div>\n  );\n};\n\n\n/**\n * FileUploadButton Component\n * \n * Hidden file input with visible button trigger.\n * Accepts multiple files based on ACCEPTED_FILE_TYPES.\n */\ninterface FileUploadButtonProps {\n  /** Handler called when files are selected */\n  onUpload: (files: File[]) => void;\n  /** Whether the button is disabled */\n  disabled?: boolean;\n  /** Mobile optimization mode */\n  isMobile?: boolean;\n}\n\nconst FileUploadButton: React.FC<FileUploadButtonProps> = ({ onUpload, disabled, isMobile = false }) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    if (files.length > 0) {\n      onUpload(files);\n      e.target.value = '';\n    }\n  };\n  \n  return (\n    <>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept={CONSTANTS.ACCEPTED_FILE_TYPES.join(',')}\n        onChange={handleChange}\n        className=\"hidden\"\n      />\n      <Button\n        type=\"button\"\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleClick}\n        disabled={disabled}\n        className={cn(\n          \"text-muted-foreground hover:text-foreground relative z-10\",\n          isMobile ? \"h-10 w-10 min-w-[40px]\" : \"h-9 w-9\"\n        )}\n        title=\"Upload files\"\n      >\n        <Paperclip className={cn(isMobile ? \"h-5 w-5\" : \"h-4 w-4\")} />\n      </Button>\n    </>\n  );\n};\n\n// Configuration options\nconst RESPONSE_SOURCES = [\n  { value: 'own_content', label: 'Content', description: 'Uses only your uploaded content', icon: MessageSquare },\n  { value: 'openai_content', label: 'AI + Content', description: 'Combines AI knowledge with your content', icon: Brain },\n  { value: 'default', label: 'Default', description: 'Uses the default agent setting', icon: Settings },\n] as const;\n\nconst CHATBOT_MODELS = [\n  { value: 'gpt-4-o', label: 'GPT-4', description: 'Most capable model', icon: Brain, capabilities: ['optimal-choice', 'advanced-reasoning', 'complex-tasks'] },\n  { value: 'gpt-4-1', label: 'GPT-4.1', description: 'Latest GPT-4 version', icon: Sparkles, capabilities: ['optimal-choice', 'advanced-reasoning', 'complex-tasks'] },\n  { value: 'gpt-4o-mini', label: 'GPT-4 Mini', description: 'Faster, good for most tasks', icon: Zap, capabilities: ['fastest-responses', 'optimal-choice'] },\n  { value: 'gpt-4-1-mini', label: 'GPT-4.1 Mini', description: 'Fast and efficient', icon: Zap, capabilities: ['fastest-responses', 'optimal-choice'] },\n  { value: 'claude-3-sonnet', label: 'Claude 3', description: 'Balanced performance', icon: Brain, capabilities: ['optimal-choice', 'advanced-reasoning'] },\n  { value: 'claude-3.5-sonnet', label: 'Claude 3.5', description: 'Advanced reasoning', icon: Sparkles, capabilities: ['optimal-choice', 'advanced-reasoning', 'complex-tasks'] },\n] as const;\n\nconst COMMON_PERSONAS = [\n  { value: 'professional', label: 'Professional', description: 'Formal responses', icon: Bot },\n  { value: 'friendly', label: 'Friendly', description: 'Conversational tone', icon: User },\n  { value: 'technical', label: 'Technical', description: 'Technical explanations', icon: Brain },\n  { value: 'creative', label: 'Creative', description: 'Imaginative responses', icon: Sparkles },\n  { value: 'educator', label: 'Teacher', description: 'Step-by-step guidance', icon: Bot },\n  { value: 'custom', label: 'Custom', description: 'Your own instructions', icon: Settings },\n] as const;\n\nconst AGENT_CAPABILITIES = [\n  { value: 'fastest-responses', label: 'Fastest', description: 'Quick answers', icon: Zap, enterprise: true },\n  { value: 'optimal-choice', label: 'Optimal', description: 'Balanced', icon: Settings, enterprise: false },\n  { value: 'advanced-reasoning', label: 'Advanced', description: 'Complex tasks', icon: Brain, enterprise: true },\n  { value: 'complex-tasks', label: 'Complex Reasoning', description: 'Highest quality', icon: Sparkles, enterprise: true },\n] as const;\n\n/**\n * ChatInput Component - Main Export\n * \n * Complete chat input with message composition and file upload.\n * \n * Props:\n * @param onSend - Handler called with message content and files\n * @param disabled - Disables input during message sending\n * @param placeholder - Placeholder text for the textarea\n * @param maxLength - Maximum message length (default from CONSTANTS)\n * @param className - Additional CSS classes\n * @param onVoiceClick - Handler for voice mode button click\n * \n * State Management:\n * - input: Current message text\n * - files: Array of uploaded/uploading files\n * - isDragOver: Drag-and-drop state\n * \n * @example\n * <ChatInput \n *   onSend={(message, files) => handleSend(message, files)}\n *   disabled={isLoading}\n *   onVoiceClick={() => setVoiceModalOpen(true)}\n * />\n */\nexport const ChatInput: React.FC<InputProps> = ({ \n  onSend,\n  disabled = false,\n  placeholder = \"Send a message...\",\n  maxLength = CONSTANTS.MAX_MESSAGE_LENGTH,\n  className,\n  onVoiceClick,\n  isMobile = false\n}) => {\n  const [input, setInput] = useState('');\n  const [files, setFiles] = useState<FileUpload[]>([]);\n  const [isTranscribing, setIsTranscribing] = useState(false);\n  const [isLoadingSettings, setIsLoadingSettings] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \n  // Get free trial mode status\n  const { isFreeTrialMode } = useDemoModeContext();\n  \n  // Get stores\n  const { currentAgent } = useAgentStore();\n  const { getSettings, updateSettings: updateLocalSettings } = useChatSettingsStore();\n  \n  // Get settings for current agent\n  const settings = currentAgent?.id ? getSettings(currentAgent.id) : {\n    response_source: 'own_content',\n    chatbot_model: 'gpt-4-o',\n    custom_persona: 'professional',\n    agent_capability: 'optimal-choice',\n  };\n  \n  const loadAgentSettings = useCallback(async () => {\n    if (!currentAgent?.id) return;\n\n    try {\n      const client = getClient();\n      const response = await client.getAgentSettings(currentAgent.id);\n      \n      if (response?.data) {\n        const loadedSettings = {\n          response_source: response.data.response_source || 'own_content',\n          chatbot_model: response.data.chatbot_model || 'gpt-4-o',\n          custom_persona: response.data.custom_persona || 'professional',\n          agent_capability: response.data.agent_capability || 'optimal-choice',\n        };\n        updateLocalSettings(currentAgent.id, loadedSettings);\n      }\n    } catch (error) {\n      console.error('Failed to load agent settings:', error);\n    }\n  }, [currentAgent?.id, updateLocalSettings]);\n\n  // Load settings when agent changes\n  useEffect(() => {\n    if (currentAgent?.id) {\n      loadAgentSettings();\n    }\n  }, [currentAgent?.id, loadAgentSettings]);\n\n  const updateSetting = async (key: keyof AgentSettings, value: string) => {\n    if (!currentAgent?.id) return;\n\n    setIsLoadingSettings(true);\n    try {\n      const client = getClient();\n      let updates: Partial<AgentSettings> = { [key]: value };\n      \n      // If changing capability, check if current model is still valid\n      if (key === 'agent_capability') {\n        const validModels = CHATBOT_MODELS.filter(m => m.capabilities.includes(value as any));\n        const currentModelValid = validModels.some(m => m.value === settings.chatbot_model);\n        \n        if (!currentModelValid && validModels.length > 0) {\n          // Switch to first available model for new capability\n          updates.chatbot_model = validModels[0].value;\n          toast.info(`Model changed to ${validModels[0].label} for ${AGENT_CAPABILITIES.find(c => c.value === value)?.label} mode`);\n        }\n      }\n      \n      await client.updateAgentSettings(currentAgent.id, updates);\n      updateLocalSettings(currentAgent.id, updates);\n      toast.success('Setting updated successfully');\n    } catch (error) {\n      console.error('Failed to update setting:', error);\n      toast.error('Failed to update setting');\n    } finally {\n      setIsLoadingSettings(false);\n    }\n  };\n  \n  /**\n   * Auto-resize textarea based on content\n   * Grows up to maxHeight (200px) then scrolls\n   */\n  const adjustTextareaHeight = useCallback(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      const scrollHeight = textarea.scrollHeight;\n      const maxHeight = 200; // Max height in pixels - customize as needed\n      textarea.style.height = `${Math.min(scrollHeight, maxHeight)}px`;\n    }\n  }, []);\n  \n  // Handle text input changes\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    if (value.length <= maxLength) {\n      setInput(value);\n      adjustTextareaHeight();\n    }\n  };\n  \n  // Handle key presses\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e as any);\n    }\n  };\n  \n  // Handle form submission\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    \n    if (disabled) return;\n    if (!input.trim() && files.length === 0) return;\n    \n    // Convert FileUpload objects to File objects\n    const fileObjects = files\n      .filter(f => f.status === 'uploaded')\n      .map(f => f.file); // Use the actual File object\n    \n    onSend(input.trim(), fileObjects);\n    \n    // Reset form\n    setInput('');\n    setFiles([]);\n    \n    // Reset textarea height\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n    }\n    \n    // Focus textarea\n    setTimeout(() => {\n      textareaRef.current?.focus();\n    }, 0);\n  };\n  \n  /**\n   * Handle file uploads with validation\n   * Checks file size and type before accepting\n   * Shows toast notifications for validation errors\n   */\n  const handleFileUpload = useCallback((newFiles: File[]) => {\n    const validFiles = newFiles.filter(file => {\n      // Check file size against MAX_FILE_SIZE constant\n      if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n        toast.error(`File \"${file.name}\" is too large. Maximum size is ${formatFileSize(CONSTANTS.MAX_FILE_SIZE)}`);\n        return false;\n      }\n      \n      // Check file type against ACCEPTED_FILE_TYPES\n      if (!isFileTypeAllowed(file.type, CONSTANTS.ACCEPTED_FILE_TYPES)) {\n        toast.error(`File type \"${file.type}\" is not supported`);\n        return false;\n      }\n      \n      return true;\n    });\n    \n    const uploadFiles: FileUpload[] = validFiles.map(file => ({\n      id: generateId(),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      status: 'uploading',\n      progress: 0,\n      file: file, // Store the actual File object\n    }));\n    \n    setFiles(prev => [...prev, ...uploadFiles]);\n    \n    // Simulate file upload\n    uploadFiles.forEach(uploadFile => {\n      simulateUpload(uploadFile);\n    });\n    \n  }, []);\n  \n  /**\n   * Simulate file upload progress\n   * In production, replace with actual upload logic\n   * Updates progress in 100ms intervals\n   */\n  const simulateUpload = (uploadFile: FileUpload) => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 20;\n      \n      if (progress >= 100) {\n        progress = 100;\n        clearInterval(interval);\n        \n        // Mark file as uploaded\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, status: 'uploaded' as const, progress: 100 }\n            : f\n        ));\n      } else {\n        // Update progress\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, progress: Math.round(progress) }\n            : f\n        ));\n      }\n    }, 100);\n  };\n  \n  // Remove file\n  const removeFile = (fileId: string) => {\n    setFiles(prev => prev.filter(f => f.id !== fileId));\n  };\n  \n  /**\n   * Dropzone configuration for drag-and-drop\n   * - Accepts files based on ACCEPTED_FILE_TYPES\n   * - Validates file size\n   * - Shows overlay on drag\n   * - Disabled click/keyboard to use custom button\n   */\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: handleFileUpload,\n    noClick: true, // Use custom button instead\n    noKeyboard: true,\n    accept: CONSTANTS.ACCEPTED_FILE_TYPES.reduce((acc, type) => {\n      acc[type] = [];\n      return acc;\n    }, {} as Record<string, string[]>),\n    maxSize: CONSTANTS.MAX_FILE_SIZE,\n  });\n  \n  const canSend = !disabled && (input.trim() || files.some(f => f.status === 'uploaded'));\n  \n  // Handle speech-to-text transcription\n  const handleTranscription = useCallback((text: string) => {\n    setInput(prevInput => {\n      const newInput = prevInput ? `${prevInput} ${text}` : text;\n      return newInput.length <= maxLength ? newInput : prevInput;\n    });\n    \n    // Adjust textarea height after updating text\n    setTimeout(() => {\n      adjustTextareaHeight();\n    }, 0);\n  }, [maxLength, adjustTextareaHeight]);\n  \n  // Handle transcription start\n  const handleTranscriptionStart = useCallback(() => {\n    setIsTranscribing(true);\n  }, []);\n  \n  // Handle transcription end\n  const handleTranscriptionEnd = useCallback(() => {\n    setIsTranscribing(false);\n  }, []);\n  \n  return (\n    <div \n      {...getRootProps()}\n      className={cn(\n        'relative',\n        isDragActive && 'bg-brand-50',\n        className\n      )}\n    >\n      <input {...getInputProps()} />\n      \n      {/* Drag Overlay */}\n      <AnimatePresence>\n        {isDragActive && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-brand-50 border-2 border-dashed border-brand-300 rounded-lg flex items-center justify-center z-10\"\n          >\n            <div className=\"text-center\">\n              <Upload className=\"w-8 h-8 text-brand-600 mx-auto mb-2\" />\n              <p className=\"text-brand-700 font-medium\">Drop files here to upload</p>\n              <p className=\"text-brand-600 text-sm\">\n                Supports PDF, DOC, TXT, and more\n              </p>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* File Preview */}\n      <AnimatePresence>\n        {files.length > 0 && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"px-4 pt-3 pb-2 flex flex-wrap gap-2\"\n          >\n            {files.map((file) => (\n              <FileChip\n                key={file.id}\n                file={file}\n                onRemove={() => removeFile(file.id)}\n              />\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* Main Input Container */}\n      <div className={cn(\n        \"mx-4 my-3 bg-background border border-border rounded-2xl shadow-sm\",\n        \"focus-within:ring-2 focus-within:ring-brand-500 focus-within:border-transparent transition-all\"\n      )}>\n        {/* Text Input Area */}\n        <form onSubmit={handleSubmit} className=\"relative\">\n          <div className=\"flex items-center p-3 pb-1\">\n            {/* File Upload Button - Hidden in free trial mode */}\n            {!isFreeTrialMode && (\n              <FileUploadButton\n                onUpload={handleFileUpload}\n                disabled={disabled}\n                isMobile={isMobile}\n              />\n            )}\n            \n            {/* Speech to Text Button */}\n            <SpeechToTextButton\n              onTranscription={handleTranscription}\n              onTranscriptionStart={handleTranscriptionStart}\n              onTranscriptionEnd={handleTranscriptionEnd}\n              disabled={disabled}\n              isMobile={isMobile}\n              className={cn(\n                \"!h-8 !w-8 !min-w-0 mr-2\",\n                isMobile && \"!h-9 !w-9\"\n              )}\n            />\n            \n            {/* Textarea */}\n            <div className=\"flex-1 relative\">\n              <textarea\n                ref={textareaRef}\n                value={input}\n                onChange={handleInputChange}\n                onKeyDown={handleKeyDown}\n                placeholder={isTranscribing ? '' : placeholder}\n                disabled={disabled}\n                rows={1}\n                className={cn(\n                  'w-full resize-none bg-transparent border-0',\n                  'focus:outline-none focus:ring-0',\n                  'disabled:opacity-50 disabled:cursor-not-allowed',\n                  'placeholder:text-muted-foreground text-foreground',\n                  isMobile \n                    ? 'text-base min-h-[24px] max-h-[120px] placeholder:text-sm' \n                    : 'text-sm min-h-[20px] max-h-[200px]'\n                )}\n                style={{\n                  height: 'auto',\n                  overflowY: input.split('\\n').length > 5 ? 'auto' : 'hidden',\n                }}\n              />\n              \n              {/* Transcribing Animation */}\n              {isTranscribing && !input && (\n                <div className=\"absolute top-0 left-0 right-0 bottom-0 flex items-center pointer-events-none\">\n                  <span className={cn(\n                    \"text-muted-foreground animate-pulse\",\n                    isMobile ? \"text-base\" : \"text-sm\"\n                  )}>\n                    Transcribing\n                    <span className=\"inline-flex\">\n                      <span className=\"animate-bounce\" style={{ animationDelay: '0ms' }}>.</span>\n                      <span className=\"animate-bounce\" style={{ animationDelay: '150ms' }}>.</span>\n                      <span className=\"animate-bounce\" style={{ animationDelay: '300ms' }}>.</span>\n                    </span>\n                  </span>\n                </div>\n              )}\n            </div>\n            \n            {/* Character Count */}\n            {input.length > 0 && (\n              <div className={cn(\n                \"text-xs text-muted-foreground mr-2\",\n                isMobile ? \"text-xs\" : \"text-xs\"\n              )}>\n                {input.length}/{maxLength}\n              </div>\n            )}\n            \n            {/* Action Buttons */}\n            <div className=\"flex items-center gap-1\">\n              {/* Voice Button */}\n              {onVoiceClick && (\n                <Button\n                  type=\"button\"\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={onVoiceClick}\n                  disabled={disabled}\n                  className={cn(\n                    'relative group transition-all duration-200',\n                    'bg-gradient-to-br from-purple-500/10 to-pink-500/10',\n                    'hover:from-purple-500/20 hover:to-pink-500/20',\n                    'border border-purple-500/20 hover:border-purple-500/40',\n                    'shadow-sm hover:shadow-md',\n                    isMobile ? 'h-10 w-10' : 'h-9 w-9'\n                  )}\n                  title=\"Voice mode\"\n                >\n                  <div className=\"absolute inset-0 rounded-md bg-gradient-to-br from-purple-600/5 to-pink-600/5 opacity-0 group-hover:opacity-100 transition-opacity\" />\n                  <AnimatedVoiceIcon \n                    size={isMobile ? 'lg' : 'md'} \n                    isActive={false}\n                    className=\"relative z-10\"\n                  />\n                </Button>\n              )}\n              \n              {/* Send Button */}\n              <Button\n                type=\"submit\"\n                size=\"icon\"\n                disabled={!canSend}\n                className={cn(\n                  'transition-all duration-200 group',\n                  'bg-brand-500 hover:bg-brand-600 active:bg-brand-700',\n                  'text-white shadow-sm hover:shadow-md',\n                  'disabled:opacity-50 disabled:cursor-not-allowed',\n                  'disabled:hover:bg-brand-500 disabled:hover:shadow-sm',\n                  isMobile ? 'h-10 w-10' : 'h-9 w-9'\n                )}\n                title={disabled ? 'Sending message...' : 'Send message'}\n              >\n                {disabled ? (\n                  <Spinner size=\"sm\" className=\"text-white\" />\n                ) : (\n                  <Send className={cn(\n                    \"transition-transform duration-200 group-hover:translate-x-0.5 group-hover:-translate-y-0.5\",\n                    isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n                  )} />\n                )}\n              </Button>\n            </div>\n          </div>\n        </form>\n        \n        {/* Settings Toggle Button */}\n        <div className=\"border-t border-gray-200/50 dark:border-gray-800/30\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowSettings(!showSettings)}\n            className={cn(\n              \"flex items-center gap-2 text-xs\",\n              isMobile ? \"w-full justify-center h-9 px-3 py-2\" : \"w-auto justify-start h-8 px-3 py-1.5\",\n              \"hover:bg-accent/50 transition-all duration-200\",\n              showSettings && \"bg-accent/30\"\n            )}\n            title=\"Customize chat settings including response source, AI model, and persona\"\n          >\n            <SlidersHorizontal className={cn(\n              \"transition-colors\",\n              showSettings ? \"text-brand-500\" : \"text-muted-foreground\",\n              isMobile ? \"h-4 w-4\" : \"h-3.5 w-3.5\"\n            )} />\n            <span className={cn(\n              \"font-medium text-muted-foreground\",\n              showSettings && \"text-brand-600\"\n            )}>Customize Chat</span>\n            <ChevronDown className={cn(\n              \"h-3 w-3 opacity-50 transition-transform duration-200\",\n              showSettings && \"rotate-180\"\n            )} />\n          </Button>\n          \n          {/* Expandable Settings Panel */}\n          <AnimatePresence>\n            {showSettings && (\n              <motion.div\n                initial={{ height: 0, opacity: 0 }}\n                animate={{ height: \"auto\", opacity: 1 }}\n                exit={{ height: 0, opacity: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"overflow-hidden bg-accent/20\"\n              >\n                <div className={cn(\n                  \"flex items-center border-t border-gray-200/50 dark:border-gray-800/30\",\n                  isMobile \n                    ? \"justify-between px-2 pb-2 pt-2\" \n                    : \"gap-2 px-3 pb-2.5 pt-2.5\"\n                )}>\n                  {/* Response Source */}\n                  <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-4 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <MessageSquare className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Source</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"start\" className=\"w-64\">\n            <DropdownMenuLabel className=\"text-xs\">RESPONSE SOURCE</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {RESPONSE_SOURCES.map((source) => {\n              const Icon = source.icon;\n              return (\n                <DropdownMenuItem\n                  key={source.value}\n                  onClick={() => updateSetting('response_source', source.value)}\n                  className=\"flex flex-col items-start py-1.5\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Icon className=\"h-3.5 w-3.5\" />\n                    <span className=\"text-sm font-medium\">{source.label}</span>\n                    {settings.response_source === source.value && (\n                      <span className=\"text-xs text-brand-600\">✓</span>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-5\">{source.description}</span>\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Model Selection */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-2 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <Brain className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Model</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"center\" className=\"w-72\">\n            <DropdownMenuLabel className=\"text-xs\">AI MODEL</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {CHATBOT_MODELS\n              .filter((model) => settings.agent_capability && model.capabilities.includes(settings.agent_capability as any))\n              .map((model) => {\n                const Icon = model.icon;\n                return (\n                  <DropdownMenuItem\n                    key={model.value}\n                    onClick={() => updateSetting('chatbot_model', model.value)}\n                    className=\"flex flex-col items-start py-1.5\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <Icon className=\"h-3.5 w-3.5\" />\n                      <span className=\"text-sm font-medium\">{model.label}</span>\n                      {settings.chatbot_model === model.value && (\n                        <span className=\"text-xs text-brand-600\">✓</span>\n                      )}\n                    </div>\n                    <span className=\"text-xs text-muted-foreground ml-5\">{model.description}</span>\n                  </DropdownMenuItem>\n                );\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Persona Selection */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-2 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <User className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Persona</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"center\" className=\"w-64\">\n            <DropdownMenuLabel className=\"text-xs\">ASSISTANT PERSONA</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {COMMON_PERSONAS.map((persona) => {\n              const Icon = persona.icon;\n              return (\n                <DropdownMenuItem\n                  key={persona.value}\n                  onClick={() => updateSetting('custom_persona', persona.value)}\n                  className=\"flex flex-col items-start py-1.5\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Icon className=\"h-3.5 w-3.5\" />\n                    <span className=\"text-sm font-medium\">{persona.label}</span>\n                    {settings.custom_persona === persona.value && (\n                      <span className=\"text-xs text-brand-600\">✓</span>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-5\">{persona.description}</span>\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Agent Capability */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-2 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <Settings className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Mode</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-72\">\n            <DropdownMenuLabel className=\"text-xs\">RESPONSE MODE</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {AGENT_CAPABILITIES.map((capability) => {\n              const Icon = capability.icon;\n              return (\n                <DropdownMenuItem\n                  key={capability.value}\n                  onClick={() => updateSetting('agent_capability', capability.value)}\n                  className=\"flex flex-col items-start py-1.5\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Icon className=\"h-3.5 w-3.5\" />\n                    <span className=\"text-sm font-medium\">{capability.label}</span>\n                    {capability.enterprise && (\n                      <span className=\"text-[10px] bg-muted text-muted-foreground px-1 py-0.5 rounded\">Enterprise only</span>\n                    )}\n                    {settings.agent_capability === capability.value && (\n                      <span className=\"text-xs text-brand-600\">✓</span>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-5\">{capability.description}</span>\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n      </div>\n      \n      {/* Input Hints - Below configuration options */}\n      {!isMobile && (\n        <div className=\"px-4 pb-3 text-xs text-muted-foreground\">\n          <span>Press Enter to send, Shift+Enter for new line</span>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Typing Indicator Component\n * \n * Shows animated typing indicator when AI is generating a response.\n * Provides visual feedback that the system is processing.\n * \n * Features:\n * - Three-dot bouncing animation\n * - AI avatar display\n * - Staggered animation delays\n * - Consistent styling with messages\n * - Subtle bounce effect\n * \n * Animation:\n * - Uses CSS animations defined in globals.css\n * - animate-bounce-subtle class for smooth motion\n * - Staggered delays (0ms, 100ms, 200ms)\n * - Creates wave-like effect\n * \n * Design:\n * - Matches message component layout\n * - Gray background for distinction\n * - Centered in chat container\n * - Responsive max-width\n * \n * Features:\n * - Multiple animation styles for enhanced visual feedback\n * - Contextual status messages for different AI processing states\n * - Progress indicators with time estimation for long operations\n * - Professional avatar customization with brand consistency\n * - Advanced loading patterns including skeleton alternatives\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n/**\n * Props for TypingIndicator\n * \n * @property className - Additional CSS classes for styling\n */\ninterface TypingIndicatorProps {\n  className?: string;\n}\n\n/**\n * Typing Indicator Component\n * \n * Displays animated dots to indicate AI is typing/processing.\n * Maintains visual consistency with message components.\n */\nexport const TypingIndicator: React.FC<TypingIndicatorProps> = ({ className }) => {\n  return (\n    <div className={cn(\n      'px-4 py-6 bg-muted border-y border-border',\n      className\n    )}>\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"w-8 h-8 rounded-full bg-background border border-border flex items-center justify-center flex-shrink-0\">\n          <Bot className=\"w-4 h-4 text-brand-600\" />\n        </div>\n        \n        {/* Typing Animation */}\n        <div className=\"flex items-center gap-1 py-2\">\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle\" />\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle delay-100\" />\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle delay-200\" />\n        </div>\n      </div>\n    </div>\n  );\n};","/**\n * Agent Selector Component\n * \n * Dropdown selector for switching between different CustomGPT agents.\n * Displays the current agent and allows users to select from available agents.\n * \n * Features:\n * - Current agent display with avatar\n * - Dropdown list of all available agents\n * - Agent metadata display (model, status)\n * - Quick settings access per agent\n * - Refresh agents functionality\n * - Loading and error states\n * - Click-outside-to-close behavior\n * - Smooth animations\n * \n * State Management:\n * - Uses agentStore for agent data\n * - Local state for dropdown open/close\n * - Automatic agent fetching on dropdown open\n * \n * UI/UX:\n * - Visual selection indicator (checkmark)\n * - Hover states for better interactivity\n * - Loading skeleton for initial load\n * - Error state with retry option\n * - Empty state guidance\n * \n * Features:\n * - Comprehensive agent selection with real-time filtering\n * - Intelligent agent management with favorites and categories\n * - Quick agent creation workflow integration\n * - Professional avatar display with status indicators\n * - Full keyboard navigation and accessibility support\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Bot, \n  ChevronDown, \n  Settings, \n  RefreshCw,\n  AlertCircle,\n  Check,\n  BarChart3,\n  User\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { useAgentStore } from '@/store';\nimport { Spinner } from '@/components/ui/loading';\nimport { getClient } from '@/lib/api/client';\n\n/**\n * Props for AgentSelector component\n * \n * @property className - Additional CSS classes\n * @property showSettings - Whether to show settings button for each agent\n * @property onSettingsClick - Callback when settings button is clicked\n */\ninterface AgentSelectorProps {\n  className?: string;\n  showSettings?: boolean;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Props for agent avatar component\n */\ninterface AgentAvatarProps {\n  agent: Agent | null;\n  size?: 'sm' | 'md';\n  isSelected?: boolean;\n  className?: string;\n}\n\n/**\n * Props for individual agent item in dropdown\n * \n * @property agent - Agent data object\n * @property isSelected - Whether this agent is currently selected\n * @property onSelect - Callback when agent is selected\n * @property onSettingsClick - Optional callback for settings button\n */\ninterface AgentItemProps {\n  agent: Agent;\n  isSelected: boolean;\n  onSelect: (agent: Agent) => void;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Agent Avatar Component\n * \n * Displays agent avatar with fallback to default icon\n */\nconst AgentAvatar: React.FC<AgentAvatarProps> = ({ \n  agent, \n  size = 'md', \n  isSelected = false, \n  className \n}) => {\n  const sizeClasses = {\n    sm: 'w-6 h-6',\n    md: 'w-8 h-8'\n  };\n  \n  const iconSizeClasses = {\n    sm: 'w-3 h-3',\n    md: 'w-4 h-4'\n  };\n\n  const avatarUrl = agent?.settings?.chatbot_avatar;\n\n  return (\n    <div className={cn(\n      'rounded-full flex items-center justify-center flex-shrink-0 overflow-hidden',\n      sizeClasses[size],\n      isSelected ? 'bg-brand-600' : 'bg-accent',\n      className\n    )}>\n      {avatarUrl ? (\n        <img\n          src={avatarUrl}\n          alt={`${agent?.project_name} avatar`}\n          className=\"w-full h-full object-cover\"\n          onError={(e) => {\n            // Fallback to icon if image fails to load\n            const target = e.target as HTMLImageElement;\n            target.style.display = 'none';\n            const parent = target.parentElement;\n            if (parent) {\n              const icon = document.createElement('div');\n              icon.className = `w-full h-full flex items-center justify-center`;\n              icon.innerHTML = `<svg class=\"${iconSizeClasses[size]} ${isSelected ? 'text-white' : 'text-gray-600'}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"></path></svg>`;\n              parent.appendChild(icon);\n            }\n          }}\n        />\n      ) : (\n        <User className={cn(\n          iconSizeClasses[size],\n          isSelected ? 'text-white' : 'text-muted-foreground'\n        )} />\n      )}\n    </div>\n  );\n};\n\n/**\n * Individual Agent Item Component\n * \n * Renders a single agent in the dropdown list with:\n * - Agent avatar and name\n * - Selection indicator\n * - Metadata (model, status)\n * - Settings button (optional)\n */\nconst AgentItem: React.FC<AgentItemProps> = ({ \n  agent, \n  isSelected, \n  onSelect, \n  onSettingsClick \n}) => {\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-between p-3 rounded-lg cursor-pointer transition-colors group',\n        'hover:bg-accent',\n        isSelected && 'bg-brand-50 hover:bg-brand-100'\n      )}\n      onClick={() => onSelect(agent)}\n    >\n      <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n        {/* Avatar */}\n        <AgentAvatar \n          agent={agent}\n          size=\"md\"\n          isSelected={isSelected}\n        />\n        \n        {/* Agent Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"font-medium text-foreground truncate\">\n              {agent.project_name}\n            </h3>\n            {isSelected && (\n              <Check className=\"w-4 h-4 text-brand-600 flex-shrink-0\" />\n            )}\n          </div>\n          \n          {/* Status */}\n          <div className=\"mt-1 text-xs text-muted-foreground\">\n            <span>Status: {agent.is_chat_active ? 'Active' : 'Inactive'}</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Settings Button */}\n      {onSettingsClick && (\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onSettingsClick(agent);\n          }}\n          className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-muted-foreground hover:text-foreground\"\n          title=\"Agent Settings\"\n        >\n          <Settings className=\"h-3 w-3\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Selector Component\n * \n * Main component that provides agent switching functionality.\n * Manages dropdown state and handles agent selection.\n * \n * @param className - Additional CSS classes for styling\n * @param showSettings - Whether to show settings buttons (default: true)\n * @param onSettingsClick - Handler for agent settings clicks\n */\nexport const AgentSelector: React.FC<AgentSelectorProps> = ({ \n  className,\n  showSettings = true,\n  onSettingsClick\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isSelectingAgent, setIsSelectingAgent] = useState(false);\n  const [loadingSettings, setLoadingSettings] = useState<Set<number>>(new Set());\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  \n  const { \n    agents, \n    currentAgent, \n    loading, \n    error, \n    fetchAgents, \n    loadMoreAgents,\n    selectAgent,\n    setAgents,\n    paginationMeta\n  } = useAgentStore();\n\n  /**\n   * Fetch settings for agents that don't have them loaded\n   */\n  const fetchAgentSettings = async (agentsToLoad: Agent[]) => {\n    const agentsNeedingSettings = agentsToLoad.filter(agent => \n      !agent.settings && !loadingSettings.has(agent.id)\n    );\n\n    if (agentsNeedingSettings.length === 0) return;\n\n    // Mark agents as loading\n    setLoadingSettings(prev => {\n      const newSet = new Set(prev);\n      agentsNeedingSettings.forEach(agent => newSet.add(agent.id));\n      return newSet;\n    });\n\n    try {\n      const client = getClient();\n      const settingsPromises = agentsNeedingSettings.map(async (agent) => {\n        try {\n          const response = await client.getAgentSettings(agent.id);\n          return {\n            agentId: agent.id,\n            settings: response.data || response\n          };\n        } catch (error) {\n          console.warn(`Failed to load settings for agent ${agent.id}:`, error);\n          return {\n            agentId: agent.id,\n            settings: null\n          };\n        }\n      });\n\n      const results = await Promise.all(settingsPromises);\n      \n      // Update agents with their settings\n      const updatedAgents = agents.map(agent => {\n        const result = results.find(r => r.agentId === agent.id);\n        if (result && result.settings) {\n          return { ...agent, settings: result.settings };\n        }\n        return agent;\n      });\n\n      setAgents(updatedAgents);\n\n    } catch (error) {\n      console.error('Failed to fetch agent settings:', error);\n    } finally {\n      // Clear loading state\n      setLoadingSettings(prev => {\n        const newSet = new Set(prev);\n        agentsNeedingSettings.forEach(agent => newSet.delete(agent.id));\n        return newSet;\n      });\n    }\n  };\n\n  /**\n   * Close dropdown when clicking outside\n   * \n   * Uses mousedown event for better UX (closes before click completes)\n   */\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [isOpen]);\n\n  /**\n   * Refresh agents list\n   * \n   * Fetches latest agents from the API and shows toast feedback.\n   * This will temporarily cause avatars to flicker as settings are reloaded.\n   */\n  const handleRefresh = async () => {\n    try {\n      await fetchAgents();\n      toast.success('Agents refreshed');\n    } catch (error) {\n      toast.error('Failed to refresh agents');\n    }\n  };\n\n  /**\n   * Handle agent selection\n   * \n   * Updates the current agent, closes dropdown, and shows confirmation\n   */\n  const handleSelectAgent = async (agent: Agent) => {\n    if (isSelectingAgent) return; // Prevent multiple selections\n    \n    setIsSelectingAgent(true);\n    try {\n      await selectAgent(agent);\n      setIsOpen(false);\n      toast.success(`Switched to ${agent.project_name}`);\n    } catch (error) {\n      toast.error('Failed to switch agent');\n    } finally {\n      // Add a small delay to show the loading state briefly\n      setTimeout(() => {\n        setIsSelectingAgent(false);\n      }, 300);\n    }\n  };\n\n  /**\n   * Fetch settings when agents are loaded and dropdown is open\n   * Only runs when needed to prevent unnecessary API calls\n   */\n  useEffect(() => {\n    if (isOpen && agents.length > 0) {\n      // Only fetch if there are agents without settings\n      const agentsNeedingSettings = agents.some(agent => !agent.settings);\n      if (agentsNeedingSettings) {\n        fetchAgentSettings(agents);\n      }\n    }\n  }, [isOpen, agents.length, agents, fetchAgentSettings]);\n\n  /**\n   * Toggle dropdown and conditionally fetch agents\n   * \n   * Only fetches agents if the array is empty to prevent flickering.\n   * Settings are fetched via useEffect when agents are loaded.\n   */\n  const handleToggleDropdown = async () => {\n    const willOpen = !isOpen;\n    setIsOpen(willOpen);\n    \n    // Only fetch agents if we don't have any yet\n    // This prevents flickering caused by replacing agents that have settings\n    // with fresh agents that don't have settings loaded\n    if (willOpen && agents.length === 0) {\n      try {\n        await fetchAgents();\n      } catch (error) {\n        // Don't show error toast here as it might be annoying\n      }\n    }\n  };\n\n  if (loading && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-muted animate-pulse\" />\n          <div className=\"flex-1\">\n            <div className=\"h-4 bg-muted rounded animate-pulse mb-2\" />\n            <div className=\"h-3 bg-muted/50 rounded animate-pulse w-3/4\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-red-100 flex items-center justify-center flex-shrink-0\">\n            <AlertCircle className=\"w-4 h-4 text-red-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-red-600 font-medium\">Failed to load agents</p>\n            <p className=\"text-xs text-red-500\">{error}</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            className=\"text-red-600 hover:text-red-700\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentAgent && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-accent flex items-center justify-center flex-shrink-0\">\n            <Bot className=\"w-4 h-4 text-muted-foreground\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-muted-foreground font-medium\">No agents available</p>\n            <p className=\"text-xs text-muted-foreground\">Check your API configuration</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            disabled={loading}\n          >\n            <RefreshCw className={cn('w-4 h-4', loading && 'animate-spin')} />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('relative', className)} ref={dropdownRef}>\n      {/* Loading overlay when selecting agent */}\n      {isSelectingAgent && (\n        <div className=\"absolute inset-0 bg-background/80 backdrop-blur-sm rounded-lg flex items-center justify-center z-50\">\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Spinner size=\"sm\" />\n            <span className=\"text-foreground\">Switching agent...</span>\n          </div>\n        </div>\n      )}\n      {/* Selected Agent Display */}\n      <button\n        onClick={handleToggleDropdown}\n        className={cn(\n          'w-full p-3 bg-background border border-border rounded-lg text-left transition-colors',\n          'hover:bg-accent focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent',\n          isOpen && 'ring-2 ring-ring border-transparent'\n        )}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            {/* Avatar */}\n            <AgentAvatar \n              agent={currentAgent}\n              size=\"md\"\n              isSelected={true}\n            />\n            \n            {/* Agent Info */}\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-medium text-foreground truncate\">\n                {currentAgent?.project_name || 'Select Agent'}\n              </h3>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {/* Analytics Button */}\n            {currentAgent && (\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  // Navigate to projects page with analytics tab\n                  window.location.href = `/projects?id=${currentAgent.id}&tab=analytics`;\n                }}\n                title=\"View Analytics\"\n                className=\"text-muted-foreground hover:text-foreground\"\n              >\n                <BarChart3 className=\"w-4 h-4\" />\n              </Button>\n            )}\n            \n            {/* Refresh Button */}\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleRefresh();\n              }}\n              disabled={loading}\n              className=\"h-6 w-6 text-muted-foreground hover:text-foreground\"\n              title=\"Refresh Agents\"\n            >\n              <RefreshCw className={cn('h-3 w-3', loading && 'animate-spin')} />\n            </Button>\n            \n            {/* Dropdown Arrow */}\n            <ChevronDown className={cn(\n              'w-4 h-4 text-muted-foreground transition-transform',\n              isOpen && 'rotate-180'\n            )} />\n          </div>\n        </div>\n      </button>\n\n      {/* Dropdown */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-background border border-border rounded-lg shadow-lg z-50 max-h-80 overflow-y-auto\"\n          >\n            <div className=\"p-2\">\n              {/* Header */}\n              <div className=\"px-2 py-1 mb-2\">\n                <h4 className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n                  Available Agents ({Array.isArray(agents) ? agents.length : 0}\n                  {paginationMeta?.totalCount && paginationMeta.totalCount !== agents.length && (\n                    <span> of {paginationMeta.totalCount}</span>\n                  )})\n                </h4>\n              </div>\n              \n              {/* Agent List */}\n              <div className=\"space-y-1\">\n                {Array.isArray(agents) && agents.length > 0 ? (\n                  agents.map((agent) => (\n                    <AgentItem\n                      key={agent.id}\n                      agent={agent}\n                      isSelected={currentAgent?.id === agent.id}\n                      onSelect={handleSelectAgent}\n                      onSettingsClick={showSettings ? onSettingsClick : undefined}\n                    />\n                  ))\n                ) : (\n                  <div className=\"px-2 py-4 text-center\">\n                    <p className=\"text-sm text-muted-foreground\">No agents found</p>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={handleRefresh}\n                      className=\"mt-2\"\n                    >\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Refresh\n                    </Button>\n                  </div>\n                )}\n              </div>\n              \n              {/* Load More Button */}\n              {Array.isArray(agents) && agents.length > 0 && paginationMeta?.hasMore && (\n                <div className=\"px-2 py-2 border-t\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={async () => {\n                      try {\n                        await loadMoreAgents();\n                      } catch (error) {\n                        console.error('Failed to load more agents:', error);\n                      }\n                    }}\n                    disabled={loading}\n                    className=\"w-full\"\n                  >\n                    {loading ? (\n                      <>\n                        <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Loading...\n                      </>\n                    ) : (\n                      <>\n                        <ChevronDown className=\"w-4 h-4 mr-2\" />\n                        Load More Agents\n                      </>\n                    )}\n                  </Button>\n                </div>\n              )}\n              \n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","'use client';\n\nimport { useState, useEffect } from 'react';\n\n/**\n * Custom hook for responsive design based on media queries\n * Provides mobile-first breakpoint detection\n */\nexport const useMediaQuery = (query: string): boolean => {\n  const [matches, setMatches] = useState(false);\n\n  useEffect(() => {\n    // Handle server-side rendering\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const media = window.matchMedia(query);\n    \n    // Set initial value\n    setMatches(media.matches);\n\n    // Create event listener\n    const listener = (event: MediaQueryListEvent) => {\n      setMatches(event.matches);\n    };\n\n    // Add listener\n    media.addEventListener('change', listener);\n\n    // Cleanup\n    return () => media.removeEventListener('change', listener);\n  }, [query]);\n\n  return matches;\n};\n\n/**\n * Predefined breakpoint hooks for common use cases\n */\nexport const useBreakpoint = () => {\n  const isMobile = useMediaQuery('(max-width: 767px)');\n  const isTablet = useMediaQuery('(min-width: 768px) and (max-width: 1023px)');\n  const isDesktop = useMediaQuery('(min-width: 1024px)');\n  const isLargeScreen = useMediaQuery('(min-width: 1280px)');\n  \n  // Touch device detection\n  const isTouchDevice = useMediaQuery('(pointer: coarse)');\n  \n  return {\n    isMobile,\n    isTablet,\n    isDesktop,\n    isLargeScreen,\n    isTouchDevice,\n    // Helper computed values\n    isMobileOrTablet: isMobile || isTablet,\n    isTabletOrDesktop: isTablet || isDesktop\n  };\n};\n\n/**\n * Hook for getting current screen size category\n */\nexport const useScreenSize = () => {\n  const { isMobile, isTablet, isDesktop, isLargeScreen } = useBreakpoint();\n  \n  if (isMobile) return 'mobile';\n  if (isTablet) return 'tablet';\n  if (isLargeScreen) return 'large';\n  if (isDesktop) return 'desktop';\n  return 'desktop'; // fallback\n};","/**\n * Citation Details Modal Component\n * \n * Modal dialog that displays detailed information about a citation,\n * including Open Graph data fetched from the cited source.\n * \n * Features:\n * - Open Graph data display (title, description, image)\n * - Loading and error states\n * - Responsive modal design\n * - Image preview with error handling\n * - Direct link to source\n * - Citation metadata display\n * - Smooth animations\n * \n * API Integration:\n * - Fetches citation details via getCitation API\n * - Handles Open Graph data response\n * - Graceful error handling\n * - Automatic retry on prop changes\n * \n * UI/UX:\n * - Backdrop click to close\n * - Escape key support (via close button)\n * - Loading spinner during fetch\n * - Error message display\n * - Image fallback on load error\n * \n * Features:\n * - Advanced citation caching for improved performance\n * - Professional sharing and bookmarking functionality\n * - Enhanced image preview with zoom and gallery modes\n * - Citation analytics and usage tracking\n * - Comprehensive export options and related citation discovery\n */\n\n'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  ExternalLink,\n  Loader,\n  AlertCircle,\n  Globe,\n  Image as ImageIcon\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { useAgentStore } from '@/store/agents';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\n/**\n * Open Graph data structure for citations\n * \n * @property id - Citation ID\n * @property url - Source URL\n * @property title - Page title from Open Graph\n * @property description - Page description\n * @property image - Optional preview image URL\n */\ninterface CitationOpenGraphData {\n  id: number;\n  url: string;\n  title: string;\n  description: string;\n  image?: string;\n}\n\n/**\n * Props for CitationDetailsModal\n * \n * @property isOpen - Whether modal is visible\n * @property onClose - Callback to close modal\n * @property citationId - ID of citation to display\n * @property projectId - Optional project ID (uses current agent if not provided)\n */\ninterface CitationDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: number | string;\n  projectId?: number;\n}\n\n/**\n * Citation Details Modal Component\n * \n * Displays rich preview of citation with Open Graph data.\n * Fetches citation details from API when opened.\n */\nexport const CitationDetailsModal: React.FC<CitationDetailsModalProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  projectId\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [citationData, setCitationData] = useState<CitationOpenGraphData | null>(null);\n  const [imageError, setImageError] = useState(false);\n  \n  const { currentAgent } = useAgentStore();\n  const { isMobile } = useBreakpoint();\n  const effectiveProjectId = projectId || currentAgent?.id;\n\n  /**\n   * Fetch citation Open Graph data from API\n   * \n   * Handles:\n   * - Parameter validation\n   * - API call with proper typing\n   * - Error handling with user-friendly messages\n   * - Loading state management\n   * - Logging for debugging\n   */\n  const fetchCitationDetails = useCallback(async () => {\n    if (!effectiveProjectId || !citationId) {\n      setError('Missing project or citation information');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    setImageError(false);\n\n    try {\n      const client = getClient();\n      const response = await client.getCitation(\n        effectiveProjectId, \n        typeof citationId === 'string' ? parseInt(citationId, 10) : citationId\n      );\n      \n      if (response.data) {\n        setCitationData(response.data as unknown as CitationOpenGraphData);\n        logger.info('CITATION', 'Citation details fetched', {\n          citationId,\n          projectId: effectiveProjectId,\n          hasImage: !!response.data.image\n        });\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch citation details';\n      setError(errorMessage);\n      logger.error('CITATION', 'Failed to fetch citation details', {\n        error: err,\n        citationId,\n        projectId: effectiveProjectId\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [effectiveProjectId, citationId]);\n\n  /**\n   * Fetch citation details when modal opens\n   * \n   * Triggers API call when modal becomes visible and required data is available\n   */\n  useEffect(() => {\n    if (isOpen && effectiveProjectId && citationId) {\n      fetchCitationDetails();\n    }\n  }, [isOpen, effectiveProjectId, citationId, fetchCitationDetails]);\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            onClick={onClose}\n            className=\"fixed inset-0 bg-black/50 z-50\"\n          />\n\n          {/* Modal */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            className={cn(\n              \"fixed bg-background shadow-xl z-50\",\n              isMobile \n                ? \"inset-x-0 bottom-0 top-20 rounded-t-xl flex flex-col\" \n                : \"inset-x-0 top-[10%] mx-auto max-w-2xl rounded-lg max-h-[90vh] overflow-hidden\"\n            )}\n          >\n          {/* Header */}\n          <div className={cn(\n            \"flex items-center justify-between border-b border-border bg-background/95 backdrop-blur-sm flex-shrink-0\",\n            isMobile ? \"px-4 py-4\" : \"p-4\"\n          )}>\n            <h2 className={cn(\n              \"font-semibold text-foreground\",\n              isMobile ? \"text-lg\" : \"text-lg\"\n            )}>\n              Citation Details\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className={cn(\n                isMobile ? \"h-9 w-9 touch-target\" : \"h-8 w-8\"\n              )}\n            >\n              <X className={cn(\n                isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n              )} />\n            </Button>\n          </div>\n\n          {/* Content */}\n          <div className={cn(\n            \"overflow-y-auto\",\n            isMobile \n              ? \"flex-1 px-4 py-4 pb-6 safe-area-pb\" \n              : \"p-4 max-h-[calc(90vh-120px)]\"\n          )}>\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n              </div>\n            ) : error ? (\n              <div className={cn(\n                \"flex items-center gap-3 p-4 bg-red-50 dark:bg-red-950/20 rounded-lg\",\n                isMobile && \"mx-0\"\n              )}>\n                <AlertCircle className={cn(\n                  \"text-red-600 flex-shrink-0\",\n                  isMobile ? \"h-5 w-5\" : \"h-5 w-5\"\n                )} />\n                <div className=\"flex-1\">\n                  <p className={cn(\n                    \"font-medium text-red-900 dark:text-red-200\",\n                    isMobile ? \"text-sm\" : \"text-sm\"\n                  )}>Error loading citation</p>\n                  <p className={cn(\n                    \"text-red-700 dark:text-red-300 mt-1\",\n                    isMobile ? \"text-xs\" : \"text-sm\"\n                  )}>{error}</p>\n                </div>\n              </div>\n            ) : citationData ? (\n              <div className={cn(\n                \"space-y-4\",\n                isMobile && \"space-y-5\"\n              )}>\n                {/* Open Graph Image */}\n                {citationData.image && !imageError && (\n                  <div className={cn(\n                    \"relative rounded-lg overflow-hidden bg-muted\",\n                    isMobile && \"-mx-4 rounded-none\"\n                  )}>\n                    <img\n                      src={citationData.image}\n                      alt={citationData.title}\n                      className=\"w-full h-auto\"\n                      onError={() => setImageError(true)}\n                    />\n                    {isMobile && (\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent pointer-events-none\" />\n                    )}\n                  </div>\n                )}\n\n                {/* Title */}\n                <div>\n                  <h3 className={cn(\n                    \"font-semibold text-foreground\",\n                    isMobile ? \"text-lg leading-tight\" : \"text-xl\"\n                  )}>\n                    {citationData.title}\n                  </h3>\n                </div>\n\n                {/* URL */}\n                <div className={cn(\n                  \"flex items-center gap-2 text-muted-foreground\",\n                  isMobile ? \"text-sm\" : \"text-sm\"\n                )}>\n                  <Globe className={cn(\n                    \"flex-shrink-0\",\n                    isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                  )} />\n                  <a\n                    href={citationData.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className={cn(\n                      \"hover:text-brand-600 transition-colors\",\n                      isMobile ? \"break-all\" : \"truncate\"\n                    )}\n                  >\n                    {citationData.url}\n                  </a>\n                </div>\n\n                {/* Description */}\n                {citationData.description && (\n                  <div className=\"prose prose-gray dark:prose-invert max-w-none\">\n                    <p className={cn(\n                      \"text-foreground\",\n                      isMobile ? \"text-sm leading-relaxed\" : \"\"\n                    )}>{citationData.description}</p>\n                  </div>\n                )}\n\n                {/* Metadata */}\n                <div className={cn(\n                  \"pt-4 border-t border-border space-y-3\",\n                  isMobile && \"space-y-3\"\n                )}>\n                  <div className={cn(\n                    \"flex items-center justify-between\",\n                    isMobile ? \"text-sm\" : \"text-sm\"\n                  )}>\n                    <span className=\"text-muted-foreground\">Citation ID</span>\n                    <span className={cn(\n                      \"font-mono text-foreground\",\n                      isMobile ? \"text-base\" : \"\"\n                    )}>#{citationData.id}</span>\n                  </div>\n                  {citationData.image && (\n                    <div className={cn(\n                      \"flex items-center justify-between\",\n                      isMobile ? \"text-sm\" : \"text-sm\"\n                    )}>\n                      <span className=\"text-muted-foreground\">Has preview image</span>\n                      <ImageIcon className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                    </div>\n                  )}\n                </div>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className={cn(\n            \"border-t bg-muted flex-shrink-0\",\n            isMobile ? \"p-4 safe-area-pb\" : \"p-4\"\n          )}>\n            <div className={cn(\n              \"flex items-center\",\n              isMobile ? \"flex-col gap-3\" : \"justify-between\"\n            )}>\n              <div className={cn(\n                \"text-muted-foreground\",\n                isMobile ? \"text-xs text-center\" : \"text-xs\"\n              )}>\n                Open Graph data from cited source\n              </div>\n              {citationData && (\n                <a\n                  href={citationData.url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className={cn(\n                    \"inline-flex items-center gap-2 font-medium text-brand-600 hover:text-brand-700 transition-colors\",\n                    isMobile \n                      ? \"w-full justify-center bg-brand-600 text-white hover:bg-brand-700 hover:text-white rounded-lg px-4 py-3 text-base touch-target\" \n                      : \"px-3 py-1.5 text-sm\"\n                  )}\n                >\n                  Visit source\n                  <ExternalLink className={cn(\n                    isMobile ? \"h-4 w-4\" : \"h-3.5 w-3.5\"\n                  )} />\n                </a>\n              )}\n            </div>\n          </div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};","'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  FileText,\n  Download,\n  Loader,\n  AlertCircle,\n  Copy,\n  Check\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { toast } from 'sonner';\n\ninterface CitationFilePreviewProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: string;\n  fileName?: string;\n}\n\nexport const CitationFilePreview: React.FC<CitationFilePreviewProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  fileName = 'Citation File'\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [fileContent, setFileContent] = useState<string | null>(null);\n  const [contentType, setContentType] = useState<string>('text/plain');\n  const [copied, setCopied] = useState(false);\n\n  const fetchFilePreview = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const client = getClient();\n      const response = await client.previewCitationFile(citationId);\n      \n      // Handle different response formats\n      if (typeof response === 'string') {\n        setFileContent(response);\n        setContentType('text/plain');\n      } else if (response.data) {\n        setFileContent(response.data.content || response.data);\n        setContentType(response.data.content_type || 'text/plain');\n      } else {\n        setFileContent(JSON.stringify(response, null, 2));\n        setContentType('application/json');\n      }\n      \n      logger.info('CITATION_PREVIEW', 'File preview fetched', {\n        citationId,\n        contentLength: fileContent?.length\n      });\n    } catch (err: any) {\n      logger.error('CITATION_PREVIEW', 'Failed to fetch file preview', {\n        error: err,\n        citationId\n      });\n      \n      if (err.status === 400) {\n        setError('Invalid citation ID.');\n      } else if (err.status === 401) {\n        setError('Authentication failed. Please log in again.');\n      } else if (err.status === 403) {\n        setError('Access denied. You do not have permission to view this file.');\n      } else if (err.status === 404) {\n        setError('Citation file not found.');\n      } else if (err.status === 500) {\n        setError('Server error. Please try again later.');\n      } else {\n        setError('Failed to load file preview.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [citationId]);\n\n  useEffect(() => {\n    if (isOpen && citationId) {\n      fetchFilePreview();\n    }\n  }, [isOpen, citationId, fetchFilePreview]);\n\n  const handleCopy = async () => {\n    if (!fileContent) return;\n    \n    try {\n      await navigator.clipboard.writeText(fileContent);\n      setCopied(true);\n      toast.success('Content copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      toast.error('Failed to copy content');\n    }\n  };\n\n  const handleDownload = () => {\n    if (!fileContent) return;\n    \n    const blob = new Blob([fileContent], { type: contentType });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast.success('File downloaded');\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        {/* Backdrop */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onClick={onClose}\n          className=\"absolute inset-0 bg-black/50\"\n        />\n\n        {/* Modal */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.95 }}\n          className=\"relative bg-background rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden\"\n        >\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-border\">\n            <div className=\"flex items-center gap-3\">\n              <FileText className=\"h-5 w-5 text-muted-foreground\" />\n              <h2 className=\"text-lg font-semibold text-foreground\">\n                {fileName}\n              </h2>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleCopy}\n                disabled={!fileContent}\n              >\n                {copied ? (\n                  <>\n                    <Check className=\"h-4 w-4 mr-2\" />\n                    Copied\n                  </>\n                ) : (\n                  <>\n                    <Copy className=\"h-4 w-4 mr-2\" />\n                    Copy\n                  </>\n                )}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleDownload}\n                disabled={!fileContent}\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onClose}\n                className=\"h-8 w-8\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-4 overflow-y-auto max-h-[calc(90vh-120px)]\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n              </div>\n            ) : error ? (\n              <div className=\"flex items-center gap-3 p-4 bg-red-50 rounded-lg\">\n                <AlertCircle className=\"h-5 w-5 text-red-600 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-destructive\">Error loading file</p>\n                  <p className=\"text-sm text-destructive/90 mt-1\">{error}</p>\n                </div>\n              </div>\n            ) : fileContent ? (\n              <div className=\"font-mono text-sm bg-accent rounded-lg p-4 text-foreground\">\n                <pre className=\"whitespace-pre-wrap break-words\">\n                  {fileContent}\n                </pre>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t border-border bg-accent\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-xs text-muted-foreground\">\n                Citation ID: {citationId}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                {contentType}\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};","/**\n * Conversation Manager Component\n * \n * Provides conversation switching UI for widget and floating modes.\n * Shows a list of conversations with ability to create new ones and switch between them.\n * \n * Features:\n * - Conversation list with titles and timestamps\n * - Create new conversation button\n * - Switch between conversations\n * - Edit conversation titles inline\n * - Delete conversations\n * - Session-based isolation\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Plus, MessageCircle, Edit2, Trash2, Check, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils';\n\ninterface Conversation {\n  id: string;\n  title: string;\n  createdAt: string;\n  messages: any[];\n}\n\ninterface ConversationManagerProps {\n  sessionId: string;\n  maxConversations?: number;\n  currentConversationId?: string;\n  onConversationChange?: (conversation: Conversation) => void;\n  onCreateConversation?: () => void;\n  className?: string;\n  refreshKey?: number; // Add refresh key to force re-render\n}\n\nexport const ConversationManager: React.FC<ConversationManagerProps> = ({\n  sessionId,\n  maxConversations,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  className,\n  refreshKey,\n}) => {\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editTitle, setEditTitle] = useState('');\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Load conversations from localStorage\n  useEffect(() => {\n    const loadConversations = () => {\n      const stored = localStorage.getItem(`customgpt_conversations_${sessionId}`);\n      if (stored) {\n        try {\n          const parsed = JSON.parse(stored);\n          setConversations(parsed);\n        } catch (e) {\n          console.error('Failed to parse conversations:', e);\n        }\n      }\n    };\n\n    loadConversations();\n    // Listen for storage changes\n    window.addEventListener('storage', loadConversations);\n    return () => window.removeEventListener('storage', loadConversations);\n  }, [sessionId, refreshKey]); // Add refreshKey as dependency\n\n  const handleCreateConversation = () => {\n    if (maxConversations && conversations.length >= maxConversations) {\n      toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n      return;\n    }\n    onCreateConversation?.();\n  };\n\n  const handleSelectConversation = (conversation: Conversation) => {\n    onConversationChange?.(conversation);\n    setIsExpanded(false);\n  };\n\n  const handleEditStart = (conversation: Conversation) => {\n    setEditingId(conversation.id);\n    setEditTitle(conversation.title);\n  };\n\n  const handleEditSave = (conversationId: string) => {\n    const updated = conversations.map(c =>\n      c.id === conversationId ? { ...c, title: editTitle } : c\n    );\n    setConversations(updated);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(updated)\n    );\n    setEditingId(null);\n  };\n\n  const handleDelete = (conversationId: string) => {\n    if (conversations.length <= 1) {\n      toast.error('Cannot delete the last conversation');\n      return;\n    }\n    \n    const filtered = conversations.filter(c => c.id !== conversationId);\n    setConversations(filtered);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(filtered)\n    );\n    \n    // If deleting current conversation, switch to another\n    if (currentConversationId === conversationId && filtered.length > 0) {\n      onConversationChange?.(filtered[0]);\n    }\n  };\n\n  const currentConversation = conversations.find(c => c.id === currentConversationId);\n\n  return (\n    <div className={cn('relative', className)}>\n      {/* Collapsed View */}\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"flex items-center gap-2 px-3 py-2 text-sm font-medium text-foreground hover:bg-accent rounded-lg transition-colors w-full\"\n      >\n        <MessageCircle className=\"w-4 h-4\" />\n        <span className=\"truncate flex-1 text-left\">\n          {currentConversation?.title || 'Select Conversation'}\n        </span>\n        <svg\n          className={cn('w-4 h-4 transition-transform', isExpanded && 'rotate-180')}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n        </svg>\n      </button>\n\n      {/* Expanded View */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-background rounded-lg shadow-lg border border-border z-50 max-h-80 overflow-y-auto\"\n          >\n            {/* New Conversation Button */}\n            <button\n              onClick={handleCreateConversation}\n              disabled={maxConversations ? conversations.length >= maxConversations : false}\n              className=\"flex items-center gap-2 w-full px-4 py-3 text-sm font-medium text-brand-600 hover:bg-brand-50 disabled:opacity-50 disabled:cursor-not-allowed border-b\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              New Conversation\n            </button>\n\n            {/* Conversation List */}\n            <div className=\"py-2\">\n              {conversations.map((conversation) => (\n                <div\n                  key={conversation.id}\n                  className={cn(\n                    'group flex items-center px-4 py-2 hover:bg-accent',\n                    currentConversationId === conversation.id && 'bg-brand-50'\n                  )}\n                >\n                  {editingId === conversation.id ? (\n                    // Edit Mode\n                    <div className=\"flex items-center gap-2 flex-1\">\n                      <input\n                        type=\"text\"\n                        value={editTitle}\n                        onChange={(e) => setEditTitle(e.target.value)}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') handleEditSave(conversation.id);\n                          if (e.key === 'Escape') setEditingId(null);\n                        }}\n                        className=\"flex-1 px-2 py-1 text-sm border rounded focus:outline-none focus:ring-1 focus:ring-brand-500\"\n                        autoFocus\n                      />\n                      <button\n                        onClick={() => handleEditSave(conversation.id)}\n                        className=\"p-1 text-green-600 hover:bg-green-50 rounded\"\n                      >\n                        <Check className=\"w-4 h-4\" />\n                      </button>\n                      <button\n                        onClick={() => setEditingId(null)}\n                        className=\"p-1 text-muted-foreground hover:bg-accent rounded\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  ) : (\n                    // View Mode\n                    <>\n                      <button\n                        onClick={() => handleSelectConversation(conversation)}\n                        className=\"flex-1 text-left\"\n                      >\n                        <div className=\"text-sm font-medium text-foreground truncate\">\n                          {conversation.title}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {new Date(conversation.createdAt).toLocaleDateString()}\n                        </div>\n                      </button>\n                      <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <button\n                          onClick={() => handleEditStart(conversation)}\n                          className=\"p-1 text-muted-foreground hover:text-foreground hover:bg-accent rounded\"\n                        >\n                          <Edit2 className=\"w-3 h-3\" />\n                        </button>\n                        <button\n                          onClick={() => handleDelete(conversation.id)}\n                          className=\"p-1 text-muted-foreground hover:text-destructive hover:bg-destructive/10 rounded\"\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </button>\n                      </div>\n                    </>\n                  )}\n                </div>\n              ))}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","/**\n * Message Error Display Component\n * \n * Displays error messages with appropriate styling and context based on HTTP status codes.\n * Provides user-friendly error messages and actionable guidance.\n */\n\nimport React from 'react';\nimport { AlertCircle, XCircle, CreditCard, UserX, Search, ServerCrash } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface MessageErrorDisplayProps {\n  error: string | Error;\n  statusCode?: number;\n  onRetry?: () => void;\n  className?: string;\n}\n\n/**\n * Parse error to extract status code and message\n */\nconst parseError = (error: string | Error): { statusCode?: number; message: string } => {\n  if (typeof error === 'string') {\n    // Try to extract status code from error message\n    const statusMatch = error.match(/(\\d{3})/);\n    const statusCode = statusMatch ? parseInt(statusMatch[1]) : undefined;\n    return { statusCode, message: error };\n  }\n  \n  return { \n    statusCode: (error as any).status || (error as any).statusCode,\n    message: error.message \n  };\n};\n\n/**\n * Get error details based on status code\n */\nconst getErrorDetails = (statusCode?: number, message?: string) => {\n  switch (statusCode) {\n    case 400:\n      return {\n        icon: AlertCircle,\n        title: 'Invalid Request',\n        description: 'The request format is invalid. Please check your input and try again.',\n        className: 'border-orange-200 bg-orange-50',\n        iconClassName: 'text-orange-600',\n        textClassName: 'text-orange-800',\n      };\n      \n    case 401:\n      return {\n        icon: UserX,\n        title: 'Authentication Failed',\n        description: 'Your API key is either missing or invalid. Please check your API key configuration.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showSupport: true,\n      };\n      \n    case 403:\n      // Check if this is an inactive agent error\n      const isInactiveAgent = message && (\n        message.toLowerCase().includes('inactive') ||\n        message.toLowerCase().includes('no documents') ||\n        message.toLowerCase().includes('agent is not active') ||\n        message.toLowerCase().includes('project is not active') ||\n        message.toLowerCase().includes('no documents uploaded')\n      );\n      \n      if (isInactiveAgent) {\n        return {\n          icon: AlertCircle,\n          title: 'Agent Inactive',\n          description: 'This agent is inactive. Please add documents to activate it before starting a conversation.',\n          className: 'border-orange-200 bg-orange-50',\n          iconClassName: 'text-orange-600',\n          textClassName: 'text-orange-800',\n        };\n      }\n      \n      return {\n        icon: UserX,\n        title: 'Access Denied',\n        description: 'You don\\'t have permission to access this resource. Please check your API key permissions.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showSupport: true,\n      };\n      \n    case 404:\n      return {\n        icon: Search,\n        title: 'Not Found',\n        description: 'The requested agent or conversation was not found. It may have been deleted or you may not have access.',\n        className: 'border-border bg-accent',\n        iconClassName: 'text-muted-foreground',\n        textClassName: 'text-foreground',\n      };\n      \n    case 429:\n      return {\n        icon: CreditCard,\n        title: 'Query Credits Exhausted',\n        description: 'You have exhausted your current query credits. Please contact customer service for assistance.',\n        className: 'border-yellow-200 bg-yellow-50',\n        iconClassName: 'text-yellow-600',\n        textClassName: 'text-yellow-800',\n        showSupport: true,\n        supportUrl: 'https://customgpt.freshdesk.com/support/home',\n      };\n      \n    case 500:\n    case 502:\n    case 503:\n    case 504:\n      return {\n        icon: ServerCrash,\n        title: 'Server Error',\n        description: 'An internal server error occurred. Please try again later or contact support if the issue persists.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showRetry: true,\n      };\n      \n    default:\n      return {\n        icon: XCircle,\n        title: 'Error',\n        description: message || 'An unexpected error occurred. Please try again.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showRetry: true,\n      };\n  }\n};\n\nexport const MessageErrorDisplay: React.FC<MessageErrorDisplayProps> = ({\n  error,\n  statusCode: propStatusCode,\n  onRetry,\n  className,\n}) => {\n  const { statusCode: parsedStatusCode, message } = parseError(error);\n  const finalStatusCode = propStatusCode || parsedStatusCode;\n  \n  const errorDetails = getErrorDetails(finalStatusCode, message);\n  const Icon = errorDetails.icon;\n  \n  return (\n    <div\n      className={cn(\n        'p-4 rounded-lg border',\n        errorDetails.className,\n        className\n      )}\n    >\n      <div className=\"flex items-start gap-3\">\n        <Icon className={cn('w-5 h-5 mt-0.5 flex-shrink-0', errorDetails.iconClassName)} />\n        \n        <div className=\"flex-1 space-y-2\">\n          <div>\n            <h3 className={cn('font-medium', errorDetails.textClassName)}>\n              {errorDetails.title}\n              {finalStatusCode && ` (${finalStatusCode})`}\n            </h3>\n            <p className={cn('text-sm mt-1', errorDetails.textClassName, 'opacity-90')}>\n              {errorDetails.description}\n            </p>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"flex items-center gap-2 mt-3\">\n            {errorDetails.showRetry && onRetry && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={onRetry}\n                className=\"text-xs\"\n              >\n                Try Again\n              </Button>\n            )}\n            \n            {errorDetails.showSupport && (\n              <a\n                href={errorDetails.supportUrl || 'https://customgpt.freshdesk.com/support/home'}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-xs underline hover:no-underline\"\n              >\n                Contact Support\n              </a>\n            )}\n          </div>\n          \n          {/* Technical Details (collapsed by default) */}\n          {message && message !== errorDetails.description && (\n            <details className=\"mt-3\">\n              <summary className={cn('text-xs cursor-pointer', errorDetails.textClassName, 'opacity-70')}>\n                Technical Details\n              </summary>\n              <pre className={cn(\n                'mt-2 p-2 text-xs rounded bg-background bg-opacity-50 overflow-x-auto',\n                errorDetails.textClassName,\n                'opacity-80'\n              )}>\n                {message}\n              </pre>\n            </details>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","import React, { createContext, useContext } from 'react';\n\n// Widget instance type - we'll define the actual widget interface based on what we need\ninterface WidgetInstance {\n  sessionId: string;\n  createConversation: (title?: string) => any;\n  switchConversation: (conversationId: string) => void;\n  getConversations: () => any[];\n  updateConversationTitle: (conversationId: string, newTitle: string) => void;\n  deleteConversation: (conversationId: string) => void;\n  configuration?: any;\n}\n\n// Create the context with undefined default\nconst WidgetContext = createContext<WidgetInstance | undefined>(undefined);\n\n// Provider component props\ninterface WidgetProviderProps {\n  widgetInstance: WidgetInstance;\n  children: React.ReactNode;\n}\n\n// Provider component that will wrap the widget's React tree\nexport const WidgetProvider: React.FC<WidgetProviderProps> = ({ widgetInstance, children }) => {\n  return (\n    <WidgetContext.Provider value={widgetInstance}>\n      {children}\n    </WidgetContext.Provider>\n  );\n};\n\n// Custom hook to use the widget instance from any component\nexport const useWidget = (): WidgetInstance => {\n  const context = useContext(WidgetContext);\n  if (!context) {\n    throw new Error('useWidget must be used within a WidgetProvider');\n  }\n  return context;\n};\n\n// Optional: Hook that returns null instead of throwing if no widget context\nexport const useWidgetSafe = (): WidgetInstance | null => {\n  const context = useContext(WidgetContext);\n  return context || null;\n};","import React, { createContext, useContext, useRef, ReactNode } from 'react';\nimport { StoreApi } from 'zustand';\nimport { createMessageStore, MessageStore } from '../store/widget-stores/messages';\nimport { createConversationStore, ConversationStore } from '../store/widget-stores/conversations';\nimport { createAgentStore, AgentStore } from '../store/widget-stores/agents';\n\n/**\n * Widget Store Context\n * \n * Provides instance-specific Zustand stores for each widget.\n * This ensures complete data isolation between multiple widgets.\n * \n * Each widget instance gets its own:\n * - Message store (for chat messages)\n * - Conversation store (for conversation management)\n * - Agent store (for agent selection)\n * \n * The config store remains global as API configuration should be shared.\n */\n\ninterface WidgetStores {\n  messageStore: StoreApi<MessageStore>;\n  conversationStore: StoreApi<ConversationStore>;\n  agentStore: StoreApi<AgentStore>;\n}\n\ninterface WidgetStoreContextValue {\n  stores: WidgetStores;\n}\n\nexport const WidgetStoreContext = createContext<WidgetStoreContextValue | null>(null);\n\ninterface WidgetStoreProviderProps {\n  children: ReactNode;\n  sessionId: string;\n}\n\n/**\n * Widget Store Provider\n * \n * Creates and provides instance-specific stores for a widget.\n * Stores are created once per widget instance and reused.\n */\nexport const WidgetStoreProvider: React.FC<WidgetStoreProviderProps> = ({ \n  children, \n  sessionId \n}) => {\n  // Use ref to ensure stores are only created once per widget instance\n  const storesRef = useRef<WidgetStores | null>(null);\n  \n  if (!storesRef.current) {\n    // Create stores in the correct order, passing references to dependent stores\n    const agentStore = createAgentStore(sessionId);\n    const conversationStore = createConversationStore(sessionId);\n    const messageStore = createMessageStore(sessionId, agentStore, conversationStore);\n    \n    storesRef.current = {\n      messageStore,\n      conversationStore,\n      agentStore,\n    };\n  }\n  \n  return (\n    <WidgetStoreContext.Provider value={{ stores: storesRef.current }}>\n      {children}\n    </WidgetStoreContext.Provider>\n  );\n};\n\n/**\n * Hook to access widget-specific stores\n */\nexport const useWidgetStores = (): WidgetStores => {\n  const context = useContext(WidgetStoreContext);\n  if (!context) {\n    throw new Error('useWidgetStores must be used within WidgetStoreProvider');\n  }\n  return context.stores;\n};\n\n/**\n * Individual store hooks for easier access\n */\nexport const useWidgetMessageStore = () => {\n  const { messageStore } = useWidgetStores();\n  return messageStore;\n};\n\nexport const useWidgetConversationStore = () => {\n  const { conversationStore } = useWidgetStores();\n  return conversationStore;\n};\n\nexport const useWidgetAgentStore = () => {\n  const { agentStore } = useWidgetStores();\n  return agentStore;\n};","/**\n * Widget Store Hooks\n * \n * These hooks automatically select between global and widget-specific stores\n * based on whether the component is rendered inside a widget context.\n */\n\nimport { useContext } from 'react';\nimport { useStore } from 'zustand';\nimport { WidgetStoreContext } from '../widget/WidgetStoreContext';\nimport { useMessageStore as useGlobalMessageStore } from '../store';\nimport { useConversationStore as useGlobalConversationStore } from '../store';\nimport { useAgentStore as useGlobalAgentStore } from '../store';\nimport type { MessageStore } from '../store/widget-stores/messages';\nimport type { ConversationStore } from '../store/widget-stores/conversations';\nimport type { AgentStore } from '../store/widget-stores/agents';\n\n/**\n * Check if we're inside a widget context\n */\nfunction useIsInWidgetContext(): boolean {\n  try {\n    const context = useContext(WidgetStoreContext);\n    return context !== null;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get widget stores if inside widget context\n */\nfunction useWidgetStores() {\n  const context = useContext(WidgetStoreContext);\n  return context?.stores;\n}\n\n/**\n * Message store hook that automatically selects the correct store\n */\nexport function useMessageStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  const globalStore = useGlobalMessageStore();\n  const widgetStore = useStore(\n    widgetStores?.messageStore || useGlobalMessageStore,\n    (state) => state\n  );\n  \n  return isInWidget && widgetStores ? widgetStore : globalStore;\n}\n\n/**\n * Conversation store hook that automatically selects the correct store\n */\nexport function useConversationStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  const globalStore = useGlobalConversationStore();\n  const widgetStore = useStore(\n    widgetStores?.conversationStore || useGlobalConversationStore,\n    (state) => state\n  );\n  \n  return isInWidget && widgetStores ? widgetStore : globalStore;\n}\n\n/**\n * Agent store hook that automatically selects the correct store\n */\nexport function useAgentStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  const globalStore = useGlobalAgentStore();\n  const widgetStore = useStore(\n    widgetStores?.agentStore || useGlobalAgentStore,\n    (state) => state\n  );\n  \n  return isInWidget && widgetStores ? widgetStore : globalStore;\n}\n\n/**\n * Export convenience functions to check store source\n */\nexport function useIsUsingWidgetStore(): boolean {\n  return useIsInWidgetContext();\n}\n\n/**\n * Get the current session ID if in widget context\n */\nexport function useWidgetSessionId(): string | null {\n  const context = useContext(WidgetStoreContext);\n  if (!context) return null;\n  \n  // Extract session ID from the store's localStorage key\n  const messageStore = context.stores.messageStore;\n  const state = messageStore.getState();\n  \n  // Session ID would need to be added to context for retrieval\n  return null;\n}","/**\n * Theme Manager\n * \n * Orchestrates theme switching, loading, and lifecycle management.\n * Provides centralized access to all available voice themes.\n */\n\nimport { IVoiceTheme, ThemeMetadata, ThemeFactory, VoiceState } from './IVoiceTheme';\n\nexport interface ThemeTransitionOptions {\n  duration: number;\n  easing: 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out';\n  crossfade: boolean;\n}\n\nexport interface ThemeRegistration {\n  id: string;\n  factory: ThemeFactory;\n  metadata: ThemeMetadata;\n}\n\n/**\n * Theme Manager - Singleton class for managing voice themes\n */\nexport class ThemeManager {\n  private static instance: ThemeManager;\n  private registeredThemes: Map<string, ThemeRegistration> = new Map();\n  private currentTheme: IVoiceTheme | null = null;\n  private canvas: HTMLCanvasElement | null = null;\n  private context: CanvasRenderingContext2D | null = null;\n  \n  // Transition state\n  private isTransitioning = false;\n  private transitionTheme: IVoiceTheme | null = null;\n  private transitionProgress = 0;\n  private transitionOptions: ThemeTransitionOptions = {\n    duration: 1000,\n    easing: 'ease-in-out',\n    crossfade: true\n  };\n\n  // Event callbacks\n  private callbacks: {\n    onThemeChange?: (oldTheme: string | null, newTheme: string) => void;\n    onTransitionStart?: (from: string | null, to: string) => void;\n    onTransitionComplete?: (themeId: string) => void;\n    onThemeError?: (error: Error, themeId: string) => void;\n  } = {};\n\n  private constructor() {\n    this.registerBuiltInThemes();\n  }\n\n  /**\n   * Get singleton instance\n   */\n  static getInstance(): ThemeManager {\n    if (!ThemeManager.instance) {\n      ThemeManager.instance = new ThemeManager();\n    }\n    return ThemeManager.instance;\n  }\n\n  /**\n   * Initialize with canvas context\n   */\n  initialize(canvas: HTMLCanvasElement, context: CanvasRenderingContext2D): void {\n    this.canvas = canvas;\n    this.context = context;\n    \n    // Initialize current theme if one is set\n    if (this.currentTheme && this.context) {\n      this.currentTheme.init(this.context, canvas.width, canvas.height);\n    }\n  }\n\n  /**\n   * Register a new theme\n   */\n  registerTheme(registration: ThemeRegistration): void {\n    if (this.registeredThemes.has(registration.id)) {\n      console.warn(`Theme ${registration.id} is already registered. Overwriting.`);\n    }\n    \n    this.registeredThemes.set(registration.id, registration);\n    console.log(`Registered theme: ${registration.id}`);\n  }\n\n  /**\n   * Unregister a theme\n   */\n  unregisterTheme(themeId: string): boolean {\n    if (this.currentTheme?.id === themeId) {\n      console.warn(`Cannot unregister active theme: ${themeId}`);\n      return false;\n    }\n    \n    return this.registeredThemes.delete(themeId);\n  }\n\n  /**\n   * Get all available themes metadata\n   */\n  getAvailableThemes(): ThemeMetadata[] {\n    return Array.from(this.registeredThemes.values()).map(reg => reg.metadata);\n  }\n\n  /**\n   * Get theme metadata by ID\n   */\n  getThemeMetadata(themeId: string): ThemeMetadata | null {\n    const registration = this.registeredThemes.get(themeId);\n    return registration ? registration.metadata : null;\n  }\n\n  /**\n   * Switch to a new theme\n   */\n  async switchTheme(themeId: string, transitionOptions?: Partial<ThemeTransitionOptions>): Promise<boolean> {\n    if (this.isTransitioning) {\n      console.warn('Theme transition already in progress');\n      return false;\n    }\n\n    const registration = this.registeredThemes.get(themeId);\n    if (!registration) {\n      const error = new Error(`Theme not found: ${themeId}`);\n      this.callbacks.onThemeError?.(error, themeId);\n      return false;\n    }\n\n    // If this is the current theme, no need to switch\n    if (this.currentTheme?.id === themeId) {\n      return true;\n    }\n\n    try {\n      // Update transition options\n      this.transitionOptions = { ...this.transitionOptions, ...transitionOptions };\n\n      // Create new theme instance\n      const newTheme = registration.factory();\n      \n      // Initialize with current context if available\n      if (this.context && this.canvas) {\n        newTheme.init(this.context, this.canvas.width, this.canvas.height);\n      }\n\n      // Start transition\n      await this.performThemeTransition(newTheme);\n      \n      return true;\n    } catch (error) {\n      console.error(`Failed to switch to theme ${themeId}:`, error);\n      this.callbacks.onThemeError?.(error as Error, themeId);\n      return false;\n    }\n  }\n\n  /**\n   * Get current active theme\n   */\n  getCurrentTheme(): IVoiceTheme | null {\n    return this.currentTheme;\n  }\n\n  /**\n   * Get current theme ID\n   */\n  getCurrentThemeId(): string | null {\n    return this.currentTheme?.id || null;\n  }\n\n  /**\n   * Set event callbacks\n   */\n  setCallbacks(callbacks: Partial<typeof this.callbacks>): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Draw current theme (delegated from Canvas component)\n   */\n  draw(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void {\n    if (this.isTransitioning && this.transitionOptions.crossfade) {\n      this.drawTransition(context, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    } else if (this.currentTheme) {\n      this.currentTheme.draw(context, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    }\n  }\n\n  /**\n   * Forward state changes to current theme\n   */\n  onUserSpeaking(): void {\n    this.currentTheme?.onUserSpeaking();\n    this.transitionTheme?.onUserSpeaking();\n  }\n\n  onProcessing(): void {\n    this.currentTheme?.onProcessing();\n    this.transitionTheme?.onProcessing();\n  }\n\n  onAiSpeaking(): void {\n    this.currentTheme?.onAiSpeaking();\n    this.transitionTheme?.onAiSpeaking();\n  }\n\n  reset(): void {\n    this.currentTheme?.reset();\n    this.transitionTheme?.reset();\n  }\n\n  /**\n   * Forward mouse events to current theme\n   */\n  setMousePosition(x: number, y: number, canvasWidth: number, canvasHeight: number): void {\n    this.currentTheme?.setMousePosition(x, y, canvasWidth, canvasHeight);\n    this.transitionTheme?.setMousePosition(x, y, canvasWidth, canvasHeight);\n  }\n\n  setHovering(hovering: boolean): void {\n    this.currentTheme?.setHovering(hovering);\n    this.transitionTheme?.setHovering(hovering);\n  }\n\n  /**\n   * Get performance metrics from current theme\n   */\n  getPerformanceMetrics() {\n    return this.currentTheme?.getPerformanceMetrics() || {};\n  }\n\n  /**\n   * Dispose of all resources\n   */\n  dispose(): void {\n    this.currentTheme?.dispose();\n    this.transitionTheme?.dispose();\n    this.currentTheme = null;\n    this.transitionTheme = null;\n    this.isTransitioning = false;\n  }\n\n  // Private methods\n\n  /**\n   * Register built-in themes\n   */\n  private registerBuiltInThemes(): void {\n    // Import themes dynamically to avoid circular dependencies\n    import('./DefaultTheme').then(({ DefaultTheme }) => {\n      this.registerTheme({\n        id: 'default',\n        factory: () => new DefaultTheme(),\n        metadata: {\n          id: 'default',\n          name: 'Classic Sphere',\n          description: 'The original 3D particle sphere with smooth color transitions',\n          category: 'particle',\n          performanceProfile: 'medium',\n          previewColors: ['#4285F4', '#34A853', '#EA4335'],\n          previewDescription: 'Rotating particle sphere with dynamic colors'\n        }\n      });\n    });\n\n    import('./StarfieldTheme').then(({ StarfieldTheme }) => {\n      this.registerTheme({\n        id: 'starfield',\n        factory: () => new StarfieldTheme(),\n        metadata: {\n          id: 'starfield',\n          name: 'Cosmic Starfield',\n          description: 'Twinkling stars, dynamic constellations, and flowing nebula clouds',\n          category: 'particle',\n          performanceProfile: 'medium',\n          previewColors: ['#FFFFFF', '#ADD8E6', '#FFD700', '#FFC0CB'],\n          previewDescription: 'Immersive space environment with stars and constellations'\n        }\n      });\n    });\n\n    import('./JarvisTheme').then(({ JarvisTheme }) => {\n      this.registerTheme({\n        id: 'jarvis',\n        factory: () => new JarvisTheme(),\n        metadata: {\n          id: 'jarvis',\n          name: 'J.A.R.V.I.S.',\n          description: 'Advanced AI interface with arc reactor, HUD elements, and energy particles',\n          category: 'advanced',\n          performanceProfile: 'heavy',\n          previewColors: ['#00A2E8', '#00FFFF', '#FF6500', '#FF00FF'],\n          previewDescription: 'Iron Man-inspired technological interface with arc reactor'\n        }\n      });\n    });\n\n    import('./LegoTheme').then(({ LegoTheme }) => {\n      this.registerTheme({\n        id: 'lego',\n        factory: () => new LegoTheme(),\n        metadata: {\n          id: 'lego',\n          name: 'LEGO Blocks',\n          description: '3D building blocks that construct and deconstruct with satisfying physics',\n          category: 'artistic',\n          performanceProfile: 'medium',\n          previewColors: ['#C4281C', '#0D69AB', '#12852B', '#F5CD2F'],\n          previewDescription: 'Interactive LEGO blocks building structures with authentic colors'\n        }\n      });\n    });\n\n    import('./StarWarsTheme').then(({ StarWarsTheme }) => {\n      this.registerTheme({\n        id: 'starwars',\n        factory: () => new StarWarsTheme(),\n        metadata: {\n          id: 'starwars',\n          name: 'Star Wars',\n          description: 'Lightsabers, holograms, and the Force in a galaxy far, far away',\n          category: 'advanced',\n          performanceProfile: 'heavy',\n          previewColors: ['#00A2FF', '#FF0000', '#00FF00', '#9333EA'],\n          previewDescription: 'Epic Star Wars experience with lightsabers and hologram effects'\n        }\n      });\n    });\n\n    import('./OceanWaveTheme').then(({ OceanWaveTheme }) => {\n      this.registerTheme({\n        id: 'ocean',\n        factory: () => new OceanWaveTheme(),\n        metadata: {\n          id: 'ocean',\n          name: 'Ocean Waves',\n          description: 'Calming underwater environment with waves, bubbles, and marine life',\n          category: 'particle',\n          performanceProfile: 'medium',\n          previewColors: ['#0077BE', '#00BCF2', '#C8E6FF', '#98CB3B'],\n          previewDescription: 'Serene ocean experience with realistic wave physics and bubbles'\n        }\n      });\n    });\n\n    import('./NFTTheme').then(({ NFTTheme }) => {\n      this.registerTheme({\n        id: 'nft',\n        factory: () => new NFTTheme(),\n        metadata: {\n          id: 'nft',\n          name: 'NFT Art',\n          description: 'Vibrant digital art with morphing shapes, dynamic gradients, and artistic trails',\n          category: 'artistic',\n          performanceProfile: 'heavy',\n          previewColors: ['#FF00FF', '#00FFFF', '#FFFF00', '#8000FF', '#FF0080'],\n          previewDescription: 'Bold NFT-style aesthetics with morphing geometric shapes'\n        }\n      });\n    });\n\n    import('./NothingPhoneTheme').then(({ NothingPhoneTheme }) => {\n      this.registerTheme({\n        id: 'nothing',\n        factory: () => new NothingPhoneTheme(),\n        metadata: {\n          id: 'nothing',\n          name: 'Nothing Phone',\n          description: 'Minimalist design inspired by Nothing Phone with clean dots and typography',\n          category: 'artistic',\n          performanceProfile: 'light',\n          previewColors: ['#FFFFFF', '#F5F5F5', '#C8C8C8', '#808080', '#000000'],\n          previewDescription: 'Clean minimalist interface with Glyph-inspired dot patterns'\n        }\n      });\n    });\n\n    import('./MinecraftTheme').then(({ MinecraftTheme }) => {\n      this.registerTheme({\n        id: 'minecraft',\n        factory: () => new MinecraftTheme(),\n        metadata: {\n          id: 'minecraft',\n          name: 'Minecraft',\n          description: 'Blocky voxel world with building, breaking, and crafting animations',\n          category: 'artistic',\n          performanceProfile: 'medium',\n          previewColors: ['#7CBD52', '#FEF63F', '#A28A4E', '#63EDE5', '#888888'],\n          previewDescription: 'Interactive voxel blocks with authentic Minecraft aesthetics'\n        }\n      });\n    });\n\n    import('./FuturisticTheme').then(({ FuturisticTheme }) => {\n      this.registerTheme({\n        id: 'futuristic',\n        factory: () => new FuturisticTheme(),\n        metadata: {\n          id: 'futuristic',\n          name: 'Futuristic',\n          description: 'High-tech cyberpunk interface with holograms, wireframes, and data streams',\n          category: 'advanced',\n          performanceProfile: 'heavy',\n          previewColors: ['#00FFFF', '#FF00FF', '#FFFF00', '#00FF00', '#0096FF'],\n          previewDescription: 'Cyberpunk-inspired holographic displays and wireframe models'\n        }\n      });\n    });\n\n    import('./VintageModernTheme').then(({ VintageModernTheme }) => {\n      this.registerTheme({\n        id: 'vintage-modern',\n        factory: () => new VintageModernTheme(),\n        metadata: {\n          id: 'vintage-modern',\n          name: 'Vintage Modern',\n          description: 'Retro aesthetics meets modern design with film grain and neon glow',\n          category: 'artistic',\n          performanceProfile: 'medium',\n          previewColors: ['#FF6F91', '#FF9A00', '#ED75FF', '#5FE1FA', '#FFF176'],\n          previewDescription: 'Nostalgic blend of retro TV effects with modern animations'\n        }\n      });\n    });\n\n    import('./AuroraTheme').then(({ AuroraTheme }) => {\n      this.registerTheme({\n        id: 'aurora',\n        factory: () => new AuroraTheme(),\n        metadata: {\n          id: 'aurora',\n          name: 'Aurora Borealis',\n          description: 'Ethereal northern lights with flowing ribbons and magnetic fields',\n          category: 'particle',\n          performanceProfile: 'heavy',\n          previewColors: ['#00FF00', '#0064FF', '#9300D3', '#FF0064', '#5FE1FA'],\n          previewDescription: 'Mesmerizing aurora borealis with realistic light bands'\n        }\n      });\n    });\n\n    console.log('ThemeManager: Built-in themes registered');\n  }\n\n  /**\n   * Perform theme transition\n   */\n  private async performThemeTransition(newTheme: IVoiceTheme): Promise<void> {\n    const oldTheme = this.currentTheme;\n    const oldThemeId = oldTheme?.id || null;\n    \n    this.isTransitioning = true;\n    this.transitionTheme = newTheme;\n    this.transitionProgress = 0;\n\n    // Notify callbacks\n    this.callbacks.onTransitionStart?.(oldThemeId, newTheme.id);\n\n    // If crossfade is disabled, immediately switch\n    if (!this.transitionOptions.crossfade) {\n      this.completeTransition(newTheme, oldTheme);\n      return;\n    }\n\n    // Animate transition\n    return new Promise((resolve) => {\n      const startTime = performance.now();\n      const { duration, easing } = this.transitionOptions;\n\n      const animate = (currentTime: number) => {\n        const elapsed = currentTime - startTime;\n        let progress = Math.min(elapsed / duration, 1);\n\n        // Apply easing\n        progress = this.applyEasing(progress, easing);\n        this.transitionProgress = progress;\n\n        if (progress >= 1) {\n          this.completeTransition(newTheme, oldTheme);\n          resolve();\n        } else {\n          requestAnimationFrame(animate);\n        }\n      };\n\n      requestAnimationFrame(animate);\n    });\n  }\n\n  /**\n   * Complete theme transition\n   */\n  private completeTransition(newTheme: IVoiceTheme, oldTheme: IVoiceTheme | null): void {\n    // Clean up old theme\n    oldTheme?.dispose();\n\n    // Set new theme as current\n    this.currentTheme = newTheme;\n    this.transitionTheme = null;\n    this.isTransitioning = false;\n    this.transitionProgress = 0;\n\n    // Notify callbacks\n    this.callbacks.onThemeChange?.(oldTheme?.id || null, newTheme.id);\n    this.callbacks.onTransitionComplete?.(newTheme.id);\n\n    console.log(`Theme switched to: ${newTheme.id}`);\n  }\n\n  /**\n   * Draw crossfade transition between themes\n   */\n  private drawTransition(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void {\n    // Create temporary canvases for each theme\n    const tempCanvas1 = document.createElement('canvas');\n    const tempCanvas2 = document.createElement('canvas');\n    tempCanvas1.width = tempCanvas2.width = displayWidth;\n    tempCanvas1.height = tempCanvas2.height = displayHeight;\n    \n    const tempCtx1 = tempCanvas1.getContext('2d');\n    const tempCtx2 = tempCanvas2.getContext('2d');\n\n    if (!tempCtx1 || !tempCtx2) return;\n\n    // Draw old theme to first canvas\n    if (this.currentTheme) {\n      this.currentTheme.draw(tempCtx1, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    }\n\n    // Draw new theme to second canvas\n    if (this.transitionTheme) {\n      this.transitionTheme.draw(tempCtx2, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    }\n\n    // Clear main canvas\n    context.clearRect(0, 0, displayWidth, displayHeight);\n\n    // Draw old theme with fading alpha\n    context.globalAlpha = 1 - this.transitionProgress;\n    context.drawImage(tempCanvas1, 0, 0);\n\n    // Draw new theme with increasing alpha\n    context.globalAlpha = this.transitionProgress;\n    context.drawImage(tempCanvas2, 0, 0);\n\n    // Reset alpha\n    context.globalAlpha = 1;\n  }\n\n  /**\n   * Apply easing function to transition progress\n   */\n  private applyEasing(t: number, easing: string): number {\n    switch (easing) {\n      case 'linear':\n        return t;\n      case 'ease-in':\n        return t * t;\n      case 'ease-out':\n        return t * (2 - t);\n      case 'ease-in-out':\n        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n      default:\n        return t;\n    }\n  }\n}\n\n/**\n * Convenience function to get theme manager instance\n */\nexport const getThemeManager = () => ThemeManager.getInstance();","import { useEffect, useRef, forwardRef } from \"react\";\nimport { getThemeManager } from '@/lib/voice/themes/ThemeManager';\nimport { DefaultTheme } from '@/lib/voice/themes/DefaultTheme';\nimport { throttle, debounce } from '@/lib/utils/throttle';\n\ninterface CanvasProps {\n  // Classic theme only - no theme switching\n}\n\nconst Canvas = forwardRef<HTMLCanvasElement, CanvasProps>(({}, ref) => {\n  const internalRef = useRef<HTMLCanvasElement>(null);\n  const canvasRef = (ref as any) || internalRef;\n  const themeManagerRef = useRef(getThemeManager());\n  const isInitializedRef = useRef(false);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const context = canvas.getContext('2d');\n    if (!context) return;\n\n    const themeManager = themeManagerRef.current;\n\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    \n    // Debounce resize to prevent excessive updates\n    const debouncedResize = debounce(resizeCanvas, 250);\n\n    resizeCanvas();\n    window.addEventListener('resize', debouncedResize);\n\n    // Initialize theme manager with canvas context\n    if (!isInitializedRef.current) {\n      themeManager.initialize(canvas, context);\n      \n      // Register default theme if not already registered\n      if (!themeManager.getThemeMetadata('default')) {\n        themeManager.registerTheme({\n          id: 'default',\n          factory: () => new DefaultTheme(),\n          metadata: {\n            id: 'default',\n            name: 'Classic Sphere',\n            description: 'The original 3D particle sphere with smooth color transitions',\n            category: 'particle',\n            performanceProfile: 'medium',\n            previewColors: ['#4285F4', '#34A853', '#EA4335'],\n            previewDescription: 'Rotating particle sphere with dynamic colors'\n          }\n        });\n      }\n\n      // Use default theme only\n      themeManager.switchTheme('default');\n      isInitializedRef.current = true;\n    }\n\n    // Throttled mouse move handler for better performance\n    const handleMouseMove = throttle((event: MouseEvent) => {\n      const rect = canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      themeManager.setMousePosition(x, y, canvas.width, canvas.height);\n    }, 16); // ~60fps for mouse movements\n\n    const handleMouseEnter = () => {\n      themeManager.setHovering(true);\n    };\n\n    const handleMouseLeave = () => {\n      themeManager.setHovering(false);\n    };\n\n    // Add mouse event listeners\n    canvas.addEventListener('mousemove', handleMouseMove);\n    canvas.addEventListener('mouseenter', handleMouseEnter);\n    canvas.addEventListener('mouseleave', handleMouseLeave);\n\n    let animationFrameId: number;\n    let lastTime = 0;\n    const targetFPS = 30; // Target 30 FPS for better performance\n    const frameInterval = 1000 / targetFPS;\n    \n    // Performance monitoring\n    let frameCount = 0;\n    let fpsTime = performance.now();\n    let currentFPS = targetFPS;\n\n    const render = (currentTime: number) => {\n      const deltaTime = currentTime - lastTime;\n      \n      // Only render if enough time has passed for target FPS\n      if (deltaTime >= frameInterval) {\n        // Update lastTime, adjusting for any time drift\n        lastTime = currentTime - (deltaTime % frameInterval);\n        \n        // Get current canvas dimensions\n        const currentWidth = canvas.width;\n        const currentHeight = canvas.height;\n        const currentProjCenterX = currentWidth / 2;\n        const currentProjCenterY = currentHeight / 2;\n        \n        // Delegate drawing to theme manager\n        themeManager.draw(context, currentWidth, currentHeight, currentProjCenterX, currentProjCenterY, deltaTime);\n        \n        // Performance monitoring\n        frameCount++;\n        const now = performance.now();\n        if (now - fpsTime >= 1000) {\n          currentFPS = frameCount;\n          frameCount = 0;\n          fpsTime = now;\n          \n          // Log performance warnings\n          if (currentFPS < targetFPS * 0.8) {\n            console.warn(`[VOICE-CANVAS] Low FPS detected: ${currentFPS}/${targetFPS}`);\n          }\n        }\n      }\n      \n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    \n    // Start the animation loop\n    animationFrameId = window.requestAnimationFrame(render);\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n      window.removeEventListener('resize', debouncedResize);\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('mouseenter', handleMouseEnter);\n      canvas.removeEventListener('mouseleave', handleMouseLeave);\n    };\n  }, []);\n\n  // Expose theme actions for parent component to call\n  (Canvas as any).getThemeManager = () => themeManagerRef.current;\n  (Canvas as any).onUserSpeaking = () => themeManagerRef.current.onUserSpeaking();\n  (Canvas as any).onProcessing = () => themeManagerRef.current.onProcessing();\n  (Canvas as any).onAiSpeaking = () => themeManagerRef.current.onAiSpeaking();\n  (Canvas as any).reset = () => themeManagerRef.current.reset();\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"absolute inset-0 w-full h-full\"\n      style={{ background: 'transparent' }}\n    />\n  );\n});\n\nCanvas.displayName = 'Canvas';\n\nexport default Canvas;","/**\n * Throttle function that limits how often a function can be called\n * @param func Function to throttle\n * @param delay Minimum time between calls in milliseconds\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let lastCall = 0;\n  let timeoutId: NodeJS.Timeout | null = null;\n\n  return (...args: Parameters<T>) => {\n    const now = Date.now();\n    const timeSinceLastCall = now - lastCall;\n\n    if (timeSinceLastCall >= delay) {\n      lastCall = now;\n      func(...args);\n    } else {\n      // Schedule a call for the remaining time\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      \n      const remainingTime = delay - timeSinceLastCall;\n      timeoutId = setTimeout(() => {\n        lastCall = Date.now();\n        func(...args);\n        timeoutId = null;\n      }, remainingTime);\n    }\n  };\n}\n\n/**\n * Debounce function that delays executing a function until after a specified time has elapsed\n * @param func Function to debounce\n * @param delay Time to wait in milliseconds\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let timeoutId: NodeJS.Timeout | null = null;\n\n  return (...args: Parameters<T>) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    \n    timeoutId = setTimeout(() => {\n      func(...args);\n      timeoutId = null;\n    }, delay);\n  };\n}","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nexport type VoiceOption = 'alloy' | 'echo' | 'fable' | 'onyx' | 'nova' | 'shimmer';\nexport type PersonaOption = 'assistant' | 'creative' | 'analytical' | 'casual' | 'professional';\n\ninterface VoiceSettings {\n  selectedVoice: VoiceOption;\n  selectedPersona: PersonaOption;\n  isVoiceModalOpen: boolean;\n}\n\ninterface VoiceSettingsActions {\n  setVoice: (voice: VoiceOption) => void;\n  setPersona: (persona: PersonaOption) => void;\n  setVoiceModalOpen: (isOpen: boolean) => void;\n  getSettings: () => Omit<VoiceSettings, 'isVoiceModalOpen'>;\n}\n\nexport type VoiceSettingsStore = VoiceSettings & VoiceSettingsActions;\n\n/**\n * Voice Settings Store\n * \n * Persists user's voice preferences including:\n * - Voice selection (OpenAI TTS voices)\n * - Persona selection (conversation style)\n */\nexport const useVoiceSettingsStore = create<VoiceSettingsStore>()(\n  persist(\n    (set, get) => ({\n      // Default settings\n      selectedVoice: 'alloy',\n      selectedPersona: 'assistant',\n      isVoiceModalOpen: false,\n\n      setVoice: (voice: VoiceOption) => {\n        set({ selectedVoice: voice });\n      },\n\n      setPersona: (persona: PersonaOption) => {\n        set({ selectedPersona: persona });\n      },\n\n      setVoiceModalOpen: (isOpen: boolean) => {\n        set({ isVoiceModalOpen: isOpen });\n      },\n\n      getSettings: () => {\n        const state = get();\n        return {\n          selectedVoice: state.selectedVoice,\n          selectedPersona: state.selectedPersona,\n        };\n      },\n    }),\n    {\n      name: 'customgpt-voice-settings',\n      // Persist all voice settings except modal state\n      partialize: (state) => ({\n        selectedVoice: state.selectedVoice,\n        selectedPersona: state.selectedPersona,\n        // Don't persist isVoiceModalOpen - always start as false\n      }),\n    }\n  )\n);\n\n// Export helper to get persona system prompts\nexport const getPersonaSystemPrompt = (persona: PersonaOption): string => {\n  const prompts: Record<PersonaOption, string> = {\n    assistant: 'You are a helpful assistant with a voice interface. Keep your responses concise and informative, limited to 1-2 sentences since the user is interacting through voice.',\n    creative: 'You are a creative and imaginative assistant with a voice interface. Be playful and artistic in your responses while keeping them brief (1-2 sentences) for voice interaction.',\n    analytical: 'You are a logical and precise assistant with a voice interface. Provide clear, data-driven responses in 1-2 concise sentences suitable for voice interaction.',\n    casual: 'You are a relaxed and conversational assistant with a voice interface. Keep responses friendly and informal, limited to 1-2 sentences for natural voice interaction.',\n    professional: 'You are a formal and business-focused assistant with a voice interface. Maintain a professional tone while keeping responses brief (1-2 sentences) for voice interaction.',\n  };\n  \n  return prompts[persona];\n};","'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Settings, Mic, User, X } from 'lucide-react';\nimport { useVoiceSettingsStore } from '@/store/voice-settings';\n\ninterface VoiceSettingsProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function VoiceSettings({ isOpen, onClose }: VoiceSettingsProps) {\n  console.log('🎛️ VoiceSettings render - isOpen:', isOpen);\n  \n  // Use persisted settings from store\n  const { selectedVoice, selectedPersona, setVoice, setPersona } = useVoiceSettingsStore();\n  \n  // Local state for preview before saving\n  const [previewVoice, setPreviewVoice] = useState(selectedVoice);\n  const [previewPersona, setPreviewPersona] = useState(selectedPersona);\n  \n  // Reset preview to saved values when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setPreviewVoice(selectedVoice);\n      setPreviewPersona(selectedPersona);\n    }\n  }, [isOpen, selectedVoice, selectedPersona]);\n\n  const voices = [\n    { id: 'alloy', name: 'Alloy', desc: 'Neutral' },\n    { id: 'echo', name: 'Echo', desc: 'Clear' },\n    { id: 'fable', name: 'Fable', desc: 'Warm' },\n    { id: 'onyx', name: 'Onyx', desc: 'Deep' },\n    { id: 'nova', name: 'Nova', desc: 'Bright' },\n    { id: 'shimmer', name: 'Shimmer', desc: 'Smooth' }\n  ];\n\n  const personas = [\n    { id: 'assistant', name: 'Assistant', desc: 'Helpful' },\n    { id: 'creative', name: 'Creative', desc: 'Artistic' },\n    { id: 'analytical', name: 'Analytical', desc: 'Logical' },\n    { id: 'casual', name: 'Casual', desc: 'Relaxed' },\n    { id: 'professional', name: 'Professional', desc: 'Formal' }\n  ];\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-[10001] bg-black/50 backdrop-blur-sm flex items-center justify-center p-4\">\n      <div className=\"bg-gray-900 rounded-2xl border border-gray-700 w-full max-w-2xl max-h-[70vh] flex flex-col\">\n        {/* Header */}\n        <div className=\"p-4 border-b border-gray-700 flex items-center justify-between flex-shrink-0\">\n          <div className=\"flex items-center gap-3\">\n            <Settings className=\"w-5 h-5 text-white\" />\n            <h2 className=\"text-lg font-semibold text-white\">Voice Settings</h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"w-8 h-8 rounded-full bg-gray-700 hover:bg-gray-600 flex items-center justify-center transition-colors\"\n          >\n            <X className=\"w-4 h-4 text-white\" />\n          </button>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 overflow-y-auto p-6 space-y-6\">\n          {/* Voice and Persona in a row */}\n          <div className=\"grid grid-cols-1 gap-6\">\n            {/* Voice Selection */}\n            <div>\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Mic className=\"w-4 h-4 text-white\" />\n                <h3 className=\"text-sm font-semibold text-white uppercase tracking-wider\">Voice</h3>\n              </div>\n              <div className=\"grid grid-cols-3 gap-2\">\n                {voices.map((voice) => (\n                  <button\n                    key={voice.id}\n                    onClick={() => setPreviewVoice(voice.id as any)}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewVoice === voice.id\n                        ? 'border-blue-500 bg-blue-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">{voice.name}</div>\n                    <div className=\"text-xs text-gray-400\">{voice.desc}</div>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Persona Selection */}\n            <div>\n              <div className=\"flex items-center gap-2 mb-3\">\n                <User className=\"w-4 h-4 text-white\" />\n                <h3 className=\"text-sm font-semibold text-white uppercase tracking-wider\">Persona</h3>\n              </div>\n              <div className=\"grid grid-cols-3 gap-2\">\n                {personas.map((persona) => (\n                  <button\n                    key={persona.id}\n                    onClick={() => setPreviewPersona(persona.id as any)}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewPersona === persona.id\n                        ? 'border-purple-500 bg-purple-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">{persona.name}</div>\n                    <div className=\"text-xs text-gray-400\">{persona.desc}</div>\n                  </button>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"p-4 border-t border-gray-700 flex justify-end gap-3 flex-shrink-0\">\n          <button\n            onClick={() => {\n              setPreviewVoice(selectedVoice);\n              setPreviewPersona(selectedPersona);\n              onClose();\n            }}\n            className=\"px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg text-white text-sm transition-colors\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={() => {\n              setVoice(previewVoice as any);\n              setPersona(previewPersona as any);\n              onClose();\n            }}\n            className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-white text-sm transition-colors\"\n          >\n            Save Settings\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","/**\n * Streaming TTS Manager\n * \n * Handles chunked text-to-speech for faster voice responses\n */\n\nexport class StreamingTTSManager {\n  private audioQueue: AudioBuffer[] = [];\n  private pendingChunks: Map<number, AudioBuffer> = new Map(); // Store chunks by ID\n  private nextExpectedChunkId = 0; // Track which chunk should play next\n  private isPlaying = false;\n  private audioContext: AudioContext | null = null;\n  private currentSource: AudioBufferSourceNode | null = null;\n  private onPlaybackComplete?: () => void;\n  private onError?: (error: string) => void;\n\n  constructor() {\n    this.initAudioContext();\n  }\n\n  private async initAudioContext() {\n    try {\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      \n      // Resume context if suspended (required for mobile)\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume();\n      }\n    } catch (error) {\n      console.error('Failed to initialize AudioContext:', error);\n    }\n  }\n\n  /**\n   * Add a text chunk to be converted to speech and queued\n   */\n  async addTextChunk(text: string, voice: string = 'alloy') {\n    try {\n      // Convert text to speech\n      const audioBuffer = await this.textToSpeech(text, voice);\n      \n      // Add to queue\n      this.audioQueue.push(audioBuffer);\n      \n      // Start playing if not already playing\n      if (!this.isPlaying) {\n        this.playNextChunk();\n      }\n    } catch (error) {\n      console.error('Failed to add text chunk:', error);\n      this.onError?.('Failed to generate speech for chunk');\n    }\n  }\n\n  /**\n   * Add a pre-generated audio buffer directly to the queue\n   * Used for streaming responses that provide ready audio chunks\n   */\n  async addAudioBuffer(audioBuffer: AudioBuffer) {\n    try {\n      // Add to queue - for backward compatibility without chunk ID\n      this.audioQueue.push(audioBuffer);\n      \n      // Start playing if not already playing\n      if (!this.isPlaying) {\n        this.playNextChunk();\n      }\n    } catch (error) {\n      console.error('Failed to add audio buffer:', error);\n      this.onError?.('Failed to queue audio buffer');\n    }\n  }\n\n  /**\n   * Add an audio buffer with a specific chunk ID to ensure ordered playback\n   */\n  async addAudioBufferWithId(audioBuffer: AudioBuffer, chunkId: number) {\n    try {\n      console.log(`[StreamingTTS] Adding chunk ${chunkId}, expecting ${this.nextExpectedChunkId}`);\n      \n      // Store the chunk\n      this.pendingChunks.set(chunkId, audioBuffer);\n      \n      // Check if we can queue any pending chunks in order\n      while (this.pendingChunks.has(this.nextExpectedChunkId)) {\n        const chunk = this.pendingChunks.get(this.nextExpectedChunkId)!;\n        this.pendingChunks.delete(this.nextExpectedChunkId);\n        \n        console.log(`[StreamingTTS] Queuing chunk ${this.nextExpectedChunkId} in order`);\n        this.audioQueue.push(chunk);\n        this.nextExpectedChunkId++;\n        \n        // Start playing if not already playing\n        if (!this.isPlaying) {\n          this.playNextChunk();\n        }\n      }\n      \n      console.log(`[StreamingTTS] Pending chunks: ${Array.from(this.pendingChunks.keys()).sort().join(', ')}`);\n    } catch (error) {\n      console.error('Failed to add audio buffer with ID:', error);\n      this.onError?.('Failed to queue audio buffer');\n    }\n  }\n\n  /**\n   * Convert text to speech using OpenAI TTS API\n   */\n  private async textToSpeech(text: string, voice: string): Promise<AudioBuffer> {\n    if (!text.trim()) {\n      throw new Error('Empty text provided');\n    }\n\n    // Call TTS API\n    const response = await fetch('/api/proxy/tts/stream', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'tts-1', // Use faster model for streaming\n        input: text,\n        voice: voice,\n        response_format: 'mp3'\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`TTS API error: ${response.status}`);\n    }\n\n    const audioBlob = await response.blob();\n    const arrayBuffer = await audioBlob.arrayBuffer();\n\n    if (!this.audioContext) {\n      throw new Error('AudioContext not initialized');\n    }\n\n    return await this.audioContext.decodeAudioData(arrayBuffer);\n  }\n\n  /**\n   * Play the next audio chunk in the queue\n   */\n  private async playNextChunk() {\n    if (this.audioQueue.length === 0) {\n      this.isPlaying = false;\n      this.onPlaybackComplete?.();\n      return;\n    }\n\n    if (!this.audioContext) {\n      console.error('AudioContext not available');\n      return;\n    }\n\n    this.isPlaying = true;\n    const audioBuffer = this.audioQueue.shift();\n\n    if (!audioBuffer) return;\n\n    try {\n      // Create and configure audio source\n      this.currentSource = this.audioContext.createBufferSource();\n      this.currentSource.buffer = audioBuffer;\n      this.currentSource.connect(this.audioContext.destination);\n\n      // Set up completion handler\n      this.currentSource.onended = () => {\n        this.currentSource = null;\n        // Add a small delay between chunks for smoother playback\n        setTimeout(() => {\n          this.playNextChunk(); // Play next chunk\n        }, 50);\n      };\n\n      // Start playback\n      this.currentSource.start(0);\n      \n    } catch (error) {\n      console.error('Failed to play audio chunk:', error);\n      // Try to continue with the next chunk\n      setTimeout(() => {\n        this.playNextChunk();\n      }, 100);\n    }\n  }\n\n  /**\n   * Stop all playback and clear queue\n   */\n  stopPlayback() {\n    // Stop current audio\n    if (this.currentSource) {\n      try {\n        this.currentSource.stop();\n      } catch (error) {\n        // Ignore errors from stopping already stopped sources\n      }\n      this.currentSource = null;\n    }\n\n    // Clear queue and pending chunks\n    this.audioQueue = [];\n    this.pendingChunks.clear();\n    this.nextExpectedChunkId = 0;\n    this.isPlaying = false;\n  }\n\n  /**\n   * Reset the chunk ID counter for a new streaming session\n   */\n  resetChunkCounter() {\n    this.nextExpectedChunkId = 0;\n    this.pendingChunks.clear();\n    console.log('[StreamingTTS] Chunk counter reset for new session');\n  }\n\n  /**\n   * Check if audio is currently playing\n   */\n  isCurrentlyPlaying(): boolean {\n    return this.isPlaying;\n  }\n\n  /**\n   * Get number of chunks in queue\n   */\n  getQueueLength(): number {\n    return this.audioQueue.length;\n  }\n\n  /**\n   * Set callback for when all queued audio finishes playing\n   */\n  onPlaybackCompleted(callback: () => void) {\n    this.onPlaybackComplete = callback;\n  }\n\n  /**\n   * Set callback for errors\n   */\n  onStreamingError(callback: (error: string) => void) {\n    this.onError = callback;\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy() {\n    this.stopPlayback();\n    this.pendingChunks.clear();\n    this.nextExpectedChunkId = 0;\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n  }\n}\n\n/**\n * Text chunking utilities for optimal TTS streaming\n */\nexport class TextChunker {\n  /**\n   * Split text into optimal chunks for TTS\n   * Aims for natural speech breaks while keeping chunks reasonably sized\n   */\n  static chunkText(text: string, maxChunkSize: number = 200): string[] {\n    const chunks: string[] = [];\n    \n    // Split by sentences first\n    const sentences = text.split(/[.!?]+/).filter(s => s.trim());\n    \n    let currentChunk = '';\n    \n    for (const sentence of sentences) {\n      const trimmedSentence = sentence.trim();\n      if (!trimmedSentence) continue;\n      \n      // If adding this sentence would exceed max size and we have content, finalize chunk\n      if (currentChunk && (currentChunk.length + trimmedSentence.length + 2) > maxChunkSize) {\n        chunks.push(currentChunk.trim() + '.');\n        currentChunk = trimmedSentence;\n      } else {\n        currentChunk += (currentChunk ? '. ' : '') + trimmedSentence;\n      }\n    }\n    \n    // Add final chunk\n    if (currentChunk.trim()) {\n      chunks.push(currentChunk.trim() + (currentChunk.endsWith('.') ? '' : '.'));\n    }\n    \n    return chunks;\n  }\n\n  /**\n   * Smart chunking that considers punctuation and natural breaks\n   */\n  static smartChunk(text: string, targetChunkSize: number = 150): string[] {\n    const chunks: string[] = [];\n    \n    // Priority order for splitting: sentences, clauses, phrases, words\n    const breakPoints = [\n      /[.!?]+\\s+/g,  // Sentence endings\n      /[,;:]\\s+/g,   // Clause breaks\n      /\\s+(?=and|but|or|so|yet|for|nor)\\s+/g, // Conjunctions\n      /\\s+/g         // Word breaks (fallback)\n    ];\n    \n    let remainingText = text;\n    \n    while (remainingText.length > targetChunkSize) {\n      let bestSplit = -1;\n      \n      // Try each break point type in order of preference\n      for (const breakRegex of breakPoints) {\n        const matches = Array.from(remainingText.matchAll(breakRegex));\n        \n        // Find the best split point (closest to target size without going over)\n        for (const match of matches) {\n          const splitIndex = match.index! + match[0].length;\n          if (splitIndex <= targetChunkSize && splitIndex > bestSplit) {\n            bestSplit = splitIndex;\n          }\n        }\n        \n        if (bestSplit > 0) break; // Found a good split\n      }\n      \n      // If no good split found, split at target size\n      if (bestSplit <= 0) {\n        bestSplit = targetChunkSize;\n      }\n      \n      chunks.push(remainingText.slice(0, bestSplit).trim());\n      remainingText = remainingText.slice(bestSplit).trim();\n    }\n    \n    // Add final chunk\n    if (remainingText) {\n      chunks.push(remainingText);\n    }\n    \n    return chunks.filter(chunk => chunk.length > 0);\n  }\n}","import { utils } from \"@ricky0123/vad-react\";\nimport type { VoiceOption, PersonaOption } from '@/store/voice-settings';\nimport { StreamingTTSManager } from './streaming-tts';\n\nexport interface VoiceCallbacks {\n  onUserSpeaking?: () => void;\n  onProcessing?: () => void;\n  onAiSpeaking?: () => void;\n  onReset?: () => void;\n  onError?: (error: string) => void;\n  onDebug?: (message: string, data?: any) => void;\n  // New callbacks for message store integration\n  onTranscriptReceived?: (transcript: string) => void;\n  onResponseReceived?: (response: string) => void;\n  // Streaming callbacks\n  onStreamingTextChunk?: (textChunk: string) => void;\n  onStreamingAudioReady?: (audioUrl: string, chunkId: string) => void;\n  onStreamingComplete?: (fullResponse: string, transcript: string) => void;\n}\n\nclass SpeechManager {\n  private source: AudioBufferSourceNode | null = null;\n  private sourceIsStarted = false;\n  private conversationThusFar: any[] = [];\n  private callbacks: VoiceCallbacks = {};\n  private projectId: string | null = null;\n  private sessionId: string | null = null;\n  private voiceSettings: { voice: VoiceOption; persona: PersonaOption } | null = null;\n  private streamingTTS: StreamingTTSManager | null = null;\n  // Streaming is always enabled for optimal performance\n\n  setCallbacks(callbacks: VoiceCallbacks) {\n    this.callbacks = callbacks;\n    this.debug(\"Callbacks set\", { hasCallbacks: Object.keys(callbacks) });\n  }\n\n  setProjectId(projectId: string) {\n    this.projectId = projectId;\n    this.debug(\"Project ID set\", { projectId });\n  }\n\n  setSessionId(sessionId: string | null) {\n    this.sessionId = sessionId;\n    this.debug(\"Session ID set\", { sessionId });\n  }\n\n  setVoiceSettings(voice: VoiceOption, persona: PersonaOption) {\n    this.voiceSettings = { voice, persona };\n    this.debug(\"Voice settings set\", { voice, persona });\n  }\n\n  private debug(message: string, data?: any) {\n    // Production: Debug logging disabled\n    // Uncomment for development debugging:\n    // const timestamp = new Date().toISOString();\n    // console.log(`🎯 [SPEECH-MANAGER ${timestamp}] ${message}`, data || '');\n    this.callbacks.onDebug?.(message, data);\n  }\n\n  private error(message: string, error?: any) {\n    const timestamp = new Date().toISOString();\n    console.error(`❌ [SPEECH-MANAGER ${timestamp}] ${message}`, error || '');\n    this.callbacks.onError?.(message);\n  }\n\n  onSpeechStart = () => {\n    this.debug(\"Speech started - user is speaking\");\n    this.callbacks.onUserSpeaking?.();\n    this.stopSourceIfNeeded();\n  };\n\n  onSpeechEnd = async (audio: Float32Array) => {\n    this.debug(\"Speech ended\", { \n      audioLength: audio.length,\n      audioDuration: `${audio.length / 16000}s` // Assuming 16kHz sample rate\n    });\n    await this.processAudio(audio);\n  };\n\n  onMisfire = () => {\n    this.debug(\"VAD misfire - noise detected but not speech\");\n    this.callbacks.onReset?.();\n  };\n\n  private stopSourceIfNeeded = () => {\n    if (this.source && this.sourceIsStarted) {\n      this.debug(\"Stopping current audio playback\");\n      this.source.stop(0);\n      this.sourceIsStarted = false;\n    }\n  };\n\n  // Public method to stop audio playback\n  public stopAudio = () => {\n    this.stopSourceIfNeeded();\n    \n    // Also stop streaming TTS if active\n    if (this.streamingTTS) {\n      this.streamingTTS.stopPlayback();\n      this.debug(\"🛑 Streaming TTS stopped\");\n    }\n    \n    this.callbacks.onReset?.();\n    this.debug(\"Audio stopped by user\");\n  };\n\n  // Public method to process manually recorded audio\n  public processManualAudio = async (audioBlob: Blob) => {\n    this.debug(\"Processing manual audio\", { \n      size: `${(audioBlob.size / 1024).toFixed(2)}KB`,\n      type: audioBlob.type\n    });\n    this.callbacks.onProcessing?.();\n    \n    try {\n      await this.validate(audioBlob);\n      await this.sendData(audioBlob);\n    } catch (error) {\n      this.error('Error processing manual audio', error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private processAudio = async (audio: Float32Array) => {\n    this.debug(\"Processing audio started\");\n    this.callbacks.onProcessing?.();\n    \n    try {\n      const blob = this.createAudioBlob(audio);\n      await this.validate(blob);\n      await this.sendData(blob);\n    } catch (error) {\n      this.error('Error processing audio', error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private createAudioBlob = (audio: Float32Array): Blob => {\n    const wavBuffer = utils.encodeWAV(audio);\n    const blob = new Blob([wavBuffer], { type: 'audio/wav' });\n    this.debug(\"Created audio blob\", { \n      size: `${(blob.size / 1024).toFixed(2)}KB`,\n      type: blob.type,\n      samples: audio.length,\n      duration: `${audio.length / 16000}s` // Assuming 16kHz from VAD\n    });\n    return blob;\n  };\n\n  private sendData = async (blob: Blob) => {\n    // Always use streaming mode\n    await this.sendStreamingData(blob);\n  };\n\n  private sendStreamingData = async (blob: Blob) => {\n    this.debug(\"🚀 Sending audio data to streaming API\");\n    \n    if (!this.projectId) {\n      this.error('No project ID set - cannot send audio');\n      this.callbacks.onReset?.();\n      return;\n    }\n\n    // Initialize streaming TTS manager\n    if (!this.streamingTTS) {\n      this.streamingTTS = new StreamingTTSManager();\n      this.streamingTTS.onPlaybackCompleted(() => {\n        this.debug(\"🔄 Streaming playback completed\");\n        this.callbacks.onReset?.();\n      });\n      this.streamingTTS.onStreamingError((error) => {\n        this.error('🎵 Streaming TTS error', error);\n      });\n    } else {\n      // Reset chunk counter for new streaming session\n      this.streamingTTS.resetChunkCounter();\n    }\n\n    const formData = new FormData();\n    formData.append(\"audio\", blob, \"audio.wav\");\n    formData.append(\"project_id\", this.projectId);\n    if (this.sessionId) {\n      formData.append(\"session_id\", this.sessionId);\n    }\n    \n    // Add voice settings to the request\n    if (this.voiceSettings) {\n      formData.append(\"voice\", this.voiceSettings.voice);\n      formData.append(\"persona\", this.voiceSettings.persona);\n    }\n\n    this.debug(\"🔄 Starting streaming voice request\", {\n      projectId: this.projectId,\n      sessionId: this.sessionId,\n      conversationLength: this.conversationThusFar.length,\n      audioSize: `${(blob.size / 1024).toFixed(2)}KB`,\n      voice: this.voiceSettings?.voice,\n      persona: this.voiceSettings?.persona,\n      lastMessages: this.conversationThusFar.slice(-2).map(m => ({ role: m.role, preview: m.content.slice(0, 50) }))\n    });\n\n    try {\n      // Check for demo mode OpenAI key\n      const headers: Record<string, string> = {\n        'conversation': this.base64Encode(JSON.stringify(this.conversationThusFar))\n      };\n      \n      // Add deployment mode header\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n      headers['X-Deployment-Mode'] = deploymentMode;\n      \n      console.log('🔍 [SPEECH-MANAGER] Deployment mode from localStorage:', deploymentMode);\n      console.log('🔍 [SPEECH-MANAGER] localStorage value:', localStorage.getItem('customgpt.deploymentMode'));\n      console.log('🔍 [SPEECH-MANAGER] Sending headers:', headers);\n      \n      // In demo mode, add keys from window object if available\n      if (deploymentMode === 'demo') {\n        // Add OpenAI key for TTS/STT\n        if ((window as any).__demoOpenAIKey) {\n          headers['X-OpenAI-API-Key'] = (window as any).__demoOpenAIKey;\n        }\n        // Add CustomGPT API key for chat completions\n        if ((window as any).__demoCustomGPTKey) {\n          headers['X-CustomGPT-API-Key'] = (window as any).__demoCustomGPTKey;\n        }\n      }\n      \n      const response = await fetch(\"/api/proxy/voice/streaming\", {\n        method: \"POST\",\n        body: formData,\n        headers\n      });\n\n      this.debug(\"🎯 Streaming response received\", {\n        status: response.status,\n        ok: response.ok,\n        contentType: response.headers.get('content-type')\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch {\n          errorData = { error: errorText };\n        }\n        \n        // Check if it's specifically an OpenAI API key error\n        if (response.status === 503 && errorData.userMessage) {\n          throw new Error(errorData.userMessage);\n        }\n        \n        throw new Error(`Streaming API Error (${response.status}): ${errorData.error || errorText}`);\n      }\n\n      // Process streaming response\n      await this.processStreamingResponse(response);\n    } catch (error) {\n      this.error(\"❌ Failed to process streaming voice\", error);\n      this.handleError(error);\n    }\n  };\n\n  private processStreamingResponse = async (response: Response) => {\n    if (!response.body) {\n      throw new Error(\"No response body for streaming\");\n    }\n\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    \n    let fullResponse = '';\n    let transcript = '';\n    let currentStreamingActive = false;\n\n    this.debug(\"🔄 Processing streaming response chunks\");\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          this.debug(\"✅ Streaming response complete\");\n          break;\n        }\n\n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data.trim() === '') continue;\n\n            try {\n              const parsed = JSON.parse(data);\n              \n              if (parsed.type === 'text') {\n                // Stream text chunk\n                fullResponse += parsed.text;\n                \n                // Trigger UI update for text streaming\n                this.callbacks.onStreamingTextChunk?.(parsed.text);\n                \n                this.debug(`📝 Text chunk received: \"${parsed.text}\"`);\n                \n              } else if (parsed.type === 'audio' || parsed.type === 'audio_ref') {\n                // Audio chunk ready - queue it for playback\n                if (parsed.audioUrl || parsed.audioId) {\n                  if (!currentStreamingActive) {\n                    this.callbacks.onAiSpeaking?.();\n                    currentStreamingActive = true;\n                  }\n                  \n                  // Handle both legacy data URL and new audio reference\n                  if (parsed.audioUrl) {\n                    // Legacy: Convert data URL to audio and queue it\n                    await this.queueAudioChunk(parsed.audioUrl, parsed.chunkId);\n                  } else if (parsed.audioId) {\n                    // New: Fetch audio chunk by ID\n                    await this.queueAudioChunkById(parsed.audioId, parsed.chunkId);\n                  }\n                  \n                  this.debug(`🎵 Audio chunk queued: ${parsed.chunkId} (${parsed.text?.slice(0, 50)}...)`);\n                }\n                \n              } else if (parsed.type === 'complete') {\n                // Stream complete\n                fullResponse = parsed.fullResponse || fullResponse;\n                transcript = parsed.transcript || transcript;\n                \n                this.debug(\"✅ Stream complete\", { \n                  responseLength: fullResponse.length,\n                  transcript \n                });\n                \n                console.log(`📝 [SPEECH-MANAGER] Complete fullResponse (${fullResponse.length} chars):`, fullResponse);\n                console.log(`📝 [SPEECH-MANAGER] Includes \"individuals\":`, fullResponse.includes('individuals'));\n                console.log(`📝 [SPEECH-MANAGER] Includes \"like\":`, fullResponse.includes('like'));\n                console.log(`📝 [SPEECH-MANAGER] Includes \"CustomGPT\":`, fullResponse.includes('CustomGPT'));\n                \n                // Trigger callbacks for UI updates\n                // Don't update conversationThusFar here - let the message store be the single source of truth\n                if (transcript) {\n                  this.callbacks.onTranscriptReceived?.(transcript);\n                }\n                \n                if (fullResponse) {\n                  this.callbacks.onResponseReceived?.(fullResponse);\n                }\n                \n                this.callbacks.onStreamingComplete?.(fullResponse, transcript);\n                \n              } else if (parsed.type === 'error') {\n                // Stream error\n                this.error(`🚨 Stream error: ${parsed.error}`);\n                this.callbacks.onReset?.();\n              }\n            } catch (parseError) {\n              this.debug(`⚠️ Failed to parse chunk: ${data}`, parseError);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      this.error(\"❌ Error processing streaming response\", error);\n      this.callbacks.onReset?.();\n    } finally {\n      reader.releaseLock();\n    }\n  };\n\n  private queueAudioChunk = async (audioDataUrl: string, chunkId: string) => {\n    if (!this.streamingTTS) {\n      this.error(\"❌ StreamingTTS not initialized\");\n      return;\n    }\n\n    try {\n      // Extract numeric chunk ID from the string (e.g., \"chunk_0\" -> 0)\n      const numericChunkId = parseInt(chunkId.replace('chunk_', ''));\n      \n      // Convert data URL to blob\n      const response = await fetch(audioDataUrl);\n      const audioBlob = await response.blob();\n      \n      // Convert blob to ArrayBuffer for Web Audio API\n      const arrayBuffer = await audioBlob.arrayBuffer();\n      \n      // Create audio context and decode\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      // Queue the decoded audio buffer with ID for ordered playback\n      await this.streamingTTS.addAudioBufferWithId(audioBuffer, numericChunkId);\n      \n      this.debug(`🎵 Audio chunk queued with ID ${numericChunkId}: ${chunkId}`);\n    } catch (error) {\n      this.error(`❌ Failed to queue audio chunk ${chunkId}`, error);\n    }\n  };\n\n  // Legacy sendLegacyData method removed - streaming is always used\n  \n  private queueAudioChunkById = async (audioId: string, chunkId: string) => {\n    if (!this.streamingTTS) {\n      this.error(\"❌ StreamingTTS not initialized\");\n      return;\n    }\n\n    try {\n      // Extract numeric chunk ID from the string (e.g., \"chunk_0\" -> 0)\n      const numericChunkId = parseInt(chunkId.replace('chunk_', ''));\n      \n      // Fetch audio chunk by ID from the streaming endpoint\n      const response = await fetch(`/api/proxy/voice/streaming?id=${audioId}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          // Audio chunk not found - this can happen after server restart\n          this.debug(`⚠️ Audio chunk not found (server may have restarted): ${chunkId}`);\n          return; // Skip this chunk gracefully\n        }\n        throw new Error(`Failed to fetch audio chunk: ${response.status}`);\n      }\n      \n      const audioBlob = await response.blob();\n      \n      // Convert blob to ArrayBuffer for Web Audio API\n      const arrayBuffer = await audioBlob.arrayBuffer();\n      \n      // Create audio context and decode\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      // Queue the decoded audio buffer with ID for ordered playback\n      await this.streamingTTS.addAudioBufferWithId(audioBuffer, numericChunkId);\n      \n      this.debug(`🎵 Audio chunk fetched and queued with ID ${numericChunkId}: ${chunkId}`);\n    } catch (error) {\n      this.error(`❌ Failed to fetch/queue audio chunk ${chunkId}`, error);\n    }\n  };\n\n  // Legacy sendLegacyData method removed - streaming is always used\n\n  private base64Encode(str: string): string {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(str);\n    return window.btoa(String.fromCharCode(...new Uint8Array(data)));\n  }\n\n  private base64Decode(base64: string): string {\n    const binaryStr = window.atob(base64);\n    const bytes = new Uint8Array([...binaryStr].map((char) => char.charCodeAt(0)));\n    return new TextDecoder().decode(bytes);\n  }\n\n  private handleSuccess = async (blob: Blob) => {\n    this.debug(\"Playing AI response audio\");\n    \n    try {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      this.stopSourceIfNeeded();\n\n      const arrayBuffer = await blob.arrayBuffer();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      this.debug(\"Audio decoded\", {\n        duration: `${audioBuffer.duration.toFixed(2)}s`,\n        sampleRate: audioBuffer.sampleRate,\n        numberOfChannels: audioBuffer.numberOfChannels\n      });\n\n      this.source = audioContext.createBufferSource();\n      this.source.buffer = audioBuffer;\n      this.source.connect(audioContext.destination);\n      this.source.start(0);\n      this.sourceIsStarted = true;\n      \n      this.source.onended = () => {\n        this.debug(\"Audio playback ended\");\n        this.callbacks.onReset?.();\n      };\n\n      this.callbacks.onAiSpeaking?.();\n    } catch (error) {\n      this.error(\"Failed to play audio\", error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private handleError = (error: any) => {\n    this.error(`Error encountered: ${error.message}`, error);\n    this.callbacks.onReset?.();\n  };\n\n  private validate = async (data: Blob) => {\n    this.debug(\"Validating audio duration\");\n    \n    try {\n      // Clone the blob to avoid consuming the arrayBuffer\n      const clonedBlob = new Blob([data], { type: data.type });\n      const arrayBuffer = await clonedBlob.arrayBuffer();\n      const audioContext = new AudioContext();\n      const decodedData = await audioContext.decodeAudioData(arrayBuffer);\n      const duration = decodedData.duration;\n      const minDuration = 0.4;\n\n      this.debug(\"Audio validation\", {\n        duration: `${duration.toFixed(2)}s`,\n        minDuration: `${minDuration}s`,\n        valid: duration >= minDuration\n      });\n\n      if (duration < minDuration) {\n        throw new Error(`Duration is ${duration}s, which is less than minimum of ${minDuration}s`);\n      }\n    } catch (error) {\n      this.error(\"Audio validation failed\", error);\n      throw error;\n    }\n  };\n\n  clearConversation() {\n    this.conversationThusFar = [];\n  }\n\n  getConversationThusFar() {\n    return this.conversationThusFar;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  // Set the conversation history from existing messages\n  setConversationHistory(messages: any[]) {\n    // Clean and deduplicate messages before setting\n    const cleanedMessages = messages\n      .filter((msg, index, self) => \n        // Remove duplicates based on content and role\n        index === self.findIndex(m => m.content === msg.content && m.role === msg.role)\n      )\n      .map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n    \n    this.conversationThusFar = cleanedMessages;\n    this.debug(\"Conversation history loaded\", {\n      messageCount: this.conversationThusFar.length,\n      originalCount: messages.length\n    });\n  }\n\n\n  // Public method to clean up streaming resources\n  public destroy() {\n    this.stopAudio();\n    if (this.streamingTTS) {\n      this.streamingTTS.destroy();\n      this.streamingTTS = null;\n    }\n    this.debug(\"🧹 SpeechManager destroyed\");\n  }\n}\n\nexport const speechManager = new SpeechManager();","/**\n * Utility functions for voice mode\n */\n\n/**\n * Simple markdown parser for voice responses\n * Removes markdown formatting for cleaner display in voice UI\n */\nexport function parseMarkdownForVoice(text: string): string {\n  return text\n    // Remove bold markers\n    .replace(/\\*\\*(.*?)\\*\\*/g, '$1')\n    // Remove italic markers\n    .replace(/\\*(.*?)\\*/g, '$1')\n    // Remove code blocks\n    .replace(/```[\\s\\S]*?```/g, '')\n    // Remove inline code\n    .replace(/`([^`]+)`/g, '$1')\n    // Remove headers\n    .replace(/#{1,6}\\s+/g, '')\n    // Remove links but keep text\n    .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1')\n    // Remove images\n    .replace(/!\\[([^\\]]*)\\]\\([^)]+\\)/g, '')\n    // Remove horizontal rules\n    .replace(/^-{3,}$/gm, '')\n    // Remove bullet points\n    .replace(/^\\s*[-*+]\\s+/gm, '')\n    // Remove numbered lists\n    .replace(/^\\s*\\d+\\.\\s+/gm, '')\n    // Clean up extra whitespace\n    .replace(/\\n{3,}/g, '\\n\\n')\n    .trim();\n}\n\n/**\n * Split response into chunks for streaming display\n */\nexport function* streamTextChunks(text: string, chunkSize: number = 50): Generator<string> {\n  const words = text.split(' ');\n  let currentChunk = '';\n  \n  for (const word of words) {\n    if (currentChunk.length + word.length + 1 > chunkSize && currentChunk.length > 0) {\n      yield currentChunk.trim();\n      currentChunk = word;\n    } else {\n      currentChunk += (currentChunk ? ' ' : '') + word;\n    }\n  }\n  \n  if (currentChunk) {\n    yield currentChunk.trim();\n  }\n}","/**\n * Simple encryption utilities for demo mode API key storage\n * \n * This provides basic obfuscation to prevent casual observation\n * of API keys in browser storage. This is NOT cryptographically\n * secure and should only be used for demo/playground purposes.\n */\n\n/**\n * Generate a random key for encryption\n */\nexport function generateKey(): string {\n  const array = new Uint8Array(32);\n  crypto.getRandomValues(array);\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\n/**\n * Simple XOR encryption (obfuscation)\n * This is NOT secure encryption - it's just to prevent\n * API keys from being stored in plain text\n */\nexport function encrypt(text: string, key: string): string {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    result += String.fromCharCode(\n      text.charCodeAt(i) ^ key.charCodeAt(i % key.length)\n    );\n  }\n  return btoa(result); // Base64 encode\n}\n\n/**\n * Decrypt XOR encrypted text\n */\nexport function decrypt(encrypted: string, key: string): string {\n  try {\n    const text = atob(encrypted); // Base64 decode\n    let result = '';\n    for (let i = 0; i < text.length; i++) {\n      result += String.fromCharCode(\n        text.charCodeAt(i) ^ key.charCodeAt(i % key.length)\n      );\n    }\n    return result;\n  } catch {\n    return '';\n  }\n}\n\n/**\n * Validate API key format\n */\nexport function isValidApiKey(key: string): boolean {\n  // CustomGPT.ai API key format: projectId|apiKey\n  // Example: 7840|8TPfOoyBywFfUfvwuY7ZZ2s1WAFtxU7WCxunMbej\n  const trimmedKey = key.trim();\n  \n  // Check if it contains a pipe character\n  if (!trimmedKey.includes('|')) {\n    return false;\n  }\n  \n  // Split and validate both parts\n  const [projectId, apiKey] = trimmedKey.split('|');\n  \n  // Project ID should be numeric\n  if (!projectId || !/^\\d+$/.test(projectId)) {\n    return false;\n  }\n  \n  // API key should be alphanumeric (with possible special chars)\n  if (!apiKey || apiKey.length < 20) {\n    return false;\n  }\n  \n  return true;\n}","/**\n * Demo Mode Store\n * \n * Manages API key storage and authentication for demo/playground mode.\n * Uses encrypted sessionStorage for temporary key storage that survives\n * page refreshes but is cleared when the browser tab is closed.\n */\n\nimport { create } from 'zustand';\nimport { encrypt, decrypt, generateKey, isValidApiKey } from '@/lib/crypto';\n\ninterface DemoStore {\n  // Demo mode configuration\n  isDemoMode: boolean;\n  \n  // API key management\n  apiKey: string | null;\n  openAIApiKey: string | null;\n  encryptionKey: string | null;\n  \n  // UI state\n  isAuthenticated: boolean;\n  error: string | null;\n  \n  // Session management\n  sessionStartTime: number | null;\n  sessionTimeout: number; // 2 hours in milliseconds\n  \n  // Actions\n  setApiKey: (key: string) => void;\n  setOpenAIApiKey: (key: string) => void;\n  clearApiKey: () => void;\n  validateSession: () => boolean;\n  setError: (error: string | null) => void;\n  initializeFromStorage: () => void;\n  restoreSession: () => boolean;\n}\n\nconst STORAGE_KEY = 'customgpt-demo-key';\nconst OPENAI_STORAGE_KEY = 'customgpt-demo-openai-key';\nconst ENCRYPTION_KEY = 'customgpt-demo-enc';\nconst SESSION_KEY = 'customgpt-demo-session';\nconst SESSION_TIMEOUT = 2 * 60 * 60 * 1000; // 2 hours\n\nexport const useDemoStore = create<DemoStore>((set, get) => ({\n  // Check if demo mode is enabled from localStorage deployment mode\n  isDemoMode: typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') === 'demo' : false,\n  \n  apiKey: null,\n  openAIApiKey: null,\n  encryptionKey: null,\n  isAuthenticated: false,\n  error: null,\n  sessionStartTime: null,\n  sessionTimeout: SESSION_TIMEOUT,\n  \n  setApiKey: (key: string) => {\n    const trimmedKey = key.trim();\n    \n    // Validate API key format\n    if (!isValidApiKey(trimmedKey)) {\n      set({ error: 'Invalid API key format' });\n      return;\n    }\n    \n    try {\n      // Generate encryption key\n      const encKey = generateKey();\n      \n      // Encrypt and store in sessionStorage\n      const encrypted = encrypt(trimmedKey, encKey);\n      sessionStorage.setItem(STORAGE_KEY, encrypted);\n      sessionStorage.setItem(ENCRYPTION_KEY, encKey);\n      \n      // Store session info\n      const sessionInfo = {\n        startTime: Date.now(),\n        encKey: encKey\n      };\n      sessionStorage.setItem(SESSION_KEY, JSON.stringify(sessionInfo));\n      \n      // Update store state\n      set({\n        apiKey: trimmedKey,\n        encryptionKey: encKey,\n        isAuthenticated: true,\n        error: null,\n        sessionStartTime: Date.now()\n      });\n    } catch (error) {\n      set({ error: 'Failed to store API key' });\n    }\n  },\n  \n  setOpenAIApiKey: (key: string) => {\n    const trimmedKey = key.trim();\n    const state = get();\n    \n    // Only allow if already authenticated with CustomGPT key\n    if (!state.isAuthenticated) {\n      set({ error: 'Please enter CustomGPT.ai API key first' });\n      return;\n    }\n    \n    // OpenAI keys typically start with 'sk-'\n    if (trimmedKey && !trimmedKey.startsWith('sk-')) {\n      set({ error: 'Invalid OpenAI API key format' });\n      return;\n    }\n    \n    try {\n      // Use same encryption key as CustomGPT key\n      const encKey = state.encryptionKey;\n      if (!encKey) {\n        set({ error: 'Encryption key not found' });\n        return;\n      }\n      \n      if (trimmedKey) {\n        // Encrypt and store\n        const encrypted = encrypt(trimmedKey, encKey);\n        sessionStorage.setItem(OPENAI_STORAGE_KEY, encrypted);\n        set({ openAIApiKey: trimmedKey, error: null });\n      } else {\n        // Clear OpenAI key\n        sessionStorage.removeItem(OPENAI_STORAGE_KEY);\n        set({ openAIApiKey: null, error: null });\n      }\n    } catch (error) {\n      set({ error: 'Failed to store OpenAI API key' });\n    }\n  },\n  \n  clearApiKey: () => {\n    // Clear from storage\n    sessionStorage.removeItem(STORAGE_KEY);\n    sessionStorage.removeItem(OPENAI_STORAGE_KEY);\n    sessionStorage.removeItem(ENCRYPTION_KEY);\n    sessionStorage.removeItem(SESSION_KEY);\n    \n    // Clear from memory\n    set({\n      apiKey: null,\n      openAIApiKey: null,\n      encryptionKey: null,\n      isAuthenticated: false,\n      error: null,\n      sessionStartTime: null\n    });\n  },\n  \n  validateSession: () => {\n    const state = get();\n    \n    // Check if session has expired\n    if (state.sessionStartTime) {\n      const elapsed = Date.now() - state.sessionStartTime;\n      if (elapsed > state.sessionTimeout) {\n        state.clearApiKey();\n        state.setError('Session expired. Please enter your API key again.');\n        return false;\n      }\n    }\n    \n    return state.isAuthenticated;\n  },\n  \n  setError: (error: string | null) => {\n    set({ error });\n  },\n  \n  initializeFromStorage: () => {\n    const state = get();\n    \n    // Only initialize if demo mode is enabled\n    if (!state.isDemoMode) return;\n    \n    // Try to restore the session\n    state.restoreSession();\n  },\n  \n  restoreSession: () => {\n    const state = get();\n    \n    try {\n      // Check for session info\n      const sessionData = sessionStorage.getItem(SESSION_KEY);\n      if (!sessionData) return false;\n      \n      const sessionInfo = JSON.parse(sessionData);\n      const { startTime, encKey } = sessionInfo;\n      \n      // Check if session expired\n      const elapsed = Date.now() - startTime;\n      if (elapsed > SESSION_TIMEOUT) {\n        state.clearApiKey();\n        state.setError('Session expired. Please enter your API key again.');\n        return false;\n      }\n      \n      // Try to restore encrypted keys\n      const encrypted = sessionStorage.getItem(STORAGE_KEY);\n      const encryptedOpenAI = sessionStorage.getItem(OPENAI_STORAGE_KEY);\n      \n      if (!encrypted || !encKey) return false;\n      \n      // Decrypt API keys\n      const apiKey = decrypt(encrypted, encKey);\n      if (!apiKey || !isValidApiKey(apiKey)) {\n        state.clearApiKey();\n        return false;\n      }\n      \n      // Restore OpenAI key if present\n      let openAIKey = null;\n      if (encryptedOpenAI) {\n        openAIKey = decrypt(encryptedOpenAI, encKey);\n      }\n      \n      // Restore state\n      set({\n        apiKey: apiKey,\n        openAIApiKey: openAIKey,\n        encryptionKey: encKey,\n        isAuthenticated: true,\n        sessionStartTime: startTime,\n        error: null\n      });\n      \n      return true;\n    } catch {\n      // Session restore failed, clear everything\n      state.clearApiKey();\n      return false;\n    }\n  }\n}));\n\n// Auto-clear on tab visibility change (optional security feature)\nif (typeof window !== 'undefined') {\n  document.addEventListener('visibilitychange', () => {\n    if (document.hidden) {\n      // Optional: Clear API key when tab is hidden\n      // Uncomment for extra security\n      // const { clearApiKey } = useDemoStore.getState();\n      // clearApiKey();\n    }\n  });\n  \n  // Check session validity periodically\n  setInterval(() => {\n    const { validateSession } = useDemoStore.getState();\n    validateSession();\n  }, 60000); // Check every minute\n}","'use client';\n\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { useMicVAD, utils } from '@ricky0123/vad-react';\nimport RotateLoader from 'react-spinners/RotateLoader';\nimport { X, StopCircle, Mic, MicOff, Settings } from 'lucide-react';\nimport Canvas from './Canvas';\nimport { VoiceSettings } from './VoiceSettings';\nimport { speechManager } from '@/lib/voice/speech-manager';\nimport { useMessageStore, useConversationStore } from '@/hooks/useWidgetStore';\nimport { useAgentStore } from '@/store/agents';\nimport { generateId, generateConversationName } from '@/lib/utils';\nimport { useVoiceSettingsStore } from '@/store/voice-settings';\nimport { parseMarkdownForVoice } from '@/lib/voice/utils';\nimport { useDemoStore } from '@/store/demo';\nimport { AlertTriangle } from 'lucide-react';\n\ninterface VoiceModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  projectId: string;\n  projectName?: string;\n}\n\n// Voice states for UI animations\ntype VoiceState = 'idle' | 'listening' | 'recording' | 'processing' | 'speaking';\n\n// Separate component that handles VAD initialization\nfunction VoiceModalContent({ isOpen, onClose, projectId, projectName }: VoiceModalProps) {\n  const [loading, setLoading] = useState(true);\n  const [transcript, setTranscript] = useState('');\n  const [agentResponse, setAgentResponse] = useState('');\n  const [isManualRecording, setIsManualRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null);\n  const [apiKeyError, setApiKeyError] = useState(false);\n  const [isAgentSpeaking, setIsAgentSpeaking] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [voiceState, setVoiceState] = useState<VoiceState>('idle');\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  \n  // Streaming state\n  const [isStreamingText, setIsStreamingText] = useState(false);\n  const [streamingResponse, setStreamingResponse] = useState('');\n  \n  // Message store integration\n  const { addMessage, messages, loadMessages } = useMessageStore();\n  const { currentConversation, ensureConversation, updateConversation } = useConversationStore();\n  const [currentUserMessageId, setCurrentUserMessageId] = useState<string | null>(null);\n  const [voiceConversation, setVoiceConversation] = useState<any>(null);\n  \n  // Voice settings integration\n  const { selectedVoice, selectedPersona, setVoiceModalOpen } = useVoiceSettingsStore();\n  \n  // Demo mode check\n  const { isDemoMode, openAIApiKey } = useDemoStore();\n  \n  // Check if OpenAI API key is available\n  const checkOpenAIKeyAvailability = useCallback(() => {\n    const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n    if (deploymentMode === 'demo' && !openAIApiKey) {\n      return false;\n    }\n    // In production mode, we can't check server-side env from client\n    // We'll let the API handle validation\n    return true;\n  }, [openAIApiKey]);\n\n  // Initialize VAD with error handling\n  const vad = useMicVAD({\n    preSpeechPadFrames: 10,\n    positiveSpeechThreshold: 0.8,   // Lower threshold for easier detection\n    negativeSpeechThreshold: 0.6,   // Lower threshold\n    minSpeechFrames: 3,              // Reduce minimum frames\n    startOnLoad: false,              // Start manually\n    workletURL: '/vad.worklet.bundle.min.js',\n    modelURL: '/silero_vad.onnx',\n    // VAD configuration\n    onSpeechStart: () => {\n      console.log('🎤 [VAD] Speech started detected');\n      speechManager.onSpeechStart();\n    },\n    onSpeechEnd: (audio) => {\n      console.log('🎤 [VAD] Speech ended, audio length:', audio.length);\n      speechManager.onSpeechEnd(audio);\n    },\n    onVADMisfire: () => {\n      console.log('🎤 [VAD] Misfire detected');\n      speechManager.onMisfire();\n    }\n  });\n\n  // Control global voice modal state for hiding mobile navigation\n  useEffect(() => {\n    setVoiceModalOpen(isOpen);\n    \n    // Extra cleanup when closing to ensure mobile navigation reappears\n    if (!isOpen) {\n      // Small delay to ensure the state change is processed\n      setTimeout(() => {\n        setVoiceModalOpen(false);\n      }, 100);\n    }\n  }, [isOpen, setVoiceModalOpen]);\n\n  // Set up speech manager when modal opens\n  useEffect(() => {\n    if (isOpen && projectId) {\n      console.log('🔧 [VOICE-MODAL] Setting up speech manager');\n      speechManager.setProjectId(projectId);\n      \n      // Apply voice settings to speech manager\n      speechManager.setVoiceSettings(selectedVoice, selectedPersona);\n      \n      // Pass demo keys to window object for speech manager (only in demo mode)\n      if (isDemoMode) {\n        if (openAIApiKey) {\n          (window as any).__demoOpenAIKey = openAIApiKey;\n        }\n        // Also pass CustomGPT API key from demo store\n        const demoApiKey = useDemoStore.getState().apiKey;\n        if (demoApiKey) {\n          (window as any).__demoCustomGPTKey = demoApiKey;\n        }\n      }\n      \n      // Theme is now handled directly by Canvas component through themeId prop\n      \n      // Check if agent is active\n      const currentAgentStore = useAgentStore.getState();\n      const agent = currentAgentStore.agents.find(a => a.id === parseInt(projectId));\n      \n      if (agent && !agent.is_chat_active) {\n        console.warn('⚠️ [VOICE-MODAL] Agent is inactive - may fall back to OpenAI');\n      }\n      \n      // Ensure we have a conversation before starting voice\n      const setupConversation = async () => {\n        try {\n          let conversation = currentConversation;\n          \n          // If no current conversation, create one for voice\n          if (!conversation) {\n            console.log('🔄 [VOICE-MODAL] No current conversation, creating one for voice');\n            // Create conversation with temporary title - will be updated when we get the transcript\n            conversation = await ensureConversation(parseInt(projectId), 'New voice conversation');\n            console.log('✅ [VOICE-MODAL] Created conversation:', conversation.id, 'session:', conversation.session_id);\n            // Store the conversation reference for reuse\n            setVoiceConversation(conversation);\n          } else {\n            // Store existing conversation reference\n            setVoiceConversation(conversation);\n          }\n          \n          // Load conversation history and session ID\n          const conversationMessages = messages.get(conversation.id.toString()) || [];\n          console.log('📝 [VOICE-MODAL] Loading conversation history:', conversationMessages.length, 'messages');\n          console.log('📝 [VOICE-MODAL] Agent status:', agent?.is_chat_active ? 'Active' : 'Inactive');\n          \n          // Filter out any duplicate messages and ensure proper ordering\n          const cleanedMessages = conversationMessages.filter((msg, index, self) => \n            // Keep only the first occurrence of each message ID\n            index === self.findIndex(m => m.id === msg.id)\n          ).sort((a, b) => \n            // Sort by timestamp to ensure proper ordering\n            new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n          );\n          \n          speechManager.setConversationHistory(cleanedMessages);\n          speechManager.setSessionId(conversation.session_id);\n        } catch (error) {\n          console.error('❌ [VOICE-MODAL] Failed to setup conversation:', error);\n        }\n      };\n      \n      setupConversation();\n      \n      speechManager.setCallbacks({\n        onUserSpeaking: () => {\n          (Canvas as any).onUserSpeaking?.();\n          setTranscript('');\n          setStreamingResponse(''); // Clear streaming response\n          setIsStreamingText(false);\n          setVoiceState('recording');\n        },\n        onProcessing: async () => {\n          (Canvas as any).onProcessing?.();\n          setVoiceState('processing');\n          \n          // Use existing conversation - don't create a new one\n          // The conversation should already be set up in setupConversation()\n          \n          const placeholderUserMessage = {\n            id: generateId(),\n            role: 'user' as const,\n            content: '🎤 Processing voice input...',\n            timestamp: new Date().toISOString(),\n            status: 'sending' as const,\n          };\n          \n          setCurrentUserMessageId(placeholderUserMessage.id);\n          const targetConversation = voiceConversation || currentConversation;\n          if (targetConversation) {\n            addMessage(targetConversation.id.toString(), placeholderUserMessage);\n            console.log('🎤 [VOICE-MODAL] Added placeholder user message');\n          }\n        },\n        onAiSpeaking: () => {\n          (Canvas as any).onAiSpeaking?.();\n          setIsAgentSpeaking(true);\n          setVoiceState('speaking');\n        },\n        onReset: () => {\n          (Canvas as any).reset?.();\n          setIsAgentSpeaking(false);\n          setIsStreamingText(false);\n          setVoiceState('idle');\n        },\n        onDebug: (message: string, data?: any) => {\n          // Debug logging removed for production\n        },\n        onError: (error: string) => {\n          console.error('❌ [VOICE-MODAL] Error from speech manager:', error);\n          // Check if it's an API key error\n          if (error.includes('OpenAI API key') || error.includes('API key')) {\n            setApiKeyError(true);\n            // Also show a toast error\n            const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : null;\n            const isDemoMode = deploymentMode === 'demo';\n            const errorMsg = isDemoMode \n              ? 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n              : 'Voice feature requires OpenAI API key configuration. Please add OPENAI_API_KEY to your .env.local file.';\n            \n            // Import toast at the top of the file\n            import('sonner').then(({ toast }) => {\n              toast.error(errorMsg);\n            });\n          }\n          setIsStreamingText(false);\n          setVoiceState('idle');\n        },\n        onTranscriptReceived: async (transcript: string) => {\n          console.log('🎯 [VOICE-MODAL] Transcript received:', transcript);\n          setTranscript(transcript);\n          \n          // Update conversation title if this is the first message\n          const targetConversation = voiceConversation || currentConversation;\n          if (targetConversation) {\n            const conversationMessages = messages.get(targetConversation.id.toString()) || [];\n            // If this is the first or second message (after initial placeholder), update the title\n            if (conversationMessages.length <= 1 && targetConversation.name && \n                (targetConversation.name === 'New voice conversation' || \n                 targetConversation.name === 'Voice conversation' ||\n                 targetConversation.name === 'Processing...')) {\n              const newTitle = generateConversationName(transcript);\n              console.log('📝 [VOICE-MODAL] Updating conversation title to:', newTitle);\n              try {\n                await updateConversation(targetConversation.id, targetConversation.session_id, { name: newTitle });\n              } catch (error) {\n                console.error('❌ [VOICE-MODAL] Failed to update conversation title:', error);\n              }\n            }\n          }\n          \n          // Update the placeholder message with actual transcript\n          \n          if (targetConversation && currentUserMessageId) {\n            // Update the existing placeholder message\n            const updatedUserMessage = {\n              id: currentUserMessageId,\n              role: 'user' as const,\n              content: transcript,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n            };\n            \n            addMessage(targetConversation.id.toString(), updatedUserMessage);\n            console.log('✅ [VOICE-MODAL] Updated user message with transcript');\n          } else {\n            // Fallback: create new message if no placeholder exists\n            // Use the existing conversation from voiceConversation or currentConversation\n            const conversation = voiceConversation || currentConversation;\n            if (!conversation) {\n              console.error('❌ [VOICE-MODAL] No conversation available for user message');\n              return;\n            }\n            \n            const userMessage = {\n              id: generateId(),\n              role: 'user' as const,\n              content: transcript,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n            };\n            \n            setCurrentUserMessageId(userMessage.id);\n            addMessage(conversation.id.toString(), userMessage);\n          }\n        },\n        onResponseReceived: async (response: string) => {\n          console.log('🎯 [VOICE-MODAL] Response received:', response);\n          console.log('🎯 [VOICE-MODAL] Response includes \"individuals\":', response.includes('individuals'));\n          console.log('🎯 [VOICE-MODAL] Response includes \"like\":', response.includes('like'));\n          console.log('🎯 [VOICE-MODAL] Response includes \"CustomGPT\":', response.includes('CustomGPT'));\n          \n          // For streaming responses, this will be called with the final response\n          // Don't update the display here as it's already being updated via streaming chunks\n          // This is mainly for adding the message to the conversation history\n          \n          // Use voiceConversation to ensure we're adding to the same conversation as the user message\n          // This prevents race condition where messages could be added out of order\n          const targetConversation = voiceConversation || currentConversation;\n          \n          if (targetConversation) {\n            // Create and add assistant message to chat\n            const assistantMessage = {\n              id: generateId(),\n              role: 'assistant' as const,\n              content: response,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n              citations: [], // Voice responses typically don't have citations\n            };\n            \n            addMessage(targetConversation.id.toString(), assistantMessage);\n            \n            // Force refresh conversation to ensure proper syncing\n            const currentMessages = messages.get(targetConversation.id.toString()) || [];\n            console.log('🔄 [VOICE-MODAL] Current conversation messages:', currentMessages.length, 'messages');\n            \n          } else {\n            console.warn('⚠️ [VOICE-MODAL] No conversation available for adding assistant message');\n          }\n        },\n        // New streaming callbacks\n        onStreamingTextChunk: (textChunk: string) => {\n          console.log('📝 [VOICE-MODAL] Streaming text chunk:', textChunk);\n          setIsStreamingText(true);\n          setStreamingResponse(prev => {\n            const newText = prev + textChunk;\n            console.log('📝 [VOICE-MODAL] Accumulated streaming text length:', newText.length);\n            // Update the displayed response immediately for streaming\n            const cleanResponse = parseMarkdownForVoice(newText);\n            setAgentResponse(cleanResponse);\n            return newText;\n          });\n        },\n        onStreamingAudioReady: (audioUrl: string, chunkId: string) => {\n          console.log('🎵 [VOICE-MODAL] Audio chunk ready:', chunkId, 'URL length:', audioUrl.length);\n          \n          // Ensure we're in speaking state when audio arrives\n          if (voiceState !== 'speaking') {\n            setVoiceState('speaking');\n            setIsAgentSpeaking(true);\n          }\n        },\n        onStreamingComplete: (fullResponse: string, transcript: string) => {\n          console.log('✅ [VOICE-MODAL] Streaming complete:', { fullResponse: fullResponse.length, transcript });\n          console.log('✅ [VOICE-MODAL] Full response includes \"individuals\":', fullResponse.includes('individuals'));\n          console.log('✅ [VOICE-MODAL] Full response includes \"like\":', fullResponse.includes('like'));\n          console.log('✅ [VOICE-MODAL] Full response includes \"CustomGPT\":', fullResponse.includes('CustomGPT'));\n          \n          // Final cleanup - ensure we have the complete response\n          const cleanResponse = parseMarkdownForVoice(fullResponse);\n          console.log('✅ [VOICE-MODAL] Final clean response:', cleanResponse);\n          setAgentResponse(cleanResponse);\n          setStreamingResponse(fullResponse);\n          setIsStreamingText(false);\n          \n          // Don't add messages here - they've already been added via onTranscriptReceived and onResponseReceived\n          // This prevents duplicate messages in the conversation\n        }\n      });\n    }\n    \n    // Clean up when modal closes\n    if (!isOpen) {\n      // Don't clear conversation history to maintain context\n      setTranscript('');\n      setAgentResponse('');\n      setStreamingResponse('');\n      setIsStreamingText(false);\n      setIsAgentSpeaking(false);\n      setVoiceConversation(null); // Clear voice conversation reference\n      setVoiceState('idle'); // Reset voice state to idle\n      setCurrentUserMessageId(null); // Clear current user message ID\n      \n      // Clean up demo keys from window object (only in demo mode)\n      if ((window as any).__demoOpenAIKey) {\n        delete (window as any).__demoOpenAIKey;\n      }\n      if ((window as any).__demoCustomGPTKey) {\n        delete (window as any).__demoCustomGPTKey;\n      }\n      \n      // Ensure VAD is stopped if it was running\n      if (vad.listening) {\n        vad.pause();\n      }\n      \n      // Clean up speech manager streaming resources\n      speechManager.destroy();\n      \n      // Ensure global state is properly reset\n      setVoiceModalOpen(false);\n      \n      // Reload messages to ensure sync with API format\n      if (currentConversation) {\n        // Use the loadMessages function directly from the hook\n        loadMessages(currentConversation.id.toString());\n      }\n    }\n  }, [isOpen, projectId, currentConversation, messages, selectedVoice, selectedPersona, isDemoMode, openAIApiKey, loadMessages]);\n  \n  // Update settings when they change\n  useEffect(() => {\n    if (isOpen && projectId) {\n      // Update speech manager with new voice settings\n      speechManager.setVoiceSettings(selectedVoice, selectedPersona);\n      \n      // Theme is now handled directly by Canvas component through themeId prop\n      // The Canvas component automatically switches themes when themeId changes\n    }\n  }, [selectedVoice, selectedPersona, isOpen, projectId]);\n  \n  // Monitor VAD state changes\n  useEffect(() => {\n    if (vad.errored) {\n    } else if (!vad.loading && !vad.errored) {\n    }\n  }, [vad.loading, vad.errored]);\n\n  // Define handleToggleListening before useEffect that uses it\n  const handleToggleListening = useCallback(async () => {\n    console.log('🔘 [VOICE-MODAL] Toggle listening clicked', { \n      vadLoading: vad.loading,\n      vadListening: vad.listening,\n      vadErrored: vad.errored\n    });\n    \n    // Check OpenAI key availability first\n    if (!checkOpenAIKeyAvailability()) {\n      console.error('❌ [VOICE-MODAL] OpenAI API key not available');\n      setApiKeyError(true);\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n      const errorMsg = deploymentMode === 'demo' \n        ? 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n        : 'Voice feature requires OpenAI API key. Please add OPENAI_API_KEY to your .env.local file.';\n      \n      import('sonner').then(({ toast }) => {\n        toast.error(errorMsg);\n      });\n      return;\n    }\n    \n    // Enhanced error handling for VAD\n    if (vad.errored) {\n      console.error('❌ [VOICE-MODAL] VAD is in error state, attempting recovery...');\n      \n      // Try to restart VAD after error\n      try {\n        console.log('🔄 [VOICE-MODAL] Attempting VAD recovery...');\n        // Wait a moment then try to start\n        setTimeout(() => {\n          if (!vad.listening && !vad.loading) {\n            console.log('🔄 [VOICE-MODAL] Retry VAD start after error');\n            vad.start();\n          }\n        }, 1000);\n        return;\n      } catch (recoveryError) {\n        console.error('❌ [VOICE-MODAL] VAD recovery failed:', recoveryError);\n        return;\n      }\n    }\n    \n    try {\n      if (vad.listening) {\n        console.log('⏸️ [VOICE-MODAL] Pausing VAD');\n        vad.pause();\n        setVoiceState('idle');\n      } else {\n        console.log('▶️ [VOICE-MODAL] Starting VAD');\n        setVoiceState('listening');\n        \n        // Simplified microphone permission check\n        try {\n          console.log('🎤 [VOICE-MODAL] Checking microphone permissions...');\n          const stream = await navigator.mediaDevices.getUserMedia({ \n            audio: true\n          });\n          \n          // Clean up immediately - we just needed to check permission\n          stream.getTracks().forEach(track => track.stop());\n          \n          console.log('🎯 [VOICE-MODAL] Microphone permission granted');\n        } catch (permissionError) {\n          console.error('❌ [VOICE-MODAL] Microphone permission failed:', permissionError);\n          const errorMessage = permissionError instanceof Error ? permissionError.message : 'Permission denied';\n          \n          // Still try to start VAD - it might handle permissions internally\n        }\n        \n        // Start VAD with additional error handling\n        try {\n          vad.start();\n        } catch (vadError) {\n          console.error('❌ [VOICE-MODAL] VAD start failed:', vadError);\n          const errorMessage = vadError instanceof Error ? vadError.message : 'Unknown error';\n        }\n      }\n    } catch (error) {\n      console.error('❌ [VOICE-MODAL] Error in toggle listening:', error);\n    }\n  }, [vad, checkOpenAIKeyAvailability]);\n\n  // Manual recording fallback when VAD fails\n  const handleManualRecording = useCallback(async () => {\n    console.log('🎤 [MANUAL] Starting manual recording fallback');\n    \n    // Check OpenAI key availability first\n    if (!checkOpenAIKeyAvailability()) {\n      console.error('❌ [MANUAL] OpenAI API key not available');\n      setApiKeyError(true);\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n      const errorMsg = deploymentMode === 'demo' \n        ? 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n        : 'Voice feature requires OpenAI API key. Please add OPENAI_API_KEY to your .env.local file.';\n      \n      import('sonner').then(({ toast }) => {\n        toast.error(errorMsg);\n      });\n      return;\n    }\n    \n    try {\n      if (!isManualRecording) {\n        // Start manual recording with better audio quality\n        setVoiceState('recording');\n        const stream = await navigator.mediaDevices.getUserMedia({ \n          audio: {\n            echoCancellation: true,\n            noiseSuppression: true,\n            autoGainControl: true,\n            sampleRate: 48000\n          } \n        });\n        \n        // Choose the best available audio format\n        const mimeType = MediaRecorder.isTypeSupported('audio/webm;codecs=opus') \n          ? 'audio/webm;codecs=opus' \n          : 'audio/webm';\n          \n        const recorder = new MediaRecorder(stream, { mimeType });\n        const chunks: Blob[] = [];\n        \n        recorder.ondataavailable = (event) => {\n          if (event.data.size > 0) {\n            chunks.push(event.data);\n          }\n        };\n        \n        recorder.onstop = async () => {\n          console.log('🎤 [MANUAL] Recording stopped, processing audio...');\n          // MediaRecorder doesn't produce WAV, it produces webm/opus or similar\n          const audioBlob = new Blob(chunks, { type: recorder.mimeType || 'audio/webm' });\n          \n          try {\n            // Create audio context for decoding compressed audio\n            const audioContext = new AudioContext();\n            \n            // Convert blob to ArrayBuffer\n            const audioBuffer = await audioBlob.arrayBuffer();\n            \n            // Decode the compressed audio to get raw PCM data\n            const decodedAudio = await audioContext.decodeAudioData(audioBuffer);\n            console.log('🎯 [MANUAL] Audio decoded:', {\n              sampleRate: decodedAudio.sampleRate,\n              channels: decodedAudio.numberOfChannels,\n              duration: decodedAudio.duration,\n              length: decodedAudio.length\n            });\n            \n            // Convert to mono Float32Array (match VAD format)\n            const channelData = decodedAudio.getChannelData(0); // Get first channel\n            \n            // CRITICAL: Resample from 48kHz to 16kHz for VAD/Whisper compatibility\n            let audioArray: Float32Array;\n            if (decodedAudio.sampleRate !== 16000) {\n              console.log('🔄 [MANUAL] Resampling from', decodedAudio.sampleRate, 'to 16kHz');\n              const resampleRatio = 16000 / decodedAudio.sampleRate;\n              const newLength = Math.floor(channelData.length * resampleRatio);\n              audioArray = new Float32Array(newLength);\n              \n              // Simple linear interpolation resampling\n              for (let i = 0; i < newLength; i++) {\n                const srcIndex = i / resampleRatio;\n                const srcIndexFloor = Math.floor(srcIndex);\n                const srcIndexCeil = Math.min(srcIndexFloor + 1, channelData.length - 1);\n                const fraction = srcIndex - srcIndexFloor;\n                \n                audioArray[i] = channelData[srcIndexFloor] * (1 - fraction) + \n                               channelData[srcIndexCeil] * fraction;\n              }\n            } else {\n              audioArray = new Float32Array(channelData);\n            }\n            \n            console.log('🎯 [MANUAL] Audio ready:', audioArray.length, 'samples at 16kHz');\n            \n            // Process through speech manager\n            speechManager.onSpeechStart();\n            await speechManager.onSpeechEnd(audioArray);\n            \n            // Clean up audio context\n            await audioContext.close();\n            \n          } catch (error) {\n            console.error('❌ [MANUAL] Audio decoding failed:', error);\n          }\n          \n          // Clean up recording resources\n          stream.getTracks().forEach(track => track.stop());\n          setIsManualRecording(false);\n          setMediaRecorder(null);\n        };\n        \n        setMediaRecorder(recorder);\n        setIsManualRecording(true);\n        recorder.start();\n        \n        \n      } else {\n        // Stop manual recording\n        if (mediaRecorder) {\n          mediaRecorder.stop();\n        }\n      }\n    } catch (error) {\n      console.error('❌ [MANUAL] Manual recording failed:', error);\n    }\n  }, [isManualRecording, mediaRecorder, checkOpenAIKeyAvailability]);\n\n  // Track if we've already auto-started to prevent loops\n  const [hasAutoStarted, setHasAutoStarted] = useState(false);\n\n  // Handle stopping the agent's speech\n  const handleStopSpeech = useCallback(() => {\n    console.log('🛑 [VOICE-MODAL] Stopping agent speech');\n    speechManager.stopAudio();\n    setIsAgentSpeaking(false);\n  }, []);\n\n  // Handle VAD state updates with comprehensive error checking\n  useEffect(() => {\n    console.log('🔄 [VOICE-MODAL] VAD state changed', { \n      isOpen,\n      vadLoading: vad.loading, \n      vadListening: vad.listening,\n      vadUserSpeaking: vad.userSpeaking,\n      vadErrored: vad.errored,\n      hasAutoStarted\n    });\n    \n    // Check for VAD errors\n    if (vad.errored) {\n      console.error('❌ [VOICE-MODAL] VAD encountered an error');\n      return;\n    }\n    \n    // Don't auto-start VAD - wait for user interaction\n    // This prevents microphone permission request on modal open\n    if (isOpen && !vad.loading && !vad.listening && !vad.errored) {\n      console.log('🎯 [VOICE-MODAL] VAD loaded successfully, ready for manual start');\n    }\n    \n    // If VAD is in error state but we haven't tried recovery, attempt recovery\n    if (isOpen && !vad.loading && vad.errored && hasAutoStarted) {\n      console.log('🔄 [VOICE-MODAL] VAD in error state, scheduling recovery attempt...');\n      \n      // Don't continuously retry, just once more after a delay\n      setTimeout(() => {\n        if (vad.errored && !vad.listening) {\n          console.log('🔄 [VOICE-MODAL] Executing VAD recovery attempt');\n          handleToggleListening();\n        }\n      }, 1500);\n    }\n    \n    // Pause when modal closes\n    if (!isOpen && vad.listening) {\n      console.log('🛑 [VOICE-MODAL] Pausing VAD (modal closed)');\n      vad.pause();\n    }\n  }, [isOpen, vad.loading, vad.listening, vad.errored, hasAutoStarted]);\n\n  // Reset auto-start flag and error state when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setHasAutoStarted(false);\n      setApiKeyError(false);\n      setTranscript('');\n      setAgentResponse('');\n      setStreamingResponse('');\n      setIsStreamingText(false);\n      setIsAgentSpeaking(false);\n      setVoiceConversation(null); // Reset voice conversation for new session\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setLoading(vad.loading);\n  }, [vad.loading]);\n\n  return (\n    <>\n      {isOpen && (\n        <>\n          <style jsx global>{`\n            /* Custom scrollbar styles for voice modal */\n            .voice-response-scroll::-webkit-scrollbar {\n              width: 6px;\n            }\n            \n            .voice-response-scroll::-webkit-scrollbar-track {\n              background: rgba(255, 255, 255, 0.1);\n              border-radius: 3px;\n            }\n            \n            .voice-response-scroll::-webkit-scrollbar-thumb {\n              background: rgba(255, 255, 255, 0.3);\n              border-radius: 3px;\n            }\n            \n            .voice-response-scroll::-webkit-scrollbar-thumb:hover {\n              background: rgba(255, 255, 255, 0.5);\n            }\n            \n            /* Firefox scrollbar */\n            .voice-response-scroll {\n              scrollbar-width: thin;\n              scrollbar-color: rgba(255, 255, 255, 0.3) rgba(255, 255, 255, 0.1);\n            }\n            \n            /* Mobile touch scrolling optimization */\n            .voice-response-scroll {\n              -webkit-overflow-scrolling: touch;\n              scroll-behavior: smooth;\n            }\n          `}</style>\n          {/* Settings and Close buttons - moved outside main container to avoid click issues */}\n          <div \n            className=\"fixed top-4 sm:top-6 md:top-8 right-4 sm:right-6 md:right-8 flex items-center gap-2 sm:gap-3 z-[10000]\"\n            style={{ pointerEvents: 'auto' }}\n          >\n            {/* Settings button */}\n            <button\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                console.log('🔧 Settings button clicked, current state:', isSettingsOpen);\n                setIsSettingsOpen(true);\n                console.log('🔧 Settings state should now be true');\n              }}\n              className=\"w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-white/10 hover:bg-white/20 active:bg-white/30 backdrop-blur-sm flex items-center justify-center transition-all transform active:scale-95\"\n              aria-label=\"Voice settings\"\n            >\n              <Settings className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n            </button>\n            \n            {/* Close button */}\n            <button\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                console.log('❌ Close button clicked');\n                onClose();\n              }}\n              className=\"w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-white/10 hover:bg-white/20 active:bg-white/30 backdrop-blur-sm flex items-center justify-center transition-all transform active:scale-95\"\n              aria-label=\"Close voice mode\"\n            >\n              <X className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n            </button>\n          </div>\n          \n          <div \n            className=\"fixed inset-0 z-[9999] overflow-hidden\"\n          >\n          {/* Dynamic gradient background based on voice state */}\n          <div className={`absolute inset-0 transition-all duration-1000 pointer-events-none ${\n            voiceState === 'idle' ? 'voice-gradient-idle' :\n            voiceState === 'listening' ? 'voice-gradient-listening' :\n            voiceState === 'recording' ? 'voice-gradient-recording' :\n            voiceState === 'processing' ? 'voice-gradient-processing' :\n            'voice-gradient-speaking'\n          }`} />\n          \n          {/* Wave overlay effect for processing and speaking states */}\n          {(voiceState === 'processing' || voiceState === 'speaking') && (\n            <div className=\"absolute inset-0 voice-overlay-wave pointer-events-none\" />\n          )}\n          \n          {/* Pulse overlay for recording state */}\n          {voiceState === 'recording' && (\n            <div className=\"absolute inset-0 bg-red-500/10 voice-overlay-pulse pointer-events-none\" />\n          )}\n          {loading ? (\n            <div className=\"flex items-center justify-center h-full relative z-10\">\n              <RotateLoader\n                loading={loading}\n                color=\"#ffffff\"\n                aria-label=\"Loading Voice\"\n                data-testid=\"loader\"\n              />\n            </div>\n          ) : (\n            <>\n              {/* Canvas for particle animation */}\n              <div className=\"absolute inset-0 pointer-events-none z-0\">\n                <Canvas />\n              </div>\n              \n              {/* Top-left settings display */}\n              <div className=\"absolute top-4 sm:top-6 md:top-8 left-4 sm:left-6 md:left-8 z-20 space-y-2\">\n                {/* Demo mode indicator */}\n                {isDemoMode && (\n                  <div className=\"bg-amber-500/20 backdrop-blur-sm rounded-lg px-3 py-2 text-amber-300 text-xs flex items-center gap-2 border border-amber-500/30\">\n                    <AlertTriangle className=\"w-3 h-3\" />\n                    <span className=\"font-medium\">Demo Mode</span>\n                  </div>\n                )}\n                \n                {/* Voice settings */}\n                <div className=\"bg-white/5 backdrop-blur-sm rounded-lg px-3 py-2 text-white/70 text-xs space-y-1\">\n                  <div>Voice: {selectedVoice}</div>\n                  <div>Persona: {selectedPersona}</div>\n                </div>\n              </div>\n\n              \n              \n\n              {/* Status display - mobile optimized with better text handling */}\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-center px-4 z-10 pointer-events-auto max-w-full\" style={{ maxHeight: '80vh', display: 'flex', flexDirection: 'column' }}>\n                <div className=\"relative\">\n                  {/* Main status text with state-based colors - no blinking */}\n                  <p className={`text-2xl sm:text-3xl md:text-4xl font-light mb-4 leading-tight transition-all duration-300 ${\n                    voiceState === 'recording' ? 'text-red-400' :\n                    voiceState === 'processing' ? 'text-purple-400' :\n                    voiceState === 'speaking' ? 'text-green-400' :\n                    voiceState === 'listening' ? 'text-blue-400' :\n                    'text-white/90'\n                  }`}>\n                    {isManualRecording \n                      ? 'Analyzing...' \n                      : voiceState === 'listening'\n                      ? 'Listening...'\n                      : voiceState === 'processing'\n                      ? 'Thinking...'\n                      : voiceState === 'speaking'\n                      ? 'Speaking...'\n                      : vad.loading\n                      ? 'Initializing...'\n                      : 'Ready to chat'}\n                  </p>\n                  \n                  {/* Animated dots for processing state */}\n                  {voiceState === 'processing' && (\n                    <div className=\"flex justify-center gap-1 mt-2\">\n                      <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }} />\n                      <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }} />\n                      <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }} />\n                    </div>\n                  )}\n                </div>\n                \n                {/* Show user's transcript - responsive */}\n                {transcript && (\n                  <div className=\"mb-4 sm:mb-6\">\n                    <p className=\"text-xs sm:text-sm text-white/70 mb-1\">You said:</p>\n                    <p className=\"text-sm sm:text-lg text-white/90 max-w-xs sm:max-w-md mx-auto px-2\">&ldquo;{transcript}&rdquo;</p>\n                  </div>\n                )}\n                \n                {/* Show agent's response - mobile optimized with scrollable area */}\n                {agentResponse && (\n                  <div className=\"animate-fade-in pointer-events-auto\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <p className=\"text-xs text-white/70\">Agent:</p>\n                      {isStreamingText && (\n                        <div className=\"flex items-center gap-1\">\n                          <div className=\"w-1.5 h-1.5 bg-blue-400 rounded-full animate-pulse\"></div>\n                          <span className=\"text-xs text-blue-400/70\">streaming...</span>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"voice-response-scroll max-h-[40vh] sm:max-h-[50vh] overflow-y-auto overflow-x-hidden px-4 py-2 -mx-2 rounded-lg bg-white/5 relative\">\n                      <p className=\"text-sm sm:text-base text-white max-w-xs sm:max-w-md mx-auto leading-relaxed break-words whitespace-pre-wrap\">\n                        {agentResponse}\n                        {isStreamingText && (\n                          <span className=\"inline-block w-2 h-4 bg-white/60 ml-1 animate-pulse\"></span>\n                        )}\n                      </p>\n                    </div>\n                    \n                    {/* Audio wave visualization for speaking state */}\n                    {voiceState === 'speaking' && (\n                      <div className=\"flex justify-center items-center gap-1 mt-4\">\n                        {[...Array(5)].map((_, i) => (\n                          <div\n                            key={i}\n                            className=\"w-1 bg-green-400 rounded-full audio-wave-bar\"\n                            style={{\n                              height: '20px',\n                              animationDelay: `${i * 0.1}s`\n                            }}\n                          />\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                )}\n                \n                \n              </div>\n\n              {/* Bottom control buttons - Mobile optimized */}\n              <div \n                className=\"absolute bottom-6 sm:bottom-8 md:bottom-12 left-1/2 transform -translate-x-1/2 flex flex-col items-center gap-4 px-4\"\n                style={{ pointerEvents: 'auto', zIndex: 10000 }}\n              >\n                {/* API Key error warning */}\n                {(() => {\n                  const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                  const showWarning = deploymentMode === 'demo' ? !openAIApiKey : false;\n                  if (!showWarning) return null;\n                  \n                  return (\n                    <div className=\"bg-red-500/20 backdrop-blur-sm rounded-lg px-4 py-3 text-red-300 text-sm flex items-center gap-2 border border-red-500/30 max-w-xs\">\n                      <AlertTriangle className=\"w-4 h-4 flex-shrink-0\" />\n                      <span>Voice requires OpenAI API key. Add it in demo settings.</span>\n                    </div>\n                  );\n                })()}\n                \n                {/* Main voice control button */}\n                <div className=\"flex items-center justify-center\">\n                  {/* Recording/Listening State */}\n                  {(isManualRecording || voiceState === 'listening') && (\n                    <button\n                      onClick={isManualRecording ? handleManualRecording : handleToggleListening}\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-red-500/20 hover:bg-red-500/30 active:bg-red-500/40 backdrop-blur-sm transition-all transform active:scale-95 pointer-events-auto shadow-lg border-2 border-red-500/50\"\n                      style={{ pointerEvents: 'auto' }}\n                      aria-label={isManualRecording ? \"Stop recording\" : \"Stop listening\"}\n                    >\n                      {/* Pulsing animation ring */}\n                      <div className=\"absolute inset-0 rounded-full bg-red-500/30 animate-ping\"></div>\n                      \n                      {/* Inner button content */}\n                      <div className=\"relative z-10 w-full h-full flex items-center justify-center\">\n                        <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-red-500 rounded-sm\"></div>\n                      </div>\n                    </button>\n                  )}\n\n                  {/* Processing State */}\n                  {voiceState === 'processing' && (\n                    <button\n                      disabled\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-purple-500/20 backdrop-blur-sm shadow-lg border-2 border-purple-500/50\"\n                      aria-label=\"Processing\"\n                    >\n                      {/* Processing animation */}\n                      <div className=\"absolute inset-3 border-4 border-purple-500/30 border-t-purple-500 rounded-full animate-spin\"></div>\n                      <div className=\"absolute inset-6 border-2 border-purple-500/20 border-t-purple-500/60 rounded-full animate-spin\" style={{ animationDirection: 'reverse', animationDuration: '1.5s' }}></div>\n                    </button>\n                  )}\n\n                  {/* Speaking State - Stop button */}\n                  {voiceState === 'speaking' && (\n                    <button\n                      onClick={handleStopSpeech}\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-orange-500/20 hover:bg-orange-500/30 active:bg-orange-500/40 backdrop-blur-sm transition-all transform active:scale-95 pointer-events-auto shadow-lg border-2 border-orange-500/50\"\n                      style={{ pointerEvents: 'auto' }}\n                      aria-label=\"Stop response\"\n                    >\n                      {/* Sound wave animation */}\n                      <div className=\"absolute inset-0 rounded-full\">\n                        {[...Array(3)].map((_, i) => (\n                          <div\n                            key={i}\n                            className=\"absolute inset-0 rounded-full border border-orange-500/30 animate-ping\"\n                            style={{\n                              animationDelay: `${i * 0.2}s`,\n                              animationDuration: '1.5s'\n                            }}\n                          />\n                        ))}\n                      </div>\n                      \n                      <div className=\"relative z-10 w-full h-full flex items-center justify-center\">\n                        <StopCircle className=\"w-8 h-8 sm:w-10 sm:h-10 text-orange-500\" />\n                      </div>\n                    </button>\n                  )}\n\n                  {/* Idle State - Start button */}\n                  {!vad.loading && !isManualRecording && voiceState !== 'speaking' && voiceState !== 'listening' && voiceState !== 'processing' && (\n                    <button\n                      onClick={vad.errored ? handleManualRecording : handleToggleListening}\n                      disabled={(() => {\n                        const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                        return deploymentMode === 'demo' && !openAIApiKey;\n                      })()}\n                      className={`relative w-20 h-20 sm:w-24 sm:h-24 rounded-full backdrop-blur-sm transition-all transform shadow-lg border-2 ${\n                        (() => {\n                          const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                          return deploymentMode === 'demo' && !openAIApiKey;\n                        })() \n                          ? 'bg-gray-500/20 border-gray-500/50 cursor-not-allowed opacity-50' \n                          : 'bg-blue-500/20 hover:bg-blue-500/30 active:bg-blue-500/40 hover:scale-105 active:scale-95 pointer-events-auto border-blue-500/50'\n                      }`}\n                      style={{ pointerEvents: 'auto' }}\n                      aria-label={(() => {\n                        const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                        return deploymentMode === 'demo' && !openAIApiKey ? \"Voice disabled - API key required\" : \"Start voice chat\";\n                      })()}\n                    >\n                      {/* Subtle glow effect */}\n                      <div className=\"absolute inset-0 rounded-full bg-blue-500/10 blur-sm\"></div>\n                      \n                      <div className=\"relative z-10 w-full h-full flex items-center justify-center\">\n                        <Mic className={`w-8 h-8 sm:w-10 sm:h-10 ${\n                          (() => {\n                            const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                            return deploymentMode === 'demo' && !openAIApiKey ? 'text-gray-500' : 'text-blue-500';\n                          })()\n                        }`} />\n                      </div>\n                    </button>\n                  )}\n\n                  {/* Loading State */}\n                  {vad.loading && (\n                    <button\n                      disabled\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-gray-500/20 backdrop-blur-sm shadow-lg border-2 border-gray-500/50\"\n                      aria-label=\"Loading\"\n                    >\n                      <div className=\"absolute inset-4 border-3 border-gray-500/30 border-t-gray-500 rounded-full animate-spin\"></div>\n                    </button>\n                  )}\n                </div>\n\n                {/* State indicator text (subtle) */}\n                <div className=\"text-xs text-white/60 text-center\">\n                  {(() => {\n                    const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                    return deploymentMode === 'demo' && !openAIApiKey ? 'API key required' : '';\n                  })() ||\n                   vad.loading ? 'Initializing...' :\n                   isManualRecording ? 'Tap to stop' :\n                   voiceState === 'listening' ? 'Listening...' :\n                   voiceState === 'processing' ? 'Processing...' :\n                   voiceState === 'speaking' ? 'Tap to stop' :\n                   'Tap to speak'}\n                </div>\n              </div>\n\n            </>\n          )}\n          </div>\n        </>\n      )}\n      \n      {/* Voice Settings Modal */}\n      <VoiceSettings \n        isOpen={isSettingsOpen} \n        onClose={() => setIsSettingsOpen(false)} \n      />\n    </>\n  );\n}\n\n// Main component that conditionally renders the VAD component\nexport function VoiceModal(props: VoiceModalProps) {\n  const { setVoiceModalOpen } = useVoiceSettingsStore();\n  \n  // Ensure global state is synchronized with props\n  React.useEffect(() => {\n    setVoiceModalOpen(props.isOpen);\n  }, [props.isOpen, setVoiceModalOpen]);\n  \n  // Only render the content (and initialize VAD) when modal is open\n  if (!props.isOpen) {\n    return null;\n  }\n  \n  return <VoiceModalContent {...props} />;\n}","/**\n * ChatContainer Component\n * \n * Main chat interface component that manages the entire chat experience.\n * This is the primary component for integrating CustomGPT chat functionality.\n * \n * Features:\n * - Message display with streaming support\n * - Agent selection and switching\n * - Citation handling with modal details\n * - Multiple deployment modes (standalone, widget, floating)\n * - Welcome screen with example prompts\n * - Error handling and authorization checks\n * \n * For customization:\n * - Example questions are now fetched from agent settings API\n * - Modify DEFAULT_EXAMPLE_PROMPTS for fallback starter questions\n * - Customize WelcomeMessage for branding\n * - Adjust ChatHeader for different layouts\n * - Style using Tailwind classes throughout\n */\n\n'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Sparkles, Bot } from 'lucide-react';\nimport Link from 'next/link';\nimport { toast } from 'sonner';\n\nimport type { ChatMessage, Citation, Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Message } from './Message';\nimport { ChatInput } from './ChatInput';\nimport { TypingIndicator } from './TypingIndicator';\nimport { AgentSelector } from './AgentSelector';\nimport { CitationDetailsModal } from './CitationDetailsModal';\nimport { CitationFilePreview } from './CitationFilePreview';\nimport { ConversationManager } from './ConversationManager';\nimport { MessageErrorDisplay } from './MessageErrorDisplay';\nimport { logger } from '@/lib/logger';\nimport { useWidgetSafe } from '@/widget/WidgetContext';\nimport { useMessageStore, useConversationStore, useAgentStore } from '@/hooks/useWidgetStore';\nimport { MessageSkeleton, LoadingOverlay } from '@/components/ui/loading';\nimport { getClient } from '@/lib/api/client';\nimport { VoiceModal } from '@/components/voice/VoiceModal';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\nimport { useDemoStore } from '@/store/demo';\n\n/**\n * Default example prompts shown to users when starting a new conversation\n * These are used as fallback when API-sourced example questions are not available\n */\nconst DEFAULT_EXAMPLE_PROMPTS = [\n  \"What can you help me with?\",\n  \"Explain this document\", \n  \"Summarize key points\",\n  \"Answer my questions\",\n];\n\ninterface ExamplePromptCardProps {\n  /** The prompt text to display */\n  prompt: string;\n  /** Handler called when the prompt is clicked */\n  onClick: (prompt: string) => void;\n}\n\n/**\n * ExamplePromptCard Component\n * \n * Clickable card showing an example prompt that users can select\n * to quickly start a conversation\n */\nconst ExamplePromptCard: React.FC<ExamplePromptCardProps> = ({ prompt, onClick }) => {\n  return (\n    <button\n      onClick={() => onClick(prompt)}\n      className={cn(\n        \"text-left bg-card border border-border rounded-lg\",\n        \"hover:border-accent hover:shadow-sm transition-all\",\n        \"text-card-foreground\",\n        \"p-2.5\",\n        \"text-xs\",\n        \"min-h-[50px] flex items-center\",\n        \"w-full\" // Ensures button takes full width of grid cell\n      )}\n    >\n      {prompt}\n    </button>\n  );\n};\n\ninterface WelcomeMessageProps {\n  /** Handler called when an example prompt is clicked */\n  onPromptClick: (prompt: string) => void;\n}\n\n/**\n * WelcomeMessage Component\n * \n * Displays a welcome screen when no messages exist in the conversation.\n * Shows the agent name, welcome text, and example prompts.\n * Fetches agent-specific example questions from API with fallback to defaults.\n * Uses Framer Motion for smooth animations.\n */\nconst WelcomeMessage: React.FC<WelcomeMessageProps> = ({ onPromptClick }) => {\n  const { currentAgent } = useAgentStore();\n  const [exampleQuestions, setExampleQuestions] = useState<string[]>(DEFAULT_EXAMPLE_PROMPTS);\n  const [loading, setLoading] = useState(false);\n  \n  /**\n   * Fetch agent settings to get custom example questions\n   */\n  useEffect(() => {\n    const fetchExampleQuestions = async () => {\n      if (!currentAgent) {\n        return;\n      }\n\n      // If we already have example questions from settings, use them\n      if (currentAgent.settings?.example_questions && currentAgent.settings.example_questions.length > 0) {\n        setExampleQuestions(currentAgent.settings.example_questions);\n        return;\n      }\n\n      setLoading(true);\n      try {\n        const client = getClient();\n        const response = await client.getAgentSettings(currentAgent.id);\n        const settings = response.data || response;\n        \n        // Use API example questions if available, otherwise keep defaults\n        if (settings.example_questions && settings.example_questions.length > 0) {\n          setExampleQuestions(settings.example_questions);\n          \n          logger.info('UI', 'Loaded custom example questions from API', {\n            agentId: currentAgent.id,\n            questionCount: settings.example_questions.length\n          });\n        } else {\n          logger.info('UI', 'No custom example questions found, using defaults', {\n            agentId: currentAgent.id\n          });\n        }\n      } catch (error) {\n        logger.warn('UI', 'Failed to load agent settings for example questions', {\n          agentId: currentAgent.id,\n          error: error instanceof Error ? error.message : String(error)\n        });\n        // Keep default questions on error\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchExampleQuestions();\n  }, [currentAgent]);\n  \n  return (\n    <div className={cn(\n      \"flex flex-col items-center justify-center h-full py-8\",\n      \"px-4 md:px-8\"\n    )}>\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className={cn(\n          \"text-center w-full\",\n          \"max-w-sm sm:max-w-md md:max-w-lg\"\n        )}\n      >\n        {/* Agent Avatar */}\n        <div className=\"w-16 h-16 rounded-full flex items-center justify-center mb-6 mx-auto overflow-hidden bg-accent\">\n          {currentAgent?.settings?.chatbot_avatar ? (\n            <img \n              src={currentAgent.settings.chatbot_avatar} \n              alt={`${currentAgent.project_name} avatar`} \n              className=\"w-16 h-16 rounded-full object-cover\"\n            />\n          ) : (\n            <Bot className=\"w-8 h-8 text-muted-foreground\" />\n          )}\n        </div>\n        \n        {/* Welcome Text */}\n        <h3 className={cn(\n          \"font-semibold text-foreground mb-2\",\n          \"text-lg sm:text-xl md:text-2xl\"\n        )}>\n          Welcome to {currentAgent?.project_name || 'CustomGPT'}!\n        </h3>\n        <p className={cn(\n          \"text-muted-foreground mb-6 sm:mb-8\",\n          \"text-sm sm:text-base\"\n        )}>\n          I&apos;m here to help answer your questions and assist with your tasks. How can I help you today?\n        </p>\n        \n        {/* Example Prompts */}\n        <div className={cn(\n          \"grid gap-2 sm:gap-3 w-full\",\n          \"grid-cols-2\",\n          \"max-w-full sm:max-w-md md:max-w-lg\",\n          \"auto-cols-fr\" // Ensures equal column widths\n        )}>\n          {exampleQuestions.map((prompt, idx) => (\n            <motion.div\n              key={`${currentAgent?.id}-${idx}`} // Include agent ID to force re-render on agent change\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3, delay: 0.1 + (idx * 0.1) }}\n            >\n              <ExamplePromptCard\n                prompt={prompt}\n                onClick={onPromptClick}\n              />\n            </motion.div>\n          ))}\n        </div>\n        \n        {/* Loading indicator for example questions */}\n        {loading && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className=\"mt-4\"\n          >\n            <p className=\"text-xs text-muted-foreground\">Loading custom questions...</p>\n          </motion.div>\n        )}\n      </motion.div>\n    </div>\n  );\n};\n\ninterface MessageAreaProps {\n  /** Additional CSS classes for styling */\n  className?: string;\n}\n\n/**\n * MessageArea Component\n * \n * Scrollable area that displays all messages in the current conversation.\n * Handles:\n * - Message rendering with streaming support\n * - Auto-scrolling to latest messages\n * - Citation click handling\n * - Error display\n * - Welcome message when empty\n * - Loading states with typing indicator\n */\nconst MessageArea: React.FC<MessageAreaProps> = ({ className }) => {\n  const { \n    messages, \n    streamingMessage, \n    isStreaming,\n    error,\n    sendMessage,\n    updateMessageFeedback,\n    loading,\n    clearError,\n    setMessagesForConversation\n  } = useMessageStore();\n  const { currentConversation } = useConversationStore();\n  const { currentAgent } = useAgentStore();\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMessages, setIsLoadingMessages] = React.useState(false);\n  const [prevConversationId, setPrevConversationId] = React.useState<string | null>(null);\n  \n  // Citation modal state - tracks which citation is being viewed\n  const [selectedCitationId, setSelectedCitationId] = React.useState<number | string | null>(null);\n  const [citationModalOpen, setCitationModalOpen] = React.useState(false);\n  \n  // Citation preview state\n  const [previewCitationId, setPreviewCitationId] = React.useState<string | null>(null);\n  const [previewModalOpen, setPreviewModalOpen] = React.useState(false);\n  \n  // Check if we're in free trial mode by looking at localStorage\n  const [isFreeTrialMode, setIsFreeTrialMode] = React.useState(false);\n  \n  React.useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const freeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n      setIsFreeTrialMode(freeTrialFlag === 'true');\n    }\n  }, []);\n  \n  const conversationMessages = currentConversation \n    ? messages.get(currentConversation.id.toString()) || []\n    : [];\n  \n  // Detect conversation change\n  useEffect(() => {\n    if (currentConversation && currentConversation.id.toString() !== prevConversationId) {\n      setIsLoadingMessages(true);\n      setPrevConversationId(currentConversation.id.toString());\n      \n      // Set a timeout to hide loading after a reasonable time\n      const timeout = setTimeout(() => {\n        setIsLoadingMessages(false);\n      }, 1000);\n      \n      return () => clearTimeout(timeout);\n    }\n  }, [currentConversation, prevConversationId]);\n  \n  // Hide loading when messages arrive OR when message loading completes\n  useEffect(() => {\n    if (isLoadingMessages && (conversationMessages.length > 0 || !loading)) {\n      setIsLoadingMessages(false);\n    }\n  }, [conversationMessages, isLoadingMessages, loading]);\n  \n  /**\n   * Auto-scroll effect\n   * Automatically scrolls to the bottom when new messages arrive\n   * or when streaming messages are updated\n   * \n   * Uses instant scroll for conversation switches to avoid annoying\n   * scroll animations when clicking on past chats with many messages.\n   * Uses smooth scroll for new messages and streaming updates.\n   */\n  useEffect(() => {\n    if (scrollRef.current) {\n      // Use instant scroll when loading messages (conversation switch)\n      // Use smooth scroll for real-time message additions and streaming\n      const scrollBehavior = isLoadingMessages ? 'auto' : 'smooth';\n      \n      scrollRef.current.scrollTo({\n        top: scrollRef.current.scrollHeight,\n        behavior: scrollBehavior,\n      });\n    }\n  }, [conversationMessages, streamingMessage, isLoadingMessages]);\n  \n  const handleExamplePrompt = (prompt: string) => {\n    // Check if in free trial mode\n    if (isFreeTrialMode) {\n      toast.error('Free Trial Limitation', {\n        description: 'Sending messages is not available in free trial mode. Please use your own API key to send messages.',\n        duration: 5000,\n      });\n      return;\n    }\n    \n    logger.info('UI', 'Example prompt clicked', { prompt });\n    sendMessage(prompt);\n  };\n  \n  const handleCitationClick = (citation: Citation) => {\n    logger.info('UI', 'Citation clicked', {\n      citationId: citation.id,\n      citationIndex: citation.index,\n      citationTitle: citation.title\n    });\n    \n    // Open citation details modal with the citation ID\n    if (citation.id) {\n      setSelectedCitationId(citation.id);\n      setCitationModalOpen(true);\n    }\n  };\n  \n  const handlePreviewClick = (citation: Citation) => {\n    logger.info('UI', 'Citation preview requested', {\n      citationId: citation.id,\n      citationTitle: citation.title\n    });\n    \n    // Open preview modal with the citation ID\n    if (citation.id) {\n      setPreviewCitationId(citation.id);\n      setPreviewModalOpen(true);\n    }\n  };\n  \n  const handleMessageFeedback = async (messageId: string, feedback: 'like' | 'dislike') => {\n    logger.info('UI', 'Message feedback provided', {\n      messageId,\n      feedback\n    });\n    \n    // Call the message store to update feedback\n    await updateMessageFeedback(messageId, feedback);\n  };\n  \n  return (\n    <div\n      ref={scrollRef}\n      className={cn(\n        'flex-1 overflow-y-auto scroll-smooth',\n        'bg-gradient-to-b from-muted/50 to-background',\n        className\n      )}\n    >\n      {/* Error Message */}\n      {error && (\n        <div className=\"p-4 m-4\">\n          <MessageErrorDisplay \n            error={error}\n            onRetry={() => {\n              // Clear error first\n              clearError();\n              \n              // Then retry sending last message if applicable\n              if (currentConversation) {\n                const conversationMessages = messages.get(currentConversation.id.toString()) || [];\n                const lastUserMessage = conversationMessages\n                  .filter(m => m.role === 'user')\n                  .pop();\n                \n                if (lastUserMessage) {\n                  // Remove the error message before retrying\n                  const filteredMessages = conversationMessages.filter(m => m.id !== lastUserMessage.id);\n                  setMessagesForConversation(\n                    currentConversation.id.toString(), \n                    filteredMessages\n                  );\n                  \n                  // Retry sending the message\n                  sendMessage(lastUserMessage.content);\n                }\n              }\n            }}\n          />\n        </div>\n      )}\n\n      {/* Loading state when switching conversations */}\n      {isLoadingMessages && (\n        <LoadingOverlay \n          visible={true} \n          message={conversationMessages.length > 0 ? \"Loading conversation...\" : \"Switching to conversation...\"}\n          blur={true}\n        />\n      )}\n      \n      {/* Message skeleton fallback for empty conversations */}\n      {isLoadingMessages && conversationMessages.length === 0 && !isStreaming && (\n        <div className=\"space-y-0 opacity-30\">\n          <MessageSkeleton isAssistant={false} lines={2} />\n          <MessageSkeleton isAssistant={true} lines={3} />\n          <MessageSkeleton isAssistant={false} lines={1} />\n          <MessageSkeleton isAssistant={true} lines={4} />\n        </div>\n      )}\n\n      {/* Welcome Message */}\n      {conversationMessages.length === 0 && !streamingMessage && !error && !isLoadingMessages && (\n        <WelcomeMessage onPromptClick={handleExamplePrompt} />\n      )}\n      \n      {/* Messages */}\n      {conversationMessages.length > 0 && (\n        <div className=\"space-y-0\">\n          {conversationMessages.map((message, index) => (\n            <Message\n              key={message.id}\n              message={message}\n              agent={currentAgent}\n              isLast={index === conversationMessages.length - 1}\n              onCitationClick={handleCitationClick}\n              onPreviewClick={handlePreviewClick}\n              onFeedback={(feedback) => handleMessageFeedback(message.id, feedback)}\n            />\n          ))}\n        </div>\n      )}\n      \n      {/* Streaming Message */}\n      {streamingMessage && (\n        <Message\n          message={streamingMessage}\n          agent={currentAgent}\n          isStreaming={true}\n          isLast={true}\n          onCitationClick={handleCitationClick}\n          onPreviewClick={handlePreviewClick}\n        />\n      )}\n      \n      {/* Typing Indicator */}\n      {isStreaming && !streamingMessage && (\n        <TypingIndicator />\n      )}\n      \n      {/* Citation Details Modal */}\n      {selectedCitationId && (\n        <CitationDetailsModal\n          isOpen={citationModalOpen}\n          onClose={() => {\n            setCitationModalOpen(false);\n            setSelectedCitationId(null);\n          }}\n          citationId={selectedCitationId}\n          projectId={currentAgent?.id}\n        />\n      )}\n      \n      {/* Citation File Preview Modal */}\n      {previewCitationId && (\n        <CitationFilePreview\n          isOpen={previewModalOpen}\n          onClose={() => {\n            setPreviewModalOpen(false);\n            setPreviewCitationId(null);\n          }}\n          citationId={previewCitationId}\n          fileName={`Citation_${previewCitationId}.txt`}\n        />\n      )}\n    </div>\n  );\n};\n\ninterface ChatHeaderProps {\n  /** Deployment mode affects header layout */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler for agent settings button */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Current conversation ID */\n  currentConversationId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback to create new conversation */\n  onCreateConversation?: () => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n}\n\n/**\n * ChatHeader Component\n * \n * Header bar for the chat interface. Layout changes based on deployment mode:\n * - Standalone: Full header with agent selector\n * - Widget/Floating: Compact header with close button\n * \n * Shows agent status (online/offline) and provides agent switching\n */\nconst ChatHeader: React.FC<ChatHeaderProps> = ({ \n  mode = 'standalone', \n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  conversationRefreshKey\n}) => {\n  const { currentAgent } = useAgentStore();\n  const { isMobile } = useBreakpoint();\n  \n  if (mode === 'widget' || mode === 'floating') {\n    return (\n      <header className=\"border-b border-border bg-background\">\n        {/* Conversation Manager */}\n        {enableConversationManagement && sessionId && (\n          <div className=\"px-4 py-2 border-b border-border\">\n            <ConversationManager\n              sessionId={sessionId}\n              maxConversations={maxConversations}\n              currentConversationId={currentConversationId}\n              onConversationChange={onConversationChange}\n              onCreateConversation={onCreateConversation}\n              className=\"w-full\"\n              refreshKey={conversationRefreshKey}\n            />\n          </div>\n        )}\n        \n        {/* Header Content */}\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            <div className=\"w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0\">\n              <img \n                src=\"/logo.png\" \n                alt=\"CustomGPT.ai Logo\" \n                className=\"w-8 h-8 rounded-lg\"\n              />\n            </div>\n            <div className=\"min-w-0 flex-1\">\n              <h2 className=\"font-semibold text-foreground truncate\">\n                {currentAgent?.project_name || 'CustomGPT Assistant'}\n              </h2>\n              <p className=\"text-xs text-muted-foreground\">\n                {currentAgent?.is_chat_active ? 'Online' : 'Offline'}\n              </p>\n            </div>\n          </div>\n          \n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"p-1.5 rounded-lg hover:bg-accent hover:text-accent-foreground transition-colors flex-shrink-0\"\n            >\n              <span className=\"sr-only\">Close</span>\n              ×\n            </button>\n          )}\n        </div>\n      </header>\n    );\n  }\n  \n  // For standalone mode, show agent selector header (but not on mobile)\n  if (mode === 'standalone' && !isMobile) {\n    return (\n      <header className=\"flex items-center justify-between px-4 py-3 border-b border-border bg-background\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-lg bg-brand-500 flex items-center justify-center\">\n            <Bot className=\"w-5 h-5 text-white\" />\n          </div>\n          <h1 className=\"text-lg font-semibold text-foreground\">\n            Agent Chat\n          </h1>\n        </div>\n        \n        <div className=\"flex-1 max-w-xs ml-4\">\n          <AgentSelector\n            onSettingsClick={onAgentSettings}\n            className=\"w-full\"\n          />\n        </div>\n      </header>\n    );\n  }\n  \n  return null;\n};\n\ninterface ChatContainerProps {\n  /** Deployment mode - affects layout and styling */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Additional CSS classes */\n  className?: string;\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler when agent settings are requested */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Specific conversation thread to load */\n  threadId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback when message is sent/received */\n  onMessage?: (message: any) => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n  /** Mobile optimization mode */\n  isMobile?: boolean;\n}\n\n/**\n * ChatContainer Component - Main Export\n * \n * The primary chat interface component. Can be deployed in three modes:\n * \n * 1. Standalone: Full-page chat interface\n *    - Use when chat is the main feature\n *    - No fixed dimensions, fills container\n * \n * 2. Widget: Embedded chat widget\n *    - Use for embedding in existing pages\n *    - Fixed dimensions with shadow\n * \n * 3. Floating: Floating chat bubble\n *    - Use for overlay chat interfaces\n *    - Fixed dimensions with stronger shadow\n * \n * @example\n * // Standalone mode\n * <ChatContainer mode=\"standalone\" />\n * \n * @example\n * // Widget mode with close handler\n * <ChatContainer \n *   mode=\"widget\" \n *   onClose={() => setShowChat(false)}\n * />\n */\nexport const ChatContainer: React.FC<ChatContainerProps> = ({ \n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  conversationRefreshKey,\n  isMobile = false\n}) => {\n  const { sendMessage, isStreaming, cancelStreaming } = useMessageStore();\n  const { fetchAgents, agents, currentAgent } = useAgentStore();\n  const { currentConversation } = useConversationStore();\n  \n  // Get widget instance from context\n  const widget = useWidgetSafe();\n  \n  // Track current conversation for the widget\n  const [currentConversationId, setCurrentConversationId] = React.useState<string | null>(null);\n  \n  // Voice modal state\n  const [isVoiceModalOpen, setIsVoiceModalOpen] = React.useState(false);\n  const [voiceError, setVoiceError] = React.useState<string | null>(null);\n  \n  // Get demo store state\n  const { isDemoMode, openAIApiKey } = useDemoStore();\n  \n  // Check if we're in free trial mode by looking at localStorage\n  const [isFreeTrialMode, setIsFreeTrialMode] = React.useState(false);\n  \n  React.useEffect(() => {\n    if (mode === 'standalone' && typeof window !== 'undefined') {\n      const freeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n      setIsFreeTrialMode(freeTrialFlag === 'true');\n    }\n  }, [mode]);\n  \n  // Check if OpenAI key is available\n  const checkVoiceAvailability = () => {\n    // In demo mode, check if user has provided OpenAI key\n    if (isDemoMode) {\n      if (!openAIApiKey) {\n        return {\n          available: false,\n          error: 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n        };\n      }\n      return { available: true };\n    }\n    \n    // In normal mode, check if OpenAI key is in environment\n    // We can't check server-side env vars from client, so we'll let the API handle it\n    return { available: true };\n  };\n  \n  // Handle voice button click\n  const handleVoiceClick = () => {\n    const { available, error } = checkVoiceAvailability();\n    \n    if (!available) {\n      toast.error(error || 'Voice feature is not available');\n      return;\n    }\n    \n    setIsVoiceModalOpen(true);\n  };\n  \n  // Handle conversation management\n  const handleConversationChange = (conversation: any) => {\n    setCurrentConversationId(conversation.id);\n    onConversationChange?.(conversation);\n    // The widget will handle the actual conversation switch\n    if (widget) {\n      widget.switchConversation(conversation.id);\n    }\n  };\n  \n  const handleCreateConversation = () => {\n    if (widget) {\n      const newConv = widget.createConversation();\n      if (newConv) {\n        setCurrentConversationId(newConv.id);\n      } else {\n        // Show user-friendly message when conversation limit is reached\n        const maxConversations = widget.configuration?.maxConversations || 5;\n        toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n      }\n    }\n  };\n\n  /**\n   * Agent initialization effect\n   * Fetches available agents when the component first mounts\n   * Only runs if agents haven't been loaded yet\n   */\n  useEffect(() => {\n    const initializeAgents = async () => {\n      // Only fetch if we don't have agents and no current agent\n      if (agents.length === 0 && !currentAgent) {\n        logger.info('UI', 'Initializing agents on ChatContainer mount');\n        try {\n          await fetchAgents();\n          logger.info('UI', 'Agents initialized successfully', {\n            agentCount: agents.length\n          });\n        } catch (error) {\n          logger.error('UI', 'Failed to initialize agents', error, {\n            errorMessage: error instanceof Error ? error.message : String(error)\n          });\n          console.error('Failed to initialize agents:', error);\n        }\n      } else {\n        logger.info('UI', 'Agents already initialized', {\n          agentCount: agents.length,\n          hasCurrentAgent: !!currentAgent,\n          currentAgentName: currentAgent?.project_name\n        });\n      }\n    };\n\n    initializeAgents();\n  }, [agents.length, currentAgent, fetchAgents]); // Add dependencies for exhaustive deps\n  \n  const handleSendMessage = async (content: string, files?: File[]) => {\n    // Check if in free trial mode\n    if (isFreeTrialMode) {\n      toast.error('Free Trial Limitation', {\n        description: 'Sending messages is not available in free trial mode. Please use your own API key to send messages.',\n        duration: 5000,\n      });\n      return;\n    }\n    \n    logger.info('UI', 'Sending message from ChatContainer', {\n      contentLength: content.length,\n      hasFiles: files && files.length > 0,\n      fileCount: files?.length || 0,\n      currentAgent: currentAgent?.project_name,\n      agentId: currentAgent?.id\n    });\n    \n    try {\n      await sendMessage(content, files);\n      logger.info('UI', 'Message sent successfully');\n    } catch (error) {\n      logger.error('UI', 'Failed to send message from ChatContainer', error, {\n        errorMessage: error instanceof Error ? error.message : String(error),\n        isAuthError: error instanceof Error && (error.message.includes('403') || error.message.includes('unauthorized'))\n      });\n      console.error('Failed to send message:', error);\n    }\n  };\n  \n  const handleStopGeneration = () => {\n    logger.info('UI', 'User cancelled streaming generation');\n    cancelStreaming();\n  };\n  \n  const handleAgentSettings = (agent: Agent) => {\n    logger.info('UI', 'Agent settings requested', {\n      agentId: agent.id,\n      agentName: agent.project_name\n    });\n    onAgentSettings?.(agent);\n  };\n  \n  return (\n    <div\n      className={cn(\n        'flex flex-col bg-background',\n        mode === 'standalone' && 'h-full',\n        mode === 'widget' && !isMobile && 'h-[600px] w-[400px] rounded-lg shadow-xl border border-border',\n        mode === 'floating' && !isMobile && 'h-[600px] w-[400px] rounded-lg shadow-2xl border border-border',\n        isMobile && 'h-full w-full',\n        className\n      )}\n    >\n      <ChatHeader \n        mode={mode} \n        onClose={onClose}\n        onAgentSettings={handleAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        currentConversationId={currentConversationId || currentConversation?.id.toString()}\n        onConversationChange={handleConversationChange}\n        onCreateConversation={handleCreateConversation}\n        conversationRefreshKey={conversationRefreshKey}\n      />\n      <MessageArea className=\"flex-1 overflow-y-auto\" />\n      <div className={cn(\n        \"mt-auto\",\n        isMobile && mode === 'standalone' ? \"pb-[30px]\" : \"\"\n      )}>\n        <ChatInput\n          onSend={handleSendMessage}\n          disabled={isStreaming || isFreeTrialMode}\n          placeholder={\n            isFreeTrialMode \n              ? \"Free trial mode - Use your API key to send messages\" \n              : isStreaming \n                ? \"AI is thinking...\" \n                : \"Send a message...\"\n          }\n          onVoiceClick={handleVoiceClick}\n          isMobile={isMobile}\n        />\n      </div>\n      \n      {/* Branding Footer */}\n      <div className={cn(\n        \"px-4 py-2 border-t border-border bg-muted\",\n        mode === 'standalone' && \"flex items-center justify-center\"\n      )}>\n        <a\n          href=\"https://customgpt.ai\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={cn(\n            \"text-xs text-muted-foreground hover:text-foreground transition-colors\",\n            mode === 'standalone' ? \"inline-flex items-center\" : \"block text-center\"\n          )}\n        >\n          Powered by CustomGPT.ai\n        </a>\n      </div>\n      \n      {/* Voice Modal */}\n      {currentAgent && (\n        <VoiceModal\n          isOpen={isVoiceModalOpen}\n          onClose={() => setIsVoiceModalOpen(false)}\n          projectId={currentAgent.id.toString()}\n          projectName={currentAgent.project_name}\n        />\n      )}\n    </div>\n  );\n};","import React from 'react';\nimport { X, Calendar, User, Hash, Clock, AlertCircle, Copy, Download, Share2 } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { toast } from 'sonner';\nimport type { Conversation } from '@/types';\nimport { Button } from '@/components/ui/button';\nimport { formatTimestamp, cn } from '@/lib/utils';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\ninterface ConversationDetailsModalProps {\n  conversation: Conversation | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onExport?: (conversation: Conversation) => void;\n  onShare?: (conversation: Conversation) => void;\n}\n\nexport const ConversationDetailsModal: React.FC<ConversationDetailsModalProps> = ({\n  conversation,\n  isOpen,\n  onClose,\n  onExport,\n  onShare,\n}) => {\n  const { isMobile } = useBreakpoint();\n  \n  if (!isOpen || !conversation) return null;\n\n  const copyToClipboard = (text: string, label: string) => {\n    navigator.clipboard.writeText(text);\n    toast.success(`${label} copied to clipboard`);\n  };\n\n  const formatFullTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'short'\n    });\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black bg-opacity-50 z-50\"\n            onClick={onClose}\n          />\n\n          {/* Modal */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            className={cn(\n              \"fixed bg-background shadow-xl z-50\",\n              isMobile \n                ? \"inset-x-0 bottom-0 top-20 rounded-t-xl flex flex-col\" \n                : \"inset-x-0 top-[10%] mx-auto max-w-2xl rounded-lg max-h-[80vh] overflow-hidden\"\n            )}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {/* Header */}\n            <div className={cn(\n              \"flex items-center justify-between border-b border-border bg-background/95 backdrop-blur-sm flex-shrink-0\",\n              isMobile ? \"px-4 py-4\" : \"p-6\"\n            )}>\n              <h2 className={cn(\n                \"font-semibold text-foreground\",\n                isMobile ? \"text-base\" : \"text-xl\"\n              )}>Conversation Details</h2>\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={onClose}\n                className={cn(\n                  isMobile ? \"h-9 w-9 touch-target\" : \"h-8 w-8\"\n                )}\n              >\n                <X className={cn(\n                  isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n                )} />\n              </Button>\n            </div>\n\n            {/* Content */}\n            <div className={cn(\n              \"overflow-y-auto\",\n              isMobile \n                ? \"flex-1 px-4 py-4 pb-6 safe-area-pb space-y-6\" \n                : \"p-6 space-y-6 max-h-[calc(80vh-200px)]\"\n            )}>\n              {/* Basic Information */}\n              <div>\n                <h3 className={cn(\n                  \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                  isMobile ? \"text-xs\" : \"text-sm\"\n                )}>\n                  Basic Information\n                </h3>\n                <div className={cn(\n                  \"bg-muted rounded-lg space-y-4\",\n                  isMobile ? \"p-4\" : \"p-4 space-y-3\"\n                )}>\n                  {/* Conversation Name */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Conversation Name</span>\n                    </div>\n                    <span className={cn(\n                      \"text-foreground font-medium break-words\",\n                      isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                    )}>{conversation.name}</span>\n                  </div>\n\n                  {/* Conversation ID */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Conversation ID</span>\n                    </div>\n                    <div className={cn(\n                      \"flex items-center gap-2\",\n                      isMobile ? \"ml-6\" : \"\"\n                    )}>\n                      <span className={cn(\n                        \"text-foreground font-mono\",\n                        isMobile ? \"text-xs\" : \"text-sm\"\n                      )}>{conversation.id}</span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className={cn(\n                          isMobile ? \"h-8 w-8 touch-target\" : \"h-6 w-6\"\n                        )}\n                        onClick={() => copyToClipboard(conversation.id.toString(), 'Conversation ID')}\n                      >\n                        <Copy className={cn(\n                          isMobile ? \"h-4 w-4\" : \"h-3 w-3\"\n                        )} />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Session ID */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Session ID</span>\n                    </div>\n                    <div className={cn(\n                      \"flex items-center gap-2\",\n                      isMobile ? \"ml-6\" : \"\"\n                    )}>\n                      <span \n                        className={cn(\n                          \"text-foreground font-mono break-all\",\n                          isMobile ? \"text-sm\" : \"text-sm truncate max-w-[300px]\"\n                        )} \n                        title={conversation.session_id}\n                      >\n                        {conversation.session_id}\n                      </span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className={cn(\n                          isMobile ? \"h-8 w-8 touch-target flex-shrink-0\" : \"h-6 w-6\"\n                        )}\n                        onClick={() => copyToClipboard(conversation.session_id, 'Session ID')}\n                      >\n                        <Copy className={cn(\n                          isMobile ? \"h-4 w-4\" : \"h-3 w-3\"\n                        )} />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Project ID */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Project ID</span>\n                    </div>\n                    <span className={cn(\n                      \"text-foreground\",\n                      isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                    )}>{conversation.project_id}</span>\n                  </div>\n\n                  {/* Message Count */}\n                  {conversation.message_count !== undefined && (\n                    <div className={cn(\n                      isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                    )}>\n                      <div className=\"flex items-center gap-2\">\n                        <Hash className={cn(\n                          \"text-muted-foreground\",\n                          isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                        )} />\n                        <span className={cn(\n                          \"font-medium text-foreground\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>Message Count</span>\n                      </div>\n                      <span className={cn(\n                        \"text-foreground\",\n                        isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                      )}>{conversation.message_count} messages</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Timeline */}\n              <div>\n                <h3 className={cn(\n                  \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                  isMobile ? \"text-xs\" : \"text-sm\"\n                )}>\n                  Timeline\n                </h3>\n                <div className={cn(\n                  \"bg-muted rounded-lg space-y-4\",\n                  isMobile ? \"p-4\" : \"p-4 space-y-3\"\n                )}>\n                  {/* Created At */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Created At</span>\n                    </div>\n                    <div className={cn(\n                      isMobile ? \"ml-6 space-y-1\" : \"text-right\"\n                    )}>\n                      <span className={cn(\n                        \"text-foreground block\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>{formatFullTimestamp(conversation.created_at)}</span>\n                      <span className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"text-xs\" : \"text-xs\"\n                      )}>({formatTimestamp(conversation.created_at)})</span>\n                    </div>\n                  </div>\n\n                  {/* Last Updated */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Last Updated</span>\n                    </div>\n                    <div className={cn(\n                      isMobile ? \"ml-6 space-y-1\" : \"text-right\"\n                    )}>\n                      <span className={cn(\n                        \"text-foreground block\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>{formatFullTimestamp(conversation.updated_at)}</span>\n                      <span className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"text-xs\" : \"text-xs\"\n                      )}>({formatTimestamp(conversation.updated_at)})</span>\n                    </div>\n                  </div>\n\n                  {/* Deleted At */}\n                  {conversation.deleted_at && (\n                    <div className={cn(\n                      isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                    )}>\n                      <div className=\"flex items-center gap-2\">\n                        <AlertCircle className={cn(\n                          \"text-red-400\",\n                          isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                        )} />\n                        <span className={cn(\n                          \"font-medium text-red-700\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>Deleted At</span>\n                      </div>\n                      <div className={cn(\n                        isMobile ? \"ml-6 space-y-1\" : \"text-right\"\n                      )}>\n                        <span className={cn(\n                          \"text-red-900 block\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>{formatFullTimestamp(conversation.deleted_at)}</span>\n                        <span className={cn(\n                          \"text-red-500\",\n                          isMobile ? \"text-xs\" : \"text-xs\"\n                        )}>({formatTimestamp(conversation.deleted_at)})</span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* User Information */}\n              {conversation.created_by && (\n                <div>\n                  <h3 className={cn(\n                    \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                    isMobile ? \"text-xs\" : \"text-sm\"\n                  )}>\n                    User Information\n                  </h3>\n                  <div className={cn(\n                    \"bg-accent rounded-lg\",\n                    isMobile ? \"p-4\" : \"p-4\"\n                  )}>\n                    <div className={cn(\n                      isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                    )}>\n                      <div className=\"flex items-center gap-2\">\n                        <User className={cn(\n                          \"text-muted-foreground\",\n                          isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                        )} />\n                        <span className={cn(\n                          \"font-medium text-foreground\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>Created By</span>\n                      </div>\n                      <span className={cn(\n                        \"text-foreground\",\n                        isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                      )}>User ID: {conversation.created_by}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Actions */}\n              <div>\n                <h3 className={cn(\n                  \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                  isMobile ? \"text-xs\" : \"text-sm\"\n                )}>\n                  Actions\n                </h3>\n                <div className={cn(\n                  \"flex gap-3\",\n                  isMobile ? \"flex-col space-y-3\" : \"flex-row\"\n                )}>\n                  {onExport && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => onExport(conversation)}\n                      className={cn(\n                        \"flex items-center gap-2\",\n                        isMobile ? \"w-full h-11 touch-target justify-center\" : \"\"\n                      )}\n                    >\n                      <Download className={cn(\n                        isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        isMobile ? \"text-sm\" : \"\"\n                      )}>Export Conversation</span>\n                    </Button>\n                  )}\n                  {onShare && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => onShare(conversation)}\n                      className={cn(\n                        \"flex items-center gap-2\",\n                        isMobile ? \"w-full h-11 touch-target justify-center\" : \"\"\n                      )}\n                    >\n                      <Share2 className={cn(\n                        isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        isMobile ? \"text-sm\" : \"\"\n                      )}>Share Conversation</span>\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n\n            {/* Footer */}\n            {!isMobile && (\n              <div className=\"p-6 border-t border-border bg-accent\">\n                <div className=\"flex justify-end\">\n                  <Button onClick={onClose}>\n                    Close\n                  </Button>\n                </div>\n              </div>\n            )}\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};","import React, { useState } from 'react';\nimport { AlertTriangle, Trash2, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\ninterface DeleteConversationDialogProps {\n  isOpen: boolean;\n  conversationName: string;\n  messageCount?: number;\n  onConfirm: () => Promise<void>;\n  onCancel: () => void;\n}\n\nexport const DeleteConversationDialog: React.FC<DeleteConversationDialogProps> = ({\n  isOpen,\n  conversationName,\n  messageCount,\n  onConfirm,\n  onCancel,\n}) => {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { isMobile } = useBreakpoint();\n\n  const handleConfirm = async () => {\n    setIsDeleting(true);\n    setError(null);\n    \n    try {\n      await onConfirm();\n    } catch (err: any) {\n      console.error('Delete failed:', err);\n      \n      // Parse error message based on status code\n      let errorMessage = 'Failed to delete conversation';\n      \n      if (err.status === 400) {\n        errorMessage = 'Invalid request. Please try again.';\n      } else if (err.status === 401) {\n        errorMessage = 'Authentication failed. Please refresh the page and try again.';\n      } else if (err.status === 404) {\n        errorMessage = 'Conversation not found. It may have already been deleted.';\n      } else if (err.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      setIsDeleting(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-black bg-opacity-50\"\n            onClick={!isDeleting ? onCancel : undefined}\n          />\n\n          {/* Dialog */}\n          <motion.div\n            initial={{ opacity: 0, scale: isMobile ? 1 : 0.95, y: isMobile ? '100%' : 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: isMobile ? 1 : 0.95, y: isMobile ? '100%' : 0 }}\n            className={cn(\n              \"relative bg-background shadow-xl\",\n              isMobile \n                ? \"fixed inset-x-0 bottom-0 rounded-t-xl safe-area-pb\" \n                : \"w-full max-w-md rounded-lg\"\n            )}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className={cn(\n              isMobile ? \"p-4 pb-6\" : \"p-6\"\n            )}>\n              {/* Header */}\n              <div className={cn(\n                \"flex items-start\",\n                isMobile ? \"gap-3\" : \"gap-4\"\n              )}>\n                <div className={cn(\n                  \"bg-red-100 rounded-full flex-shrink-0\",\n                  isMobile ? \"p-2.5\" : \"p-3\"\n                )}>\n                  <AlertTriangle className={cn(\n                    \"text-red-600\",\n                    isMobile ? \"w-5 h-5\" : \"w-6 h-6\"\n                  )} />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className={cn(\n                    \"font-semibold text-foreground\",\n                    isMobile ? \"text-base\" : \"text-lg\"\n                  )}>\n                    Delete Conversation\n                  </h3>\n                  <p className={cn(\n                    \"mt-2 text-muted-foreground\",\n                    isMobile ? \"text-sm\" : \"text-sm\"\n                  )}>\n                    Are you sure you want to delete <strong>&ldquo;{conversationName}&rdquo;</strong>?\n                  </p>\n                  \n                  {messageCount !== undefined && messageCount > 0 && (\n                    <p className={cn(\n                      \"mt-2 text-muted-foreground\",\n                      isMobile ? \"text-sm\" : \"text-sm\"\n                    )}>\n                      This conversation contains {messageCount} message{messageCount !== 1 ? 's' : ''}.\n                    </p>\n                  )}\n                  \n                  <div className={cn(\n                    \"mt-3 bg-red-50 rounded-lg\",\n                    isMobile ? \"p-3\" : \"p-3\"\n                  )}>\n                    <p className={cn(\n                      \"text-red-800 font-medium\",\n                      isMobile ? \"text-sm\" : \"text-sm\"\n                    )}>\n                      ⚠️ This action cannot be undone\n                    </p>\n                    <p className={cn(\n                      \"text-red-700 mt-1\",\n                      isMobile ? \"text-xs\" : \"text-xs\"\n                    )}>\n                      All messages and data associated with this conversation will be permanently deleted.\n                    </p>\n                  </div>\n\n                  {/* Error Display */}\n                  {error && (\n                    <div className={cn(\n                      \"mt-3 bg-red-100 border border-red-200 rounded-lg\",\n                      isMobile ? \"p-3\" : \"p-3\"\n                    )}>\n                      <p className={cn(\n                        \"text-red-900 font-medium\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>\n                        Error: {error}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className={cn(\n                \"flex items-center gap-3\",\n                isMobile ? \"mt-6 flex-col-reverse\" : \"mt-6 justify-end\"\n              )}>\n                <Button\n                  variant=\"outline\"\n                  onClick={onCancel}\n                  disabled={isDeleting}\n                  className={cn(\n                    isMobile && \"w-full h-11 touch-target\"\n                  )}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleConfirm}\n                  disabled={isDeleting}\n                  className={cn(\n                    \"min-w-[100px]\",\n                    isMobile && \"w-full h-11 touch-target\"\n                  )}\n                >\n                  {isDeleting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                      Deleting...\n                    </>\n                  ) : (\n                    <>\n                      <Trash2 className={cn(\n                        \"mr-2\",\n                        isMobile ? \"w-4 h-4\" : \"w-4 h-4\"\n                      )} />\n                      Delete\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n      )}\n    </AnimatePresence>\n  );\n};","/**\n * Conversation Sidebar Component\n * \n * Manages the conversation list and provides quick navigation\n * between different chat sessions. Includes conversation management\n * features like create, rename, and delete.\n * \n * Features:\n * - Conversation list with search/filter\n * - Create new conversation\n * - Rename conversations inline\n * - Delete conversations with confirmation\n * - Agent management access\n * - Data source management\n * - Analytics dashboard access\n * - Collapsible sidebar\n * \n * State Management:\n * - Conversations from conversationStore\n * - Current conversation selection\n * - Search/filter state (local)\n * - Collapse state (passed from parent)\n * \n * UI/UX Features:\n * - Hover states and animations\n * - Keyboard shortcuts (future enhancement)\n * - Context menu for conversation actions\n * - Auto-scroll to selected conversation\n * - Responsive design for mobile\n * \n * Features:\n * - Advanced conversation organization with categories and search\n * - Bulk conversation management with export/import capabilities\n * - Customizable sidebar design with responsive layout\n * - Professional conversation management with templates and pinning\n * - Comprehensive conversation history and analytics\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport Link from 'next/link';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  MessageSquare, \n  Plus, \n  MoreHorizontal, \n  Trash2, \n  Edit3, \n  Calendar,\n  Search,\n  X,\n  Bot,\n  Filter,\n  ChevronDown,\n  ChevronUp,\n  Info,\n  Download,\n  Share2,\n  Clock,\n  User\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Conversation } from '@/types';\nimport { useConversationStore, useAgentStore, useMessageStore } from '@/hooks/useWidgetStore';\nimport { cn, formatTimestamp, generateConversationName } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { logger } from '@/lib/logger';\nimport { ConversationDetailsModal } from './ConversationDetailsModal';\nimport { DeleteConversationDialog } from './DeleteConversationDialog';\nimport { ConversationSkeleton, Spinner } from '@/components/ui/loading';\nimport { useDemoModeContext } from '@/contexts/DemoModeContext';\n\n/**\n * Props for individual conversation item\n * \n * @property conversation - Conversation data object\n * @property isSelected - Whether this conversation is currently active\n * @property onSelect - Callback when conversation is clicked\n * @property onDelete - Callback for deleting conversation\n * @property onRename - Callback for renaming conversation\n */\ninterface ConversationItemProps {\n  conversation: Conversation;\n  isSelected: boolean;\n  onSelect: (conversation: Conversation) => void;\n  onDelete: (conversationId: string) => void;\n  onRename: (conversationId: string, newName: string) => void;\n}\n\n/**\n * Individual Conversation Item Component\n * \n * Renders a single conversation in the sidebar with actions.\n * Features inline editing and context menu for management.\n */\nconst ConversationItem: React.FC<ConversationItemProps> = ({\n  conversation,\n  isSelected,\n  onSelect,\n  onDelete,\n  onRename\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editName, setEditName] = useState(conversation.name);\n  const [showMenu, setShowMenu] = useState(false);\n  const [showDetails, setShowDetails] = useState(false);\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  // Close menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setShowMenu(false);\n      }\n    };\n\n    if (showMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [showMenu]);\n\n  // Focus input when editing starts\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n      inputRef.current.select();\n    }\n  }, [isEditing]);\n\n  const handleEdit = () => {\n    setIsEditing(true);\n    setShowMenu(false);\n  };\n\n  const handleSaveEdit = () => {\n    if (editName.trim() && editName.trim() !== conversation.name) {\n      onRename(conversation.id.toString(), editName.trim());\n    }\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSaveEdit();\n    } else if (e.key === 'Escape') {\n      handleCancelEdit();\n    }\n  };\n\n  const handleDelete = () => {\n    setShowDeleteDialog(true);\n    setShowMenu(false);\n  };\n\n  const handleConfirmDelete = async () => {\n    await onDelete(conversation.id.toString());\n    setShowDeleteDialog(false);\n  };\n\n  return (\n    <div\n      className={cn(\n        'group relative p-3 rounded-lg cursor-pointer transition-colors',\n        'hover:bg-accent',\n        isSelected && 'bg-accent/50 hover:bg-accent/70'\n      )}\n      onClick={async () => {\n        if (isEditing || isLoading) return;\n        setIsLoading(true);\n        try {\n          await onSelect(conversation);\n        } finally {\n          setIsLoading(false);\n        }\n      }}\n    >\n      {/* Loading overlay for individual conversation */}\n      {isLoading && (\n        <div className=\"absolute inset-0 bg-background/70 backdrop-blur-sm rounded-lg flex items-center justify-center z-10\">\n          <Spinner size=\"sm\" />\n        </div>\n      )}\n      \n      <div className=\"flex items-start justify-between gap-2\">\n        <div className=\"flex-1 min-w-0\">\n          {isEditing ? (\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={editName}\n              onChange={(e) => setEditName(e.target.value)}\n              onBlur={handleSaveEdit}\n              onKeyDown={handleKeyDown}\n              className=\"w-full px-2 py-1 text-sm font-medium text-foreground bg-background border border-input rounded focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent\"\n              maxLength={100}\n            />\n          ) : (\n            <h3 className=\"font-medium text-foreground text-sm truncate\">\n              {conversation.name}\n            </h3>\n          )}\n          \n          <div className=\"flex items-center gap-2 mt-1 text-xs text-muted-foreground\">\n            <Clock className=\"w-3 h-3\" />\n            <span title={new Date(conversation.updated_at).toLocaleString()}>\n              {formatTimestamp(conversation.updated_at)}\n            </span>\n            {conversation.message_count !== undefined && (\n              <>\n                <span>•</span>\n                <MessageSquare className=\"w-3 h-3\" />\n                <span>{conversation.message_count}</span>\n              </>\n            )}\n          </div>\n          \n          {/* More Details Button */}\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              setShowDetails(!showDetails);\n            }}\n            className=\"flex items-center gap-1 mt-2 text-xs text-muted-foreground hover:text-foreground transition-colors\"\n          >\n            {showDetails ? (\n              <>\n                <ChevronUp className=\"w-3 h-3\" />\n                Hide Details\n              </>\n            ) : (\n              <>\n                <ChevronDown className=\"w-3 h-3\" />\n                More Details\n              </>\n            )}\n          </button>\n          \n          {/* Expandable Details Section */}\n          <AnimatePresence>\n            {showDetails && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                exit={{ opacity: 0, height: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"mt-2 pt-2 border-t border-border\"\n              >\n                <div className=\"space-y-1 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Session ID:</span>\n                    <span className=\"font-mono text-foreground truncate max-w-[150px]\" title={conversation.session_id}>\n                      {conversation.session_id}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Created:</span>\n                    <span className=\"text-foreground\">{formatTimestamp(conversation.created_at)}</span>\n                  </div>\n                  {conversation.deleted_at && (\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-destructive\">Deleted:</span>\n                      <span className=\"text-destructive\">{formatTimestamp(conversation.deleted_at)}</span>\n                    </div>\n                  )}\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Menu Button */}\n        {!isEditing && (\n          <div className=\"relative\" ref={menuRef}>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setShowMenu(!showMenu);\n              }}\n              className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-muted-foreground hover:text-foreground\"\n            >\n              <MoreHorizontal className=\"h-3 w-3\" />\n            </Button>\n\n            {/* Dropdown Menu */}\n            <AnimatePresence>\n              {showMenu && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.95, y: -5 }}\n                  animate={{ opacity: 1, scale: 1, y: 0 }}\n                  exit={{ opacity: 0, scale: 0.95, y: -5 }}\n                  transition={{ duration: 0.1 }}\n                  className=\"absolute right-0 top-6 mt-1 w-40 bg-background border border-border rounded-lg shadow-lg z-50\"\n                >\n                  <div className=\"py-1\">\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setShowDetailsModal(true);\n                        setShowMenu(false);\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-foreground hover:bg-accent\"\n                    >\n                      <Info className=\"w-3 h-3\" />\n                      View Details\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEdit();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-foreground hover:bg-accent\"\n                    >\n                      <Edit3 className=\"w-3 h-3\" />\n                      Rename\n                    </button>\n                    <div className=\"border-t border-border my-1\" />\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDelete();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-destructive hover:bg-destructive/10\"\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                      Delete\n                    </button>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        )}\n      </div>\n\n      {/* Conversation Details Modal */}\n      <ConversationDetailsModal\n        conversation={conversation}\n        isOpen={showDetailsModal}\n        onClose={() => setShowDetailsModal(false)}\n        onExport={(conv) => {\n          // Export functionality\n          const data = JSON.stringify(conv, null, 2);\n          const blob = new Blob([data], { type: 'application/json' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `conversation-${conv.id}-${new Date().toISOString().split('T')[0]}.json`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          URL.revokeObjectURL(url);\n          toast.success('Conversation exported successfully');\n        }}\n        onShare={(conv) => {\n          // Share functionality\n          const shareUrl = `${window.location.origin}/chat/${conv.session_id}`;\n          navigator.clipboard.writeText(shareUrl);\n          toast.success('Share link copied to clipboard');\n        }}\n      />\n\n      {/* Delete Conversation Dialog */}\n      <DeleteConversationDialog\n        isOpen={showDeleteDialog}\n        conversationName={conversation.name}\n        messageCount={conversation.message_count}\n        onConfirm={handleConfirmDelete}\n        onCancel={() => setShowDeleteDialog(false)}\n      />\n    </div>\n  );\n};\n\ninterface ConversationSidebarProps {\n  className?: string;\n  isCollapsed?: boolean;\n  onToggle?: () => void;\n  isMobile?: boolean;\n  onConversationSelect?: () => void;\n}\n\nexport const ConversationSidebar: React.FC<ConversationSidebarProps> = ({\n  className,\n  isCollapsed = false,\n  onToggle,\n  isMobile = false,\n  onConversationSelect\n}) => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [isCreating, setIsCreating] = useState(false);\n  const [showSortFilter, setShowSortFilter] = useState(false);\n  const [searchMode, setSearchMode] = useState<'name' | 'id' | 'session'>('name');\n  const [dateFilter, setDateFilter] = useState<'all' | 'today' | 'week' | 'month'>('all');\n  const [isSearching, setIsSearching] = useState(false);\n  \n  const { isFreeTrialMode } = useDemoModeContext();\n  \n  const { \n    conversations, \n    currentConversation, \n    loading, \n    error,\n    fetchConversations,\n    createConversation,\n    selectConversation,\n    deleteConversation,\n    updateConversation,\n    // Pagination state\n    currentPage,\n    totalPages,\n    totalConversations,\n    perPage,\n    // Sorting and filtering state\n    sortOrder,\n    sortBy,\n    userFilter\n  } = useConversationStore();\n  \n  const { currentAgent } = useAgentStore();\n  const { clearMessages, loadMessages } = useMessageStore();\n\n  // Fetch conversations when agent changes\n  useEffect(() => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (currentAgent && !isDemoMode) {\n      logger.info('UI', 'Agent changed in sidebar, fetching conversations', {\n        agentId: currentAgent.id,\n        agentName: currentAgent.project_name,\n        isActive: currentAgent.is_chat_active\n      });\n      fetchConversations(currentAgent.id);\n    } else if (!currentAgent) {\n      logger.warn('UI', 'No current agent selected in sidebar');\n    } else if (isDemoMode) {\n      logger.info('UI', 'Skipping conversation fetch in demo mode');\n    }\n  }, [currentAgent, fetchConversations]);\n\n  // Debounced search function\n  const debouncedSearch = useCallback(\n    async (query: string) => {\n      if (!currentAgent) return;\n      \n      setIsSearching(true);\n      try {\n        await fetchConversations(currentAgent.id, { \n          page: 1,\n          searchQuery: query.trim() || undefined,\n          searchMode: searchMode,\n          dateFilter: dateFilter !== 'all' ? dateFilter : undefined,\n          order: sortOrder,\n          orderBy: sortBy,\n          userFilter: userFilter !== 'all' ? userFilter : undefined\n        });\n      } catch (error) {\n        logger.error('UI', 'Failed to search conversations', error);\n      } finally {\n        setIsSearching(false);\n      }\n    },\n    [currentAgent, searchMode, dateFilter, sortOrder, sortBy, userFilter, fetchConversations]\n  );\n\n  // Debounce search calls\n  useEffect(() => {\n    // Skip initial empty state to prevent unnecessary API call on mount\n    if (searchQuery === '') return;\n    \n    const timeoutId = setTimeout(() => {\n      debouncedSearch(searchQuery);\n    }, 500); // 500ms debounce\n\n    return () => clearTimeout(timeoutId);\n  }, [searchQuery, debouncedSearch]);\n\n  // Handle search input change\n  const handleSearch = (query: string) => {\n    setSearchQuery(query);\n  };\n\n  // Handle date filter change\n  const handleDateFilterChange = async (filter: 'all' | 'today' | 'week' | 'month') => {\n    setDateFilter(filter);\n    \n    if (!currentAgent) return;\n    \n    try {\n      await fetchConversations(currentAgent.id, { \n        page: 1,\n        searchQuery: searchQuery.trim() || undefined,\n        searchMode: searchMode,\n        dateFilter: filter !== 'all' ? filter : undefined,\n        order: sortOrder,\n        orderBy: sortBy,\n        userFilter: userFilter !== 'all' ? userFilter : undefined\n      });\n    } catch (error) {\n      logger.error('UI', 'Failed to filter conversations by date', error);\n    }\n  };\n\n  // Handle search mode change  \n  const handleSearchModeChange = async (mode: 'name' | 'id' | 'session') => {\n    setSearchMode(mode);\n    \n    if (!currentAgent || !searchQuery.trim()) return;\n    \n    try {\n      await fetchConversations(currentAgent.id, { \n        page: 1,\n        searchQuery: searchQuery.trim(),\n        searchMode: mode,\n        dateFilter: dateFilter !== 'all' ? dateFilter : undefined,\n        order: sortOrder,\n        orderBy: sortBy,\n        userFilter: userFilter !== 'all' ? userFilter : undefined\n      });\n    } catch (error) {\n      logger.error('UI', 'Failed to change search mode', error);\n    }\n  };\n  \n  // Use conversations directly since filtering is now done server-side\n  const filteredConversations = Array.isArray(conversations) ? conversations : [];\n\n  const handleNewConversation = async () => {\n    if (!currentAgent || isCreating) return;\n    \n    if (isFreeTrialMode) {\n      toast.error('Creating new conversations is not available in free trial mode');\n      return;\n    }\n    \n    logger.info('UI', 'Creating new conversation', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n    \n    setIsCreating(true);\n    try {\n      const name = `New Chat ${new Date().toLocaleDateString()}`;\n      await createConversation(currentAgent.id, name);\n      clearMessages(); // Clear current messages when starting new conversation\n      logger.info('UI', 'New conversation created successfully', { name });\n      toast.success('New conversation created');\n      \n      // Call the onConversationSelect callback to close the mobile drawer\n      if (onConversationSelect) {\n        onConversationSelect();\n      }\n    } catch (error) {\n      logger.error('UI', 'Failed to create conversation', error, {\n        agentId: currentAgent.id,\n        errorMessage: error instanceof Error ? error.message : String(error)\n      });\n      toast.error('Failed to create new conversation');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const handleSelectConversation = async (conversation: Conversation) => {\n    // Prevent multiple clicks while switching\n    if (loading) return;\n    \n    logger.info('UI', 'Selecting conversation', {\n      conversationId: conversation.id,\n      conversationName: conversation.name,\n      projectId: conversation.project_id,\n      messageCount: conversation.message_count\n    });\n    \n    selectConversation(conversation);\n    \n    // Load messages for the selected conversation\n    try {\n      logger.info('UI', 'Loading messages for selected conversation', {\n        conversationId: conversation.id,\n        agentId: currentAgent?.id,\n        agentName: currentAgent?.project_name\n      });\n      \n      await loadMessages(conversation.id.toString());\n      \n      logger.info('UI', 'Messages loaded successfully for conversation', {\n        conversationId: conversation.id\n      });\n      \n      // Call the onConversationSelect callback to close the mobile drawer\n      if (onConversationSelect) {\n        onConversationSelect();\n      }\n    } catch (error) {\n      logger.error('UI', 'Failed to load messages for conversation', error, {\n        conversationId: conversation.id,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        errorType: error instanceof Error ? error.constructor.name : typeof error\n      });\n      toast.error('Failed to load conversation messages');\n    }\n  };\n\n  const handleDeleteConversation = async (conversationId: string) => {\n    if (isFreeTrialMode) {\n      toast.error('Deleting conversations is not available in free trial mode');\n      return;\n    }\n    \n    try {\n      await deleteConversation(conversationId);\n      toast.success('Conversation deleted');\n    } catch (error) {\n      toast.error('Failed to delete conversation');\n    }\n  };\n\n  const handleRenameConversation = async (conversationId: string, newName: string) => {\n    if (isFreeTrialMode) {\n      toast.error('Renaming conversations is not available in free trial mode');\n      return;\n    }\n    \n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) return;\n    \n    try {\n      await updateConversation(conversation.project_id, conversation.session_id, { name: newName });\n      toast.success('Conversation renamed');\n    } catch (error) {\n      toast.error('Failed to rename conversation');\n    }\n  };\n\n  // Use prop or fallback to viewport check if needed\n  // const isMobile = typeof window !== 'undefined' && window.innerWidth < 768;\n  \n  if (isCollapsed && !isMobile) {\n    return (\n      <div className={cn('w-12 bg-muted border-r border-border flex flex-col', className)}>\n        <div className=\"p-2\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggle}\n            className=\"w-8 h-8\"\n            title=\"Expand sidebar\"\n          >\n            <MessageSquare className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\n      'bg-muted flex flex-col',\n      isMobile ? 'w-full h-full' : 'w-80 border-r border-border',\n      className\n    )}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-border bg-background\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h2 className=\"font-semibold text-foreground\">Conversations</h2>\n          {!isMobile && (\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={onToggle}\n              className=\"h-8 w-8\"\n              title=\"Collapse sidebar\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n        \n        {/* Search */}\n        <div className=\"space-y-2\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <input\n              type=\"text\"\n              placeholder={isMobile ? \"Search conversations...\" : `Search by ${searchMode}...`}\n              value={searchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              className={cn(\n                \"w-full pl-9 pr-12 py-2 text-sm border border-input bg-background text-foreground rounded-lg focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent placeholder:text-muted-foreground\",\n                isMobile && \"py-3\"\n              )}\n            />\n            {isSearching && (\n              <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-brand-600\"></div>\n              </div>\n            )}\n          </div>\n          \n          {/* Search Mode Selector - Hidden on mobile */}\n          {!isMobile && (\n            <div className=\"flex gap-1\">\n              <button\n                onClick={() => handleSearchModeChange('name')}\n                className={cn(\n                  \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                  searchMode === 'name' \n                    ? \"bg-brand-500 text-white\" \n                    : \"bg-muted text-muted-foreground hover:bg-accent\"\n                )}\n              >\n                Name\n              </button>\n              <button\n                onClick={() => handleSearchModeChange('id')}\n                className={cn(\n                  \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                  searchMode === 'id' \n                    ? \"bg-brand-500 text-white\" \n                    : \"bg-muted text-muted-foreground hover:bg-accent\"\n                )}\n              >\n                ID\n              </button>\n              <button\n                onClick={() => handleSearchModeChange('session')}\n                className={cn(\n                  \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                  searchMode === 'session' \n                    ? \"bg-brand-500 text-white\" \n                    : \"bg-muted text-muted-foreground hover:bg-accent\"\n                )}\n              >\n                Session\n              </button>\n            </div>\n          )}\n        </div>\n        \n        {/* Sort and Filter Toggle - Hidden on mobile */}\n        {!isMobile && (\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setShowSortFilter(!showSortFilter)}\n            className=\"w-full mt-2 justify-center gap-2\"\n          >\n            <Filter className=\"h-3 w-3\" />\n            Sort & Filter\n            {showSortFilter ? <ChevronUp className=\"h-3 w-3\" /> : <ChevronDown className=\"h-3 w-3\" />}\n          </Button>\n        )}\n        \n        {/* Sort and Filter Options - Hidden on mobile */}\n        {!isMobile && showSortFilter && (\n          <AnimatePresence>\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"space-y-3 mt-3 overflow-hidden\"\n            >\n              {/* Sort Options */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Sort By</label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <select\n                    value={sortBy}\n                    onChange={(e) => {\n                      if (currentAgent) {\n                        fetchConversations(currentAgent.id, { \n                          page: 1, \n                          orderBy: e.target.value \n                        });\n                      }\n                    }}\n                    className=\"px-2 py-1 text-xs border border-input bg-background text-foreground rounded focus:outline-none focus:ring-2 focus:ring-ring\"\n                  >\n                    <option value=\"id\">Date Created</option>\n                    <option value=\"updated_at\">Last Updated</option>\n                    <option value=\"name\">Name</option>\n                  </select>\n                  \n                  <select\n                    value={sortOrder}\n                    onChange={(e) => {\n                      if (currentAgent) {\n                        fetchConversations(currentAgent.id, { \n                          page: 1, \n                          order: e.target.value as 'asc' | 'desc' \n                        });\n                      }\n                    }}\n                    className=\"px-2 py-1 text-xs border border-input bg-background text-foreground rounded focus:outline-none focus:ring-2 focus:ring-ring\"\n                  >\n                    <option value=\"desc\">Newest First</option>\n                    <option value=\"asc\">Oldest First</option>\n                  </select>\n                </div>\n              </div>\n              \n              {/* Date Filter */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Filter By Date</label>\n                <select\n                  value={dateFilter}\n                  onChange={(e) => handleDateFilterChange(e.target.value as 'all' | 'today' | 'week' | 'month')}\n                  className=\"w-full px-2 py-1 text-xs border border-input bg-background text-foreground rounded focus:outline-none focus:ring-2 focus:ring-ring\"\n                >\n                  <option value=\"all\">All Time</option>\n                  <option value=\"today\">Today</option>\n                  <option value=\"week\">Last 7 Days</option>\n                  <option value=\"month\">Last 30 Days</option>\n                </select>\n              </div>\n              \n              {/* User Filter */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Filter By User</label>\n                <select\n                  value={userFilter}\n                  onChange={(e) => {\n                    if (currentAgent) {\n                      fetchConversations(currentAgent.id, { \n                        page: 1, \n                        userFilter: e.target.value \n                      });\n                    }\n                  }}\n                  className=\"w-full px-2 py-1 text-xs border border-input bg-background text-foreground rounded focus:outline-none focus:ring-2 focus:ring-ring\"\n                >\n                  <option value=\"all\">All Users</option>\n                  {/* Additional user options could be dynamically loaded */}\n                </select>\n              </div>\n            </motion.div>\n          </AnimatePresence>\n        )}\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"p-4 space-y-2\">\n        <Link href=\"/dashboard/projects/create\">\n          <Button\n            className=\"w-full justify-start gap-2\"\n            variant=\"default\"\n            disabled={isFreeTrialMode}\n            title={isFreeTrialMode ? 'Creating new agents is not available in free trial mode' : ''}\n          >\n            <Bot className=\"w-4 h-4\" />\n            Create New Agent\n          </Button>\n        </Link>\n        \n        <Button\n          onClick={handleNewConversation}\n          disabled={!currentAgent || isCreating || isFreeTrialMode}\n          className=\"w-full justify-start gap-2\"\n          variant=\"outline\"\n          title={isFreeTrialMode ? 'Creating new conversations is not available in free trial mode' : ''}\n        >\n          {isCreating ? (\n            <>\n              <Spinner size=\"sm\" />\n              <span>Creating...</span>\n            </>\n          ) : (\n            <>\n              <Plus className=\"w-4 h-4\" />\n              <span>New Chat</span>\n            </>\n          )}\n        </Button>\n      </div>\n\n      {/* Conversations List */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {loading && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <ConversationSkeleton count={5} />\n        ) : error && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <div className=\"p-4 text-center\">\n            <p className=\"text-sm text-destructive mb-2\">Failed to load conversations</p>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => currentAgent && fetchConversations(currentAgent.id)}\n            >\n              Try Again\n            </Button>\n          </div>\n        ) : filteredConversations.length === 0 ? (\n          <div className=\"p-4 text-center\">\n            <MessageSquare className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">\n              {searchQuery ? 'No conversations found' : 'No conversations yet'}\n            </p>\n            {!searchQuery && (\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Start a new conversation to get going\n              </p>\n            )}\n            {currentAgent && (\n              <div className=\"text-xs text-muted-foreground mt-2 space-y-1\">\n                <p>Agent: {currentAgent.project_name} (ID: {currentAgent.id})</p>\n                {error && (\n                  <p className=\"text-destructive\">Error: {error}</p>\n                )}\n                <p>Conversations loaded: {conversations.length}</p>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"p-2 space-y-1\">\n            {filteredConversations.map((conversation) => (\n              <ConversationItem\n                key={conversation.id}\n                conversation={conversation}\n                isSelected={currentConversation?.id === conversation.id}\n                onSelect={handleSelectConversation}\n                onDelete={(id) => handleDeleteConversation(id)}\n                onRename={handleRenameConversation}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Footer with Pagination */}\n      <div className=\"p-4 border-t border-border bg-background space-y-3\">\n        <div className=\"text-xs text-muted-foreground text-center\">\n          {searchQuery ? (\n            <>\n              {filteredConversations.length} result{filteredConversations.length !== 1 ? 's' : ''}\n            </>\n          ) : (\n            <>\n              Showing {conversations.length} of {totalConversations} conversation{totalConversations !== 1 ? 's' : ''}\n            </>\n          )}\n          {currentAgent && (\n            <span className=\"block mt-1\">\n              Agent: {currentAgent.project_name}\n            </span>\n          )}\n        </div>\n        \n        {/* Pagination Controls */}\n        {totalPages > 1 && !searchQuery && (\n          <div className=\"flex items-center justify-between gap-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                if (currentAgent && currentPage > 1) {\n                  fetchConversations(currentAgent.id, { page: currentPage - 1 });\n                }\n              }}\n              disabled={currentPage === 1 || loading}\n            >\n              <ChevronDown className=\"h-3 w-3 rotate-90\" />\n            </Button>\n            \n            <span className=\"text-xs text-muted-foreground\">\n              Page {currentPage} of {totalPages}\n            </span>\n            \n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                if (currentAgent && currentPage < totalPages) {\n                  fetchConversations(currentAgent.id, { page: currentPage + 1 });\n                }\n              }}\n              disabled={currentPage === totalPages || loading}\n            >\n              <ChevronDown className=\"h-3 w-3 -rotate-90\" />\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};","/**\n * Chat Layout Component\n * \n * Top-level layout component that orchestrates the chat interface.\n * Handles different deployment modes and manages the conversation sidebar.\n * \n * Deployment Modes:\n * - standalone: Full chat with sidebar (default for main app)\n * - widget: Embeddable chat without sidebar\n * - floating: Popup-style chat without sidebar\n * \n * Features:\n * - Responsive sidebar with collapse/expand\n * - Automatic message loading on conversation change\n * - Mode-specific rendering logic\n * - Clean separation of concerns\n * \n * Architecture:\n * - ChatLayout (this) - Layout orchestration\n *   - ConversationSidebar - Conversation list and management\n *   - ChatContainer - Main chat interface\n *     - Message - Individual messages\n *     - ChatInput - Message input area\n * \n * State Management:\n * - currentConversation from conversationStore\n * - loadMessages from messageStore\n * - Local state for sidebar collapse\n * \n * Features:\n * - Multiple deployment modes with flexible configuration\n * - Professional sidebar with persistent state and responsive design\n * - Full keyboard navigation and accessibility support\n * - Mobile-optimized interface with adaptive layout\n * - Customizable sidebar positioning and behavior options\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport type { Agent } from '@/types';\nimport { ChatContainer } from './ChatContainer';\nimport { ConversationSidebar } from './ConversationSidebar';\nimport { useConversationStore, useMessageStore } from '@/hooks/useWidgetStore';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\n/**\n * Props for ChatLayout component\n * \n * @property mode - Deployment mode: standalone (with sidebar), widget, or floating\n * @property className - Additional CSS classes for styling\n * @property onClose - Callback for closing chat (widget/floating modes)\n * @property onAgentSettings - Callback for opening agent settings\n * @property showSidebar - Whether to show sidebar (only applies to standalone mode)\n * @property enableConversationManagement - Enable conversation switching UI\n * @property maxConversations - Maximum conversations per session\n * @property sessionId - Session ID for conversation isolation\n * @property threadId - Specific conversation thread to load\n * @property onConversationChange - Callback when conversation changes\n * @property onMessage - Callback when message is sent/received\n */\ninterface ChatLayoutProps {\n  mode?: 'standalone' | 'widget' | 'floating';\n  className?: string;\n  onClose?: () => void;\n  onAgentSettings?: (agent: Agent) => void;\n  showSidebar?: boolean;\n  enableConversationManagement?: boolean;\n  maxConversations?: number;\n  sessionId?: string;\n  threadId?: string;\n  onConversationChange?: (conversation: any) => void;\n  onMessage?: (message: any) => void;\n  widgetInstance?: any; // Widget instance for isolated conversation management\n  conversations?: any[]; // Current conversations for isolated mode\n  currentConversation?: any; // Current conversation for isolated mode\n  conversationRefreshKey?: number; // Key to trigger ConversationManager refresh\n}\n\n/**\n * Chat Layout Component\n * \n * Orchestrates the overall chat interface layout based on deployment mode.\n * In standalone mode, includes a collapsible conversation sidebar.\n * In widget/floating modes, renders only the chat container.\n */\nexport const ChatLayout: React.FC<ChatLayoutProps> = ({\n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  showSidebar = true,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  widgetInstance,\n  conversations,\n  currentConversation,\n  conversationRefreshKey\n}) => {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [mobileSidebarOpen, setMobileSidebarOpen] = useState(false);\n  const { currentConversation: storeCurrentConversation } = useConversationStore();\n  const { loadMessages } = useMessageStore();\n\n  /**\n   * Load messages when conversation changes\n   * \n   * Automatically fetches messages from the store when user\n   * switches between conversations. This ensures the chat\n   * always shows the correct message history.\n   */\n  useEffect(() => {\n    // Skip API calls in demo mode to prevent errors\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (storeCurrentConversation && !isDemoMode) {\n      loadMessages(storeCurrentConversation.id.toString());\n    }\n  }, [storeCurrentConversation, loadMessages]);\n\n  const { isMobile } = useBreakpoint();\n\n  // Hide sidebar for widget and floating modes\n  // Only standalone mode shows the conversation sidebar\n  const shouldShowSidebar = showSidebar && mode === 'standalone';\n\n  /**\n   * Toggle sidebar collapsed state\n   * \n   * Toggles sidebar visibility with potential for session persistence\n   * to enhance user experience across application sessions\n   */\n  const handleToggleSidebar = () => {\n    setSidebarCollapsed(!sidebarCollapsed);\n  };\n\n  if (!shouldShowSidebar) {\n    // For widget/floating modes, just show the chat container\n    return (\n      <ChatContainer\n        mode={mode}\n        className={className}\n        onClose={onClose}\n        onAgentSettings={onAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        threadId={threadId}\n        onConversationChange={onConversationChange}\n        onMessage={onMessage}\n        conversationRefreshKey={conversationRefreshKey}\n        isMobile={isMobile}\n      />\n    );\n  }\n\n  // On mobile, hide the sidebar and use drawer navigation instead\n  if (isMobile) {\n    return (\n      <div className=\"flex flex-col h-full bg-background\">\n        <ChatContainer\n          mode={mode}\n          className=\"flex-1\"\n          onClose={onClose}\n          onAgentSettings={onAgentSettings}\n          enableConversationManagement={enableConversationManagement}\n          maxConversations={maxConversations}\n          sessionId={sessionId}\n          threadId={threadId}\n          onConversationChange={onConversationChange}\n          onMessage={onMessage}\n          conversationRefreshKey={conversationRefreshKey}\n          isMobile={true}\n        />\n      </div>\n    );\n  }\n\n  // Desktop layout with sidebar\n  return (\n    <div className=\"flex h-full bg-background\">\n      {/* Sidebar */}\n      <ConversationSidebar\n        isCollapsed={sidebarCollapsed}\n        onToggle={handleToggleSidebar}\n        isMobile={false}\n      />\n      \n      {/* Main Chat Area */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        <ChatContainer\n          mode={mode}\n          className=\"h-full\"\n          onClose={onClose}\n          onAgentSettings={onAgentSettings}\n          enableConversationManagement={enableConversationManagement}\n          maxConversations={maxConversations}\n          sessionId={sessionId}\n          threadId={threadId}\n          onConversationChange={onConversationChange}\n          onMessage={onMessage}\n          conversationRefreshKey={conversationRefreshKey}\n          isMobile={false}\n        />\n      </div>\n    </div>\n  );\n};","import React, { useEffect, useState } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Toaster } from 'sonner';\n\nimport '../app/globals.css';\nimport { useAgentStore } from '../store';\nimport { ChatLayout } from '../components/chat/ChatLayout';\n\ninterface IframeConfig {\n  agentId: number | string;\n  agentName?: string;\n  mode: 'embedded' | 'floating' | 'widget';\n  theme: 'light' | 'dark';\n  enableCitations: boolean;\n  enableFeedback: boolean;\n  sessionId?: string;\n  threadId?: string;\n  isolateConversations?: boolean;\n}\n\nconst IframeApp: React.FC = () => {\n  const [config, setConfig] = useState<IframeConfig | null>(null);\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    // Parse URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    const agentIdParam = urlParams.get('agentId');\n    \n    const iframeConfig: IframeConfig = {\n      agentId: agentIdParam ? (isNaN(Number(agentIdParam)) ? agentIdParam : Number(agentIdParam)) : '',\n      agentName: urlParams.get('agentName') || undefined,\n      mode: (urlParams.get('mode') as any) || 'embedded',\n      theme: (urlParams.get('theme') as any) || 'light',\n      enableCitations: urlParams.get('enableCitations') !== 'false',\n      enableFeedback: urlParams.get('enableFeedback') !== 'false',\n      sessionId: urlParams.get('sessionId') || undefined,\n      threadId: urlParams.get('threadId') || undefined,\n      isolateConversations: urlParams.get('isolateConversations') === 'true',\n    };\n    \n    if (!iframeConfig.agentId) {\n      console.error('CustomGPT: Agent ID is required');\n      return;\n    }\n\n    setConfig(iframeConfig);\n    \n    // Set up the agent - create a minimal agent object with the provided ID\n    const agent: any = {\n      id: typeof iframeConfig.agentId === 'string' ? parseInt(iframeConfig.agentId) : iframeConfig.agentId,\n      project_name: iframeConfig.agentName || `Agent ${iframeConfig.agentId}`,\n      is_chat_active: true,\n    };\n    useAgentStore.getState().selectAgent(agent);\n\n    // Set up message handling with parent window\n    setupMessageHandling();\n\n    // Notify parent that iframe is ready\n    postMessageToParent('ready', { config: iframeConfig });\n    setIsReady(true);\n  }, []);\n\n  const setupMessageHandling = () => {\n    window.addEventListener('message', (event) => {\n      const { type, data } = event.data;\n\n      switch (type) {\n        case 'customgpt-open':\n          handleOpen();\n          break;\n        case 'customgpt-close':\n          handleClose();\n          break;\n        case 'customgpt-config-update':\n          handleConfigUpdate(data);\n          break;\n      }\n    });\n\n    // Handle window resize for responsive behavior\n    const handleResize = () => {\n      postMessageToParent('resize', {\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Send initial size\n    setTimeout(handleResize, 100);\n  };\n\n  const postMessageToParent = (type: string, data: any = {}) => {\n    if (window.parent && window.parent !== window) {\n      window.parent.postMessage({\n        type: `customgpt-${type}`,\n        data\n      }, '*');\n    }\n  };\n\n  const handleOpen = () => {\n    // Handle any iframe-specific open logic\n  };\n\n  const handleClose = () => {\n    // Handle any iframe-specific close logic\n    postMessageToParent('close');\n  };\n\n  const handleConfigUpdate = (newConfig: Partial<IframeConfig>) => {\n    if (config) {\n      const updatedConfig = { ...config, ...newConfig };\n      setConfig(updatedConfig);\n      \n      // Update agent if needed\n      if (newConfig.agentId || newConfig.agentName) {\n        const agent: any = {\n          id: typeof updatedConfig.agentId === 'string' ? parseInt(updatedConfig.agentId) : updatedConfig.agentId,\n          project_name: updatedConfig.agentName || `Agent ${updatedConfig.agentId}`,\n          is_chat_active: true,\n        };\n        useAgentStore.getState().selectAgent(agent);\n      }\n    }\n  };\n\n  const handleMessage = (message: any) => {\n    // Relay messages to parent window\n    postMessageToParent('message', message);\n  };\n\n  const handleError = (error: any) => {\n    // Relay errors to parent window\n    postMessageToParent('error', error);\n    console.error('Widget error:', error);\n  };\n\n  // Show loading state until config is available\n  if (!config || !isReady) {\n    return (\n      <div className=\"flex items-center justify-center h-screen bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading CustomGPT...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen bg-gray-50\">\n      <ChatLayout\n        mode=\"widget\"\n        showSidebar={false} // No sidebar in iframe mode\n        onClose={config.mode === 'floating' ? handleClose : undefined}\n      />\n      <Toaster \n        position=\"top-center\"\n        closeButton\n        gap={8}\n        toastOptions={{\n          style: { \n            zIndex: 10000,\n            marginTop: '8px'\n          }\n        }}\n      />\n    </div>\n  );\n};\n\n// Initialize the app\nconst initIframeApp = () => {\n  const container = document.getElementById('iframe-app');\n  if (container) {\n    const root = createRoot(container);\n    root.render(<IframeApp />);\n  }\n};\n\n// Auto-initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initIframeApp);\n} else {\n  initIframeApp();\n}\n\nexport default IframeApp;","/**\n * Performance Optimizations for Voice Themes\n * \n * Advanced performance optimizations including LOD system, render culling,\n * batch rendering, and memory management for maintaining 30+ FPS on all devices.\n */\n\nimport { PerformanceMetrics, DeviceCapabilities } from '../utils/performance';\n\nexport interface LODSettings {\n  level: 0 | 1 | 2; // 0 = high, 1 = medium, 2 = low\n  particleReduction: number; // 0-1, percentage reduction\n  effectsDisabled: boolean;\n  glowDisabled: boolean;\n  simplifiedRendering: boolean;\n  skipFrames: number; // Skip every N frames for heavy operations\n}\n\nexport interface CullingBounds {\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n  near?: number;\n  far?: number;\n}\n\nexport interface RenderBatch {\n  color: string;\n  particles: Array<{ x: number; y: number; size: number; alpha: number }>;\n  glowEnabled: boolean;\n  effectsEnabled: boolean;\n}\n\n/**\n * Level-of-Detail Manager for Performance Scaling\n */\nexport class LODManager {\n  private currentLOD: LODSettings;\n  private frameCount = 0;\n  private lastPerformanceCheck = 0;\n  private performanceHistory: number[] = [];\n  \n  private lodProfiles: Record<number, LODSettings> = {\n    0: { // High quality\n      level: 0,\n      particleReduction: 0,\n      effectsDisabled: false,\n      glowDisabled: false,\n      simplifiedRendering: false,\n      skipFrames: 0\n    },\n    1: { // Medium quality\n      level: 1,\n      particleReduction: 0.3,\n      effectsDisabled: false,\n      glowDisabled: true,\n      simplifiedRendering: false,\n      skipFrames: 1\n    },\n    2: { // Low quality\n      level: 2,\n      particleReduction: 0.6,\n      effectsDisabled: true,\n      glowDisabled: true,\n      simplifiedRendering: true,\n      skipFrames: 2\n    }\n  };\n\n  constructor(initialLOD = 1) {\n    this.currentLOD = this.lodProfiles[initialLOD];\n  }\n\n  /**\n   * Update LOD based on performance metrics\n   */\n  updateLOD(metrics: PerformanceMetrics): LODSettings {\n    this.frameCount++;\n    \n    // Check performance every 30 frames (0.5 seconds at 60fps)\n    if (this.frameCount - this.lastPerformanceCheck >= 30) {\n      this.performanceHistory.push(metrics.fps);\n      \n      // Keep only last 5 measurements (2.5 seconds)\n      if (this.performanceHistory.length > 5) {\n        this.performanceHistory.shift();\n      }\n      \n      const avgFPS = this.performanceHistory.reduce((sum, fps) => sum + fps, 0) / this.performanceHistory.length;\n      this.adjustLODBasedOnFPS(avgFPS);\n      \n      this.lastPerformanceCheck = this.frameCount;\n    }\n    \n    return this.currentLOD;\n  }\n\n  private adjustLODBasedOnFPS(avgFPS: number): void {\n    const targetFPS = 30;\n    \n    if (avgFPS < targetFPS * 0.7 && this.currentLOD.level < 2) {\n      // Performance is poor, reduce quality\n      this.currentLOD = this.lodProfiles[Math.min(2, this.currentLOD.level + 1)];\n      console.log(`[LOD] Reducing quality to level ${this.currentLOD.level} (FPS: ${avgFPS.toFixed(1)})`);\n    } else if (avgFPS > targetFPS * 1.2 && this.currentLOD.level > 0) {\n      // Performance is good, can increase quality\n      this.currentLOD = this.lodProfiles[Math.max(0, this.currentLOD.level - 1)];\n      console.log(`[LOD] Increasing quality to level ${this.currentLOD.level} (FPS: ${avgFPS.toFixed(1)})`);\n    }\n  }\n\n  getCurrentLOD(): LODSettings {\n    return this.currentLOD;\n  }\n\n  shouldSkipFrame(): boolean {\n    return this.currentLOD.skipFrames > 0 && \n           this.frameCount % (this.currentLOD.skipFrames + 1) !== 0;\n  }\n}\n\n/**\n * Frustum Culling for Off-screen Particle Elimination\n */\nexport class FrustumCuller {\n  private bounds!: CullingBounds;\n  private margin = 50; // Extra margin to prevent pop-in\n  \n  constructor(width: number, height: number, margin = 50) {\n    this.margin = margin;\n    this.updateBounds(width, height);\n  }\n\n  updateBounds(width: number, height: number): void {\n    this.bounds = {\n      left: -this.margin,\n      right: width + this.margin,\n      top: -this.margin,\n      bottom: height + this.margin,\n      near: -200,\n      far: 200\n    };\n  }\n\n  /**\n   * Check if a particle is within visible bounds\n   */\n  isVisible(x: number, y: number, z = 0, size = 0): boolean {\n    return (\n      x + size >= this.bounds.left &&\n      x - size <= this.bounds.right &&\n      y + size >= this.bounds.top &&\n      y - size <= this.bounds.bottom &&\n      (this.bounds.near === undefined || z >= this.bounds.near) &&\n      (this.bounds.far === undefined || z <= this.bounds.far)\n    );\n  }\n\n  /**\n   * Filter array of particles to only visible ones\n   */\n  cullParticles<T extends { x: number; y: number; z?: number; size?: number }>(particles: T[]): T[] {\n    return particles.filter(particle => \n      this.isVisible(\n        particle.x, \n        particle.y, \n        particle.z || 0, \n        particle.size || 0\n      )\n    );\n  }\n\n  /**\n   * Get culling statistics\n   */\n  getCullingStats<T extends { x: number; y: number }>(particles: T[]): {\n    total: number;\n    visible: number;\n    culled: number;\n    cullingRatio: number;\n  } {\n    const visible = this.cullParticles(particles);\n    const culled = particles.length - visible.length;\n    \n    return {\n      total: particles.length,\n      visible: visible.length,\n      culled,\n      cullingRatio: particles.length > 0 ? culled / particles.length : 0\n    };\n  }\n}\n\n/**\n * Batch Renderer for Optimized Drawing\n */\nexport class BatchRenderer {\n  private batches: Map<string, RenderBatch> = new Map();\n  private maxBatchSize = 1000;\n  \n  /**\n   * Add particle to appropriate batch\n   */\n  addToBatch(\n    color: string, \n    x: number, \n    y: number, \n    size: number, \n    alpha: number,\n    glowEnabled = false,\n    effectsEnabled = false\n  ): void {\n    const batchKey = `${color}_${glowEnabled}_${effectsEnabled}`;\n    \n    if (!this.batches.has(batchKey)) {\n      this.batches.set(batchKey, {\n        color,\n        particles: [],\n        glowEnabled,\n        effectsEnabled\n      });\n    }\n    \n    const batch = this.batches.get(batchKey)!;\n    if (batch.particles.length < this.maxBatchSize) {\n      batch.particles.push({ x, y, size, alpha });\n    }\n  }\n\n  /**\n   * Render all batches efficiently\n   */\n  renderBatches(context: CanvasRenderingContext2D, lodSettings: LODSettings): void {\n    Array.from(this.batches.entries()).forEach(([batchKey, batch]) => {\n      if (batch.particles.length === 0) return;\n      \n      context.save();\n      context.fillStyle = batch.color;\n      \n      // Skip effects if disabled by LOD\n      const shouldRenderEffects = batch.effectsEnabled && !lodSettings.effectsDisabled;\n      const shouldRenderGlow = batch.glowEnabled && !lodSettings.glowDisabled;\n      \n      if (lodSettings.simplifiedRendering) {\n        // Simplified rendering: draw all particles as simple circles\n        this.renderSimplifiedBatch(context, batch);\n      } else {\n        // Full rendering: individual particles with effects\n        this.renderFullBatch(context, batch, shouldRenderEffects, shouldRenderGlow);\n      }\n      \n      context.restore();\n    });\n  }\n\n  private renderSimplifiedBatch(context: CanvasRenderingContext2D, batch: RenderBatch): void {\n    context.beginPath();\n    batch.particles.forEach(particle => {\n      context.globalAlpha = particle.alpha;\n      context.moveTo(particle.x + particle.size, particle.y);\n      context.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n    });\n    context.fill();\n  }\n\n  private renderFullBatch(\n    context: CanvasRenderingContext2D, \n    batch: RenderBatch,\n    renderEffects: boolean,\n    renderGlow: boolean\n  ): void {\n    batch.particles.forEach(particle => {\n      context.save();\n      context.globalAlpha = particle.alpha;\n      \n      // Render glow first if enabled\n      if (renderGlow && particle.alpha > 0.5) {\n        const glowGradient = context.createRadialGradient(\n          particle.x, particle.y, 0,\n          particle.x, particle.y, particle.size * 3\n        );\n        glowGradient.addColorStop(0, batch.color);\n        glowGradient.addColorStop(1, 'transparent');\n        \n        context.fillStyle = glowGradient;\n        context.globalAlpha = particle.alpha * 0.3;\n        context.beginPath();\n        context.arc(particle.x, particle.y, particle.size * 3, 0, Math.PI * 2);\n        context.fill();\n      }\n      \n      // Render main particle\n      context.globalAlpha = particle.alpha;\n      context.fillStyle = batch.color;\n      context.beginPath();\n      context.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n      context.fill();\n      \n      context.restore();\n    });\n  }\n\n  /**\n   * Clear all batches\n   */\n  clearBatches(): void {\n    Array.from(this.batches.values()).forEach(batch => {\n      batch.particles = [];\n    });\n  }\n\n  /**\n   * Get batch statistics\n   */\n  getBatchStats(): {\n    batchCount: number;\n    totalParticles: number;\n    avgBatchSize: number;\n    largestBatch: number;\n  } {\n    const batchCount = this.batches.size;\n    let totalParticles = 0;\n    let largestBatch = 0;\n    \n    Array.from(this.batches.values()).forEach(batch => {\n      totalParticles += batch.particles.length;\n      largestBatch = Math.max(largestBatch, batch.particles.length);\n    });\n    \n    return {\n      batchCount,\n      totalParticles,\n      avgBatchSize: batchCount > 0 ? totalParticles / batchCount : 0,\n      largestBatch\n    };\n  }\n}\n\n/**\n * Memory Usage Monitor and Optimizer\n */\nexport class MemoryOptimizer {\n  private lastGCTime = 0;\n  private gcInterval = 10000; // 10 seconds\n  private memoryPressureThreshold = 0.85; // 85% of heap limit\n  \n  /**\n   * Check memory usage and trigger cleanup if needed\n   */\n  checkMemoryPressure(): { pressure: number; shouldCleanup: boolean } {\n    const currentTime = performance.now();\n    let pressure = 0;\n    let shouldCleanup = false;\n    \n    // Check if memory API is available\n    if ('memory' in (performance as any)) {\n      const memInfo = (performance as any).memory;\n      pressure = memInfo.usedJSHeapSize / memInfo.jsHeapSizeLimit;\n      shouldCleanup = pressure > this.memoryPressureThreshold;\n    }\n    \n    // Force cleanup based on time interval\n    if (currentTime - this.lastGCTime > this.gcInterval) {\n      shouldCleanup = true;\n      this.lastGCTime = currentTime;\n    }\n    \n    return { pressure, shouldCleanup };\n  }\n\n  /**\n   * Suggest memory optimization actions\n   */\n  getOptimizationSuggestions(pressure: number): {\n    reduceParticles: boolean;\n    clearCaches: boolean;\n    disableEffects: boolean;\n    simplifyRendering: boolean;\n  } {\n    return {\n      reduceParticles: pressure > 0.7,\n      clearCaches: pressure > 0.8,\n      disableEffects: pressure > 0.75,\n      simplifyRendering: pressure > 0.85\n    };\n  }\n}\n\n/**\n * Animation Frame Controller for Battery Optimization\n */\nexport class AnimationController {\n  private isVisible = true;\n  private targetFPS = 30;\n  private actualInterval = 1000 / 30; // ~33ms\n  private lastFrameTime = 0;\n  private frameBudget = 16.67; // ~60fps budget, but we target lower\n  \n  constructor(targetFPS = 30) {\n    this.setTargetFPS(targetFPS);\n    this.setupVisibilityHandling();\n  }\n\n  /**\n   * Set target FPS and update timing\n   */\n  setTargetFPS(fps: number): void {\n    this.targetFPS = Math.max(10, Math.min(60, fps)); // Clamp between 10-60\n    this.actualInterval = 1000 / this.targetFPS;\n  }\n\n  /**\n   * Check if frame should be rendered\n   */\n  shouldRenderFrame(): boolean {\n    if (!this.isVisible) return false;\n    \n    const currentTime = performance.now();\n    const deltaTime = currentTime - this.lastFrameTime;\n    \n    if (deltaTime >= this.actualInterval) {\n      this.lastFrameTime = currentTime;\n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * Get frame timing info\n   */\n  getFrameTiming(): {\n    targetFPS: number;\n    interval: number;\n    isVisible: boolean;\n    shouldThrottle: boolean;\n  } {\n    return {\n      targetFPS: this.targetFPS,\n      interval: this.actualInterval,\n      isVisible: this.isVisible,\n      shouldThrottle: !this.isVisible || this.targetFPS < 30\n    };\n  }\n\n  private setupVisibilityHandling(): void {\n    // Handle page visibility for battery optimization\n    document.addEventListener('visibilitychange', () => {\n      this.isVisible = !document.hidden;\n      \n      // Reduce FPS when not visible\n      if (!this.isVisible) {\n        this.setTargetFPS(10); // Very low FPS when hidden\n      } else {\n        this.setTargetFPS(30); // Normal FPS when visible\n      }\n    });\n    \n    // Handle focus/blur for additional optimization\n    window.addEventListener('focus', () => {\n      this.isVisible = true;\n      this.setTargetFPS(30);\n    });\n    \n    window.addEventListener('blur', () => {\n      this.setTargetFPS(20); // Reduced but not hidden\n    });\n  }\n}\n\n/**\n * Complete Performance Optimization Suite\n */\nexport class ThemePerformanceManager {\n  private lodManager: LODManager;\n  private culler: FrustumCuller;\n  private batchRenderer: BatchRenderer;\n  private memoryOptimizer: MemoryOptimizer;\n  private animationController: AnimationController;\n  \n  constructor(canvasWidth: number, canvasHeight: number) {\n    this.lodManager = new LODManager();\n    this.culler = new FrustumCuller(canvasWidth, canvasHeight);\n    this.batchRenderer = new BatchRenderer();\n    this.memoryOptimizer = new MemoryOptimizer();\n    this.animationController = new AnimationController();\n  }\n\n  /**\n   * Update all performance systems\n   */\n  update(metrics: PerformanceMetrics, canvasWidth?: number, canvasHeight?: number): {\n    lodSettings: LODSettings;\n    shouldRender: boolean;\n    memoryPressure: number;\n    optimizationActive: boolean;\n  } {\n    // Update LOD based on performance\n    const lodSettings = this.lodManager.updateLOD(metrics);\n    \n    // Update culling bounds if canvas size changed\n    if (canvasWidth && canvasHeight) {\n      this.culler.updateBounds(canvasWidth, canvasHeight);\n    }\n    \n    // Check memory pressure\n    const { pressure, shouldCleanup } = this.memoryOptimizer.checkMemoryPressure();\n    \n    // Check if we should render this frame\n    const shouldRender = this.animationController.shouldRenderFrame() && !this.lodManager.shouldSkipFrame();\n    \n    return {\n      lodSettings,\n      shouldRender,\n      memoryPressure: pressure,\n      optimizationActive: lodSettings.level > 0 || pressure > 0.7 || !shouldRender\n    };\n  }\n\n  /**\n   * Get all performance managers for direct access\n   */\n  getManagers() {\n    return {\n      lod: this.lodManager,\n      culler: this.culler,\n      batchRenderer: this.batchRenderer,\n      memory: this.memoryOptimizer,\n      animation: this.animationController\n    };\n  }\n\n  /**\n   * Get comprehensive performance report\n   */\n  getPerformanceReport(): {\n    lod: LODSettings;\n    culling: any;\n    batching: any;\n    memory: { pressure: number; shouldCleanup: boolean };\n    animation: any;\n  } {\n    const { pressure, shouldCleanup } = this.memoryOptimizer.checkMemoryPressure();\n    \n    return {\n      lod: this.lodManager.getCurrentLOD(),\n      culling: {}, // Will be populated when particles are processed\n      batching: this.batchRenderer.getBatchStats(),\n      memory: { pressure, shouldCleanup },\n      animation: this.animationController.getFrameTiming()\n    };\n  }\n}","/**\n * Base Theme Class\n * \n * Provides common functionality and structure for all voice themes.\n * Themes can extend this class to inherit shared behavior.\n */\n\nimport { IVoiceTheme, VoiceState, PerformanceSettings } from './IVoiceTheme';\nimport { PerformanceMonitor, DeviceCapabilityDetector } from '../utils/performance';\nimport { ThemePerformanceManager, LODSettings } from './PerformanceOptimizations';\nimport { lerp, clamp } from '../utils/math';\n\nexport abstract class BaseTheme implements IVoiceTheme {\n  // Abstract properties that must be implemented\n  abstract readonly id: string;\n  abstract readonly name: string;\n  abstract readonly description: string;\n  abstract readonly category: 'particle' | 'geometric' | 'advanced' | 'artistic';\n  abstract readonly performanceProfile: 'light' | 'medium' | 'heavy';\n\n  // Common state management\n  protected currentState: VoiceState = VoiceState.IDLE;\n  protected targetState: VoiceState = VoiceState.IDLE;\n  protected stateTransition = 0;\n  protected stateTransitionSpeed = 0.1;\n\n  // Mouse/touch interaction\n  protected mouseX = 0;\n  protected mouseY = 0;\n  protected normalizedMouseX = 0; // -1 to 1\n  protected normalizedMouseY = 0; // -1 to 1\n  protected mouseInfluence = 0;\n  protected targetMouseInfluence = 0;\n  protected isHovering = false;\n\n  // Canvas context and dimensions\n  protected context: CanvasRenderingContext2D | null = null;\n  protected canvasWidth = 0;\n  protected canvasHeight = 0;\n  protected centerX = 0;\n  protected centerY = 0;\n\n  // Performance monitoring\n  protected performanceMonitor: PerformanceMonitor;\n  protected performanceManager: ThemePerformanceManager | null = null;\n  protected performanceSettings: PerformanceSettings;\n  protected currentLODSettings: LODSettings | null = null;\n  protected lastFrameTime = 0;\n\n  // Animation timing\n  protected animationTime = 0;\n  protected deltaTimeAccumulator = 0;\n\n  constructor() {\n    this.performanceMonitor = new PerformanceMonitor();\n    \n    // Default performance settings (will be overridden by capability detection)\n    this.performanceSettings = {\n      targetFPS: 30,\n      maxParticles: 100,\n      enableEffects: true,\n      enableGlow: false,\n      qualityLevel: 'medium'\n    };\n\n    this.initializePerformanceCallbacks();\n  }\n\n  /**\n   * Initialize the theme with canvas context and dimensions\n   */\n  init(context: CanvasRenderingContext2D, width: number, height: number): void {\n    this.context = context;\n    this.updateDimensions(width, height);\n    this.initializePerformanceManager();\n    this.setupPerformanceSettings();\n    this.onInit();\n  }\n\n  /**\n   * Update canvas dimensions\n   */\n  protected updateDimensions(width: number, height: number): void {\n    this.canvasWidth = width;\n    this.canvasHeight = height;\n    this.centerX = width / 2;\n    this.centerY = height / 2;\n    \n    // Update performance manager with new dimensions\n    if (this.performanceManager) {\n      this.performanceManager.getManagers().culler.updateBounds(width, height);\n    }\n  }\n\n  /**\n   * Main drawing function called every frame\n   */\n  draw(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void {\n    // Update performance monitoring\n    const metrics = this.performanceMonitor.update();\n    \n    // Update performance manager and check if we should render\n    if (this.performanceManager) {\n      const perfUpdate = this.performanceManager.update(metrics, displayWidth, displayHeight);\n      this.currentLODSettings = perfUpdate.lodSettings;\n      \n      // Skip rendering if performance manager suggests it\n      if (!perfUpdate.shouldRender) {\n        return;\n      }\n    }\n    \n    // Update dimensions if changed\n    if (this.canvasWidth !== displayWidth || this.canvasHeight !== displayHeight) {\n      this.updateDimensions(displayWidth, displayHeight);\n    }\n\n    // Update animation timing\n    this.updateTiming(deltaTime);\n\n    // Update state transitions\n    this.updateStateTransition();\n\n    // Update mouse influence\n    this.updateMouseInfluence();\n\n    // Clear canvas with theme-specific background\n    this.clearCanvas(context, displayWidth, displayHeight);\n\n    // Delegate to theme-specific drawing\n    this.onDraw(context, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n\n    // Draw performance overlay if enabled\n    if (this.shouldShowPerformanceOverlay()) {\n      this.drawPerformanceOverlay(context, metrics);\n    }\n  }\n\n  /**\n   * Handle state changes with smooth transitions\n   */\n  onUserSpeaking(): void {\n    this.setTargetState(VoiceState.USER_SPEAKING);\n    this.onStateChange(VoiceState.USER_SPEAKING);\n  }\n\n  onProcessing(): void {\n    this.setTargetState(VoiceState.PROCESSING);\n    this.onStateChange(VoiceState.PROCESSING);\n  }\n\n  onAiSpeaking(): void {\n    this.setTargetState(VoiceState.AI_SPEAKING);\n    this.onStateChange(VoiceState.AI_SPEAKING);\n  }\n\n  reset(): void {\n    this.setTargetState(VoiceState.IDLE);\n    this.onStateChange(VoiceState.IDLE);\n    this.onReset();\n  }\n\n  /**\n   * Handle mouse/touch position updates\n   */\n  setMousePosition(x: number, y: number, canvasWidth: number, canvasHeight: number): void {\n    this.mouseX = x;\n    this.mouseY = y;\n    this.normalizedMouseX = (x / canvasWidth) * 2 - 1; // -1 to 1\n    this.normalizedMouseY = (y / canvasHeight) * 2 - 1; // -1 to 1\n    this.targetMouseInfluence = this.isHovering ? 1 : 0.3;\n    this.onMouseMove(x, y, this.normalizedMouseX, this.normalizedMouseY);\n  }\n\n  /**\n   * Handle hover state changes\n   */\n  setHovering(hovering: boolean): void {\n    this.isHovering = hovering;\n    this.targetMouseInfluence = hovering ? 1 : 0;\n    this.onHoverChange(hovering);\n  }\n\n  /**\n   * Cleanup resources\n   */\n  dispose(): void {\n    this.onDispose();\n  }\n\n  /**\n   * Get performance metrics\n   */\n  getPerformanceMetrics() {\n    const baseMetrics = this.performanceMonitor.getCurrentMetrics();\n    const themeMetrics = this.getThemeSpecificMetrics();\n    return { ...baseMetrics, ...themeMetrics };\n  }\n\n  // Protected methods for subclasses to override\n\n  /**\n   * Theme-specific initialization\n   */\n  protected onInit(): void {}\n\n  /**\n   * Theme-specific drawing logic\n   */\n  protected abstract onDraw(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number,\n    deltaTime: number\n  ): void;\n\n  /**\n   * Called when state changes\n   */\n  protected onStateChange(newState: VoiceState): void {}\n\n  /**\n   * Called when reset\n   */\n  protected onReset(): void {}\n\n  /**\n   * Called when mouse moves\n   */\n  protected onMouseMove(x: number, y: number, normalizedX: number, normalizedY: number): void {}\n\n  /**\n   * Called when hover state changes\n   */\n  protected onHoverChange(hovering: boolean): void {}\n\n  /**\n   * Called when disposing\n   */\n  protected onDispose(): void {}\n\n  /**\n   * Get theme-specific performance metrics\n   */\n  protected getThemeSpecificMetrics(): Record<string, any> {\n    return {};\n  }\n\n  /**\n   * Clear canvas with theme-specific background\n   */\n  protected clearCanvas(context: CanvasRenderingContext2D, width: number, height: number): void {\n    context.clearRect(0, 0, width, height);\n  }\n\n  // Private helper methods\n\n  private async setupPerformanceSettings(): Promise<void> {\n    try {\n      const detector = DeviceCapabilityDetector.getInstance();\n      const capabilities = await detector.detectCapabilities();\n      \n      // Adjust performance settings based on device capabilities\n      if (capabilities.performanceLevel === 'low' || capabilities.isLowPowerDevice) {\n        this.performanceSettings = {\n          targetFPS: 24,\n          maxParticles: this.getOptimalParticleCount('low'),\n          enableEffects: false,\n          enableGlow: false,\n          qualityLevel: 'low'\n        };\n      } else if (capabilities.performanceLevel === 'medium') {\n        this.performanceSettings = {\n          targetFPS: 30,\n          maxParticles: this.getOptimalParticleCount('medium'),\n          enableEffects: true,\n          enableGlow: false,\n          qualityLevel: 'medium'\n        };\n      } else {\n        this.performanceSettings = {\n          targetFPS: 60,\n          maxParticles: this.getOptimalParticleCount('high'),\n          enableEffects: true,\n          enableGlow: true,\n          qualityLevel: 'high'\n        };\n      }\n    } catch (error) {\n      console.warn('Failed to detect device capabilities, using default settings:', error);\n    }\n  }\n\n  private initializePerformanceManager(): void {\n    this.performanceManager = new ThemePerformanceManager(this.canvasWidth, this.canvasHeight);\n  }\n\n  private getOptimalParticleCount(quality: 'low' | 'medium' | 'high'): number {\n    const baseCount = {\n      light: { low: 30, medium: 80, high: 150 },\n      medium: { low: 50, medium: 120, high: 250 },\n      heavy: { low: 20, medium: 60, high: 120 }\n    };\n\n    return baseCount[this.performanceProfile][quality];\n  }\n\n  private initializePerformanceCallbacks(): void {\n    this.performanceMonitor.setCallbacks({\n      onPerformanceWarning: (metrics) => {\n        console.warn(`[${this.id}] Performance warning:`, metrics);\n        this.adjustPerformanceSettings(0.8);\n      },\n      onPerformanceCritical: (metrics) => {\n        console.error(`[${this.id}] Critical performance:`, metrics);\n        this.adjustPerformanceSettings(0.6);\n      }\n    });\n  }\n\n  private adjustPerformanceSettings(factor: number): void {\n    this.performanceSettings.maxParticles = Math.floor(this.performanceSettings.maxParticles * factor);\n    this.performanceSettings.enableEffects = false;\n    this.performanceSettings.enableGlow = false;\n  }\n\n  private setTargetState(state: VoiceState): void {\n    if (this.targetState !== state) {\n      this.targetState = state;\n      this.stateTransition = 0;\n    }\n  }\n\n  private updateStateTransition(): void {\n    if (this.currentState !== this.targetState) {\n      this.stateTransition += this.stateTransitionSpeed;\n      if (this.stateTransition >= 1) {\n        this.currentState = this.targetState;\n        this.stateTransition = 1;\n      }\n    }\n  }\n\n  private updateMouseInfluence(): void {\n    this.mouseInfluence = lerp(this.mouseInfluence, this.targetMouseInfluence, 0.1);\n  }\n\n  private updateTiming(deltaTime: number): void {\n    this.deltaTimeAccumulator += deltaTime;\n    this.animationTime += deltaTime;\n  }\n\n  private shouldShowPerformanceOverlay(): boolean {\n    // Only show in development or when explicitly enabled\n    return process.env.NODE_ENV === 'development' && \n           localStorage.getItem('voice-performance-overlay') === 'true';\n  }\n\n  private drawPerformanceOverlay(context: CanvasRenderingContext2D, metrics: any): void {\n    context.save();\n    context.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    context.fillRect(10, 10, 200, 80);\n    context.fillStyle = 'white';\n    context.font = '12px monospace';\n    context.fillText(`Theme: ${this.name}`, 15, 25);\n    context.fillText(`FPS: ${Math.round(metrics.fps)}`, 15, 40);\n    context.fillText(`Frame: ${Math.round(metrics.frameTime)}ms`, 15, 55);\n    context.fillText(`State: ${this.currentState}`, 15, 70);\n    context.fillText(`Mouse: ${Math.round(this.mouseInfluence * 100)}%`, 15, 85);\n    context.restore();\n  }\n\n  // Protected utility methods for subclasses\n\n  /**\n   * Get color interpolated between states\n   */\n  protected getStateColor(idleColor: string, activeColor: string): string {\n    if (this.stateTransition === 0) return idleColor;\n    if (this.stateTransition === 1) return activeColor;\n    \n    // Simple color interpolation (for more complex colors, use Color class)\n    return activeColor; // Simplified for now\n  }\n\n  /**\n   * Get value interpolated by mouse influence\n   */\n  protected getMouseInfluencedValue(baseValue: number, influencedValue: number): number {\n    return lerp(baseValue, influencedValue, this.mouseInfluence);\n  }\n\n  /**\n   * Check if effects should be enabled based on performance settings\n   */\n  protected shouldEnableEffects(): boolean {\n    if (this.currentLODSettings) {\n      return !this.currentLODSettings.effectsDisabled;\n    }\n    return this.performanceSettings.enableEffects;\n  }\n\n  /**\n   * Check if glow effects should be enabled\n   */\n  protected shouldEnableGlow(): boolean {\n    if (this.currentLODSettings) {\n      return !this.currentLODSettings.glowDisabled;\n    }\n    return this.performanceSettings.enableGlow;\n  }\n\n  /**\n   * Get maximum particle count for performance\n   */\n  protected getMaxParticles(): number {\n    const baseMax = this.performanceSettings.maxParticles;\n    if (this.currentLODSettings) {\n      return Math.floor(baseMax * (1 - this.currentLODSettings.particleReduction));\n    }\n    return baseMax;\n  }\n\n  /**\n   * Get current LOD level for theme-specific optimizations\n   */\n  protected getCurrentLODLevel(): number {\n    return this.currentLODSettings?.level || 1;\n  }\n\n  /**\n   * Check if simplified rendering should be used\n   */\n  protected shouldUseSimplifiedRendering(): boolean {\n    return this.currentLODSettings?.simplifiedRendering || false;\n  }\n\n  /**\n   * Get performance managers for advanced optimizations\n   */\n  protected getPerformanceManagers() {\n    return this.performanceManager?.getManagers() || null;\n  }\n\n  /**\n   * Check if a particle is visible (for culling)\n   */\n  protected isParticleVisible(x: number, y: number, z = 0, size = 0): boolean {\n    const managers = this.getPerformanceManagers();\n    if (managers?.culler) {\n      return managers.culler.isVisible(x, y, z, size);\n    }\n    return true; // No culling available, assume visible\n  }\n\n  /**\n   * Filter particles to only visible ones\n   */\n  protected cullParticles<T extends { x: number; y: number; z?: number; size?: number }>(particles: T[]): T[] {\n    const managers = this.getPerformanceManagers();\n    if (managers?.culler) {\n      return managers.culler.cullParticles(particles);\n    }\n    return particles; // No culling available, return all\n  }\n\n  /**\n   * Add particle to batch renderer for optimized drawing\n   */\n  protected addToBatch(\n    color: string,\n    x: number,\n    y: number, \n    size: number,\n    alpha: number,\n    glowEnabled = false,\n    effectsEnabled = false\n  ): void {\n    const managers = this.getPerformanceManagers();\n    if (managers?.batchRenderer) {\n      managers.batchRenderer.addToBatch(color, x, y, size, alpha, glowEnabled, effectsEnabled);\n    }\n  }\n\n  /**\n   * Render all batches (call at end of draw)\n   */\n  protected renderBatches(context: CanvasRenderingContext2D): void {\n    const managers = this.getPerformanceManagers();\n    if (managers?.batchRenderer && this.currentLODSettings) {\n      managers.batchRenderer.renderBatches(context, this.currentLODSettings);\n      managers.batchRenderer.clearBatches();\n    }\n  }\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 70396;\nmodule.exports = webpackEmptyContext;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + {\"135\":\"befad026ff32498c3edd\",\"139\":\"130c54ec139bcff70256\",\"236\":\"54b57ebba9cba0bdade5\",\"258\":\"f45ce4b794009e714052\",\"352\":\"061cfbeef9ab3225a22d\",\"365\":\"bd729c9230ff736cbcfb\",\"404\":\"8b85511b2acdad4beb58\",\"482\":\"d80085ef323abedc197b\",\"613\":\"9ed462a41198f9333b95\",\"638\":\"c521f61bc46fd1fa84b5\",\"964\":\"4fa5a30a729d84bb866b\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t437: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkcustomgpt_ui\"] = self[\"webpackChunkcustomgpt_ui\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","__webpack_require__.nc = undefined;","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [96], () => (__webpack_require__(52848)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","lerp","start","end","factor","clamp","value","min","max","Math","random","distance2D","x1","y1","x2","y2","dx","dy","sqrt","hslToRgb","h","s","l","hue2rgb","p","q","t","round","DefaultTheme","BaseTheme","constructor","super","_defineProperty","this","sphereRadius","gemini","idle","r","g","b","gradient","userSpeaking","processing","aiSpeaking","hover","instagram","ocean","sunset","aurora","particlePool","ObjectPool","x","y","z","velX","velY","velZ","age","dead","right","projX","projY","alpha","attack","hold","decay","initValue","holdValue","lastValue","stuckTime","accelX","accelY","accelZ","particle","next","undefined","prev","maxParticles","setColor","getColorPalette","onInit","getMaxParticles","onDraw","context","width","height","centerX","centerY","deltaTime","updateColors","updateParticles","renderParticles","onStateChange","newState","palette","VoiceState","USER_SPEAKING","framesPerRotation","colorTransitionSpeed","numToAddEachFrame","particleAlpha","particleRad","gravity","PROCESSING","AI_SPEAKING","IDLE","getThemeSpecificMetrics","particleCount","currentParticleCount","colorScheme","currentColorScheme","setColorScheme","scheme","colorSchemes","targetR","targetG","targetB","currentR","currentG","currentB","count","wait","dynamicNumParticles","floor","mouseInfluence","particlesToCreate","i","createParticle","dynamicTurnSpeed","PI","turnAngle","theta","phi","acos","mouseDistortion","mouseBias","normalizedMouseX","normalizedMouseY","x0","sin","cos","y0","z0","velocityMultiplier","addParticle","sphereCenterY","sphereCenterZ","alphaMultiplier","vx0","vy0","vz0","newParticle","acquire","particleList","first","sinAngle","cosAngle","zMax","focalLength","nextParticle","randAccelX","randAccelY","randAccelZ","rotX","rotZ","m","radiusScale","updateParticleAlpha","recycleParticle","renderParticle","scale","finalAlpha","zeroAlphaDepth","particleSize","fillStyle","beginPath","arc","fill","shouldEnableGlow","release","onDispose","clear","PerformanceMonitor","targetFPS","lastTime","performance","now","update","currentTime","frameTime","frameCount","fps","fpsHistory","push","frameTimeHistory","length","maxHistorySize","shift","avgFPS","reduce","sum","currentFPS","performanceRatio","criticalThreshold","callbacks","onPerformanceCritical","warningThreshold","onPerformanceWarning","onFPSUpdate","setCallbacks","getCurrentMetrics","reset","DeviceCapabilityDetector","getInstance","instance","detectCapabilities","capabilities","isMobile","detectMobile","supportsWebGL","detectWebGL","hardwareConcurrency","navigator","memoryGB","memory","jsHeapSizeLimit","performanceLevel","benchmarkPerformance","isLowPowerDevice","detectLowPowerDevice","test","userAgent","canvas","document","createElement","getContext","cores","Promise","resolve","startTime","operations","benchmark","requestAnimationFrame","getCapabilities","createFn","resetFn","initialSize","maxSize","Set","available","obj","pop","inUse","size","oldest","values","add","has","delete","getStats","total","THEME_COOKIE_NAME","getThemeFromCookie","window","themeCookie","cookie","split","find","trim","startsWith","applyThemeToDocument","theme","documentElement","classList","remove","setTheme","setThemeCookie","create","persist","set","get","apiKey","baseURL","setApiKey","key","setBaseURL","url","setThemeUtil","name","partialize","state","onRehydrateStorage","initializeTheme","cn","inputs","twMerge","clsx","generateId","toString","substring","Date","formatFileSize","bytes","log","parseFloat","pow","toFixed","formatTimestamp","timestamp","date","diffInMs","getTime","diffInMinutes","diffInHours","diffInDays","toLocaleDateString","async","copyToClipboard","text","clipboard","writeText","error","parseStreamChunk","chunk","slice","type","data","parsed","JSON","parse","content","citations","message","delta","choices","jsonError","parseError","includes","generateConversationName","firstMessage","cleanedMessage","replace","title","join","CONSTANTS","MAX_FILE_SIZE","ACCEPTED_FILE_TYPES","MAX_MESSAGE_LENGTH","API_TIMEOUT","STREAM_TIMEOUT","RETRY_ATTEMPTS","RETRY_DELAY","Logger","isClient","formatMessage","entry","level","category","stack","formatted","toUpperCase","stringify","writeToFile","toISOString","code","status","logs","info","warn","getLogs","clearLogs","apiRequest","endpoint","method","apiResponse","apiError","authCheck","authError","navigation","route","params","storeAction","store","action","logger","DEMO_STORAGE_KEYS","UsageTracker","process","NEXT_PUBLIC_ANALYTICS_ENDPOINT","startFlushTimer","track","event","fullEvent","eventType","eventName","deploymentMode","getDeploymentMode","demoType","getDemoType","sessionId","getSessionId","clientVersion","NEXT_PUBLIC_APP_VERSION","referrer","eventQueue","batchSize","flush","trackApiCall","statusCode","trackSessionStart","metadata","mode","trackSessionEnd","reason","trackLimitReached","limitType","trackError","localStorage","getItem","sessionData","sessionStorage","e","demoSession","flushTimer","clearInterval","setInterval","flushInterval","events","fetch","analyticsEndpoint","headers","body","unshift","forceFlush","usageTracker","addEventListener","hidden","DEMO_ERROR_MESSAGES","retryAfter","proxyClient","Map","isDemoMode","timeout","setDemoApiKey","demoApiKey","request","options","requestId","controller","AbortController","abortControllers","timeoutId","setTimeout","abort","isFormData","FormData","baseHeaders","session","response","signal","clearTimeout","responseData","json","ok","isFreeTrialMode","errorInfo","getErrorMessage","isFreeTrialError","Error","streamRequest","errorMessage","errorText","errorData","cancelRequest","Array","from","entries","forEach","cancelAllRequests","getAgents","queryParams","URLSearchParams","page","append","per_page","queryString","createAgent","getAgent","id","updateAgent","formData","Object","String","deleteAgent","replicateAgent","getAgentStats","getAgentSettings","updateAgentSettings","settings","getProjectPlugins","projectId","updateProjectPlugin","pluginId","getConversations","order","orderBy","userFilter","createConversation","updateConversation","deleteConversation","getMessages","sendMessage","sendMessageStream","onChunk","onError","onComplete","reader","stream","getReader","decoder","TextDecoder","buffer","done","read","decode","lines","line","getMessageById","messageId","updateMessageFeedback","feedback","getCitation","citationId","previewCitationFile","uploadFile","file","getTrafficReport","getQueriesReport","getConversationsReport","getAnalysisReport","interval","getPages","limit","crawl_status","index_status","deletePage","pageId","reindexPage","getPageMetadata","updatePageMetadata","getLicenses","createLicense","getLicense","licenseId","updateLicense","deleteLicense","getSources","createSitemapSource","sitemap_path","executive_js","data_refresh_frequency","create_new_pages","remove_unexist_pages","refresh_existing_pages","uploadFileSource","updateSourceSettings","sourceId","deleteSource","instantSyncSource","getCustomerIntelligence","getUserLimits","getUserProfile","updateUserProfile","getDemoUsageStats","cleanupDemoSession","getClient","useConversationStore","conversations","currentConversation","loading","currentPage","totalPages","totalConversations","perPage","sortOrder","sortBy","fetchConversations","client","searchQuery","searchMode","dateFilter","responseType","hasData","dataLength","isArray","paginationData","map","c","messagesCount","messages","current_page","last_page","errorType","newConversation","selectConversation","conversation","conversationId","project_id","session_id","updatedConversations","filter","updatedConversation","ensureConversation","__customgpt_current_session","__customgpt_session","__customgpt_sessions","sessions","sessionIds","keys","substr","setItem","useChatSettingsStore","getSettings","agentId","response_source","chatbot_model","custom_persona","agent_capability","updateSettings","updates","clearSettings","newSettings","StreamHandler","config","retryAttempts","retryDelay","processStream","abortController","currentMessage","isComplete","cancel","processLine","releaseLock","citation","onCitation","getCurrentMessage","isStreaming","globalStreamManager","maxConcurrentStreams","startStream","streamId","streams","cancelStream","handler","cancelAllStreams","getActiveStreams","getStreamStatus","exists","getActiveStreamCount","MESSAGES_STORAGE_KEY","saveMessagesToStorage","stored","cache","fetchCitationDetails","citationIds","validCitationIds","validIds","isNaN","index","arr","indexOf","original","valid","filtered","validateCitationIds","source","description","hasContent","hasUrl","requested","fetched","success","useMessageStore","streamingMessage","files","__customgpt_demo_mode","agentStore","useAgentStore","getState","conversationStore","currentAgent","catch","agentName","project_name","messageLength","hasFiles","hasSessionId","isNew","message_count","userMessage","role","addMessage","assistantMessage","sourceIds","all","fileCount","messageContent","hasSourceIds","requestData","prompt","source_ids","contentLength","contentPreview","updateStreamingMessage","current","then","citationDetails","updatedCurrent","streamError","finalMessage","messageData","openai_response","lastUserMessage","details","user_id","conversation_id","updated_at","prompt_id","user_ip","user_agent","external_id","request_source","fallbackError","apiMessages","latestApiMessage","created_at","user_query","existingCitations","response_feedback","reaction","hasDetails","citationCount","enrichmentError","setupError","currentAgentFor403","is_chat_active","newMessages","conversationMessages","existingIndex","findIndex","clearMessages","promptId","promptIdMatch","match","parseInt","toast","updatedMessage","feedbackValue","getMessagesForConversation","cancelStreaming","loadMessages","availableConversations","messageTypes","formattedMessages","msg","baseTimestamp","formattedCount","sort","a","firstMessageTime","lastMessageTime","localSendingMessages","mergedMessages","localMsg","insertIndex","splice","cachedMessages","loadMessagesFromStorage","messageCount","clearError","setMessagesForConversation","agents","paginationMeta","fetchAgents","hasMore","nestedData","paginatedResponse","totalCount","settingsResponse","agentWithSettings","loadMoreAgents","nextPage","newAgents","responseTotal","responsePage","findAgent","query","agent","toLowerCase","newAgent","selectAgent","messageStore","setAgents","updatedAgent","filteredAgents","formatDate","sidebarOpen","settingsOpen","fontSize","setSidebarOpen","open","setSettingsOpen","className","setFontSize","root","getDefaultDateRange","endDate","startDate","setDate","getDate","activeRequests","analytics","dateRange","fetchAnalytics","trafficReport","queriesReport","conversationsReport","analysisReport","conversationsTotal","queriesTotal","avgQueriesPerConv","average_queries_per_conversation","Number","analyticsData","active","trend","item","created_at_interval","queries_number","queries","successful","query_status","failed","avgResponseTime","topQueries","traffic","uniqueUsers","sources","acc","request_source_number","pageViews","avgSessionDuration","bounceRate","users","statistics","totalMessages","avgMessagesPerConversation","satisfactionRate","responseAccuracy","setDateRange","exportAnalytics","format","jsonData","blob","Blob","URL","createObjectURL","href","download","appendChild","click","removeChild","revokeObjectURL","pages","paginationInfo","fetchPages","setQueryParams","currentSource","syncStatus","syncing","fetchSources","allSources","sitemaps","apiSource","uploads","fetchSource","uploadSources","uploadPromises","reject","updateSource","bulkDelete","syncSources","progress","setSearchQuery","setFilter","selectSource","profile","fetchProfile","updateProfile","profilePhoto","errors","profile_photo","flat","settingsLoading","settingsError","plugins","pluginsLoading","pluginsError","stats","statsLoading","statsError","fetchSettings","requestKey","settingsUpdate","question","File","fetchPlugins","pluginsData","updatePlugin","enabled","plugin","fetchStats","statsData","licenses","fetchLicenses","dataType","errorStatus","errorCode","responseText","dataStructure","licenseKey","newLicense","license","licenseName","buttonVariants","cva","variants","variant","default","destructive","outline","secondary","ghost","link","premium","sm","lg","xl","icon","defaultVariants","Button","React","asChild","loadingText","children","disabled","onClick","props","ref","ripples","setRipples","handleClick","rect","currentTarget","getBoundingClientRect","rippleX","clientX","left","rippleY","clientY","top","rippleId","ripple","_jsxs","_jsx","style","transform","animation","xmlns","viewBox","cx","cy","stroke","strokeWidth","d","displayName","sizeVariants","xs","container","md","shapeVariants","circle","rounded","square","Avatar","src","alt","shape","fallback","isSelected","imageError","setImageError","avatarUrl","chatbot_avatar","altText","sizeClasses","shapeClass","backgroundClass","handleImageError","renderFallbackIcon","iconClass","User","Bot","AgentAvatar","UserAvatar","CitationCard","isExpanded","onToggle","onPreviewClick","ChevronDown","AnimatePresence","motion","div","initial","opacity","animate","exit","transition","duration","target","rel","ExternalLink","FileText","CitationList","onCitationClick","maxVisible","expanded","setExpanded","useState","showAll","setShowAll","visibleCitations","BookOpen","idx","delay","newExpanded","toggleExpanded","MessageDetails","setIsExpanded","handleCopyValue","Info","ChevronUp","detailsText","Copy","DetailRow","label","onCopy","toLocaleString","truncate","CodeBlock","language","copied","setCopied","SyntaxHighlighter","oneDark","customStyle","margin","borderRadius","StreamingCursor","MessageContent","cleanedContent","ReactMarkdown","remarkPlugins","remarkGfm","components","exec","MessageActions","onFeedback","setFeedback","handleFeedback","ThumbsUp","ThumbsDown","handleRegenerate","RotateCw","Message","isLast","isUser","DemoModeContext","createContext","isRuntimeDemoMode","isInitialized","useDemoModeContext","useContext","Spinner","Loader2","Skeleton","LoadingOverlay","visible","blur","MessageSkeleton","isAssistant","_","ConversationSkeleton","TooltipProvider","TooltipPrimitive","Tooltip","TooltipTrigger","TooltipContent","sideOffset","SpeechToTextButton","onTranscription","onTranscriptionStart","onTranscriptionEnd","isRecording","setIsRecording","isProcessing","setIsProcessing","recordingDuration","setRecordingDuration","mediaRecorderRef","useRef","audioChunksRef","recordingTimeoutRef","durationIntervalRef","stopRecording","useCallback","stop","startRecording","mediaDevices","getUserMedia","audio","mimeType","MediaRecorder","isTypeSupported","mediaRecorder","ondataavailable","onstop","audioBlob","getTracks","processAudio","elapsed","FileReader","readAsDataURL","onloadend","base64Data","result","__demoOpenAIKey","onerror","isActive","formatDuration","seconds","padStart","MicOff","Mic","AnimatedVoiceIcon","barHeights","bars","gap","animationDelay","background","DropdownMenu","DropdownMenuPrimitive","DropdownMenuTrigger","inset","ChevronRight","DropdownMenuContent","DropdownMenuItem","checked","Check","Circle","DropdownMenuLabel","DropdownMenuSeparator","FileChip","onRemove","fileIcon","fileType","getFileIcon","_Fragment","AlertCircle","X","FileUploadButton","onUpload","fileInputRef","multiple","accept","onChange","Paperclip","RESPONSE_SOURCES","MessageSquare","Brain","Settings","CHATBOT_MODELS","Sparkles","Zap","COMMON_PERSONAS","AGENT_CAPABILITIES","enterprise","ChatInput","onSend","placeholder","maxLength","onVoiceClick","input","setInput","setFiles","isTranscribing","setIsTranscribing","isLoadingSettings","setIsLoadingSettings","showSettings","setShowSettings","textareaRef","updateLocalSettings","loadAgentSettings","loadedSettings","useEffect","updateSetting","validModels","some","adjustTextareaHeight","textarea","scrollHeight","maxHeight","handleSubmit","preventDefault","fileObjects","f","focus","handleFileUpload","newFiles","uploadFiles","simulateUpload","getRootProps","getInputProps","isDragActive","useDropzone","onDrop","noClick","noKeyboard","canSend","handleTranscription","prevInput","newInput","handleTranscriptionStart","handleTranscriptionEnd","Upload","removeFile","fileId","onSubmit","onKeyDown","shiftKey","rows","overflowY","Send","SlidersHorizontal","align","Icon","model","persona","capability","TypingIndicator","iconSizeClasses","display","parent","parentElement","innerHTML","AgentItem","onSelect","onSettingsClick","stopPropagation","AgentSelector","isOpen","setIsOpen","isSelectingAgent","setIsSelectingAgent","loadingSettings","setLoadingSettings","dropdownRef","fetchAgentSettings","agentsNeedingSettings","agentsToLoad","newSet","settingsPromises","results","updatedAgents","handleClickOutside","contains","removeEventListener","handleRefresh","handleSelectAgent","RefreshCw","willOpen","location","BarChart3","useMediaQuery","matches","setMatches","media","matchMedia","listener","useBreakpoint","isTablet","isDesktop","isLargeScreen","isTouchDevice","isMobileOrTablet","isTabletOrDesktop","CitationDetailsModal","onClose","setLoading","setError","citationData","setCitationData","effectiveProjectId","hasImage","image","err","Loader","Globe","ImageIcon","CitationFilePreview","fileName","fileContent","setFileContent","contentType","setContentType","fetchFilePreview","content_type","handleDownload","Download","ConversationManager","maxConversations","currentConversationId","onConversationChange","onCreateConversation","refreshKey","setConversations","editingId","setEditingId","editTitle","setEditTitle","loadConversations","handleEditSave","updated","MessageCircle","strokeLinecap","strokeLinejoin","handleCreateConversation","Plus","autoFocus","handleSelectConversation","createdAt","handleEditStart","Edit2","handleDelete","Trash2","MessageErrorDisplay","propStatusCode","onRetry","parsedStatusCode","statusMatch","finalStatusCode","errorDetails","getErrorDetails","iconClassName","textClassName","UserX","showSupport","Search","CreditCard","supportUrl","ServerCrash","showRetry","XCircle","WidgetContext","WidgetStoreContext","useIsInWidgetContext","useWidgetStores","stores","isInWidget","widgetStores","globalStore","useGlobalMessageStore","widgetStore","useStore","useGlobalConversationStore","useGlobalAgentStore","ThemeManager","easing","crossfade","registerBuiltInThemes","initialize","currentTheme","init","registerTheme","registration","registeredThemes","unregisterTheme","themeId","getAvailableThemes","reg","getThemeMetadata","switchTheme","transitionOptions","isTransitioning","onThemeError","newTheme","factory","performThemeTransition","getCurrentTheme","getCurrentThemeId","draw","displayWidth","displayHeight","projCenterX","projCenterY","drawTransition","onUserSpeaking","transitionTheme","onProcessing","onAiSpeaking","setMousePosition","canvasWidth","canvasHeight","setHovering","hovering","getPerformanceMetrics","dispose","performanceProfile","previewColors","previewDescription","StarfieldTheme","JarvisTheme","LegoTheme","StarWarsTheme","OceanWaveTheme","NFTTheme","NothingPhoneTheme","MinecraftTheme","FuturisticTheme","VintageModernTheme","AuroraTheme","oldTheme","oldThemeId","transitionProgress","onTransitionStart","applyEasing","completeTransition","onThemeChange","onTransitionComplete","tempCanvas1","tempCanvas2","tempCtx1","tempCtx2","clearRect","globalAlpha","drawImage","Canvas","forwardRef","internalRef","canvasRef","themeManagerRef","isInitializedRef","themeManager","resizeCanvas","innerWidth","innerHeight","debouncedResize","func","args","debounce","handleMouseMove","lastCall","timeSinceLastCall","throttle","handleMouseEnter","handleMouseLeave","animationFrameId","frameInterval","fpsTime","render","currentWidth","currentHeight","currentProjCenterX","currentProjCenterY","cancelAnimationFrame","getThemeManager","useVoiceSettingsStore","selectedVoice","selectedPersona","isVoiceModalOpen","setVoice","voice","setPersona","setVoiceModalOpen","VoiceSettings","previewVoice","setPreviewVoice","previewPersona","setPreviewPersona","desc","StreamingTTSManager","initAudioContext","audioContext","AudioContext","webkitAudioContext","resume","addTextChunk","audioBuffer","textToSpeech","audioQueue","isPlaying","playNextChunk","addAudioBuffer","addAudioBufferWithId","chunkId","pendingChunks","nextExpectedChunkId","response_format","arrayBuffer","decodeAudioData","onPlaybackComplete","createBufferSource","connect","destination","onended","stopPlayback","resetChunkCounter","isCurrentlyPlaying","getQueueLength","onPlaybackCompleted","callback","onStreamingError","destroy","close","speechManager","debug","stopSourceIfNeeded","audioLength","audioDuration","onReset","sourceIsStarted","streamingTTS","validate","sendData","createAudioBlob","wavBuffer","utils","encodeWAV","samples","sendStreamingData","voiceSettings","conversationLength","conversationThusFar","audioSize","lastMessages","preview","base64Encode","__demoCustomGPTKey","processStreamingResponse","handleError","fullResponse","transcript","currentStreamingActive","onStreamingTextChunk","audioUrl","audioId","queueAudioChunk","queueAudioChunkById","responseLength","onTranscriptReceived","onResponseReceived","onStreamingComplete","audioDataUrl","numericChunkId","sampleRate","numberOfChannels","clonedBlob","minDuration","hasCallbacks","setProjectId","setSessionId","setVoiceSettings","onDebug","str","TextEncoder","encode","btoa","fromCharCode","Uint8Array","base64Decode","base64","binaryStr","atob","char","charCodeAt","clearConversation","getConversationThusFar","setConversationHistory","cleanedMessages","self","originalCount","stopAudio","parseMarkdownForVoice","encrypt","decrypt","encrypted","isValidApiKey","trimmedKey","STORAGE_KEY","OPENAI_STORAGE_KEY","ENCRYPTION_KEY","SESSION_KEY","SESSION_TIMEOUT","useDemoStore","openAIApiKey","encryptionKey","isAuthenticated","sessionStartTime","sessionTimeout","encKey","array","crypto","getRandomValues","byte","generateKey","sessionInfo","setOpenAIApiKey","removeItem","clearApiKey","validateSession","initializeFromStorage","restoreSession","encryptedOpenAI","openAIKey","VoiceModalContent","projectName","setTranscript","agentResponse","setAgentResponse","isManualRecording","setIsManualRecording","setMediaRecorder","apiKeyError","setApiKeyError","isAgentSpeaking","setIsAgentSpeaking","isSettingsOpen","setIsSettingsOpen","voiceState","setVoiceState","isStreamingText","setIsStreamingText","streamingResponse","setStreamingResponse","currentUserMessageId","setCurrentUserMessageId","voiceConversation","setVoiceConversation","checkOpenAIKeyAvailability","vad","useMicVAD","preSpeechPadFrames","positiveSpeechThreshold","negativeSpeechThreshold","minSpeechFrames","startOnLoad","workletURL","modelURL","onSpeechStart","onSpeechEnd","onVADMisfire","onMisfire","setupConversation","placeholderUserMessage","targetConversation","errorMsg","newTitle","updatedUserMessage","textChunk","newText","cleanResponse","onStreamingAudioReady","listening","pause","errored","handleToggleListening","recoveryError","permissionError","vadError","handleManualRecording","echoCancellation","noiseSuppression","autoGainControl","recorder","chunks","decodedAudio","channelData","getChannelData","audioArray","resampleRatio","newLength","Float32Array","srcIndex","srcIndexFloor","srcIndexCeil","fraction","hasAutoStarted","setHasAutoStarted","handleStopSpeech","jsx","global","pointerEvents","RotateLoader","color","AlertTriangle","flexDirection","zIndex","animationDirection","animationDuration","StopCircle","VoiceModal","DEFAULT_EXAMPLE_PROMPTS","ExamplePromptCard","WelcomeMessage","onPromptClick","exampleQuestions","setExampleQuestions","example_questions","questionCount","fetchExampleQuestions","MessageArea","scrollRef","isLoadingMessages","setIsLoadingMessages","prevConversationId","setPrevConversationId","selectedCitationId","setSelectedCitationId","citationModalOpen","setCitationModalOpen","previewCitationId","setPreviewCitationId","previewModalOpen","setPreviewModalOpen","setIsFreeTrialMode","freeTrialFlag","scrollBehavior","scrollTo","behavior","handleCitationClick","citationIndex","citationTitle","handlePreviewClick","filteredMessages","handleMessageFeedback","ChatHeader","onAgentSettings","enableConversationManagement","conversationRefreshKey","ChatContainer","threadId","onMessage","widget","setCurrentConversationId","setIsVoiceModalOpen","voiceError","setVoiceError","agentCount","hasCurrentAgent","currentAgentName","initializeAgents","switchConversation","newConv","configuration","isAuthError","handleVoiceClick","ConversationDetailsModal","onExport","onShare","formatFullTimestamp","weekday","year","month","day","hour","minute","second","timeZoneName","Hash","Calendar","Clock","deleted_at","created_by","Share2","DeleteConversationDialog","conversationName","onConfirm","onCancel","isDeleting","setIsDeleting","ConversationItem","onDelete","onRename","isEditing","setIsEditing","editName","setEditName","showMenu","setShowMenu","showDetails","setShowDetails","showDetailsModal","setShowDetailsModal","showDeleteDialog","setShowDeleteDialog","isLoading","setIsLoading","inputRef","menuRef","select","handleSaveEdit","onBlur","MoreHorizontal","Edit3","conv","shareUrl","origin","ConversationSidebar","isCollapsed","onConversationSelect","isCreating","setIsCreating","showSortFilter","setShowSortFilter","setSearchMode","setDateFilter","isSearching","setIsSearching","debouncedSearch","handleSearchModeChange","filteredConversations","handleRenameConversation","newName","handleSearch","Filter","handleDateFilterChange","Link","handleDeleteConversation","ChatLayout","showSidebar","widgetInstance","sidebarCollapsed","setSidebarCollapsed","mobileSidebarOpen","setMobileSidebarOpen","storeCurrentConversation","handleToggleSidebar","IframeApp","setConfig","isReady","setIsReady","urlParams","search","agentIdParam","iframeConfig","enableCitations","enableFeedback","isolateConversations","setupMessageHandling","postMessageToParent","handleOpen","handleClose","handleConfigUpdate","handleResize","postMessage","newConfig","updatedConfig","Toaster","position","closeButton","toastOptions","marginTop","initIframeApp","getElementById","createRoot","readyState","LODManager","initialLOD","particleReduction","effectsDisabled","glowDisabled","simplifiedRendering","skipFrames","currentLOD","lodProfiles","updateLOD","metrics","lastPerformanceCheck","performanceHistory","adjustLODBasedOnFPS","getCurrentLOD","shouldSkipFrame","FrustumCuller","updateBounds","bounds","bottom","near","far","isVisible","cullParticles","particles","getCullingStats","culled","cullingRatio","BatchRenderer","addToBatch","glowEnabled","effectsEnabled","batchKey","batches","batch","maxBatchSize","renderBatches","lodSettings","save","shouldRenderEffects","shouldRenderGlow","renderSimplifiedBatch","renderFullBatch","restore","moveTo","renderEffects","renderGlow","glowGradient","createRadialGradient","addColorStop","clearBatches","getBatchStats","batchCount","totalParticles","largestBatch","avgBatchSize","MemoryOptimizer","checkMemoryPressure","pressure","shouldCleanup","memInfo","usedJSHeapSize","memoryPressureThreshold","lastGCTime","gcInterval","getOptimizationSuggestions","reduceParticles","clearCaches","disableEffects","simplifyRendering","AnimationController","setTargetFPS","setupVisibilityHandling","actualInterval","shouldRenderFrame","lastFrameTime","getFrameTiming","shouldThrottle","ThemePerformanceManager","lodManager","culler","batchRenderer","memoryOptimizer","animationController","shouldRender","memoryPressure","optimizationActive","getManagers","lod","getPerformanceReport","culling","batching","performanceMonitor","performanceSettings","enableEffects","enableGlow","qualityLevel","initializePerformanceCallbacks","updateDimensions","initializePerformanceManager","setupPerformanceSettings","performanceManager","perfUpdate","currentLODSettings","updateTiming","updateStateTransition","updateMouseInfluence","clearCanvas","shouldShowPerformanceOverlay","drawPerformanceOverlay","setTargetState","mouseX","mouseY","targetMouseInfluence","isHovering","onMouseMove","onHoverChange","normalizedX","normalizedY","detector","getOptimalParticleCount","quality","light","low","medium","high","heavy","adjustPerformanceSettings","targetState","stateTransition","currentState","stateTransitionSpeed","deltaTimeAccumulator","animationTime","fillRect","font","fillText","getStateColor","idleColor","activeColor","getMouseInfluencedValue","baseValue","influencedValue","shouldEnableEffects","baseMax","getCurrentLODLevel","shouldUseSimplifiedRendering","getPerformanceManagers","isParticleVisible","managers","webpackEmptyContext","req","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","n","getter","__esModule","getPrototypeOf","ns","def","getOwnPropertyNames","definition","o","defineProperty","enumerable","promises","u","miniCssF","globalThis","Function","prop","prototype","hasOwnProperty","script","needAttach","scripts","getElementsByTagName","getAttribute","charset","nc","setAttribute","onScriptComplete","onload","doneFns","parentNode","bind","head","Symbol","toStringTag","installedChunks","installedChunkData","promise","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}