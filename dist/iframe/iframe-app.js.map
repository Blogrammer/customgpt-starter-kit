{"version":3,"file":"iframe-app.js","mappings":"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","sources":["webpack://customgpt-ui/webpack/runtime/chunk loaded","webpack://customgpt-ui/webpack/runtime/create fake namespace object","webpack://customgpt-ui/webpack/runtime/load script","webpack://customgpt-ui/./src/lib/voice/utils/math.ts","webpack://customgpt-ui/./src/lib/voice/themes/DefaultTheme.ts","webpack://customgpt-ui/./src/lib/voice/utils/performance.ts","webpack://customgpt-ui/./src/lib/voice/themes/IVoiceTheme.ts","webpack://customgpt-ui/./src/lib/theme.ts","webpack://customgpt-ui/./src/store/config.ts","webpack://customgpt-ui/./src/lib/utils.ts","webpack://customgpt-ui/./src/lib/logger.ts","webpack://customgpt-ui/./src/lib/constants/demo-limits.ts","webpack://customgpt-ui/./src/lib/analytics/usage-tracker.ts","webpack://customgpt-ui/./src/lib/constants/error-messages.ts","webpack://customgpt-ui/./src/lib/api/proxy-client.ts","webpack://customgpt-ui/./src/lib/api/client.ts","webpack://customgpt-ui/./src/store/conversations.ts","webpack://customgpt-ui/./src/store/chat-settings.ts","webpack://customgpt-ui/./src/lib/streaming/handler.ts","webpack://customgpt-ui/./src/store/messages.ts","webpack://customgpt-ui/./src/store/agents.ts","webpack://customgpt-ui/./src/store/analytics.ts","webpack://customgpt-ui/./src/store/ui.ts","webpack://customgpt-ui/./src/store/project-settings.ts","webpack://customgpt-ui/./src/store/pages.ts","webpack://customgpt-ui/./src/store/sources.ts","webpack://customgpt-ui/./src/store/profile.ts","webpack://customgpt-ui/./src/store/licenses.ts","webpack://customgpt-ui/./src/components/ui/button.tsx","webpack://customgpt-ui/./src/components/ui/avatar.tsx","webpack://customgpt-ui/./src/components/chat/CitationList.tsx","webpack://customgpt-ui/./src/components/chat/MessageDetails.tsx","webpack://customgpt-ui/./src/components/chat/Message.tsx","webpack://customgpt-ui/./src/contexts/DemoModeContext.tsx","webpack://customgpt-ui/./src/components/ui/loading.tsx","webpack://customgpt-ui/./src/components/ui/tooltip.tsx","webpack://customgpt-ui/./src/components/voice/SpeechToTextButton.tsx","webpack://customgpt-ui/./src/components/voice/AnimatedVoiceIcon.tsx","webpack://customgpt-ui/./src/components/ui/dropdown-menu.tsx","webpack://customgpt-ui/./src/components/chat/ChatInput.tsx","webpack://customgpt-ui/./src/components/chat/TypingIndicator.tsx","webpack://customgpt-ui/./src/components/chat/AgentSelector.tsx","webpack://customgpt-ui/./src/hooks/useMediaQuery.ts","webpack://customgpt-ui/./src/components/chat/CitationDetailsModal.tsx","webpack://customgpt-ui/./src/components/chat/CitationFilePreview.tsx","webpack://customgpt-ui/./src/components/chat/ConversationManager.tsx","webpack://customgpt-ui/./src/components/chat/MessageErrorDisplay.tsx","webpack://customgpt-ui/./src/widget/WidgetContext.tsx","webpack://customgpt-ui/./src/widget/WidgetStoreContext.tsx","webpack://customgpt-ui/./src/hooks/useWidgetStore.ts","webpack://customgpt-ui/./src/lib/voice/themes/ThemeManager.ts","webpack://customgpt-ui/./src/components/voice/Canvas.tsx","webpack://customgpt-ui/./src/lib/utils/throttle.ts","webpack://customgpt-ui/./src/store/voice-settings.ts","webpack://customgpt-ui/./src/components/voice/VoiceSettings.tsx","webpack://customgpt-ui/./src/lib/voice/streaming-tts.ts","webpack://customgpt-ui/./src/lib/voice/speech-manager.ts","webpack://customgpt-ui/./src/lib/voice/utils.ts","webpack://customgpt-ui/./src/lib/crypto.ts","webpack://customgpt-ui/./src/store/demo.ts","webpack://customgpt-ui/./src/components/voice/VoiceModal.tsx","webpack://customgpt-ui/./src/components/chat/ChatContainer.tsx","webpack://customgpt-ui/./src/components/ui/select.tsx","webpack://customgpt-ui/./src/components/ui/simple-select.tsx","webpack://customgpt-ui/./src/components/chat/ConversationDetailsModal.tsx","webpack://customgpt-ui/./src/components/chat/DeleteConversationDialog.tsx","webpack://customgpt-ui/./src/components/chat/ConversationSidebar.tsx","webpack://customgpt-ui/./src/components/chat/ChatLayout.tsx","webpack://customgpt-ui/./src/widget/iframe-app.tsx","webpack://customgpt-ui/./src/lib/voice/themes/PerformanceOptimizations.ts","webpack://customgpt-ui/./src/lib/voice/themes/BaseTheme.ts","webpack://customgpt-ui/./node_modules/.pnpm/onnxruntime-web@1.22.0/node_modules/onnxruntime-web/dist/ sync","webpack://customgpt-ui/webpack/bootstrap","webpack://customgpt-ui/webpack/runtime/compat get default export","webpack://customgpt-ui/webpack/runtime/define property getters","webpack://customgpt-ui/webpack/runtime/ensure chunk","webpack://customgpt-ui/webpack/runtime/get javascript chunk filename","webpack://customgpt-ui/webpack/runtime/get mini-css chunk filename","webpack://customgpt-ui/webpack/runtime/global","webpack://customgpt-ui/webpack/runtime/hasOwnProperty shorthand","webpack://customgpt-ui/webpack/runtime/make namespace object","webpack://customgpt-ui/webpack/runtime/publicPath","webpack://customgpt-ui/webpack/runtime/jsonp chunk loading","webpack://customgpt-ui/webpack/runtime/nonce","webpack://customgpt-ui/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; (typeof current == 'object' || typeof current == 'function') && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","var inProgress = {};\nvar dataWebpackPrefix = \"customgpt-ui:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = (url, done, key, chunkId) => {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = (prev, event) => {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","/**\n * Mathematical utilities for voice themes\n * \n * Common mathematical functions and helpers used across different voice themes\n */\n\n/**\n * Linear interpolation between two values\n */\nexport const lerp = (start: number, end: number, factor: number): number => {\n  return start + (end - start) * factor;\n};\n\n/**\n * Smooth step interpolation (ease in/out)\n */\nexport const smoothStep = (edge0: number, edge1: number, x: number): number => {\n  const t = Math.max(0, Math.min(1, (x - edge0) / (edge1 - edge0)));\n  return t * t * (3 - 2 * t);\n};\n\n/**\n * Clamp a value between min and max\n */\nexport const clamp = (value: number, min: number, max: number): number => {\n  return Math.max(min, Math.min(max, value));\n};\n\n/**\n * Map a value from one range to another\n */\nexport const map = (value: number, inMin: number, inMax: number, outMin: number, outMax: number): number => {\n  return ((value - inMin) / (inMax - inMin)) * (outMax - outMin) + outMin;\n};\n\n/**\n * Generate random number between min and max\n */\nexport const random = (min: number, max: number): number => {\n  return Math.random() * (max - min) + min;\n};\n\n/**\n * Generate random integer between min and max (inclusive)\n */\nexport const randomInt = (min: number, max: number): number => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/**\n * Distance between two 2D points\n */\nexport const distance2D = (x1: number, y1: number, x2: number, y2: number): number => {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return Math.sqrt(dx * dx + dy * dy);\n};\n\n/**\n * Distance between two 3D points\n */\nexport const distance3D = (x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number => {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const dz = z2 - z1;\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n};\n\n/**\n * Normalize angle to 0-2π range\n */\nexport const normalizeAngle = (angle: number): number => {\n  while (angle < 0) angle += 2 * Math.PI;\n  while (angle >= 2 * Math.PI) angle -= 2 * Math.PI;\n  return angle;\n};\n\n/**\n * Convert degrees to radians\n */\nexport const degToRad = (degrees: number): number => {\n  return degrees * (Math.PI / 180);\n};\n\n/**\n * Convert radians to degrees\n */\nexport const radToDeg = (radians: number): number => {\n  return radians * (180 / Math.PI);\n};\n\n/**\n * Sine wave with customizable amplitude, frequency, and phase\n */\nexport const sineWave = (time: number, amplitude: number = 1, frequency: number = 1, phase: number = 0): number => {\n  return amplitude * Math.sin(frequency * time + phase);\n};\n\n/**\n * Cosine wave with customizable amplitude, frequency, and phase\n */\nexport const cosineWave = (time: number, amplitude: number = 1, frequency: number = 1, phase: number = 0): number => {\n  return amplitude * Math.cos(frequency * time + phase);\n};\n\n/**\n * 3D rotation around X axis\n */\nexport const rotateX = (x: number, y: number, z: number, angle: number): [number, number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return [\n    x,\n    y * cos - z * sin,\n    y * sin + z * cos\n  ];\n};\n\n/**\n * 3D rotation around Y axis\n */\nexport const rotateY = (x: number, y: number, z: number, angle: number): [number, number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return [\n    x * cos + z * sin,\n    y,\n    -x * sin + z * cos\n  ];\n};\n\n/**\n * 3D rotation around Z axis\n */\nexport const rotateZ = (x: number, y: number, z: number, angle: number): [number, number, number] => {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return [\n    x * cos - y * sin,\n    x * sin + y * cos,\n    z\n  ];\n};\n\n/**\n * 3D to 2D projection\n */\nexport const project3D = (x: number, y: number, z: number, focalLength: number, centerX: number, centerY: number): [number, number] => {\n  const scale = focalLength / (focalLength - z);\n  return [\n    x * scale + centerX,\n    y * scale + centerY\n  ];\n};\n\n/**\n * Cubic bezier curve interpolation\n */\nexport const cubicBezier = (t: number, p0: number, p1: number, p2: number, p3: number): number => {\n  const oneMinusT = 1 - t;\n  return oneMinusT * oneMinusT * oneMinusT * p0 +\n         3 * oneMinusT * oneMinusT * t * p1 +\n         3 * oneMinusT * t * t * p2 +\n         t * t * t * p3;\n};\n\n/**\n * Noise function (simplified Perlin-like noise)\n */\nexport const noise = (x: number, y: number = 0): number => {\n  const n = Math.sin(x * 12.9898 + y * 78.233) * 43758.5453;\n  return (n - Math.floor(n)) * 2 - 1;\n};\n\n/**\n * HSL to RGB conversion\n */\nexport const hslToRgb = (h: number, s: number, l: number): [number, number, number] => {\n  h = h / 360;\n  s = s / 100;\n  l = l / 100;\n\n  const hue2rgb = (p: number, q: number, t: number): number => {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1/6) return p + (q - p) * 6 * t;\n    if (t < 1/2) return q;\n    if (t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n    return p;\n  };\n\n  if (s === 0) {\n    return [l * 255, l * 255, l * 255];\n  } else {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    return [\n      Math.round(hue2rgb(p, q, h + 1/3) * 255),\n      Math.round(hue2rgb(p, q, h) * 255),\n      Math.round(hue2rgb(p, q, h - 1/3) * 255)\n    ];\n  }\n};\n\n/**\n * Easing functions - these are aliases for common easing patterns\n */\nexport const easeInOutQuart = (t: number): number => {\n  return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t;\n};\n\nexport const easeInOutCubic = (t: number): number => {\n  return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n};\n\nexport const easeOutBounce = (t: number): number => {\n  if (t < 1 / 2.75) {\n    return 7.5625 * t * t;\n  } else if (t < 2 / 2.75) {\n    return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;\n  } else if (t < 2.5 / 2.75) {\n    return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;\n  } else {\n    return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;\n  }\n};\n\nexport const easeInOutSine = (t: number): number => {\n  return -(Math.cos(Math.PI * t) - 1) / 2;\n};\n\nexport const easeInOutExpo = (t: number): number => {\n  if (t === 0) return 0;\n  if (t === 1) return 1;\n  return t < 0.5\n    ? Math.pow(2, 20 * t - 10) / 2\n    : (2 - Math.pow(2, -20 * t + 10)) / 2;\n};\n\n/**\n * 2D Perlin-like noise function\n */\nexport const noise2D = (x: number, y: number): number => {\n  const n = Math.sin(x * 12.9898 + y * 78.233) * 43758.5453;\n  return (n - Math.floor(n)) * 2 - 1;\n};\n\n/**\n * Alias for smoothStep to maintain compatibility\n */\nexport const smoothstep = smoothStep;","/**\n * Default Theme - Classic Particle Sphere\n * \n * The original particle sphere theme, refactored to use the new theme system.\n * Features a 3D rotating sphere of particles with smooth color transitions.\n */\n\nimport { BaseTheme } from './BaseTheme';\nimport { VoiceState } from './IVoiceTheme';\nimport { lerp } from '../utils/math';\nimport { ObjectPool } from '../utils/performance';\n\ninterface Particle {\n  x: number;\n  y: number;\n  z: number;\n  velX: number;\n  velY: number;\n  velZ: number;\n  age: number;\n  dead: boolean;\n  right: boolean;\n  projX: number;\n  projY: number;\n  alpha: number;\n  attack: number;\n  hold: number;\n  decay: number;\n  initValue: number;\n  holdValue: number;\n  lastValue: number;\n  stuckTime: number;\n  accelX: number;\n  accelY: number;\n  accelZ: number;\n  next?: Particle;\n  prev?: Particle;\n}\n\ninterface ColorPalette {\n  r: number;\n  g: number;\n  b: number;\n  gradient: number[];\n}\n\ninterface ColorScheme {\n  idle: ColorPalette;\n  userSpeaking: ColorPalette;\n  processing: ColorPalette;\n  aiSpeaking: ColorPalette;\n  hover: ColorPalette;\n}\n\nexport class DefaultTheme extends BaseTheme {\n  readonly id = 'default';\n  readonly name = 'Classic Sphere';\n  readonly description = 'The original 3D particle sphere with smooth color transitions';\n  readonly category = 'particle' as const;\n  readonly performanceProfile = 'medium' as const;\n\n  // Sphere configuration\n  private sphereRadius = 280;\n  private radiusScale = 1;\n  private framesPerRotation = 5000;\n  private focalLength = 320;\n  private zeroAlphaDepth = -750;\n  private sphereCenterY = 0;\n  private sphereCenterZ = -3 - this.sphereRadius;\n\n  // Particle system\n  private particlePool: ObjectPool<Particle>;\n  private particleList: { first?: Particle } = {};\n  private recycleBin: { first?: Particle } = {};\n  private currentParticleCount = 0;\n  private maxParticles = 200;\n\n  // Color system\n  private currentR = 52;\n  private currentG = 235;\n  private currentB = 222;\n  private targetR = 52;\n  private targetG = 235;\n  private targetB = 222;\n  private colorTransitionSpeed = 0.05;\n  private currentColorScheme = 'gemini';\n\n  // Animation parameters\n  private turnAngle = 1;\n  private wait = 2;\n  private count = 0;\n  private numToAddEachFrame = 3;\n  private particleAlpha = 1;\n  private particleRad = 2.5;\n  private gravity = 0;\n  private randAccelX = 0.1;\n  private randAccelY = 0.1;\n  private randAccelZ = 0.1;\n\n  // Color schemes\n  private colorSchemes: Record<string, ColorScheme> = {\n    gemini: {\n      idle: { r: 66, g: 133, b: 244, gradient: [66, 133, 244, 52, 168, 83] },\n      userSpeaking: { r: 234, g: 67, b: 53, gradient: [234, 67, 53, 251, 188, 5] },\n      processing: { r: 155, g: 64, b: 224, gradient: [155, 64, 224, 66, 133, 244] },\n      aiSpeaking: { r: 52, g: 168, b: 83, gradient: [52, 168, 83, 66, 133, 244] },\n      hover: { r: 251, g: 188, b: 5, gradient: [251, 188, 5, 234, 67, 53] }\n    },\n    instagram: {\n      idle: { r: 228, g: 64, b: 95, gradient: [228, 64, 95, 247, 119, 55] },\n      userSpeaking: { r: 247, g: 119, b: 55, gradient: [247, 119, 55, 252, 175, 69] },\n      processing: { r: 193, g: 53, b: 132, gradient: [193, 53, 132, 228, 64, 95] },\n      aiSpeaking: { r: 252, g: 175, b: 69, gradient: [252, 175, 69, 247, 119, 55] },\n      hover: { r: 131, g: 58, b: 180, gradient: [131, 58, 180, 193, 53, 132] }\n    },\n    ocean: {\n      idle: { r: 0, g: 119, b: 190, gradient: [0, 119, 190, 0, 168, 232] },\n      userSpeaking: { r: 0, g: 168, b: 232, gradient: [0, 168, 232, 0, 201, 255] },\n      processing: { r: 0, g: 201, b: 255, gradient: [0, 201, 255, 100, 255, 218] },\n      aiSpeaking: { r: 100, g: 255, b: 218, gradient: [100, 255, 218, 0, 168, 232] },\n      hover: { r: 0, g: 150, b: 199, gradient: [0, 150, 199, 0, 201, 255] }\n    },\n    sunset: {\n      idle: { r: 255, g: 107, b: 107, gradient: [255, 107, 107, 255, 193, 7] },\n      userSpeaking: { r: 255, g: 193, b: 7, gradient: [255, 193, 7, 255, 142, 83] },\n      processing: { r: 255, g: 142, b: 83, gradient: [255, 142, 83, 255, 107, 107] },\n      aiSpeaking: { r: 255, g: 230, b: 109, gradient: [255, 230, 109, 255, 193, 7] },\n      hover: { r: 255, g: 171, b: 64, gradient: [255, 171, 64, 255, 107, 107] }\n    },\n    aurora: {\n      idle: { r: 0, g: 201, b: 255, gradient: [0, 201, 255, 146, 254, 157] },\n      userSpeaking: { r: 146, g: 254, b: 157, gradient: [146, 254, 157, 0, 255, 193] },\n      processing: { r: 0, g: 255, b: 193, gradient: [0, 255, 193, 186, 85, 255] },\n      aiSpeaking: { r: 186, g: 85, b: 255, gradient: [186, 85, 255, 0, 201, 255] },\n      hover: { r: 120, g: 255, b: 214, gradient: [120, 255, 214, 186, 85, 255] }\n    }\n  };\n\n  constructor() {\n    super();\n    \n    // Initialize particle pool\n    this.particlePool = new ObjectPool<Particle>(\n      () => ({\n        x: 0, y: 0, z: 0, velX: 0, velY: 0, velZ: 0,\n        age: 0, dead: false, right: false, projX: 0, projY: 0, alpha: 0,\n        attack: 0, hold: 0, decay: 0, initValue: 0, holdValue: 0, lastValue: 0,\n        stuckTime: 0, accelX: 0, accelY: 0, accelZ: 0\n      }),\n      (particle) => {\n        particle.age = 0;\n        particle.dead = false;\n        particle.alpha = 0;\n        particle.next = undefined;\n        particle.prev = undefined;\n      },\n      50,\n      this.maxParticles\n    );\n\n    this.setColor(this.getColorPalette().idle);\n  }\n\n  protected onInit(): void {\n    this.maxParticles = this.getMaxParticles();\n  }\n\n  protected onDraw(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number,\n    deltaTime: number\n  ): void {\n    this.updateColors();\n    this.updateParticles(context, width, height, centerX, centerY);\n    this.renderParticles(context, width, height, centerX, centerY);\n  }\n\n  protected onStateChange(newState: VoiceState): void {\n    const palette = this.getColorPalette();\n    \n    switch (newState) {\n      case VoiceState.USER_SPEAKING:\n        this.framesPerRotation = 2000;\n        this.colorTransitionSpeed = 0.15;\n        this.setColor(palette.userSpeaking);\n        this.numToAddEachFrame = 5;\n        this.particleAlpha = 1.2;\n        this.particleRad = 3.5;\n        this.gravity = 0.1;\n        break;\n        \n      case VoiceState.PROCESSING:\n        this.framesPerRotation = 500;\n        this.colorTransitionSpeed = 0.2;\n        this.setColor(palette.processing);\n        this.numToAddEachFrame = 8;\n        this.particleAlpha = 1.5;\n        this.particleRad = 4;\n        this.gravity = 0;\n        break;\n        \n      case VoiceState.AI_SPEAKING:\n        this.framesPerRotation = 2500;\n        this.colorTransitionSpeed = 0.1;\n        this.setColor(palette.aiSpeaking);\n        this.numToAddEachFrame = 4;\n        this.particleAlpha = 1.3;\n        this.particleRad = 3;\n        this.gravity = -0.05;\n        break;\n        \n      case VoiceState.IDLE:\n      default:\n        this.framesPerRotation = 5000;\n        this.colorTransitionSpeed = 0.05;\n        this.setColor(palette.idle);\n        this.numToAddEachFrame = 3;\n        this.particleAlpha = 1;\n        this.particleRad = 2.5;\n        this.gravity = 0;\n        break;\n    }\n  }\n\n  protected getThemeSpecificMetrics() {\n    return {\n      particleCount: this.currentParticleCount,\n      maxParticles: this.maxParticles,\n      colorScheme: this.currentColorScheme\n    };\n  }\n\n  /**\n   * Set color scheme (public method for external use)\n   */\n  setColorScheme(scheme: string): void {\n    if (this.colorSchemes[scheme]) {\n      this.currentColorScheme = scheme;\n      // Update current color based on current state\n      const palette = this.getColorPalette();\n      this.setColor(palette.idle); // Will be overridden by current state\n    }\n  }\n\n  // Private methods - core particle system logic\n\n  private getColorPalette(): ColorScheme {\n    return this.colorSchemes[this.currentColorScheme] || this.colorSchemes.gemini;\n  }\n\n  private setColor(palette: ColorPalette): void {\n    this.targetR = palette.r;\n    this.targetG = palette.g;\n    this.targetB = palette.b;\n  }\n\n  private updateColors(): void {\n    this.currentR = lerp(this.currentR, this.targetR, this.colorTransitionSpeed);\n    this.currentG = lerp(this.currentG, this.targetG, this.colorTransitionSpeed);\n    this.currentB = lerp(this.currentB, this.targetB, this.colorTransitionSpeed);\n  }\n\n  private updateParticles(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number\n  ): void {\n    // Create new particles\n    this.count++;\n    if (this.count >= this.wait && this.currentParticleCount < this.maxParticles) {\n      this.count = 0;\n      const dynamicNumParticles = Math.floor(this.numToAddEachFrame * (1 + this.mouseInfluence * 0.5));\n      const particlesToCreate = Math.min(dynamicNumParticles, this.maxParticles - this.currentParticleCount);\n      \n      for (let i = 0; i < particlesToCreate; i++) {\n        this.createParticle();\n      }\n    }\n\n    // Update rotation\n    const turnSpeed = 2 * Math.PI / this.framesPerRotation;\n    const dynamicTurnSpeed = turnSpeed * (1 + this.mouseInfluence * 0.3);\n    this.turnAngle = (this.turnAngle + dynamicTurnSpeed) % (2 * Math.PI);\n  }\n\n  private createParticle(): void {\n    const theta = Math.random() * 2 * Math.PI;\n    const phi = Math.acos(Math.random() * 2 - 1);\n    \n    // Add mouse influence to particle positioning\n    const mouseDistortion = this.mouseInfluence * 0.3;\n    const mouseBias = {\n      x: this.normalizedMouseX * mouseDistortion * this.sphereRadius * 0.5,\n      y: this.normalizedMouseY * mouseDistortion * this.sphereRadius * 0.5,\n      z: 0\n    };\n    \n    const x0 = this.sphereRadius * Math.sin(phi) * Math.cos(theta) + mouseBias.x;\n    const y0 = this.sphereRadius * Math.sin(phi) * Math.sin(theta) + mouseBias.y;\n    const z0 = this.sphereRadius * Math.cos(phi) + mouseBias.z;\n\n    const velocityMultiplier = 0.002 * (1 + this.mouseInfluence * 0.5);\n    const particle = this.addParticle(\n      x0,\n      this.sphereCenterY + y0,\n      this.sphereCenterZ + z0,\n      velocityMultiplier * x0,\n      velocityMultiplier * y0,\n      velocityMultiplier * z0\n    );\n\n    // Set particle envelope parameters\n    const alphaMultiplier = 1 + this.mouseInfluence * 0.3;\n    particle.attack = Math.floor(30 / (1 + this.mouseInfluence * 0.5));\n    particle.hold = Math.floor(30 * (1 + this.mouseInfluence * 0.5));\n    particle.decay = 60;\n    particle.initValue = 0;\n    particle.holdValue = this.particleAlpha * alphaMultiplier;\n    particle.lastValue = 0;\n    particle.stuckTime = Math.floor((45 + Math.random() * 15) / (1 + this.mouseInfluence * 0.3));\n\n    // Enhanced acceleration with mouse influence\n    particle.accelX = this.normalizedMouseX * this.mouseInfluence * 0.001;\n    particle.accelY = this.gravity + (this.normalizedMouseY * this.mouseInfluence * 0.001);\n    particle.accelZ = 0;\n  }\n\n  private addParticle(x0: number, y0: number, z0: number, vx0: number, vy0: number, vz0: number): Particle {\n    const newParticle = this.particlePool.acquire();\n    this.currentParticleCount++;\n\n    // Add to beginning of particle list\n    if (this.particleList.first) {\n      newParticle.next = this.particleList.first;\n      this.particleList.first.prev = newParticle;\n    }\n    this.particleList.first = newParticle;\n    newParticle.prev = undefined;\n\n    // Initialize particle\n    newParticle.x = x0;\n    newParticle.y = y0;\n    newParticle.z = z0;\n    newParticle.velX = vx0;\n    newParticle.velY = vy0;\n    newParticle.velZ = vz0;\n    newParticle.age = 0;\n    newParticle.dead = false;\n    newParticle.right = Math.random() < 0.5;\n\n    return newParticle;\n  }\n\n  private renderParticles(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number\n  ): void {\n    const sinAngle = Math.sin(this.turnAngle);\n    const cosAngle = Math.cos(this.turnAngle);\n    const zMax = this.focalLength - 2;\n\n    let particle = this.particleList.first;\n    \n    while (particle) {\n      const nextParticle = particle.next;\n\n      // Update particle age\n      particle.age++;\n\n      // Move particle if not stuck\n      if (particle.age > particle.stuckTime) {\n        particle.velX += particle.accelX + this.randAccelX * (Math.random() * 2 - 1);\n        particle.velY += particle.accelY + this.randAccelY * (Math.random() * 2 - 1);\n        particle.velZ += particle.accelZ + this.randAccelZ * (Math.random() * 2 - 1);\n\n        particle.x += particle.velX;\n        particle.y += particle.velY;\n        particle.z += particle.velZ;\n      }\n\n      // Calculate 3D rotation and projection\n      const rotX = cosAngle * particle.x + sinAngle * (particle.z - this.sphereCenterZ);\n      const rotZ = -sinAngle * particle.x + cosAngle * (particle.z - this.sphereCenterZ) + this.sphereCenterZ;\n      const m = this.radiusScale * this.focalLength / (this.focalLength - rotZ);\n      \n      particle.projX = rotX * m + centerX;\n      particle.projY = particle.y * m + centerY;\n\n      // Update alpha based on envelope\n      this.updateParticleAlpha(particle);\n\n      // Check if particle should be rendered or recycled\n      const outsideTest = (\n        particle.projX > width || particle.projX < 0 ||\n        particle.projY < 0 || particle.projY > height ||\n        rotZ > zMax\n      );\n\n      if (outsideTest || particle.dead) {\n        this.recycleParticle(particle);\n      } else {\n        this.renderParticle(context, particle, rotZ, m);\n      }\n\n      particle = nextParticle;\n    }\n  }\n\n  private updateParticleAlpha(particle: Particle): void {\n    if (particle.age < particle.attack + particle.hold + particle.decay) {\n      if (particle.age < particle.attack) {\n        particle.alpha = (particle.holdValue - particle.initValue) / particle.attack * particle.age + particle.initValue;\n      } else if (particle.age < particle.attack + particle.hold) {\n        particle.alpha = particle.holdValue;\n      } else {\n        particle.alpha = (particle.lastValue - particle.holdValue) / particle.decay * (particle.age - particle.attack - particle.hold) + particle.holdValue;\n      }\n    } else {\n      particle.dead = true;\n    }\n  }\n\n  private renderParticle(context: CanvasRenderingContext2D, particle: Particle, rotZ: number, scale: number): void {\n    // Depth-dependent alpha\n    const depthAlphaFactor = Math.max(0, Math.min(1, 1 - rotZ / this.zeroAlphaDepth));\n    const finalAlpha = depthAlphaFactor * particle.alpha;\n    const particleSize = scale * this.particleRad * (1 + this.mouseInfluence * 0.2);\n\n    // Draw main particle\n    context.fillStyle = `rgba(${Math.floor(this.currentR)}, ${Math.floor(this.currentG)}, ${Math.floor(this.currentB)}, ${finalAlpha})`;\n    context.beginPath();\n    context.arc(particle.projX, particle.projY, particleSize, 0, 2 * Math.PI);\n    context.fill();\n\n    // Draw glow effect if enabled and appropriate\n    if (this.shouldEnableGlow() && this.mouseInfluence > 0.5 && finalAlpha > 0.3) {\n      context.fillStyle = `rgba(${Math.floor(this.currentR)}, ${Math.floor(this.currentG)}, ${Math.floor(this.currentB)}, ${finalAlpha * 0.3})`;\n      context.beginPath();\n      context.arc(particle.projX, particle.projY, particleSize * 1.5, 0, 2 * Math.PI);\n      context.fill();\n    }\n  }\n\n  private recycleParticle(particle: Particle): void {\n    this.currentParticleCount = Math.max(0, this.currentParticleCount - 1);\n\n    // Remove from particle list\n    if (this.particleList.first === particle) {\n      this.particleList.first = particle.next;\n      if (particle.next) {\n        particle.next.prev = undefined;\n      }\n    } else {\n      if (particle.prev) {\n        particle.prev.next = particle.next;\n      }\n      if (particle.next) {\n        particle.next.prev = particle.prev;\n      }\n    }\n\n    // Return to pool\n    this.particlePool.release(particle);\n  }\n\n  protected onDispose(): void {\n    // Clean up all particles\n    this.particleList.first = undefined;\n    this.currentParticleCount = 0;\n    this.particlePool.clear();\n  }\n}","/**\n * Performance monitoring utilities for voice themes\n * \n * Provides performance tracking, FPS monitoring, and device capability detection\n */\n\nexport interface PerformanceMetrics {\n  fps: number;\n  frameTime: number;\n  memoryUsage?: number;\n  particleCount?: number;\n  objectCount?: number;\n  drawCalls?: number;\n}\n\nexport interface DeviceCapabilities {\n  isMobile: boolean;\n  isLowPowerDevice: boolean;\n  supportsWebGL: boolean;\n  hardwareConcurrency: number;\n  memoryGB?: number;\n  performanceLevel: 'low' | 'medium' | 'high';\n}\n\n/**\n * Performance monitor for tracking FPS and frame timing\n */\nexport class PerformanceMonitor {\n  private frameCount = 0;\n  private lastTime = 0;\n  private currentFPS = 60;\n  private frameTime = 16.67;\n  private fpsHistory: number[] = [];\n  private frameTimeHistory: number[] = [];\n  private maxHistorySize = 60; // Keep 1 second of history at 60fps\n  private warningThreshold = 0.8;\n  private criticalThreshold = 0.6;\n\n  private callbacks: {\n    onFPSUpdate?: (fps: number) => void;\n    onPerformanceWarning?: (metrics: PerformanceMetrics) => void;\n    onPerformanceCritical?: (metrics: PerformanceMetrics) => void;\n  } = {};\n\n  constructor(targetFPS = 60) {\n    this.lastTime = performance.now();\n  }\n\n  /**\n   * Call this every frame to update performance metrics\n   */\n  update(): PerformanceMetrics {\n    const currentTime = performance.now();\n    const deltaTime = currentTime - this.lastTime;\n    this.frameTime = deltaTime;\n    \n    // Update FPS calculation\n    this.frameCount++;\n    const fps = 1000 / deltaTime;\n    this.fpsHistory.push(fps);\n    this.frameTimeHistory.push(deltaTime);\n\n    // Keep history size manageable\n    if (this.fpsHistory.length > this.maxHistorySize) {\n      this.fpsHistory.shift();\n      this.frameTimeHistory.shift();\n    }\n\n    // Calculate average FPS over recent history\n    const avgFPS = this.fpsHistory.reduce((sum, fps) => sum + fps, 0) / this.fpsHistory.length;\n    this.currentFPS = avgFPS;\n\n    // Check for performance issues\n    const targetFPS = 30; // Conservative target for voice themes\n    const performanceRatio = avgFPS / targetFPS;\n\n    if (performanceRatio < this.criticalThreshold) {\n      this.callbacks.onPerformanceCritical?.({\n        fps: avgFPS,\n        frameTime: deltaTime\n      });\n    } else if (performanceRatio < this.warningThreshold) {\n      this.callbacks.onPerformanceWarning?.({\n        fps: avgFPS,\n        frameTime: deltaTime\n      });\n    }\n\n    // Update callbacks\n    if (this.frameCount % 30 === 0) { // Update every 30 frames (~0.5 seconds)\n      this.callbacks.onFPSUpdate?.(avgFPS);\n    }\n\n    this.lastTime = currentTime;\n\n    return {\n      fps: avgFPS,\n      frameTime: deltaTime\n    };\n  }\n\n  /**\n   * Set performance monitoring callbacks\n   */\n  setCallbacks(callbacks: typeof this.callbacks) {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Get current performance metrics\n   */\n  getCurrentMetrics(): PerformanceMetrics {\n    return {\n      fps: this.currentFPS,\n      frameTime: this.frameTime\n    };\n  }\n\n  /**\n   * Reset performance tracking\n   */\n  reset() {\n    this.frameCount = 0;\n    this.fpsHistory = [];\n    this.frameTimeHistory = [];\n    this.lastTime = performance.now();\n  }\n}\n\n/**\n * Detect device capabilities for performance optimization\n */\nexport class DeviceCapabilityDetector {\n  private static instance: DeviceCapabilityDetector;\n  private capabilities: DeviceCapabilities | null = null;\n\n  static getInstance(): DeviceCapabilityDetector {\n    if (!DeviceCapabilityDetector.instance) {\n      DeviceCapabilityDetector.instance = new DeviceCapabilityDetector();\n    }\n    return DeviceCapabilityDetector.instance;\n  }\n\n  /**\n   * Detect and cache device capabilities\n   */\n  async detectCapabilities(): Promise<DeviceCapabilities> {\n    if (this.capabilities) {\n      return this.capabilities;\n    }\n\n    const isMobile = this.detectMobile();\n    const supportsWebGL = this.detectWebGL();\n    const hardwareConcurrency = navigator.hardwareConcurrency || 4;\n    \n    let memoryGB: number | undefined;\n    if ('memory' in (navigator as any)) {\n      memoryGB = (navigator as any).memory.jsHeapSizeLimit / (1024 ** 3);\n    }\n\n    // Performance benchmarking\n    const performanceLevel = await this.benchmarkPerformance();\n    const isLowPowerDevice = this.detectLowPowerDevice(hardwareConcurrency, memoryGB, performanceLevel);\n\n    this.capabilities = {\n      isMobile,\n      isLowPowerDevice,\n      supportsWebGL,\n      hardwareConcurrency,\n      memoryGB,\n      performanceLevel\n    };\n\n    return this.capabilities;\n  }\n\n  private detectMobile(): boolean {\n    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);\n  }\n\n  private detectWebGL(): boolean {\n    try {\n      const canvas = document.createElement('canvas');\n      return !!(canvas.getContext('webgl') || canvas.getContext('experimental-webgl'));\n    } catch {\n      return false;\n    }\n  }\n\n  private detectLowPowerDevice(cores: number, memoryGB?: number, performanceLevel?: string): boolean {\n    // Heuristics for low-power device detection\n    if (cores <= 2) return true;\n    if (memoryGB && memoryGB < 2) return true;\n    if (performanceLevel === 'low') return true;\n    return false;\n  }\n\n  private async benchmarkPerformance(): Promise<'low' | 'medium' | 'high'> {\n    return new Promise((resolve) => {\n      const startTime = performance.now();\n      let operations = 0;\n      const maxTime = 50; // 50ms benchmark window\n\n      const benchmark = () => {\n        const currentTime = performance.now();\n        if (currentTime - startTime >= maxTime) {\n          // Classify performance based on operations completed\n          if (operations < 100000) {\n            resolve('low');\n          } else if (operations < 500000) {\n            resolve('medium');\n          } else {\n            resolve('high');\n          }\n          return;\n        }\n\n        // Simple mathematical operations\n        for (let i = 0; i < 1000; i++) {\n          Math.sin(Math.random() * Math.PI * 2);\n          operations++;\n        }\n\n        requestAnimationFrame(benchmark);\n      };\n\n      requestAnimationFrame(benchmark);\n    });\n  }\n\n  /**\n   * Get cached capabilities or detect if not available\n   */\n  getCapabilities(): DeviceCapabilities | null {\n    return this.capabilities;\n  }\n}\n\n/**\n * Memory pool for efficient particle/object management\n */\nexport class ObjectPool<T> {\n  private available: T[] = [];\n  private inUse = new Set<T>();\n  private createFn: () => T;\n  private resetFn?: (obj: T) => void;\n  private maxSize: number;\n\n  constructor(createFn: () => T, resetFn?: (obj: T) => void, initialSize = 10, maxSize = 1000) {\n    this.createFn = createFn;\n    this.resetFn = resetFn;\n    this.maxSize = maxSize;\n\n    // Pre-populate pool\n    for (let i = 0; i < initialSize; i++) {\n      this.available.push(this.createFn());\n    }\n  }\n\n  /**\n   * Get an object from the pool\n   */\n  acquire(): T {\n    let obj: T;\n\n    if (this.available.length > 0) {\n      obj = this.available.pop()!;\n    } else if (this.inUse.size < this.maxSize) {\n      obj = this.createFn();\n    } else {\n      // Pool is full, reuse oldest object\n      const oldest = this.inUse.values().next().value;\n      if (oldest) {\n        this.release(oldest);\n        obj = oldest;\n      } else {\n        // Fallback: create new object if somehow there's nothing to reuse\n        obj = this.createFn();\n      }\n    }\n\n    this.inUse.add(obj);\n    return obj;\n  }\n\n  /**\n   * Return an object to the pool\n   */\n  release(obj: T): void {\n    if (this.inUse.has(obj)) {\n      this.inUse.delete(obj);\n      if (this.resetFn) {\n        this.resetFn(obj);\n      }\n      this.available.push(obj);\n    }\n  }\n\n  /**\n   * Get pool statistics\n   */\n  getStats() {\n    return {\n      available: this.available.length,\n      inUse: this.inUse.size,\n      total: this.available.length + this.inUse.size\n    };\n  }\n\n  /**\n   * Clear the entire pool\n   */\n  clear(): void {\n    this.available = [];\n    this.inUse.clear();\n  }\n}\n\n/**\n * Utility to get optimal performance settings based on device capabilities\n */\nexport const getOptimalSettings = async (): Promise<{\n  targetFPS: number;\n  maxParticles: number;\n  enableEffects: boolean;\n  enableGlow: boolean;\n  qualityLevel: 'low' | 'medium' | 'high';\n}> => {\n  const detector = DeviceCapabilityDetector.getInstance();\n  const capabilities = await detector.detectCapabilities();\n\n  if (capabilities.performanceLevel === 'low' || capabilities.isLowPowerDevice) {\n    return {\n      targetFPS: 24,\n      maxParticles: 50,\n      enableEffects: false,\n      enableGlow: false,\n      qualityLevel: 'low'\n    };\n  } else if (capabilities.performanceLevel === 'medium') {\n    return {\n      targetFPS: 30,\n      maxParticles: 150,\n      enableEffects: true,\n      enableGlow: false,\n      qualityLevel: 'medium'\n    };\n  } else {\n    return {\n      targetFPS: 60,\n      maxParticles: 300,\n      enableEffects: true,\n      enableGlow: true,\n      qualityLevel: 'high'\n    };\n  }\n};","/**\n * Voice Theme Interface\n * \n * Defines the contract that all voice interaction themes must implement.\n * Each theme provides unique visual feedback for different voice states.\n */\n\nexport interface IVoiceTheme {\n  /**\n   * Unique identifier for the theme\n   */\n  readonly id: string;\n\n  /**\n   * Display name for the theme\n   */\n  readonly name: string;\n\n  /**\n   * Theme description\n   */\n  readonly description: string;\n\n  /**\n   * Theme category for UI organization\n   */\n  readonly category: 'particle' | 'geometric' | 'advanced' | 'artistic';\n\n  /**\n   * Performance profile for mobile optimization\n   */\n  readonly performanceProfile: 'light' | 'medium' | 'heavy';\n\n  /**\n   * Initialize the theme with canvas context and dimensions\n   */\n  init(context: CanvasRenderingContext2D, width: number, height: number): void;\n\n  /**\n   * Main drawing function called every frame\n   */\n  draw(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void;\n\n  /**\n   * User is speaking state\n   */\n  onUserSpeaking(): void;\n\n  /**\n   * Processing/analyzing speech state\n   */\n  onProcessing(): void;\n\n  /**\n   * AI is responding state\n   */\n  onAiSpeaking(): void;\n\n  /**\n   * Reset to idle state\n   */\n  reset(): void;\n\n  /**\n   * Handle mouse/touch position updates\n   */\n  setMousePosition(x: number, y: number, canvasWidth: number, canvasHeight: number): void;\n\n  /**\n   * Handle mouse/touch hover state\n   */\n  setHovering(hovering: boolean): void;\n\n  /**\n   * Cleanup resources when theme is deactivated\n   */\n  dispose(): void;\n\n  /**\n   * Get current performance metrics\n   */\n  getPerformanceMetrics(): {\n    particleCount?: number;\n    objectCount?: number;\n    memoryUsage?: number;\n    averageFPS?: number;\n  };\n}\n\n/**\n * Theme metadata for UI display\n */\nexport interface ThemeMetadata {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  performanceProfile: string;\n  previewColors: string[];\n  previewDescription: string;\n}\n\n/**\n * Voice state enumeration\n */\nexport enum VoiceState {\n  IDLE = 'idle',\n  USER_SPEAKING = 'userSpeaking',\n  PROCESSING = 'processing',\n  AI_SPEAKING = 'aiSpeaking'\n}\n\n/**\n * Performance settings for different device types\n */\nexport interface PerformanceSettings {\n  targetFPS: number;\n  maxParticles: number;\n  enableEffects: boolean;\n  enableGlow: boolean;\n  qualityLevel: 'low' | 'medium' | 'high';\n}\n\n/**\n * Theme factory function type\n */\nexport type ThemeFactory = () => IVoiceTheme;","/**\n * Theme utilities for persistent theme management\n * \n * Uses cookies for theme persistence to ensure the theme\n * is available during server-side rendering and prevents\n * flash of incorrect theme on page load.\n */\n\nexport type Theme = 'light' | 'dark';\n\nconst THEME_COOKIE_NAME = 'customgpt-theme';\nconst THEME_COOKIE_MAX_AGE = 365 * 24 * 60 * 60; // 1 year in seconds\n\n/**\n * Get theme from cookie\n */\nexport function getThemeFromCookie(): Theme {\n  if (typeof window === 'undefined') return 'light';\n  \n  const cookies = document.cookie.split(';');\n  const themeCookie = cookies.find(cookie => \n    cookie.trim().startsWith(`${THEME_COOKIE_NAME}=`)\n  );\n  \n  if (themeCookie) {\n    const value = themeCookie.split('=')[1].trim();\n    return value === 'dark' ? 'dark' : 'light';\n  }\n  \n  return 'light';\n}\n\n/**\n * Set theme in cookie\n */\nexport function setThemeCookie(theme: Theme) {\n  if (typeof window === 'undefined') return;\n  \n  // Set cookie with max age and path\n  document.cookie = `${THEME_COOKIE_NAME}=${theme}; max-age=${THEME_COOKIE_MAX_AGE}; path=/; SameSite=Lax`;\n}\n\n/**\n * Apply theme to document\n */\nexport function applyThemeToDocument(theme: Theme) {\n  if (typeof window === 'undefined') return;\n  \n  if (theme === 'dark') {\n    document.documentElement.classList.add('dark');\n  } else {\n    document.documentElement.classList.remove('dark');\n  }\n}\n\n/**\n * Initialize theme from cookie and apply to document\n */\nexport function initializeTheme(): Theme {\n  const theme = getThemeFromCookie();\n  applyThemeToDocument(theme);\n  return theme;\n}\n\n/**\n * Set theme and persist to cookie\n */\nexport function setTheme(theme: Theme) {\n  setThemeCookie(theme);\n  applyThemeToDocument(theme);\n}","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConfigStore } from '@/types';\nimport { setTheme as setThemeUtil, getThemeFromCookie, initializeTheme } from '@/lib/theme';\n\n/**\n * Configuration Store\n * \n * Updated to remove API key storage for security.\n * API key is now stored securely on the server.\n * Theme is persisted using cookies for better SSR support.\n */\nexport const useConfigStore = create<ConfigStore>()(\n  persist(\n    (set, get) => ({\n      apiKey: null, // Deprecated - kept for interface compatibility\n      baseURL: 'https://app.customgpt.ai/api/v1', // Not used anymore, server handles this\n      theme: (typeof window !== 'undefined' ? getThemeFromCookie() : 'light') as 'light' | 'dark',\n\n      setApiKey: (key: string) => {\n        // No-op - API key is not stored client-side anymore\n        // This method is kept for backward compatibility\n        console.warn('API key storage has been disabled for security. Configure API key in server environment variables.');\n      },\n\n      setBaseURL: (url: string) => {\n        // No-op - base URL is configured on server\n        console.warn('Base URL configuration has been moved to server. Update CUSTOMGPT_API_BASE_URL in environment variables.');\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Update cookie and document class for theme\n        if (typeof window !== 'undefined') {\n          setThemeUtil(theme);\n        }\n      },\n    }),\n    {\n      name: 'customgpt-config',\n      // Only persist non-sensitive data\n      partialize: (state) => ({\n        theme: state.theme,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Initialize theme from cookie on rehydration\n        if (typeof window !== 'undefined') {\n          const theme = initializeTheme();\n          if (state && state.theme !== theme) {\n            state.theme = theme;\n          }\n        }\n      },\n    }\n  )\n);","/**\n * Utility Functions Library\n * \n * Common utility functions used throughout the application.\n * These utilities handle:\n * - CSS class merging for Tailwind\n * - ID generation\n * - File operations\n * - Date/time formatting\n * - Clipboard operations\n * - HTML sanitization\n * - API helpers\n * \n * Features:\n * - Pure, reusable utility functions with full TypeScript support\n * - Comprehensive JSDoc documentation with usage examples\n * - Robust edge case handling and error recovery\n * - Optimized performance with configurable options\n * - Production-ready implementations for common operations\n */\n\nimport { type ClassValue, clsx } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\nimport DOMPurify from 'dompurify';\n\n/**\n * Utility function for combining Tailwind CSS classes\n * \n * This function combines clsx and tailwind-merge to:\n * 1. Support conditional classes (clsx)\n * 2. Properly merge Tailwind classes (tailwind-merge)\n * \n * @example\n * cn('px-2 py-1', 'px-4') // Returns: 'py-1 px-4'\n * cn('text-red-500', condition && 'text-blue-500')\n * cn(['text-sm', 'font-bold'], { 'opacity-50': isDisabled })\n * \n * @param inputs - Class strings, conditionals, arrays, or objects\n * @returns Merged class string\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\n/**\n * Generate a unique ID\n * \n * Creates a unique identifier using random string and timestamp.\n * Not cryptographically secure - use for UI elements only.\n * \n * @example\n * generateId() // Returns: 'a1b2c3d41234567890'\n * \n * @returns Unique string ID\n */\nexport function generateId(): string {\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\n}\n\n/**\n * Format file size in bytes to human readable format\n * \n * Converts byte values to appropriate units (KB, MB, GB).\n * Always shows 2 decimal places except for bytes.\n * \n * @example\n * formatFileSize(0) // Returns: '0 Bytes'\n * formatFileSize(1024) // Returns: '1 KB'\n * formatFileSize(1536) // Returns: '1.5 KB'\n * formatFileSize(1048576) // Returns: '1 MB'\n * \n * @param bytes - File size in bytes\n * @returns Formatted string with appropriate unit\n */\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return '0 Bytes';\n  \n  const k = 1024;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n\n/**\n * Get file icon based on file type\n * \n * Returns an emoji icon based on the MIME type or file extension.\n * Used in file upload UI components.\n * \n * @example\n * getFileIcon('application/pdf') // Returns: '📄'\n * getFileIcon('image/png') // Returns: '🖼️'\n * getFileIcon('text/plain') // Returns: '📝'\n * getFileIcon('unknown/type') // Returns: '📎' (default)\n * \n * @param fileType - MIME type or file extension\n * @returns Emoji icon representing the file type\n */\nexport function getFileIcon(fileType: string): string {\n  const type = fileType.toLowerCase();\n  \n  // Document types\n  if (type.includes('pdf')) return '📄';\n  if (type.includes('word') || type.includes('doc')) return '📄';\n  if (type.includes('text') || type.includes('txt')) return '📝';\n  \n  // Media types\n  if (type.includes('image')) return '🖼️';\n  if (type.includes('video')) return '🎥';\n  if (type.includes('audio')) return '🎵';\n  \n  // Data types\n  if (type.includes('excel') || type.includes('sheet')) return '📊';\n  if (type.includes('powerpoint') || type.includes('presentation')) return '📈';\n  if (type.includes('json')) return '📋';\n  if (type.includes('csv')) return '📊';\n  \n  // Archive types\n  if (type.includes('zip') || type.includes('rar')) return '🗜️';\n  \n  // Default icon\n  return '📎';\n}\n\n/**\n * Validate file type against allowed types\n * \n * Checks if a file type is in the allowed list.\n * Case-insensitive partial matching.\n * \n * @example\n * const allowed = ['image/', 'application/pdf'];\n * isFileTypeAllowed('image/png', allowed) // Returns: true\n * isFileTypeAllowed('IMAGE/JPEG', allowed) // Returns: true (case-insensitive)\n * isFileTypeAllowed('text/plain', allowed) // Returns: false\n * \n * @param fileType - MIME type to check\n * @param allowedTypes - List of allowed MIME types or patterns\n * @returns Whether the file type is allowed\n */\nexport function isFileTypeAllowed(fileType: string, allowedTypes: readonly string[]): boolean {\n  return allowedTypes.some(type => fileType.toLowerCase().includes(type.toLowerCase()));\n}\n\n/**\n * Format timestamp to human readable format\n * \n * Converts ISO timestamps to relative time strings.\n * Shows relative time for recent dates, absolute date for older.\n * \n * @example\n * // Assuming current time is 2024-01-01 12:00:00\n * formatTimestamp('2024-01-01T11:59:30Z') // Returns: 'Just now'\n * formatTimestamp('2024-01-01T11:30:00Z') // Returns: '30m ago'\n * formatTimestamp('2024-01-01T08:00:00Z') // Returns: '4h ago'\n * formatTimestamp('2023-12-25T12:00:00Z') // Returns: '7d ago'\n * formatTimestamp('2023-11-01T12:00:00Z') // Returns: '11/1/2023'\n * \n * @param timestamp - ISO date string\n * @returns Human-readable time difference or date\n */\nexport function formatTimestamp(timestamp: string): string {\n  const date = new Date(timestamp);\n  const now = new Date();\n  const diffInMs = now.getTime() - date.getTime();\n  const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\n  const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\n  const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n  \n  // Recent times shown as relative\n  if (diffInMinutes < 1) return 'Just now';\n  if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n  if (diffInHours < 24) return `${diffInHours}h ago`;\n  if (diffInDays < 7) return `${diffInDays}d ago`;\n  \n  // Older times shown as absolute date\n  return date.toLocaleDateString();\n}\n\n/**\n * Copy text to clipboard\n * \n * Uses the modern Clipboard API with fallback error handling.\n * Returns success/failure for UI feedback.\n * \n * @example\n * const success = await copyToClipboard('Hello, world!');\n * if (success) {\n *   toast.success('Copied to clipboard');\n * } else {\n *   toast.error('Failed to copy');\n * }\n * \n * @param text - Text to copy to clipboard\n * @returns Promise resolving to success boolean\n */\nexport async function copyToClipboard(text: string): Promise<boolean> {\n  try {\n    await navigator.clipboard.writeText(text);\n    return true;\n  } catch (error) {\n    // Copy failed, return false status\n    console.error('Failed to copy to clipboard:', error);\n    return false;\n  }\n}\n\n/**\n * Sanitize HTML content\n * \n * Removes dangerous HTML/JS to prevent XSS attacks.\n * Safe for rendering user-generated content.\n * Skips sanitization on server-side (SSR).\n * \n * @example\n * const dirty = '<script>alert(\"XSS\")</script><p>Hello</p>';\n * sanitizeHtml(dirty) // Returns: '<p>Hello</p>'\n * \n * const safe = '<p>Hello <strong>world</strong></p>';\n * sanitizeHtml(safe) // Returns: '<p>Hello <strong>world</strong></p>'\n * \n * @param html - Raw HTML string\n * @returns Sanitized HTML safe for rendering\n */\nexport function sanitizeHtml(html: string): string {\n  if (typeof window === 'undefined') {\n    return html; // Skip sanitization on server side (no DOM)\n  }\n  \n  return DOMPurify.sanitize(html, {\n    ALLOWED_TAGS: ['p', 'br', 'strong', 'em', 'code', 'pre', 'a', 'ul', 'ol', 'li', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n    ALLOWED_ATTR: ['href', 'target', 'rel', 'class'],\n  });\n}\n\n/**\n * Debounce function\n * \n * Delays function execution until after wait milliseconds have\n * elapsed since the last time it was invoked. Useful for search\n * inputs, window resize handlers, etc.\n * \n * @example\n * const debouncedSearch = debounce((query: string) => {\n *   console.log('Searching for:', query);\n * }, 300);\n * \n * // Rapid calls...\n * debouncedSearch('a');    // Won't execute\n * debouncedSearch('ab');   // Won't execute\n * debouncedSearch('abc');  // Will execute after 300ms\n * \n * @param func - Function to debounce\n * @param wait - Milliseconds to delay\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  \n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func.apply(null, args), wait);\n  };\n}\n\n/**\n * Throttle function\n * \n * Ensures function is called at most once per specified time period.\n * First call executes immediately, subsequent calls are ignored until\n * the time period expires.\n * \n * @example\n * const throttledScroll = throttle(() => {\n *   console.log('Scroll position:', window.scrollY);\n * }, 100);\n * \n * // During rapid scrolling:\n * // t=0ms: executes immediately\n * // t=50ms: ignored (still in throttle period)\n * // t=100ms: executes (throttle period expired)\n * \n * @param func - Function to throttle\n * @param limit - Minimum milliseconds between calls\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): (...args: Parameters<T>) => void {\n  let inThrottle: boolean;\n  \n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func.apply(null, args);\n      inThrottle = true;\n      setTimeout(() => (inThrottle = false), limit);\n    }\n  };\n}\n\n/**\n * Truncate text to specified length\n * \n * Cuts text at the specified length and adds ellipsis.\n * Trims whitespace from the cut point.\n * \n * @example\n * truncateText('Hello, world!', 5) // Returns: 'Hello...'\n * truncateText('Short', 10) // Returns: 'Short'\n * truncateText('Hello   ', 5) // Returns: 'Hello...' (trimmed)\n * \n * @param text - Text to truncate\n * @param maxLength - Maximum length before truncation\n * @returns Truncated text with ellipsis if needed\n */\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text;\n  return text.substring(0, maxLength).trim() + '...';\n}\n\n/**\n * Validate CustomGPT API key format\n * \n * Checks if the provided string matches the CustomGPT API key format.\n * Format: {digits}|{alphanumeric_string}\n * - At least 3 digits before the pipe\n * - At least 20 alphanumeric characters after the pipe\n * \n * @example\n * isValidApiKey('123|abcdefghijklmnopqrst') // Returns: true\n * isValidApiKey('7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x') // Returns: true\n * isValidApiKey('12|short') // Returns: false (too few digits/chars)\n * isValidApiKey('no-pipe') // Returns: false (wrong format)\n * isValidApiKey('') // Returns: false (empty)\n * \n * @param apiKey - API key string to validate\n * @returns Whether the API key is valid\n */\nexport function isValidApiKey(apiKey: string): boolean {\n  if (!apiKey || typeof apiKey !== 'string') {\n    return false;\n  }\n  \n  // Trim whitespace\n  apiKey = apiKey.trim();\n  \n  // CustomGPT API key format: starts with digits followed by | then alphanumeric string\n  // Example: 7727|QxxxpM5Dxxxxz9CI3lGwyOBNoRav7oMdgFMxxxxefded9d9x\n  // Must have at least 3 digits, pipe, and at least 20 characters after pipe\n  return /^\\d{3,}\\|[a-zA-Z0-9]{20,}$/.test(apiKey);\n}\n\n/**\n * Parse streaming response chunk\n * \n * Handles various SSE (Server-Sent Events) formats from the CustomGPT API.\n * Supports both standard SSE format and raw JSON lines.\n * \n * Formats handled:\n * - SSE events: \"event: progress\", \"event: finish\"\n * - SSE data: \"data: {json}\", \"data: [DONE]\"\n * - Raw JSON: {\"content\": \"...\", \"citations\": [...]}\n * - Plain text: \"data: plain text content\"\n * \n * @example\n * parseStreamChunk('data: {\"content\": \"Hello\"}') \n * // Returns: { type: 'content', content: 'Hello' }\n * \n * parseStreamChunk('data: [DONE]')\n * // Returns: { type: 'done' }\n * \n * parseStreamChunk('event: finish')\n * // Returns: { type: 'done' }\n * \n * @param chunk - Raw chunk from SSE stream\n * @returns Parsed chunk object or null if should be skipped\n */\nexport function parseStreamChunk(chunk: string): any | null {\n  try {\n    \n    // Skip event lines - CustomGPT sends \"event: progress\" etc.\n    if (chunk.startsWith('event: ')) {\n      const eventType = chunk.slice(7).trim();\n      \n      // Handle specific events if needed\n      if (eventType === 'finish') {\n        return { type: 'done' };\n      }\n      \n      // Skip other event types\n      return null;\n    }\n    \n    // Handle SSE format\n    if (chunk.startsWith('data: ')) {\n      const data = chunk.slice(6).trim();\n      \n      if (data === '[DONE]' || data === 'DONE') return { type: 'done' };\n      \n      // CustomGPT might send plain text data instead of JSON\n      // Try to parse as JSON first\n      try {\n        const parsed = JSON.parse(data);\n        \n        // Handle different response formats\n        if (typeof parsed === 'object') {\n          // If it already has a type, return as is\n          if (parsed.type) {\n            return parsed;\n          }\n          \n          // Handle CustomGPT format where content might be a direct property\n          if (parsed.content !== undefined) {\n            return { type: 'content', content: parsed.content, citations: parsed.citations };\n          }\n          \n          // Handle citation-only responses\n          if (parsed.citations && !parsed.content) {\n            return { type: 'citation', citations: parsed.citations };\n          }\n          \n          // Handle message field (some APIs use 'message' instead of 'content')\n          if (parsed.message !== undefined) {\n            return { type: 'content', content: parsed.message, citations: parsed.citations };\n          }\n          \n          // Handle delta format (some streaming APIs use delta.content)\n          if (parsed.delta && parsed.delta.content !== undefined) {\n            return { type: 'content', content: parsed.delta.content, citations: parsed.citations };\n          }\n          \n          // Handle choices format (OpenAI-style streaming)\n          if (parsed.choices && parsed.choices[0] && parsed.choices[0].delta) {\n            const delta = parsed.choices[0].delta;\n            if (delta.content !== undefined) {\n              return { type: 'content', content: delta.content, citations: parsed.citations };\n            }\n          }\n        }\n        \n        // Return the parsed data as is if we can't determine the format\n        return parsed;\n      } catch (jsonError) {\n        // If JSON parsing fails, treat it as plain text content\n        return { type: 'content', content: data };\n      }\n    }\n    \n    // Handle raw JSON lines (no \"data: \" prefix)\n    if (chunk.trim().startsWith('{')) {\n      try {\n        const parsed = JSON.parse(chunk.trim());\n        \n        if (parsed.content !== undefined || parsed.citations !== undefined) {\n          return { \n            type: parsed.content ? 'content' : 'citation', \n            content: parsed.content,\n            citations: parsed.citations \n          };\n        }\n        \n        // Handle message field\n        if (parsed.message !== undefined) {\n          return { type: 'content', content: parsed.message, citations: parsed.citations };\n        }\n        \n        return parsed;\n      } catch (parseError) {\n        console.warn('Failed to parse raw JSON chunk:', parseError);\n      }\n    }\n    \n    // Handle plain text responses (fallback)\n    if (chunk.trim() && !chunk.includes('data:') && !chunk.startsWith('{')) {\n      return { type: 'content', content: chunk.trim() };\n    }\n    \n    return null;\n  } catch (error) {\n    console.error('Failed to parse stream chunk:', chunk, error);\n    return null;\n  }\n}\n\n/**\n * Extract inline citations from text\n * \n * Finds all citation references in format [1], [2], etc.\n * Returns the original text and array of citation numbers.\n * \n * @example\n * extractInlineCitations('Hello [1] world [2]!')\n * // Returns: { text: 'Hello [1] world [2]!', citations: [1, 2] }\n * \n * extractInlineCitations('No citations here')\n * // Returns: { text: 'No citations here', citations: [] }\n * \n * @param text - Text potentially containing citations\n * @returns Object with text and citation numbers\n */\nexport function extractInlineCitations(text: string): { text: string; citations: number[] } {\n  const citationRegex = /\\[(\\d+)\\]/g;\n  const citations: number[] = [];\n  let match;\n  \n  while ((match = citationRegex.exec(text)) !== null) {\n    citations.push(parseInt(match[1]));\n  }\n  \n  return { text, citations };\n}\n\n/**\n * Create a delay promise\n * \n * Utility for adding delays in async functions.\n * Useful for retries, animations, or testing.\n * \n * @example\n * async function slowOperation() {\n *   console.log('Starting...');\n *   await delay(1000); // Wait 1 second\n *   console.log('Done!');\n * }\n * \n * @param ms - Milliseconds to delay\n * @returns Promise that resolves after delay\n */\nexport function delay(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Retry a function with exponential backoff\n * \n * Retries a failing async function with increasing delays.\n * Delays: 1s, 2s, 4s, 8s, etc. (exponential)\n * \n * @example\n * // Retry API call up to 3 times\n * const data = await retryWithBackoff(\n *   () => fetch('/api/data').then(r => r.json()),\n *   3,    // max attempts\n *   1000  // base delay (1s)\n * );\n * \n * // Delays: attempt 1 = immediate, attempt 2 = 1s, attempt 3 = 2s\n * \n * @param fn - Async function to retry\n * @param maxAttempts - Maximum retry attempts (default: 3)\n * @param baseDelay - Base delay in ms (default: 1000)\n * @returns Result from successful function call\n * @throws Last error if all attempts fail\n */\nexport async function retryWithBackoff<T>(\n  fn: () => Promise<T>,\n  maxAttempts: number = 3,\n  baseDelay: number = 1000\n): Promise<T> {\n  let lastError: Error;\n  \n  for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error as Error;\n      \n      if (attempt === maxAttempts) {\n        throw lastError;\n      }\n      \n      // Exponential backoff: 1s, 2s, 4s, etc.\n      const delayTime = baseDelay * Math.pow(2, attempt - 1);\n      await delay(delayTime);\n    }\n  }\n  \n  throw lastError!;\n}\n\n/**\n * Check if device is mobile\n * \n * Based on viewport width (<768px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is mobile-sized\n */\nexport function isMobile(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth < 768;\n}\n\n/**\n * Check if device is tablet\n * \n * Based on viewport width (768px-1023px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is tablet-sized\n */\nexport function isTablet(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 768 && window.innerWidth < 1024;\n}\n\n/**\n * Check if device is desktop\n * \n * Based on viewport width (≥1024px).\n * Returns false during SSR.\n * \n * @returns Whether viewport is desktop-sized\n */\nexport function isDesktop(): boolean {\n  if (typeof window === 'undefined') return false;\n  return window.innerWidth >= 1024;\n}\n\n/**\n * Get responsive container class\n * \n * Returns Tailwind classes for responsive container sizing.\n * - Mobile: Full width/height\n * - Tablet: Max 2xl width, centered\n * - Desktop: Max 4xl width, centered\n * \n * @returns Tailwind class string for container\n */\nexport function getResponsiveContainer(): string {\n  if (isMobile()) return 'w-full h-full';\n  if (isTablet()) return 'w-full max-w-2xl mx-auto';\n  return 'w-full max-w-4xl mx-auto';\n}\n\n/**\n * Format conversation name from first message\n * \n * Creates a conversation title from the first message.\n * Takes first 6 words, max 50 characters.\n * \n * @example\n * generateConversationName('Hello, can you help me with JavaScript?')\n * // Returns: 'Hello, can you help me with'\n * \n * generateConversationName('Short')\n * // Returns: 'Short'\n * \n * @param firstMessage - The first message in conversation\n * @returns Formatted conversation name\n */\nexport function generateConversationName(firstMessage: string): string {\n  // Remove common API/system prefixes\n  let cleanedMessage = firstMessage.trim();\n  \n  // Remove OpenAI- prefix or similar system prefixes\n  cleanedMessage = cleanedMessage.replace(/^(OpenAI-|System-|API-|Assistant:|User:)\\s*/i, '');\n  \n  const words = cleanedMessage.split(/\\s+/);\n  const title = words.slice(0, 6).join(' ');\n  return title.length > 50 ? title.substring(0, 50).trim() + '...' : title;\n}\n\n/**\n * Validate URL format\n * \n * Checks if string is a valid URL using URL constructor.\n * \n * @example\n * isValidUrl('https://example.com') // Returns: true\n * isValidUrl('http://localhost:3000/path') // Returns: true\n * isValidUrl('not a url') // Returns: false\n * isValidUrl('') // Returns: false\n * \n * @param url - String to validate\n * @returns Whether string is a valid URL\n */\nexport function isValidUrl(url: string): boolean {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get file extension from filename\n * \n * Extracts the file extension in lowercase.\n * \n * @example\n * getFileExtension('document.pdf') // Returns: 'pdf'\n * getFileExtension('image.PNG') // Returns: 'png'\n * getFileExtension('no-extension') // Returns: ''\n * getFileExtension('multi.part.name.txt') // Returns: 'txt'\n * \n * @param filename - Filename to extract extension from\n * @returns Lowercase extension or empty string\n */\nexport function getFileExtension(filename: string): string {\n  return filename.split('.').pop()?.toLowerCase() || '';\n}\n\n/**\n * Check if file is an image\n * \n * Checks MIME type for image/ prefix.\n * \n * @example\n * isImageFile('image/png') // Returns: true\n * isImageFile('image/jpeg') // Returns: true\n * isImageFile('application/pdf') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is an image\n */\nexport function isImageFile(fileType: string): boolean {\n  return fileType.startsWith('image/');\n}\n\n/**\n * Check if file is a document\n * \n * Checks against common document MIME types including:\n * - PDF files\n * - Microsoft Word documents\n * - Plain text files\n * - CSV spreadsheets\n * - JSON/XML data files\n * \n * @example\n * isDocumentFile('application/pdf') // Returns: true\n * isDocumentFile('text/plain') // Returns: true\n * isDocumentFile('image/png') // Returns: false\n * \n * @param fileType - MIME type to check\n * @returns Whether file is a supported document type\n */\nexport function isDocumentFile(fileType: string): boolean {\n  const documentTypes = [\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n  ];\n  return documentTypes.includes(fileType);\n}\n\n/**\n * Create download link for file\n * \n * Programmatically downloads content as a file.\n * Creates a blob URL and triggers download.\n * \n * @example\n * // Download text file\n * downloadFile('Hello, world!', 'greeting.txt');\n * \n * // Download JSON file\n * const data = { name: 'John', age: 30 };\n * downloadFile(\n *   JSON.stringify(data, null, 2),\n *   'data.json',\n *   'application/json'\n * );\n * \n * @param content - File content as string\n * @param filename - Name for downloaded file\n * @param mimeType - MIME type (default: 'text/plain')\n */\nexport function downloadFile(content: string, filename: string, mimeType: string = 'text/plain'): void {\n  const blob = new Blob([content], { type: mimeType });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n}\n\n/**\n * Escape HTML entities\n * \n * Prevents XSS by escaping HTML special characters.\n * Use when displaying user input as HTML.\n * \n * @example\n * escapeHtml('<script>alert(\"XSS\")</script>')\n * // Returns: '&lt;script&gt;alert(&quot;XSS&quot;)&lt;/script&gt;'\n * \n * escapeHtml('Hello & \"world\"')\n * // Returns: 'Hello &amp; &quot;world&quot;'\n * \n * @param unsafe - Raw string that may contain HTML\n * @returns HTML-escaped string\n */\nexport function escapeHtml(unsafe: string): string {\n  return unsafe\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n}\n\n/**\n * Handle API errors and extract error message\n * \n * Normalizes various error formats into consistent structure.\n * Handles:\n * - API response errors (4xx, 5xx)\n * - Network/connection errors\n * - Client-side errors\n * \n * @example\n * try {\n *   await apiCall();\n * } catch (error) {\n *   const { message, code } = handleApiError(error);\n *   toast.error(message);\n *   if (code === 401) {\n *     // Handle unauthorized\n *   }\n * }\n * \n * @param error - Error object from API call\n * @returns Normalized error with message and optional code\n */\nexport function handleApiError(error: any): { message: string; code?: number } {\n  console.error('API Error:', error);\n  \n  if (error.response) {\n    // API responded with an error\n    const data = error.response.data;\n    // Handle nested error formats\n    if (data && data.data && data.data.message) {\n      return {\n        message: data.data.message,\n        code: data.data.code || error.response.status\n      };\n    }\n    // Handle direct message format\n    if (data && data.message) {\n      return {\n        message: data.message,\n        code: error.response.status\n      };\n    }\n    // Fallback to status code\n    return {\n      message: `API Error: ${error.response.status}`,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    // Request was made but no response received\n    return {\n      message: 'No response from server. Please check your connection.',\n      code: 0\n    };\n  } else {\n    // Something else happened (e.g., request setup error)\n    return {\n      message: error.message || 'An unexpected error occurred',\n      code: 0\n    };\n  }\n}\n\n/**\n * Constants for file uploads and API\n * \n * Central configuration for limits and constraints.\n * Modify these values to customize behavior:\n * \n * - MAX_FILE_SIZE: Maximum upload size per file\n * - ACCEPTED_FILE_TYPES: MIME types allowed for upload\n * - MAX_MESSAGE_LENGTH: Character limit for messages\n * - API_TIMEOUT: Request timeout for regular API calls\n * - STREAM_TIMEOUT: Timeout for streaming responses\n * - RETRY_ATTEMPTS: Number of retries on failure\n * - RETRY_DELAY: Base delay between retries\n * \n * @example\n * // Check file size\n * if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n *   throw new Error('File too large');\n * }\n * \n * // Configure retry\n * await retryWithBackoff(\n *   apiCall,\n *   CONSTANTS.RETRY_ATTEMPTS,\n *   CONSTANTS.RETRY_DELAY\n * );\n */\nexport const CONSTANTS = {\n  /** Maximum file size in bytes (10MB) */\n  MAX_FILE_SIZE: 10 * 1024 * 1024,\n  \n  /** Accepted MIME types for file uploads */\n  ACCEPTED_FILE_TYPES: [\n    // Documents\n    'application/pdf',\n    'application/msword',\n    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    'text/plain',\n    'text/csv',\n    'application/json',\n    'application/xml',\n    // Images\n    'image/jpeg',\n    'image/png',\n    'image/gif',\n    'image/webp',\n  ],\n  \n  /** Maximum characters per message */\n  MAX_MESSAGE_LENGTH: 4000,\n  \n  /** API request timeout in milliseconds (30s) */\n  API_TIMEOUT: 30000,\n  \n  /** Streaming request timeout in milliseconds (60s) */\n  STREAM_TIMEOUT: 60000,\n  \n  /** Number of retry attempts for failed requests */\n  RETRY_ATTEMPTS: 3,\n  \n  /** Base delay between retries in milliseconds (1s) */\n  RETRY_DELAY: 1000,\n} as const;","export type LogLevel = 'info' | 'warn' | 'error';\n\nexport interface LogEntry {\n  timestamp: string;\n  level: LogLevel;\n  category: string;\n  message: string;\n  data?: any;\n  error?: any;\n  stack?: string;\n}\n\nclass Logger {\n  private static instance: Logger;\n  private isClient: boolean;\n  private logs: LogEntry[] = [];\n\n  private constructor() {\n    this.isClient = typeof window !== 'undefined';\n  }\n\n  static getInstance(): Logger {\n    if (!Logger.instance) {\n      Logger.instance = new Logger();\n    }\n    return Logger.instance;\n  }\n\n  private formatMessage(entry: LogEntry): string {\n    const { timestamp, level, category, message, data, error, stack } = entry;\n    let formatted = `[${timestamp}] [${level.toUpperCase()}] [${category}] ${message}`;\n    \n    if (data) {\n      formatted += `\\nData: ${JSON.stringify(data, null, 2)}`;\n    }\n    \n    if (error) {\n      formatted += `\\nError: ${error.message || error}`;\n      if (stack) {\n        formatted += `\\nStack: ${stack}`;\n      }\n    }\n    \n    return formatted;\n  }\n\n  private writeToFile(entry: LogEntry) {\n    // File writing is handled by the API route\n    // This method is kept for compatibility\n  }\n\n  private log(level: LogLevel, category: string, message: string, data?: any, error?: any) {\n    const entry: LogEntry = {\n      timestamp: new Date().toISOString(),\n      level,\n      category,\n      message,\n      data,\n      error: error ? { message: error.message, code: error.code, status: error.status } : undefined,\n      stack: error?.stack,\n    };\n\n    // Store in memory for client access\n    this.logs.push(entry);\n    if (this.logs.length > 1000) {\n      this.logs = this.logs.slice(-500); // Keep last 500 entries\n    }\n\n    // Console output with styling\n    const styles = {\n      info: 'color: #3B82F6; font-weight: normal;',\n      warn: 'color: #F59E0B; font-weight: bold;',\n      error: 'color: #EF4444; font-weight: bold;',\n    };\n\n    const prefix = `[${entry.timestamp.split('T')[1].split('.')[0]}] [${category}]`;\n    \n    if (this.isClient) {\n      console.log(`%c${prefix} ${message}`, styles[level]);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    } else {\n      const colorCodes = {\n        info: '\\x1b[36m',\n        warn: '\\x1b[33m',\n        error: '\\x1b[31m',\n      };\n      const reset = '\\x1b[0m';\n      console.log(`${colorCodes[level]}${prefix}${reset} ${message}`);\n      if (data) console.log('Data:', data);\n      if (error) console.error('Error:', error);\n    }\n\n    // Server logging removed - all logs go to console only\n  }\n\n\n  info(category: string, message: string, data?: any) {\n    this.log('info', category, message, data);\n  }\n\n  warn(category: string, message: string, data?: any) {\n    this.log('warn', category, message, data);\n  }\n\n  error(category: string, message: string, error?: any, data?: any) {\n    this.log('error', category, message, data, error);\n  }\n\n  getLogs(): LogEntry[] {\n    return this.logs;\n  }\n\n  clearLogs() {\n    this.logs = [];\n  }\n\n  // API-specific logging helpers\n  apiRequest(endpoint: string, method: string, data?: any) {\n    this.info('API_REQUEST', `${method} ${endpoint}`, data);\n  }\n\n  apiResponse(endpoint: string, status: number, data?: any) {\n    const level = status >= 400 ? 'error' : 'info';\n    this.log(level, 'API_RESPONSE', `${endpoint} - Status: ${status}`, data);\n  }\n\n  apiError(endpoint: string, error: any) {\n    this.error('API_ERROR', `Failed request to ${endpoint}`, error);\n  }\n\n  // Auth-specific logging\n  authCheck(message: string, data?: any) {\n    this.info('AUTH', message, data);\n  }\n\n  authError(message: string, error?: any) {\n    this.error('AUTH_ERROR', message, error);\n  }\n\n  // Navigation logging\n  navigation(route: string, params?: any) {\n    this.info('NAVIGATION', `Navigating to ${route}`, params);\n  }\n\n  // Store operation logging\n  storeAction(store: string, action: string, data?: any) {\n    this.info('STORE', `${store}.${action}`, data);\n  }\n}\n\nexport const logger = Logger.getInstance();","/**\n * Demo Mode Usage Limits Constants\n * \n * Central configuration for all demo mode restrictions and limits.\n * Modify these values to adjust demo mode behavior.\n */\n\n// Free Trial Mode Limits (No API Key)\nexport const FREE_TRIAL_LIMITS = {\n  // Resource Limits\n  MAX_PROJECTS: 1,\n  MAX_CONVERSATIONS: 2,\n  MAX_MESSAGES_PER_CONVERSATION: 2,\n  \n  // Time Limits (in milliseconds)\n  SESSION_DURATION: 10 * 60 * 1000, // 10 minutes\n  SESSION_WARNING_TIME: 5 * 60 * 1000, // Show warning 5 minutes before expiry\n  \n  // Rate Limits\n  MAX_REQUESTS_PER_MINUTE: 10,\n  COOLDOWN_BETWEEN_MESSAGES: 2000, // 2 seconds between messages\n  \n  // Feature Restrictions\n  ALLOW_FILE_UPLOAD: false,\n  ALLOW_SITEMAP_UPLOAD: false,\n  ALLOW_DELETE_OPERATIONS: false,\n  ALLOW_PROJECT_SETTINGS: false,\n  ALLOW_VOICE_MODE: false,\n  \n  // UI Messages\n  SESSION_EXPIRY_WARNING: \"Your free trial session will expire in 5 minutes\",\n  SESSION_EXPIRED_MESSAGE: \"Your free trial session has expired. Please refresh to start a new session.\",\n  LIMIT_REACHED_MESSAGE: {\n    projects: \"Free trial limit reached: Maximum 1 project allowed\",\n    conversations: \"Free trial limit reached: Maximum 2 conversations allowed\",\n    messages: \"Free trial limit reached: Maximum 2 messages per conversation\"\n  }\n} as const;\n\n// User API Key Demo Mode Limits\nexport const USER_DEMO_LIMITS = {\n  // Time Limits (in milliseconds)\n  SESSION_DURATION: 120 * 60 * 1000, // 120 minutes (2 hours)\n  SESSION_WARNING_TIME: 10 * 60 * 1000, // Show warning 10 minutes before expiry\n  \n  // No resource limits for user API key mode\n  MAX_PROJECTS: Infinity,\n  MAX_CONVERSATIONS: Infinity,\n  MAX_MESSAGES_PER_CONVERSATION: Infinity,\n  \n  // Features all enabled\n  ALLOW_FILE_UPLOAD: true,\n  ALLOW_SITEMAP_UPLOAD: true,\n  ALLOW_DELETE_OPERATIONS: true,\n  ALLOW_PROJECT_SETTINGS: true,\n  ALLOW_VOICE_MODE: true,\n  \n  // UI Messages\n  SESSION_EXPIRY_WARNING: \"Your demo session will expire in 10 minutes\",\n  SESSION_EXPIRED_MESSAGE: \"Your demo session has expired. Please refresh to start a new session.\"\n} as const;\n\n// Session Storage Keys\nexport const DEMO_STORAGE_KEYS = {\n  DEPLOYMENT_MODE: 'customgpt.deploymentMode',\n  FREE_TRIAL_MODE: 'customgpt.freeTrialMode',\n  FREE_TRIAL_SESSION: 'customgpt.freeTrialSession',\n  DEMO_SESSION: 'customgpt.demoSession',\n  API_KEY: 'customgpt.apiKey',\n  OPENAI_KEY: 'customgpt.openAIApiKey',\n  SESSION_START: 'customgpt.sessionStart',\n  AUTO_DETECTED: 'customgpt.autoDetected'\n} as const;\n\n// API Headers\nexport const DEMO_API_HEADERS = {\n  DEPLOYMENT_MODE: 'X-Deployment-Mode',\n  API_KEY: 'X-CustomGPT-API-Key',\n  SESSION_ID: 'X-Demo-Session-ID',\n  FREE_TRIAL: 'X-Free-Trial-Mode'\n} as const;\n\n// Type definitions for session data\nexport interface FreeTrialSession {\n  sessionId: string;\n  startTime: number;\n  projectCount: number;\n  conversationCount: number;\n  messageCount: number;\n  lastActivity: number;\n}\n\nexport interface DemoSession {\n  sessionId: string;\n  startTime: number;\n  lastActivity: number;\n}\n\n// Helper functions\nexport function isSessionExpired(startTime: number, duration: number): boolean {\n  return Date.now() - startTime > duration;\n}\n\nexport function getTimeRemaining(startTime: number, duration: number): number {\n  const elapsed = Date.now() - startTime;\n  const remaining = duration - elapsed;\n  return Math.max(0, remaining);\n}\n\nexport function shouldShowWarning(startTime: number, duration: number, warningTime: number): boolean {\n  const remaining = getTimeRemaining(startTime, duration);\n  return remaining > 0 && remaining <= warningTime;\n}","/**\n * Usage Analytics Tracker\n * \n * Tracks usage across different deployment modes and sends analytics\n * to your backend for monitoring and analysis.\n */\n\nimport { DEMO_STORAGE_KEYS } from '@/lib/constants/demo-limits';\n\nexport interface UsageEvent {\n  // Event identification\n  eventType: 'api_call' | 'session_start' | 'session_end' | 'limit_reached' | 'error';\n  eventName: string;\n  timestamp: number;\n  \n  // Deployment information\n  deploymentMode: 'production' | 'demo';\n  demoType?: 'free-trial' | 'user-api-key' | 'none';\n  \n  // Session information\n  sessionId?: string;\n  userId?: string; // If available from your auth system\n  \n  // Request details\n  endpoint?: string;\n  method?: string;\n  statusCode?: number;\n  \n  // Usage metrics\n  projectCount?: number;\n  conversationCount?: number;\n  messageCount?: number;\n  \n  // Client information\n  clientVersion?: string;\n  userAgent?: string;\n  referrer?: string;\n  \n  // Additional metadata\n  metadata?: Record<string, any>;\n}\n\nclass UsageTracker {\n  private static instance: UsageTracker;\n  private analyticsEndpoint: string = process.env.NEXT_PUBLIC_ANALYTICS_ENDPOINT || '/api/analytics';\n  private batchSize: number = 10;\n  private flushInterval: number = 30000; // 30 seconds\n  private eventQueue: UsageEvent[] = [];\n  private flushTimer: NodeJS.Timeout | null = null;\n\n  private constructor() {\n    // Start flush timer\n    this.startFlushTimer();\n  }\n\n  static getInstance(): UsageTracker {\n    if (!UsageTracker.instance) {\n      UsageTracker.instance = new UsageTracker();\n    }\n    return UsageTracker.instance;\n  }\n\n  /**\n   * Track a usage event\n   */\n  track(event: Partial<UsageEvent>): void {\n    const fullEvent: UsageEvent = {\n      eventType: event.eventType || 'api_call',\n      eventName: event.eventName || 'unknown',\n      timestamp: Date.now(),\n      deploymentMode: this.getDeploymentMode(),\n      demoType: this.getDemoType(),\n      sessionId: this.getSessionId(),\n      clientVersion: process.env.NEXT_PUBLIC_APP_VERSION || '1.0.0',\n      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : undefined,\n      referrer: typeof window !== 'undefined' ? document.referrer : undefined,\n      ...event\n    };\n\n    this.eventQueue.push(fullEvent);\n\n    // Flush if batch size reached\n    if (this.eventQueue.length >= this.batchSize) {\n      this.flush();\n    }\n  }\n\n  /**\n   * Track API call\n   */\n  trackApiCall(endpoint: string, method: string, statusCode?: number): void {\n    this.track({\n      eventType: 'api_call',\n      eventName: `${method} ${endpoint}`,\n      endpoint,\n      method,\n      statusCode\n    });\n  }\n\n  /**\n   * Track session start\n   */\n  trackSessionStart(): void {\n    this.track({\n      eventType: 'session_start',\n      eventName: 'session_started',\n      metadata: {\n        mode: this.getDemoType() || 'production'\n      }\n    });\n  }\n\n  /**\n   * Track session end\n   */\n  trackSessionEnd(reason?: string): void {\n    this.track({\n      eventType: 'session_end',\n      eventName: 'session_ended',\n      metadata: {\n        reason,\n        mode: this.getDemoType() || 'production'\n      }\n    });\n  }\n\n  /**\n   * Track limit reached\n   */\n  trackLimitReached(limitType: 'projects' | 'conversations' | 'messages'): void {\n    this.track({\n      eventType: 'limit_reached',\n      eventName: `${limitType}_limit_reached`,\n      metadata: {\n        limitType\n      }\n    });\n  }\n\n  /**\n   * Track error\n   */\n  trackError(error: string, context?: any): void {\n    this.track({\n      eventType: 'error',\n      eventName: 'error_occurred',\n      metadata: {\n        error,\n        context\n      }\n    });\n  }\n\n  /**\n   * Get deployment mode\n   */\n  private getDeploymentMode(): 'production' | 'demo' {\n    if (typeof window === 'undefined') return 'production';\n    \n    const mode = localStorage.getItem(DEMO_STORAGE_KEYS.DEPLOYMENT_MODE);\n    return mode === 'demo' ? 'demo' : 'production';\n  }\n\n  /**\n   * Get demo type\n   */\n  private getDemoType(): 'free-trial' | 'user-api-key' | 'none' {\n    if (typeof window === 'undefined') return 'none';\n    \n    const deploymentMode = localStorage.getItem(DEMO_STORAGE_KEYS.DEPLOYMENT_MODE);\n    if (deploymentMode !== 'demo') return 'none';\n    \n    const isFreeTrialMode = localStorage.getItem(DEMO_STORAGE_KEYS.FREE_TRIAL_MODE) === 'true';\n    return isFreeTrialMode ? 'free-trial' : 'user-api-key';\n  }\n\n  /**\n   * Get session ID\n   */\n  private getSessionId(): string | undefined {\n    if (typeof window === 'undefined') return undefined;\n    \n    // Try to get from session storage (for free trial)\n    const sessionData = sessionStorage.getItem(DEMO_STORAGE_KEYS.FREE_TRIAL_SESSION);\n    if (sessionData) {\n      try {\n        const session = JSON.parse(sessionData);\n        return session.sessionId;\n      } catch (e) {\n        // Ignore parse errors\n      }\n    }\n    \n    // Try to get from regular demo session\n    const demoSession = sessionStorage.getItem(DEMO_STORAGE_KEYS.DEMO_SESSION);\n    if (demoSession) {\n      try {\n        const session = JSON.parse(demoSession);\n        return session.sessionId;\n      } catch (e) {\n        // Ignore parse errors\n      }\n    }\n    \n    return undefined;\n  }\n\n  /**\n   * Start flush timer\n   */\n  private startFlushTimer(): void {\n    if (this.flushTimer) {\n      clearInterval(this.flushTimer);\n    }\n    \n    this.flushTimer = setInterval(() => {\n      if (this.eventQueue.length > 0) {\n        this.flush();\n      }\n    }, this.flushInterval);\n  }\n\n  /**\n   * Flush events to backend\n   */\n  private async flush(): Promise<void> {\n    if (this.eventQueue.length === 0) return;\n    \n    const events = [...this.eventQueue];\n    this.eventQueue = [];\n    \n    try {\n      // If you have a custom analytics endpoint, send the data there\n      if (process.env.NEXT_PUBLIC_ANALYTICS_ENDPOINT) {\n        await fetch(this.analyticsEndpoint, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ events }),\n        });\n      } else {\n        // Otherwise, just log to console for now\n        console.log('[UsageTracker] Analytics events:', events);\n      }\n    } catch (error) {\n      console.error('[UsageTracker] Failed to send analytics:', error);\n      // Re-queue events on failure\n      this.eventQueue.unshift(...events);\n    }\n  }\n\n  /**\n   * Force flush all pending events\n   */\n  async forceFlush(): Promise<void> {\n    await this.flush();\n  }\n}\n\n// Export singleton instance\nexport const usageTracker = UsageTracker.getInstance();\n\n// Add event listeners for automatic tracking\nif (typeof window !== 'undefined') {\n  // Track page visibility changes\n  document.addEventListener('visibilitychange', () => {\n    if (document.hidden) {\n      usageTracker.forceFlush();\n    }\n  });\n  \n  // Track before unload\n  window.addEventListener('beforeunload', () => {\n    usageTracker.forceFlush();\n  });\n}","/**\n * Error Messages for Demo Mode\n */\n\nexport const DEMO_ERROR_MESSAGES = {\n  RATE_LIMIT: {\n    title: 'Rate Limit Reached',\n    message: 'The free trial is experiencing high demand. Please wait a moment and try again.',\n    retryAfter: 60, // seconds\n  },\n  SESSION_EXPIRED: {\n    title: 'Session Expired',\n    message: 'Your free trial session has expired. Please refresh the page to start a new session.',\n  },\n  LIMIT_REACHED: {\n    title: 'Limit Reached',\n    message: 'You have reached the maximum allowed for this free trial session.',\n  },\n  API_ERROR: {\n    title: 'Service Error',\n    message: 'Unable to process your request. Please try again later.',\n  },\n};\n\nexport function getErrorMessage(status: number, isFreeTrialMode: boolean): { title: string; message: string } {\n  if (status === 429 && isFreeTrialMode) {\n    return DEMO_ERROR_MESSAGES.RATE_LIMIT;\n  }\n  \n  if (status === 403 && isFreeTrialMode) {\n    return DEMO_ERROR_MESSAGES.LIMIT_REACHED;\n  }\n  \n  if (status >= 500) {\n    return DEMO_ERROR_MESSAGES.API_ERROR;\n  }\n  \n  return {\n    title: 'Error',\n    message: 'An unexpected error occurred. Please try again.',\n  };\n}","/**\n * Proxy API Client\n * \n * This client communicates with our Next.js API routes which proxy\n * requests to CustomGPT. The API key is stored securely on the server.\n */\n\nimport type {\n  Agent,\n  AgentStats,\n  AgentSettings,\n  Conversation,\n  ChatMessage,\n  Citation,\n  APIResponse,\n  AgentsResponse,\n  ConversationsResponse,\n  MessagesResponse,\n  MessageResponse,\n  CitationResponse,\n  StreamChunk,\n  LimitsResponse,\n  UserProfile,\n  CustomerIntelligenceResponse,\n} from '@/types';\nimport type { APIMessageResponse } from '@/types/message.types';\nimport type { \n  PagesListResponse, \n  DeletePageResponse, \n  ReindexPageResponse, \n  PagesQueryParams,\n  PageMetadata,\n  PageMetadataResponse\n} from '@/types/pages.types';\nimport type { \n  TrafficReportResponse, \n  QueriesReportResponse, \n  ConversationsReportResponse, \n  AnalysisReportResponse,\n  AnalysisInterval\n} from '@/types/reports.types';\nimport type { \n  SourcesListResponse, \n  SourceResponse, \n  DeleteSourceResponse,\n  UpdateSourceSettingsRequest,\n  CreateSitemapSourceRequest\n} from '@/types/sources.types';\nimport { parseStreamChunk, retryWithBackoff } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\nimport { usageTracker } from '@/lib/analytics/usage-tracker';\nimport { getErrorMessage } from '@/lib/constants/error-messages';\n\ninterface UserProfileResponse {\n  status: 'success' | 'error';\n  data: UserProfile;\n}\n\n/**\n * ProxyCustomGPTClient\n * \n * Client that communicates with our server-side proxy endpoints.\n * No API key is needed client-side as it's stored on the server.\n */\nexport class ProxyCustomGPTClient {\n  private baseURL: string = '/api/proxy';\n  private timeout: number = 30000;\n  private abortControllers: Map<string, AbortController> = new Map();\n  private isDemoMode: boolean = false;\n  private demoApiKey: string | null = null;\n\n  constructor() {\n    // Demo mode is determined at runtime from localStorage\n    if (typeof window !== 'undefined') {\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode');\n      this.isDemoMode = deploymentMode === 'demo';\n    }\n    \n    logger.info('PROXY_CLIENT', 'Proxy API Client initialized', {\n      baseURL: this.baseURL,\n      timeout: this.timeout,\n      isDemoMode: this.isDemoMode,\n    });\n  }\n  \n  /**\n   * Set demo mode API key\n   */\n  public setDemoApiKey(apiKey: string | null) {\n    this.demoApiKey = apiKey;\n  }\n\n  /**\n   * Make a request to the proxy API\n   */\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<T> {\n    const url = `${this.baseURL}${endpoint}`;\n    const requestId = `${options.method || 'GET'}-${endpoint}-${Date.now()}`;\n    \n    logger.apiRequest(endpoint, options.method || 'GET', options.body);\n\n    try {\n      const controller = new AbortController();\n      this.abortControllers.set(requestId, controller);\n\n      const timeoutId = setTimeout(() => {\n        controller.abort();\n      }, this.timeout);\n\n      // Don't set Content-Type for FormData - let browser set it with boundary\n      const isFormData = options.body instanceof FormData;\n      const baseHeaders: Record<string, string> = {\n        ...(options.headers as Record<string, string> || {})\n      };\n      \n      // Add deployment mode header\n      const deploymentMode = typeof window !== 'undefined' \n        ? localStorage.getItem('customgpt.deploymentMode') || 'production'\n        : 'production';\n      baseHeaders['X-Deployment-Mode'] = deploymentMode;\n      \n      // Check if free trial mode\n      const isFreeTrialMode = typeof window !== 'undefined' \n        ? localStorage.getItem('customgpt.freeTrialMode') === 'true'\n        : false;\n      \n      if (isFreeTrialMode) {\n        baseHeaders['X-Free-Trial-Mode'] = 'true';\n        \n        // Add session ID from session storage\n        const sessionData = sessionStorage.getItem('customgpt.freeTrialSession');\n        if (sessionData) {\n          try {\n            const session = JSON.parse(sessionData);\n            if (session.sessionId) {\n              baseHeaders['X-Demo-Session-ID'] = session.sessionId;\n            }\n          } catch (e) {\n            console.error('[ProxyClient] Failed to parse session data:', e);\n          }\n        }\n        \n        console.log('[ProxyClient] Free trial mode - using server-side demo key');\n      } else if (deploymentMode === 'demo' && this.demoApiKey) {\n        // Add demo mode API key if available\n        baseHeaders['X-CustomGPT-API-Key'] = this.demoApiKey;\n        console.log('[ProxyClient] Added demo API key to request headers');\n      } else if (deploymentMode === 'demo' && !this.demoApiKey) {\n        console.warn('[ProxyClient] Demo mode but no API key available for request');\n      }\n      \n      const headers: HeadersInit = isFormData \n        ? baseHeaders\n        : { \n            'Content-Type': 'application/json',\n            ...baseHeaders\n          };\n      \n      const response = await fetch(url, {\n        ...options,\n        headers,\n        signal: controller.signal,\n      });\n\n      clearTimeout(timeoutId);\n      this.abortControllers.delete(requestId);\n\n      // Check if response has content before trying to parse JSON\n      let responseData;\n      const contentLength = response.headers.get('content-length');\n      const contentType = response.headers.get('content-type');\n      \n      if (contentLength === '0' || (!contentType?.includes('application/json') && response.status === 200)) {\n        // Empty response or non-JSON success response\n        responseData = { status: 'success', data: { updated: true } };\n      } else {\n        try {\n          const text = await response.text();\n          if (text.trim() === '') {\n            // Empty response body\n            responseData = { status: 'success', data: { updated: true } };\n          } else {\n            responseData = JSON.parse(text);\n          }\n        } catch (jsonError) {\n          // Failed to parse JSON, but response was successful\n          if (response.ok) {\n            responseData = { status: 'success', data: { updated: true } };\n          } else {\n            throw new Error(`Failed to parse response: ${jsonError}`);\n          }\n        }\n      }\n\n      // Track API call\n      usageTracker.trackApiCall(endpoint, options.method || 'GET', response.status);\n\n      if (!response.ok) {\n        // Track error\n        usageTracker.trackError(`API Error: ${response.status}`, {\n          endpoint,\n          method: options.method || 'GET',\n          error: responseData.error\n        });\n        \n        // Get user-friendly error message for demo mode\n        const isFreeTrialMode = baseHeaders['X-Free-Trial-Mode'] === 'true';\n        const errorInfo = getErrorMessage(response.status, isFreeTrialMode);\n        \n        throw {\n          message: responseData.error || errorInfo.message,\n          status: response.status,\n          data: responseData,\n          title: errorInfo.title,\n          isFreeTrialError: isFreeTrialMode && response.status === 429,\n        };\n      }\n\n      logger.apiResponse(endpoint, response.status, responseData);\n      return responseData;\n    } catch (error: any) {\n      this.abortControllers.delete(requestId);\n      \n      if (error.name === 'AbortError') {\n        logger.apiError(endpoint, { message: 'Request timeout', code: 'TIMEOUT' });\n        throw new Error('Request timeout');\n      }\n\n      logger.apiError(endpoint, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Make a streaming request to the proxy API\n   */\n  private async streamRequest(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ReadableStream<Uint8Array>> {\n    const url = `${this.baseURL}${endpoint}`;\n    \n    logger.apiRequest(endpoint, 'POST-STREAM', options.body);\n\n    // Build headers with demo mode support\n    const baseHeaders: Record<string, string> = {\n      'Content-Type': 'application/json',\n      'Accept': 'text/event-stream',\n      ...(options.headers as Record<string, string> || {})\n    };\n    \n    // Add deployment mode header\n    const deploymentMode = typeof window !== 'undefined' \n      ? localStorage.getItem('customgpt.deploymentMode') || 'production'\n      : 'production';\n    baseHeaders['X-Deployment-Mode'] = deploymentMode;\n    \n    // Check if free trial mode\n    const isFreeTrialMode = typeof window !== 'undefined' \n      ? localStorage.getItem('customgpt.freeTrialMode') === 'true'\n      : false;\n    \n    if (isFreeTrialMode) {\n      baseHeaders['X-Free-Trial-Mode'] = 'true';\n      \n      // Add session ID from session storage\n      const sessionData = sessionStorage.getItem('customgpt.freeTrialSession');\n      if (sessionData) {\n        try {\n          const session = JSON.parse(sessionData);\n          if (session.sessionId) {\n            baseHeaders['X-Demo-Session-ID'] = session.sessionId;\n          }\n        } catch (e) {\n          console.error('[ProxyClient] Failed to parse session data:', e);\n        }\n      }\n      \n      console.log('[ProxyClient] Free trial mode - using server-side demo key for streaming');\n    } else if (deploymentMode === 'demo' && this.demoApiKey) {\n      // Add demo mode API key if available\n      baseHeaders['X-CustomGPT-API-Key'] = this.demoApiKey;\n      console.log('[ProxyClient] Added demo API key to streaming request headers');\n    } else if (deploymentMode === 'demo' && !this.demoApiKey) {\n      console.warn('[ProxyClient] Demo mode but no API key available for streaming request');\n    }\n\n    const response = await fetch(url, {\n      ...options,\n      headers: baseHeaders,\n    });\n\n    if (!response.ok) {\n      let errorMessage = `Stream request failed: ${response.status}`;\n      try {\n        const errorText = await response.text();\n        const errorData = JSON.parse(errorText);\n        errorMessage = errorData.error || errorData.message || errorMessage;\n      } catch {\n        // If not JSON, use the status message\n      }\n      logger.apiError(endpoint, { message: errorMessage, status: response.status });\n      throw new Error(errorMessage);\n    }\n\n    logger.apiResponse(endpoint, response.status, 'Stream started');\n\n    return response.body!;\n  }\n\n  /**\n   * Cancel a specific request\n   */\n  cancelRequest(endpoint: string, method: string = 'GET'): void {\n    const controllers = Array.from(this.abortControllers.entries());\n    controllers.forEach(([key, controller]) => {\n      if (key.includes(`${method}-${endpoint}`)) {\n        controller.abort();\n        this.abortControllers.delete(key);\n      }\n    });\n  }\n\n  /**\n   * Cancel all pending requests\n   */\n  cancelAllRequests(): void {\n    this.abortControllers.forEach(controller => controller.abort());\n    this.abortControllers.clear();\n  }\n\n  // Agent Management\n  async getAgents(params?: {\n    page?: number;\n    per_page?: number;\n  }): Promise<AgentsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async createAgent(data: {\n    project_name: string;\n    sitemap_path?: string;\n    file_upload?: boolean;\n    webpage_url?: string;\n  }): Promise<APIResponse<Agent>> {\n    return this.request('/projects', {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}`);\n  }\n\n  async updateAgent(id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }): Promise<APIResponse<Agent>> {\n    console.log('[ProxyClient] updateAgent called with:', { id, data });\n    \n    // Use FormData for multipart/form-data as specified in OpenAPI\n    const formData = new FormData();\n    Object.entries(data).forEach(([key, value]) => {\n      if (value !== undefined) {\n        formData.append(key, String(value));\n        console.log('[ProxyClient] FormData append:', key, value);\n      }\n    });\n\n    const response = await this.request<APIResponse<Agent>>(`/projects/${id}`, {\n      method: 'POST', // Changed from PUT to POST as per OpenAPI spec\n      body: formData,\n    });\n    \n    console.log('[ProxyClient] updateAgent response:', response);\n    return response;\n  }\n\n  async deleteAgent(id: number): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async replicateAgent(id: number): Promise<APIResponse<Agent>> {\n    return this.request(`/projects/${id}/replicate`, {\n      method: 'POST',\n    });\n  }\n\n  async getAgentStats(id: number): Promise<APIResponse<AgentStats>> {\n    return this.request(`/projects/${id}/stats`);\n  }\n\n  async getAgentSettings(id: number): Promise<APIResponse<AgentSettings>> {\n    return this.request(`/projects/${id}/settings`);\n  }\n\n  async updateAgentSettings(id: number, settings: Partial<AgentSettings> | FormData): Promise<APIResponse<AgentSettings>> {\n    const isFormData = settings instanceof FormData;\n    return this.request(`/projects/${id}/settings`, {\n      method: 'POST',\n      body: isFormData ? settings : JSON.stringify(settings),\n      headers: isFormData ? {} : { 'Content-Type': 'application/json' },\n    });\n  }\n\n  // Plugin Management\n  async getProjectPlugins(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request(`/projects/${projectId}/plugins`);\n  }\n\n  async updateProjectPlugin(\n    projectId: number,\n    pluginId: string,\n    data: { enabled: boolean }\n  ): Promise<APIResponse<{ updated: boolean }>> {\n    return this.request(`/projects/${projectId}/plugins/${pluginId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  // Conversation Management\n  async getConversations(projectId: number, params?: {\n    page?: number;\n    per_page?: number;\n    order?: 'asc' | 'desc';\n    orderBy?: string;\n    userFilter?: 'all' | string;\n  }): Promise<ConversationsResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.orderBy) queryParams.append('orderBy', params.orderBy);\n    if (params?.userFilter) queryParams.append('userFilter', params.userFilter);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async createConversation(projectId: number, data?: { name?: string }): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations`, {\n      method: 'POST',\n      body: JSON.stringify(data || {}),\n    });\n  }\n\n  async updateConversation(\n    projectId: number,\n    sessionId: string,\n    data: { name?: string }\n  ): Promise<APIResponse<Conversation>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteConversation(projectId: number, sessionId: string): Promise<APIResponse<{ deleted: boolean }>> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Message Management\n  async getMessages(\n    projectId: number,\n    sessionId: string,\n    params?: {\n      page?: number;\n      per_page?: number;\n    }\n  ): Promise<MessagesResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.per_page) queryParams.append('per_page', params.per_page.toString());\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async sendMessage(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      stream?: boolean;\n      source_ids?: string[];\n      response_source?: string;\n      chatbot_model?: string;\n      custom_persona?: string;\n      agent_capability?: string;\n    }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n\n  async sendMessageStream(\n    projectId: number,\n    sessionId: string,\n    data: {\n      prompt: string;\n      source_ids?: string[];\n      response_source?: string;\n      chatbot_model?: string;\n      custom_persona?: string;\n      agent_capability?: string;\n    },\n    onChunk: (chunk: StreamChunk) => void,\n    onError?: (error: Error) => void,\n    onComplete?: () => void\n  ): Promise<void> {\n    try {\n      // Try the standard messages endpoint with stream=true parameter\n      const stream = await this.streamRequest(\n        `/projects/${projectId}/conversations/${sessionId}/messages`,\n        {\n          method: 'POST',\n          body: JSON.stringify({ ...data, stream: true }),\n        }\n      );\n\n      const reader = stream.getReader();\n      const decoder = new TextDecoder();\n      let buffer = '';\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          onComplete?.();\n          break;\n        }\n\n        buffer += decoder.decode(value, { stream: true });\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || '';\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const data = line.slice(6);\n              if (data === '[DONE]') {\n                onComplete?.();\n                return;\n              }\n              const chunk = parseStreamChunk(data);\n              if (chunk) {\n                onChunk(chunk);\n              }\n            } catch (e) {\n              console.error('Failed to parse chunk:', e);\n            }\n          }\n        }\n      }\n    } catch (error: any) {\n      onError?.(error);\n      throw error;\n    }\n  }\n\n  async getMessageById(\n    projectId: number,\n    sessionId: string,\n    messageId: number\n  ): Promise<APIMessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}`);\n  }\n\n  async updateMessageFeedback(\n    projectId: number,\n    sessionId: string,\n    messageId: number,\n    feedback: { feedback: 'thumbs_up' | 'thumbs_down' }\n  ): Promise<MessageResponse> {\n    return this.request(`/projects/${projectId}/conversations/${sessionId}/messages/${messageId}/feedback`, {\n      method: 'PUT',\n      body: JSON.stringify(feedback),\n    });\n  }\n\n  // Citations\n  async getCitation(projectId: number, citationId: number): Promise<CitationResponse> {\n    return this.request(`/projects/${projectId}/citations/${citationId}`);\n  }\n\n  async previewCitationFile(id: string): Promise<any> {\n    return this.request(`/preview/${id}`);\n  }\n\n  // File Upload\n  async uploadFile(projectId: number, file: File, options?: {\n    onProgress?: (progress: number) => void;\n  }): Promise<SourceResponse> {\n    const formData = new FormData();\n    formData.append('file', file);\n    \n    // Use the correct /sources endpoint for file uploads\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  // Reports\n  async getTrafficReport(projectId: number): Promise<TrafficReportResponse> {\n    return this.request(`/projects/${projectId}/reports/traffic`);\n  }\n\n  async getQueriesReport(projectId: number): Promise<QueriesReportResponse> {\n    return this.request(`/projects/${projectId}/reports/queries`);\n  }\n\n  async getConversationsReport(projectId: number): Promise<ConversationsReportResponse> {\n    return this.request(`/projects/${projectId}/reports/conversations`);\n  }\n\n  async getAnalysisReport(projectId: number, interval?: AnalysisInterval): Promise<AnalysisReportResponse> {\n    const queryParams = new URLSearchParams();\n    if (interval) queryParams.append('interval', interval);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/reports/analysis${queryString ? `?${queryString}` : ''}`);\n  }\n\n  // Pages\n  async getPages(\n    projectId: number,\n    params?: PagesQueryParams\n  ): Promise<PagesListResponse> {\n    const queryParams = new URLSearchParams();\n    if (params?.page) queryParams.append('page', params.page.toString());\n    if (params?.limit) queryParams.append('limit', params.limit.toString());\n    if (params?.order) queryParams.append('order', params.order);\n    if (params?.crawl_status) queryParams.append('crawl_status', params.crawl_status);\n    if (params?.index_status) queryParams.append('index_status', params.index_status);\n    \n    const queryString = queryParams.toString();\n    return this.request(`/projects/${projectId}/pages${queryString ? `?${queryString}` : ''}`);\n  }\n\n  async deletePage(projectId: number, pageId: number): Promise<DeletePageResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async reindexPage(projectId: number, pageId: number): Promise<ReindexPageResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/reindex`, {\n      method: 'POST',\n    });\n  }\n\n  async getPageMetadata(projectId: number, pageId: number): Promise<PageMetadataResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/metadata`);\n  }\n\n  async updatePageMetadata(\n    projectId: number,\n    pageId: number,\n    metadata: Partial<PageMetadata>\n  ): Promise<PageMetadataResponse> {\n    return this.request(`/projects/${projectId}/pages/${pageId}/metadata`, {\n      method: 'PUT',\n      body: JSON.stringify(metadata),\n    });\n  }\n\n  // NOTE: This endpoint is not documented in the API\n  // Commenting out until we confirm it exists\n  // async previewFile(pageId: number): Promise<any> {\n  //   return this.request(`/page_file/${pageId}`);\n  // }\n\n  // Licenses\n  async getLicenses(projectId: number): Promise<APIResponse<any[]>> {\n    return this.request(`/projects/${projectId}/license_keys`);\n  }\n\n  async createLicense(projectId: number, data: { name: string }): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys`, {\n      method: 'POST',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async getLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`);\n  }\n\n  async updateLicense(\n    projectId: number,\n    licenseId: string,\n    data: { name?: string; is_active?: boolean }\n  ): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`, {\n      method: 'PUT',\n      body: JSON.stringify(data),\n    });\n  }\n\n  async deleteLicense(projectId: number, licenseId: string): Promise<APIResponse<any>> {\n    return this.request(`/projects/${projectId}/license_keys/${licenseId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Sources\n  async getSources(projectId: number): Promise<SourcesListResponse> {\n    return this.request(`/projects/${projectId}/sources`);\n  }\n\n  async createSitemapSource(\n    projectId: number,\n    data: CreateSitemapSourceRequest\n  ): Promise<SourceResponse> {\n    // Convert JSON data to FormData as the API expects multipart/form-data\n    const formData = new FormData();\n    formData.append('sitemap_path', data.sitemap_path);\n    if (data.executive_js !== undefined) {\n      formData.append('executive_js', String(data.executive_js));\n    }\n    if (data.data_refresh_frequency !== undefined) {\n      formData.append('data_refresh_frequency', data.data_refresh_frequency);\n    }\n    if (data.create_new_pages !== undefined) {\n      formData.append('create_new_pages', String(data.create_new_pages));\n    }\n    if (data.remove_unexist_pages !== undefined) {\n      formData.append('remove_unexist_pages', String(data.remove_unexist_pages));\n    }\n    if (data.refresh_existing_pages !== undefined) {\n      formData.append('refresh_existing_pages', data.refresh_existing_pages);\n    }\n\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  async uploadFileSource(projectId: number, formData: FormData): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources`, {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  /**\n   * Update source settings\n   * Updates the settings for an existing source.\n   * API endpoint: PUT /projects/{projectId}/sources/{sourceId}\n   */\n  async updateSourceSettings(\n    projectId: number,\n    sourceId: number,\n    settings: UpdateSourceSettingsRequest\n  ): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'PUT',\n      body: JSON.stringify(settings),\n    });\n  }\n\n  async deleteSource(projectId: number, sourceId: number): Promise<DeleteSourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  async instantSyncSource(projectId: number, sourceId: number): Promise<SourceResponse> {\n    return this.request(`/projects/${projectId}/sources/${sourceId}/instant-sync`, {\n      method: 'PUT',\n    });\n  }\n\n  // Customer Intelligence\n  async getCustomerIntelligence(\n    projectId: number,\n    page: number = 1,\n    limit: number = 100\n  ): Promise<CustomerIntelligenceResponse> {\n    return this.request(`/projects/${projectId}/reports/intelligence?page=${page}&limit=${limit}`);\n  }\n\n  // User\n  async getUserLimits(): Promise<LimitsResponse> {\n    return this.request('/user/limits');\n  }\n\n  async getUserProfile(): Promise<UserProfileResponse> {\n    return this.request('/user');\n  }\n\n  async updateUserProfile(formData: FormData): Promise<UserProfileResponse> {\n    return this.request('/user', {\n      method: 'POST',\n      body: formData,\n      headers: {}, // Let browser set content-type with boundary\n    });\n  }\n\n  // Demo Mode\n  async getDemoUsageStats(): Promise<{\n    status: string;\n    data: {\n      usage: {\n        projects: { used: number; limit: number; remaining: number };\n        conversations: { used: number; limit: number; remaining: number };\n        messages: { total: number; limitPerConversation: number; byConversation: Record<string, number> };\n      };\n      session: {\n        sessionId: string;\n        startTime: number;\n        expiresAt: number;\n        remainingTime: number;\n      };\n    };\n  }> {\n    // Add session start time header\n    const sessionData = sessionStorage.getItem('customgpt.freeTrialSession');\n    let startTime = Date.now();\n    \n    if (sessionData) {\n      try {\n        const session = JSON.parse(sessionData);\n        startTime = session.startTime || Date.now();\n      } catch (e) {\n        console.error('[ProxyClient] Failed to parse session data:', e);\n      }\n    }\n    \n    return this.request('/demo/usage', {\n      headers: {\n        'X-Session-Start-Time': startTime.toString()\n      }\n    });\n  }\n  \n  async cleanupDemoSession(): Promise<{\n    status: string;\n    data: {\n      sessionId: string;\n      totalResources: number;\n      successCount: number;\n      failureCount: number;\n      results: Array<{\n        success: boolean;\n        resourceId: string;\n        resourceType: string;\n        error?: string;\n      }>;\n    };\n  }> {\n    return this.request('/demo/cleanup', {\n      method: 'POST'\n    });\n  }\n}\n\n// Export singleton instance\nexport const proxyClient = new ProxyCustomGPTClient();","/**\n * CustomGPT API Client\n * \n * This file now uses the proxy client that communicates with our Next.js API routes.\n * The API key is stored securely on the server and never exposed to the client.\n * \n * Migration from direct API calls to proxy:\n * - All API calls now go through /api/proxy/* endpoints\n * - No API key is needed or stored client-side\n * - Server handles authentication with CustomGPT\n */\n\n// Re-export everything from the proxy client\nexport { proxyClient as apiClient } from './proxy-client';\nexport type { ProxyCustomGPTClient as CustomGPTClient } from './proxy-client';\n\n// Export a singleton instance getter\nimport { proxyClient } from './proxy-client';\n\nlet initialized = false;\n\n/**\n * Initialize the API client\n * No longer needs API key as it's handled server-side\n */\nexport function initializeClient(config?: any): void {\n  // Mark as initialized without needing API key\n  initialized = true;\n}\n\n/**\n * Get the API client instance\n */\nexport function getClient() {\n  return proxyClient;\n}\n\n/**\n * Check if client is initialized\n */\nexport function isClientInitialized(): boolean {\n  // Always return true since proxy client doesn't need initialization\n  return true;\n}","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { ConversationStore, Conversation } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { generateConversationName } from '@/lib/utils';\nimport { logger } from '@/lib/logger';\n\n// Session-based conversation isolation\nconst getSessionId = (): string => {\n  // Check if we're running on the server\n  if (typeof window === 'undefined') {\n    return 'server-session';\n  }\n  \n  // Use the current widget session if available\n  if ((window as any).__customgpt_current_session) {\n    return (window as any).__customgpt_current_session;\n  }\n  \n  // Check if we're in widget mode with session configuration\n  if ((window as any).__customgpt_session) {\n    return (window as any).__customgpt_session.sessionId;\n  }\n  \n  // Check for instance-specific sessions (for isolated widgets)\n  if ((window as any).__customgpt_sessions) {\n    // For isolated widgets, we need to determine which session to use\n    // This is tricky since stores are global - we'll use the most recent session\n    const sessions = (window as any).__customgpt_sessions;\n    const sessionIds = Object.keys(sessions);\n    if (sessionIds.length > 0) {\n      // Return the most recently created session\n      return sessionIds[sessionIds.length - 1];\n    }\n  }\n  \n  // Fallback to browser-based session ID\n  try {\n    let sessionId = sessionStorage.getItem('customgpt_session_id');\n    if (!sessionId) {\n      sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      sessionStorage.setItem('customgpt_session_id', sessionId);\n    }\n    return sessionId;\n  } catch (e) {\n    // Fallback if sessionStorage is not available\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n};\n\nexport const useConversationStore = create<ConversationStore>()(\n  persist(\n    (set, get) => ({\n      conversations: [],\n      currentConversation: null,\n      loading: false,\n      error: null,\n      // Pagination state\n      currentPage: 1,\n      totalPages: 1,\n      totalConversations: 0,\n      perPage: 20,\n      // Sorting and filtering state\n      sortOrder: 'desc' as const,\n      sortBy: 'id',\n      userFilter: 'all' as const,\n      // Client-side filtering state\n      allConversations: [], // Raw conversations from API\n      searchQuery: '',\n      searchMode: 'name' as const,\n      dateFilter: 'all' as const,\n\n      // Client-side filtering helper function\n      applyFilters: () => {\n        const state = get();\n        let filtered = [...state.allConversations];\n        \n        // Apply search filter\n        if (state.searchQuery.trim()) {\n          const query = state.searchQuery.toLowerCase().trim();\n          filtered = filtered.filter(conv => {\n            switch (state.searchMode) {\n              case 'name':\n                return conv.name.toLowerCase().includes(query);\n              case 'id':\n                return conv.id.toString().includes(query);\n              case 'session':\n                return conv.session_id.toLowerCase().includes(query);\n              default:\n                return conv.name.toLowerCase().includes(query);\n            }\n          });\n        }\n        \n        // Apply date filter\n        if (state.dateFilter !== 'all') {\n          const now = new Date();\n          const filterDate = new Date();\n          \n          switch (state.dateFilter) {\n            case 'today':\n              filterDate.setHours(0, 0, 0, 0);\n              break;\n            case 'week':\n              filterDate.setDate(now.getDate() - 7);\n              break;\n            case 'month':\n              filterDate.setDate(now.getDate() - 30);\n              break;\n          }\n          \n          filtered = filtered.filter(conv => {\n            const convDate = new Date(conv.updated_at);\n            return convDate >= filterDate;\n          });\n        }\n        \n        // Note: User filter and sorting are handled server-side by the API\n        // We don't apply them client-side to avoid conflicts\n        \n        set({ conversations: filtered });\n      },\n\n      // Update search filters\n      setSearchQuery: (query: string) => {\n        set({ searchQuery: query });\n        get().applyFilters();\n      },\n\n      setSearchMode: (mode: 'name' | 'id' | 'session') => {\n        set({ searchMode: mode });\n        get().applyFilters();\n      },\n\n      setDateFilter: (filter: 'all' | 'today' | 'week' | 'month') => {\n        set({ dateFilter: filter });\n        get().applyFilters();\n      },\n\n      fetchConversations: async (projectId: number, params?: {\n        page?: number;\n        per_page?: number;\n        order?: 'asc' | 'desc';\n        orderBy?: string;\n        userFilter?: 'all' | string;\n        searchQuery?: string;\n        searchMode?: 'name' | 'id' | 'session';\n        dateFilter?: 'today' | 'week' | 'month';\n      }) => {\n        logger.info('CONVERSATIONS', 'Fetching conversations', { projectId, params });\n        set({ loading: true, error: null });\n        \n        // Update client-side filter state if provided\n        if (params?.searchQuery !== undefined) {\n          set({ searchQuery: params.searchQuery });\n        }\n        if (params?.searchMode !== undefined) {\n          set({ searchMode: params.searchMode });\n        }\n        if (params?.dateFilter !== undefined) {\n          set({ dateFilter: params.dateFilter });\n        }\n        \n        try {\n          const client = getClient();\n          // Only send API-supported parameters\n          const apiParams = {\n            page: params?.page ?? get().currentPage,\n            per_page: params?.per_page ?? get().perPage,\n            order: params?.order ?? get().sortOrder,\n            orderBy: params?.orderBy ?? get().sortBy,\n            userFilter: params?.userFilter ?? get().userFilter,\n          };\n          \n          const response = await client.getConversations(projectId, apiParams);\n          logger.info('CONVERSATIONS', 'API response received', { \n            projectId,\n            responseType: typeof response,\n            hasData: !!(response as any)?.data,\n            dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n          });\n          \n          // Handle different response formats\n          let conversations = [];\n          let paginationData = null;\n          \n          if (response && typeof response === 'object') {\n            // Standard paginated response format\n            if ((response as any).data && (response as any).data.data) {\n              conversations = (response as any).data.data;\n              paginationData = (response as any).data;\n            } else if (Array.isArray((response as any).data)) {\n              conversations = (response as any).data;\n            } else if (Array.isArray(response)) {\n              conversations = response;\n            }\n          }\n          \n          logger.info('CONVERSATIONS', 'Processed conversations', {\n            count: conversations.length,\n            paginationData,\n            conversations: conversations.map((c: any) => ({ \n              id: c.id, \n              name: c.name,\n              messagesCount: c.messages?.length || 0 \n            }))\n          });\n          \n          // Update state with conversations and pagination data\n          set({ \n            allConversations: conversations, // Store raw conversations from API\n            loading: false,\n            // Update pagination state if available\n            currentPage: paginationData?.current_page ?? 1,\n            totalPages: paginationData?.last_page ?? 1,\n            totalConversations: paginationData?.total ?? conversations.length,\n            // Update sorting/filtering if params were provided\n            ...(params?.order && { sortOrder: params.order }),\n            ...(params?.orderBy && { sortBy: params.orderBy }),\n            ...(params?.userFilter && { userFilter: params.userFilter }),\n          });\n          \n          // Apply client-side filters\n          get().applyFilters();\n        } catch (error) {\n          logger.error('CONVERSATIONS', 'Failed to fetch conversations', error, {\n            projectId,\n            errorType: error instanceof Error ? error.constructor.name : typeof error,\n            status: (error as any)?.status,\n            message: (error as any)?.message\n          });\n          // Don't clear existing conversations on error - preserve local state\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to fetch conversations',\n            loading: false,\n            // Keep existing conversations instead of clearing them\n          });\n        }\n      },\n\n      createConversation: async (projectId: number, name?: string) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createConversation(projectId, name ? { name } : undefined);\n          const newConversation = response.data;\n          \n          set(state => ({ \n            allConversations: [newConversation, ...state.allConversations],\n            currentConversation: newConversation,\n            loading: false,\n          }));\n          \n          // Apply client-side filters\n          get().applyFilters();\n        } catch (error) {\n          console.error('Failed to create conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      selectConversation: (conversation: Conversation | null) => {\n        set({ currentConversation: conversation });\n      },\n\n      deleteConversation: async (conversationId: string | number) => {\n        const { conversations, currentConversation } = get();\n        const conversation = conversations.find(c => c.id.toString() === conversationId.toString());\n        \n        if (!conversation) return;\n\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteConversation(conversation.project_id, conversation.session_id);\n          \n          const updatedAllConversations = get().allConversations.filter(c => c.id.toString() !== conversationId.toString());\n          \n          set({ \n            allConversations: updatedAllConversations,\n            currentConversation: currentConversation?.id.toString() === conversationId.toString() \n              ? (updatedAllConversations.length > 0 ? updatedAllConversations[0] : null)\n              : currentConversation,\n            loading: false,\n          });\n          \n          // Apply client-side filters\n          get().applyFilters();\n        } catch (error) {\n          console.error('Failed to delete conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      updateConversation: async (conversationId: number, sessionId: string, data: { name: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateConversation(conversationId, sessionId, data);\n          const updatedConversation = response.data;\n          \n          set(state => ({ \n            allConversations: state.allConversations.map(c => \n              c.id === conversationId ? updatedConversation : c\n            ),\n            currentConversation: state.currentConversation?.id === conversationId \n              ? updatedConversation \n              : state.currentConversation,\n            loading: false,\n          }));\n          \n          // Apply client-side filters\n          get().applyFilters();\n        } catch (error) {\n          console.error('Failed to update conversation:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update conversation',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      // Auto-create conversation if none exists\n      ensureConversation: async (projectId: number, firstMessage?: string) => {\n        const { currentConversation } = get();\n        \n        // If we have a current conversation for this project, use it\n        if (currentConversation && currentConversation.project_id === projectId) {\n          return currentConversation;\n        }\n        \n        // If no current conversation, always create a new one\n        // This ensures that seeing the welcome screen (currentConversation = null) \n        // always results in starting a fresh conversation\n        const name = firstMessage \n          ? generateConversationName(firstMessage)\n          : `Chat ${new Date().toLocaleDateString()}`;\n          \n        await get().createConversation(projectId, name);\n        return get().currentConversation!;\n      },\n    }),\n    {\n      name: `customgpt-conversations-${getSessionId()}`,\n      partialize: (state) => ({\n        conversations: state.conversations,\n        allConversations: state.allConversations,\n        searchQuery: state.searchQuery,\n        searchMode: state.searchMode,\n        dateFilter: state.dateFilter,\n        // Don't persist currentConversation to always start fresh\n      }),\n      onRehydrateStorage: () => (state) => {\n        if (state) {\n          // Ensure conversations is an array\n          if (!Array.isArray(state.conversations)) {\n            state.conversations = [];\n          }\n          \n          // Ensure allConversations is an array\n          if (!Array.isArray(state.allConversations)) {\n            state.allConversations = [];\n          }\n          \n          // Ensure filter state is initialized\n          if (!state.searchQuery) state.searchQuery = '';\n          if (!state.searchMode) state.searchMode = 'name';\n          if (!state.dateFilter) state.dateFilter = 'all';\n          \n          // Clear current conversation on fresh app load to start with welcome screen\n          state.currentConversation = null;\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { AgentSettings } from '@/types';\n\ninterface ChatSettingsState {\n  // Current chat settings per agent\n  settings: Record<number, Partial<AgentSettings>>;\n  \n  // Get settings for a specific agent\n  getSettings: (agentId: number) => Partial<AgentSettings>;\n  \n  // Update settings for a specific agent\n  updateSettings: (agentId: number, updates: Partial<AgentSettings>) => void;\n  \n  // Clear settings for an agent\n  clearSettings: (agentId: number) => void;\n}\n\nexport const useChatSettingsStore = create<ChatSettingsState>()(\n  persist(\n    (set, get) => ({\n      settings: {},\n\n      getSettings: (agentId: number) => {\n        const settings = get().settings[agentId] || {};\n        return {\n          response_source: settings.response_source || 'own_content',\n          chatbot_model: settings.chatbot_model || 'gpt-4-o',\n          custom_persona: settings.custom_persona || 'professional',\n          agent_capability: settings.agent_capability || 'optimal-choice',\n          ...settings,\n        };\n      },\n\n      updateSettings: (agentId: number, updates: Partial<AgentSettings>) => {\n        set((state) => ({\n          settings: {\n            ...state.settings,\n            [agentId]: {\n              ...state.settings[agentId],\n              ...updates,\n            },\n          },\n        }));\n      },\n\n      clearSettings: (agentId: number) => {\n        set((state) => {\n          const newSettings = { ...state.settings };\n          delete newSettings[agentId];\n          return { settings: newSettings };\n        });\n      },\n    }),\n    {\n      name: 'customgpt-chat-settings',\n    }\n  )\n);","import type { StreamChunk, Citation, StreamCallbacks, StreamHandlerConfig } from '@/types';\nimport { parseStreamChunk } from '@/lib/utils';\n\nexport interface StreamMessage {\n  id: string;\n  content: string;\n  citations: Citation[];\n  isComplete: boolean;\n}\n\nexport class StreamHandler {\n  private config: Required<StreamHandlerConfig>;\n  private abortController: AbortController | null = null;\n  private currentMessage: StreamMessage | null = null;\n\n  constructor(config: StreamHandlerConfig = {}) {\n    this.config = {\n      timeout: config.timeout || 60000,\n      retryAttempts: config.retryAttempts || 3,\n      retryDelay: config.retryDelay || 1000,\n    };\n  }\n\n  /**\n   * Process a streaming response\n   */\n  async processStream(\n    stream: ReadableStream,\n    callbacks: StreamCallbacks\n  ): Promise<StreamMessage> {\n    this.abortController = new AbortController();\n    this.currentMessage = {\n      id: this.generateId(),\n      content: '',\n      citations: [],\n      isComplete: false,\n    };\n\n    const reader = stream.getReader();\n    const decoder = new TextDecoder();\n    let buffer = '';\n\n    // Set timeout\n    const timeoutId = setTimeout(() => {\n      this.cancel();\n      callbacks.onError?.(new Error('Stream timeout'));\n    }, this.config.timeout);\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n\n        if (done) {\n          this.currentMessage.isComplete = true;\n          callbacks.onComplete?.();\n          break;\n        }\n\n        // Decode chunk and add to buffer\n        buffer += decoder.decode(value, { stream: true });\n        \n        // Process complete lines\n        const lines = buffer.split('\\n');\n        buffer = lines.pop() || ''; // Keep incomplete line in buffer\n\n        for (const line of lines) {\n          if (line.trim()) {\n            await this.processLine(line, callbacks);\n          }\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error && error.name === 'AbortError') {\n        callbacks.onError?.(new Error('Stream cancelled'));\n      } else {\n        callbacks.onError?.(error instanceof Error ? error : new Error('Unknown streaming error'));\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      reader.releaseLock();\n      this.abortController = null;\n    }\n\n    return this.currentMessage;\n  }\n\n  /**\n   * Process a single line from the stream\n   */\n  private async processLine(line: string, callbacks: StreamCallbacks): Promise<void> {\n    const chunk = parseStreamChunk(line);\n    \n    if (!chunk || !this.currentMessage) return;\n\n    switch (chunk.type) {\n      case 'content':\n        if (chunk.content) {\n          this.currentMessage.content += chunk.content;\n          callbacks.onChunk?.(chunk.content);\n        }\n        break;\n\n      case 'citation':\n        if (chunk.citations) {\n          this.currentMessage.citations.push(...chunk.citations);\n          chunk.citations.forEach((citation: Citation) => {\n            callbacks.onCitation?.(citation);\n          });\n        }\n        break;\n\n      case 'done':\n        this.currentMessage.isComplete = true;\n        callbacks.onComplete?.();\n        return;\n\n      case 'error':\n        callbacks.onError?.(new Error(chunk.error || 'Stream error'));\n        return;\n\n      default:\n        // Handle unknown chunk types gracefully\n        console.warn('Unknown stream chunk type:', chunk.type);\n    }\n  }\n\n  /**\n   * Cancel the current stream\n   */\n  cancel(): void {\n    if (this.abortController) {\n      this.abortController.abort();\n    }\n  }\n\n  /**\n   * Get current message state\n   */\n  getCurrentMessage(): StreamMessage | null {\n    return this.currentMessage;\n  }\n\n  /**\n   * Check if streaming is active\n   */\n  isStreaming(): boolean {\n    return this.abortController !== null && this.currentMessage !== null && !this.currentMessage.isComplete;\n  }\n\n  private generateId(): string {\n    return Math.random().toString(36).substring(2) + Date.now().toString(36);\n  }\n}\n\n/**\n * Utility class for managing multiple concurrent streams\n */\nexport class StreamManager {\n  private streams: Map<string, StreamHandler> = new Map();\n  private maxConcurrentStreams: number;\n\n  constructor(maxConcurrentStreams: number = 3) {\n    this.maxConcurrentStreams = maxConcurrentStreams;\n  }\n\n  /**\n   * Start a new stream\n   */\n  async startStream(\n    streamId: string,\n    stream: ReadableStream,\n    callbacks: StreamCallbacks,\n    config?: StreamHandlerConfig\n  ): Promise<StreamMessage> {\n    // Check if we're at the concurrent limit\n    if (this.streams.size >= this.maxConcurrentStreams) {\n      throw new Error(`Maximum concurrent streams (${this.maxConcurrentStreams}) reached`);\n    }\n\n    // Cancel existing stream with same ID if it exists\n    if (this.streams.has(streamId)) {\n      this.cancelStream(streamId);\n    }\n\n    const handler = new StreamHandler(config);\n    this.streams.set(streamId, handler);\n\n    try {\n      const result = await handler.processStream(stream, {\n        ...callbacks,\n        onComplete: () => {\n          this.streams.delete(streamId);\n          callbacks.onComplete?.();\n        },\n        onError: (error) => {\n          this.streams.delete(streamId);\n          callbacks.onError?.(error);\n        },\n      });\n\n      return result;\n    } catch (error) {\n      this.streams.delete(streamId);\n      throw error;\n    }\n  }\n\n  /**\n   * Cancel a specific stream\n   */\n  cancelStream(streamId: string): void {\n    const handler = this.streams.get(streamId);\n    if (handler) {\n      handler.cancel();\n      this.streams.delete(streamId);\n    }\n  }\n\n  /**\n   * Cancel all active streams\n   */\n  cancelAllStreams(): void {\n    this.streams.forEach(handler => handler.cancel());\n    this.streams.clear();\n  }\n\n  /**\n   * Get active stream IDs\n   */\n  getActiveStreams(): string[] {\n    return Array.from(this.streams.keys());\n  }\n\n  /**\n   * Get stream status\n   */\n  getStreamStatus(streamId: string): {\n    exists: boolean;\n    isStreaming: boolean;\n    message: StreamMessage | null;\n  } {\n    const handler = this.streams.get(streamId);\n    \n    if (!handler) {\n      return { exists: false, isStreaming: false, message: null };\n    }\n\n    return {\n      exists: true,\n      isStreaming: handler.isStreaming(),\n      message: handler.getCurrentMessage(),\n    };\n  }\n\n  /**\n   * Get number of active streams\n   */\n  getActiveStreamCount(): number {\n    return this.streams.size;\n  }\n}\n\n/**\n * Parse Server-Sent Events (SSE) data\n */\nexport function parseSSEData(data: string): any | null {\n  try {\n    if (data === '[DONE]') {\n      return { type: 'done' };\n    }\n    \n    const parsed = JSON.parse(data);\n    \n    // Handle different response formats\n    if (parsed.choices && parsed.choices[0]) {\n      const choice = parsed.choices[0];\n      \n      if (choice.delta && choice.delta.content) {\n        return {\n          type: 'content',\n          content: choice.delta.content,\n        };\n      }\n      \n      if (choice.message && choice.message.content) {\n        return {\n          type: 'content',\n          content: choice.message.content,\n        };\n      }\n    }\n    \n    // Handle CustomGPT format\n    if (parsed.content) {\n      return {\n        type: 'content',\n        content: parsed.content,\n        citations: parsed.citations || [],\n      };\n    }\n    \n    return parsed;\n  } catch (error) {\n    console.error('Failed to parse SSE data:', error);\n    return null;\n  }\n}\n\n\n/**\n * Validate stream format\n */\nexport function validateStreamChunk(chunk: any): boolean {\n  if (!chunk || typeof chunk !== 'object') {\n    return false;\n  }\n\n  // Must have a type\n  if (!chunk.type || typeof chunk.type !== 'string') {\n    return false;\n  }\n\n  // Validate specific types\n  switch (chunk.type) {\n    case 'content':\n      return typeof chunk.content === 'string';\n    \n    case 'citation':\n      return Array.isArray(chunk.citations);\n    \n    case 'done':\n    case 'error':\n      return true;\n    \n    default:\n      return false;\n  }\n}\n\n// Global stream manager instance\nexport const globalStreamManager = new StreamManager();","/**\n * Message Store - Core Chat Functionality\n * \n * This store manages all message-related state and operations.\n * It's the heart of the chat system, handling:\n * - Message sending and receiving\n * - Real-time streaming responses\n * - Message history management\n * - Local storage fallback\n * - Error handling and retries\n * \n * Architecture:\n * - Uses Map for efficient conversation-based message storage\n * - Integrates with agent and conversation stores\n * - Handles both streaming and non-streaming API responses\n * - Provides local storage backup for offline access\n * \n * Key Features:\n * - Automatic conversation creation if needed\n * - Streaming with fallback to non-streaming\n * - Optimistic UI updates\n * - Message feedback tracking\n * - File upload support\n * \n * Features:\n * - Real-time streaming with local storage persistence\n * - Robust error handling with graceful fallbacks\n * - Comprehensive logging and debugging support\n * - Optimistic UI updates with consistent message ordering\n */\n\nimport { create } from 'zustand';\nimport type { MessageStore, ChatMessage, Citation, FeedbackType, MessageDetails, MessageMetadata } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useAgentStore } from './agents';\nimport { useConversationStore } from './conversations';\nimport { useChatSettingsStore } from './chat-settings';\nimport { generateId } from '@/lib/utils';\nimport { globalStreamManager } from '@/lib/streaming/handler';\nimport { logger } from '@/lib/logger';\nimport { toast } from 'sonner';\n\n/**\n * Local storage configuration\n * Provides offline access and caching for better UX\n */\nconst MESSAGES_STORAGE_KEY = 'customgpt-messages-cache';\n\n/**\n * Save messages to local storage\n * Provides a fallback when API is unavailable\n * @param conversationId - The conversation to save messages for\n * @param messages - Array of messages to save\n */\nfunction saveMessagesToStorage(conversationId: string, messages: ChatMessage[]) {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    const cache = stored ? JSON.parse(stored) : {};\n    cache[conversationId] = messages;\n    localStorage.setItem(MESSAGES_STORAGE_KEY, JSON.stringify(cache));\n  } catch (error) {\n    // Silent fail - storage is optional\n  }\n}\n\n/**\n * Load messages from local storage\n * Used as fallback when API is unavailable\n * @param conversationId - The conversation to load messages for\n * @returns Array of messages or null if not found\n */\nfunction loadMessagesFromStorage(conversationId: string): ChatMessage[] | null {\n  try {\n    const stored = localStorage.getItem(MESSAGES_STORAGE_KEY);\n    if (!stored) return null;\n    const cache = JSON.parse(stored);\n    return cache[conversationId] || null;\n  } catch (error) {\n    // Silent fail - storage is optional\n    return null;\n  }\n}\n\n/**\n * Fetch citation details by IDs\n * \n * Converts citation IDs to full citation objects with title, source, content\n * \n * @param citationIds - Array of citation IDs\n * @param projectId - The project/agent ID\n * @returns Array of citation objects with details\n */\n/**\n * Validate and filter citation IDs\n * \n * @param citationIds - Raw citation IDs from API\n * @returns Filtered array of valid citation IDs\n */\nfunction validateCitationIds(citationIds: any[]): number[] {\n  if (!Array.isArray(citationIds)) {\n    logger.warn('MESSAGES', 'Citation IDs is not an array', { citationIds });\n    return [];\n  }\n  \n  const validIds = citationIds\n    .filter(id => typeof id === 'number' && !isNaN(id) && id > 0)\n    .filter((id, index, arr) => arr.indexOf(id) === index); // Remove duplicates\n  \n  if (validIds.length !== citationIds.length) {\n    logger.warn('MESSAGES', 'Filtered out invalid citation IDs', {\n      original: citationIds,\n      valid: validIds,\n      filtered: citationIds.length - validIds.length\n    });\n  }\n  \n  return validIds;\n}\n\nasync function fetchCitationDetails(citationIds: number[], projectId: number): Promise<Citation[]> {\n  // Validate input citation IDs\n  const validCitationIds = validateCitationIds(citationIds);\n  \n  if (validCitationIds.length === 0) {\n    logger.warn('MESSAGES', 'No valid citation IDs to fetch', { citationIds });\n    return [];\n  }\n  \n  logger.info('MESSAGES', 'Fetching citation details', {\n    projectId,\n    citationIds: validCitationIds,\n    count: validCitationIds.length\n  });\n  \n  const client = getClient();\n  const citations: Citation[] = [];\n  \n  for (let i = 0; i < validCitationIds.length; i++) {\n    const citationId = validCitationIds[i];\n    \n    try {\n      const response = await client.getCitation(projectId, citationId);\n      \n      if (response.data) {\n        const citation = {\n          id: citationId.toString(), // Convert to string as per Citation interface\n          index: i + 1, // 1-based index for display\n          title: response.data.title || `Citation ${i + 1}`,\n          source: response.data.url,\n          url: response.data.url,\n          content: response.data.description || '',\n        };\n        citations.push(citation);\n        \n        logger.info('MESSAGES', 'Citation fetched successfully', {\n          citationId,\n          title: citation.title,\n          hasContent: !!citation.content,\n          hasUrl: !!citation.url\n        });\n      } else {\n        logger.warn('MESSAGES', 'Citation API returned empty data', {\n          citationId,\n          response\n        });\n      }\n    } catch (error) {\n      logger.warn('MESSAGES', 'Failed to fetch citation details', {\n        citationId,\n        projectId,\n        error: error instanceof Error ? error.message : String(error),\n        errorType: error instanceof Error ? error.constructor.name : typeof error\n      });\n      // Only create fallback citations for actual errors, not empty responses\n      // This reduces wrong citations from appearing\n      if (error instanceof Error && error.message.includes('404')) {\n        logger.info('MESSAGES', 'Citation not found, skipping fallback', { citationId });\n        // Skip creating fallback for 404 errors - citation simply doesn't exist\n        continue;\n      } else {\n        // Create fallback only for network/server errors\n        citations.push({\n          id: citationId.toString(), // Convert to string\n          index: i + 1,\n          title: `Citation ${i + 1}`,\n          source: '',\n          url: '',\n          content: 'Citation details unavailable',\n        });\n      }\n    }\n  }\n  \n  logger.info('MESSAGES', 'Citation fetching completed', {\n    requested: validCitationIds.length,\n    fetched: citations.length,\n    success: citations.filter(c => c.content !== 'Citation details unavailable').length\n  });\n  \n  return citations;\n}\n\n/**\n * Message Store Implementation\n * \n * State Structure:\n * - messages: Map<conversationId, ChatMessage[]> - All messages grouped by conversation\n * - streamingMessage: Current message being streamed (null when not streaming)\n * - isStreaming: Whether a message is currently being streamed\n * - loading: General loading state for message operations\n * - error: Current error message if any\n */\nexport const useMessageStore = create<MessageStore>((set, get) => ({\n  // Initialize with empty state\n  messages: new Map(),\n  streamingMessage: null,\n  isStreaming: false,\n  loading: false,\n  error: null,\n\n  /**\n   * Send a message to the current agent\n   * \n   * Flow:\n   * 1. Validate agent selection\n   * 2. Ensure conversation exists (create if needed)\n   * 3. Create and add user message (optimistic update)\n   * 4. Upload files if present\n   * 5. Start streaming response\n   * 6. Fall back to non-streaming if streaming fails\n   * 7. Handle errors gracefully\n   * \n   * \n   * @param content - Message text\n   * @param files - Optional file attachments\n   */\n  sendMessage: async (content: string, files?: File[]) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    if (!currentAgent) {\n      logger.error('MESSAGES', 'No agent selected when trying to send message');\n      \n      // Check if this is due to missing API keys\n      const response = await fetch('/api/proxy/user/limits').catch(() => null);\n      if (!response || response.status === 401 || response.status === 500) {\n        throw new Error('API key not configured. Please add CUSTOMGPT_API_KEY to your .env.local file and restart the server.');\n      }\n      \n      throw new Error('No agent selected. Please select or create an agent first.');\n    }\n\n    logger.info('MESSAGES', 'Sending message', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name,\n      messageLength: content.length,\n      hasFiles: files && files.length > 0\n    });\n\n    // Ensure we have a conversation\n    const conversation = await conversationStore.ensureConversation(\n      currentAgent.id,\n      content\n    );\n\n    logger.info('MESSAGES', 'Conversation ensured', {\n      conversationId: conversation.id,\n      sessionId: conversation.session_id,\n      hasSessionId: !!conversation.session_id,\n      isNew: !conversation.message_count || conversation.message_count === 0\n    });\n\n    if (!conversation.session_id) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversation });\n      throw new Error('Conversation missing session_id');\n    }\n\n    set({ loading: true, error: null });\n\n    // Create user message\n    const userMessage: ChatMessage = {\n      id: generateId(),\n      role: 'user',\n      content,\n      timestamp: new Date().toISOString(),\n      status: 'sending',\n    };\n\n    // Add user message to store\n    get().addMessage(conversation.id.toString(), userMessage);\n\n    // Create assistant message placeholder\n    const assistantMessage: ChatMessage = {\n      id: generateId(),\n      role: 'assistant',\n      content: '',\n      timestamp: new Date().toISOString(),\n      citations: [],\n    };\n\n    set({ \n      streamingMessage: assistantMessage,\n      isStreaming: true,\n      loading: false,\n    });\n\n    try {\n      // Handle file uploads if present\n      let sourceIds: string[] = [];\n      if (files && files.length > 0) {\n        const client = getClient();\n        const uploadResponses = await Promise.all(\n          files.map(file => client.uploadFile(currentAgent.id, file))\n        );\n        \n        // Extract source IDs from upload responses\n        sourceIds = uploadResponses\n          .filter(response => response?.data?.id)\n          .map(response => response.data.id.toString());\n          \n        logger.info('MESSAGES', 'Files uploaded successfully', {\n          fileCount: files.length,\n          sourceIds: sourceIds\n        });\n      }\n\n      // Update user message status\n      userMessage.status = 'sent';\n      get().addMessage(conversation.id.toString(), userMessage);\n\n      // Start streaming with correct parameters\n      const client = getClient();\n      \n      logger.info('MESSAGES', 'Starting message stream', {\n        agentId: currentAgent.id,\n        sessionId: conversation.session_id,\n        messageContent: content.substring(0, 50),\n        hasSourceIds: sourceIds.length > 0,\n        sourceIds: sourceIds\n      });\n      \n      try {\n        // Get chat settings for current agent\n        const chatSettings = useChatSettingsStore.getState().getSettings(currentAgent.id);\n        \n        // Prepare the request data - only send fields that the API accepts\n        const requestData: { \n          prompt: string; \n          source_ids?: string[];\n          response_source?: string;\n        } = { \n          prompt: content || '', // Ensure we always have a prompt, even if empty\n          response_source: chatSettings.response_source || 'default',\n        };\n        \n        // Add source_ids if we have uploaded files\n        if (sourceIds.length > 0) {\n          requestData.source_ids = sourceIds;\n          \n          // If no text prompt was provided, add a default prompt for file analysis\n          if (!content.trim()) {\n            requestData.prompt = 'Please analyze the uploaded file(s).';\n          }\n        }\n        \n        await client.sendMessageStream(\n          currentAgent.id,\n          conversation.session_id,  // Use session_id instead of id\n          requestData,\n          (chunk) => {\n              logger.info('MESSAGES', 'Received stream chunk', { \n                type: chunk.type, \n                hasContent: !!chunk.content,\n                contentLength: chunk.content?.length,\n                contentPreview: chunk.content?.substring(0, 50)\n              });\n              \n              if (chunk.type === 'content' && chunk.content) {\n                get().updateStreamingMessage(chunk.content, chunk.citations);\n              } else if (chunk.type === 'citation' && chunk.citations) {\n                // Handle citation-only chunks\n                const current = get().streamingMessage;\n                if (current && chunk.citations && Array.isArray(chunk.citations)) {\n                  // Check if citations are IDs or objects\n                  if (chunk.citations.length > 0 && typeof chunk.citations[0] === 'number') {\n                    // Fetch citation details asynchronously\n                    fetchCitationDetails(chunk.citations as any as number[], currentAgent.id).then(citationDetails => {\n                      const updatedCurrent = get().streamingMessage;\n                      if (updatedCurrent) {\n                        set({\n                          streamingMessage: {\n                            ...updatedCurrent,\n                            citations: citationDetails\n                          }\n                        });\n                      }\n                    });\n                  } else {\n                    // Citations might already be objects\n                    set({\n                      streamingMessage: {\n                        ...current,\n                        citations: chunk.citations\n                      }\n                    });\n                  }\n                }\n              }\n            },\n            async (streamError) => {\n              logger.error('MESSAGES', 'Streaming failed, attempting fallback to non-streaming', streamError, {\n                errorMessage: streamError.message,\n                agentId: currentAgent.id,\n                sessionId: conversation.session_id\n              });\n              \n              // Try fallback to non-streaming API\n              try {\n                logger.info('MESSAGES', 'Using non-streaming fallback');\n                \n                const response = await client.sendMessage(\n                  currentAgent.id,\n                  conversation.session_id,\n                  { \n                    prompt: requestData.prompt,\n                    stream: false,\n                    source_ids: requestData.source_ids\n                  }\n                );\n                \n                // Update streaming message with the complete response\n                const finalMessage = get().streamingMessage;\n                if (finalMessage && response) {\n                  // Handle different response formats from API\n                  let messageData: any;\n                  if (response.data) {\n                    messageData = response.data;\n                  } else {\n                    // Direct response format - cast to any to handle the actual API structure\n                    messageData = response as any;\n                  }\n                  \n                  finalMessage.content = messageData?.openai_response || messageData?.content || 'No response received';\n                  \n                  // Fetch citation details if needed\n                  if (messageData?.citations && Array.isArray(messageData.citations) && messageData.citations.length > 0) {\n                    if (typeof messageData.citations[0] === 'number') {\n                      // Citations are IDs, fetch details\n                      finalMessage.citations = await fetchCitationDetails(messageData.citations, currentAgent.id);\n                    } else {\n                      // Citations might already be objects\n                      finalMessage.citations = messageData.citations;\n                    }\n                  } else {\n                    finalMessage.citations = [];\n                  }\n                  \n                  finalMessage.status = 'sent';\n                  \n                  // Update the message ID to include the prompt ID if available\n                  if (messageData?.id) {\n                    finalMessage.id = `${messageData.id}-assistant`;\n                    // Also update the user message ID\n                    const conversationMessages = get().messages.get(conversation.id.toString()) || [];\n                    const lastUserMessage = conversationMessages.filter(m => m.role === 'user').pop();\n                    if (lastUserMessage && lastUserMessage.id === userMessage.id) {\n                      lastUserMessage.id = `${messageData.id}-user`;\n                      get().addMessage(conversation.id.toString(), lastUserMessage);\n                    }\n                  }\n                  \n                  // Add details from the API response\n                  finalMessage.details = {\n                    user_id: messageData?.user_id,\n                    conversation_id: messageData?.conversation_id,\n                    updated_at: messageData?.updated_at,\n                    prompt_id: messageData?.id,\n                    metadata: messageData?.metadata ? {\n                      user_ip: messageData.metadata.user_ip,\n                      user_agent: messageData.metadata.user_agent,\n                      external_id: messageData.metadata.external_id,\n                      request_source: messageData.metadata.request_source,\n                    } : undefined,\n                  };\n                  get().addMessage(conversation.id.toString(), finalMessage);\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                logger.info('MESSAGES', 'Fallback to non-streaming successful');\n                \n              } catch (fallbackError: any) {\n                logger.error('MESSAGES', 'Both streaming and non-streaming failed', fallbackError);\n                \n                // Update assistant message with error\n                const errorMessage = get().streamingMessage;\n                if (errorMessage) {\n                  errorMessage.content = 'Sorry, I encountered an error while processing your message. Please try again.';\n                  errorMessage.status = 'error';\n                  get().addMessage(conversation.id.toString(), errorMessage);\n                }\n                \n                // Extract error details including status code\n                let errorText = 'Communication error';\n                if (fallbackError.status) {\n                  switch (fallbackError.status) {\n                    case 429:\n                      errorText = 'You have exhausted your current query credits. Please contact customer service for assistance.';\n                      break;\n                    case 401:\n                      errorText = 'API Token is either missing or invalid';\n                      break;\n                    case 404:\n                      errorText = 'Agent or conversation not found';\n                      break;\n                    case 400:\n                      errorText = 'Invalid request format';\n                      break;\n                    default:\n                      errorText = fallbackError.message || `Error ${fallbackError.status}`;\n                  }\n                } else if (fallbackError.message) {\n                  errorText = fallbackError.message;\n                }\n                \n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                  error: errorText,\n                });\n              }\n            },\n            async () => {\n              // onComplete callback - enrich streaming message with API data\n              const finalMessage = get().streamingMessage;\n              if (finalMessage) {\n                finalMessage.status = 'sent';\n                \n                // Add message immediately to ensure it's visible\n                get().addMessage(conversation.id.toString(), finalMessage);\n                \n                // Clear streaming state now that message is added\n                set({ \n                  streamingMessage: null,\n                  isStreaming: false,\n                });\n                \n                // Fetch latest messages to enrich the streaming message with API metadata\n                try {\n                  logger.info('MESSAGES', 'Enriching streaming message with API data');\n                  const client = getClient();\n                  const response = await client.getMessages(currentAgent.id, conversation.session_id);\n                  \n                  // Process API response to find messages\n                  let apiMessages = [];\n                  if (response && typeof response === 'object') {\n                    if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n                      apiMessages = (response as any).data.messages.data;\n                    } else if (Array.isArray((response as any).data)) {\n                      apiMessages = (response as any).data;\n                    } else if (Array.isArray(response)) {\n                      apiMessages = response;\n                    } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n                      apiMessages = (response as any).data.data;\n                    }\n                  }\n                  \n                  if (apiMessages.length > 0) {\n                    // Find the most recent assistant message (should be our streaming message)\n                    const latestApiMessage = apiMessages[apiMessages.length - 1];\n                    \n                    if (latestApiMessage && latestApiMessage.openai_response) {\n                      // Enrich the streaming message with API data\n                      finalMessage.id = `${latestApiMessage.id}-assistant`;\n                      finalMessage.timestamp = latestApiMessage.created_at || latestApiMessage.timestamp || finalMessage.timestamp;\n                      \n                      // Add full message details\n                      finalMessage.details = {\n                        user_id: latestApiMessage.user_id,\n                        conversation_id: latestApiMessage.conversation_id,\n                        updated_at: latestApiMessage.updated_at,\n                        prompt_id: latestApiMessage.id,\n                        metadata: latestApiMessage.metadata ? {\n                          user_ip: latestApiMessage.metadata.user_ip,\n                          user_agent: latestApiMessage.metadata.user_agent,\n                          external_id: latestApiMessage.metadata.external_id,\n                          request_source: latestApiMessage.metadata.request_source,\n                        } : undefined,\n                      };\n                      \n                      // Also enrich the user message with proper ID and details\n                      const conversationMessages = get().messages.get(conversation.id.toString()) || [];\n                      const lastUserMessage = conversationMessages.filter(m => m.role === 'user').pop();\n                      if (lastUserMessage && lastUserMessage.id === userMessage.id && latestApiMessage.user_query) {\n                        lastUserMessage.id = `${latestApiMessage.id}-user`;\n                        lastUserMessage.timestamp = latestApiMessage.created_at || latestApiMessage.timestamp || lastUserMessage.timestamp;\n                        lastUserMessage.details = {\n                          user_id: latestApiMessage.user_id,\n                          conversation_id: latestApiMessage.conversation_id,\n                          updated_at: latestApiMessage.updated_at,\n                          prompt_id: latestApiMessage.id,\n                          metadata: latestApiMessage.metadata ? {\n                            user_ip: latestApiMessage.metadata.user_ip,\n                            user_agent: latestApiMessage.metadata.user_agent,\n                            external_id: latestApiMessage.metadata.external_id,\n                            request_source: latestApiMessage.metadata.request_source,\n                          } : undefined,\n                        };\n                        get().addMessage(conversation.id.toString(), lastUserMessage);\n                      }\n                      \n                      // Enrich citations if they exist\n                      // Preserve existing citations from streaming if API doesn't provide them\n                      const existingCitations = finalMessage.citations || [];\n                      \n                      if (latestApiMessage.citations && Array.isArray(latestApiMessage.citations) && latestApiMessage.citations.length > 0) {\n                        if (typeof latestApiMessage.citations[0] === 'number') {\n                          // Citations are IDs, fetch details\n                          const citationDetails = await fetchCitationDetails(latestApiMessage.citations, currentAgent.id);\n                          finalMessage.citations = citationDetails;\n                        } else {\n                          // Citations might already be objects\n                          finalMessage.citations = latestApiMessage.citations;\n                        }\n                      } else {\n                        // Keep existing citations from streaming if API doesn't provide any\n                        finalMessage.citations = existingCitations;\n                      }\n                      \n                      // Update feedback if present\n                      if (latestApiMessage.response_feedback?.reaction) {\n                        finalMessage.feedback = latestApiMessage.response_feedback.reaction === 'liked' ? 'like' : \n                                               latestApiMessage.response_feedback.reaction === 'disliked' ? 'dislike' : \n                                               undefined;\n                      }\n                      \n                      // Update the enriched message in the store (it's already added, so this updates it)\n                      get().addMessage(conversation.id.toString(), finalMessage);\n                      \n                      logger.info('MESSAGES', 'Successfully enriched streaming message with API data', {\n                        messageId: finalMessage.id,\n                        hasDetails: !!finalMessage.details,\n                        citationCount: finalMessage.citations?.length || 0\n                      });\n                    } else {\n                      // API message exists but doesn't have expected format\n                      logger.info('MESSAGES', 'API message format mismatch, keeping original message');\n                    }\n                  } else {\n                    // No API messages found\n                    logger.info('MESSAGES', 'No API messages found for enrichment');\n                  }\n                } catch (enrichmentError) {\n                  logger.warn('MESSAGES', 'Failed to enrich streaming message, keeping basic version', enrichmentError);\n                  // Message is already added, enrichment failed but user can still see the response\n                }\n              }\n            }\n        );\n      } catch (setupError) {\n        logger.error('MESSAGES', 'Failed to setup streaming', setupError);\n        throw setupError;\n      }\n    } catch (error: any) {\n      logger.error('MESSAGES', 'Failed to send message', error, {\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined,\n        status: error.status,\n        agentId: currentAgent.id,\n        conversationId: conversation.id,\n        sessionId: conversation.session_id\n      });\n      \n      // Update user message status\n      userMessage.status = 'error';\n      get().addMessage(conversation.id.toString(), userMessage);\n      \n      // Extract error details including status code\n      let errorText = 'Failed to send message';\n      if (error.status) {\n        switch (error.status) {\n          case 429:\n            errorText = 'You have exhausted your current query credits. Please contact customer service for assistance.';\n            break;\n          case 401:\n            errorText = 'API Token is either missing or invalid';\n            break;\n          case 403:\n            // Check if agent is inactive by looking at current agent status\n            const agentStore = useAgentStore.getState();\n            const { currentAgent: currentAgentFor403 } = agentStore;\n            if (currentAgentFor403 && !currentAgentFor403.is_chat_active) {\n              errorText = 'Agent is inactive - no documents uploaded. Please add documents to activate the agent.';\n            } else {\n              errorText = 'Access denied. You don\\'t have permission to access this resource.';\n            }\n            break;\n          case 404:\n            errorText = 'Agent or conversation not found';\n            break;\n          case 400:\n            errorText = 'Invalid request format';\n            break;\n          case 500:\n            errorText = 'Internal server error. Please try again later.';\n            break;\n          default:\n            errorText = error.message || `Error ${error.status}`;\n        }\n      } else if (error.message) {\n        errorText = error.message;\n      }\n      \n      set({ \n        streamingMessage: null,\n        isStreaming: false,\n        error: errorText,\n        loading: false,\n      });\n      \n      throw error;\n    }\n  },\n\n  /**\n   * Add or update a message in the store\n   * \n   * Features:\n   * - Handles both new messages and updates\n   * - Maintains message order\n   * - Automatically saves to local storage\n   * - Efficient update using message ID lookup\n   * \n   * @param conversationId - The conversation to add the message to\n   * @param message - The message to add or update\n   */\n  addMessage: (conversationId: string, message: ChatMessage) => {\n    set(state => {\n      const newMessages = new Map(state.messages);\n      const conversationMessages = newMessages.get(conversationId) || [];\n      \n      // Check if message already exists and update it\n      const existingIndex = conversationMessages.findIndex(m => m.id === message.id);\n      if (existingIndex >= 0) {\n        // Update existing message\n        conversationMessages[existingIndex] = message;\n      } else {\n        // Add new message\n        conversationMessages.push(message);\n      }\n      \n      newMessages.set(conversationId, conversationMessages);\n      \n      // Save to local storage as fallback\n      saveMessagesToStorage(conversationId, conversationMessages);\n      \n      return { messages: newMessages };\n    });\n  },\n\n  /**\n   * Update the currently streaming message\n   * \n   * Used during streaming to append content chunks\n   * and update citations as they arrive\n   * \n   * @param content - Content chunk to append\n   * @param citations - Updated citations (optional)\n   */\n  updateStreamingMessage: (content: string, citations?: Citation[]) => {\n    set(state => {\n      if (!state.streamingMessage) return state;\n      \n      return {\n        streamingMessage: {\n          ...state.streamingMessage,\n          content: state.streamingMessage.content + content, // Append content\n          citations: citations || state.streamingMessage.citations, // Update citations if provided\n        },\n      };\n    });\n  },\n\n  clearMessages: (conversationId?: string) => {\n    set(state => {\n      if (conversationId) {\n        const newMessages = new Map(state.messages);\n        newMessages.delete(conversationId);\n        return { messages: newMessages };\n      } else {\n        // Clear all messages\n        return { messages: new Map() };\n      }\n    });\n  },\n\n  updateMessageFeedback: async (messageId: string, feedback: FeedbackType) => {\n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    const { currentConversation } = conversationStore;\n    \n    if (!currentAgent || !currentConversation) {\n      logger.warn('MESSAGES', 'Cannot update feedback - missing agent or conversation');\n      return;\n    }\n\n    // Find the message\n    const conversationMessages = get().messages.get(currentConversation.id.toString()) || [];\n    const message = conversationMessages.find(m => m.id === messageId);\n    \n    if (!message) {\n      logger.warn('MESSAGES', 'Message not found for feedback update', { messageId });\n      return;\n    }\n\n    // Get the prompt ID from message details or try to extract from message ID\n    let promptId: number | undefined;\n    \n    if (message.details?.prompt_id) {\n      promptId = message.details.prompt_id;\n    } else {\n      // Try to extract from message ID format \"{promptId}-assistant\" or \"{promptId}-user\"\n      const promptIdMatch = message.id.match(/^(\\d+)-/);\n      if (promptIdMatch) {\n        promptId = parseInt(promptIdMatch[1]);\n      }\n    }\n    \n    if (!promptId) {\n      logger.error('MESSAGES', 'Could not determine prompt ID for message', { messageId, details: message.details });\n      toast.error('Unable to update feedback. Message ID not found.');\n      return;\n    }\n    const sessionId = currentConversation.session_id;\n    \n    if (!sessionId) {\n      logger.error('MESSAGES', 'Conversation missing session_id', { conversationId: currentConversation.id });\n      return;\n    }\n\n    try {\n      // Update local state immediately (optimistic update)\n      const updatedMessage = { ...message, feedback };\n      get().addMessage(currentConversation.id.toString(), updatedMessage);\n\n      // Send to API\n      const client = getClient();\n      \n      // Map feedback directly to API format (no neutral option)\n      const feedbackValue = feedback === 'like' ? 'thumbs_up' : 'thumbs_down';\n      \n      logger.info('MESSAGES', 'Updating message feedback', {\n        projectId: currentAgent.id,\n        sessionId,\n        promptId,\n        feedback: feedbackValue\n      });\n      \n      const response = await client.updateMessageFeedback(\n        currentAgent.id,\n        sessionId,\n        promptId,\n        { feedback: feedbackValue }\n      );\n      \n      // The feedback was already updated optimistically above\n      // The response doesn't include the updated message data in the expected format\n      logger.info('MESSAGES', 'Message feedback updated successfully');\n      \n      // Show success toast\n      toast.success('Thanks for your feedback!');\n      \n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to update message feedback', error);\n      \n      // Revert local state on error\n      get().addMessage(currentConversation.id.toString(), message);\n      \n      // Show error toast\n      if ((error as any)?.status === 401) {\n        toast.error('Authentication failed. Please log in again.');\n      } else if ((error as any)?.status === 404) {\n        toast.error('Message not found.');\n      } else {\n        toast.error('Failed to update feedback. Please try again.');\n      }\n    }\n  },\n\n  // Utility methods\n  getMessagesForConversation: (conversationId: string): ChatMessage[] => {\n    return get().messages.get(conversationId) || [];\n  },\n\n  cancelStreaming: () => {\n    globalStreamManager.cancelAllStreams();\n    set({ \n      streamingMessage: null,\n      isStreaming: false,\n    });\n  },\n\n  /**\n   * Load message history for a conversation\n   * \n   * API Response Handling:\n   * - Supports multiple response formats from the API\n   * - Converts API format to internal ChatMessage format\n   * - Falls back to local storage if API fails\n   * - Handles both user_query and openai_response fields\n   * - Fetches citation details for citation IDs\n   * \n   * @param conversationId - The conversation to load messages for\n   */\n  loadMessages: async (conversationId: string) => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    if (isDemoMode) {\n      logger.info('MESSAGES', 'Skipping message load in demo mode', { conversationId });\n      // Just ensure the conversation has an entry in the messages map\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    // Skip API calls for locally created conversations (they don't exist on server)\n    if (conversationId.startsWith('conv_')) {\n      logger.info('MESSAGES', 'Skipping API load for local conversation', { conversationId });\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n    \n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    const { currentAgent } = agentStore;\n    const { conversations } = conversationStore;\n    \n    if (!currentAgent) {\n      logger.warn('MESSAGES', 'No current agent when loading messages', { conversationId });\n      return;\n    }\n\n    // Find the conversation to get its session_id\n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) {\n      logger.error('MESSAGES', 'Conversation not found in store', { \n        conversationId,\n        availableConversations: conversations.map(c => c.id)\n      });\n      // Don't set error, just ensure empty message array exists\n      set(state => {\n        const newMessages = new Map(state.messages);\n        if (!newMessages.has(conversationId)) {\n          newMessages.set(conversationId, []);\n        }\n        return { messages: newMessages, loading: false };\n      });\n      return;\n    }\n\n    logger.info('MESSAGES', 'Loading messages for conversation', {\n      conversationId,\n      sessionId: conversation.session_id,\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n\n    set({ loading: true, error: null });\n\n    try {\n      const client = getClient();\n      const response = await client.getMessages(currentAgent.id, conversation.session_id);\n      logger.info('MESSAGES', 'Messages API response received', {\n        conversationId,\n        responseType: typeof response,\n        hasData: !!(response as any)?.data,\n        dataLength: Array.isArray((response as any)?.data) ? (response as any).data.length : 0\n      });\n      \n      // Handle different response formats from the API\n      let messages = [];\n      if (response && typeof response === 'object') {\n        // API documentation shows response format: { status: \"success\", data: { conversation: {...}, messages: { data: [...] } } }\n        if ((response as any).data && (response as any).data.messages && Array.isArray((response as any).data.messages.data)) {\n          messages = (response as any).data.messages.data;\n        } else if (Array.isArray((response as any).data)) {\n          messages = (response as any).data;\n        } else if (Array.isArray(response)) {\n          messages = response;\n        } else if ((response as any).data && Array.isArray((response as any).data.data)) {\n          messages = (response as any).data.data;\n        }\n      }\n      \n      logger.info('MESSAGES', 'Processing messages', {\n        conversationId,\n        messagesCount: messages.length,\n        messageTypes: messages.map((m: any) => m.role || 'unknown')\n      });\n      \n      // Convert API messages to our format\n      // Each API message contains both user_query and openai_response, so we need to create two ChatMessage objects\n      const formattedMessages: ChatMessage[] = [];\n      \n      if (Array.isArray(messages)) {\n        // Process messages and fetch citation details\n        for (const msg of messages) {\n          const baseTimestamp = msg.created_at || msg.timestamp || new Date().toISOString();\n          \n          // Add user message\n          if (msg.user_query) {\n            formattedMessages.push({\n              id: `${msg.id}-user` || `user-${Math.random()}`,\n              role: 'user',\n              content: msg.user_query,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              details: {\n                user_id: msg.user_id,\n                conversation_id: msg.conversation_id,\n                updated_at: msg.updated_at,\n                prompt_id: msg.id,\n                metadata: msg.metadata ? {\n                  user_ip: msg.metadata.user_ip,\n                  user_agent: msg.metadata.user_agent,\n                  external_id: msg.metadata.external_id,\n                  request_source: msg.metadata.request_source,\n                } : undefined,\n              },\n            });\n          }\n          \n          // Add assistant message\n          if (msg.openai_response) {\n            // Fetch citation details if citations exist\n            let citationDetails: Citation[] = [];\n            if (msg.citations && Array.isArray(msg.citations) && msg.citations.length > 0) {\n              // Check if citations are already objects (future-proofing) or just IDs\n              if (typeof msg.citations[0] === 'number') {\n                // Citations are IDs, fetch details\n                citationDetails = await fetchCitationDetails(msg.citations, currentAgent.id);\n              } else {\n                // Citations might already be objects, use as is\n                citationDetails = msg.citations;\n              }\n            }\n            \n            formattedMessages.push({\n              id: `${msg.id}-assistant` || `assistant-${Math.random()}`,\n              role: 'assistant',\n              content: msg.openai_response,\n              citations: citationDetails,\n              timestamp: baseTimestamp,\n              status: 'sent' as const,\n              feedback: msg.response_feedback?.reaction === 'liked' ? 'like' : \n                       msg.response_feedback?.reaction === 'disliked' ? 'dislike' : \n                       undefined,\n              details: {\n                user_id: msg.user_id,\n                conversation_id: msg.conversation_id,\n                updated_at: msg.updated_at,\n                prompt_id: msg.id,\n                metadata: msg.metadata ? {\n                  user_ip: msg.metadata.user_ip,\n                  user_agent: msg.metadata.user_agent,\n                  external_id: msg.metadata.external_id,\n                  request_source: msg.metadata.request_source,\n                } : undefined,\n              },\n            });\n          }\n        }\n      }\n\n      logger.info('MESSAGES', 'Messages formatted successfully', {\n        conversationId,\n        formattedCount: formattedMessages.length\n      });\n\n      // Sort messages by timestamp to ensure chronological order\n      formattedMessages.sort((a, b) => {\n        const dateA = new Date(a.timestamp).getTime();\n        const dateB = new Date(b.timestamp).getTime();\n        return dateA - dateB; // Ascending order (oldest first)\n      });\n\n      logger.info('MESSAGES', 'Messages sorted by timestamp', {\n        conversationId,\n        firstMessageTime: formattedMessages[0]?.timestamp,\n        lastMessageTime: formattedMessages[formattedMessages.length - 1]?.timestamp\n      });\n\n      set(state => {\n        const newMessages = new Map(state.messages);\n        \n        // Preserve any local messages that might be in sending state\n        const existingMessages = state.messages.get(conversationId) || [];\n        const localSendingMessages = existingMessages.filter(msg => \n          msg.status === 'sending' || \n          (msg.role === 'user' && \n           new Date(msg.timestamp).getTime() > Date.now() - 5000) // Messages sent in last 5 seconds\n        );\n        \n        // Merge local sending messages with API messages\n        const mergedMessages = [...formattedMessages];\n        for (const localMsg of localSendingMessages) {\n          if (!mergedMessages.find(m => m.id === localMsg.id)) {\n            // Insert local message at the appropriate position based on timestamp\n            const insertIndex = mergedMessages.findIndex(m => \n              new Date(m.timestamp).getTime() > new Date(localMsg.timestamp).getTime()\n            );\n            if (insertIndex === -1) {\n              mergedMessages.push(localMsg);\n            } else {\n              mergedMessages.splice(insertIndex, 0, localMsg);\n            }\n          }\n        }\n        \n        newMessages.set(conversationId, mergedMessages);\n        \n        // Save to local storage as fallback\n        saveMessagesToStorage(conversationId, mergedMessages);\n        \n        return { \n          messages: newMessages,\n          loading: false,\n        };\n      });\n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to load messages', error, {\n        conversationId,\n        agentId: currentAgent.id,\n        errorType: error instanceof Error ? error.constructor.name : typeof error,\n        status: (error as any)?.status,\n        message: (error as any)?.message\n      });\n      \n      // Try to load from local storage as fallback\n      const cachedMessages = loadMessagesFromStorage(conversationId);\n      if (cachedMessages && cachedMessages.length > 0) {\n        logger.info('MESSAGES', 'Using cached messages as fallback', {\n          conversationId,\n          messageCount: cachedMessages.length\n        });\n        \n        // Sort cached messages by timestamp to ensure chronological order\n        cachedMessages.sort((a, b) => {\n          const dateA = new Date(a.timestamp).getTime();\n          const dateB = new Date(b.timestamp).getTime();\n          return dateA - dateB; // Ascending order (oldest first)\n        });\n        \n        set(state => {\n          const newMessages = new Map(state.messages);\n          newMessages.set(conversationId, cachedMessages);\n          return { \n            messages: newMessages,\n            loading: false,\n            error: 'Using cached messages (API unavailable)'\n          };\n        });\n      } else {\n        set({ \n          error: error instanceof Error ? error.message : 'Failed to load messages',\n          loading: false,\n        });\n      }\n    }\n  },\n  \n  /**\n   * Clear the error state\n   */\n  clearError: () => {\n    set({ error: null });\n  },\n  \n  /**\n   * Set messages for a specific conversation\n   * Used for updating conversation messages directly\n   */\n  setMessagesForConversation: (conversationId: string, messages: ChatMessage[]) => {\n    set(state => {\n      const newMessages = new Map(state.messages);\n      newMessages.set(conversationId, messages);\n      return { messages: newMessages };\n    });\n  },\n\n  /**\n   * Regenerate the last assistant response\n   * \n   * Flow:\n   * 1. Find the last user message in the conversation\n   * 2. Remove the last assistant message\n   * 3. Resend the user message to get a new response\n   */\n  regenerateLastResponse: async () => {\n    const agentStore = useAgentStore.getState();\n    const conversationStore = useConversationStore.getState();\n    \n    const { currentAgent } = agentStore;\n    const { currentConversation } = conversationStore;\n    \n    if (!currentAgent || !currentConversation) {\n      logger.error('MESSAGES', 'Cannot regenerate - missing agent or conversation');\n      toast.error('Cannot regenerate response. Please select a conversation.');\n      return;\n    }\n\n    const conversationId = currentConversation.id.toString();\n    const messages = get().getMessagesForConversation(conversationId);\n    \n    if (messages.length < 2) {\n      logger.warn('MESSAGES', 'Not enough messages to regenerate');\n      toast.error('No response to regenerate.');\n      return;\n    }\n\n    // Find the last user message and last assistant message\n    let lastUserMessage: ChatMessage | null = null;\n    let lastAssistantMessage: ChatMessage | null = null;\n    let lastAssistantIndex = -1;\n\n    // Iterate backwards to find the last assistant and user messages\n    for (let i = messages.length - 1; i >= 0; i--) {\n      const msg = messages[i];\n      if (!lastAssistantMessage && msg.role === 'assistant' && msg.status !== 'error') {\n        lastAssistantMessage = msg;\n        lastAssistantIndex = i;\n      }\n      if (!lastUserMessage && msg.role === 'user' && lastAssistantMessage) {\n        lastUserMessage = msg;\n        break;\n      }\n    }\n\n    if (!lastUserMessage || !lastAssistantMessage) {\n      logger.warn('MESSAGES', 'Could not find valid user/assistant message pair to regenerate');\n      toast.error('No valid response to regenerate.');\n      return;\n    }\n\n    logger.info('MESSAGES', 'Regenerating response', {\n      conversationId,\n      userMessageId: lastUserMessage.id,\n      assistantMessageId: lastAssistantMessage.id,\n      userContent: lastUserMessage.content.substring(0, 50)\n    });\n\n    // Remove the last assistant message\n    const updatedMessages = [...messages];\n    updatedMessages.splice(lastAssistantIndex, 1);\n    get().setMessagesForConversation(conversationId, updatedMessages);\n\n    // Save to local storage\n    saveMessagesToStorage(conversationId, updatedMessages);\n\n    try {\n      // Resend the last user message\n      await get().sendMessage(lastUserMessage.content);\n      \n      logger.info('MESSAGES', 'Response regenerated successfully');\n    } catch (error) {\n      logger.error('MESSAGES', 'Failed to regenerate response', error);\n      \n      // Restore the original assistant message on error\n      get().setMessagesForConversation(conversationId, messages);\n      saveMessagesToStorage(conversationId, messages);\n      \n      toast.error('Failed to regenerate response. Please try again.');\n    }\n  },\n}));","/**\n * Agent Store - Chatbot Management\n * \n * This store manages all agent (chatbot) related state and operations.\n * Agents are the core entities in CustomGPT - each agent is a trained\n * chatbot with its own knowledge base and settings.\n * \n * Features:\n * - CRUD operations for agents\n * - Persistent state using localStorage\n * - Auto-selection of first agent\n * - Agent statistics fetching\n * - License management support\n * \n * State Persistence:\n * - Uses Zustand persist middleware\n * - Stores: agents list and current selection\n * - Survives page refreshes\n * \n * Features:\n * - Multi-format API response handling with backward compatibility\n * - Automatic agent state synchronization across operations\n * - Optimistic UI updates for seamless user experience\n * - Comprehensive error handling with graceful recovery\n */\n\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { AgentStore, Agent, AgentSettings } from '@/types';\nimport { getClient } from '@/lib/api/client';\nimport { useConversationStore } from './conversations';\nimport { useMessageStore } from './messages';\n\n/**\n * Agent Store Implementation\n * \n * Persisted to localStorage with key 'customgpt-agent-store'\n * Automatically hydrates on app load\n */\nexport const useAgentStore = create<AgentStore>()(\n  persist(\n    (set, get) => ({\n      // Initial state\n      agents: [],\n      currentAgent: null,\n      loading: false,\n      error: null,\n      paginationMeta: undefined,\n\n      /**\n       * Fetch agents from the API with enterprise-scale pagination\n       * \n       * Strategy for 1000+ projects:\n       * - Load first batch (100 items) immediately for UI responsiveness\n       * - Load additional batches as needed via loadMoreAgents()\n       * - Auto-selects first agent if none selected\n       * - Maintains total count for pagination UI\n       */\n      fetchAgents: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Load first batch with larger page size for better UX\n          const response = await client.getAgents({ page: 1, per_page: 100 });\n          \n          let agents: Agent[] = [];\n          let total = 0;\n          let hasMore = false;\n          \n          // Handle different response formats from the API\n          if (response && typeof response === 'object') {\n            // Check for nested pagination format: { data: { data: [...], total: ..., current_page: ... } }\n            if ('data' in response && (response as any).data && typeof (response as any).data === 'object' && 'data' in (response as any).data) {\n              const nestedData = (response as any).data;\n              agents = Array.isArray(nestedData.data) ? nestedData.data : [];\n              total = nestedData.total || agents.length;\n              const currentPage = nestedData.current_page || 1;\n              const perPage = nestedData.per_page || 100;\n              hasMore = nestedData.last_page ? currentPage < nestedData.last_page : false;\n            } else if ('data' in response && 'total' in response) {\n              // Flat paginated response format\n              const paginatedResponse = response as { data: Agent[]; total: number; page: number; per_page: number };\n              agents = paginatedResponse.data;\n              total = paginatedResponse.total;\n              hasMore = total > paginatedResponse.per_page;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              agents = (response as any).data;\n              total = agents.length;\n              hasMore = false;\n            } else if (Array.isArray(response)) {\n              // Legacy format: [...]\n              agents = response as Agent[];\n              total = agents.length;\n              hasMore = false;\n            }\n          }\n          \n          set({ \n            agents, \n            loading: false,\n            // Always update pagination metadata with fresh data\n            paginationMeta: { \n              currentPage: 1, \n              totalCount: total, \n              hasMore,\n              perPage: 100\n            },\n            // Auto-select first agent if none selected\n            currentAgent: get().currentAgent || (agents.length > 0 ? agents[0] : null)\n          });\n          \n          // Fetch settings for all agents to get avatars\n          const fetchSettingsForAgents = async () => {\n            const client = getClient();\n            const agentsWithoutSettings = agents.filter(agent => !agent.settings);\n            \n            if (agentsWithoutSettings.length === 0) return;\n            \n            // Process in batches of 5 to avoid overwhelming the API\n            const batchSize = 5;\n            for (let i = 0; i < agentsWithoutSettings.length; i += batchSize) {\n              const batch = agentsWithoutSettings.slice(i, i + batchSize);\n              \n              // Fetch settings in parallel for this batch\n              const settingsPromises = batch.map(async (agent) => {\n                try {\n                  const settingsResponse = await client.getAgentSettings(agent.id);\n                  if (settingsResponse && settingsResponse.data) {\n                    return { agent, settings: settingsResponse.data };\n                  }\n                } catch (error) {\n                  console.error(`Failed to fetch settings for agent ${agent.id}:`, error);\n                }\n                return null;\n              });\n              \n              const settingsResults = await Promise.all(settingsPromises);\n              const validResults = settingsResults.filter(result => result !== null);\n              \n              if (validResults.length > 0) {\n                // Update agents with their settings\n                set(state => ({\n                  agents: state.agents.map(a => {\n                    const result = validResults.find(r => r!.agent.id === a.id);\n                    return result ? { ...a, settings: result.settings } : a;\n                  }),\n                  // Also update current agent if it matches\n                  currentAgent: state.currentAgent \n                    ? (() => {\n                        const result = validResults.find(r => r!.agent.id === state.currentAgent!.id);\n                        return result ? { ...state.currentAgent, settings: result.settings } : state.currentAgent;\n                      })()\n                    : state.currentAgent\n                }));\n              }\n              \n              // Small delay between batches to be kind to the API\n              if (i + batchSize < agentsWithoutSettings.length) {\n                await new Promise(resolve => setTimeout(resolve, 100));\n              }\n            }\n          };\n          \n          // Fetch settings in the background without blocking the UI\n          fetchSettingsForAgents().catch(error => {\n            console.error('Failed to fetch agent settings:', error);\n          });\n        } catch (error) {\n          console.error('Failed to fetch agents:', error);\n          set({ \n            agents: [], \n            error: error instanceof Error ? error.message : 'Failed to fetch agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Load more agents for large datasets (enterprise accounts)\n       * Appends to existing agents list\n       */\n      loadMoreAgents: async () => {\n        const state = get();\n        const paginationMeta = (state as any).paginationMeta;\n        \n        if (!paginationMeta?.hasMore || state.loading) return;\n        \n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const nextPage = paginationMeta.currentPage + 1;\n          \n          const response = await client.getAgents({ \n            page: nextPage, \n            per_page: paginationMeta.perPage \n          });\n          \n          if (response && 'data' in response) {\n            let newAgents: Agent[] = [];\n            let responseTotal = 0;\n            let responsePage = nextPage;\n            \n            // Handle nested format: { data: { data: [...] } }\n            if (response.data && typeof response.data === 'object' && 'data' in response.data) {\n              const nestedData = (response as any).data;\n              newAgents = Array.isArray(nestedData.data) ? nestedData.data : [];\n              responseTotal = nestedData.total || 0;\n              responsePage = nestedData.current_page || nextPage;\n            } else if (Array.isArray((response as any).data)) {\n              // Legacy format: { data: [...] }\n              newAgents = (response as any).data;\n              responseTotal = paginationMeta.totalCount;\n            }\n            \n            set(state => ({ \n              agents: [...state.agents, ...newAgents],\n              loading: false,\n              paginationMeta: {\n                ...paginationMeta,\n                currentPage: responsePage,\n                hasMore: (responsePage * paginationMeta.perPage + newAgents.length) < responseTotal\n              }\n            }));\n          }\n        } catch (error) {\n          console.error('Failed to load more agents:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to load more agents',\n            loading: false \n          });\n        }\n      },\n\n      /**\n       * Search for a specific agent by ID or name\n       * Useful for enterprise accounts with many projects\n       */\n      findAgent: async (query: string | number) => {\n        try {\n          const client = getClient();\n          \n          // If query is numeric, assume it's an ID and try to fetch directly\n          if (typeof query === 'number' || /^\\d+$/.test(query.toString())) {\n            const id = typeof query === 'number' ? query : parseInt(query.toString());\n            try {\n              const response = await client.getAgent(id);\n              const agent = response.data;\n              \n              // Add to agents list if not already present\n              const state = get();\n              if (!state.agents.find(a => a.id === agent.id)) {\n                set(state => ({ \n                  agents: [agent, ...state.agents] \n                }));\n              }\n              \n              return agent;\n            } catch {\n              // ID not found or no access, fall through to search\n            }\n          }\n          \n          // For text search, we'd need a search endpoint (not implemented in current API)\n          // For now, search within loaded agents\n          const state = get();\n          const found = state.agents.find(agent => \n            agent.project_name.toLowerCase().includes(query.toString().toLowerCase()) ||\n            agent.id.toString() === query.toString()\n          );\n          \n          return found || null;\n        } catch (error) {\n          console.error('Failed to find agent:', error);\n          return null;\n        }\n      },\n\n      /**\n       * Create a new agent\n       * \n       * @param data - Agent creation data\n       * @param data.project_name - Display name for the agent\n       * @param data.sitemap_path - URL for sitemap-based training\n       * @param data.files - Files for file-based training\n       * @param data.is_shared - Whether agent is publicly accessible\n       * \n       * Behavior:\n       * - Adds new agent to beginning of list\n       * - Auto-selects the new agent\n       * - Returns the created agent\n       * - Throws error on failure\n       */\n      createAgent: async (data: {\n        project_name: string;\n        sitemap_path?: string;\n        files?: File[];\n        is_shared?: boolean;\n      }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.createAgent(data);\n          const newAgent = response.data;\n          \n          // Optimistic update - add to list and select immediately\n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to create agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to create agent',\n            loading: false \n          });\n          throw error; // Re-throw for component error handling\n        }\n      },\n\n      /**\n       * Select an agent as the current active agent\n       * This agent will be used for all chat operations\n       * \n       * @param agent - The agent to select\n       */\n      selectAgent: async (agent: Agent) => {\n        // Clear conversation state when switching agents\n        const conversationStore = useConversationStore.getState();\n        const messageStore = useMessageStore.getState();\n        \n        // Set the new agent first\n        set({ currentAgent: agent });\n        \n        // Clear current conversation to show welcome screen\n        conversationStore.selectConversation(null);\n        \n        // Clear all messages from the previous agent\n        messageStore.clearMessages();\n        \n        // Fetch agent settings to get avatar and other details\n        try {\n          const client = getClient();\n          const settingsResponse = await client.getAgentSettings(agent.id);\n          if (settingsResponse && settingsResponse.data) {\n            // Update the agent with settings\n            const agentWithSettings = { ...agent, settings: settingsResponse.data };\n            set({ currentAgent: agentWithSettings });\n            \n            // Also update in the agents list\n            set(state => ({\n              agents: state.agents.map(a => \n                a.id === agent.id ? agentWithSettings : a\n              )\n            }));\n          }\n        } catch (error) {\n          console.error('Failed to fetch agent settings:', error);\n          // Continue without settings\n        }\n        \n        // Fetch conversations for the new agent\n        try {\n          await conversationStore.fetchConversations(agent.id);\n        } catch (error) {\n          console.error('Failed to fetch conversations for new agent:', error);\n          // Even if fetch fails, we've already cleared the old state\n        }\n      },\n\n      /**\n       * Manually set the agents list\n       * Used for optimistic updates or manual state management\n       * \n       * Features:\n       * - Validates current agent still exists\n       * - Auto-selects first agent if current is removed\n       * - Maintains agent selection when possible\n       * \n       * @param agents - New list of agents\n       */\n      setAgents: (agents: Agent[]) => {\n        set({ \n          agents,\n          // Update current agent if it's no longer in the list\n          currentAgent: (() => {\n            const current = get().currentAgent;\n            if (!current) return agents.length > 0 ? agents[0] : null;\n            \n            // Check if current agent still exists in new list\n            const stillExists = agents.find(a => a.id === current.id);\n            return stillExists || (agents.length > 0 ? agents[0] : null);\n          })()\n        });\n      },\n      \n      updateAgent: async (id: number, data: { project_name?: string; are_licenses_allowed?: boolean; is_shared?: boolean; sitemap_path?: string }) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.updateAgent(id, data);\n          console.log('[AgentStore] updateAgent response:', response);\n          const updatedAgent = response.data;\n          console.log('[AgentStore] updatedAgent data:', updatedAgent);\n          \n          set(state => ({\n            agents: state.agents.map(a => a.id === id ? updatedAgent : a),\n            currentAgent: state.currentAgent?.id === id ? updatedAgent : state.currentAgent,\n            loading: false,\n          }));\n          \n          return updatedAgent;\n        } catch (error) {\n          console.error('Failed to update agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n\n      /**\n       * Update agent settings\n       * Updates configuration like chatbot model, appearance, behavior, etc.\n       */\n      updateSettings: async (id: number, settings: Partial<AgentSettings>) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Create FormData for the update\n          const formData = new FormData();\n          \n          // Only append the fields we want to update\n          Object.entries(settings).forEach(([key, value]) => {\n            if (value !== undefined && value !== null) {\n              formData.append(key, String(value));\n            }\n          });\n          \n          const response = await client.updateAgentSettings(id, formData);\n          console.log('[AgentStore] updateSettings response:', response);\n          const updatedSettings = response.data;\n          \n          // Update the agent with new settings\n          set(state => {\n            const updatedAgents = state.agents.map(agent => {\n              if (agent.id === id) {\n                return { ...agent, settings: { ...agent.settings, ...updatedSettings } };\n              }\n              return agent;\n            });\n            \n            const updatedCurrentAgent = state.currentAgent?.id === id \n              ? { ...state.currentAgent, settings: { ...state.currentAgent.settings, ...updatedSettings } }\n              : state.currentAgent;\n            \n            return {\n              agents: updatedAgents,\n              currentAgent: updatedCurrentAgent,\n              loading: false,\n            };\n          });\n          \n          return updatedSettings;\n        } catch (error) {\n          console.error('Failed to update agent settings:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to update agent settings',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      deleteAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          await client.deleteAgent(id);\n          \n          set(state => {\n            const filteredAgents = state.agents.filter(a => a.id !== id);\n            return {\n              agents: filteredAgents,\n              currentAgent: state.currentAgent?.id === id \n                ? (filteredAgents.length > 0 ? filteredAgents[0] : null)\n                : state.currentAgent,\n              loading: false,\n            };\n          });\n        } catch (error) {\n          console.error('Failed to delete agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to delete agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      replicateAgent: async (id: number) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.replicateAgent(id);\n          const newAgent = response.data;\n          \n          set(state => ({ \n            agents: [newAgent, ...state.agents],\n            currentAgent: newAgent,\n            loading: false,\n          }));\n          \n          return newAgent;\n        } catch (error) {\n          console.error('Failed to replicate agent:', error);\n          set({ \n            error: error instanceof Error ? error.message : 'Failed to replicate agent',\n            loading: false \n          });\n          throw error;\n        }\n      },\n      \n      getAgentStats: async (id: number) => {\n        try {\n          const client = getClient();\n          const response = await client.getAgentStats(id);\n          return response.data;\n        } catch (error) {\n          console.error('Failed to get agent stats:', error);\n          throw error;\n        }\n      },\n    }),\n    {\n      name: 'customgpt-agents',\n      partialize: (state) => ({\n        currentAgent: state.currentAgent,\n      }),\n    }\n  )\n);","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface AnalyticsData {\n  conversations: {\n    total: number;\n    active: number;\n    trend: number;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  queries: {\n    total: number;\n    successful: number;\n    failed: number;\n    avgResponseTime: number;\n    topQueries: Array<{\n      query: string;\n      count: number;\n    }>;\n    data: Array<{\n      date: string;\n      count: number;\n    }>;\n  };\n  traffic: {\n    uniqueUsers: number;\n    pageViews: number;\n    avgSessionDuration: number;\n    bounceRate: number;\n    data: Array<{\n      date: string;\n      users: number;\n      pageViews: number;\n    }>;\n  };\n  statistics: {\n    totalMessages: number;\n    totalConversations: number;\n    avgMessagesPerConversation: number;\n    satisfactionRate: number;\n    responseAccuracy: number;\n  };\n}\n\ninterface AnalyticsState {\n  analytics: AnalyticsData | null;\n  loading: boolean;\n  error: string | null;\n  dateRange: {\n    startDate: string;\n    endDate: string;\n  };\n  \n  // Actions\n  fetchAnalytics: (projectId: number) => Promise<void>;\n  setDateRange: (startDate: string, endDate: string) => void;\n  exportAnalytics: (format: 'csv' | 'json' | 'pdf') => Promise<void>;\n  reset: () => void;\n}\n\n// Helper function to format dates for API\nconst formatDate = (date: Date): string => {\n  return date.toISOString().split('T')[0];\n};\n\n// Get default date range (last 30 days)\nconst getDefaultDateRange = () => {\n  const endDate = new Date();\n  const startDate = new Date();\n  startDate.setDate(startDate.getDate() - 30);\n  \n  return {\n    startDate: formatDate(startDate),\n    endDate: formatDate(endDate),\n  };\n};\n\nexport const useAnalyticsStore = create<AnalyticsState>((set, get) => ({\n  analytics: null,\n  loading: false,\n  error: null,\n  dateRange: getDefaultDateRange(),\n\n  fetchAnalytics: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Fetch all reports data in parallel using documented endpoints\n      const [trafficReport, queriesReport, conversationsReport, analysisReport] = await Promise.all([\n        client.getTrafficReport(projectId),\n        client.getQueriesReport(projectId),\n        client.getConversationsReport(projectId),\n        client.getAnalysisReport(projectId, 'daily'),\n      ]);\n\n      // Transform the data to match our interface using actual API response structure\n      // Handle cases where API returns empty arrays instead of numbers\n      const conversationsTotal = Array.isArray(conversationsReport.data?.total) ? 0 : (conversationsReport.data?.total || 0);\n      const queriesTotal = Array.isArray(queriesReport.data?.total) ? 0 : (queriesReport.data?.total || 0);\n      const avgQueriesPerConv = Array.isArray(conversationsReport.data?.average_queries_per_conversation) \n        ? 0 \n        : (Number(conversationsReport.data?.average_queries_per_conversation) || 0);\n\n      const analyticsData: AnalyticsData = {\n        conversations: {\n          total: conversationsTotal,\n          active: Math.floor(conversationsTotal * 0.7), // Estimate active conversations\n          trend: 0, // Calculate trend from data if needed\n          data: Array.isArray(analysisReport.data?.conversations) \n            ? analysisReport.data.conversations.map((item: any) => ({\n                date: item.created_at_interval,\n                count: Number(item.queries_number) || 0,\n              }))\n            : [],\n        },\n        queries: {\n          total: queriesTotal,\n          successful: Array.isArray(queriesReport.data?.query_status) \n            ? (queriesReport.data.query_status.find((s: any) => s.status === 'success')?.count || 0)\n            : 0,\n          failed: Array.isArray(queriesReport.data?.query_status)\n            ? (queriesReport.data.query_status.find((s: any) => s.status === 'failed')?.count || 0)\n            : 0,\n          avgResponseTime: 0, // Not provided by API\n          topQueries: [], // Not provided by these endpoints\n          data: Array.isArray(analysisReport.data?.queries)\n            ? analysisReport.data.queries.map((item: any) => ({\n                date: item.created_at_interval,\n                count: Number(item.queries_number) || 0,\n              }))\n            : [],\n        },\n        traffic: {\n          uniqueUsers: Array.isArray(trafficReport.data?.sources)\n            ? trafficReport.data.sources.reduce((acc: number, source: any) => acc + (source.request_source_number || 0), 0)\n            : 0,\n          pageViews: Array.isArray(trafficReport.data?.sources)\n            ? trafficReport.data.sources.reduce((acc: number, source: any) => acc + (source.request_source_number || 0), 0)\n            : 0,\n          avgSessionDuration: 0, // Not provided by API\n          bounceRate: 0, // Not provided by API\n          data: Array.isArray(trafficReport.data?.sources)\n            ? trafficReport.data.sources.map((source: any) => ({\n                date: new Date().toISOString().split('T')[0], // Current date as traffic report doesn't have dates\n                users: source.request_source_number || 0,\n                pageViews: source.request_source_number || 0,\n              }))\n            : [],\n        },\n        statistics: {\n          totalMessages: queriesTotal,\n          totalConversations: conversationsTotal,\n          avgMessagesPerConversation: avgQueriesPerConv,\n          satisfactionRate: 0, // Not provided by API\n          responseAccuracy: 0, // Not provided by API\n        },\n      };\n\n      set({ analytics: analyticsData, loading: false });\n    } catch (error: any) {\n      console.error('Failed to fetch analytics:', error);\n      \n      let errorMessage = 'Failed to fetch analytics';\n      if (error.status === 401) {\n        const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : 'production';\n        const isDemoMode = deploymentMode === 'demo';\n        if (isDemoMode) {\n          errorMessage = 'API key authentication failed. Please check your API key.';\n          toast.error('Authentication failed. Please check your API key in demo settings.');\n        } else {\n          errorMessage = 'Authentication required. Please check your API key configuration.';\n          toast.error('Authentication failed. Please check your API key configuration.');\n        }\n      } else if (error.status === 404) {\n        errorMessage = 'Analytics data not found for this project.';\n        toast.error('No analytics data available yet.');\n      } else if (error.status === 500) {\n        errorMessage = 'Server error occurred. Please try again later.';\n        toast.error('Server error. Please try again later.');\n      } else {\n        toast.error('Failed to fetch analytics data');\n      }\n      \n      set({ \n        analytics: null,\n        error: errorMessage,\n        loading: false,\n      });\n    }\n  },\n\n  setDateRange: (startDate: string, endDate: string) => {\n    set({ dateRange: { startDate, endDate } });\n  },\n\n  exportAnalytics: async (format: 'csv' | 'json' | 'pdf') => {\n    const analytics = get().analytics;\n    if (!analytics) {\n      toast.error('No analytics data to export');\n      return;\n    }\n\n    try {\n      // Implementation would depend on the format\n      switch (format) {\n        case 'json':\n          const jsonData = JSON.stringify(analytics, null, 2);\n          const blob = new Blob([jsonData], { type: 'application/json' });\n          const url = URL.createObjectURL(blob);\n          const a = document.createElement('a');\n          a.href = url;\n          a.download = `analytics-${new Date().toISOString()}.json`;\n          document.body.appendChild(a);\n          a.click();\n          document.body.removeChild(a);\n          URL.revokeObjectURL(url);\n          toast.success('Analytics exported successfully');\n          break;\n          \n        case 'csv':\n          // Would need a CSV conversion library or custom implementation\n          toast.info('CSV export not yet implemented');\n          break;\n          \n        case 'pdf':\n          // Would need a PDF generation library\n          toast.info('PDF export not yet implemented');\n          break;\n      }\n    } catch (error) {\n      console.error('Failed to export analytics:', error);\n      toast.error('Failed to export analytics');\n    }\n  },\n\n  reset: () => {\n    set({\n      analytics: null,\n      loading: false,\n      error: null,\n      dateRange: getDefaultDateRange(),\n    });\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport type { UIStore } from '@/types';\n\nexport const useUIStore = create<UIStore>()(\n  persist(\n    (set) => ({\n      sidebarOpen: true,\n      settingsOpen: false,\n      theme: 'light',\n      fontSize: 'md',\n\n      setSidebarOpen: (open: boolean) => {\n        set({ sidebarOpen: open });\n      },\n\n      setSettingsOpen: (open: boolean) => {\n        set({ settingsOpen: open });\n      },\n\n      setTheme: (theme: 'light' | 'dark') => {\n        set({ theme });\n        \n        // Apply theme to document\n        if (typeof window !== 'undefined') {\n          document.documentElement.className = theme;\n        }\n      },\n\n      setFontSize: (size: 'sm' | 'md' | 'lg') => {\n        set({ fontSize: size });\n        \n        // Apply font size to document\n        if (typeof window !== 'undefined') {\n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (size) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }),\n    {\n      name: 'customgpt-ui',\n      partialize: (state) => ({\n        sidebarOpen: state.sidebarOpen,\n        theme: state.theme,\n        fontSize: state.fontSize,\n      }),\n      onRehydrateStorage: () => (state) => {\n        // Apply theme and font size on rehydration\n        if (typeof window !== 'undefined' && state) {\n          document.documentElement.className = state.theme;\n          \n          const root = document.documentElement;\n          root.classList.remove('text-sm', 'text-base', 'text-lg');\n          \n          switch (state.fontSize) {\n            case 'sm':\n              root.classList.add('text-sm');\n              break;\n            case 'lg':\n              root.classList.add('text-lg');\n              break;\n            default:\n              root.classList.add('text-base');\n          }\n        }\n      },\n    }\n  )\n);","import { create } from 'zustand';\nimport { toast } from 'sonner';\nimport { getClient } from '@/lib/api/client';\nimport type { APIResponse, AgentStats } from '@/types';\n\nexport interface ProjectSettings {\n  // Appearance\n  chatbot_avatar?: string;\n  chatbot_background_type?: 'image' | 'color';\n  chatbot_background?: string;\n  chatbot_background_color?: string;\n  chatbot_color?: string;\n  chatbot_toolbar_color?: string;\n  chatbot_title?: string;\n  chatbot_title_color?: string;\n  user_avatar?: string;\n  spotlight_avatar_enabled?: boolean;\n  spotlight_avatar?: string;\n  spotlight_avatar_shape?: 'rectangle' | 'circle' | 'rounded' | 'square';\n  spotlight_avatar_type?: 'default' | 'animated' | '3d' | 'custom';\n  user_avatar_orientation?: 'agent-left-user-right' | 'agent-right-user-left' | 'both-left' | 'both-right';\n  \n  // Messages & Behavior\n  default_prompt?: string;\n  example_questions?: string[];\n  persona_instructions?: string;\n  response_source?: 'default' | 'own_content' | 'openai_content';\n  chatbot_model?: string;\n  custom_persona?: string;\n  agent_capability?: 'fastest-responses' | 'optimal-choice' | 'advanced-reasoning' | 'complex-tasks';\n  chatbot_msg_lang?: string;\n  input_field_addendum?: string;\n  \n  // Messages\n  hang_in_there_msg?: string;\n  chatbot_siesta_msg?: string;\n  no_answer_message?: string;\n  ending_message?: string;\n  try_asking_questions_msg?: string;\n  view_more_msg?: string;\n  view_less_msg?: string;\n  \n  // Citations\n  enable_citations?: number;\n  citations_view_type?: 'user' | 'show' | 'hide';\n  citations_answer_source_label_msg?: string;\n  citations_sources_label_msg?: string;\n  image_citation_display?: 'default' | 'inline' | 'none';\n  enable_inline_citations_api?: boolean;\n  hide_sources_from_responses?: boolean;\n  \n  // Features\n  enable_feedbacks?: boolean;\n  is_loading_indicator_enabled?: boolean;\n  remove_branding?: boolean;\n  private_deployment?: boolean;\n  enable_recaptcha_for_public_chatbots?: boolean;\n  is_selling_enabled?: boolean;\n  license_slug?: boolean;\n  selling_url?: string;\n  can_share_conversation?: boolean;\n  can_export_conversation?: boolean;\n  conversation_time_window?: boolean;\n  conversation_retention_period?: 'day' | 'week' | 'month' | 'quarter' | 'year' | 'custom';\n  conversation_retention_days?: number;\n  enable_agent_knowledge_base_awareness?: boolean;\n  markdown_enabled?: boolean;\n}\n\nexport interface ProjectPlugin {\n  id: string;\n  name: string;\n  enabled: boolean;\n  description?: string;\n  category?: string;\n  settings?: Record<string, any>;\n}\n\n// Using AgentStats from the API instead of custom ProjectStats\nexport type ProjectStats = AgentStats;\n\nexport interface ProjectSettingsStore {\n  // Settings\n  settings: ProjectSettings | null;\n  settingsLoading: boolean;\n  settingsError: string | null;\n\n  // Plugins\n  plugins: ProjectPlugin[];\n  pluginsLoading: boolean;\n  pluginsError: string | null;\n\n  // Stats\n  stats: ProjectStats | null;\n  statsLoading: boolean;\n  statsError: string | null;\n\n  // Actions\n  fetchSettings: (projectId: number) => Promise<void>;\n  updateSettings: (projectId: number, settings: Partial<ProjectSettings>) => Promise<void>;\n  fetchPlugins: (projectId: number) => Promise<void>;\n  updatePlugin: (projectId: number, pluginId: string, enabled: boolean) => Promise<void>;\n  fetchStats: (projectId: number) => Promise<void>;\n  reset: () => void;\n}\n\n// Track active requests to prevent duplicates\nconst activeRequests = new Map<string, boolean>();\n\nexport const useProjectSettingsStore = create<ProjectSettingsStore>((set, get) => ({\n  // Initial state\n  settings: null,\n  settingsLoading: false,\n  settingsError: null,\n  plugins: [],\n  pluginsLoading: false,\n  pluginsError: null,\n  stats: null,\n  statsLoading: false,\n  statsError: null,\n\n  // Fetch project settings\n  fetchSettings: async (projectId: number) => {\n    const requestKey = `settings-${projectId}`;\n    \n    // Prevent duplicate requests\n    if (activeRequests.get(requestKey)) {\n      return;\n    }\n    \n    activeRequests.set(requestKey, true);\n    \n    // Clear previous errors and set loading state\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      const response = await getClient().getAgentSettings(projectId);\n\n      // The API client returns the data directly, not wrapped with status\n      if (response && response.data) {\n        set({ \n          settings: response.data, \n          settingsLoading: false,\n          settingsError: null // Explicitly clear error on success\n        });\n      } else if (response) {\n        // If response exists but doesn't have data property, it might be the direct data\n        set({ \n          settings: response as any, \n          settingsLoading: false,\n          settingsError: null\n        });\n      } else {\n        throw new Error('Failed to fetch project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      // Only show toast for actual errors, not for expected scenarios\n      if (error instanceof Error && !error.message.includes('404')) {\n        toast.error(errorMessage);\n      }\n    } finally {\n      activeRequests.delete(requestKey);\n    }\n  },\n\n  // Update project settings\n  updateSettings: async (projectId: number, settingsUpdate: Partial<ProjectSettings>) => {\n    set({ settingsLoading: true, settingsError: null });\n\n    try {\n      // Create FormData for multipart/form-data\n      const formData = new FormData();\n      \n      // Default values for fields that API requires to have a value\n      const defaultValues: Record<string, string> = {\n        ending_message: 'Please email us for further support',\n        no_answer_message: 'Sorry, I don\\'t have an answer for that.',\n        try_asking_questions_msg: 'Try asking these questions...',\n        view_more_msg: 'View more',\n        view_less_msg: 'View less',\n        citations_answer_source_label_msg: 'Where did this answer come from?',\n        citations_sources_label_msg: 'Sources',\n        hang_in_there_msg: 'Hang in there! I\\'m thinking..',\n        chatbot_siesta_msg: 'Oops! The agent is taking a siesta. This usually happens when OpenAI is down! Please try again later.'\n      };\n\n      Object.entries(settingsUpdate).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          if (key === 'example_questions' && Array.isArray(value)) {\n            // Handle array fields - use bracket notation without index\n            value.forEach((question) => {\n              formData.append(`example_questions[]`, question);\n            });\n          } else if (value instanceof File) {\n            // Handle file uploads\n            formData.append(key, value);\n          } else {\n            // Handle regular fields\n            // If the value is empty and there's a default, use the default\n            const stringValue = String(value);\n            if (stringValue === '' && defaultValues[key]) {\n              formData.append(key, defaultValues[key]);\n            } else {\n              formData.append(key, stringValue);\n            }\n          }\n        }\n      });\n\n      const response = await getClient().updateAgentSettings(projectId, formData);\n\n      // The API client returns the data directly\n      if (response) {\n        // Instead of merging, re-fetch the settings to ensure we have the latest data\n        set({ settingsLoading: false });\n        \n        // Re-fetch settings to get the updated data from server\n        await get().fetchSettings(projectId);\n        \n        toast.success('Project settings updated successfully');\n      } else {\n        throw new Error('Failed to update project settings');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update project settings';\n      set({ \n        settingsError: errorMessage, \n        settingsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project plugins\n  fetchPlugins: async (projectId: number) => {\n    set({ pluginsLoading: true, pluginsError: null });\n\n    try {\n      const response = await getClient().getProjectPlugins(projectId);\n\n      // The API client returns the data directly\n      if (response) {\n        const pluginsData = response.data || response;\n        set({ \n          plugins: Array.isArray(pluginsData) ? pluginsData : [], \n          pluginsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project plugins');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project plugins';\n      set({ \n        pluginsError: errorMessage, \n        pluginsLoading: false,\n        plugins: [] // Fallback to empty array\n      });\n      console.warn('Plugins not available:', errorMessage);\n    }\n  },\n\n  // Update project plugin\n  updatePlugin: async (projectId: number, pluginId: string, enabled: boolean) => {\n    try {\n      // This endpoint might not exist yet, so we'll implement it as a placeholder\n      const response = await getClient().updateProjectPlugin(projectId, pluginId, { enabled });\n\n      // The API client returns the data directly\n      if (response) {\n        // Update plugin in store\n        const plugins = get().plugins.map(plugin =>\n          plugin.id === pluginId ? { ...plugin, enabled } : plugin\n        );\n        \n        set({ plugins });\n        toast.success(`Plugin ${enabled ? 'enabled' : 'disabled'} successfully`);\n      } else {\n        throw new Error('Failed to update plugin');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to update plugin';\n      toast.error(errorMessage);\n    }\n  },\n\n  // Fetch project stats\n  fetchStats: async (projectId: number) => {\n    set({ statsLoading: true, statsError: null });\n\n    try {\n      const response = await getClient().getAgentStats(projectId);\n\n      // The API client returns the data directly\n      if (response) {\n        const statsData = response.data || response;\n        set({ \n          stats: statsData, \n          statsLoading: false \n        });\n      } else {\n        throw new Error('Failed to fetch project stats');\n      }\n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch project stats';\n      set({ \n        statsError: errorMessage, \n        statsLoading: false \n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  // Reset store\n  reset: () => {\n    set({\n      settings: null,\n      settingsLoading: false,\n      settingsError: null,\n      plugins: [],\n      pluginsLoading: false,\n      pluginsError: null,\n      stats: null,\n      statsLoading: false,\n      statsError: null,\n    });\n  },\n}));","import { create } from 'zustand';\nimport { getClient, isClientInitialized } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { Page, PagesQueryParams } from '@/types/pages.types';\n\ninterface PagesState {\n  pages: Page[];\n  loading: boolean;\n  error: string | null;\n  paginationInfo: {\n    current_page: number;\n    total: number;\n    per_page: number;\n    last_page: number;\n  };\n  queryParams: PagesQueryParams;\n  \n  // Actions\n  fetchPages: (projectId: number) => Promise<void>;\n  deletePage: (projectId: number, pageId: number) => Promise<void>;\n  reindexPage: (projectId: number, pageId: number) => Promise<void>;\n  \n  // UI State\n  setQueryParams: (params: Partial<PagesQueryParams>) => void;\n  reset: () => void;\n}\n\nexport const usePageStore = create<PagesState>((set, get) => ({\n  pages: [],\n  loading: false,\n  error: null,\n  paginationInfo: {\n    current_page: 1,\n    total: 0,\n    per_page: 20,\n    last_page: 1\n  },\n  queryParams: {\n    page: 1,\n    limit: 20,\n    order: 'desc',\n    crawl_status: 'all',\n    index_status: 'all'\n  },\n\n  fetchPages: async (projectId: number) => {\n    if (!isClientInitialized()) {\n      set({ error: 'API client not initialized' });\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const { queryParams } = get();\n      const response = await client.getPages(projectId, queryParams);\n      \n      set({ \n        pages: response.data.pages.data,\n        paginationInfo: {\n          current_page: response.data.pages.current_page,\n          total: response.data.pages.total,\n          per_page: response.data.pages.per_page,\n          last_page: response.data.pages.last_page\n        },\n        loading: false \n      });\n    } catch (error: any) {\n      console.error('Failed to fetch pages:', error);\n      \n      let errorMessage = 'Failed to fetch pages';\n      if (error.status === 400) {\n        errorMessage = 'Invalid request. Please check the project ID.';\n      } else if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Project not found.';\n      } else if (error.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  deletePage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deletePage(projectId, pageId);\n      \n      set(state => ({\n        pages: state.pages.filter(page => page.id !== pageId),\n        loading: false,\n      }));\n      \n      toast.success('Page deleted successfully');\n    } catch (error: any) {\n      console.error('Failed to delete page:', error);\n      \n      let errorMessage = 'Failed to delete page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 404) {\n        errorMessage = 'Page not found.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  reindexPage: async (projectId: number, pageId: number) => {\n    if (!isClientInitialized()) {\n      toast.error('API client not initialized');\n      return;\n    }\n\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.reindexPage(projectId, pageId);\n      \n      // Update local state to show queued status\n      set(state => ({\n        pages: state.pages.map(page => \n          page.id === pageId \n            ? { ...page, crawl_status: 'queued', index_status: 'queued' }\n            : page\n        ),\n        loading: false,\n      }));\n      \n      toast.success('Page reindexing started');\n    } catch (error: any) {\n      console.error('Failed to reindex page:', error);\n      \n      let errorMessage = 'Failed to reindex page';\n      if (error.status === 401) {\n        errorMessage = 'Authentication failed. Please log in again.';\n      } else if (error.status === 403) {\n        errorMessage = 'The page could not be reindexed.';\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false,\n      });\n      toast.error(errorMessage);\n    }\n  },\n\n  setQueryParams: (params: Partial<PagesQueryParams>) => {\n    set(state => ({\n      queryParams: { ...state.queryParams, ...params },\n    }));\n  },\n\n  reset: () => {\n    set({\n      pages: [],\n      loading: false,\n      error: null,\n      paginationInfo: {\n        current_page: 1,\n        total: 0,\n        per_page: 20,\n        last_page: 1\n      },\n      queryParams: {\n        page: 1,\n        limit: 20,\n        order: 'desc',\n        crawl_status: 'all',\n        index_status: 'all'\n      },\n    });\n  },\n}));","// Sources store - provides state management for source data\n// Currently uses direct API calls in components\n\nimport { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\n\nexport interface Source {\n  id: string;\n  project_id: number;\n  name: string;\n  type: 'file' | 'url' | 'text' | 'api';\n  status: 'active' | 'inactive' | 'processing' | 'error';\n  size?: number;\n  file_type?: string;\n  url?: string;\n  content?: string;\n  metadata?: {\n    description?: string;\n    tags?: string[];\n    author?: string;\n    lastIndexed?: string;\n    [key: string]: any;\n  };\n  created_at: string;\n  updated_at: string;\n  indexed_at?: string;\n  error_message?: string;\n}\n\ninterface SourcesState {\n  sources: Source[];\n  currentSource: Source | null;\n  loading: boolean;\n  error: string | null;\n  searchQuery: string;\n  filter: {\n    status?: 'active' | 'inactive' | 'processing' | 'error' | 'all';\n    type?: 'file' | 'url' | 'text' | 'api' | 'all';\n    sortBy?: 'name' | 'created_at' | 'updated_at' | 'size';\n    sortOrder?: 'asc' | 'desc';\n  };\n  syncStatus: {\n    syncing: boolean;\n    lastSync?: string;\n    progress?: number;\n  };\n  \n  // Actions\n  fetchSources: (projectId: number) => Promise<void>;\n  fetchSource: (projectId: number, sourceId: string) => Promise<void>;\n  uploadSources: (projectId: number, files: File[]) => Promise<void>;\n  updateSource: (projectId: number, sourceId: string, updates: Partial<Source>) => Promise<void>;\n  deleteSource: (projectId: number, sourceId: string) => Promise<void>;\n  bulkDelete: (projectId: number, sourceIds: string[]) => Promise<void>;\n  syncSources: (projectId: number) => Promise<void>;\n  \n  // UI State\n  setSearchQuery: (query: string) => void;\n  setFilter: (filter: Partial<SourcesState['filter']>) => void;\n  selectSource: (source: Source | null) => void;\n  reset: () => void;\n}\n\n// Store implementation for source management\nexport const useSourceStore = create<SourcesState>((set, get) => ({\n  sources: [],\n  currentSource: null,\n  loading: false,\n  error: null,\n  searchQuery: '',\n  filter: {\n    status: 'all',\n    type: 'all',\n    sortBy: 'updated_at',\n    sortOrder: 'desc',\n  },\n  syncStatus: {\n    syncing: false,\n  },\n\n  fetchSources: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getSources(projectId);\n      \n      // Extract all sources from sitemaps and uploads\n      const allSources: Source[] = [];\n      \n      if (response.data.sitemaps) {\n        // Map API source structure to store's Source interface\n        response.data.sitemaps.forEach((apiSource: any) => {\n          allSources.push({\n            id: apiSource.id.toString(),\n            project_id: projectId,\n            name: apiSource.settings.sitemap_path || `Source ${apiSource.id}`,\n            type: 'url', // Map 'sitemap' to 'url'\n            status: 'active',\n            metadata: {\n              ...apiSource.settings,\n              pages: apiSource.pages,\n            },\n            created_at: apiSource.created_at,\n            updated_at: apiSource.updated_at,\n          });\n        });\n      }\n      \n      if (response.data.uploads) {\n        const uploads = Array.isArray(response.data.uploads) \n          ? response.data.uploads \n          : [response.data.uploads];\n          \n        uploads.forEach((apiSource: any) => {\n          allSources.push({\n            id: apiSource.id.toString(),\n            project_id: projectId,\n            name: `Upload ${apiSource.id}`,\n            type: 'file',\n            status: 'active',\n            metadata: {\n              ...apiSource.settings,\n              pages: apiSource.pages,\n            },\n            created_at: apiSource.created_at,\n            updated_at: apiSource.updated_at,\n          });\n        });\n      }\n      \n      set({ sources: allSources, loading: false });\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch sources',\n        loading: false,\n      });\n      toast.error('Failed to load sources');\n    }\n  },\n\n  fetchSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      // const client = getClient();\n      // const response = await client.getSource(projectId, sourceId);\n      \n      // const source = response.data;\n      // set({ currentSource: source, loading: false });\n      throw new Error('getSource API method not available');\n      \n      // Update in the list as well\n      // set(state => ({\n      //   sources: state.sources.map(s => s.id === sourceId ? source : s),\n      // }));\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to fetch source',\n        loading: false,\n      });\n      toast.error('Failed to load source details');\n    }\n  },\n\n  uploadSources: async (projectId: number, files: File[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Upload files one by one for better progress tracking\n      const uploadPromises = files.map(file => \n        Promise.reject(new Error('uploadFile API method not available'))\n      );\n      \n      const responses = await Promise.all(uploadPromises);\n      \n      // Refresh sources list\n      await get().fetchSources(projectId);\n      \n      toast.success(`Successfully uploaded ${files.length} file(s)`);\n      set({ loading: false });\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to upload sources',\n        loading: false,\n      });\n      toast.error('Failed to upload files');\n      throw error;\n    }\n  },\n\n  updateSource: async (projectId: number, sourceId: string, updates: Partial<Source>) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      // await client.updateSource(projectId, sourceId, {\n      throw new Error('updateSource API method not available');\n      /*\n        name: updates.name,\n        metadata: updates.metadata,\n        status: updates.status,\n      }); */\n      \n      set(state => ({\n        sources: state.sources.map(source => \n          source.id === sourceId \n            ? { ...source, ...updates, updated_at: new Date().toISOString() } \n            : source\n        ),\n        currentSource: state.currentSource?.id === sourceId \n          ? { ...state.currentSource, ...updates, updated_at: new Date().toISOString() }\n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source updated successfully');\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to update source',\n        loading: false,\n      });\n      toast.error('Failed to update source');\n      throw error;\n    }\n  },\n\n  deleteSource: async (projectId: number, sourceId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteSource(projectId, parseInt(sourceId));\n      \n      set(state => ({\n        sources: state.sources.filter(source => source.id !== sourceId),\n        currentSource: state.currentSource?.id === sourceId ? null : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success('Source deleted successfully');\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete source',\n        loading: false,\n      });\n      toast.error('Failed to delete source');\n      throw error;\n    }\n  },\n\n  bulkDelete: async (projectId: number, sourceIds: string[]) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      \n      // Delete sources in parallel\n      await Promise.all(\n        sourceIds.map(sourceId => client.deleteSource(projectId, parseInt(sourceId)))\n      );\n      \n      set(state => ({\n        sources: state.sources.filter(source => !sourceIds.includes(source.id)),\n        currentSource: sourceIds.includes(state.currentSource?.id || '') \n          ? null \n          : state.currentSource,\n        loading: false,\n      }));\n      \n      toast.success(`Successfully deleted ${sourceIds.length} source(s)`);\n    } catch (error) {\n      set({ \n        error: error instanceof Error ? error.message : 'Failed to delete sources',\n        loading: false,\n      });\n      toast.error('Failed to delete sources');\n      throw error;\n    }\n  },\n\n  syncSources: async (projectId: number) => {\n    set(state => ({\n      syncStatus: { ...state.syncStatus, syncing: true, progress: 0 }\n    }));\n    \n    try {\n      const client = getClient();\n      // await client.syncSources(projectId);\n      throw new Error('syncSources API method not available');\n      \n      // Refresh sources after sync\n      await get().fetchSources(projectId);\n      \n      set(state => ({\n        syncStatus: {\n          syncing: false,\n          lastSync: new Date().toISOString(),\n          progress: 100,\n        }\n      }));\n      \n      toast.success('Sources synchronized successfully');\n    } catch (error) {\n      set(state => ({\n        syncStatus: { ...state.syncStatus, syncing: false },\n        error: error instanceof Error ? error.message : 'Failed to sync sources',\n      }));\n      toast.error('Failed to sync sources');\n      throw error;\n    }\n  },\n\n  setSearchQuery: (query: string) => {\n    set({ searchQuery: query });\n  },\n\n  setFilter: (filter: Partial<SourcesState['filter']>) => {\n    set(state => ({\n      filter: { ...state.filter, ...filter },\n    }));\n  },\n\n  selectSource: (source: Source | null) => {\n    set({ currentSource: source });\n  },\n\n  reset: () => {\n    set({\n      sources: [],\n      currentSource: null,\n      loading: false,\n      error: null,\n      searchQuery: '',\n      filter: {\n        status: 'all',\n        type: 'all',\n        sortBy: 'updated_at',\n        sortOrder: 'desc',\n      },\n      syncStatus: {\n        syncing: false,\n      },\n    });\n  },\n}));","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { getClient } from '@/lib/api/client';\nimport { toast } from 'sonner';\nimport type { UserProfileStore, UserProfile } from '@/types';\n\n// CustomGPT.ai API Response format\ninterface CustomGPTResponse<T> {\n  status: 'success' | 'error';\n  data: T;\n}\n\nexport const useProfileStore = create<UserProfileStore>()(\n  persist(\n    (set, get) => ({\n      // Initial State\n      profile: null,\n      loading: false,\n      error: null,\n\n      // Profile Management - GET /api/v1/user\n      fetchProfile: async () => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          const response = await client.getUserProfile();\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n          } else {\n            throw new Error('Failed to fetch profile');\n          }\n        } catch (error: any) {\n          console.error('Failed to fetch profile:', error);\n          \n          let errorMessage = 'Failed to fetch profile';\n          \n          if (error.status === 401) {\n            const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : null;\n            const isDemoMode = deploymentMode === 'demo';\n            if (isDemoMode) {\n              errorMessage = 'API key authentication failed. Please check your API key.';\n              toast.error('Authentication failed. Please check your API key in demo settings.');\n            } else {\n              errorMessage = 'Authentication required. Please check your API key configuration.';\n              toast.error('Authentication failed. Please check your API key configuration.');\n            }\n          } else if (error.status === 500) {\n            errorMessage = 'Server error occurred. Please try again later.';\n            toast.error('Server error. Please try again later.');\n          } else {\n            toast.error('Failed to load profile');\n          }\n          \n          set({ \n            error: errorMessage,\n            loading: false \n          });\n        }\n      },\n\n      // Profile Update - POST /api/v1/user (multipart/form-data)\n      updateProfile: async (name: string, profilePhoto?: File) => {\n        set({ loading: true, error: null });\n        \n        try {\n          const client = getClient();\n          \n          // Create FormData for multipart request\n          const formData = new FormData();\n          formData.append('name', name);\n          \n          if (profilePhoto) {\n            formData.append('profile_photo', profilePhoto);\n          }\n          \n          const response = await client.updateUserProfile(formData);\n          \n          if (response.status === 'success') {\n            set({ \n              profile: response.data,\n              loading: false \n            });\n            toast.success('Profile updated successfully');\n          } else {\n            throw new Error('Failed to update profile');\n          }\n        } catch (error: any) {\n          console.error('Failed to update profile:', error);\n          \n          let errorMessage = 'Failed to update profile';\n          \n          if (error.status === 401) {\n            const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : null;\n            const isDemoMode = deploymentMode === 'demo';\n            if (isDemoMode) {\n              errorMessage = 'API key authentication failed. Please check your API key.';\n              toast.error('Authentication failed. Please check your API key in demo settings.');\n            } else {\n              errorMessage = 'Authentication required. Please check your API key configuration.';\n              toast.error('Authentication failed. Please check your API key configuration.');\n            }\n          } else if (error.status === 422 || error.status === 400) {\n            // Handle validation errors\n            if (error.data?.data?.errors) {\n              const errors = error.data.data.errors;\n              if (errors.profile_photo && Array.isArray(errors.profile_photo)) {\n                errorMessage = errors.profile_photo[0];\n                toast.error(errorMessage);\n              } else {\n                // Handle other validation errors\n                const firstError = Object.values(errors).flat()[0] as string;\n                errorMessage = firstError || 'Validation error occurred';\n                toast.error(errorMessage);\n              }\n            } else {\n              errorMessage = error.message || 'Validation error occurred';\n              toast.error(errorMessage);\n            }\n          } else if (error.status === 500) {\n            errorMessage = 'Server error occurred. Please try again later.';\n            toast.error('Server error. Please try again later.');\n          } else {\n            errorMessage = error.message || 'Failed to update profile';\n            toast.error(errorMessage);\n          }\n          \n          set({ \n            error: errorMessage,\n            loading: false \n          });\n        }\n      },\n\n      // Utility\n      reset: () => {\n        set({\n          profile: null,\n          loading: false,\n          error: null,\n        });\n      },\n    }),\n    {\n      name: 'profile-store',\n      partialize: (state) => ({\n        profile: state.profile,\n      }),\n    }\n  )\n);","import { create } from 'zustand';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport type { AgentLicense } from '@/types';\n\ninterface LicenseStore {\n  licenses: AgentLicense[];\n  loading: boolean;\n  error: string | null;\n  \n  fetchLicenses: (projectId: number) => Promise<void>;\n  createLicense: (projectId: number, name: string) => Promise<AgentLicense>;\n  updateLicense: (projectId: number, licenseId: string, name: string) => Promise<void>;\n  deleteLicense: (projectId: number, licenseId: string) => Promise<void>;\n  clearError: () => void;\n}\n\nexport const useLicenseStore = create<LicenseStore>((set, get) => ({\n  licenses: [],\n  loading: false,\n  error: null,\n\n  fetchLicenses: async (projectId: number) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.getLicenses(projectId);\n      \n      logger.info('LICENSES', 'API Response', {\n        projectId,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataType: Array.isArray(response?.data) ? 'array' : typeof response?.data,\n        dataLength: Array.isArray(response?.data) ? response.data.length : 0\n      });\n      \n      // Handle response format based on API documentation\n      const licenses = Array.isArray(response.data) ? response.data : [];\n      \n      logger.info('LICENSES', 'Processed licenses', {\n        count: licenses.length,\n        licenses: licenses.map((l: any) => ({ \n          name: l.name, \n          key: l.key?.substring(0, 8) + '...', \n          project_id: l.project_id \n        }))\n      });\n      \n      set({ \n        licenses,\n        loading: false \n      });\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to fetch licenses', {\n        projectId,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        responseText: error?.responseText || 'No response text'\n      });\n      \n      // Handle JSON parsing errors specifically\n      let errorMessage = 'Failed to fetch licenses';\n      if (error?.status === 403 || error?.data?.message?.includes('not allowed')) {\n        // This is expected for some projects - don't show an error\n        errorMessage = '';\n        set({ \n          error: null,\n          loading: false,\n          licenses: []\n        });\n        throw error; // Still throw to handle in component\n      } else if (error?.message?.includes('Unexpected token')) {\n        errorMessage = 'API returned invalid response format. This may be a server configuration issue.';\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      \n      if (errorMessage) {\n        set({ \n          error: errorMessage,\n          loading: false,\n          licenses: []\n        });\n      }\n    }\n  },\n\n  createLicense: async (projectId: number, name: string) => {\n    set({ loading: true, error: null });\n    \n    logger.info('LICENSES', 'Creating license', {\n      projectId,\n      name\n    });\n    \n    try {\n      const client = getClient();\n      const response = await client.createLicense(projectId, { name });\n      \n      logger.info('LICENSES', 'Create license API response', {\n        projectId,\n        name,\n        status: 'success',\n        responseType: typeof response,\n        hasData: !!response?.data,\n        dataStructure: response?.data ? Object.keys(response.data) : [],\n        licenseKey: response.data?.licenseKey?.substring(0, 8) + '...'\n      });\n      \n      // Handle response format based on API documentation\n      // Response contains { license: {...}, licenseKey: \"...\" }\n      const newLicense = response.data?.license || response.data;\n      \n      if (newLicense) {\n        logger.info('LICENSES', 'New license created', {\n          licenseName: newLicense.name,\n          licenseKey: newLicense.key?.substring(0, 8) + '...',\n          project_id: newLicense.project_id\n        });\n        \n        set(state => ({\n          licenses: [...state.licenses, newLicense],\n          loading: false\n        }));\n      }\n      \n      return newLicense;\n    } catch (error: any) {\n      logger.error('LICENSES', 'Failed to create license', {\n        projectId,\n        name,\n        errorType: error?.constructor?.name,\n        errorMessage: error?.message,\n        errorStatus: error?.status,\n        errorCode: error?.code,\n        responseText: error?.responseText || 'No response text'\n      });\n      \n      // Handle JSON parsing errors specifically\n      let errorMessage = 'Failed to create license';\n      if (error?.message?.includes('Unexpected token')) {\n        errorMessage = 'API returned invalid response format. This may be a server configuration issue.';\n      } else if (error instanceof Error) {\n        errorMessage = error.message;\n      }\n      \n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  updateLicense: async (projectId: number, licenseId: string, name: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      const response = await client.updateLicense(projectId, licenseId, { name });\n      \n      logger.info('LICENSES', 'Updated license', {\n        projectId,\n        licenseId,\n        name\n      });\n      \n      // Handle response format based on API documentation\n      const updatedLicense = (response as any).license || response.data;\n      \n      if (updatedLicense) {\n        set(state => ({\n          licenses: state.licenses.map(license => \n            license.key === licenseId ? { ...license, name, updated_at: new Date().toISOString() } : license\n          ),\n          loading: false\n        }));\n      }\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to update license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to update license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  deleteLicense: async (projectId: number, licenseId: string) => {\n    set({ loading: true, error: null });\n    \n    try {\n      const client = getClient();\n      await client.deleteLicense(projectId, licenseId);\n      \n      logger.info('LICENSES', 'Deleted license', {\n        projectId,\n        licenseId\n      });\n      \n      set(state => ({\n        licenses: state.licenses.filter(license => license.key !== licenseId),\n        loading: false\n      }));\n    } catch (error) {\n      logger.error('LICENSES', 'Failed to delete license', error);\n      \n      const errorMessage = error instanceof Error ? error.message : 'Failed to delete license';\n      set({ \n        error: errorMessage,\n        loading: false \n      });\n      \n      throw error;\n    }\n  },\n\n  clearError: () => {\n    set({ error: null });\n  }\n}));","/**\n * Button Component\n * \n * Reusable button component with multiple variants and sizes.\n * Built with class-variance-authority for type-safe styling.\n * \n * Variants:\n * - default: Primary brand button with shadow\n * - destructive: Red danger button for destructive actions\n * - outline: Secondary button with border\n * - secondary: Gray background button\n * - ghost: Transparent button with hover state\n * - link: Text-only button styled as link\n * \n * Sizes:\n * - default: Standard size (h-10)\n * - sm: Small size (h-8)\n * - lg: Large size (h-12)\n * - icon: Square icon button (10x10)\n * \n * Features:\n * - Full keyboard accessibility\n * - Focus ring for keyboard navigation\n * - Disabled state handling\n * - Smooth transitions\n * - Responsive to all button HTML attributes\n * \n * Usage examples:\n * <Button>Click me</Button>\n * <Button variant=\"destructive\">Delete</Button>\n * <Button size=\"sm\" variant=\"outline\">Cancel</Button>\n * <Button size=\"icon\" variant=\"ghost\"><Icon /></Button>\n * \n * Features:\n * - Comprehensive variant system with brand-consistent styling\n * - Professional color schemes aligned with design guidelines\n * - Loading states with integrated spinner animations\n * - Button group functionality for complex interfaces\n * - Full icon support with flexible positioning options\n */\n\nimport * as React from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\n/**\n * Button variant configuration using class-variance-authority\n * \n * Base classes apply to all buttons, then variant-specific\n * classes are added based on the variant and size props.\n */\nconst buttonVariants = cva(\n  // Enhanced base classes with premium feel\n  'relative inline-flex items-center justify-center font-medium transition-all duration-200 ease-out focus-visible:outline-none disabled:opacity-50 disabled:cursor-not-allowed disabled:pointer-events-none transform-gpu active:scale-[0.98]',\n  {\n    variants: {\n      variant: {\n        default: [\n          'bg-primary text-primary-foreground shadow-sm',\n          'hover:bg-primary-hover hover:shadow-md hover:scale-[1.02]',\n          'focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2',\n          'active:bg-primary-active',\n          'transition-all duration-200',\n        ].join(' '),\n        destructive: [\n          'bg-destructive text-destructive-foreground shadow-sm',\n          'hover:bg-destructive/90 hover:shadow-md hover:scale-[1.02]',\n          'focus-visible:ring-2 focus-visible:ring-destructive/50 focus-visible:ring-offset-2',\n          'active:bg-destructive/80',\n        ].join(' '),\n        outline: [\n          'border border-input bg-background/50 backdrop-blur-sm',\n          'hover:bg-accent hover:text-accent-foreground hover:border-accent',\n          'focus-visible:ring-2 focus-visible:ring-accent/50 focus-visible:ring-offset-2',\n          'transition-all duration-200',\n        ].join(' '),\n        secondary: [\n          'bg-secondary text-secondary-foreground',\n          'hover:bg-secondary/80 hover:shadow-sm',\n          'focus-visible:ring-2 focus-visible:ring-secondary/50 focus-visible:ring-offset-2',\n        ].join(' '),\n        ghost: [\n          'hover:bg-accent hover:text-accent-foreground',\n          'focus-visible:ring-2 focus-visible:ring-accent/50 focus-visible:ring-offset-2',\n          'data-[state=open]:bg-accent data-[state=open]:text-accent-foreground',\n        ].join(' '),\n        link: [\n          'text-primary underline-offset-4 hover:underline',\n          'focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2',\n          'hover:text-primary-hover',\n        ].join(' '),\n        premium: [\n          'bg-gradient-to-r from-primary to-primary-hover text-primary-foreground',\n          'shadow-md hover:shadow-lg hover:scale-[1.02]',\n          'focus-visible:ring-2 focus-visible:ring-primary/50 focus-visible:ring-offset-2',\n          'before:absolute before:inset-0 before:bg-white/20 before:opacity-0',\n          'hover:before:opacity-100 before:transition-opacity before:duration-200',\n          'overflow-hidden',\n        ].join(' '),\n      },\n      size: {\n        default: 'h-10 rounded-lg px-4 py-2 text-sm',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-12 rounded-lg px-8 text-base',\n        xl: 'h-14 rounded-xl px-10 text-lg',\n        icon: 'h-10 w-10 rounded-lg',\n        'icon-sm': 'h-8 w-8 rounded-md',\n        'icon-lg': 'h-12 w-12 rounded-lg',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\n/**\n * Button component props\n * \n * Extends standard HTML button attributes with variant props\n * @property variant - Visual style variant\n * @property size - Button size preset\n * @property asChild - Whether to render as child component (for composition)\n */\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  loading?: boolean;\n  loadingText?: string;\n}\n\n/**\n * Button Component\n * \n * Forward ref component for proper ref handling in forms\n * and other use cases requiring direct DOM access.\n */\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ \n    className, \n    variant, \n    size, \n    asChild = false, \n    loading = false,\n    loadingText,\n    children,\n    disabled,\n    onClick,\n    ...props \n  }, ref) => {\n    const [ripples, setRipples] = React.useState<Array<{ x: number; y: number; id: number }>>([]);\n    \n    const handleClick = React.useCallback((e: React.MouseEvent<HTMLButtonElement>) => {\n      if (loading || disabled) return;\n      \n      // Add ripple effect\n      const button = e.currentTarget;\n      const rect = button.getBoundingClientRect();\n      const rippleX = e.clientX - rect.left;\n      const rippleY = e.clientY - rect.top;\n      const rippleId = Date.now();\n      \n      setRipples(prev => [...prev, { x: rippleX, y: rippleY, id: rippleId }]);\n      \n      // Remove ripple after animation\n      setTimeout(() => {\n        setRipples(prev => prev.filter(ripple => ripple.id !== rippleId));\n      }, 600);\n      \n      // Call original onClick\n      onClick?.(e);\n    }, [loading, disabled, onClick]);\n    \n    return (\n      <button\n        className={cn(\n          buttonVariants({ variant, size, className }),\n          'relative overflow-hidden',\n          loading && 'cursor-wait'\n        )}\n        ref={ref}\n        disabled={loading || disabled}\n        onClick={handleClick}\n        {...props}\n      >\n        {/* Ripple effects */}\n        {ripples.map(ripple => (\n          <span\n            key={ripple.id}\n            className=\"absolute pointer-events-none\"\n            style={{\n              left: ripple.x,\n              top: ripple.y,\n              transform: 'translate(-50%, -50%)',\n            }}\n          >\n            <span className=\"block animate-ripple rounded-full bg-white/30 dark:bg-white/20\" \n              style={{\n                width: 0,\n                height: 0,\n                animation: 'ripple-expand 0.6s ease-out forwards',\n              }}\n            />\n          </span>\n        ))}\n        \n        {/* Loading spinner */}\n        {loading && (\n          <span className=\"absolute inset-0 flex items-center justify-center bg-inherit\">\n            <svg\n              className=\"animate-spin h-4 w-4\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle\n                className=\"opacity-25\"\n                cx=\"12\"\n                cy=\"12\"\n                r=\"10\"\n                stroke=\"currentColor\"\n                strokeWidth=\"4\"\n              />\n              <path\n                className=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              />\n            </svg>\n          </span>\n        )}\n        \n        {/* Button content */}\n        <span className={cn(\n          'relative z-10 inline-flex items-center',\n          loading && 'opacity-0'\n        )}>\n          {children}\n        </span>\n        \n        {/* Loading text */}\n        {loading && loadingText && (\n          <span className=\"absolute inset-0 flex items-center justify-center\">\n            <span className=\"ml-6\">{loadingText}</span>\n          </span>\n        )}\n      </button>\n    );\n  }\n);\nButton.displayName = 'Button';\n\nexport { Button, buttonVariants };","/**\n * Avatar Component\n * \n * Reusable avatar component that displays agent avatars with fallback to default icons.\n * Supports different sizes, shapes, and fallback icons for various use cases.\n * \n * Features:\n * - Image loading with error handling\n * - Multiple size variants\n * - Customizable fallback icons\n * - Consistent styling across the application\n * - Accessibility support\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot, User } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport type { Agent } from '@/types';\n\nexport interface AvatarProps {\n  /** Agent/project data containing avatar information */\n  agent?: Agent | null;\n  /** Avatar image URL (alternative to agent prop) */\n  src?: string;\n  /** Alt text for the image */\n  alt?: string;\n  /** Size variant */\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\n  /** Shape variant */\n  shape?: 'circle' | 'rounded' | 'square';\n  /** Fallback icon type */\n  fallback?: 'bot' | 'user' | 'none';\n  /** Whether this avatar represents a selected/active state */\n  isSelected?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Avatar size configurations\n */\nconst sizeVariants = {\n  xs: {\n    container: 'w-4 h-4',\n    icon: 'w-2 h-2'\n  },\n  sm: {\n    container: 'w-6 h-6', \n    icon: 'w-3 h-3'\n  },\n  md: {\n    container: 'w-8 h-8',\n    icon: 'w-4 h-4'\n  },\n  lg: {\n    container: 'w-10 h-10',\n    icon: 'w-5 h-5'\n  },\n  xl: {\n    container: 'w-12 h-12',\n    icon: 'w-6 h-6'\n  }\n};\n\n/**\n * Avatar shape configurations\n */\nconst shapeVariants = {\n  circle: 'rounded-full',\n  rounded: 'rounded-lg', \n  square: 'rounded-none'\n};\n\n/**\n * Avatar Component\n * \n * Displays agent avatar with proper fallbacks and error handling.\n * \n * @param agent - Agent object containing avatar settings\n * @param src - Direct image URL (overrides agent avatar)\n * @param alt - Alt text for accessibility\n * @param size - Size variant (xs, sm, md, lg, xl)\n * @param shape - Shape variant (circle, rounded, square)\n * @param fallback - Fallback icon type\n * @param isSelected - Whether avatar represents selected state\n * @param className - Additional CSS classes\n */\nexport const Avatar: React.FC<AvatarProps> = ({\n  agent,\n  src,\n  alt,\n  size = 'md',\n  shape = 'circle',\n  fallback = 'bot',\n  isSelected = false,\n  className\n}) => {\n  const [imageError, setImageError] = React.useState(false);\n  \n  // Determine the avatar URL from props or agent settings\n  const avatarUrl = src || agent?.settings?.chatbot_avatar;\n  \n  // Generate alt text if not provided\n  const altText = alt || (agent?.project_name ? `${agent.project_name} avatar` : 'Avatar');\n  \n  // Get size and shape classes\n  const sizeClasses = sizeVariants[size];\n  const shapeClass = shapeVariants[shape];\n  \n  // Determine background color based on state\n  const backgroundClass = isSelected \n    ? 'bg-primary shadow-md' \n    : 'bg-muted hover:bg-accent transition-all duration-200';\n  \n  // Handle image load error\n  const handleImageError = () => {\n    setImageError(true);\n  };\n  \n  // Reset error state when avatar URL changes\n  React.useEffect(() => {\n    setImageError(false);\n  }, [avatarUrl]);\n  \n  // Render fallback icon\n  const renderFallbackIcon = () => {\n    if (fallback === 'none') return null;\n    \n    const iconClass = cn(\n      sizeClasses.icon,\n      isSelected ? 'text-primary-foreground' : 'text-muted-foreground'\n    );\n    \n    switch (fallback) {\n      case 'user':\n        return <User className={iconClass} />;\n      case 'bot':\n      default:\n        return <Bot className={iconClass} />;\n    }\n  };\n  \n  return (\n    <div className={cn(\n      'relative flex items-center justify-center flex-shrink-0 overflow-hidden',\n      'ring-2 ring-transparent',\n      'hover:ring-primary/20 hover:scale-105',\n      'transition-all duration-200',\n      isSelected && 'ring-primary ring-offset-2 ring-offset-background',\n      sizeClasses.container,\n      shapeClass,\n      backgroundClass,\n      className\n    )}>\n      {avatarUrl && !imageError ? (\n        <img\n          src={avatarUrl}\n          alt={altText}\n          className=\"w-full h-full object-cover\"\n          onError={handleImageError}\n          loading=\"lazy\"\n        />\n      ) : (\n        renderFallbackIcon()\n      )}\n      {/* Online indicator (optional) */}\n      {isSelected && (\n        <div className=\"absolute -bottom-0.5 -right-0.5 h-3 w-3 rounded-full bg-success border-2 border-background\" />\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Avatar Component\n * \n * Specialized avatar component for agent/project displays.\n * Uses 'bot' fallback by default and extracts name for alt text.\n * \n * @param agent - Agent object\n * @param size - Size variant\n * @param isSelected - Selection state\n * @param className - Additional classes\n */\nexport const AgentAvatar: React.FC<{\n  agent?: Agent | null;\n  size?: AvatarProps['size'];\n  isSelected?: boolean;\n  className?: string;\n}> = ({ agent, size = 'md', isSelected = false, className }) => {\n  return (\n    <Avatar\n      agent={agent}\n      size={size}\n      shape=\"circle\"\n      fallback=\"bot\"\n      isSelected={isSelected}\n      alt={agent?.project_name ? `${agent.project_name} avatar` : 'Agent avatar'}\n      className={className}\n    />\n  );\n};\n\n/**\n * User Avatar Component\n * \n * Specialized avatar component for user displays.\n * Uses 'user' fallback by default.\n * \n * @param src - Avatar image URL\n * @param size - Size variant  \n * @param className - Additional classes\n */\nexport const UserAvatar: React.FC<{\n  src?: string;\n  size?: AvatarProps['size'];\n  className?: string;\n}> = ({ src, size = 'md', className }) => {\n  return (\n    <Avatar\n      src={src}\n      size={size}\n      shape=\"circle\"\n      fallback=\"user\"\n      alt=\"User avatar\"\n      className={className}\n    />\n  );\n};","/**\n * Citation List Component\n * \n * Displays a list of source citations from the AI's response.\n * Shows where the information came from with expandable details.\n * \n * Features:\n * - Expandable citation cards\n * - Confidence score visualization\n * - Direct source links\n * - Show more/less functionality\n * - Smooth expand/collapse animations\n * - Citation numbering\n * - View details modal integration\n * \n * UI/UX:\n * - Compact card design\n * - Progressive disclosure pattern\n * - Visual confidence indicators\n * - Hover states for interactivity\n * - Staggered animation on load\n * \n * Citation Display:\n * - Title and source URL\n * - Content preview\n * - Confidence percentage\n * - External link to source\n * - Details button for modal\n * \n * Features:\n * - Advanced citation filtering and intelligent search capabilities\n * - Professional export functionality for research workflows\n * - Enhanced confidence visualization with detailed analytics\n * - Smart citation grouping by domain and source type\n * - Interactive tooltips and one-click copy functionality\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  BookOpen, \n  ChevronDown, \n  ExternalLink,\n  FileText \n} from 'lucide-react';\n\nimport type { CitationProps, Citation } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\n\n/**\n * Props for individual citation card\n * \n * @property citation - Citation data object\n * @property index - Display index (1-based)\n * @property isExpanded - Whether card is expanded\n * @property onToggle - Toggle expansion callback\n * @property onClick - Optional click handler for details\n * @property onPreviewClick - Optional click handler for file preview\n */\ninterface CitationCardProps {\n  citation: Citation;\n  index: number;\n  isExpanded: boolean;\n  onToggle: () => void;\n  onClick?: (citation: Citation) => void;\n  onPreviewClick?: (citation: Citation) => void;\n}\n\n/**\n * Citation Card Component\n * \n * Individual citation with expandable details.\n * Shows title, source, content, and confidence score.\n */\nconst CitationCard: React.FC<CitationCardProps> = ({\n  citation,\n  index,\n  isExpanded,\n  onToggle,\n  onClick,\n  onPreviewClick,\n}) => {\n  return (\n    <div className=\"border border-border rounded-lg overflow-hidden transition-all hover:border-border/80\">\n      <button\n        onClick={onToggle}\n        className=\"w-full px-3 py-2 flex items-center gap-3 hover:bg-accent transition-colors text-left\"\n      >\n        {/* Citation Index */}\n        <div className=\"flex-shrink-0 w-6 h-6 rounded bg-brand-100 flex items-center justify-center\">\n          <span className=\"text-xs font-medium text-brand-700\">{index}</span>\n        </div>\n        \n        {/* Citation Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"font-medium text-sm text-foreground line-clamp-1\">\n            {citation.title}\n          </div>\n          <div className=\"text-xs text-muted-foreground line-clamp-1\">\n            {citation.source || citation.url}\n          </div>\n        </div>\n        \n        {/* Expand Icon */}\n        <ChevronDown\n          className={cn(\n            'w-4 h-4 text-muted-foreground transition-transform flex-shrink-0',\n            isExpanded && 'rotate-180'\n          )}\n        />\n      </button>\n      \n      {/* Expanded Content */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: 'auto', opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"px-3 py-2 border-t border-border bg-accent\">\n              <p className=\"text-sm text-foreground mb-2\">\n                {citation.content}\n              </p>\n              \n              \n              {/* Actions */}\n              <div className=\"flex items-center gap-2\">\n                {citation.url && (\n                  <a\n                    href={citation.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"inline-flex items-center gap-1 text-xs text-brand-600 hover:text-brand-700 transition-colors\"\n                  >\n                    View source\n                    <ExternalLink className=\"w-3 h-3\" />\n                  </a>\n                )}\n                \n                {onClick && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onClick(citation)}\n                    className=\"h-6 px-2 text-xs\"\n                  >\n                    View details\n                  </Button>\n                )}\n                \n                {onPreviewClick && (\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={() => onPreviewClick(citation)}\n                    className=\"h-6 px-2 text-xs\"\n                  >\n                    <FileText className=\"w-3 h-3 mr-1\" />\n                    Preview file\n                  </Button>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\n/**\n * Citation List Component\n * \n * Main component that renders a list of citations with progressive disclosure.\n * Handles expansion state and show more/less functionality.\n * \n * @param citations - Array of citation objects to display\n * @param onCitationClick - Optional handler for citation detail clicks\n * @param maxVisible - Maximum citations to show initially (default: 5)\n * @param className - Additional CSS classes\n */\nexport const CitationList: React.FC<CitationProps & { onPreviewClick?: (citation: Citation) => void }> = ({ \n  citations, \n  onCitationClick,\n  onPreviewClick,\n  maxVisible = 5,\n  className \n}) => {\n  // Track which citations are expanded\n  const [expanded, setExpanded] = useState<Set<string>>(new Set());\n  // Track whether to show all citations or just maxVisible\n  const [showAll, setShowAll] = useState(false);\n  \n  const visibleCitations = showAll ? citations : citations.slice(0, maxVisible);\n  const hasMore = citations.length > maxVisible;\n\n  /**\n   * Toggle citation expansion state\n   * \n   * Uses Set for efficient lookup and update of expanded citations\n   */\n  const toggleExpanded = (citationId: string) => {\n    const newExpanded = new Set(expanded);\n    if (expanded.has(citationId)) {\n      newExpanded.delete(citationId);\n    } else {\n      newExpanded.add(citationId);\n    }\n    setExpanded(newExpanded);\n  };\n\n  if (citations.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={cn('mt-4 space-y-2', className)}>\n      {/* Header */}\n      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n        <BookOpen className=\"w-4 h-4\" />\n        <span className=\"font-medium\">Sources</span>\n        <span className=\"text-muted-foreground\">({citations.length})</span>\n        \n        {hasMore && (\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={() => setShowAll(!showAll)}\n            className=\"ml-auto h-6 px-2 text-xs\"\n          >\n            {showAll ? 'Show less' : `Show all ${citations.length}`}\n          </Button>\n        )}\n      </div>\n      \n      {/* Citations */}\n      <div className=\"space-y-2\">\n        <AnimatePresence>\n          {visibleCitations.map((citation, idx) => (\n            <motion.div\n              key={citation.id}\n              initial={{ opacity: 0, y: 10 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -10 }}\n              transition={{ duration: 0.2, delay: idx * 0.05 }}\n            >\n              <CitationCard\n                citation={citation}\n                index={idx + 1}\n                isExpanded={expanded.has(citation.id)}\n                onToggle={() => toggleExpanded(citation.id)}\n                onClick={onCitationClick}\n                onPreviewClick={onPreviewClick}\n              />\n            </motion.div>\n          ))}\n        </AnimatePresence>\n      </div>\n      \n      {/* Load More Button */}\n      {hasMore && !showAll && (\n        <div className=\"pt-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setShowAll(true)}\n            className=\"w-full\"\n          >\n            Show {citations.length - maxVisible} more sources\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Message Details Component\n * \n * Displays additional metadata and information about a message\n * that's not shown in the main UI. Includes user ID, conversation ID,\n * metadata, and timestamps.\n * \n * Features:\n * - Collapsible details section\n * - Formatted metadata display\n * - Copy functionality for technical details\n * - Responsive layout\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport { ChevronDown, ChevronUp, Copy, Info } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { cn, copyToClipboard } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport type { MessageDetails as MessageDetailsType } from '@/types';\n\ninterface MessageDetailsProps {\n  /** The message details to display */\n  details?: MessageDetailsType;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * Format a key name to be more readable\n */\nconst formatKey = (key: string): string => {\n  return key\n    .split('_')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n};\n\n/**\n * Format a value for display\n */\nconst formatValue = (value: any): string => {\n  if (value === null || value === undefined) {\n    return 'N/A';\n  }\n  if (typeof value === 'object') {\n    return JSON.stringify(value, null, 2);\n  }\n  return String(value);\n};\n\nexport const MessageDetails: React.FC<MessageDetailsProps> = ({ details, className }) => {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  if (!details) {\n    return null;\n  }\n\n  const handleCopyAll = async () => {\n    const detailsText = JSON.stringify(details, null, 2);\n    const success = await copyToClipboard(detailsText);\n    if (success) {\n      toast.success('Details copied to clipboard');\n    }\n  };\n\n  const handleCopyValue = async (value: string) => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      toast.success('Value copied to clipboard');\n    }\n  };\n\n  return (\n    <div className={cn('mt-2', className)}>\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"flex items-center gap-1 text-xs text-muted-foreground hover:text-foreground transition-colors\"\n      >\n        <Info className=\"w-3 h-3\" />\n        <span>More Details</span>\n        {isExpanded ? (\n          <ChevronUp className=\"w-3 h-3\" />\n        ) : (\n          <ChevronDown className=\"w-3 h-3\" />\n        )}\n      </button>\n\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            transition={{ duration: 0.2 }}\n            className=\"overflow-hidden\"\n          >\n            <div className=\"mt-2 p-3 bg-accent rounded-lg border border-border\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h4 className=\"text-xs font-semibold text-foreground\">Message Details</h4>\n                <Button\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  onClick={handleCopyAll}\n                  className=\"h-6 px-2 text-xs\"\n                >\n                  <Copy className=\"w-3 h-3 mr-1\" />\n                  Copy All\n                </Button>\n              </div>\n\n              <div className=\"space-y-2\">\n                {/* Basic Details */}\n                {details.user_id !== undefined && (\n                  <DetailRow\n                    label=\"User ID\"\n                    value={String(details.user_id)}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n                \n                {details.conversation_id !== undefined && (\n                  <DetailRow\n                    label=\"Conversation ID\"\n                    value={String(details.conversation_id)}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n                \n                {details.updated_at && (\n                  <DetailRow\n                    label=\"Updated At\"\n                    value={new Date(details.updated_at).toLocaleString()}\n                    onCopy={handleCopyValue}\n                  />\n                )}\n\n                {/* Metadata Section */}\n                {details.metadata && (\n                  <div className=\"mt-3 pt-2 border-t border-border\">\n                    <h5 className=\"text-xs font-semibold text-muted-foreground mb-2\">Metadata</h5>\n                    \n                    {details.metadata.user_ip && (\n                      <DetailRow\n                        label=\"User IP\"\n                        value={details.metadata.user_ip}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                    \n                    {details.metadata.user_agent && (\n                      <DetailRow\n                        label=\"User Agent\"\n                        value={details.metadata.user_agent}\n                        onCopy={handleCopyValue}\n                        truncate\n                      />\n                    )}\n                    \n                    {details.metadata.external_id && (\n                      <DetailRow\n                        label=\"External ID\"\n                        value={details.metadata.external_id}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                    \n                    {details.metadata.request_source && (\n                      <DetailRow\n                        label=\"Request Source\"\n                        value={details.metadata.request_source}\n                        onCopy={handleCopyValue}\n                      />\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\ninterface DetailRowProps {\n  label: string;\n  value: string;\n  onCopy: (value: string) => void;\n  truncate?: boolean;\n}\n\nconst DetailRow: React.FC<DetailRowProps> = ({ label, value, onCopy, truncate }) => {\n  return (\n    <div className=\"flex items-start justify-between gap-2 text-xs\">\n      <span className=\"text-muted-foreground font-medium whitespace-nowrap\">{label}:</span>\n      <div className=\"flex items-center gap-1 flex-1 min-w-0\">\n        <span \n          className={cn(\n            \"text-foreground break-all\",\n            truncate && \"truncate\"\n          )}\n          title={truncate ? value : undefined}\n        >\n          {value}\n        </span>\n        <button\n          onClick={() => onCopy(value)}\n          className=\"p-1 text-muted-foreground hover:text-foreground transition-colors flex-shrink-0\"\n          title=\"Copy value\"\n        >\n          <Copy className=\"w-3 h-3\" />\n        </button>\n      </div>\n    </div>\n  );\n};","/**\n * Message Component\n * \n * Displays individual chat messages with rich formatting support.\n * \n * Features:\n * - Markdown rendering with GitHub Flavored Markdown\n * - Syntax highlighting for code blocks\n * - Copy functionality for code and messages\n * - User feedback (thumbs up/down)\n * - Citation display and interaction\n * - Animated entrance and streaming cursor\n * - Different layouts for user vs assistant messages\n * \n * Customization:\n * - Modify avatar styles in the component\n * - Adjust markdown prose styles\n * - Customize code block themes (currently using oneDark)\n * - Change animation settings\n */\n\n'use client';\n\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { motion } from 'framer-motion';\nimport { \n  Bot, \n  User, \n  Copy, \n  ThumbsUp, \n  ThumbsDown, \n  RotateCw,\n  ExternalLink \n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { MessageProps, Citation, ChatMessage } from '@/types';\nimport { cn, copyToClipboard, formatTimestamp } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { AgentAvatar, UserAvatar } from '@/components/ui/avatar';\nimport { CitationList } from './CitationList';\nimport { MessageDetails } from './MessageDetails';\nimport { useMessageStore } from '@/store/messages';\nimport { useConversationStore } from '@/store/conversations';\n\ninterface CodeBlockProps {\n  /** Programming language for syntax highlighting */\n  language: string;\n  /** Code content to display */\n  value: string;\n}\n\n/**\n * CodeBlock Component\n * \n * Renders code with syntax highlighting and a copy button.\n * Uses react-syntax-highlighter with the oneDark theme.\n * Copy button appears on hover.\n */\nconst CodeBlock: React.FC<CodeBlockProps> = ({ language, value }) => {\n  const [copied, setCopied] = useState(false);\n  \n  const handleCopy = async () => {\n    const success = await copyToClipboard(value);\n    if (success) {\n      setCopied(true);\n      toast.success('Code copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    }\n  };\n\n  return (\n    <div className=\"relative group\">\n      <div className=\"absolute right-2 top-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n        <Button\n          size=\"sm\"\n          variant=\"ghost\"\n          onClick={handleCopy}\n          className=\"h-6 px-2 text-xs bg-foreground text-background hover:bg-foreground/90\"\n        >\n          {copied ? 'Copied!' : 'Copy'}\n        </Button>\n      </div>\n      <SyntaxHighlighter\n        language={language}\n        style={oneDark}\n        customStyle={{\n          margin: 0,\n          borderRadius: '0.5rem',\n          fontSize: '0.875rem',\n        }}\n      >\n        {value}\n      </SyntaxHighlighter>\n    </div>\n  );\n};\n\n/**\n * StreamingCursor Component\n * \n * Animated blinking cursor shown at the end of streaming messages\n * to indicate the AI is still generating content\n */\nconst StreamingCursor: React.FC = () => (\n  <span className=\"inline-block w-0.5 h-4 bg-foreground animate-blink ml-0.5 align-middle\" />\n);\n\ninterface MessageContentProps {\n  /** Markdown content to render */\n  content: string;\n  /** Whether the message is currently being streamed */\n  isStreaming?: boolean;\n}\n\n/**\n * MessageContent Component\n * \n * Renders message content with full markdown support including:\n * - Headers, lists, tables (via GFM)\n * - Inline and block code with syntax highlighting\n * - Links that open in new tabs\n * - Streaming cursor when content is being generated\n */\nconst MessageContent: React.FC<MessageContentProps> = ({ content, isStreaming }) => {\n  // Remove <CONTEXT> and </CONTEXT> tags from the content\n  const cleanedContent = content.replace(/<CONTEXT>|<\\/CONTEXT>/g, '').trim();\n  \n  return (\n    <div className=\"prose prose-sm max-w-none text-foreground\">\n      <ReactMarkdown\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || '');\n            const isInline = !match;\n            return !isInline && match ? (\n              <CodeBlock\n                language={match[1]}\n                value={String(children).replace(/\\n$/, '')}\n                {...props}\n              />\n            ) : (\n              <code className=\"px-1 py-0.5 rounded bg-muted text-sm font-medium\" {...props}>\n                {children}\n              </code>\n            );\n          },\n          a({ href, children }) {\n            return (\n              <a\n                href={href}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-brand-600 hover:text-brand-700 no-underline hover:underline inline-flex items-center gap-1\"\n              >\n                {children}\n                <ExternalLink className=\"w-3 h-3\" />\n              </a>\n            );\n          },\n        }}\n      >\n        {cleanedContent}\n      </ReactMarkdown>\n      {isStreaming && <StreamingCursor />}\n    </div>\n  );\n};\n\ninterface MessageActionsProps {\n  /** The message object containing content and metadata */\n  message: ChatMessage;\n  /** Handler for user feedback */\n  onFeedback?: (feedback: 'like' | 'dislike') => void;\n  /** Whether this is the last assistant message */\n  isLastAssistant?: boolean;\n}\n\n/**\n * MessageActions Component\n * \n * Action buttons for assistant messages:\n * - Copy message content\n * - Thumbs up/down feedback\n * - Regenerate response (placeholder)\n * \n * Only visible on hover for cleaner UI\n */\nconst MessageActions: React.FC<MessageActionsProps> = ({ message, onFeedback, isLastAssistant = false }) => {\n  const [feedback, setFeedback] = useState<'like' | 'dislike' | null>(\n    message.feedback || null\n  );\n\n  const handleCopy = async () => {\n    const success = await copyToClipboard(message.content);\n    if (success) {\n      toast.success('Message copied to clipboard');\n    }\n  };\n\n  const handleFeedback = (type: 'like' | 'dislike') => {\n    setFeedback(type);\n    onFeedback?.(type);\n    toast.success('Thanks for your feedback!');\n  };\n\n  const regenerateLastResponse = useMessageStore(state => state.regenerateLastResponse);\n  \n  const handleRegenerate = async () => {\n    try {\n      await regenerateLastResponse();\n    } catch (error) {\n      // Error handling is done in the store, so we don't need to do anything here\n      console.error('Failed to regenerate response:', error);\n    }\n  };\n\n  return (\n    <div className=\"mt-3 flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleCopy}\n        className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n        title=\"Copy message\"\n      >\n        <Copy className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('like')}\n        className={cn(\n          'h-8 w-8 text-muted-foreground hover:text-foreground',\n          feedback === 'like' && 'text-success hover:text-success/90'\n        )}\n        title=\"Good response\"\n      >\n        <ThumbsUp className=\"h-4 w-4\" />\n      </Button>\n      \n      <Button\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={() => handleFeedback('dislike')}\n        className={cn(\n          'h-8 w-8 text-muted-foreground hover:text-foreground',\n          feedback === 'dislike' && 'text-destructive hover:text-destructive/90'\n        )}\n        title=\"Bad response\"\n      >\n        <ThumbsDown className=\"h-4 w-4\" />\n      </Button>\n      \n      {isLastAssistant && (\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={handleRegenerate}\n          className=\"h-8 w-8 text-muted-foreground hover:text-foreground\"\n          title=\"Regenerate response\"\n        >\n          <RotateCw className=\"h-4 w-4\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\n/**\n * Message Component - Main Export\n * \n * Renders a complete message with avatar, content, citations, and actions.\n * \n * Layout:\n * - User messages: White background, user avatar, plain text\n * - Assistant messages: Gray background, bot avatar, markdown content\n * \n * Features:\n * - Smooth entrance animation with Framer Motion\n * - Hover effects for action visibility\n * - Status indicators (sending, error)\n * - Timestamp display\n * - Citation list integration\n * \n * @param message - The message data to display\n * @param isStreaming - Whether this message is being streamed\n * @param isLast - Whether this is the last message (affects scrolling)\n * @param onCitationClick - Handler for citation interactions\n * @param onFeedback - Handler for user feedback\n * @param className - Additional CSS classes\n */\nexport const Message: React.FC<MessageProps> = ({ \n  message,\n  agent,\n  isStreaming = false, \n  isLast = false,\n  onCitationClick,\n  onPreviewClick,\n  onFeedback,\n  className \n}) => {\n  const isUser = message.role === 'user';\n  \n  // Get messages from the conversation to check if this is the last assistant message\n  const messages = useMessageStore(state => {\n    const conversationStore = useConversationStore.getState();\n    const currentConversation = conversationStore.currentConversation;\n    if (!currentConversation) return [];\n    return state.getMessagesForConversation(currentConversation.id.toString());\n  });\n  \n  // Check if this is the last assistant message\n  const isLastAssistant = !isUser && messages.length > 0 && \n    messages[messages.length - 1].role === 'assistant' &&\n    messages[messages.length - 1].id === message.id;\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n      className={cn(\n        'group relative px-4 py-6 transition-colors',\n        isUser ? 'bg-background' : 'bg-muted border-y border-border',\n        'hover:bg-opacity-80',\n        className\n      )}\n    >\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"flex-shrink-0\">\n          {isUser ? (\n            <UserAvatar \n              size=\"md\" \n              className=\"bg-secondary\"\n            />\n          ) : (\n            <AgentAvatar \n              agent={agent}\n              size=\"md\"\n              className=\"bg-background border border-border\"\n            />\n          )}\n        </div>\n        \n        {/* Content */}\n        <div className=\"flex-1 overflow-hidden\">\n          {/* Message Status */}\n          {message.status && message.status !== 'sent' && (\n            <div className=\"mb-2 text-xs text-muted-foreground\">\n              {message.status === 'sending' && 'Sending...'}\n              {message.status === 'error' && (\n                <span className=\"text-red-500\">Failed to send</span>\n              )}\n            </div>\n          )}\n          \n          {/* Message Content */}\n          {isUser ? (\n            <p className=\"text-foreground whitespace-pre-wrap\">{message.content}</p>\n          ) : (\n            <MessageContent \n              content={message.content} \n              isStreaming={isStreaming}\n            />\n          )}\n          \n          {/* Citations */}\n          {message.citations && message.citations.length > 0 && (\n            <CitationList \n              citations={message.citations}\n              onCitationClick={onCitationClick}\n              onPreviewClick={onPreviewClick}\n            />\n          )}\n          \n          {/* Timestamp */}\n          <div className=\"mt-2 text-xs text-muted-foreground\">\n            {formatTimestamp(message.timestamp)}\n          </div>\n          \n          {/* Message Details (hidden by default) */}\n          <MessageDetails details={message.details} />\n          \n          {/* Actions */}\n          {!isUser && !isStreaming && (\n            <MessageActions \n              message={message}\n              onFeedback={onFeedback}\n              isLastAssistant={isLastAssistant}\n            />\n          )}\n        </div>\n      </div>\n    </motion.div>\n  );\n};","/**\n * Demo Mode Context\n * \n * Provides runtime demo mode status throughout the app\n */\n\n'use client';\n\nimport React, { createContext, useContext, useEffect, useState } from 'react';\n\ninterface DemoModeContextType {\n  isRuntimeDemoMode: boolean;\n  deploymentMode: 'demo' | 'production' | null;\n  isInitialized: boolean;\n  isFreeTrialMode: boolean;\n}\n\nconst DemoModeContext = createContext<DemoModeContextType>({\n  isRuntimeDemoMode: false,\n  deploymentMode: null,\n  isInitialized: false,\n  isFreeTrialMode: false,\n});\n\nexport const useDemoModeContext = () => {\n  const context = useContext(DemoModeContext);\n  if (!context) {\n    throw new Error('useDemoModeContext must be used within DemoModeProvider');\n  }\n  return context;\n};\n\ninterface DemoModeContextProviderProps {\n  children: React.ReactNode;\n}\n\nexport function DemoModeContextProvider({ children }: DemoModeContextProviderProps) {\n  const [deploymentMode, setDeploymentMode] = useState<'demo' | 'production' | null>(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isFreeTrialMode, setIsFreeTrialMode] = useState(false);\n\n  useEffect(() => {\n    // Get the runtime deployment mode from localStorage\n    const mode = localStorage.getItem('customgpt.deploymentMode') as 'demo' | 'production' | null;\n    const freeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n    setDeploymentMode(mode);\n    setIsFreeTrialMode(freeTrialFlag === 'true');\n    setIsInitialized(true);\n\n    // Listen for storage changes\n    const handleStorageChange = () => {\n      const newMode = localStorage.getItem('customgpt.deploymentMode') as 'demo' | 'production' | null;\n      const newFreeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n      setDeploymentMode(newMode);\n      setIsFreeTrialMode(newFreeTrialFlag === 'true');\n    };\n\n    window.addEventListener('storage', handleStorageChange);\n    \n    // Also listen for custom events for same-window updates\n    window.addEventListener('deploymentModeChanged', handleStorageChange);\n\n    return () => {\n      window.removeEventListener('storage', handleStorageChange);\n      window.removeEventListener('deploymentModeChanged', handleStorageChange);\n    };\n  }, []);\n\n  const value: DemoModeContextType = {\n    isRuntimeDemoMode: deploymentMode === 'demo',\n    deploymentMode,\n    isInitialized,\n    isFreeTrialMode,\n  };\n\n  return (\n    <DemoModeContext.Provider value={value}>\n      {children}\n    </DemoModeContext.Provider>\n  );\n}","/**\n * Loading Components\n * \n * Reusable loading indicators for consistent loading states across the app.\n * Includes spinner, skeleton loaders, and full-page loading states.\n */\n\nimport React from 'react';\nimport { cn } from '@/lib/utils';\nimport { Loader2 } from 'lucide-react';\n\ninterface SpinnerProps {\n  /** Size of the spinner */\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  /** Additional CSS classes */\n  className?: string;\n  /** Label for accessibility */\n  label?: string;\n}\n\n/**\n * Spinner Component\n * \n * Animated spinning loader for inline and overlay loading states\n */\nexport const Spinner: React.FC<SpinnerProps> = ({ \n  size = 'md', \n  className,\n  label = 'Loading...'\n}) => {\n  const sizeClasses = {\n    sm: 'h-4 w-4',\n    md: 'h-6 w-6',\n    lg: 'h-8 w-8',\n    xl: 'h-12 w-12'\n  };\n\n  return (\n    <div className=\"relative inline-flex\">\n      <Loader2 \n        className={cn(\n          'animate-spin text-primary transition-all duration-200',\n          sizeClasses[size],\n          className\n        )}\n        aria-label={label}\n      />\n      {/* Subtle glow effect */}\n      <div className={cn(\n        'absolute inset-0 animate-pulse rounded-full bg-primary/20 blur-xl',\n        sizeClasses[size]\n      )} />\n    </div>\n  );\n};\n\ninterface SkeletonProps {\n  /** Additional CSS classes */\n  className?: string;\n  /** Whether to animate the skeleton */\n  animate?: boolean;\n}\n\n/**\n * Skeleton Component\n * \n * Placeholder loading state for content\n */\nexport const Skeleton: React.FC<SkeletonProps> = ({ \n  className,\n  animate = true\n}) => {\n  return (\n    <div\n      className={cn(\n        'relative overflow-hidden rounded-lg bg-muted',\n        animate && 'shimmer',\n        className\n      )}\n    >\n      {animate && (\n        <div className=\"absolute inset-0 -translate-x-full animate-[shimmer_2s_infinite] bg-gradient-to-r from-transparent via-white/10 to-transparent\" />\n      )}\n    </div>\n  );\n};\n\ninterface LoadingDotsProps {\n  /** Size of the dots */\n  size?: 'sm' | 'md' | 'lg';\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * LoadingDots Component\n * \n * Three animated dots for typing/processing indicators\n */\nexport const LoadingDots: React.FC<LoadingDotsProps> = ({ \n  size = 'md',\n  className \n}) => {\n  const sizeClasses = {\n    sm: 'h-1.5 w-1.5',\n    md: 'h-2 w-2',\n    lg: 'h-2.5 w-2.5'\n  };\n\n  return (\n    <div className={cn('flex items-center space-x-1.5', className)}>\n      {[0, 1, 2].map((index) => (\n        <div\n          key={index}\n          className={cn(\n            'rounded-full bg-primary/60',\n            'animate-[pulse_1.4s_ease-in-out_infinite]',\n            sizeClasses[size]\n          )}\n          style={{\n            animationDelay: `${index * 0.15}s`,\n            animationFillMode: 'both',\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\ninterface LoadingOverlayProps {\n  /** Whether the overlay is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Whether to blur the background */\n  blur?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * LoadingOverlay Component\n * \n * Full-screen or container overlay with loading indicator\n */\nexport const LoadingOverlay: React.FC<LoadingOverlayProps> = ({ \n  visible,\n  message,\n  blur = true,\n  className\n}) => {\n  if (!visible) return null;\n\n  return (\n    <div className={cn(\n      'absolute inset-0 z-50 flex items-center justify-center',\n      'bg-background/60 transition-all duration-300',\n      blur && 'backdrop-blur-md',\n      'animate-in fade-in-0 duration-200',\n      className\n    )}>\n      <div className={cn(\n        'flex flex-col items-center space-y-4 p-6',\n        'bg-background/90 backdrop-blur-sm',\n        'rounded-xl border border-border/50',\n        'shadow-xl',\n        'animate-in zoom-in-95 duration-300'\n      )}>\n        <Spinner size=\"lg\" />\n        {message && (\n          <p className=\"text-sm text-muted-foreground font-medium\">{message}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface MessageSkeletonProps {\n  /** Whether this represents an assistant message */\n  isAssistant?: boolean;\n  /** Number of lines to show */\n  lines?: number;\n}\n\n/**\n * MessageSkeleton Component\n * \n * Skeleton loader specifically for chat messages\n */\nexport const MessageSkeleton: React.FC<MessageSkeletonProps> = ({ \n  isAssistant = false,\n  lines = 3\n}) => {\n  return (\n    <div className={cn(\n      'flex gap-3 p-4',\n      isAssistant ? 'bg-muted' : 'bg-background'\n    )}>\n      {/* Avatar */}\n      <Skeleton className=\"h-8 w-8 rounded-full flex-shrink-0\" />\n      \n      {/* Message content */}\n      <div className=\"flex-1 space-y-2\">\n        {Array.from({ length: lines }).map((_, i) => (\n          <Skeleton \n            key={i}\n            className={cn(\n              'h-4',\n              i === lines - 1 ? 'w-3/4' : 'w-full'\n            )}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\ninterface ConversationSkeletonProps {\n  /** Number of conversation items to show */\n  count?: number;\n}\n\n/**\n * ConversationSkeleton Component\n * \n * Skeleton loader for conversation list items\n */\nexport const ConversationSkeleton: React.FC<ConversationSkeletonProps> = ({ \n  count = 3 \n}) => {\n  return (\n    <div className=\"space-y-2 p-2\">\n      {Array.from({ length: count }).map((_, i) => (\n        <div key={i} className=\"p-3 rounded-lg\">\n          <Skeleton className=\"h-4 w-3/4 mb-2\" />\n          <Skeleton className=\"h-3 w-1/2\" />\n        </div>\n      ))}\n    </div>\n  );\n};\n\ninterface LoadingButtonProps {\n  /** Whether the button is in loading state */\n  loading: boolean;\n  /** Button content when not loading */\n  children: React.ReactNode;\n  /** Loading text to display */\n  loadingText?: string;\n  /** Additional CSS classes */\n  className?: string;\n  /** Other button props */\n  [key: string]: any;\n}\n\n/**\n * LoadingButton Component\n * \n * Button with integrated loading state\n */\nexport const LoadingButton: React.FC<LoadingButtonProps> = ({ \n  loading,\n  children,\n  loadingText = 'Loading...',\n  className,\n  disabled,\n  ...props\n}) => {\n  return (\n    <button\n      className={cn(\n        'relative',\n        loading && 'cursor-not-allowed opacity-70',\n        className\n      )}\n      disabled={disabled || loading}\n      {...props}\n    >\n      {loading ? (\n        <span className=\"flex items-center justify-center gap-2\">\n          <Spinner size=\"sm\" />\n          <span>{loadingText}</span>\n        </span>\n      ) : (\n        children\n      )}\n    </button>\n  );\n};\n\ninterface ScreenLoadingProps {\n  /** Whether the screen loading is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Optional icon to show with the loading message */\n  icon?: React.ReactNode;\n  /** Background opacity (0-100) */\n  opacity?: number;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * ScreenLoading Component\n * \n * Full-screen loading overlay for page/screen transitions\n * with customizable message and icon\n */\nexport const ScreenLoading: React.FC<ScreenLoadingProps> = ({\n  visible,\n  message = 'Loading...',\n  icon,\n  opacity = 95,\n  className\n}) => {\n  if (!visible) return null;\n\n  return (\n    <div className={cn(\n      'fixed inset-0 z-[100] flex items-center justify-center',\n      'bg-background/90 backdrop-blur-lg',\n      'transition-all duration-500',\n      'animate-in fade-in-0',\n      className\n    )}>\n      <div className={cn(\n        'flex flex-col items-center space-y-6 p-10',\n        'animate-in zoom-in-95 slide-in-from-bottom-4 duration-500'\n      )}>\n        <div className=\"relative\">\n          {icon ? (\n            <div className={cn(\n              'flex items-center justify-center w-20 h-20',\n              'bg-primary/10 rounded-2xl',\n              'shadow-lg shadow-primary/20',\n              'animate-pulse'\n            )}>\n              {icon}\n            </div>\n          ) : (\n            <Spinner size=\"xl\" />\n          )}\n        </div>\n        {message && (\n          <div className=\"text-center space-y-2\">\n            <p className=\"text-lg font-semibold text-foreground\">{message}</p>\n            <LoadingDots size=\"md\" />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface PageLoadingProps {\n  /** Whether the page loading is visible */\n  visible: boolean;\n  /** Loading message to display */\n  message?: string;\n  /** Show skeleton content instead of spinner */\n  showSkeleton?: boolean;\n  /** Additional CSS classes */\n  className?: string;\n}\n\n/**\n * PageLoading Component\n * \n * In-page loading state for content areas\n * with optional skeleton loading\n */\nexport const PageLoading: React.FC<PageLoadingProps> = ({\n  visible,\n  message = 'Loading page...',\n  showSkeleton = false,\n  className\n}) => {\n  if (!visible) return null;\n\n  if (showSkeleton) {\n    return (\n      <div className={cn('space-y-4 p-6', className)}>\n        <div className=\"space-y-3\">\n          <Skeleton className=\"h-8 w-1/3\" />\n          <Skeleton className=\"h-4 w-2/3\" />\n          <Skeleton className=\"h-4 w-1/2\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <div key={i} className=\"space-y-3\">\n              <Skeleton className=\"h-32 w-full rounded-lg\" />\n              <Skeleton className=\"h-4 w-3/4\" />\n              <Skeleton className=\"h-3 w-1/2\" />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\n      'flex flex-col items-center justify-center p-12',\n      className\n    )}>\n      <Spinner size=\"lg\" />\n      <p className=\"mt-4 text-gray-600\">{message}</p>\n    </div>\n  );\n};","\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 6, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden\",\n        \"rounded-lg px-3.5 py-2\",\n        \"bg-gray-900 dark:bg-gray-100 backdrop-blur-sm\",\n        \"text-xs font-medium text-white dark:text-gray-900\",\n        \"shadow-lg shadow-black/20\",\n        \"border border-gray-800 dark:border-gray-200\",\n        \"animate-in fade-in-0 zoom-in-95\",\n        \"data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95\",\n        \"data-[side=bottom]:slide-in-from-top-2\",\n        \"data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2\",\n        \"data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    >\n      {props.children}\n      <TooltipPrimitive.Arrow \n        className=\"fill-gray-900 dark:fill-gray-100\"\n        width={8}\n        height={4}\n      />\n    </TooltipPrimitive.Content>\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }","'use client';\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport { Mic, MicOff, Loader2 } from 'lucide-react';\nimport { toast } from 'sonner';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\n\ninterface SpeechToTextButtonProps {\n  onTranscription: (text: string) => void;\n  onTranscriptionStart?: () => void;\n  onTranscriptionEnd?: () => void;\n  disabled?: boolean;\n  isMobile?: boolean;\n  className?: string;\n}\n\nexport function SpeechToTextButton({ \n  onTranscription, \n  onTranscriptionStart,\n  onTranscriptionEnd,\n  disabled = false, \n  isMobile = false,\n  className \n}: SpeechToTextButtonProps) {\n  const [isRecording, setIsRecording] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [recordingDuration, setRecordingDuration] = useState(0);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n  const recordingTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const durationIntervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  const stopRecording = useCallback(() => {\n    if (mediaRecorderRef.current && mediaRecorderRef.current.state === 'recording') {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      // Don't call onTranscriptionEnd here - let processAudio handle it\n      \n      if (recordingTimeoutRef.current) {\n        clearTimeout(recordingTimeoutRef.current);\n        recordingTimeoutRef.current = null;\n      }\n      \n      if (durationIntervalRef.current) {\n        clearInterval(durationIntervalRef.current);\n        durationIntervalRef.current = null;\n      }\n      \n      setRecordingDuration(0);\n    }\n  }, []);\n\n  const startRecording = useCallback(async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      \n      const mimeType = MediaRecorder.isTypeSupported('audio/webm') \n        ? 'audio/webm' \n        : 'audio/mp4';\n      \n      const mediaRecorder = new MediaRecorder(stream, { mimeType });\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n\n      mediaRecorder.ondataavailable = (event) => {\n        if (event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n        }\n      };\n\n      mediaRecorder.onstop = async () => {\n        const audioBlob = new Blob(audioChunksRef.current, { type: mimeType });\n        stream.getTracks().forEach(track => track.stop());\n        \n        // Process the audio\n        await processAudio(audioBlob);\n      };\n\n      mediaRecorder.start();\n      setIsRecording(true);\n      onTranscriptionStart?.();\n      \n      // Start duration timer\n      const startTime = Date.now();\n      durationIntervalRef.current = setInterval(() => {\n        const elapsed = Math.floor((Date.now() - startTime) / 1000);\n        setRecordingDuration(elapsed);\n      }, 100) as any;\n\n      // Auto-stop recording after 30 seconds\n      recordingTimeoutRef.current = setTimeout(() => {\n        stopRecording();\n        toast.info('Recording stopped after 30 seconds');\n      }, 30000);\n\n    } catch (error) {\n      console.error('Error accessing microphone:', error);\n      toast.error('Unable to access microphone. Please check your permissions.');\n      onTranscriptionEnd?.();\n    }\n  }, [stopRecording, onTranscriptionStart, onTranscriptionEnd]);\n\n  const processAudio = async (audioBlob: Blob) => {\n    setIsProcessing(true);\n\n    try {\n      // Convert blob to base64 for sending\n      const reader = new FileReader();\n      reader.readAsDataURL(audioBlob);\n      \n      reader.onloadend = async () => {\n        const base64Audio = reader.result as string;\n        const base64Data = base64Audio.split(',')[1];\n\n        // Check for demo mode and add appropriate headers\n        const headers: Record<string, string> = {\n          'Content-Type': 'application/json',\n        };\n        \n        // Add deployment mode header\n        const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n        headers['X-Deployment-Mode'] = deploymentMode;\n        \n        // In demo mode, add OpenAI key from window object if available\n        if (deploymentMode === 'demo' && (window as any).__demoOpenAIKey) {\n          headers['X-OpenAI-API-Key'] = (window as any).__demoOpenAIKey;\n        }\n\n        const response = await fetch('/api/proxy/voice/transcribe', {\n          method: 'POST',\n          headers,\n          body: JSON.stringify({\n            audio: base64Data,\n            mimeType: audioBlob.type,\n          }),\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({ error: 'Transcription failed' }));\n          \n          // Check if it's an OpenAI API key error\n          if (response.status === 500 && errorData.error && errorData.error.includes('OpenAI API key')) {\n            toast.error(errorData.error);\n            throw new Error('OpenAI API key not configured');\n          }\n          \n          throw new Error(errorData.error || 'Transcription failed');\n        }\n\n        const data = await response.json();\n        \n        if (data.text) {\n          onTranscription(data.text);\n          toast.success('Speech transcribed successfully');\n        } else {\n          throw new Error('No transcription received');\n        }\n      };\n\n      reader.onerror = () => {\n        throw new Error('Failed to process audio');\n      };\n\n    } catch (error) {\n      console.error('Transcription error:', error);\n      \n      // Don't show duplicate toast for OpenAI API key error\n      if (error instanceof Error && error.message === 'OpenAI API key not configured') {\n        // Toast already shown above\n      } else if (error instanceof Error && error.message) {\n        toast.error(error.message);\n      } else {\n        toast.error('Failed to transcribe speech. Please try again.');\n      }\n    } finally {\n      setIsProcessing(false);\n      onTranscriptionEnd?.();\n    }\n  };\n\n  const handleClick = () => {\n    if (isRecording) {\n      stopRecording();\n    } else {\n      startRecording();\n    }\n  };\n\n  const isActive = isRecording || isProcessing;\n\n  // Format duration as MM:SS\n  const formatDuration = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Button\n            type=\"button\"\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={handleClick}\n            disabled={disabled || isProcessing}\n            className={cn(\n              \"relative text-muted-foreground hover:text-foreground transition-all\",\n              isActive && \"text-red-600 hover:text-red-700\",\n              isRecording && \"animate-pulse bg-red-50 hover:bg-red-100\",\n              className\n            )}\n          >\n            {isProcessing ? (\n              <div className=\"relative\">\n                <Loader2 className={cn(\n                  \"animate-spin\",\n                  isMobile ? \"h-5 w-5\" : \"h-5 w-5\"\n                )} />\n                <span className=\"absolute -bottom-5 left-1/2 -translate-x-1/2 text-[10px] text-muted-foreground whitespace-nowrap\">\n                  Processing...\n                </span>\n              </div>\n            ) : isRecording ? (\n              <div className=\"relative\">\n                <div className=\"absolute inset-0 bg-red-500 rounded-full animate-ping opacity-25\" />\n                <MicOff className={cn(\n                  \"relative z-10\",\n                  isMobile ? \"h-5 w-5\" : \"h-5 w-5\"\n                )} />\n                {/* Recording duration */}\n                {recordingDuration > 0 && (\n                  <span className=\"absolute -bottom-5 left-1/2 -translate-x-1/2 text-[10px] text-red-600 font-medium whitespace-nowrap\">\n                    {formatDuration(recordingDuration)}\n                  </span>\n                )}\n              </div>\n            ) : (\n              <Mic className={cn(isMobile ? \"h-5 w-5\" : \"h-5 w-5\")} />\n            )}\n          </Button>\n        </TooltipTrigger>\n        <TooltipContent>\n          <p>\n            {isProcessing ? 'Processing your speech...' : isRecording ? `Recording... ${formatDuration(recordingDuration)}` : 'Click to start speech-to-text'}\n          </p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n}","'use client';\n\nimport { cn } from '@/lib/utils';\n\ninterface AnimatedVoiceIconProps {\n  className?: string;\n  isActive?: boolean;\n  size?: 'sm' | 'md' | 'lg';\n}\n\nexport function AnimatedVoiceIcon({ \n  className, \n  isActive = false,\n  size = 'md' \n}: AnimatedVoiceIconProps) {\n  const sizeClasses = {\n    sm: 'w-5 h-5',\n    md: 'w-6 h-6',\n    lg: 'w-7 h-7'\n  };\n\n  const barHeights = {\n    sm: ['h-2', 'h-3', 'h-2.5', 'h-3', 'h-2'],\n    md: ['h-3', 'h-4', 'h-3.5', 'h-4', 'h-3'],\n    lg: ['h-3.5', 'h-5', 'h-4.5', 'h-5', 'h-3.5']\n  };\n\n  const bars = size === 'sm' ? barHeights.sm : size === 'md' ? barHeights.md : barHeights.lg;\n\n  return (\n    <div className={cn(\n      'flex items-center justify-center',\n      sizeClasses[size],\n      className\n    )}\n    style={{ gap: '2px' }}>\n      {bars.map((height, index) => (\n        <div\n          key={index}\n          className={cn(\n            'rounded-full transition-all duration-300',\n            height,\n            isActive && 'animate-voice-pulse'\n          )}\n          style={{\n            width: size === 'lg' ? '3px' : size === 'md' ? '2.5px' : '2px',\n            animationDelay: isActive ? `${index * 100}ms` : '0ms',\n            background: isActive \n              ? `linear-gradient(to top, \n                  hsl(${260 + index * 20}, 85%, 55%), \n                  hsl(${320 + index * 20}, 85%, 65%))` \n              : `linear-gradient(to top,\n                  hsl(${260 + index * 15}, 80%, 55%),\n                  hsl(${280 + index * 15}, 80%, 65%))`\n          }}\n        />\n      ))}\n    </div>\n  );\n}","\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-pointer select-none items-center\",\n      \"rounded-md px-3 py-2 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4 transition-transform duration-200 data-[state=open]:rotate-90\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden\",\n      \"rounded-lg border border-gray-200/50 dark:border-gray-800/30\",\n      \"bg-background/95 backdrop-blur-md\",\n      \"p-1.5 text-foreground\",\n      \"shadow-lg shadow-black/10\",\n      \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n      \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n      \"data-[side=bottom]:slide-in-from-top-2\",\n      \"data-[side=left]:slide-in-from-right-2\",\n      \"data-[side=right]:slide-in-from-left-2\",\n      \"data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 6, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden\",\n        \"rounded-lg border border-gray-200/50 dark:border-gray-800/30\",\n        \"bg-background/95 backdrop-blur-md\",\n        \"p-1.5 text-foreground\",\n        \"shadow-lg shadow-black/10\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n        \"data-[side=bottom]:slide-in-from-top-2\",\n        \"data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2\",\n        \"data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer select-none items-center\",\n      \"rounded-md px-3 py-2 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground hover:scale-[0.98]\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      \"active:scale-[0.96]\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer select-none items-center\",\n      \"rounded-md py-2 pl-8 pr-3 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-4 w-4 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-3.5 w-3.5 animate-in zoom-in-0 duration-200\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-pointer select-none items-center\",\n      \"rounded-md py-2 pl-8 pr-3 text-sm outline-none\",\n      \"transition-all duration-200\",\n      \"hover:bg-accent/80 hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-4 w-4 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2.5 w-2.5 fill-current animate-in zoom-in-0 duration-200\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-3 py-2 text-xs font-semibold\",\n      \"text-muted-foreground uppercase tracking-wider\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\n      \"-mx-1.5 my-1.5 h-px\",\n      \"bg-gradient-to-r from-transparent via-gray-200/50 dark:via-gray-800/20 to-transparent\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-[10px] tracking-widest\",\n        \"text-muted-foreground/70\",\n        \"font-medium uppercase\",\n        \"px-1.5 py-0.5 rounded\",\n        \"bg-muted/50\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}","/**\n * ChatInput Component\n * \n * Rich input field for sending messages and uploading files.\n * \n * Features:\n * - Auto-expanding textarea (up to 200px height)\n * - File upload with drag-and-drop support\n * - Speech-to-text transcription using OpenAI Whisper\n * - File type and size validation\n * - Progress tracking for uploads\n * - Character count display\n * - Keyboard shortcuts (Enter to send, Shift+Enter for newline)\n * - Animated file chips and drag overlay\n * \n * Customization:\n * - Modify CONSTANTS in utils for file limits\n * - Adjust max textarea height (line 144)\n * - Customize accepted file types\n * - Style the drag overlay and file chips\n */\n\n'use client';\n\nimport React, { useState, useRef, useCallback, KeyboardEvent, FormEvent, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Send, \n  Paperclip, \n  X,\n  Upload,\n  AlertCircle,\n  ChevronDown,\n  Settings,\n  Sparkles,\n  Brain,\n  Zap,\n  MessageSquare,\n  User,\n  Bot,\n  SlidersHorizontal\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { InputProps, FileUpload, AgentSettings } from '@/types';\nimport { useDemoModeContext } from '@/contexts/DemoModeContext';\nimport { cn, formatFileSize, getFileIcon, isFileTypeAllowed, generateId, CONSTANTS } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { Spinner } from '@/components/ui/loading';\nimport { SpeechToTextButton } from '@/components/voice/SpeechToTextButton';\nimport { AnimatedVoiceIcon } from '@/components/voice/AnimatedVoiceIcon';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n  DropdownMenuLabel,\n} from '@/components/ui/dropdown-menu';\nimport { useAgentStore } from '@/store/agents';\nimport { useChatSettingsStore } from '@/store/chat-settings';\nimport { getClient } from '@/lib/api/client';\n\ninterface FileChipProps {\n  /** File upload object with metadata */\n  file: FileUpload;\n  /** Handler to remove this file */\n  onRemove: () => void;\n}\n\n/**\n * FileChip Component\n * \n * Displays an uploaded or uploading file with:\n * - File icon based on type\n * - Name and size\n * - Upload progress bar\n * - Remove button\n * - Error state indication\n */\nconst FileChip: React.FC<FileChipProps> = ({ file, onRemove }) => {\n  const fileIcon = getFileIcon(file.type);\n  \n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.9 }}\n      animate={{ opacity: 1, scale: 1 }}\n      exit={{ opacity: 0, scale: 0.9 }}\n      className=\"flex items-center gap-2 px-3 py-1.5 bg-muted hover:bg-accent rounded-lg transition-colors\"\n    >\n      <div className=\"text-muted-foreground\">{fileIcon}</div>\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"text-sm font-medium text-foreground truncate\">\n          {file.name}\n        </div>\n        <div className=\"text-xs text-muted-foreground flex items-center gap-2\">\n          <span>{formatFileSize(file.size)}</span>\n          {file.status === 'uploading' && (\n            <>\n              <span>•</span>\n              <span>{file.progress}%</span>\n            </>\n          )}\n          {file.status === 'error' && (\n            <>\n              <span>•</span>\n              <span className=\"text-destructive flex items-center gap-1\">\n                <AlertCircle className=\"w-3 h-3\" />\n                Error\n              </span>\n            </>\n          )}\n        </div>\n      </div>\n      \n      {/* Progress Bar */}\n      {file.status === 'uploading' && (\n        <div className=\"absolute bottom-0 left-0 right-0 h-0.5 bg-muted rounded-b\">\n          <div \n            className=\"h-full bg-brand-500 rounded-b transition-all duration-300\"\n            style={{ width: `${file.progress}%` }}\n          />\n        </div>\n      )}\n      \n      <button\n        onClick={onRemove}\n        className=\"p-0.5 rounded hover:bg-accent-foreground/20 transition-colors\"\n        disabled={file.status === 'uploading'}\n      >\n        <X className=\"w-3 h-3 text-muted-foreground\" />\n      </button>\n    </motion.div>\n  );\n};\n\n\n/**\n * FileUploadButton Component\n * \n * Hidden file input with visible button trigger.\n * Accepts multiple files based on ACCEPTED_FILE_TYPES.\n */\ninterface FileUploadButtonProps {\n  /** Handler called when files are selected */\n  onUpload: (files: File[]) => void;\n  /** Whether the button is disabled */\n  disabled?: boolean;\n  /** Mobile optimization mode */\n  isMobile?: boolean;\n}\n\nconst FileUploadButton: React.FC<FileUploadButtonProps> = ({ onUpload, disabled, isMobile = false }) => {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  \n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n  \n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    if (files.length > 0) {\n      onUpload(files);\n      e.target.value = '';\n    }\n  };\n  \n  return (\n    <>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        multiple\n        accept={CONSTANTS.ACCEPTED_FILE_TYPES.join(',')}\n        onChange={handleChange}\n        className=\"hidden\"\n      />\n      <Button\n        type=\"button\"\n        size=\"icon\"\n        variant=\"ghost\"\n        onClick={handleClick}\n        disabled={disabled}\n        className={cn(\n          \"text-muted-foreground hover:text-foreground relative z-10\",\n          isMobile ? \"h-10 w-10 min-w-[40px]\" : \"h-9 w-9\"\n        )}\n        title=\"Upload files\"\n      >\n        <Paperclip className={cn(isMobile ? \"h-5 w-5\" : \"h-4 w-4\")} />\n      </Button>\n    </>\n  );\n};\n\n// Configuration options\nconst RESPONSE_SOURCES = [\n  { value: 'own_content', label: 'Content', description: 'Uses only your uploaded content', icon: MessageSquare },\n  { value: 'openai_content', label: 'AI + Content', description: 'Combines AI knowledge with your content', icon: Brain },\n  { value: 'default', label: 'Default', description: 'Uses the default agent setting', icon: Settings },\n] as const;\n\nconst CHATBOT_MODELS = [\n  { value: 'gpt-4-o', label: 'GPT-4', description: 'Most capable model', icon: Brain, capabilities: ['optimal-choice', 'advanced-reasoning', 'complex-tasks'] },\n  { value: 'gpt-4-1', label: 'GPT-4.1', description: 'Latest GPT-4 version', icon: Sparkles, capabilities: ['optimal-choice', 'advanced-reasoning', 'complex-tasks'] },\n  { value: 'gpt-4o-mini', label: 'GPT-4 Mini', description: 'Faster, good for most tasks', icon: Zap, capabilities: ['fastest-responses', 'optimal-choice'] },\n  { value: 'gpt-4-1-mini', label: 'GPT-4.1 Mini', description: 'Fast and efficient', icon: Zap, capabilities: ['fastest-responses', 'optimal-choice'] },\n  { value: 'claude-3-sonnet', label: 'Claude 3', description: 'Balanced performance', icon: Brain, capabilities: ['optimal-choice', 'advanced-reasoning'] },\n  { value: 'claude-3.5-sonnet', label: 'Claude 3.5', description: 'Advanced reasoning', icon: Sparkles, capabilities: ['optimal-choice', 'advanced-reasoning', 'complex-tasks'] },\n] as const;\n\nconst COMMON_PERSONAS = [\n  { value: 'professional', label: 'Professional', description: 'Formal responses', icon: Bot },\n  { value: 'friendly', label: 'Friendly', description: 'Conversational tone', icon: User },\n  { value: 'technical', label: 'Technical', description: 'Technical explanations', icon: Brain },\n  { value: 'creative', label: 'Creative', description: 'Imaginative responses', icon: Sparkles },\n  { value: 'educator', label: 'Teacher', description: 'Step-by-step guidance', icon: Bot },\n  { value: 'custom', label: 'Custom', description: 'Your own instructions', icon: Settings },\n] as const;\n\nconst AGENT_CAPABILITIES = [\n  { value: 'fastest-responses', label: 'Fastest', description: 'Quick answers', icon: Zap, enterprise: true },\n  { value: 'optimal-choice', label: 'Optimal', description: 'Balanced', icon: Settings, enterprise: false },\n  { value: 'advanced-reasoning', label: 'Advanced', description: 'Complex tasks', icon: Brain, enterprise: true },\n  { value: 'complex-tasks', label: 'Complex Reasoning', description: 'Highest quality', icon: Sparkles, enterprise: true },\n] as const;\n\n/**\n * ChatInput Component - Main Export\n * \n * Complete chat input with message composition and file upload.\n * \n * Props:\n * @param onSend - Handler called with message content and files\n * @param disabled - Disables input during message sending\n * @param placeholder - Placeholder text for the textarea\n * @param maxLength - Maximum message length (default from CONSTANTS)\n * @param className - Additional CSS classes\n * @param onVoiceClick - Handler for voice mode button click\n * \n * State Management:\n * - input: Current message text\n * - files: Array of uploaded/uploading files\n * - isDragOver: Drag-and-drop state\n * \n * @example\n * <ChatInput \n *   onSend={(message, files) => handleSend(message, files)}\n *   disabled={isLoading}\n *   onVoiceClick={() => setVoiceModalOpen(true)}\n * />\n */\nexport const ChatInput: React.FC<InputProps> = ({ \n  onSend,\n  disabled = false,\n  placeholder = \"Send a message...\",\n  maxLength = CONSTANTS.MAX_MESSAGE_LENGTH,\n  className,\n  onVoiceClick,\n  isMobile = false,\n  mode = 'standalone'\n}) => {\n  const [input, setInput] = useState('');\n  const [files, setFiles] = useState<FileUpload[]>([]);\n  const [isTranscribing, setIsTranscribing] = useState(false);\n  const [isLoadingSettings, setIsLoadingSettings] = useState(false);\n  const [showSettings, setShowSettings] = useState(false);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n  \n  // Get free trial mode status\n  const { isFreeTrialMode } = useDemoModeContext();\n  \n  // Get stores\n  const { currentAgent } = useAgentStore();\n  const { getSettings, updateSettings: updateLocalSettings } = useChatSettingsStore();\n  \n  // Get settings for current agent\n  const settings = currentAgent?.id ? getSettings(currentAgent.id) : {\n    response_source: 'own_content',\n    chatbot_model: 'gpt-4-o',\n    custom_persona: 'professional',\n    agent_capability: 'optimal-choice',\n  };\n  \n  const loadAgentSettings = useCallback(async () => {\n    if (!currentAgent?.id) return;\n\n    try {\n      const client = getClient();\n      const response = await client.getAgentSettings(currentAgent.id);\n      \n      if (response?.data) {\n        const loadedSettings = {\n          response_source: response.data.response_source || 'own_content',\n          chatbot_model: response.data.chatbot_model || 'gpt-4-o',\n          custom_persona: response.data.custom_persona || 'professional',\n          agent_capability: response.data.agent_capability || 'optimal-choice',\n        };\n        updateLocalSettings(currentAgent.id, loadedSettings);\n      }\n    } catch (error) {\n      console.error('Failed to load agent settings:', error);\n    }\n  }, [currentAgent?.id, updateLocalSettings]);\n\n  // Load settings when agent changes\n  useEffect(() => {\n    if (currentAgent?.id) {\n      loadAgentSettings();\n    }\n  }, [currentAgent?.id, loadAgentSettings]);\n\n  const updateSetting = async (key: keyof AgentSettings, value: string) => {\n    if (!currentAgent?.id) return;\n\n    setIsLoadingSettings(true);\n    try {\n      const client = getClient();\n      let updates: Partial<AgentSettings> = { [key]: value };\n      \n      // If changing capability, check if current model is still valid\n      if (key === 'agent_capability') {\n        const validModels = CHATBOT_MODELS.filter(m => m.capabilities.includes(value as any));\n        const currentModelValid = validModels.some(m => m.value === settings.chatbot_model);\n        \n        if (!currentModelValid && validModels.length > 0) {\n          // Switch to first available model for new capability\n          updates.chatbot_model = validModels[0].value;\n          toast.info(`Model changed to ${validModels[0].label} for ${AGENT_CAPABILITIES.find(c => c.value === value)?.label} mode`);\n        }\n      }\n      \n      await client.updateAgentSettings(currentAgent.id, updates);\n      updateLocalSettings(currentAgent.id, updates);\n      toast.success('Setting updated successfully');\n    } catch (error) {\n      console.error('Failed to update setting:', error);\n      toast.error('Failed to update setting');\n    } finally {\n      setIsLoadingSettings(false);\n    }\n  };\n  \n  /**\n   * Auto-resize textarea based on content\n   * Grows up to maxHeight (200px) then scrolls\n   */\n  const adjustTextareaHeight = useCallback(() => {\n    const textarea = textareaRef.current;\n    if (textarea) {\n      textarea.style.height = 'auto';\n      const scrollHeight = textarea.scrollHeight;\n      const maxHeight = 200; // Max height in pixels - customize as needed\n      textarea.style.height = `${Math.min(scrollHeight, maxHeight)}px`;\n    }\n  }, []);\n  \n  // Handle text input changes\n  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    const value = e.target.value;\n    if (value.length <= maxLength) {\n      setInput(value);\n      adjustTextareaHeight();\n    }\n  };\n  \n  // Handle key presses\n  const handleKeyDown = (e: KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit(e as any);\n    }\n  };\n  \n  // Handle form submission\n  const handleSubmit = (e: FormEvent) => {\n    e.preventDefault();\n    \n    if (disabled) return;\n    if (!input.trim() && files.length === 0) return;\n    \n    // Convert FileUpload objects to File objects\n    const fileObjects = files\n      .filter(f => f.status === 'uploaded')\n      .map(f => f.file); // Use the actual File object\n    \n    onSend(input.trim(), fileObjects);\n    \n    // Reset form\n    setInput('');\n    setFiles([]);\n    \n    // Reset textarea height\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n    }\n    \n    // Focus textarea\n    setTimeout(() => {\n      textareaRef.current?.focus();\n    }, 0);\n  };\n  \n  /**\n   * Handle file uploads with validation\n   * Checks file size and type before accepting\n   * Shows toast notifications for validation errors\n   */\n  const handleFileUpload = useCallback((newFiles: File[]) => {\n    const validFiles = newFiles.filter(file => {\n      // Check file size against MAX_FILE_SIZE constant\n      if (file.size > CONSTANTS.MAX_FILE_SIZE) {\n        toast.error(`File \"${file.name}\" is too large. Maximum size is ${formatFileSize(CONSTANTS.MAX_FILE_SIZE)}`);\n        return false;\n      }\n      \n      // Check file type against ACCEPTED_FILE_TYPES\n      if (!isFileTypeAllowed(file.type, CONSTANTS.ACCEPTED_FILE_TYPES)) {\n        toast.error(`File type \"${file.type}\" is not supported`);\n        return false;\n      }\n      \n      return true;\n    });\n    \n    const uploadFiles: FileUpload[] = validFiles.map(file => ({\n      id: generateId(),\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      status: 'uploading',\n      progress: 0,\n      file: file, // Store the actual File object\n    }));\n    \n    setFiles(prev => [...prev, ...uploadFiles]);\n    \n    // Simulate file upload\n    uploadFiles.forEach(uploadFile => {\n      simulateUpload(uploadFile);\n    });\n    \n  }, []);\n  \n  /**\n   * Simulate file upload progress\n   * In production, replace with actual upload logic\n   * Updates progress in 100ms intervals\n   */\n  const simulateUpload = (uploadFile: FileUpload) => {\n    let progress = 0;\n    const interval = setInterval(() => {\n      progress += Math.random() * 20;\n      \n      if (progress >= 100) {\n        progress = 100;\n        clearInterval(interval);\n        \n        // Mark file as uploaded\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, status: 'uploaded' as const, progress: 100 }\n            : f\n        ));\n      } else {\n        // Update progress\n        setFiles(prev => prev.map(f => \n          f.id === uploadFile.id \n            ? { ...f, progress: Math.round(progress) }\n            : f\n        ));\n      }\n    }, 100);\n  };\n  \n  // Remove file\n  const removeFile = (fileId: string) => {\n    setFiles(prev => prev.filter(f => f.id !== fileId));\n  };\n  \n  /**\n   * Dropzone configuration for drag-and-drop\n   * - Accepts files based on ACCEPTED_FILE_TYPES\n   * - Validates file size\n   * - Shows overlay on drag\n   * - Disabled click/keyboard to use custom button\n   */\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop: handleFileUpload,\n    noClick: true, // Use custom button instead\n    noKeyboard: true,\n    accept: CONSTANTS.ACCEPTED_FILE_TYPES.reduce((acc, type) => {\n      acc[type] = [];\n      return acc;\n    }, {} as Record<string, string[]>),\n    maxSize: CONSTANTS.MAX_FILE_SIZE,\n  });\n  \n  const canSend = !disabled && (input.trim() || files.some(f => f.status === 'uploaded'));\n  \n  // Handle speech-to-text transcription\n  const handleTranscription = useCallback((text: string) => {\n    setInput(prevInput => {\n      const newInput = prevInput ? `${prevInput} ${text}` : text;\n      return newInput.length <= maxLength ? newInput : prevInput;\n    });\n    \n    // Adjust textarea height after updating text\n    setTimeout(() => {\n      adjustTextareaHeight();\n    }, 0);\n  }, [maxLength, adjustTextareaHeight]);\n  \n  // Handle transcription start\n  const handleTranscriptionStart = useCallback(() => {\n    setIsTranscribing(true);\n  }, []);\n  \n  // Handle transcription end\n  const handleTranscriptionEnd = useCallback(() => {\n    setIsTranscribing(false);\n  }, []);\n  \n  return (\n    <div \n      {...getRootProps()}\n      className={cn(\n        'relative',\n        isDragActive && 'bg-brand-50',\n        className\n      )}\n    >\n      <input {...getInputProps()} />\n      \n      {/* Drag Overlay */}\n      <AnimatePresence>\n        {isDragActive && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-brand-50 border-2 border-dashed border-brand-300 rounded-lg flex items-center justify-center z-10\"\n          >\n            <div className=\"text-center\">\n              <Upload className=\"w-8 h-8 text-brand-600 mx-auto mb-2\" />\n              <p className=\"text-brand-700 font-medium\">Drop files here to upload</p>\n              <p className=\"text-brand-600 text-sm\">\n                Supports PDF, DOC, TXT, and more\n              </p>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* File Preview */}\n      <AnimatePresence>\n        {files.length > 0 && (\n          <motion.div\n            initial={{ opacity: 0, height: 0 }}\n            animate={{ opacity: 1, height: 'auto' }}\n            exit={{ opacity: 0, height: 0 }}\n            className=\"px-4 pt-3 pb-2 flex flex-wrap gap-2\"\n          >\n            {files.map((file) => (\n              <FileChip\n                key={file.id}\n                file={file}\n                onRemove={() => removeFile(file.id)}\n              />\n            ))}\n          </motion.div>\n        )}\n      </AnimatePresence>\n      \n      {/* Main Input Container */}\n      <div className={cn(\n        \"mx-4 my-3 bg-background border border-border rounded-2xl shadow-sm\",\n        \"focus-within:ring-2 focus-within:ring-brand-500 focus-within:border-transparent transition-all\"\n      )}>\n        {/* Text Input Area */}\n        <form onSubmit={handleSubmit} className=\"relative\">\n          <div className=\"flex items-center p-3 pb-1\">\n            {/* File Upload Button - Hidden in free trial mode and widget/floating modes */}\n            {!isFreeTrialMode && mode === 'standalone' && (\n              <FileUploadButton\n                onUpload={handleFileUpload}\n                disabled={disabled}\n                isMobile={isMobile}\n              />\n            )}\n            \n            {/* Speech to Text Button - Hidden in widget/floating modes */}\n            {mode === 'standalone' && (\n              <SpeechToTextButton\n                onTranscription={handleTranscription}\n                onTranscriptionStart={handleTranscriptionStart}\n                onTranscriptionEnd={handleTranscriptionEnd}\n                disabled={disabled}\n                isMobile={isMobile}\n                className={cn(\n                  \"!h-8 !w-8 !min-w-0 mr-2\",\n                  isMobile && \"!h-9 !w-9\"\n                )}\n              />\n            )}\n            \n            {/* Textarea */}\n            <div className=\"flex-1 relative\">\n              <textarea\n                ref={textareaRef}\n                value={input}\n                onChange={handleInputChange}\n                onKeyDown={handleKeyDown}\n                placeholder={isTranscribing ? '' : placeholder}\n                disabled={disabled}\n                rows={1}\n                className={cn(\n                  'w-full resize-none bg-transparent border-0',\n                  'focus:outline-none focus:ring-0',\n                  'disabled:opacity-50 disabled:cursor-not-allowed',\n                  'placeholder:text-muted-foreground text-foreground',\n                  isMobile \n                    ? 'text-base min-h-[24px] max-h-[120px] placeholder:text-sm' \n                    : 'text-sm min-h-[20px] max-h-[200px]'\n                )}\n                style={{\n                  height: 'auto',\n                  overflowY: input.split('\\n').length > 5 ? 'auto' : 'hidden',\n                }}\n              />\n              \n              {/* Transcribing Animation */}\n              {isTranscribing && !input && (\n                <div className=\"absolute top-0 left-0 right-0 bottom-0 flex items-center pointer-events-none\">\n                  <span className={cn(\n                    \"text-muted-foreground animate-pulse\",\n                    isMobile ? \"text-base\" : \"text-sm\"\n                  )}>\n                    Transcribing\n                    <span className=\"inline-flex\">\n                      <span className=\"animate-bounce\" style={{ animationDelay: '0ms' }}>.</span>\n                      <span className=\"animate-bounce\" style={{ animationDelay: '150ms' }}>.</span>\n                      <span className=\"animate-bounce\" style={{ animationDelay: '300ms' }}>.</span>\n                    </span>\n                  </span>\n                </div>\n              )}\n            </div>\n            \n            {/* Character Count */}\n            {input.length > 0 && (\n              <div className={cn(\n                \"text-xs text-muted-foreground mr-2\",\n                isMobile ? \"text-xs\" : \"text-xs\"\n              )}>\n                {input.length}/{maxLength}\n              </div>\n            )}\n            \n            {/* Action Buttons */}\n            <div className=\"flex items-center gap-1\">\n              {/* Voice Button - Hidden in widget/floating modes */}\n              {onVoiceClick && mode === 'standalone' && (\n                <Button\n                  type=\"button\"\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={onVoiceClick}\n                  disabled={disabled}\n                  className={cn(\n                    'relative group transition-all duration-200',\n                    'bg-gradient-to-br from-purple-500/10 to-pink-500/10',\n                    'hover:from-purple-500/20 hover:to-pink-500/20',\n                    'border border-purple-500/20 hover:border-purple-500/40',\n                    'shadow-sm hover:shadow-md',\n                    isMobile ? 'h-10 w-10' : 'h-9 w-9'\n                  )}\n                  title=\"Voice mode\"\n                >\n                  <div className=\"absolute inset-0 rounded-md bg-gradient-to-br from-purple-600/5 to-pink-600/5 opacity-0 group-hover:opacity-100 transition-opacity\" />\n                  <AnimatedVoiceIcon \n                    size={isMobile ? 'lg' : 'md'} \n                    isActive={false}\n                    className=\"relative z-10\"\n                  />\n                </Button>\n              )}\n              \n              {/* Send Button */}\n              <Button\n                type=\"submit\"\n                size=\"icon\"\n                disabled={!canSend}\n                className={cn(\n                  'transition-all duration-200 group',\n                  'bg-brand-500 hover:bg-brand-600 active:bg-brand-700',\n                  'text-white shadow-sm hover:shadow-md',\n                  'disabled:opacity-50 disabled:cursor-not-allowed',\n                  'disabled:hover:bg-brand-500 disabled:hover:shadow-sm',\n                  isMobile ? 'h-10 w-10' : 'h-9 w-9'\n                )}\n                title={disabled ? 'Sending message...' : 'Send message'}\n              >\n                {disabled ? (\n                  <Spinner size=\"sm\" className=\"text-white\" />\n                ) : (\n                  <Send className={cn(\n                    \"transition-transform duration-200 group-hover:translate-x-0.5 group-hover:-translate-y-0.5\",\n                    isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n                  )} />\n                )}\n              </Button>\n            </div>\n          </div>\n        </form>\n        \n        {/* Settings Toggle Button - Hidden in widget/floating modes */}\n        {mode === 'standalone' && (\n        <div className=\"border-t border-gray-200/50 dark:border-gray-800/30\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setShowSettings(!showSettings)}\n            className={cn(\n              \"flex items-center gap-2 text-xs\",\n              isMobile ? \"w-full justify-center h-9 px-3 py-2\" : \"w-auto justify-start h-8 px-3 py-1.5\",\n              \"hover:bg-accent/50 transition-all duration-200\",\n              showSettings && \"bg-accent/30\"\n            )}\n            title=\"Customize chat settings including response source, AI model, and persona\"\n          >\n            <SlidersHorizontal className={cn(\n              \"transition-colors\",\n              showSettings ? \"text-brand-500\" : \"text-muted-foreground\",\n              isMobile ? \"h-4 w-4\" : \"h-3.5 w-3.5\"\n            )} />\n            <span className={cn(\n              \"font-medium text-muted-foreground\",\n              showSettings && \"text-brand-600\"\n            )}>Customize Chat</span>\n            <ChevronDown className={cn(\n              \"h-3 w-3 opacity-50 transition-transform duration-200\",\n              showSettings && \"rotate-180\"\n            )} />\n          </Button>\n          \n          {/* Expandable Settings Panel */}\n          <AnimatePresence>\n            {showSettings && (\n              <motion.div\n                initial={{ height: 0, opacity: 0 }}\n                animate={{ height: \"auto\", opacity: 1 }}\n                exit={{ height: 0, opacity: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"overflow-hidden bg-accent/20\"\n              >\n                <div className={cn(\n                  \"flex items-center border-t border-gray-200/50 dark:border-gray-800/30\",\n                  isMobile \n                    ? \"justify-between px-2 pb-2 pt-2\" \n                    : \"gap-2 px-3 pb-2.5 pt-2.5\"\n                )}>\n                  {/* Response Source */}\n                  <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-4 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <MessageSquare className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Source</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"start\" className=\"w-64\">\n            <DropdownMenuLabel className=\"text-xs\">RESPONSE SOURCE</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {RESPONSE_SOURCES.map((source) => {\n              const Icon = source.icon;\n              return (\n                <DropdownMenuItem\n                  key={source.value}\n                  onClick={() => updateSetting('response_source', source.value)}\n                  className=\"flex flex-col items-start py-1.5\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Icon className=\"h-3.5 w-3.5\" />\n                    <span className=\"text-sm font-medium\">{source.label}</span>\n                    {settings.response_source === source.value && (\n                      <span className=\"text-xs text-brand-600\">✓</span>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-5\">{source.description}</span>\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Model Selection */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-2 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <Brain className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Model</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"center\" className=\"w-72\">\n            <DropdownMenuLabel className=\"text-xs\">AI MODEL</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {CHATBOT_MODELS\n              .filter((model) => settings.agent_capability && model.capabilities.includes(settings.agent_capability as any))\n              .map((model) => {\n                const Icon = model.icon;\n                return (\n                  <DropdownMenuItem\n                    key={model.value}\n                    onClick={() => updateSetting('chatbot_model', model.value)}\n                    className=\"flex flex-col items-start py-1.5\"\n                  >\n                    <div className=\"flex items-center gap-2\">\n                      <Icon className=\"h-3.5 w-3.5\" />\n                      <span className=\"text-sm font-medium\">{model.label}</span>\n                      {settings.chatbot_model === model.value && (\n                        <span className=\"text-xs text-brand-600\">✓</span>\n                      )}\n                    </div>\n                    <span className=\"text-xs text-muted-foreground ml-5\">{model.description}</span>\n                  </DropdownMenuItem>\n                );\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Persona Selection */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-2 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <User className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Persona</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"center\" className=\"w-64\">\n            <DropdownMenuLabel className=\"text-xs\">ASSISTANT PERSONA</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {COMMON_PERSONAS.map((persona) => {\n              const Icon = persona.icon;\n              return (\n                <DropdownMenuItem\n                  key={persona.value}\n                  onClick={() => updateSetting('custom_persona', persona.value)}\n                  className=\"flex flex-col items-start py-1.5\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Icon className=\"h-3.5 w-3.5\" />\n                    <span className=\"text-sm font-medium\">{persona.label}</span>\n                    {settings.custom_persona === persona.value && (\n                      <span className=\"text-xs text-brand-600\">✓</span>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-5\">{persona.description}</span>\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n\n        {/* Agent Capability */}\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className={cn(\n                \"text-xs flex items-center justify-center\",\n                isMobile ? \"h-8 flex-1 gap-2 px-1\" : \"h-7 px-2.5 gap-1.5\"\n              )}\n              disabled={isLoadingSettings}\n            >\n              <Settings className={cn(\"text-muted-foreground\", isMobile ? \"h-3 w-3\" : \"h-3.5 w-3.5\")} />\n              <span className=\"font-medium text-muted-foreground\">Mode</span>\n              {!isMobile && <ChevronDown className=\"h-3 w-3 opacity-50\" />}\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\" className=\"w-72\">\n            <DropdownMenuLabel className=\"text-xs\">RESPONSE MODE</DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            {AGENT_CAPABILITIES.map((capability) => {\n              const Icon = capability.icon;\n              return (\n                <DropdownMenuItem\n                  key={capability.value}\n                  onClick={() => updateSetting('agent_capability', capability.value)}\n                  className=\"flex flex-col items-start py-1.5\"\n                >\n                  <div className=\"flex items-center gap-2\">\n                    <Icon className=\"h-3.5 w-3.5\" />\n                    <span className=\"text-sm font-medium\">{capability.label}</span>\n                    {capability.enterprise && (\n                      <span className=\"text-[10px] bg-muted text-muted-foreground px-1 py-0.5 rounded\">Enterprise only</span>\n                    )}\n                    {settings.agent_capability === capability.value && (\n                      <span className=\"text-xs text-brand-600\">✓</span>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground ml-5\">{capability.description}</span>\n                </DropdownMenuItem>\n              );\n            })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n        )}\n      </div>\n      \n      {/* Input Hints - Below configuration options */}\n      {!isMobile && (\n        <div className=\"px-4 pb-3 text-xs text-muted-foreground\">\n          <span>Press Enter to send, Shift+Enter for new line</span>\n        </div>\n      )}\n    </div>\n  );\n};","/**\n * Typing Indicator Component\n * \n * Shows animated typing indicator when AI is generating a response.\n * Provides visual feedback that the system is processing.\n * \n * Features:\n * - Three-dot bouncing animation\n * - AI avatar display\n * - Staggered animation delays\n * - Consistent styling with messages\n * - Subtle bounce effect\n * \n * Animation:\n * - Uses CSS animations defined in globals.css\n * - animate-bounce-subtle class for smooth motion\n * - Staggered delays (0ms, 100ms, 200ms)\n * - Creates wave-like effect\n * \n * Design:\n * - Matches message component layout\n * - Gray background for distinction\n * - Centered in chat container\n * - Responsive max-width\n * \n * Features:\n * - Multiple animation styles for enhanced visual feedback\n * - Contextual status messages for different AI processing states\n * - Progress indicators with time estimation for long operations\n * - Professional avatar customization with brand consistency\n * - Advanced loading patterns including skeleton alternatives\n */\n\n'use client';\n\nimport React from 'react';\nimport { Bot } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n/**\n * Props for TypingIndicator\n * \n * @property className - Additional CSS classes for styling\n */\ninterface TypingIndicatorProps {\n  className?: string;\n}\n\n/**\n * Typing Indicator Component\n * \n * Displays animated dots to indicate AI is typing/processing.\n * Maintains visual consistency with message components.\n */\nexport const TypingIndicator: React.FC<TypingIndicatorProps> = ({ className }) => {\n  return (\n    <div className={cn(\n      'px-4 py-6 bg-muted border-y border-border',\n      className\n    )}>\n      <div className=\"max-w-3xl mx-auto flex gap-4\">\n        {/* Avatar */}\n        <div className=\"w-8 h-8 rounded-full bg-background border border-border flex items-center justify-center flex-shrink-0\">\n          <Bot className=\"w-4 h-4 text-brand-600\" />\n        </div>\n        \n        {/* Typing Animation */}\n        <div className=\"flex items-center gap-1 py-2\">\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle\" />\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle delay-100\" />\n          <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce-subtle delay-200\" />\n        </div>\n      </div>\n    </div>\n  );\n};","/**\n * Agent Selector Component\n * \n * Dropdown selector for switching between different CustomGPT agents.\n * Displays the current agent and allows users to select from available agents.\n * \n * Features:\n * - Current agent display with avatar\n * - Dropdown list of all available agents\n * - Agent metadata display (model, status)\n * - Quick settings access per agent\n * - Refresh agents functionality\n * - Loading and error states\n * - Click-outside-to-close behavior\n * - Smooth animations\n * \n * State Management:\n * - Uses agentStore for agent data\n * - Local state for dropdown open/close\n * - Automatic agent fetching on dropdown open\n * \n * UI/UX:\n * - Visual selection indicator (checkmark)\n * - Hover states for better interactivity\n * - Loading skeleton for initial load\n * - Error state with retry option\n * - Empty state guidance\n * \n * Features:\n * - Comprehensive agent selection with real-time filtering\n * - Intelligent agent management with favorites and categories\n * - Quick agent creation workflow integration\n * - Professional avatar display with status indicators\n * - Full keyboard navigation and accessibility support\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  Bot, \n  ChevronDown, \n  Settings, \n  RefreshCw,\n  AlertCircle,\n  Check,\n  BarChart3,\n  User\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { useAgentStore } from '@/store';\nimport { Spinner } from '@/components/ui/loading';\nimport { getClient } from '@/lib/api/client';\n\n/**\n * Props for AgentSelector component\n * \n * @property className - Additional CSS classes\n * @property showSettings - Whether to show settings button for each agent\n * @property onSettingsClick - Callback when settings button is clicked\n */\ninterface AgentSelectorProps {\n  className?: string;\n  showSettings?: boolean;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Props for agent avatar component\n */\ninterface AgentAvatarProps {\n  agent: Agent | null;\n  size?: 'sm' | 'md';\n  isSelected?: boolean;\n  className?: string;\n}\n\n/**\n * Props for individual agent item in dropdown\n * \n * @property agent - Agent data object\n * @property isSelected - Whether this agent is currently selected\n * @property onSelect - Callback when agent is selected\n * @property onSettingsClick - Optional callback for settings button\n */\ninterface AgentItemProps {\n  agent: Agent;\n  isSelected: boolean;\n  onSelect: (agent: Agent) => void;\n  onSettingsClick?: (agent: Agent) => void;\n}\n\n/**\n * Agent Avatar Component\n * \n * Displays agent avatar with fallback to default icon\n */\nconst AgentAvatar: React.FC<AgentAvatarProps> = ({ \n  agent, \n  size = 'md', \n  isSelected = false, \n  className \n}) => {\n  const sizeClasses = {\n    sm: 'w-6 h-6',\n    md: 'w-8 h-8'\n  };\n  \n  const iconSizeClasses = {\n    sm: 'w-3 h-3',\n    md: 'w-4 h-4'\n  };\n\n  const avatarUrl = agent?.settings?.chatbot_avatar;\n\n  return (\n    <div className={cn(\n      'rounded-full flex items-center justify-center flex-shrink-0 overflow-hidden',\n      sizeClasses[size],\n      isSelected ? 'bg-brand-600' : 'bg-accent',\n      className\n    )}>\n      {avatarUrl ? (\n        <img\n          src={avatarUrl}\n          alt={`${agent?.project_name} avatar`}\n          className=\"w-full h-full object-cover\"\n          onError={(e) => {\n            // Fallback to icon if image fails to load\n            const target = e.target as HTMLImageElement;\n            target.style.display = 'none';\n            const parent = target.parentElement;\n            if (parent) {\n              const icon = document.createElement('div');\n              icon.className = `w-full h-full flex items-center justify-center`;\n              icon.innerHTML = `<svg class=\"${iconSizeClasses[size]} ${isSelected ? 'text-white' : 'text-gray-600'}\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\"></path></svg>`;\n              parent.appendChild(icon);\n            }\n          }}\n        />\n      ) : (\n        <User className={cn(\n          iconSizeClasses[size],\n          isSelected ? 'text-white' : 'text-muted-foreground'\n        )} />\n      )}\n    </div>\n  );\n};\n\n/**\n * Individual Agent Item Component\n * \n * Renders a single agent in the dropdown list with:\n * - Agent avatar and name\n * - Selection indicator\n * - Metadata (model, status)\n * - Settings button (optional)\n */\nconst AgentItem: React.FC<AgentItemProps> = ({ \n  agent, \n  isSelected, \n  onSelect, \n  onSettingsClick \n}) => {\n  return (\n    <div\n      className={cn(\n        'flex items-center justify-between p-3 rounded-lg cursor-pointer transition-colors group',\n        'hover:bg-accent',\n        isSelected && 'bg-brand-50 hover:bg-brand-100'\n      )}\n      onClick={() => onSelect(agent)}\n    >\n      <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n        {/* Avatar */}\n        <AgentAvatar \n          agent={agent}\n          size=\"md\"\n          isSelected={isSelected}\n        />\n        \n        {/* Agent Info */}\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center gap-2\">\n            <h3 className=\"font-medium text-foreground truncate\">\n              {agent.project_name}\n            </h3>\n            {isSelected && (\n              <Check className=\"w-4 h-4 text-brand-600 flex-shrink-0\" />\n            )}\n          </div>\n          \n          {/* Status */}\n          <div className=\"mt-1 text-xs text-muted-foreground\">\n            <span>Status: {agent.is_chat_active ? 'Active' : 'Inactive'}</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Settings Button */}\n      {onSettingsClick && (\n        <Button\n          size=\"icon\"\n          variant=\"ghost\"\n          onClick={(e) => {\n            e.stopPropagation();\n            onSettingsClick(agent);\n          }}\n          className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-muted-foreground hover:text-foreground\"\n          title=\"Agent Settings\"\n        >\n          <Settings className=\"h-3 w-3\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\n/**\n * Agent Selector Component\n * \n * Main component that provides agent switching functionality.\n * Manages dropdown state and handles agent selection.\n * \n * @param className - Additional CSS classes for styling\n * @param showSettings - Whether to show settings buttons (default: true)\n * @param onSettingsClick - Handler for agent settings clicks\n */\nexport const AgentSelector: React.FC<AgentSelectorProps> = ({ \n  className,\n  showSettings = true,\n  onSettingsClick\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isSelectingAgent, setIsSelectingAgent] = useState(false);\n  const [loadingSettings, setLoadingSettings] = useState<Set<number>>(new Set());\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  \n  const { \n    agents, \n    currentAgent, \n    loading, \n    error, \n    fetchAgents, \n    loadMoreAgents,\n    selectAgent,\n    setAgents,\n    paginationMeta\n  } = useAgentStore();\n\n  /**\n   * Fetch settings for agents that don't have them loaded\n   */\n  const fetchAgentSettings = async (agentsToLoad: Agent[]) => {\n    const agentsNeedingSettings = agentsToLoad.filter(agent => \n      !agent.settings && !loadingSettings.has(agent.id)\n    );\n\n    if (agentsNeedingSettings.length === 0) return;\n\n    // Mark agents as loading\n    setLoadingSettings(prev => {\n      const newSet = new Set(prev);\n      agentsNeedingSettings.forEach(agent => newSet.add(agent.id));\n      return newSet;\n    });\n\n    try {\n      const client = getClient();\n      const settingsPromises = agentsNeedingSettings.map(async (agent) => {\n        try {\n          const response = await client.getAgentSettings(agent.id);\n          return {\n            agentId: agent.id,\n            settings: response.data || response\n          };\n        } catch (error) {\n          console.warn(`Failed to load settings for agent ${agent.id}:`, error);\n          return {\n            agentId: agent.id,\n            settings: null\n          };\n        }\n      });\n\n      const results = await Promise.all(settingsPromises);\n      \n      // Update agents with their settings\n      const updatedAgents = agents.map(agent => {\n        const result = results.find(r => r.agentId === agent.id);\n        if (result && result.settings) {\n          return { ...agent, settings: result.settings };\n        }\n        return agent;\n      });\n\n      setAgents(updatedAgents);\n\n    } catch (error) {\n      console.error('Failed to fetch agent settings:', error);\n    } finally {\n      // Clear loading state\n      setLoadingSettings(prev => {\n        const newSet = new Set(prev);\n        agentsNeedingSettings.forEach(agent => newSet.delete(agent.id));\n        return newSet;\n      });\n    }\n  };\n\n  /**\n   * Close dropdown when clicking outside\n   * \n   * Uses mousedown event for better UX (closes before click completes)\n   */\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [isOpen]);\n\n  /**\n   * Refresh agents list\n   * \n   * Fetches latest agents from the API and shows toast feedback.\n   * This will temporarily cause avatars to flicker as settings are reloaded.\n   */\n  const handleRefresh = async () => {\n    try {\n      await fetchAgents();\n      toast.success('Agents refreshed');\n    } catch (error) {\n      toast.error('Failed to refresh agents');\n    }\n  };\n\n  /**\n   * Handle agent selection\n   * \n   * Updates the current agent, closes dropdown, and shows confirmation\n   */\n  const handleSelectAgent = async (agent: Agent) => {\n    if (isSelectingAgent) return; // Prevent multiple selections\n    \n    setIsSelectingAgent(true);\n    try {\n      await selectAgent(agent);\n      setIsOpen(false);\n      toast.success(`Switched to ${agent.project_name}`);\n    } catch (error) {\n      toast.error('Failed to switch agent');\n    } finally {\n      // Add a small delay to show the loading state briefly\n      setTimeout(() => {\n        setIsSelectingAgent(false);\n      }, 300);\n    }\n  };\n\n  /**\n   * Fetch settings when agents are loaded and dropdown is open\n   * Only runs when needed to prevent unnecessary API calls\n   */\n  useEffect(() => {\n    if (isOpen && agents.length > 0) {\n      // Only fetch if there are agents without settings\n      const agentsNeedingSettings = agents.some(agent => !agent.settings);\n      if (agentsNeedingSettings) {\n        fetchAgentSettings(agents);\n      }\n    }\n  }, [isOpen, agents.length, agents, fetchAgentSettings]);\n\n  /**\n   * Toggle dropdown and conditionally fetch agents\n   * \n   * Only fetches agents if the array is empty to prevent flickering.\n   * Settings are fetched via useEffect when agents are loaded.\n   */\n  const handleToggleDropdown = async () => {\n    const willOpen = !isOpen;\n    setIsOpen(willOpen);\n    \n    // Only fetch agents if we don't have any yet\n    // This prevents flickering caused by replacing agents that have settings\n    // with fresh agents that don't have settings loaded\n    if (willOpen && agents.length === 0) {\n      try {\n        await fetchAgents();\n      } catch (error) {\n        // Don't show error toast here as it might be annoying\n      }\n    }\n  };\n\n  if (loading && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-muted animate-pulse\" />\n          <div className=\"flex-1\">\n            <div className=\"h-4 bg-muted rounded animate-pulse mb-2\" />\n            <div className=\"h-3 bg-muted/50 rounded animate-pulse w-3/4\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-red-100 flex items-center justify-center flex-shrink-0\">\n            <AlertCircle className=\"w-4 h-4 text-red-600\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-red-600 font-medium\">Failed to load agents</p>\n            <p className=\"text-xs text-red-500\">{error}</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            className=\"text-red-600 hover:text-red-700\"\n          >\n            <RefreshCw className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (!currentAgent && agents.length === 0) {\n    return (\n      <div className={cn('p-3 bg-background border border-border rounded-lg', className)}>\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-full bg-accent flex items-center justify-center flex-shrink-0\">\n            <Bot className=\"w-4 h-4 text-muted-foreground\" />\n          </div>\n          <div className=\"flex-1\">\n            <p className=\"text-sm text-muted-foreground font-medium\">No agents available</p>\n            <p className=\"text-xs text-muted-foreground\">Check your API configuration</p>\n          </div>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            onClick={handleRefresh}\n            disabled={loading}\n          >\n            <RefreshCw className={cn('w-4 h-4', loading && 'animate-spin')} />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn('relative', className)} ref={dropdownRef}>\n      {/* Loading overlay when selecting agent */}\n      {isSelectingAgent && (\n        <div className=\"absolute inset-0 bg-background/80 backdrop-blur-sm rounded-lg flex items-center justify-center z-50\">\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Spinner size=\"sm\" />\n            <span className=\"text-foreground\">Switching agent...</span>\n          </div>\n        </div>\n      )}\n      {/* Selected Agent Display */}\n      <button\n        onClick={handleToggleDropdown}\n        className={cn(\n          'w-full p-3 bg-background border border-border rounded-lg text-left transition-colors',\n          'hover:bg-accent focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent',\n          isOpen && 'ring-2 ring-ring border-transparent'\n        )}\n      >\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            {/* Avatar */}\n            <AgentAvatar \n              agent={currentAgent}\n              size=\"md\"\n              isSelected={true}\n            />\n            \n            {/* Agent Info */}\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-medium text-foreground truncate\">\n                {currentAgent?.project_name || 'Select Agent'}\n              </h3>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center gap-2\">\n            {/* Analytics Button */}\n            {currentAgent && (\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  // Navigate to projects page with analytics tab\n                  window.location.href = `/projects?id=${currentAgent.id}&tab=analytics`;\n                }}\n                title=\"View Analytics\"\n                className=\"text-muted-foreground hover:text-foreground\"\n              >\n                <BarChart3 className=\"w-4 h-4\" />\n              </Button>\n            )}\n            \n            {/* Refresh Button */}\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                handleRefresh();\n              }}\n              disabled={loading}\n              className=\"h-6 w-6 text-muted-foreground hover:text-foreground\"\n              title=\"Refresh Agents\"\n            >\n              <RefreshCw className={cn('h-3 w-3', loading && 'animate-spin')} />\n            </Button>\n            \n            {/* Dropdown Arrow */}\n            <ChevronDown className={cn(\n              'w-4 h-4 text-muted-foreground transition-transform',\n              isOpen && 'rotate-180'\n            )} />\n          </div>\n        </div>\n      </button>\n\n      {/* Dropdown */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-background border border-border rounded-lg shadow-lg z-50 max-h-80 overflow-y-auto\"\n          >\n            <div className=\"p-2\">\n              {/* Header */}\n              <div className=\"px-2 py-1 mb-2\">\n                <h4 className=\"text-xs font-medium text-muted-foreground uppercase tracking-wide\">\n                  Available Agents ({Array.isArray(agents) ? agents.length : 0}\n                  {paginationMeta?.totalCount && paginationMeta.totalCount !== agents.length && (\n                    <span> of {paginationMeta.totalCount}</span>\n                  )})\n                </h4>\n              </div>\n              \n              {/* Agent List */}\n              <div className=\"space-y-1\">\n                {Array.isArray(agents) && agents.length > 0 ? (\n                  agents.map((agent) => (\n                    <AgentItem\n                      key={agent.id}\n                      agent={agent}\n                      isSelected={currentAgent?.id === agent.id}\n                      onSelect={handleSelectAgent}\n                      onSettingsClick={showSettings ? onSettingsClick : undefined}\n                    />\n                  ))\n                ) : (\n                  <div className=\"px-2 py-4 text-center\">\n                    <p className=\"text-sm text-muted-foreground\">No agents found</p>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={handleRefresh}\n                      className=\"mt-2\"\n                    >\n                      <RefreshCw className=\"w-4 h-4 mr-2\" />\n                      Refresh\n                    </Button>\n                  </div>\n                )}\n              </div>\n              \n              {/* Load More Button */}\n              {Array.isArray(agents) && agents.length > 0 && paginationMeta?.hasMore && (\n                <div className=\"px-2 py-2 border-t\">\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    onClick={async () => {\n                      try {\n                        await loadMoreAgents();\n                      } catch (error) {\n                        console.error('Failed to load more agents:', error);\n                      }\n                    }}\n                    disabled={loading}\n                    className=\"w-full\"\n                  >\n                    {loading ? (\n                      <>\n                        <RefreshCw className=\"w-4 h-4 mr-2 animate-spin\" />\n                        Loading...\n                      </>\n                    ) : (\n                      <>\n                        <ChevronDown className=\"w-4 h-4 mr-2\" />\n                        Load More Agents\n                      </>\n                    )}\n                  </Button>\n                </div>\n              )}\n              \n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","'use client';\n\nimport { useState, useEffect } from 'react';\n\n/**\n * Custom hook for responsive design based on media queries\n * Provides mobile-first breakpoint detection\n */\nexport const useMediaQuery = (query: string): boolean => {\n  const [matches, setMatches] = useState(false);\n\n  useEffect(() => {\n    // Handle server-side rendering\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    const media = window.matchMedia(query);\n    \n    // Set initial value\n    setMatches(media.matches);\n\n    // Create event listener\n    const listener = (event: MediaQueryListEvent) => {\n      setMatches(event.matches);\n    };\n\n    // Add listener\n    media.addEventListener('change', listener);\n\n    // Cleanup\n    return () => media.removeEventListener('change', listener);\n  }, [query]);\n\n  return matches;\n};\n\n/**\n * Predefined breakpoint hooks for common use cases\n */\nexport const useBreakpoint = () => {\n  const isMobile = useMediaQuery('(max-width: 767px)');\n  const isTablet = useMediaQuery('(min-width: 768px) and (max-width: 1023px)');\n  const isDesktop = useMediaQuery('(min-width: 1024px)');\n  const isLargeScreen = useMediaQuery('(min-width: 1280px)');\n  \n  // Touch device detection\n  const isTouchDevice = useMediaQuery('(pointer: coarse)');\n  \n  return {\n    isMobile,\n    isTablet,\n    isDesktop,\n    isLargeScreen,\n    isTouchDevice,\n    // Helper computed values\n    isMobileOrTablet: isMobile || isTablet,\n    isTabletOrDesktop: isTablet || isDesktop\n  };\n};\n\n/**\n * Hook for getting current screen size category\n */\nexport const useScreenSize = () => {\n  const { isMobile, isTablet, isDesktop, isLargeScreen } = useBreakpoint();\n  \n  if (isMobile) return 'mobile';\n  if (isTablet) return 'tablet';\n  if (isLargeScreen) return 'large';\n  if (isDesktop) return 'desktop';\n  return 'desktop'; // fallback\n};","/**\n * Citation Details Modal Component\n * \n * Modal dialog that displays detailed information about a citation,\n * including Open Graph data fetched from the cited source.\n * \n * Features:\n * - Open Graph data display (title, description, image)\n * - Loading and error states\n * - Responsive modal design\n * - Image preview with error handling\n * - Direct link to source\n * - Citation metadata display\n * - Smooth animations\n * \n * API Integration:\n * - Fetches citation details via getCitation API\n * - Handles Open Graph data response\n * - Graceful error handling\n * - Automatic retry on prop changes\n * \n * UI/UX:\n * - Backdrop click to close\n * - Escape key support (via close button)\n * - Loading spinner during fetch\n * - Error message display\n * - Image fallback on load error\n * \n * Features:\n * - Advanced citation caching for improved performance\n * - Professional sharing and bookmarking functionality\n * - Enhanced image preview with zoom and gallery modes\n * - Citation analytics and usage tracking\n * - Comprehensive export options and related citation discovery\n */\n\n'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  ExternalLink,\n  Loader,\n  AlertCircle,\n  Globe,\n  Image as ImageIcon\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { useAgentStore } from '@/store/agents';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\n/**\n * Open Graph data structure for citations\n * \n * @property id - Citation ID\n * @property url - Source URL\n * @property title - Page title from Open Graph\n * @property description - Page description\n * @property image - Optional preview image URL\n */\ninterface CitationOpenGraphData {\n  id: number;\n  url: string;\n  title: string;\n  description: string;\n  image?: string;\n}\n\n/**\n * Props for CitationDetailsModal\n * \n * @property isOpen - Whether modal is visible\n * @property onClose - Callback to close modal\n * @property citationId - ID of citation to display\n * @property projectId - Optional project ID (uses current agent if not provided)\n */\ninterface CitationDetailsModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: number | string;\n  projectId?: number;\n}\n\n/**\n * Citation Details Modal Component\n * \n * Displays rich preview of citation with Open Graph data.\n * Fetches citation details from API when opened.\n */\nexport const CitationDetailsModal: React.FC<CitationDetailsModalProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  projectId\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [citationData, setCitationData] = useState<CitationOpenGraphData | null>(null);\n  const [imageError, setImageError] = useState(false);\n  \n  const { currentAgent } = useAgentStore();\n  const { isMobile } = useBreakpoint();\n  const effectiveProjectId = projectId || currentAgent?.id;\n\n  /**\n   * Fetch citation Open Graph data from API\n   * \n   * Handles:\n   * - Parameter validation\n   * - API call with proper typing\n   * - Error handling with user-friendly messages\n   * - Loading state management\n   * - Logging for debugging\n   */\n  const fetchCitationDetails = useCallback(async () => {\n    if (!effectiveProjectId || !citationId) {\n      setError('Missing project or citation information');\n      return;\n    }\n\n    setLoading(true);\n    setError(null);\n    setImageError(false);\n\n    try {\n      const client = getClient();\n      const response = await client.getCitation(\n        effectiveProjectId, \n        typeof citationId === 'string' ? parseInt(citationId, 10) : citationId\n      );\n      \n      if (response.data) {\n        setCitationData(response.data as unknown as CitationOpenGraphData);\n        logger.info('CITATION', 'Citation details fetched', {\n          citationId,\n          projectId: effectiveProjectId,\n          hasImage: !!response.data.image\n        });\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch citation details';\n      setError(errorMessage);\n      logger.error('CITATION', 'Failed to fetch citation details', {\n        error: err,\n        citationId,\n        projectId: effectiveProjectId\n      });\n    } finally {\n      setLoading(false);\n    }\n  }, [effectiveProjectId, citationId]);\n\n  /**\n   * Fetch citation details when modal opens\n   * \n   * Triggers API call when modal becomes visible and required data is available\n   */\n  useEffect(() => {\n    if (isOpen && effectiveProjectId && citationId) {\n      fetchCitationDetails();\n    }\n  }, [isOpen, effectiveProjectId, citationId, fetchCitationDetails]);\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            onClick={onClose}\n            className=\"fixed inset-0 bg-black/50 z-50\"\n          />\n\n          {/* Modal */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            className={cn(\n              \"fixed bg-background shadow-xl z-50\",\n              isMobile \n                ? \"inset-x-0 bottom-0 top-20 rounded-t-xl flex flex-col\" \n                : \"inset-x-0 top-[10%] mx-auto max-w-2xl rounded-lg max-h-[90vh] overflow-hidden\"\n            )}\n          >\n          {/* Header */}\n          <div className={cn(\n            \"flex items-center justify-between border-b border-border bg-background/95 backdrop-blur-sm flex-shrink-0\",\n            isMobile ? \"px-4 py-4\" : \"p-4\"\n          )}>\n            <h2 className={cn(\n              \"font-semibold text-foreground\",\n              isMobile ? \"text-lg\" : \"text-lg\"\n            )}>\n              Citation Details\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className={cn(\n                isMobile ? \"h-9 w-9 touch-target\" : \"h-8 w-8\"\n              )}\n            >\n              <X className={cn(\n                isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n              )} />\n            </Button>\n          </div>\n\n          {/* Content */}\n          <div className={cn(\n            \"overflow-y-auto\",\n            isMobile \n              ? \"flex-1 px-4 py-4 pb-6 safe-area-pb\" \n              : \"p-4 max-h-[calc(90vh-120px)]\"\n          )}>\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n              </div>\n            ) : error ? (\n              <div className={cn(\n                \"flex items-center gap-3 p-4 bg-red-50 dark:bg-red-950/20 rounded-lg\",\n                isMobile && \"mx-0\"\n              )}>\n                <AlertCircle className={cn(\n                  \"text-red-600 flex-shrink-0\",\n                  isMobile ? \"h-5 w-5\" : \"h-5 w-5\"\n                )} />\n                <div className=\"flex-1\">\n                  <p className={cn(\n                    \"font-medium text-red-900 dark:text-red-200\",\n                    isMobile ? \"text-sm\" : \"text-sm\"\n                  )}>Error loading citation</p>\n                  <p className={cn(\n                    \"text-red-700 dark:text-red-300 mt-1\",\n                    isMobile ? \"text-xs\" : \"text-sm\"\n                  )}>{error}</p>\n                </div>\n              </div>\n            ) : citationData ? (\n              <div className={cn(\n                \"space-y-4\",\n                isMobile && \"space-y-5\"\n              )}>\n                {/* Open Graph Image */}\n                {citationData.image && !imageError && (\n                  <div className={cn(\n                    \"relative rounded-lg overflow-hidden bg-muted\",\n                    isMobile && \"-mx-4 rounded-none\"\n                  )}>\n                    <img\n                      src={citationData.image}\n                      alt={citationData.title}\n                      className=\"w-full h-auto\"\n                      onError={() => setImageError(true)}\n                    />\n                    {isMobile && (\n                      <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 to-transparent pointer-events-none\" />\n                    )}\n                  </div>\n                )}\n\n                {/* Title */}\n                <div>\n                  <h3 className={cn(\n                    \"font-semibold text-foreground\",\n                    isMobile ? \"text-lg leading-tight\" : \"text-xl\"\n                  )}>\n                    {citationData.title}\n                  </h3>\n                </div>\n\n                {/* URL */}\n                <div className={cn(\n                  \"flex items-center gap-2 text-muted-foreground\",\n                  isMobile ? \"text-sm\" : \"text-sm\"\n                )}>\n                  <Globe className={cn(\n                    \"flex-shrink-0\",\n                    isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                  )} />\n                  <a\n                    href={citationData.url}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className={cn(\n                      \"hover:text-brand-600 transition-colors\",\n                      isMobile ? \"break-all\" : \"truncate\"\n                    )}\n                  >\n                    {citationData.url}\n                  </a>\n                </div>\n\n                {/* Description */}\n                {citationData.description && (\n                  <div className=\"prose prose-gray dark:prose-invert max-w-none\">\n                    <p className={cn(\n                      \"text-foreground\",\n                      isMobile ? \"text-sm leading-relaxed\" : \"\"\n                    )}>{citationData.description}</p>\n                  </div>\n                )}\n\n                {/* Metadata */}\n                <div className={cn(\n                  \"pt-4 border-t border-border space-y-3\",\n                  isMobile && \"space-y-3\"\n                )}>\n                  <div className={cn(\n                    \"flex items-center justify-between\",\n                    isMobile ? \"text-sm\" : \"text-sm\"\n                  )}>\n                    <span className=\"text-muted-foreground\">Citation ID</span>\n                    <span className={cn(\n                      \"font-mono text-foreground\",\n                      isMobile ? \"text-base\" : \"\"\n                    )}>#{citationData.id}</span>\n                  </div>\n                  {citationData.image && (\n                    <div className={cn(\n                      \"flex items-center justify-between\",\n                      isMobile ? \"text-sm\" : \"text-sm\"\n                    )}>\n                      <span className=\"text-muted-foreground\">Has preview image</span>\n                      <ImageIcon className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                    </div>\n                  )}\n                </div>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className={cn(\n            \"border-t bg-muted flex-shrink-0\",\n            isMobile ? \"p-4 safe-area-pb\" : \"p-4\"\n          )}>\n            <div className={cn(\n              \"flex items-center\",\n              isMobile ? \"flex-col gap-3\" : \"justify-between\"\n            )}>\n              <div className={cn(\n                \"text-muted-foreground\",\n                isMobile ? \"text-xs text-center\" : \"text-xs\"\n              )}>\n                Open Graph data from cited source\n              </div>\n              {citationData && (\n                <a\n                  href={citationData.url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className={cn(\n                    \"inline-flex items-center gap-2 font-medium text-brand-600 hover:text-brand-700 transition-colors\",\n                    isMobile \n                      ? \"w-full justify-center bg-brand-600 text-white hover:bg-brand-700 hover:text-white rounded-lg px-4 py-3 text-base touch-target\" \n                      : \"px-3 py-1.5 text-sm\"\n                  )}\n                >\n                  Visit source\n                  <ExternalLink className={cn(\n                    isMobile ? \"h-4 w-4\" : \"h-3.5 w-3.5\"\n                  )} />\n                </a>\n              )}\n            </div>\n          </div>\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};","'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  X, \n  FileText,\n  Download,\n  Loader,\n  AlertCircle,\n  Copy,\n  Check\n} from 'lucide-react';\n\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { getClient } from '@/lib/api/client';\nimport { logger } from '@/lib/logger';\nimport { toast } from 'sonner';\n\ninterface CitationFilePreviewProps {\n  isOpen: boolean;\n  onClose: () => void;\n  citationId: string;\n  fileName?: string;\n}\n\nexport const CitationFilePreview: React.FC<CitationFilePreviewProps> = ({\n  isOpen,\n  onClose,\n  citationId,\n  fileName = 'Citation File'\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [fileContent, setFileContent] = useState<string | null>(null);\n  const [contentType, setContentType] = useState<string>('text/plain');\n  const [copied, setCopied] = useState(false);\n\n  const fetchFilePreview = useCallback(async () => {\n    setLoading(true);\n    setError(null);\n\n    try {\n      const client = getClient();\n      const response = await client.previewCitationFile(citationId);\n      \n      // Handle different response formats\n      if (typeof response === 'string') {\n        setFileContent(response);\n        setContentType('text/plain');\n      } else if (response.data) {\n        setFileContent(response.data.content || response.data);\n        setContentType(response.data.content_type || 'text/plain');\n      } else {\n        setFileContent(JSON.stringify(response, null, 2));\n        setContentType('application/json');\n      }\n      \n      logger.info('CITATION_PREVIEW', 'File preview fetched', {\n        citationId,\n        contentLength: fileContent?.length\n      });\n    } catch (err: any) {\n      logger.error('CITATION_PREVIEW', 'Failed to fetch file preview', {\n        error: err,\n        citationId\n      });\n      \n      if (err.status === 400) {\n        setError('Invalid citation ID.');\n      } else if (err.status === 401) {\n        setError('Authentication failed. Please log in again.');\n      } else if (err.status === 403) {\n        setError('Access denied. You do not have permission to view this file.');\n      } else if (err.status === 404) {\n        setError('Citation file not found.');\n      } else if (err.status === 500) {\n        setError('Server error. Please try again later.');\n      } else {\n        setError('Failed to load file preview.');\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [citationId]);\n\n  useEffect(() => {\n    if (isOpen && citationId) {\n      fetchFilePreview();\n    }\n  }, [isOpen, citationId, fetchFilePreview]);\n\n  const handleCopy = async () => {\n    if (!fileContent) return;\n    \n    try {\n      await navigator.clipboard.writeText(fileContent);\n      setCopied(true);\n      toast.success('Content copied to clipboard');\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      toast.error('Failed to copy content');\n    }\n  };\n\n  const handleDownload = () => {\n    if (!fileContent) return;\n    \n    const blob = new Blob([fileContent], { type: contentType });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = fileName;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n    \n    toast.success('File downloaded');\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n        {/* Backdrop */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          onClick={onClose}\n          className=\"absolute inset-0 bg-black/50\"\n        />\n\n        {/* Modal */}\n        <motion.div\n          initial={{ opacity: 0, scale: 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.95 }}\n          className=\"relative bg-background rounded-lg shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden\"\n        >\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-border\">\n            <div className=\"flex items-center gap-3\">\n              <FileText className=\"h-5 w-5 text-muted-foreground\" />\n              <h2 className=\"text-lg font-semibold text-foreground\">\n                {fileName}\n              </h2>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleCopy}\n                disabled={!fileContent}\n              >\n                {copied ? (\n                  <>\n                    <Check className=\"h-4 w-4 mr-2\" />\n                    Copied\n                  </>\n                ) : (\n                  <>\n                    <Copy className=\"h-4 w-4 mr-2\" />\n                    Copy\n                  </>\n                )}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={handleDownload}\n                disabled={!fileContent}\n              >\n                <Download className=\"h-4 w-4 mr-2\" />\n                Download\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onClose}\n                className=\"h-8 w-8\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"p-4 overflow-y-auto max-h-[calc(90vh-120px)]\">\n            {loading ? (\n              <div className=\"flex items-center justify-center py-12\">\n                <Loader className=\"h-8 w-8 animate-spin text-muted-foreground\" />\n              </div>\n            ) : error ? (\n              <div className=\"flex items-center gap-3 p-4 bg-red-50 rounded-lg\">\n                <AlertCircle className=\"h-5 w-5 text-red-600 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-destructive\">Error loading file</p>\n                  <p className=\"text-sm text-destructive/90 mt-1\">{error}</p>\n                </div>\n              </div>\n            ) : fileContent ? (\n              <div className=\"font-mono text-sm bg-accent rounded-lg p-4 text-foreground\">\n                <pre className=\"whitespace-pre-wrap break-words\">\n                  {fileContent}\n                </pre>\n              </div>\n            ) : null}\n          </div>\n\n          {/* Footer */}\n          <div className=\"p-4 border-t border-border bg-accent\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"text-xs text-muted-foreground\">\n                Citation ID: {citationId}\n              </div>\n              <div className=\"text-xs text-muted-foreground\">\n                {contentType}\n              </div>\n            </div>\n          </div>\n        </motion.div>\n      </div>\n    </AnimatePresence>\n  );\n};","/**\n * Conversation Manager Component\n * \n * Provides conversation switching UI for widget and floating modes.\n * Shows a list of conversations with ability to create new ones and switch between them.\n * \n * Features:\n * - Conversation list with titles and timestamps\n * - Create new conversation button\n * - Switch between conversations\n * - Edit conversation titles inline\n * - Delete conversations\n * - Session-based isolation\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Plus, MessageCircle, Edit2, Trash2, Check, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { toast } from 'sonner';\nimport { cn } from '@/lib/utils';\n\ninterface Conversation {\n  id: string;\n  title: string;\n  createdAt: string;\n  messages: any[];\n}\n\ninterface ConversationManagerProps {\n  sessionId: string;\n  maxConversations?: number;\n  currentConversationId?: string;\n  onConversationChange?: (conversation: Conversation) => void;\n  onCreateConversation?: () => void;\n  className?: string;\n  refreshKey?: number; // Add refresh key to force re-render\n}\n\nexport const ConversationManager: React.FC<ConversationManagerProps> = ({\n  sessionId,\n  maxConversations,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  className,\n  refreshKey,\n}) => {\n  const [conversations, setConversations] = useState<Conversation[]>([]);\n  const [editingId, setEditingId] = useState<string | null>(null);\n  const [editTitle, setEditTitle] = useState('');\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Load conversations from localStorage\n  useEffect(() => {\n    const loadConversations = () => {\n      const stored = localStorage.getItem(`customgpt_conversations_${sessionId}`);\n      if (stored) {\n        try {\n          const parsed = JSON.parse(stored);\n          setConversations(parsed);\n        } catch (e) {\n          console.error('Failed to parse conversations:', e);\n        }\n      }\n    };\n\n    loadConversations();\n    // Listen for storage changes\n    window.addEventListener('storage', loadConversations);\n    return () => window.removeEventListener('storage', loadConversations);\n  }, [sessionId, refreshKey]); // Add refreshKey as dependency\n\n  const handleCreateConversation = () => {\n    if (maxConversations && conversations.length >= maxConversations) {\n      toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n      return;\n    }\n    onCreateConversation?.();\n  };\n\n  const handleSelectConversation = (conversation: Conversation) => {\n    onConversationChange?.(conversation);\n    setIsExpanded(false);\n  };\n\n  const handleEditStart = (conversation: Conversation) => {\n    setEditingId(conversation.id);\n    setEditTitle(conversation.title);\n  };\n\n  const handleEditSave = (conversationId: string) => {\n    const updated = conversations.map(c =>\n      c.id === conversationId ? { ...c, title: editTitle } : c\n    );\n    setConversations(updated);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(updated)\n    );\n    setEditingId(null);\n  };\n\n  const handleDelete = (conversationId: string) => {\n    if (conversations.length <= 1) {\n      toast.error('Cannot delete the last conversation');\n      return;\n    }\n    \n    const filtered = conversations.filter(c => c.id !== conversationId);\n    setConversations(filtered);\n    localStorage.setItem(\n      `customgpt_conversations_${sessionId}`,\n      JSON.stringify(filtered)\n    );\n    \n    // If deleting current conversation, switch to another\n    if (currentConversationId === conversationId && filtered.length > 0) {\n      onConversationChange?.(filtered[0]);\n    }\n  };\n\n  const currentConversation = conversations.find(c => c.id === currentConversationId);\n\n  return (\n    <div className={cn('relative', className)}>\n      {/* Collapsed View */}\n      <button\n        onClick={() => setIsExpanded(!isExpanded)}\n        className=\"flex items-center gap-2 px-3 py-2 text-sm font-medium text-foreground hover:bg-accent rounded-lg transition-colors w-full\"\n      >\n        <MessageCircle className=\"w-4 h-4\" />\n        <span className=\"truncate flex-1 text-left\">\n          {currentConversation?.title || 'Select Conversation'}\n        </span>\n        <svg\n          className={cn('w-4 h-4 transition-transform', isExpanded && 'rotate-180')}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n        </svg>\n      </button>\n\n      {/* Expanded View */}\n      <AnimatePresence>\n        {isExpanded && (\n          <motion.div\n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n            className=\"absolute top-full left-0 right-0 mt-2 bg-background rounded-lg shadow-lg border border-border z-50 max-h-80 overflow-y-auto\"\n          >\n            {/* New Conversation Button */}\n            <button\n              onClick={handleCreateConversation}\n              disabled={maxConversations ? conversations.length >= maxConversations : false}\n              className=\"flex items-center gap-2 w-full px-4 py-3 text-sm font-medium text-brand-600 hover:bg-brand-50 disabled:opacity-50 disabled:cursor-not-allowed border-b\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              New Conversation\n            </button>\n\n            {/* Conversation List */}\n            <div className=\"py-2\">\n              {conversations.map((conversation) => (\n                <div\n                  key={conversation.id}\n                  className={cn(\n                    'group flex items-center px-4 py-2 hover:bg-accent',\n                    currentConversationId === conversation.id && 'bg-brand-50'\n                  )}\n                >\n                  {editingId === conversation.id ? (\n                    // Edit Mode\n                    <div className=\"flex items-center gap-2 flex-1\">\n                      <input\n                        type=\"text\"\n                        value={editTitle}\n                        onChange={(e) => setEditTitle(e.target.value)}\n                        onKeyDown={(e) => {\n                          if (e.key === 'Enter') handleEditSave(conversation.id);\n                          if (e.key === 'Escape') setEditingId(null);\n                        }}\n                        className=\"flex-1 px-2 py-1 text-sm border rounded focus:outline-none focus:ring-1 focus:ring-brand-500\"\n                        autoFocus\n                      />\n                      <button\n                        onClick={() => handleEditSave(conversation.id)}\n                        className=\"p-1 text-green-600 hover:bg-green-50 rounded\"\n                      >\n                        <Check className=\"w-4 h-4\" />\n                      </button>\n                      <button\n                        onClick={() => setEditingId(null)}\n                        className=\"p-1 text-muted-foreground hover:bg-accent rounded\"\n                      >\n                        <X className=\"w-4 h-4\" />\n                      </button>\n                    </div>\n                  ) : (\n                    // View Mode\n                    <>\n                      <button\n                        onClick={() => handleSelectConversation(conversation)}\n                        className=\"flex-1 text-left\"\n                      >\n                        <div className=\"text-sm font-medium text-foreground truncate\">\n                          {conversation.title}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          {new Date(conversation.createdAt).toLocaleDateString()}\n                        </div>\n                      </button>\n                      <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                        <button\n                          onClick={() => handleEditStart(conversation)}\n                          className=\"p-1 text-muted-foreground hover:text-foreground hover:bg-accent rounded\"\n                        >\n                          <Edit2 className=\"w-3 h-3\" />\n                        </button>\n                        <button\n                          onClick={() => handleDelete(conversation.id)}\n                          className=\"p-1 text-muted-foreground hover:text-destructive hover:bg-destructive/10 rounded\"\n                        >\n                          <Trash2 className=\"w-3 h-3\" />\n                        </button>\n                      </div>\n                    </>\n                  )}\n                </div>\n              ))}\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};","/**\n * Message Error Display Component\n * \n * Displays error messages with appropriate styling and context based on HTTP status codes.\n * Provides user-friendly error messages and actionable guidance.\n */\n\nimport React from 'react';\nimport { AlertCircle, XCircle, CreditCard, UserX, Search, ServerCrash } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\n\ninterface MessageErrorDisplayProps {\n  error: string | Error;\n  statusCode?: number;\n  onRetry?: () => void;\n  className?: string;\n}\n\n/**\n * Parse error to extract status code and message\n */\nconst parseError = (error: string | Error): { statusCode?: number; message: string } => {\n  if (typeof error === 'string') {\n    // Try to extract status code from error message\n    const statusMatch = error.match(/(\\d{3})/);\n    const statusCode = statusMatch ? parseInt(statusMatch[1]) : undefined;\n    return { statusCode, message: error };\n  }\n  \n  return { \n    statusCode: (error as any).status || (error as any).statusCode,\n    message: error.message \n  };\n};\n\n/**\n * Get error details based on status code\n */\nconst getErrorDetails = (statusCode?: number, message?: string) => {\n  switch (statusCode) {\n    case 400:\n      return {\n        icon: AlertCircle,\n        title: 'Invalid Request',\n        description: 'The request format is invalid. Please check your input and try again.',\n        className: 'border-orange-200 bg-orange-50',\n        iconClassName: 'text-orange-600',\n        textClassName: 'text-orange-800',\n      };\n      \n    case 401:\n      return {\n        icon: UserX,\n        title: 'Authentication Failed',\n        description: 'Your API key is either missing or invalid. Please check your API key configuration.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showSupport: true,\n      };\n      \n    case 403:\n      // Check if this is an inactive agent error\n      const isInactiveAgent = message && (\n        message.toLowerCase().includes('inactive') ||\n        message.toLowerCase().includes('no documents') ||\n        message.toLowerCase().includes('agent is not active') ||\n        message.toLowerCase().includes('project is not active') ||\n        message.toLowerCase().includes('no documents uploaded')\n      );\n      \n      if (isInactiveAgent) {\n        return {\n          icon: AlertCircle,\n          title: 'Agent Inactive',\n          description: 'This agent is inactive. Please add documents to activate it before starting a conversation.',\n          className: 'border-orange-200 bg-orange-50',\n          iconClassName: 'text-orange-600',\n          textClassName: 'text-orange-800',\n        };\n      }\n      \n      return {\n        icon: UserX,\n        title: 'Access Denied',\n        description: 'You don\\'t have permission to access this resource. Please check your API key permissions.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showSupport: true,\n      };\n      \n    case 404:\n      return {\n        icon: Search,\n        title: 'Not Found',\n        description: 'The requested agent or conversation was not found. It may have been deleted or you may not have access.',\n        className: 'border-border bg-accent',\n        iconClassName: 'text-muted-foreground',\n        textClassName: 'text-foreground',\n      };\n      \n    case 429:\n      return {\n        icon: CreditCard,\n        title: 'Query Credits Exhausted',\n        description: 'You have exhausted your current query credits. Please contact customer service for assistance.',\n        className: 'border-yellow-200 bg-yellow-50',\n        iconClassName: 'text-yellow-600',\n        textClassName: 'text-yellow-800',\n        showSupport: true,\n        supportUrl: 'https://customgpt.freshdesk.com/support/home',\n      };\n      \n    case 500:\n    case 502:\n    case 503:\n    case 504:\n      return {\n        icon: ServerCrash,\n        title: 'Server Error',\n        description: 'An internal server error occurred. Please try again later or contact support if the issue persists.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showRetry: true,\n      };\n      \n    default:\n      return {\n        icon: XCircle,\n        title: 'Error',\n        description: message || 'An unexpected error occurred. Please try again.',\n        className: 'border-red-200 bg-red-50',\n        iconClassName: 'text-red-600',\n        textClassName: 'text-red-800',\n        showRetry: true,\n      };\n  }\n};\n\nexport const MessageErrorDisplay: React.FC<MessageErrorDisplayProps> = ({\n  error,\n  statusCode: propStatusCode,\n  onRetry,\n  className,\n}) => {\n  const { statusCode: parsedStatusCode, message } = parseError(error);\n  const finalStatusCode = propStatusCode || parsedStatusCode;\n  \n  const errorDetails = getErrorDetails(finalStatusCode, message);\n  const Icon = errorDetails.icon;\n  \n  return (\n    <div\n      className={cn(\n        'p-4 rounded-lg border',\n        errorDetails.className,\n        className\n      )}\n    >\n      <div className=\"flex items-start gap-3\">\n        <Icon className={cn('w-5 h-5 mt-0.5 flex-shrink-0', errorDetails.iconClassName)} />\n        \n        <div className=\"flex-1 space-y-2\">\n          <div>\n            <h3 className={cn('font-medium', errorDetails.textClassName)}>\n              {errorDetails.title}\n              {finalStatusCode && ` (${finalStatusCode})`}\n            </h3>\n            <p className={cn('text-sm mt-1', errorDetails.textClassName, 'opacity-90')}>\n              {errorDetails.description}\n            </p>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"flex items-center gap-2 mt-3\">\n            {errorDetails.showRetry && onRetry && (\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                onClick={onRetry}\n                className=\"text-xs\"\n              >\n                Try Again\n              </Button>\n            )}\n            \n            {errorDetails.showSupport && (\n              <a\n                href={errorDetails.supportUrl || 'https://customgpt.freshdesk.com/support/home'}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-xs underline hover:no-underline\"\n              >\n                Contact Support\n              </a>\n            )}\n          </div>\n          \n          {/* Technical Details (collapsed by default) */}\n          {message && message !== errorDetails.description && (\n            <details className=\"mt-3\">\n              <summary className={cn('text-xs cursor-pointer', errorDetails.textClassName, 'opacity-70')}>\n                Technical Details\n              </summary>\n              <pre className={cn(\n                'mt-2 p-2 text-xs rounded bg-background bg-opacity-50 overflow-x-auto',\n                errorDetails.textClassName,\n                'opacity-80'\n              )}>\n                {message}\n              </pre>\n            </details>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};","import React, { createContext, useContext } from 'react';\n\n// Widget instance type - we'll define the actual widget interface based on what we need\ninterface WidgetInstance {\n  sessionId: string;\n  createConversation: (title?: string) => any;\n  switchConversation: (conversationId: string) => void;\n  getConversations: () => any[];\n  updateConversationTitle: (conversationId: string, newTitle: string) => void;\n  deleteConversation: (conversationId: string) => void;\n  configuration?: any;\n}\n\n// Create the context with undefined default\nconst WidgetContext = createContext<WidgetInstance | undefined>(undefined);\n\n// Provider component props\ninterface WidgetProviderProps {\n  widgetInstance: WidgetInstance;\n  children: React.ReactNode;\n}\n\n// Provider component that will wrap the widget's React tree\nexport const WidgetProvider: React.FC<WidgetProviderProps> = ({ widgetInstance, children }) => {\n  return (\n    <WidgetContext.Provider value={widgetInstance}>\n      {children}\n    </WidgetContext.Provider>\n  );\n};\n\n// Custom hook to use the widget instance from any component\nexport const useWidget = (): WidgetInstance => {\n  const context = useContext(WidgetContext);\n  if (!context) {\n    throw new Error('useWidget must be used within a WidgetProvider');\n  }\n  return context;\n};\n\n// Optional: Hook that returns null instead of throwing if no widget context\nexport const useWidgetSafe = (): WidgetInstance | null => {\n  const context = useContext(WidgetContext);\n  return context || null;\n};","import React, { createContext, useContext, useRef, ReactNode } from 'react';\nimport { StoreApi } from 'zustand';\nimport { createMessageStore, MessageStore } from '../store/widget-stores/messages';\nimport { createConversationStore, ConversationStore } from '../store/widget-stores/conversations';\nimport { createAgentStore, AgentStore } from '../store/widget-stores/agents';\n\n/**\n * Widget Store Context\n * \n * Provides instance-specific Zustand stores for each widget.\n * This ensures complete data isolation between multiple widgets.\n * \n * Each widget instance gets its own:\n * - Message store (for chat messages)\n * - Conversation store (for conversation management)\n * - Agent store (for agent selection)\n * \n * The config store remains global as API configuration should be shared.\n */\n\ninterface WidgetStores {\n  messageStore: StoreApi<MessageStore>;\n  conversationStore: StoreApi<ConversationStore>;\n  agentStore: StoreApi<AgentStore>;\n}\n\ninterface WidgetStoreContextValue {\n  stores: WidgetStores;\n}\n\nexport const WidgetStoreContext = createContext<WidgetStoreContextValue | null>(null);\n\ninterface WidgetStoreProviderProps {\n  children: ReactNode;\n  sessionId: string;\n}\n\n/**\n * Widget Store Provider\n * \n * Creates and provides instance-specific stores for a widget.\n * Stores are created once per widget instance and reused.\n */\nexport const WidgetStoreProvider: React.FC<WidgetStoreProviderProps> = ({ \n  children, \n  sessionId \n}) => {\n  // Use ref to ensure stores are only created once per widget instance\n  const storesRef = useRef<WidgetStores | null>(null);\n  \n  if (!storesRef.current) {\n    // Create stores in the correct order, passing references to dependent stores\n    const agentStore = createAgentStore(sessionId);\n    const conversationStore = createConversationStore(sessionId);\n    const messageStore = createMessageStore(sessionId, agentStore, conversationStore);\n    \n    storesRef.current = {\n      messageStore,\n      conversationStore,\n      agentStore,\n    };\n  }\n  \n  return (\n    <WidgetStoreContext.Provider value={{ stores: storesRef.current }}>\n      {children}\n    </WidgetStoreContext.Provider>\n  );\n};\n\n/**\n * Hook to access widget-specific stores\n */\nexport const useWidgetStores = (): WidgetStores => {\n  const context = useContext(WidgetStoreContext);\n  if (!context) {\n    throw new Error('useWidgetStores must be used within WidgetStoreProvider');\n  }\n  return context.stores;\n};\n\n/**\n * Individual store hooks for easier access\n */\nexport const useWidgetMessageStore = () => {\n  const { messageStore } = useWidgetStores();\n  return messageStore;\n};\n\nexport const useWidgetConversationStore = () => {\n  const { conversationStore } = useWidgetStores();\n  return conversationStore;\n};\n\nexport const useWidgetAgentStore = () => {\n  const { agentStore } = useWidgetStores();\n  return agentStore;\n};","/**\n * Widget Store Hooks\n * \n * These hooks automatically select between global and widget-specific stores\n * based on whether the component is rendered inside a widget context.\n */\n\nimport { useContext } from 'react';\nimport { useStore } from 'zustand';\nimport { WidgetStoreContext } from '../widget/WidgetStoreContext';\nimport { useMessageStore as useGlobalMessageStore } from '../store';\nimport { useConversationStore as useGlobalConversationStore } from '../store';\nimport { useAgentStore as useGlobalAgentStore } from '../store';\nimport type { MessageStore } from '../store/widget-stores/messages';\nimport type { ConversationStore } from '../store/widget-stores/conversations';\nimport type { AgentStore } from '../store/widget-stores/agents';\n\n/**\n * Check if we're inside a widget context\n */\nfunction useIsInWidgetContext(): boolean {\n  try {\n    const context = useContext(WidgetStoreContext);\n    return context !== null;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get widget stores if inside widget context\n */\nfunction useWidgetStores() {\n  const context = useContext(WidgetStoreContext);\n  return context?.stores;\n}\n\n/**\n * Message store hook that automatically selects the correct store\n */\nexport function useMessageStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  const globalStore = useGlobalMessageStore();\n  const widgetStore = useStore(\n    widgetStores?.messageStore || useGlobalMessageStore,\n    (state) => state\n  );\n  \n  return isInWidget && widgetStores ? widgetStore : globalStore;\n}\n\n/**\n * Conversation store hook that automatically selects the correct store\n */\nexport function useConversationStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  const globalStore = useGlobalConversationStore();\n  const widgetStore = useStore(\n    widgetStores?.conversationStore || useGlobalConversationStore,\n    (state) => state\n  );\n  \n  return isInWidget && widgetStores ? widgetStore : globalStore;\n}\n\n/**\n * Agent store hook that automatically selects the correct store\n */\nexport function useAgentStore() {\n  const isInWidget = useIsInWidgetContext();\n  const widgetStores = useWidgetStores();\n  const globalStore = useGlobalAgentStore();\n  const widgetStore = useStore(\n    widgetStores?.agentStore || useGlobalAgentStore,\n    (state) => state\n  );\n  \n  return isInWidget && widgetStores ? widgetStore : globalStore;\n}\n\n/**\n * Export convenience functions to check store source\n */\nexport function useIsUsingWidgetStore(): boolean {\n  return useIsInWidgetContext();\n}\n\n/**\n * Get the current session ID if in widget context\n */\nexport function useWidgetSessionId(): string | null {\n  const context = useContext(WidgetStoreContext);\n  if (!context) return null;\n  \n  // Extract session ID from the store's localStorage key\n  const messageStore = context.stores.messageStore;\n  const state = messageStore.getState();\n  \n  // Session ID would need to be added to context for retrieval\n  return null;\n}","/**\n * Theme Manager\n * \n * Orchestrates theme switching, loading, and lifecycle management.\n * Provides centralized access to all available voice themes.\n */\n\nimport { IVoiceTheme, ThemeMetadata, ThemeFactory, VoiceState } from './IVoiceTheme';\n\nexport interface ThemeTransitionOptions {\n  duration: number;\n  easing: 'linear' | 'ease-in' | 'ease-out' | 'ease-in-out';\n  crossfade: boolean;\n}\n\nexport interface ThemeRegistration {\n  id: string;\n  factory: ThemeFactory;\n  metadata: ThemeMetadata;\n}\n\n/**\n * Theme Manager - Singleton class for managing voice themes\n */\nexport class ThemeManager {\n  private static instance: ThemeManager;\n  private registeredThemes: Map<string, ThemeRegistration> = new Map();\n  private currentTheme: IVoiceTheme | null = null;\n  private canvas: HTMLCanvasElement | null = null;\n  private context: CanvasRenderingContext2D | null = null;\n  \n  // Transition state\n  private isTransitioning = false;\n  private transitionTheme: IVoiceTheme | null = null;\n  private transitionProgress = 0;\n  private transitionOptions: ThemeTransitionOptions = {\n    duration: 1000,\n    easing: 'ease-in-out',\n    crossfade: true\n  };\n\n  // Event callbacks\n  private callbacks: {\n    onThemeChange?: (oldTheme: string | null, newTheme: string) => void;\n    onTransitionStart?: (from: string | null, to: string) => void;\n    onTransitionComplete?: (themeId: string) => void;\n    onThemeError?: (error: Error, themeId: string) => void;\n  } = {};\n\n  private constructor() {\n    this.registerBuiltInThemes();\n  }\n\n  /**\n   * Get singleton instance\n   */\n  static getInstance(): ThemeManager {\n    if (!ThemeManager.instance) {\n      ThemeManager.instance = new ThemeManager();\n    }\n    return ThemeManager.instance;\n  }\n\n  /**\n   * Initialize with canvas context\n   */\n  initialize(canvas: HTMLCanvasElement, context: CanvasRenderingContext2D): void {\n    this.canvas = canvas;\n    this.context = context;\n    \n    // Initialize current theme if one is set\n    if (this.currentTheme && this.context) {\n      this.currentTheme.init(this.context, canvas.width, canvas.height);\n    }\n  }\n\n  /**\n   * Register a new theme\n   */\n  registerTheme(registration: ThemeRegistration): void {\n    if (this.registeredThemes.has(registration.id)) {\n      console.warn(`Theme ${registration.id} is already registered. Overwriting.`);\n    }\n    \n    this.registeredThemes.set(registration.id, registration);\n    console.log(`Registered theme: ${registration.id}`);\n  }\n\n  /**\n   * Unregister a theme\n   */\n  unregisterTheme(themeId: string): boolean {\n    if (this.currentTheme?.id === themeId) {\n      console.warn(`Cannot unregister active theme: ${themeId}`);\n      return false;\n    }\n    \n    return this.registeredThemes.delete(themeId);\n  }\n\n  /**\n   * Get all available themes metadata\n   */\n  getAvailableThemes(): ThemeMetadata[] {\n    return Array.from(this.registeredThemes.values()).map(reg => reg.metadata);\n  }\n\n  /**\n   * Get theme metadata by ID\n   */\n  getThemeMetadata(themeId: string): ThemeMetadata | null {\n    const registration = this.registeredThemes.get(themeId);\n    return registration ? registration.metadata : null;\n  }\n\n  /**\n   * Switch to a new theme\n   */\n  async switchTheme(themeId: string, transitionOptions?: Partial<ThemeTransitionOptions>): Promise<boolean> {\n    if (this.isTransitioning) {\n      console.warn('Theme transition already in progress');\n      return false;\n    }\n\n    const registration = this.registeredThemes.get(themeId);\n    if (!registration) {\n      const error = new Error(`Theme not found: ${themeId}`);\n      this.callbacks.onThemeError?.(error, themeId);\n      return false;\n    }\n\n    // If this is the current theme, no need to switch\n    if (this.currentTheme?.id === themeId) {\n      return true;\n    }\n\n    try {\n      // Update transition options\n      this.transitionOptions = { ...this.transitionOptions, ...transitionOptions };\n\n      // Create new theme instance\n      const newTheme = registration.factory();\n      \n      // Initialize with current context if available\n      if (this.context && this.canvas) {\n        newTheme.init(this.context, this.canvas.width, this.canvas.height);\n      }\n\n      // Start transition\n      await this.performThemeTransition(newTheme);\n      \n      return true;\n    } catch (error) {\n      console.error(`Failed to switch to theme ${themeId}:`, error);\n      this.callbacks.onThemeError?.(error as Error, themeId);\n      return false;\n    }\n  }\n\n  /**\n   * Get current active theme\n   */\n  getCurrentTheme(): IVoiceTheme | null {\n    return this.currentTheme;\n  }\n\n  /**\n   * Get current theme ID\n   */\n  getCurrentThemeId(): string | null {\n    return this.currentTheme?.id || null;\n  }\n\n  /**\n   * Set event callbacks\n   */\n  setCallbacks(callbacks: Partial<typeof this.callbacks>): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Draw current theme (delegated from Canvas component)\n   */\n  draw(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void {\n    if (this.isTransitioning && this.transitionOptions.crossfade) {\n      this.drawTransition(context, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    } else if (this.currentTheme) {\n      this.currentTheme.draw(context, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    }\n  }\n\n  /**\n   * Forward state changes to current theme\n   */\n  onUserSpeaking(): void {\n    this.currentTheme?.onUserSpeaking();\n    this.transitionTheme?.onUserSpeaking();\n  }\n\n  onProcessing(): void {\n    this.currentTheme?.onProcessing();\n    this.transitionTheme?.onProcessing();\n  }\n\n  onAiSpeaking(): void {\n    this.currentTheme?.onAiSpeaking();\n    this.transitionTheme?.onAiSpeaking();\n  }\n\n  reset(): void {\n    this.currentTheme?.reset();\n    this.transitionTheme?.reset();\n  }\n\n  /**\n   * Forward mouse events to current theme\n   */\n  setMousePosition(x: number, y: number, canvasWidth: number, canvasHeight: number): void {\n    this.currentTheme?.setMousePosition(x, y, canvasWidth, canvasHeight);\n    this.transitionTheme?.setMousePosition(x, y, canvasWidth, canvasHeight);\n  }\n\n  setHovering(hovering: boolean): void {\n    this.currentTheme?.setHovering(hovering);\n    this.transitionTheme?.setHovering(hovering);\n  }\n\n  /**\n   * Get performance metrics from current theme\n   */\n  getPerformanceMetrics() {\n    return this.currentTheme?.getPerformanceMetrics() || {};\n  }\n\n  /**\n   * Dispose of all resources\n   */\n  dispose(): void {\n    this.currentTheme?.dispose();\n    this.transitionTheme?.dispose();\n    this.currentTheme = null;\n    this.transitionTheme = null;\n    this.isTransitioning = false;\n  }\n\n  // Private methods\n\n  /**\n   * Register built-in themes\n   */\n  private registerBuiltInThemes(): void {\n    // Import themes dynamically to avoid circular dependencies\n    import('./DefaultTheme').then(({ DefaultTheme }) => {\n      this.registerTheme({\n        id: 'default',\n        factory: () => new DefaultTheme(),\n        metadata: {\n          id: 'default',\n          name: 'Classic Sphere',\n          description: 'The original 3D particle sphere with smooth color transitions',\n          category: 'particle',\n          performanceProfile: 'medium',\n          previewColors: ['#4285F4', '#34A853', '#EA4335'],\n          previewDescription: 'Rotating particle sphere with dynamic colors'\n        }\n      });\n    });\n\n    import('./StarfieldTheme').then(({ StarfieldTheme }) => {\n      this.registerTheme({\n        id: 'starfield',\n        factory: () => new StarfieldTheme(),\n        metadata: {\n          id: 'starfield',\n          name: 'Cosmic Starfield',\n          description: 'Twinkling stars, dynamic constellations, and flowing nebula clouds',\n          category: 'particle',\n          performanceProfile: 'medium',\n          previewColors: ['#FFFFFF', '#ADD8E6', '#FFD700', '#FFC0CB'],\n          previewDescription: 'Immersive space environment with stars and constellations'\n        }\n      });\n    });\n\n    import('./JarvisTheme').then(({ JarvisTheme }) => {\n      this.registerTheme({\n        id: 'jarvis',\n        factory: () => new JarvisTheme(),\n        metadata: {\n          id: 'jarvis',\n          name: 'J.A.R.V.I.S.',\n          description: 'Advanced AI interface with arc reactor, HUD elements, and energy particles',\n          category: 'advanced',\n          performanceProfile: 'heavy',\n          previewColors: ['#00A2E8', '#00FFFF', '#FF6500', '#FF00FF'],\n          previewDescription: 'Iron Man-inspired technological interface with arc reactor'\n        }\n      });\n    });\n\n    import('./LegoTheme').then(({ LegoTheme }) => {\n      this.registerTheme({\n        id: 'lego',\n        factory: () => new LegoTheme(),\n        metadata: {\n          id: 'lego',\n          name: 'LEGO Blocks',\n          description: '3D building blocks that construct and deconstruct with satisfying physics',\n          category: 'artistic',\n          performanceProfile: 'medium',\n          previewColors: ['#C4281C', '#0D69AB', '#12852B', '#F5CD2F'],\n          previewDescription: 'Interactive LEGO blocks building structures with authentic colors'\n        }\n      });\n    });\n\n    import('./StarWarsTheme').then(({ StarWarsTheme }) => {\n      this.registerTheme({\n        id: 'starwars',\n        factory: () => new StarWarsTheme(),\n        metadata: {\n          id: 'starwars',\n          name: 'Star Wars',\n          description: 'Lightsabers, holograms, and the Force in a galaxy far, far away',\n          category: 'advanced',\n          performanceProfile: 'heavy',\n          previewColors: ['#00A2FF', '#FF0000', '#00FF00', '#9333EA'],\n          previewDescription: 'Epic Star Wars experience with lightsabers and hologram effects'\n        }\n      });\n    });\n\n    import('./OceanWaveTheme').then(({ OceanWaveTheme }) => {\n      this.registerTheme({\n        id: 'ocean',\n        factory: () => new OceanWaveTheme(),\n        metadata: {\n          id: 'ocean',\n          name: 'Ocean Waves',\n          description: 'Calming underwater environment with waves, bubbles, and marine life',\n          category: 'particle',\n          performanceProfile: 'medium',\n          previewColors: ['#0077BE', '#00BCF2', '#C8E6FF', '#98CB3B'],\n          previewDescription: 'Serene ocean experience with realistic wave physics and bubbles'\n        }\n      });\n    });\n\n    import('./NFTTheme').then(({ NFTTheme }) => {\n      this.registerTheme({\n        id: 'nft',\n        factory: () => new NFTTheme(),\n        metadata: {\n          id: 'nft',\n          name: 'NFT Art',\n          description: 'Vibrant digital art with morphing shapes, dynamic gradients, and artistic trails',\n          category: 'artistic',\n          performanceProfile: 'heavy',\n          previewColors: ['#FF00FF', '#00FFFF', '#FFFF00', '#8000FF', '#FF0080'],\n          previewDescription: 'Bold NFT-style aesthetics with morphing geometric shapes'\n        }\n      });\n    });\n\n    import('./NothingPhoneTheme').then(({ NothingPhoneTheme }) => {\n      this.registerTheme({\n        id: 'nothing',\n        factory: () => new NothingPhoneTheme(),\n        metadata: {\n          id: 'nothing',\n          name: 'Nothing Phone',\n          description: 'Minimalist design inspired by Nothing Phone with clean dots and typography',\n          category: 'artistic',\n          performanceProfile: 'light',\n          previewColors: ['#FFFFFF', '#F5F5F5', '#C8C8C8', '#808080', '#000000'],\n          previewDescription: 'Clean minimalist interface with Glyph-inspired dot patterns'\n        }\n      });\n    });\n\n    import('./MinecraftTheme').then(({ MinecraftTheme }) => {\n      this.registerTheme({\n        id: 'minecraft',\n        factory: () => new MinecraftTheme(),\n        metadata: {\n          id: 'minecraft',\n          name: 'Minecraft',\n          description: 'Blocky voxel world with building, breaking, and crafting animations',\n          category: 'artistic',\n          performanceProfile: 'medium',\n          previewColors: ['#7CBD52', '#FEF63F', '#A28A4E', '#63EDE5', '#888888'],\n          previewDescription: 'Interactive voxel blocks with authentic Minecraft aesthetics'\n        }\n      });\n    });\n\n    import('./FuturisticTheme').then(({ FuturisticTheme }) => {\n      this.registerTheme({\n        id: 'futuristic',\n        factory: () => new FuturisticTheme(),\n        metadata: {\n          id: 'futuristic',\n          name: 'Futuristic',\n          description: 'High-tech cyberpunk interface with holograms, wireframes, and data streams',\n          category: 'advanced',\n          performanceProfile: 'heavy',\n          previewColors: ['#00FFFF', '#FF00FF', '#FFFF00', '#00FF00', '#0096FF'],\n          previewDescription: 'Cyberpunk-inspired holographic displays and wireframe models'\n        }\n      });\n    });\n\n    import('./VintageModernTheme').then(({ VintageModernTheme }) => {\n      this.registerTheme({\n        id: 'vintage-modern',\n        factory: () => new VintageModernTheme(),\n        metadata: {\n          id: 'vintage-modern',\n          name: 'Vintage Modern',\n          description: 'Retro aesthetics meets modern design with film grain and neon glow',\n          category: 'artistic',\n          performanceProfile: 'medium',\n          previewColors: ['#FF6F91', '#FF9A00', '#ED75FF', '#5FE1FA', '#FFF176'],\n          previewDescription: 'Nostalgic blend of retro TV effects with modern animations'\n        }\n      });\n    });\n\n    import('./AuroraTheme').then(({ AuroraTheme }) => {\n      this.registerTheme({\n        id: 'aurora',\n        factory: () => new AuroraTheme(),\n        metadata: {\n          id: 'aurora',\n          name: 'Aurora Borealis',\n          description: 'Ethereal northern lights with flowing ribbons and magnetic fields',\n          category: 'particle',\n          performanceProfile: 'heavy',\n          previewColors: ['#00FF00', '#0064FF', '#9300D3', '#FF0064', '#5FE1FA'],\n          previewDescription: 'Mesmerizing aurora borealis with realistic light bands'\n        }\n      });\n    });\n\n    console.log('ThemeManager: Built-in themes registered');\n  }\n\n  /**\n   * Perform theme transition\n   */\n  private async performThemeTransition(newTheme: IVoiceTheme): Promise<void> {\n    const oldTheme = this.currentTheme;\n    const oldThemeId = oldTheme?.id || null;\n    \n    this.isTransitioning = true;\n    this.transitionTheme = newTheme;\n    this.transitionProgress = 0;\n\n    // Notify callbacks\n    this.callbacks.onTransitionStart?.(oldThemeId, newTheme.id);\n\n    // If crossfade is disabled, immediately switch\n    if (!this.transitionOptions.crossfade) {\n      this.completeTransition(newTheme, oldTheme);\n      return;\n    }\n\n    // Animate transition\n    return new Promise((resolve) => {\n      const startTime = performance.now();\n      const { duration, easing } = this.transitionOptions;\n\n      const animate = (currentTime: number) => {\n        const elapsed = currentTime - startTime;\n        let progress = Math.min(elapsed / duration, 1);\n\n        // Apply easing\n        progress = this.applyEasing(progress, easing);\n        this.transitionProgress = progress;\n\n        if (progress >= 1) {\n          this.completeTransition(newTheme, oldTheme);\n          resolve();\n        } else {\n          requestAnimationFrame(animate);\n        }\n      };\n\n      requestAnimationFrame(animate);\n    });\n  }\n\n  /**\n   * Complete theme transition\n   */\n  private completeTransition(newTheme: IVoiceTheme, oldTheme: IVoiceTheme | null): void {\n    // Clean up old theme\n    oldTheme?.dispose();\n\n    // Set new theme as current\n    this.currentTheme = newTheme;\n    this.transitionTheme = null;\n    this.isTransitioning = false;\n    this.transitionProgress = 0;\n\n    // Notify callbacks\n    this.callbacks.onThemeChange?.(oldTheme?.id || null, newTheme.id);\n    this.callbacks.onTransitionComplete?.(newTheme.id);\n\n    console.log(`Theme switched to: ${newTheme.id}`);\n  }\n\n  /**\n   * Draw crossfade transition between themes\n   */\n  private drawTransition(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void {\n    // Create temporary canvases for each theme\n    const tempCanvas1 = document.createElement('canvas');\n    const tempCanvas2 = document.createElement('canvas');\n    tempCanvas1.width = tempCanvas2.width = displayWidth;\n    tempCanvas1.height = tempCanvas2.height = displayHeight;\n    \n    const tempCtx1 = tempCanvas1.getContext('2d');\n    const tempCtx2 = tempCanvas2.getContext('2d');\n\n    if (!tempCtx1 || !tempCtx2) return;\n\n    // Draw old theme to first canvas\n    if (this.currentTheme) {\n      this.currentTheme.draw(tempCtx1, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    }\n\n    // Draw new theme to second canvas\n    if (this.transitionTheme) {\n      this.transitionTheme.draw(tempCtx2, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n    }\n\n    // Clear main canvas\n    context.clearRect(0, 0, displayWidth, displayHeight);\n\n    // Draw old theme with fading alpha\n    context.globalAlpha = 1 - this.transitionProgress;\n    context.drawImage(tempCanvas1, 0, 0);\n\n    // Draw new theme with increasing alpha\n    context.globalAlpha = this.transitionProgress;\n    context.drawImage(tempCanvas2, 0, 0);\n\n    // Reset alpha\n    context.globalAlpha = 1;\n  }\n\n  /**\n   * Apply easing function to transition progress\n   */\n  private applyEasing(t: number, easing: string): number {\n    switch (easing) {\n      case 'linear':\n        return t;\n      case 'ease-in':\n        return t * t;\n      case 'ease-out':\n        return t * (2 - t);\n      case 'ease-in-out':\n        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n      default:\n        return t;\n    }\n  }\n}\n\n/**\n * Convenience function to get theme manager instance\n */\nexport const getThemeManager = () => ThemeManager.getInstance();","import { useEffect, useRef, forwardRef } from \"react\";\nimport { getThemeManager } from '@/lib/voice/themes/ThemeManager';\nimport { DefaultTheme } from '@/lib/voice/themes/DefaultTheme';\nimport { throttle, debounce } from '@/lib/utils/throttle';\n\ninterface CanvasProps {\n  // Classic theme only - no theme switching\n}\n\nconst Canvas = forwardRef<HTMLCanvasElement, CanvasProps>(({}, ref) => {\n  const internalRef = useRef<HTMLCanvasElement>(null);\n  const canvasRef = (ref as any) || internalRef;\n  const themeManagerRef = useRef(getThemeManager());\n  const isInitializedRef = useRef(false);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const context = canvas.getContext('2d');\n    if (!context) return;\n\n    const themeManager = themeManagerRef.current;\n\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n    \n    // Debounce resize to prevent excessive updates\n    const debouncedResize = debounce(resizeCanvas, 250);\n\n    resizeCanvas();\n    window.addEventListener('resize', debouncedResize);\n\n    // Initialize theme manager with canvas context\n    if (!isInitializedRef.current) {\n      themeManager.initialize(canvas, context);\n      \n      // Register default theme if not already registered\n      if (!themeManager.getThemeMetadata('default')) {\n        themeManager.registerTheme({\n          id: 'default',\n          factory: () => new DefaultTheme(),\n          metadata: {\n            id: 'default',\n            name: 'Classic Sphere',\n            description: 'The original 3D particle sphere with smooth color transitions',\n            category: 'particle',\n            performanceProfile: 'medium',\n            previewColors: ['#4285F4', '#34A853', '#EA4335'],\n            previewDescription: 'Rotating particle sphere with dynamic colors'\n          }\n        });\n      }\n\n      // Use default theme only\n      themeManager.switchTheme('default');\n      isInitializedRef.current = true;\n    }\n\n    // Throttled mouse move handler for better performance\n    const handleMouseMove = throttle((event: MouseEvent) => {\n      const rect = canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      themeManager.setMousePosition(x, y, canvas.width, canvas.height);\n    }, 16); // ~60fps for mouse movements\n\n    const handleMouseEnter = () => {\n      themeManager.setHovering(true);\n    };\n\n    const handleMouseLeave = () => {\n      themeManager.setHovering(false);\n    };\n\n    // Add mouse event listeners\n    canvas.addEventListener('mousemove', handleMouseMove);\n    canvas.addEventListener('mouseenter', handleMouseEnter);\n    canvas.addEventListener('mouseleave', handleMouseLeave);\n\n    let animationFrameId: number;\n    let lastTime = 0;\n    const targetFPS = 30; // Target 30 FPS for better performance\n    const frameInterval = 1000 / targetFPS;\n    \n    // Performance monitoring\n    let frameCount = 0;\n    let fpsTime = performance.now();\n    let currentFPS = targetFPS;\n\n    const render = (currentTime: number) => {\n      const deltaTime = currentTime - lastTime;\n      \n      // Only render if enough time has passed for target FPS\n      if (deltaTime >= frameInterval) {\n        // Update lastTime, adjusting for any time drift\n        lastTime = currentTime - (deltaTime % frameInterval);\n        \n        // Get current canvas dimensions\n        const currentWidth = canvas.width;\n        const currentHeight = canvas.height;\n        const currentProjCenterX = currentWidth / 2;\n        const currentProjCenterY = currentHeight / 2;\n        \n        // Delegate drawing to theme manager\n        themeManager.draw(context, currentWidth, currentHeight, currentProjCenterX, currentProjCenterY, deltaTime);\n        \n        // Performance monitoring\n        frameCount++;\n        const now = performance.now();\n        if (now - fpsTime >= 1000) {\n          currentFPS = frameCount;\n          frameCount = 0;\n          fpsTime = now;\n          \n          // Log performance warnings\n          if (currentFPS < targetFPS * 0.8) {\n            console.warn(`[VOICE-CANVAS] Low FPS detected: ${currentFPS}/${targetFPS}`);\n          }\n        }\n      }\n      \n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    \n    // Start the animation loop\n    animationFrameId = window.requestAnimationFrame(render);\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n      window.removeEventListener('resize', debouncedResize);\n      canvas.removeEventListener('mousemove', handleMouseMove);\n      canvas.removeEventListener('mouseenter', handleMouseEnter);\n      canvas.removeEventListener('mouseleave', handleMouseLeave);\n    };\n  }, []);\n\n  // Expose theme actions for parent component to call\n  (Canvas as any).getThemeManager = () => themeManagerRef.current;\n  (Canvas as any).onUserSpeaking = () => themeManagerRef.current.onUserSpeaking();\n  (Canvas as any).onProcessing = () => themeManagerRef.current.onProcessing();\n  (Canvas as any).onAiSpeaking = () => themeManagerRef.current.onAiSpeaking();\n  (Canvas as any).reset = () => themeManagerRef.current.reset();\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"absolute inset-0 w-full h-full\"\n      style={{ background: 'transparent' }}\n    />\n  );\n});\n\nCanvas.displayName = 'Canvas';\n\nexport default Canvas;","/**\n * Throttle function that limits how often a function can be called\n * @param func Function to throttle\n * @param delay Minimum time between calls in milliseconds\n * @returns Throttled function\n */\nexport function throttle<T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let lastCall = 0;\n  let timeoutId: NodeJS.Timeout | null = null;\n\n  return (...args: Parameters<T>) => {\n    const now = Date.now();\n    const timeSinceLastCall = now - lastCall;\n\n    if (timeSinceLastCall >= delay) {\n      lastCall = now;\n      func(...args);\n    } else {\n      // Schedule a call for the remaining time\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n      \n      const remainingTime = delay - timeSinceLastCall;\n      timeoutId = setTimeout(() => {\n        lastCall = Date.now();\n        func(...args);\n        timeoutId = null;\n      }, remainingTime);\n    }\n  };\n}\n\n/**\n * Debounce function that delays executing a function until after a specified time has elapsed\n * @param func Function to debounce\n * @param delay Time to wait in milliseconds\n * @returns Debounced function\n */\nexport function debounce<T extends (...args: any[]) => any>(\n  func: T,\n  delay: number\n): (...args: Parameters<T>) => void {\n  let timeoutId: NodeJS.Timeout | null = null;\n\n  return (...args: Parameters<T>) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    \n    timeoutId = setTimeout(() => {\n      func(...args);\n      timeoutId = null;\n    }, delay);\n  };\n}","import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\nexport type VoiceOption = 'alloy' | 'echo' | 'fable' | 'onyx' | 'nova' | 'shimmer';\nexport type PersonaOption = 'assistant' | 'creative' | 'analytical' | 'casual' | 'professional';\n\ninterface VoiceSettings {\n  selectedVoice: VoiceOption;\n  selectedPersona: PersonaOption;\n  isVoiceModalOpen: boolean;\n}\n\ninterface VoiceSettingsActions {\n  setVoice: (voice: VoiceOption) => void;\n  setPersona: (persona: PersonaOption) => void;\n  setVoiceModalOpen: (isOpen: boolean) => void;\n  getSettings: () => Omit<VoiceSettings, 'isVoiceModalOpen'>;\n}\n\nexport type VoiceSettingsStore = VoiceSettings & VoiceSettingsActions;\n\n/**\n * Voice Settings Store\n * \n * Persists user's voice preferences including:\n * - Voice selection (OpenAI TTS voices)\n * - Persona selection (conversation style)\n */\nexport const useVoiceSettingsStore = create<VoiceSettingsStore>()(\n  persist(\n    (set, get) => ({\n      // Default settings\n      selectedVoice: 'alloy',\n      selectedPersona: 'assistant',\n      isVoiceModalOpen: false,\n\n      setVoice: (voice: VoiceOption) => {\n        set({ selectedVoice: voice });\n      },\n\n      setPersona: (persona: PersonaOption) => {\n        set({ selectedPersona: persona });\n      },\n\n      setVoiceModalOpen: (isOpen: boolean) => {\n        set({ isVoiceModalOpen: isOpen });\n      },\n\n      getSettings: () => {\n        const state = get();\n        return {\n          selectedVoice: state.selectedVoice,\n          selectedPersona: state.selectedPersona,\n        };\n      },\n    }),\n    {\n      name: 'customgpt-voice-settings',\n      // Persist all voice settings except modal state\n      partialize: (state) => ({\n        selectedVoice: state.selectedVoice,\n        selectedPersona: state.selectedPersona,\n        // Don't persist isVoiceModalOpen - always start as false\n      }),\n    }\n  )\n);\n\n// Export helper to get persona system prompts\nexport const getPersonaSystemPrompt = (persona: PersonaOption): string => {\n  const prompts: Record<PersonaOption, string> = {\n    assistant: 'You are a helpful assistant with a voice interface. Keep your responses concise and informative, limited to 1-2 sentences since the user is interacting through voice.',\n    creative: 'You are a creative and imaginative assistant with a voice interface. Be playful and artistic in your responses while keeping them brief (1-2 sentences) for voice interaction.',\n    analytical: 'You are a logical and precise assistant with a voice interface. Provide clear, data-driven responses in 1-2 concise sentences suitable for voice interaction.',\n    casual: 'You are a relaxed and conversational assistant with a voice interface. Keep responses friendly and informal, limited to 1-2 sentences for natural voice interaction.',\n    professional: 'You are a formal and business-focused assistant with a voice interface. Maintain a professional tone while keeping responses brief (1-2 sentences) for voice interaction.',\n  };\n  \n  return prompts[persona];\n};","'use client';\n\nimport { useState, useRef, useEffect } from 'react';\nimport { Settings, Mic, User, X, ExternalLink } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { useAgentStore } from '@/store/agents';\nimport { useVoiceSettingsStore } from '@/store/voice-settings';\n\ninterface VoiceSettingsProps {\n  isOpen: boolean;\n  onClose: () => void;\n  projectId?: string;\n}\n\nexport function VoiceSettings({ isOpen, onClose, projectId }: VoiceSettingsProps) {\n  console.log('🎛️ VoiceSettings render - isOpen:', isOpen);\n  \n  // Use persisted settings from store\n  const { selectedVoice, selectedPersona, setVoice, setPersona } = useVoiceSettingsStore();\n  const router = useRouter();\n  const { currentAgent, updateSettings } = useAgentStore();\n  \n  // Local state for preview before saving\n  const [previewVoice, setPreviewVoice] = useState(selectedVoice);\n  const [previewPersona, setPreviewPersona] = useState(selectedPersona);\n  const [previewModel, setPreviewModel] = useState(currentAgent?.settings?.chatbot_model || 'gpt-3.5-turbo');\n  \n  // Reset preview to saved values when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setPreviewVoice(selectedVoice);\n      setPreviewPersona(selectedPersona);\n      setPreviewModel(currentAgent?.settings?.chatbot_model || 'gpt-3.5-turbo');\n    }\n  }, [isOpen, selectedVoice, selectedPersona, currentAgent]);\n\n  const voices = [\n    { id: 'alloy', name: 'Alloy', desc: 'Neutral' },\n    { id: 'echo', name: 'Echo', desc: 'Clear' },\n    { id: 'fable', name: 'Fable', desc: 'Warm' },\n    { id: 'onyx', name: 'Onyx', desc: 'Deep' },\n    { id: 'nova', name: 'Nova', desc: 'Bright' },\n    { id: 'shimmer', name: 'Shimmer', desc: 'Smooth' }\n  ];\n\n  const personas = [\n    { id: 'assistant', name: 'Assistant', desc: 'Helpful' },\n    { id: 'creative', name: 'Creative', desc: 'Artistic' },\n    { id: 'analytical', name: 'Analytical', desc: 'Logical' },\n    { id: 'casual', name: 'Casual', desc: 'Relaxed' },\n    { id: 'professional', name: 'Professional', desc: 'Formal' }\n  ];\n  \n  const handleOpenProjectSettings = () => {\n    if (projectId) {\n      onClose();\n      router.push(`/projects?id=${projectId}`);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-[10001] bg-black/50 backdrop-blur-sm flex items-center justify-center p-4\">\n      <div className=\"bg-gray-900 rounded-2xl border border-gray-700 w-full max-w-2xl max-h-[70vh] flex flex-col\">\n        {/* Header */}\n        <div className=\"p-4 border-b border-gray-700 flex items-center justify-between flex-shrink-0\">\n          <div className=\"flex items-center gap-3\">\n            <Settings className=\"w-5 h-5 text-white\" />\n            <h2 className=\"text-lg font-semibold text-white\">Voice Settings</h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"w-8 h-8 rounded-full bg-gray-700 hover:bg-gray-600 flex items-center justify-center transition-colors\"\n          >\n            <X className=\"w-4 h-4 text-white\" />\n          </button>\n        </div>\n\n        {/* Main Content */}\n        <div className=\"flex-1 overflow-y-auto p-6 space-y-6\">\n          {/* Settings Grid */}\n          <div className=\"grid grid-cols-1 gap-6\">\n            {/* Voice Selection */}\n            <div>\n              <div className=\"flex items-center gap-2 mb-3\">\n                <Mic className=\"w-4 h-4 text-white\" />\n                <h3 className=\"text-sm font-semibold text-white uppercase tracking-wider\">Voice</h3>\n              </div>\n              <div className=\"grid grid-cols-3 gap-2\">\n                {voices.map((voice) => (\n                  <button\n                    key={voice.id}\n                    onClick={() => setPreviewVoice(voice.id as any)}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewVoice === voice.id\n                        ? 'border-blue-500 bg-blue-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">{voice.name}</div>\n                    <div className=\"text-xs text-gray-400\">{voice.desc}</div>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Persona Selection */}\n            <div>\n              <div className=\"flex items-center gap-2 mb-3\">\n                <User className=\"w-4 h-4 text-white\" />\n                <h3 className=\"text-sm font-semibold text-white uppercase tracking-wider\">Persona</h3>\n              </div>\n              <div className=\"grid grid-cols-3 gap-2\">\n                {personas.map((persona) => (\n                  <button\n                    key={persona.id}\n                    onClick={() => setPreviewPersona(persona.id as any)}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewPersona === persona.id\n                        ? 'border-purple-500 bg-purple-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">{persona.name}</div>\n                    <div className=\"text-xs text-gray-400\">{persona.desc}</div>\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            {/* Model Selection */}\n            {projectId && currentAgent && (\n              <div>\n                <div className=\"flex items-center gap-2 mb-3\">\n                  <Settings className=\"w-4 h-4 text-white\" />\n                  <h3 className=\"text-sm font-semibold text-white uppercase tracking-wider\">Model</h3>\n                </div>\n                <div className=\"grid grid-cols-3 gap-2\">\n                  <button\n                    onClick={() => setPreviewModel('gpt-3.5-turbo')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'gpt-3.5-turbo'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">GPT-3.5</div>\n                    <div className=\"text-xs text-gray-400\">Fast</div>\n                  </button>\n                  <button\n                    onClick={() => setPreviewModel('gpt-4')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'gpt-4'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">GPT-4</div>\n                    <div className=\"text-xs text-gray-400\">Powerful</div>\n                  </button>\n                  <button\n                    onClick={() => setPreviewModel('gpt-4-o')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'gpt-4-o'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">GPT-4o</div>\n                    <div className=\"text-xs text-gray-400\">Optimized</div>\n                  </button>\n                  <button\n                    onClick={() => setPreviewModel('claude-3-opus')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'claude-3-opus'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">Claude 3 Opus</div>\n                    <div className=\"text-xs text-gray-400\">Powerful</div>\n                  </button>\n                  <button\n                    onClick={() => setPreviewModel('claude-3-sonnet')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'claude-3-sonnet'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">Claude 3 Sonnet</div>\n                    <div className=\"text-xs text-gray-400\">Balanced</div>\n                  </button>\n                  <button\n                    onClick={() => setPreviewModel('claude-3-haiku')}\n                    className={`p-3 rounded-lg border transition-all text-left ${\n                      previewModel === 'claude-3-haiku'\n                        ? 'border-green-500 bg-green-500/10'\n                        : 'border-gray-600 bg-gray-800/50 hover:bg-gray-700/50'\n                    }`}\n                  >\n                    <div className=\"text-sm font-medium text-white\">Claude 3 Haiku</div>\n                    <div className=\"text-xs text-gray-400\">Fast</div>\n                  </button>\n                </div>\n                <p className=\"text-xs text-gray-400 mt-2\">\n                  Recommended for voice: Mini models provide faster responses\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"p-4 border-t border-gray-700 flex justify-end gap-3 flex-shrink-0\">\n          <button\n            onClick={() => {\n              setPreviewVoice(selectedVoice);\n              setPreviewPersona(selectedPersona);\n              setPreviewModel(currentAgent?.settings?.chatbot_model || 'gpt-3.5-turbo');\n              onClose();\n            }}\n            className=\"px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-lg text-white text-sm transition-colors\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={async () => {\n              // Save voice and persona settings\n              setVoice(previewVoice as any);\n              setPersona(previewPersona as any);\n              \n              // Update agent's model setting if it changed\n              if (currentAgent && previewModel !== currentAgent.settings?.chatbot_model) {\n                try {\n                  await updateSettings(currentAgent.id, {\n                    chatbot_model: previewModel\n                  });\n                } catch (error) {\n                  console.error('Failed to update model setting:', error);\n                  // Continue with closing the modal even if model update fails\n                }\n              }\n              \n              onClose();\n            }}\n            className=\"px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-white text-sm transition-colors\"\n          >\n            Save Settings\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}","/**\n * Streaming TTS Manager\n * \n * Handles chunked text-to-speech for faster voice responses\n */\n\nexport class StreamingTTSManager {\n  private audioQueue: AudioBuffer[] = [];\n  private pendingChunks: Map<number, AudioBuffer> = new Map(); // Store chunks by ID\n  private nextExpectedChunkId = 0; // Track which chunk should play next\n  private isPlaying = false;\n  private audioContext: AudioContext | null = null;\n  private currentSource: AudioBufferSourceNode | null = null;\n  private onPlaybackComplete?: () => void;\n  private onError?: (error: string) => void;\n\n  constructor() {\n    this.initAudioContext();\n  }\n\n  private async initAudioContext() {\n    try {\n      this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      \n      // Resume context if suspended (required for mobile)\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume();\n      }\n    } catch (error) {\n      console.error('Failed to initialize AudioContext:', error);\n    }\n  }\n\n  /**\n   * Add a text chunk to be converted to speech and queued\n   */\n  async addTextChunk(text: string, voice: string = 'alloy') {\n    try {\n      // Convert text to speech\n      const audioBuffer = await this.textToSpeech(text, voice);\n      \n      // Add to queue\n      this.audioQueue.push(audioBuffer);\n      \n      // Start playing if not already playing\n      if (!this.isPlaying) {\n        this.playNextChunk();\n      }\n    } catch (error) {\n      console.error('Failed to add text chunk:', error);\n      this.onError?.('Failed to generate speech for chunk');\n    }\n  }\n\n  /**\n   * Add a pre-generated audio buffer directly to the queue\n   * Used for streaming responses that provide ready audio chunks\n   */\n  async addAudioBuffer(audioBuffer: AudioBuffer) {\n    try {\n      // Add to queue - for backward compatibility without chunk ID\n      this.audioQueue.push(audioBuffer);\n      \n      // Start playing if not already playing\n      if (!this.isPlaying) {\n        this.playNextChunk();\n      }\n    } catch (error) {\n      console.error('Failed to add audio buffer:', error);\n      this.onError?.('Failed to queue audio buffer');\n    }\n  }\n\n  /**\n   * Add an audio buffer with a specific chunk ID to ensure ordered playback\n   */\n  async addAudioBufferWithId(audioBuffer: AudioBuffer, chunkId: number) {\n    try {\n      console.log(`[StreamingTTS] Adding chunk ${chunkId}, expecting ${this.nextExpectedChunkId}`);\n      \n      // Store the chunk\n      this.pendingChunks.set(chunkId, audioBuffer);\n      \n      // Check if we can queue any pending chunks in order\n      while (this.pendingChunks.has(this.nextExpectedChunkId)) {\n        const chunk = this.pendingChunks.get(this.nextExpectedChunkId)!;\n        this.pendingChunks.delete(this.nextExpectedChunkId);\n        \n        console.log(`[StreamingTTS] Queuing chunk ${this.nextExpectedChunkId} in order`);\n        this.audioQueue.push(chunk);\n        this.nextExpectedChunkId++;\n        \n        // Start playing if not already playing\n        if (!this.isPlaying) {\n          this.playNextChunk();\n        }\n      }\n      \n      console.log(`[StreamingTTS] Pending chunks: ${Array.from(this.pendingChunks.keys()).sort().join(', ')}`);\n    } catch (error) {\n      console.error('Failed to add audio buffer with ID:', error);\n      this.onError?.('Failed to queue audio buffer');\n    }\n  }\n\n  /**\n   * Convert text to speech using OpenAI TTS API\n   */\n  private async textToSpeech(text: string, voice: string): Promise<AudioBuffer> {\n    if (!text.trim()) {\n      throw new Error('Empty text provided');\n    }\n\n    // Call TTS API\n    const response = await fetch('/api/proxy/tts/stream', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        model: 'tts-1', // Use faster model for streaming\n        input: text,\n        voice: voice,\n        response_format: 'mp3'\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`TTS API error: ${response.status}`);\n    }\n\n    const audioBlob = await response.blob();\n    const arrayBuffer = await audioBlob.arrayBuffer();\n\n    if (!this.audioContext) {\n      throw new Error('AudioContext not initialized');\n    }\n\n    return await this.audioContext.decodeAudioData(arrayBuffer);\n  }\n\n  /**\n   * Play the next audio chunk in the queue\n   */\n  private async playNextChunk() {\n    if (this.audioQueue.length === 0) {\n      this.isPlaying = false;\n      this.onPlaybackComplete?.();\n      return;\n    }\n\n    if (!this.audioContext) {\n      console.error('AudioContext not available');\n      return;\n    }\n\n    this.isPlaying = true;\n    const audioBuffer = this.audioQueue.shift();\n\n    if (!audioBuffer) return;\n\n    try {\n      // Create and configure audio source\n      this.currentSource = this.audioContext.createBufferSource();\n      this.currentSource.buffer = audioBuffer;\n      this.currentSource.connect(this.audioContext.destination);\n\n      // Set up completion handler\n      this.currentSource.onended = () => {\n        this.currentSource = null;\n        // Add a small delay between chunks for smoother playback\n        setTimeout(() => {\n          this.playNextChunk(); // Play next chunk\n        }, 50);\n      };\n\n      // Start playback\n      this.currentSource.start(0);\n      \n    } catch (error) {\n      console.error('Failed to play audio chunk:', error);\n      // Try to continue with the next chunk\n      setTimeout(() => {\n        this.playNextChunk();\n      }, 100);\n    }\n  }\n\n  /**\n   * Stop all playback and clear queue\n   */\n  stopPlayback() {\n    // Stop current audio\n    if (this.currentSource) {\n      try {\n        this.currentSource.stop();\n      } catch (error) {\n        // Ignore errors from stopping already stopped sources\n      }\n      this.currentSource = null;\n    }\n\n    // Clear queue and pending chunks\n    this.audioQueue = [];\n    this.pendingChunks.clear();\n    this.nextExpectedChunkId = 0;\n    this.isPlaying = false;\n  }\n\n  /**\n   * Reset the chunk ID counter for a new streaming session\n   */\n  resetChunkCounter() {\n    this.nextExpectedChunkId = 0;\n    this.pendingChunks.clear();\n    console.log('[StreamingTTS] Chunk counter reset for new session');\n  }\n\n  /**\n   * Check if audio is currently playing\n   */\n  isCurrentlyPlaying(): boolean {\n    return this.isPlaying;\n  }\n\n  /**\n   * Get number of chunks in queue\n   */\n  getQueueLength(): number {\n    return this.audioQueue.length;\n  }\n\n  /**\n   * Set callback for when all queued audio finishes playing\n   */\n  onPlaybackCompleted(callback: () => void) {\n    this.onPlaybackComplete = callback;\n  }\n\n  /**\n   * Set callback for errors\n   */\n  onStreamingError(callback: (error: string) => void) {\n    this.onError = callback;\n  }\n\n  /**\n   * Clean up resources\n   */\n  destroy() {\n    this.stopPlayback();\n    this.pendingChunks.clear();\n    this.nextExpectedChunkId = 0;\n    if (this.audioContext) {\n      this.audioContext.close();\n      this.audioContext = null;\n    }\n  }\n}\n\n/**\n * Text chunking utilities for optimal TTS streaming\n */\nexport class TextChunker {\n  /**\n   * Split text into optimal chunks for TTS\n   * Aims for natural speech breaks while keeping chunks reasonably sized\n   */\n  static chunkText(text: string, maxChunkSize: number = 200): string[] {\n    const chunks: string[] = [];\n    \n    // Split by sentences first\n    const sentences = text.split(/[.!?]+/).filter(s => s.trim());\n    \n    let currentChunk = '';\n    \n    for (const sentence of sentences) {\n      const trimmedSentence = sentence.trim();\n      if (!trimmedSentence) continue;\n      \n      // If adding this sentence would exceed max size and we have content, finalize chunk\n      if (currentChunk && (currentChunk.length + trimmedSentence.length + 2) > maxChunkSize) {\n        chunks.push(currentChunk.trim() + '.');\n        currentChunk = trimmedSentence;\n      } else {\n        currentChunk += (currentChunk ? '. ' : '') + trimmedSentence;\n      }\n    }\n    \n    // Add final chunk\n    if (currentChunk.trim()) {\n      chunks.push(currentChunk.trim() + (currentChunk.endsWith('.') ? '' : '.'));\n    }\n    \n    return chunks;\n  }\n\n  /**\n   * Smart chunking that considers punctuation and natural breaks\n   */\n  static smartChunk(text: string, targetChunkSize: number = 150): string[] {\n    const chunks: string[] = [];\n    \n    // Priority order for splitting: sentences, clauses, phrases, words\n    const breakPoints = [\n      /[.!?]+\\s+/g,  // Sentence endings\n      /[,;:]\\s+/g,   // Clause breaks\n      /\\s+(?=and|but|or|so|yet|for|nor)\\s+/g, // Conjunctions\n      /\\s+/g         // Word breaks (fallback)\n    ];\n    \n    let remainingText = text;\n    \n    while (remainingText.length > targetChunkSize) {\n      let bestSplit = -1;\n      \n      // Try each break point type in order of preference\n      for (const breakRegex of breakPoints) {\n        const matches = Array.from(remainingText.matchAll(breakRegex));\n        \n        // Find the best split point (closest to target size without going over)\n        for (const match of matches) {\n          const splitIndex = match.index! + match[0].length;\n          if (splitIndex <= targetChunkSize && splitIndex > bestSplit) {\n            bestSplit = splitIndex;\n          }\n        }\n        \n        if (bestSplit > 0) break; // Found a good split\n      }\n      \n      // If no good split found, split at target size\n      if (bestSplit <= 0) {\n        bestSplit = targetChunkSize;\n      }\n      \n      chunks.push(remainingText.slice(0, bestSplit).trim());\n      remainingText = remainingText.slice(bestSplit).trim();\n    }\n    \n    // Add final chunk\n    if (remainingText) {\n      chunks.push(remainingText);\n    }\n    \n    return chunks.filter(chunk => chunk.length > 0);\n  }\n}","import { utils } from \"@ricky0123/vad-react\";\nimport type { VoiceOption, PersonaOption } from '@/store/voice-settings';\nimport { StreamingTTSManager } from './streaming-tts';\n\nexport interface VoiceCallbacks {\n  onUserSpeaking?: () => void;\n  onProcessing?: () => void;\n  onAiSpeaking?: () => void;\n  onReset?: () => void;\n  onError?: (error: string) => void;\n  onDebug?: (message: string, data?: any) => void;\n  // New callbacks for message store integration\n  onTranscriptReceived?: (transcript: string) => void;\n  onResponseReceived?: (response: string) => void;\n  // Streaming callbacks\n  onStreamingTextChunk?: (textChunk: string) => void;\n  onStreamingAudioReady?: (audioUrl: string, chunkId: string) => void;\n  onStreamingComplete?: (fullResponse: string, transcript: string) => void;\n}\n\nclass SpeechManager {\n  private source: AudioBufferSourceNode | null = null;\n  private sourceIsStarted = false;\n  private conversationThusFar: any[] = [];\n  private callbacks: VoiceCallbacks = {};\n  private projectId: string | null = null;\n  private sessionId: string | null = null;\n  private voiceSettings: { voice: VoiceOption; persona: PersonaOption } | null = null;\n  private streamingTTS: StreamingTTSManager | null = null;\n  private chatbotModel: string = 'gpt-3.5-turbo'; // Default to fast model for voice if not specified by agent\n  // Streaming is always enabled for optimal performance\n\n  setCallbacks(callbacks: VoiceCallbacks) {\n    this.callbacks = callbacks;\n    this.debug(\"Callbacks set\", { hasCallbacks: Object.keys(callbacks) });\n  }\n\n  setProjectId(projectId: string) {\n    this.projectId = projectId;\n    this.debug(\"Project ID set\", { projectId });\n  }\n\n  setSessionId(sessionId: string | null) {\n    this.sessionId = sessionId;\n    this.debug(\"Session ID set\", { sessionId });\n  }\n\n  setVoiceSettings(voice: VoiceOption, persona: PersonaOption) {\n    this.voiceSettings = { voice, persona };\n    this.debug(\"Voice settings set\", { voice, persona });\n  }\n\n  setChatbotModel(model: string) {\n    this.chatbotModel = model;\n    this.debug(\"Chatbot model set\", { model });\n  }\n\n  private debug(message: string, data?: any) {\n    // Production: Debug logging disabled\n    // Uncomment for development debugging:\n    // const timestamp = new Date().toISOString();\n    // console.log(`🎯 [SPEECH-MANAGER ${timestamp}] ${message}`, data || '');\n    this.callbacks.onDebug?.(message, data);\n  }\n\n  private error(message: string, error?: any) {\n    const timestamp = new Date().toISOString();\n    console.error(`❌ [SPEECH-MANAGER ${timestamp}] ${message}`, error || '');\n    this.callbacks.onError?.(message);\n  }\n\n  onSpeechStart = () => {\n    this.debug(\"Speech started - user is speaking\");\n    this.callbacks.onUserSpeaking?.();\n    this.stopSourceIfNeeded();\n  };\n\n  onSpeechEnd = async (audio: Float32Array) => {\n    this.debug(\"Speech ended\", { \n      audioLength: audio.length,\n      audioDuration: `${audio.length / 16000}s` // Assuming 16kHz sample rate\n    });\n    await this.processAudio(audio);\n  };\n\n  onMisfire = () => {\n    this.debug(\"VAD misfire - noise detected but not speech\");\n    this.callbacks.onReset?.();\n  };\n\n  private stopSourceIfNeeded = () => {\n    if (this.source && this.sourceIsStarted) {\n      this.debug(\"Stopping current audio playback\");\n      this.source.stop(0);\n      this.sourceIsStarted = false;\n    }\n  };\n\n  // Public method to stop audio playback\n  public stopAudio = () => {\n    this.stopSourceIfNeeded();\n    \n    // Also stop streaming TTS if active\n    if (this.streamingTTS) {\n      this.streamingTTS.stopPlayback();\n      this.debug(\"🛑 Streaming TTS stopped\");\n    }\n    \n    this.callbacks.onReset?.();\n    this.debug(\"Audio stopped by user\");\n  };\n\n  // Public method to process manually recorded audio\n  public processManualAudio = async (audioBlob: Blob) => {\n    this.debug(\"Processing manual audio\", { \n      size: `${(audioBlob.size / 1024).toFixed(2)}KB`,\n      type: audioBlob.type\n    });\n    this.callbacks.onProcessing?.();\n    \n    try {\n      await this.validate(audioBlob);\n      await this.sendData(audioBlob);\n    } catch (error) {\n      this.error('Error processing manual audio', error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private processAudio = async (audio: Float32Array) => {\n    this.debug(\"Processing audio started\");\n    this.callbacks.onProcessing?.();\n    \n    try {\n      const blob = this.createAudioBlob(audio);\n      await this.validate(blob);\n      await this.sendData(blob);\n    } catch (error) {\n      this.error('Error processing audio', error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private createAudioBlob = (audio: Float32Array): Blob => {\n    const wavBuffer = utils.encodeWAV(audio);\n    const blob = new Blob([wavBuffer], { type: 'audio/wav' });\n    this.debug(\"Created audio blob\", { \n      size: `${(blob.size / 1024).toFixed(2)}KB`,\n      type: blob.type,\n      samples: audio.length,\n      duration: `${audio.length / 16000}s` // Assuming 16kHz from VAD\n    });\n    return blob;\n  };\n\n  private sendData = async (blob: Blob) => {\n    // Always use streaming mode\n    await this.sendStreamingData(blob);\n  };\n\n  private sendStreamingData = async (blob: Blob) => {\n    this.debug(\"🚀 Sending audio data to streaming API\");\n    \n    if (!this.projectId) {\n      this.error('No project ID set - cannot send audio');\n      this.callbacks.onReset?.();\n      return;\n    }\n\n    // Initialize streaming TTS manager\n    if (!this.streamingTTS) {\n      this.streamingTTS = new StreamingTTSManager();\n      this.streamingTTS.onPlaybackCompleted(() => {\n        this.debug(\"🔄 Streaming playback completed\");\n        this.callbacks.onReset?.();\n      });\n      this.streamingTTS.onStreamingError((error) => {\n        this.error('🎵 Streaming TTS error', error);\n      });\n    } else {\n      // Reset chunk counter for new streaming session\n      this.streamingTTS.resetChunkCounter();\n    }\n\n    const formData = new FormData();\n    formData.append(\"audio\", blob, \"audio.wav\");\n    formData.append(\"project_id\", this.projectId);\n    if (this.sessionId) {\n      formData.append(\"session_id\", this.sessionId);\n    }\n    \n    // Add voice settings to the request\n    if (this.voiceSettings) {\n      formData.append(\"voice\", this.voiceSettings.voice);\n      formData.append(\"persona\", this.voiceSettings.persona);\n    }\n    \n    // Note: chatbot_model is not sent to voice API\n    // The agent's configured model will be used automatically\n\n    this.debug(\"🔄 Starting streaming voice request\", {\n      projectId: this.projectId,\n      sessionId: this.sessionId,\n      conversationLength: this.conversationThusFar.length,\n      audioSize: `${(blob.size / 1024).toFixed(2)}KB`,\n      voice: this.voiceSettings?.voice,\n      persona: this.voiceSettings?.persona,\n      lastMessages: this.conversationThusFar.slice(-2).map(m => ({ role: m.role, preview: m.content.slice(0, 50) }))\n    });\n\n    try {\n      // Check for demo mode OpenAI key\n      const headers: Record<string, string> = {\n        'conversation': this.base64Encode(JSON.stringify(this.conversationThusFar))\n      };\n      \n      // Add deployment mode header\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n      headers['X-Deployment-Mode'] = deploymentMode;\n      \n      console.log('🔍 [SPEECH-MANAGER] Deployment mode from localStorage:', deploymentMode);\n      console.log('🔍 [SPEECH-MANAGER] localStorage value:', localStorage.getItem('customgpt.deploymentMode'));\n      console.log('🔍 [SPEECH-MANAGER] Sending headers:', headers);\n      \n      // In demo mode, add keys from window object if available\n      if (deploymentMode === 'demo') {\n        // Add OpenAI key for TTS/STT\n        if ((window as any).__demoOpenAIKey) {\n          headers['X-OpenAI-API-Key'] = (window as any).__demoOpenAIKey;\n        }\n        // Add CustomGPT API key for chat completions\n        if ((window as any).__demoCustomGPTKey) {\n          headers['X-CustomGPT-API-Key'] = (window as any).__demoCustomGPTKey;\n        }\n      }\n      \n      const response = await fetch(\"/api/proxy/voice/streaming\", {\n        method: \"POST\",\n        body: formData,\n        headers\n      });\n\n      this.debug(\"🎯 Streaming response received\", {\n        status: response.status,\n        ok: response.ok,\n        contentType: response.headers.get('content-type')\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        let errorData;\n        try {\n          errorData = JSON.parse(errorText);\n        } catch {\n          errorData = { error: errorText };\n        }\n        \n        // Check if it's specifically an OpenAI API key error\n        if (response.status === 503 && errorData.userMessage) {\n          throw new Error(errorData.userMessage);\n        }\n        \n        throw new Error(`Streaming API Error (${response.status}): ${errorData.error || errorText}`);\n      }\n\n      // Process streaming response\n      await this.processStreamingResponse(response);\n    } catch (error) {\n      this.error(\"❌ Failed to process streaming voice\", error);\n      this.handleError(error);\n    }\n  };\n\n  private processStreamingResponse = async (response: Response) => {\n    if (!response.body) {\n      throw new Error(\"No response body for streaming\");\n    }\n\n    const reader = response.body.getReader();\n    const decoder = new TextDecoder();\n    \n    let fullResponse = '';\n    let transcript = '';\n    let currentStreamingActive = false;\n\n    this.debug(\"🔄 Processing streaming response chunks\");\n\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          this.debug(\"✅ Streaming response complete\");\n          break;\n        }\n\n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            const data = line.slice(6);\n            if (data.trim() === '') continue;\n\n            try {\n              const parsed = JSON.parse(data);\n              \n              if (parsed.type === 'text') {\n                // Stream text chunk\n                fullResponse += parsed.text;\n                \n                // Trigger UI update for text streaming\n                this.callbacks.onStreamingTextChunk?.(parsed.text);\n                \n                this.debug(`📝 Text chunk received: \"${parsed.text}\"`);\n                \n              } else if (parsed.type === 'audio' || parsed.type === 'audio_ref') {\n                // Audio chunk ready - queue it for playback\n                if (parsed.audioUrl || parsed.audioId) {\n                  if (!currentStreamingActive) {\n                    this.callbacks.onAiSpeaking?.();\n                    currentStreamingActive = true;\n                  }\n                  \n                  // Handle both legacy data URL and new audio reference\n                  if (parsed.audioUrl) {\n                    // Legacy: Convert data URL to audio and queue it\n                    await this.queueAudioChunk(parsed.audioUrl, parsed.chunkId);\n                  } else if (parsed.audioId) {\n                    // New: Fetch audio chunk by ID\n                    await this.queueAudioChunkById(parsed.audioId, parsed.chunkId);\n                  }\n                  \n                  this.debug(`🎵 Audio chunk queued: ${parsed.chunkId} (${parsed.text?.slice(0, 50)}...)`);\n                }\n                \n              } else if (parsed.type === 'complete') {\n                // Stream complete\n                fullResponse = parsed.fullResponse || fullResponse;\n                transcript = parsed.transcript || transcript;\n                \n                this.debug(\"✅ Stream complete\", { \n                  responseLength: fullResponse.length,\n                  transcript \n                });\n                \n                console.log(`📝 [SPEECH-MANAGER] Complete fullResponse (${fullResponse.length} chars):`, fullResponse);\n                console.log(`📝 [SPEECH-MANAGER] Includes \"individuals\":`, fullResponse.includes('individuals'));\n                console.log(`📝 [SPEECH-MANAGER] Includes \"like\":`, fullResponse.includes('like'));\n                console.log(`📝 [SPEECH-MANAGER] Includes \"CustomGPT\":`, fullResponse.includes('CustomGPT'));\n                \n                // Trigger callbacks for UI updates\n                // Don't update conversationThusFar here - let the message store be the single source of truth\n                if (transcript) {\n                  this.callbacks.onTranscriptReceived?.(transcript);\n                }\n                \n                if (fullResponse) {\n                  this.callbacks.onResponseReceived?.(fullResponse);\n                }\n                \n                this.callbacks.onStreamingComplete?.(fullResponse, transcript);\n                \n              } else if (parsed.type === 'error') {\n                // Stream error\n                this.error(`🚨 Stream error: ${parsed.error}`);\n                this.callbacks.onReset?.();\n              }\n            } catch (parseError) {\n              this.debug(`⚠️ Failed to parse chunk: ${data}`, parseError);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      this.error(\"❌ Error processing streaming response\", error);\n      this.callbacks.onReset?.();\n    } finally {\n      reader.releaseLock();\n    }\n  };\n\n  private queueAudioChunk = async (audioDataUrl: string, chunkId: string) => {\n    if (!this.streamingTTS) {\n      this.error(\"❌ StreamingTTS not initialized\");\n      return;\n    }\n\n    try {\n      // Extract numeric chunk ID from the string (e.g., \"chunk_0\" -> 0)\n      const numericChunkId = parseInt(chunkId.replace('chunk_', ''));\n      \n      // Convert data URL to blob\n      const response = await fetch(audioDataUrl);\n      const audioBlob = await response.blob();\n      \n      // Convert blob to ArrayBuffer for Web Audio API\n      const arrayBuffer = await audioBlob.arrayBuffer();\n      \n      // Create audio context and decode\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      // Queue the decoded audio buffer with ID for ordered playback\n      await this.streamingTTS.addAudioBufferWithId(audioBuffer, numericChunkId);\n      \n      this.debug(`🎵 Audio chunk queued with ID ${numericChunkId}: ${chunkId}`);\n    } catch (error) {\n      this.error(`❌ Failed to queue audio chunk ${chunkId}`, error);\n    }\n  };\n\n  // Legacy sendLegacyData method removed - streaming is always used\n  \n  private queueAudioChunkById = async (audioId: string, chunkId: string) => {\n    if (!this.streamingTTS) {\n      this.error(\"❌ StreamingTTS not initialized\");\n      return;\n    }\n\n    try {\n      // Extract numeric chunk ID from the string (e.g., \"chunk_0\" -> 0)\n      const numericChunkId = parseInt(chunkId.replace('chunk_', ''));\n      \n      // Fetch audio chunk by ID from the streaming endpoint\n      const response = await fetch(`/api/proxy/voice/streaming?id=${audioId}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          // Audio chunk not found - this can happen after server restart\n          this.debug(`⚠️ Audio chunk not found (server may have restarted): ${chunkId}`);\n          return; // Skip this chunk gracefully\n        }\n        throw new Error(`Failed to fetch audio chunk: ${response.status}`);\n      }\n      \n      const audioBlob = await response.blob();\n      \n      // Convert blob to ArrayBuffer for Web Audio API\n      const arrayBuffer = await audioBlob.arrayBuffer();\n      \n      // Create audio context and decode\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      // Queue the decoded audio buffer with ID for ordered playback\n      await this.streamingTTS.addAudioBufferWithId(audioBuffer, numericChunkId);\n      \n      this.debug(`🎵 Audio chunk fetched and queued with ID ${numericChunkId}: ${chunkId}`);\n    } catch (error) {\n      this.error(`❌ Failed to fetch/queue audio chunk ${chunkId}`, error);\n    }\n  };\n\n  // Legacy sendLegacyData method removed - streaming is always used\n\n  private base64Encode(str: string): string {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(str);\n    return window.btoa(String.fromCharCode(...new Uint8Array(data)));\n  }\n\n  private base64Decode(base64: string): string {\n    const binaryStr = window.atob(base64);\n    const bytes = new Uint8Array([...binaryStr].map((char) => char.charCodeAt(0)));\n    return new TextDecoder().decode(bytes);\n  }\n\n  private handleSuccess = async (blob: Blob) => {\n    this.debug(\"Playing AI response audio\");\n    \n    try {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      this.stopSourceIfNeeded();\n\n      const arrayBuffer = await blob.arrayBuffer();\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n      \n      this.debug(\"Audio decoded\", {\n        duration: `${audioBuffer.duration.toFixed(2)}s`,\n        sampleRate: audioBuffer.sampleRate,\n        numberOfChannels: audioBuffer.numberOfChannels\n      });\n\n      this.source = audioContext.createBufferSource();\n      this.source.buffer = audioBuffer;\n      this.source.connect(audioContext.destination);\n      this.source.start(0);\n      this.sourceIsStarted = true;\n      \n      this.source.onended = () => {\n        this.debug(\"Audio playback ended\");\n        this.callbacks.onReset?.();\n      };\n\n      this.callbacks.onAiSpeaking?.();\n    } catch (error) {\n      this.error(\"Failed to play audio\", error);\n      this.callbacks.onReset?.();\n    }\n  };\n\n  private handleError = (error: any) => {\n    this.error(`Error encountered: ${error.message}`, error);\n    this.callbacks.onReset?.();\n  };\n\n  private validate = async (data: Blob) => {\n    this.debug(\"Validating audio duration\");\n    \n    try {\n      // Clone the blob to avoid consuming the arrayBuffer\n      const clonedBlob = new Blob([data], { type: data.type });\n      const arrayBuffer = await clonedBlob.arrayBuffer();\n      const audioContext = new AudioContext();\n      const decodedData = await audioContext.decodeAudioData(arrayBuffer);\n      const duration = decodedData.duration;\n      const minDuration = 0.4;\n\n      this.debug(\"Audio validation\", {\n        duration: `${duration.toFixed(2)}s`,\n        minDuration: `${minDuration}s`,\n        valid: duration >= minDuration\n      });\n\n      if (duration < minDuration) {\n        throw new Error(`Duration is ${duration}s, which is less than minimum of ${minDuration}s`);\n      }\n    } catch (error) {\n      this.error(\"Audio validation failed\", error);\n      throw error;\n    }\n  };\n\n  clearConversation() {\n    this.conversationThusFar = [];\n  }\n\n  getConversationThusFar() {\n    return this.conversationThusFar;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  // Set the conversation history from existing messages\n  setConversationHistory(messages: any[]) {\n    // Clean and deduplicate messages before setting\n    const cleanedMessages = messages\n      .filter((msg, index, self) => \n        // Remove duplicates based on content and role\n        index === self.findIndex(m => m.content === msg.content && m.role === msg.role)\n      )\n      .map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n    \n    this.conversationThusFar = cleanedMessages;\n    this.debug(\"Conversation history loaded\", {\n      messageCount: this.conversationThusFar.length,\n      originalCount: messages.length\n    });\n  }\n\n\n  // Public method to clean up streaming resources\n  public destroy() {\n    this.stopAudio();\n    if (this.streamingTTS) {\n      this.streamingTTS.destroy();\n      this.streamingTTS = null;\n    }\n    this.debug(\"🧹 SpeechManager destroyed\");\n  }\n}\n\nexport const speechManager = new SpeechManager();","/**\n * Utility functions for voice mode\n */\n\n/**\n * Simple markdown parser for voice responses\n * Removes markdown formatting for cleaner display in voice UI\n */\nexport function parseMarkdownForVoice(text: string): string {\n  return text\n    // Remove bold markers\n    .replace(/\\*\\*(.*?)\\*\\*/g, '$1')\n    // Remove italic markers\n    .replace(/\\*(.*?)\\*/g, '$1')\n    // Remove code blocks\n    .replace(/```[\\s\\S]*?```/g, '')\n    // Remove inline code\n    .replace(/`([^`]+)`/g, '$1')\n    // Remove headers\n    .replace(/#{1,6}\\s+/g, '')\n    // Remove links but keep text\n    .replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1')\n    // Remove images\n    .replace(/!\\[([^\\]]*)\\]\\([^)]+\\)/g, '')\n    // Remove horizontal rules\n    .replace(/^-{3,}$/gm, '')\n    // Remove bullet points\n    .replace(/^\\s*[-*+]\\s+/gm, '')\n    // Remove numbered lists\n    .replace(/^\\s*\\d+\\.\\s+/gm, '')\n    // Clean up extra whitespace\n    .replace(/\\n{3,}/g, '\\n\\n')\n    .trim();\n}\n\n/**\n * Split response into chunks for streaming display\n */\nexport function* streamTextChunks(text: string, chunkSize: number = 50): Generator<string> {\n  const words = text.split(' ');\n  let currentChunk = '';\n  \n  for (const word of words) {\n    if (currentChunk.length + word.length + 1 > chunkSize && currentChunk.length > 0) {\n      yield currentChunk.trim();\n      currentChunk = word;\n    } else {\n      currentChunk += (currentChunk ? ' ' : '') + word;\n    }\n  }\n  \n  if (currentChunk) {\n    yield currentChunk.trim();\n  }\n}","/**\n * Simple encryption utilities for demo mode API key storage\n * \n * This provides basic obfuscation to prevent casual observation\n * of API keys in browser storage. This is NOT cryptographically\n * secure and should only be used for demo/playground purposes.\n */\n\n/**\n * Generate a random key for encryption\n */\nexport function generateKey(): string {\n  const array = new Uint8Array(32);\n  crypto.getRandomValues(array);\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n}\n\n/**\n * Simple XOR encryption (obfuscation)\n * This is NOT secure encryption - it's just to prevent\n * API keys from being stored in plain text\n */\nexport function encrypt(text: string, key: string): string {\n  let result = '';\n  for (let i = 0; i < text.length; i++) {\n    result += String.fromCharCode(\n      text.charCodeAt(i) ^ key.charCodeAt(i % key.length)\n    );\n  }\n  return btoa(result); // Base64 encode\n}\n\n/**\n * Decrypt XOR encrypted text\n */\nexport function decrypt(encrypted: string, key: string): string {\n  try {\n    const text = atob(encrypted); // Base64 decode\n    let result = '';\n    for (let i = 0; i < text.length; i++) {\n      result += String.fromCharCode(\n        text.charCodeAt(i) ^ key.charCodeAt(i % key.length)\n      );\n    }\n    return result;\n  } catch {\n    return '';\n  }\n}\n\n/**\n * Validate API key format\n */\nexport function isValidApiKey(key: string): boolean {\n  // CustomGPT.ai API key format: projectId|apiKey\n  // Example: 7840|8TPfOoyBywFfUfvwuY7ZZ2s1WAFtxU7WCxunMbej\n  const trimmedKey = key.trim();\n  \n  // Check if it contains a pipe character\n  if (!trimmedKey.includes('|')) {\n    return false;\n  }\n  \n  // Split and validate both parts\n  const [projectId, apiKey] = trimmedKey.split('|');\n  \n  // Project ID should be numeric\n  if (!projectId || !/^\\d+$/.test(projectId)) {\n    return false;\n  }\n  \n  // API key should be alphanumeric (with possible special chars)\n  if (!apiKey || apiKey.length < 20) {\n    return false;\n  }\n  \n  return true;\n}","/**\n * Demo Mode Store\n * \n * Manages API key storage and authentication for demo/playground mode.\n * Uses encrypted sessionStorage for temporary key storage that survives\n * page refreshes but is cleared when the browser tab is closed.\n */\n\nimport { create } from 'zustand';\nimport { encrypt, decrypt, generateKey, isValidApiKey } from '@/lib/crypto';\n\ninterface DemoStore {\n  // Demo mode configuration\n  isDemoMode: boolean;\n  \n  // API key management\n  apiKey: string | null;\n  openAIApiKey: string | null;\n  encryptionKey: string | null;\n  \n  // UI state\n  isAuthenticated: boolean;\n  error: string | null;\n  \n  // Session management\n  sessionStartTime: number | null;\n  sessionTimeout: number; // 2 hours in milliseconds\n  \n  // Actions\n  setApiKey: (key: string) => void;\n  setOpenAIApiKey: (key: string) => void;\n  clearApiKey: () => void;\n  validateSession: () => boolean;\n  setError: (error: string | null) => void;\n  initializeFromStorage: () => void;\n  restoreSession: () => boolean;\n}\n\nconst STORAGE_KEY = 'customgpt-demo-key';\nconst OPENAI_STORAGE_KEY = 'customgpt-demo-openai-key';\nconst ENCRYPTION_KEY = 'customgpt-demo-enc';\nconst SESSION_KEY = 'customgpt-demo-session';\nconst SESSION_TIMEOUT = 2 * 60 * 60 * 1000; // 2 hours\n\nexport const useDemoStore = create<DemoStore>((set, get) => ({\n  // Check if demo mode is enabled from localStorage deployment mode\n  isDemoMode: typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') === 'demo' : false,\n  \n  apiKey: null,\n  openAIApiKey: null,\n  encryptionKey: null,\n  isAuthenticated: false,\n  error: null,\n  sessionStartTime: null,\n  sessionTimeout: SESSION_TIMEOUT,\n  \n  setApiKey: (key: string) => {\n    const trimmedKey = key.trim();\n    \n    // Validate API key format\n    if (!isValidApiKey(trimmedKey)) {\n      set({ error: 'Invalid API key format' });\n      return;\n    }\n    \n    try {\n      // Generate encryption key\n      const encKey = generateKey();\n      \n      // Encrypt and store in sessionStorage\n      const encrypted = encrypt(trimmedKey, encKey);\n      sessionStorage.setItem(STORAGE_KEY, encrypted);\n      sessionStorage.setItem(ENCRYPTION_KEY, encKey);\n      \n      // Store session info\n      const sessionInfo = {\n        startTime: Date.now(),\n        encKey: encKey\n      };\n      sessionStorage.setItem(SESSION_KEY, JSON.stringify(sessionInfo));\n      \n      // Update store state\n      set({\n        apiKey: trimmedKey,\n        encryptionKey: encKey,\n        isAuthenticated: true,\n        error: null,\n        sessionStartTime: Date.now()\n      });\n    } catch (error) {\n      set({ error: 'Failed to store API key' });\n    }\n  },\n  \n  setOpenAIApiKey: (key: string) => {\n    const trimmedKey = key.trim();\n    const state = get();\n    \n    // Only allow if already authenticated with CustomGPT key\n    if (!state.isAuthenticated) {\n      set({ error: 'Please enter CustomGPT.ai API key first' });\n      return;\n    }\n    \n    // OpenAI keys typically start with 'sk-'\n    if (trimmedKey && !trimmedKey.startsWith('sk-')) {\n      set({ error: 'Invalid OpenAI API key format' });\n      return;\n    }\n    \n    try {\n      // Use same encryption key as CustomGPT key\n      const encKey = state.encryptionKey;\n      if (!encKey) {\n        set({ error: 'Encryption key not found' });\n        return;\n      }\n      \n      if (trimmedKey) {\n        // Encrypt and store\n        const encrypted = encrypt(trimmedKey, encKey);\n        sessionStorage.setItem(OPENAI_STORAGE_KEY, encrypted);\n        set({ openAIApiKey: trimmedKey, error: null });\n      } else {\n        // Clear OpenAI key\n        sessionStorage.removeItem(OPENAI_STORAGE_KEY);\n        set({ openAIApiKey: null, error: null });\n      }\n    } catch (error) {\n      set({ error: 'Failed to store OpenAI API key' });\n    }\n  },\n  \n  clearApiKey: () => {\n    // Clear from storage\n    sessionStorage.removeItem(STORAGE_KEY);\n    sessionStorage.removeItem(OPENAI_STORAGE_KEY);\n    sessionStorage.removeItem(ENCRYPTION_KEY);\n    sessionStorage.removeItem(SESSION_KEY);\n    \n    // Clear from memory\n    set({\n      apiKey: null,\n      openAIApiKey: null,\n      encryptionKey: null,\n      isAuthenticated: false,\n      error: null,\n      sessionStartTime: null\n    });\n  },\n  \n  validateSession: () => {\n    const state = get();\n    \n    // Check if session has expired\n    if (state.sessionStartTime) {\n      const elapsed = Date.now() - state.sessionStartTime;\n      if (elapsed > state.sessionTimeout) {\n        state.clearApiKey();\n        state.setError('Session expired. Please enter your API key again.');\n        return false;\n      }\n    }\n    \n    return state.isAuthenticated;\n  },\n  \n  setError: (error: string | null) => {\n    set({ error });\n  },\n  \n  initializeFromStorage: () => {\n    const state = get();\n    \n    // Only initialize if demo mode is enabled\n    if (!state.isDemoMode) return;\n    \n    // Try to restore the session\n    state.restoreSession();\n  },\n  \n  restoreSession: () => {\n    const state = get();\n    \n    try {\n      // Check for session info\n      const sessionData = sessionStorage.getItem(SESSION_KEY);\n      if (!sessionData) return false;\n      \n      const sessionInfo = JSON.parse(sessionData);\n      const { startTime, encKey } = sessionInfo;\n      \n      // Check if session expired\n      const elapsed = Date.now() - startTime;\n      if (elapsed > SESSION_TIMEOUT) {\n        state.clearApiKey();\n        state.setError('Session expired. Please enter your API key again.');\n        return false;\n      }\n      \n      // Try to restore encrypted keys\n      const encrypted = sessionStorage.getItem(STORAGE_KEY);\n      const encryptedOpenAI = sessionStorage.getItem(OPENAI_STORAGE_KEY);\n      \n      if (!encrypted || !encKey) return false;\n      \n      // Decrypt API keys\n      const apiKey = decrypt(encrypted, encKey);\n      if (!apiKey || !isValidApiKey(apiKey)) {\n        state.clearApiKey();\n        return false;\n      }\n      \n      // Restore OpenAI key if present\n      let openAIKey = null;\n      if (encryptedOpenAI) {\n        openAIKey = decrypt(encryptedOpenAI, encKey);\n      }\n      \n      // Restore state\n      set({\n        apiKey: apiKey,\n        openAIApiKey: openAIKey,\n        encryptionKey: encKey,\n        isAuthenticated: true,\n        sessionStartTime: startTime,\n        error: null\n      });\n      \n      return true;\n    } catch {\n      // Session restore failed, clear everything\n      state.clearApiKey();\n      return false;\n    }\n  }\n}));\n\n// Auto-clear on tab visibility change (optional security feature)\nif (typeof window !== 'undefined') {\n  document.addEventListener('visibilitychange', () => {\n    if (document.hidden) {\n      // Optional: Clear API key when tab is hidden\n      // Uncomment for extra security\n      // const { clearApiKey } = useDemoStore.getState();\n      // clearApiKey();\n    }\n  });\n  \n  // Check session validity periodically\n  setInterval(() => {\n    const { validateSession } = useDemoStore.getState();\n    validateSession();\n  }, 60000); // Check every minute\n}","'use client';\n\nimport React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { useMicVAD, utils } from '@ricky0123/vad-react';\nimport RotateLoader from 'react-spinners/RotateLoader';\nimport { X, StopCircle, Mic, MicOff, Settings } from 'lucide-react';\nimport Canvas from './Canvas';\nimport { VoiceSettings } from './VoiceSettings';\nimport { speechManager } from '@/lib/voice/speech-manager';\nimport { useMessageStore, useConversationStore } from '@/hooks/useWidgetStore';\nimport { useAgentStore } from '@/store/agents';\nimport { generateId, generateConversationName } from '@/lib/utils';\nimport { useVoiceSettingsStore } from '@/store/voice-settings';\nimport { parseMarkdownForVoice } from '@/lib/voice/utils';\nimport { useDemoStore } from '@/store/demo';\nimport { AlertTriangle } from 'lucide-react';\n\ninterface VoiceModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  projectId: string;\n  projectName?: string;\n}\n\n// Voice states for UI animations\ntype VoiceState = 'idle' | 'listening' | 'recording' | 'processing' | 'speaking';\n\n// Separate component that handles VAD initialization\nfunction VoiceModalContent({ isOpen, onClose, projectId, projectName }: VoiceModalProps) {\n  const [loading, setLoading] = useState(true);\n  const [transcript, setTranscript] = useState('');\n  const [agentResponse, setAgentResponse] = useState('');\n  const [isManualRecording, setIsManualRecording] = useState(false);\n  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null);\n  const [apiKeyError, setApiKeyError] = useState(false);\n  const [isAgentSpeaking, setIsAgentSpeaking] = useState(false);\n  const [isSettingsOpen, setIsSettingsOpen] = useState(false);\n  const [voiceState, setVoiceState] = useState<VoiceState>('idle');\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  \n  // Streaming state\n  const [isStreamingText, setIsStreamingText] = useState(false);\n  const [streamingResponse, setStreamingResponse] = useState('');\n  \n  // Message store integration\n  const { addMessage, messages, loadMessages } = useMessageStore();\n  const { currentConversation, ensureConversation, updateConversation } = useConversationStore();\n  const [currentUserMessageId, setCurrentUserMessageId] = useState<string | null>(null);\n  const [voiceConversation, setVoiceConversation] = useState<any>(null);\n  \n  // Guard to prevent multiple conversation creation attempts\n  const conversationSetupRef = useRef<boolean>(false);\n  \n  // Voice settings integration\n  const { selectedVoice, selectedPersona, setVoiceModalOpen } = useVoiceSettingsStore();\n  \n  // Demo mode check\n  const { isDemoMode, openAIApiKey } = useDemoStore();\n  \n  // Check if OpenAI API key is available\n  const checkOpenAIKeyAvailability = useCallback(() => {\n    const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n    if (deploymentMode === 'demo' && !openAIApiKey) {\n      return false;\n    }\n    // In production mode, we can't check server-side env from client\n    // We'll let the API handle validation\n    return true;\n  }, [openAIApiKey]);\n\n  // Initialize VAD with error handling\n  const vad = useMicVAD({\n    preSpeechPadFrames: 10,\n    positiveSpeechThreshold: 0.8,   // Lower threshold for easier detection\n    negativeSpeechThreshold: 0.6,   // Lower threshold\n    minSpeechFrames: 3,              // Reduce minimum frames\n    startOnLoad: false,              // Start manually\n    workletURL: '/vad.worklet.bundle.min.js',\n    modelURL: '/silero_vad.onnx',\n    // VAD configuration\n    onSpeechStart: () => {\n      console.log('🎤 [VAD] Speech started detected');\n      speechManager.onSpeechStart();\n    },\n    onSpeechEnd: (audio) => {\n      console.log('🎤 [VAD] Speech ended, audio length:', audio.length);\n      speechManager.onSpeechEnd(audio);\n    },\n    onVADMisfire: () => {\n      console.log('🎤 [VAD] Misfire detected');\n      speechManager.onMisfire();\n    }\n  });\n\n  // Control global voice modal state for hiding mobile navigation\n  useEffect(() => {\n    setVoiceModalOpen(isOpen);\n    \n    // Extra cleanup when closing to ensure mobile navigation reappears\n    if (!isOpen) {\n      // Reset conversation setup guard when modal closes\n      conversationSetupRef.current = false;\n      // Clear voice conversation reference when modal closes\n      setVoiceConversation(null);\n      \n      // Small delay to ensure the state change is processed\n      setTimeout(() => {\n        setVoiceModalOpen(false);\n      }, 100);\n    }\n  }, [isOpen, setVoiceModalOpen]);\n\n  // Set up speech manager when modal opens\n  useEffect(() => {\n    if (isOpen && projectId) {\n      console.log('🔧 [VOICE-MODAL] Setting up speech manager');\n      speechManager.setProjectId(projectId);\n      \n      // Apply voice settings to speech manager\n      speechManager.setVoiceSettings(selectedVoice, selectedPersona);\n      \n      // Pass demo keys to window object for speech manager (only in demo mode)\n      if (isDemoMode) {\n        if (openAIApiKey) {\n          (window as any).__demoOpenAIKey = openAIApiKey;\n        }\n        // Also pass CustomGPT API key from demo store\n        const demoApiKey = useDemoStore.getState().apiKey;\n        if (demoApiKey) {\n          (window as any).__demoCustomGPTKey = demoApiKey;\n        }\n      }\n      \n      // Theme is now handled directly by Canvas component through themeId prop\n      \n      // Check if agent is active\n      const currentAgentStore = useAgentStore.getState();\n      const agent = currentAgentStore.agents.find(a => a.id === parseInt(projectId));\n      \n      if (agent && !agent.is_chat_active) {\n        console.warn('⚠️ [VOICE-MODAL] Agent is inactive - may fall back to OpenAI');\n      }\n      \n      // Set the model based on agent settings or use fast default for voice\n      if (agent?.settings?.chatbot_model) {\n        speechManager.setChatbotModel(agent.settings.chatbot_model);\n      } else {\n        // Default to fast model for voice if agent doesn't have a model configured\n        speechManager.setChatbotModel('gpt-3.5-turbo');\n      }\n      \n      // Ensure we have a conversation before starting voice\n      const setupConversation = async () => {\n        // Prevent multiple setup attempts\n        if (conversationSetupRef.current) {\n          console.log('🔄 [VOICE-MODAL] Conversation setup already in progress, skipping');\n          return;\n        }\n        \n        try {\n          conversationSetupRef.current = true;\n          let conversation = currentConversation;\n          \n          // If no current conversation and no voice conversation stored, create one for voice\n          if (!conversation && !voiceConversation) {\n            console.log('🔄 [VOICE-MODAL] No current conversation, creating one for voice');\n            // Create conversation with voice title\n            conversation = await ensureConversation(parseInt(projectId), 'Voice Conversation');\n            console.log('✅ [VOICE-MODAL] Created conversation:', conversation.id, 'session:', conversation.session_id);\n            \n            // Immediately update the title to ensure it's set correctly\n            try {\n              await updateConversation(conversation.id, conversation.session_id, { name: 'Voice Conversation' });\n              console.log('📝 [VOICE-MODAL] Set initial voice conversation title');\n            } catch (error) {\n              console.error('❌ [VOICE-MODAL] Failed to set initial title:', error);\n            }\n            \n            // Store the conversation reference for reuse\n            setVoiceConversation(conversation);\n          } else if (conversation) {\n            // Store existing conversation reference\n            setVoiceConversation(conversation);\n          } else if (voiceConversation) {\n            // Use the existing voice conversation\n            conversation = voiceConversation;\n          }\n          \n          // Ensure we have a valid conversation before proceeding\n          if (!conversation) {\n            console.error('❌ [VOICE-MODAL] No conversation available after setup');\n            return;\n          }\n          \n          // Load conversation history and session ID\n          const conversationMessages = messages.get(conversation.id.toString()) || [];\n          console.log('📝 [VOICE-MODAL] Loading conversation history:', conversationMessages.length, 'messages');\n          console.log('📝 [VOICE-MODAL] Agent status:', agent?.is_chat_active ? 'Active' : 'Inactive');\n          \n          // Filter out any duplicate messages and ensure proper ordering\n          const cleanedMessages = conversationMessages.filter((msg, index, self) => \n            // Keep only the first occurrence of each message ID\n            index === self.findIndex(m => m.id === msg.id)\n          ).sort((a, b) => \n            // Sort by timestamp to ensure proper ordering\n            new Date(a.timestamp).getTime() - new Date(b.timestamp).getTime()\n          );\n          \n          speechManager.setConversationHistory(cleanedMessages);\n          speechManager.setSessionId(conversation.session_id);\n        } catch (error) {\n          console.error('❌ [VOICE-MODAL] Failed to setup conversation:', error);\n        } finally {\n          // Reset the guard after setup is complete (success or failure)\n          conversationSetupRef.current = false;\n        }\n      };\n      \n      setupConversation();\n      \n      speechManager.setCallbacks({\n        onUserSpeaking: () => {\n          (Canvas as any).onUserSpeaking?.();\n          setTranscript('');\n          setStreamingResponse(''); // Clear streaming response\n          setIsStreamingText(false);\n          setVoiceState('recording');\n        },\n        onProcessing: async () => {\n          (Canvas as any).onProcessing?.();\n          setVoiceState('processing');\n          \n          // Use existing conversation - don't create a new one\n          // The conversation should already be set up in setupConversation()\n          \n          const placeholderUserMessage = {\n            id: generateId(),\n            role: 'user' as const,\n            content: '🎤 Processing voice input...',\n            timestamp: new Date().toISOString(),\n            status: 'sending' as const,\n          };\n          \n          setCurrentUserMessageId(placeholderUserMessage.id);\n          const targetConversation = voiceConversation || currentConversation;\n          if (targetConversation) {\n            addMessage(targetConversation.id.toString(), placeholderUserMessage);\n            console.log('🎤 [VOICE-MODAL] Added placeholder user message');\n          }\n        },\n        onAiSpeaking: () => {\n          (Canvas as any).onAiSpeaking?.();\n          setIsAgentSpeaking(true);\n          setVoiceState('speaking');\n        },\n        onReset: () => {\n          (Canvas as any).reset?.();\n          setIsAgentSpeaking(false);\n          setIsStreamingText(false);\n          setVoiceState('idle');\n        },\n        onDebug: (message: string, data?: any) => {\n          // Debug logging removed for production\n        },\n        onError: (error: string) => {\n          console.error('❌ [VOICE-MODAL] Error from speech manager:', error);\n          // Check if it's an API key error\n          if (error.includes('OpenAI API key') || error.includes('API key')) {\n            setApiKeyError(true);\n            // Also show a toast error\n            const deploymentMode = typeof window !== 'undefined' ? localStorage.getItem('customgpt.deploymentMode') : null;\n            const isDemoMode = deploymentMode === 'demo';\n            const errorMsg = isDemoMode \n              ? 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n              : 'Voice feature requires OpenAI API key configuration. Please add OPENAI_API_KEY to your .env.local file.';\n            \n            // Import toast at the top of the file\n            import('sonner').then(({ toast }) => {\n              toast.error(errorMsg);\n            });\n          }\n          setIsStreamingText(false);\n          setVoiceState('idle');\n        },\n        onTranscriptReceived: async (transcript: string) => {\n          console.log('🎯 [VOICE-MODAL] Transcript received:', transcript);\n          setTranscript(transcript);\n          \n          // Update conversation title for voice conversations\n          const targetConversation = voiceConversation || currentConversation;\n          if (targetConversation) {\n            const conversationMessages = messages.get(targetConversation.id.toString()) || [];\n            // If this is the first message and conversation doesn't have a proper title yet, set voice title\n            if (conversationMessages.length <= 1) {\n              const currentTitle = targetConversation.name || '';\n              const needsVoiceTitle = !currentTitle || \n                                      currentTitle === 'New voice conversation' || \n                                      currentTitle === 'New Conversation' ||\n                                      currentTitle === 'Processing...' ||\n                                      currentTitle.startsWith('Chat ') ||\n                                      currentTitle.startsWith('OpenAI-') ||\n                                      currentTitle.includes('OpenAI-');\n              \n              if (needsVoiceTitle) {\n                // Generate a more descriptive title based on the transcript\n                let voiceTitle = 'Voice Conversation';\n                if (transcript && transcript.length > 0) {\n                  // Use the first few words of the transcript as the title, but clean it first\n                  const cleanTranscript = transcript\n                    .replace(/^(OpenAI-|System-|API-|Assistant:|User:)\\s*/i, '')\n                    .trim();\n                  if (cleanTranscript.length > 0) {\n                    const words = cleanTranscript.split(/\\s+/).slice(0, 6).join(' ');\n                    voiceTitle = `Voice: ${words.length > 40 ? words.substring(0, 40).trim() + '...' : words}`;\n                  }\n                }\n                \n                console.log('📝 [VOICE-MODAL] Setting voice conversation title:', voiceTitle);\n                try {\n                  await updateConversation(targetConversation.id, targetConversation.session_id, { name: voiceTitle });\n                } catch (error) {\n                  console.error('❌ [VOICE-MODAL] Failed to update conversation title:', error);\n                }\n              }\n            }\n          }\n          \n          // Update the placeholder message with actual transcript\n          \n          if (targetConversation && currentUserMessageId) {\n            // Update the existing placeholder message\n            const updatedUserMessage = {\n              id: currentUserMessageId,\n              role: 'user' as const,\n              content: transcript,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n            };\n            \n            addMessage(targetConversation.id.toString(), updatedUserMessage);\n            console.log('✅ [VOICE-MODAL] Updated user message with transcript');\n          } else {\n            // Fallback: create new message if no placeholder exists\n            // Use the existing conversation from voiceConversation or currentConversation\n            const conversation = voiceConversation || currentConversation;\n            if (!conversation) {\n              console.error('❌ [VOICE-MODAL] No conversation available for user message');\n              return;\n            }\n            \n            const userMessage = {\n              id: generateId(),\n              role: 'user' as const,\n              content: transcript,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n            };\n            \n            setCurrentUserMessageId(userMessage.id);\n            addMessage(conversation.id.toString(), userMessage);\n          }\n        },\n        onResponseReceived: async (response: string) => {\n          console.log('🎯 [VOICE-MODAL] Response received:', response);\n          console.log('🎯 [VOICE-MODAL] Response includes \"individuals\":', response.includes('individuals'));\n          console.log('🎯 [VOICE-MODAL] Response includes \"like\":', response.includes('like'));\n          console.log('🎯 [VOICE-MODAL] Response includes \"CustomGPT\":', response.includes('CustomGPT'));\n          \n          // For streaming responses, this will be called with the final response\n          // Don't update the display here as it's already being updated via streaming chunks\n          // This is mainly for adding the message to the conversation history\n          \n          // Use voiceConversation to ensure we're adding to the same conversation as the user message\n          // This prevents race condition where messages could be added out of order\n          const targetConversation = voiceConversation || currentConversation;\n          \n          if (targetConversation) {\n            // Create and add assistant message to chat\n            const assistantMessage = {\n              id: generateId(),\n              role: 'assistant' as const,\n              content: response,\n              timestamp: new Date().toISOString(),\n              status: 'sent' as const,\n              citations: [], // Voice responses typically don't have citations\n            };\n            \n            addMessage(targetConversation.id.toString(), assistantMessage);\n            \n            // Force refresh conversation to ensure proper syncing\n            const currentMessages = messages.get(targetConversation.id.toString()) || [];\n            console.log('🔄 [VOICE-MODAL] Current conversation messages:', currentMessages.length, 'messages');\n            \n          } else {\n            console.warn('⚠️ [VOICE-MODAL] No conversation available for adding assistant message');\n          }\n        },\n        // New streaming callbacks\n        onStreamingTextChunk: (textChunk: string) => {\n          console.log('📝 [VOICE-MODAL] Streaming text chunk:', textChunk);\n          setIsStreamingText(true);\n          setStreamingResponse(prev => {\n            const newText = prev + textChunk;\n            console.log('📝 [VOICE-MODAL] Accumulated streaming text length:', newText.length);\n            // Update the displayed response immediately for streaming\n            const cleanResponse = parseMarkdownForVoice(newText);\n            setAgentResponse(cleanResponse);\n            return newText;\n          });\n        },\n        onStreamingAudioReady: (audioUrl: string, chunkId: string) => {\n          console.log('🎵 [VOICE-MODAL] Audio chunk ready:', chunkId, 'URL length:', audioUrl.length);\n          \n          // Ensure we're in speaking state when audio arrives\n          if (voiceState !== 'speaking') {\n            setVoiceState('speaking');\n            setIsAgentSpeaking(true);\n          }\n        },\n        onStreamingComplete: (fullResponse: string, transcript: string) => {\n          console.log('✅ [VOICE-MODAL] Streaming complete:', { fullResponse: fullResponse.length, transcript });\n          console.log('✅ [VOICE-MODAL] Full response includes \"individuals\":', fullResponse.includes('individuals'));\n          console.log('✅ [VOICE-MODAL] Full response includes \"like\":', fullResponse.includes('like'));\n          console.log('✅ [VOICE-MODAL] Full response includes \"CustomGPT\":', fullResponse.includes('CustomGPT'));\n          \n          // Final cleanup - ensure we have the complete response\n          const cleanResponse = parseMarkdownForVoice(fullResponse);\n          console.log('✅ [VOICE-MODAL] Final clean response:', cleanResponse);\n          setAgentResponse(cleanResponse);\n          setStreamingResponse(fullResponse);\n          setIsStreamingText(false);\n          \n          // Don't add messages here - they've already been added via onTranscriptReceived and onResponseReceived\n          // This prevents duplicate messages in the conversation\n        }\n      });\n    }\n    \n    // Clean up when modal closes\n    if (!isOpen) {\n      // Don't clear conversation history to maintain context\n      setTranscript('');\n      setAgentResponse('');\n      setStreamingResponse('');\n      setIsStreamingText(false);\n      setIsAgentSpeaking(false);\n      setVoiceConversation(null); // Clear voice conversation reference\n      setVoiceState('idle'); // Reset voice state to idle\n      setCurrentUserMessageId(null); // Clear current user message ID\n      \n      // Clean up demo keys from window object (only in demo mode)\n      if ((window as any).__demoOpenAIKey) {\n        delete (window as any).__demoOpenAIKey;\n      }\n      if ((window as any).__demoCustomGPTKey) {\n        delete (window as any).__demoCustomGPTKey;\n      }\n      \n      // Ensure VAD is stopped if it was running\n      if (vad.listening) {\n        vad.pause();\n      }\n      \n      // Clean up speech manager streaming resources\n      speechManager.destroy();\n      \n      // Ensure global state is properly reset\n      setVoiceModalOpen(false);\n      \n      // Reload messages to ensure sync with API format\n      if (currentConversation) {\n        // Use the loadMessages function directly from the hook\n        loadMessages(currentConversation.id.toString());\n      }\n    }\n  }, [isOpen, projectId, currentConversation, messages, selectedVoice, selectedPersona, isDemoMode, openAIApiKey, loadMessages]);\n  \n  // Update settings when they change\n  useEffect(() => {\n    if (isOpen && projectId) {\n      // Update speech manager with new voice settings\n      speechManager.setVoiceSettings(selectedVoice, selectedPersona);\n      \n      // Get agent's configured model\n      const currentAgentStore = useAgentStore.getState();\n      const agent = currentAgentStore.agents.find(a => a.id === parseInt(projectId));\n      if (agent?.settings?.chatbot_model) {\n        speechManager.setChatbotModel(agent.settings.chatbot_model);\n      }\n      \n      // Theme is now handled directly by Canvas component through themeId prop\n      // The Canvas component automatically switches themes when themeId changes\n    }\n  }, [selectedVoice, selectedPersona, isOpen, projectId]);\n  \n  // Monitor VAD state changes\n  useEffect(() => {\n    if (vad.errored) {\n    } else if (!vad.loading && !vad.errored) {\n    }\n  }, [vad.loading, vad.errored]);\n\n  // Define handleToggleListening before useEffect that uses it\n  const handleToggleListening = useCallback(async () => {\n    console.log('🔘 [VOICE-MODAL] Toggle listening clicked', { \n      vadLoading: vad.loading,\n      vadListening: vad.listening,\n      vadErrored: vad.errored\n    });\n    \n    // Check OpenAI key availability first\n    if (!checkOpenAIKeyAvailability()) {\n      console.error('❌ [VOICE-MODAL] OpenAI API key not available');\n      setApiKeyError(true);\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n      const errorMsg = deploymentMode === 'demo' \n        ? 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n        : 'Voice feature requires OpenAI API key. Please add OPENAI_API_KEY to your .env.local file.';\n      \n      import('sonner').then(({ toast }) => {\n        toast.error(errorMsg);\n      });\n      return;\n    }\n    \n    // Enhanced error handling for VAD\n    if (vad.errored) {\n      console.error('❌ [VOICE-MODAL] VAD is in error state, attempting recovery...');\n      \n      // Try to restart VAD after error\n      try {\n        console.log('🔄 [VOICE-MODAL] Attempting VAD recovery...');\n        // Wait a moment then try to start\n        setTimeout(() => {\n          if (!vad.listening && !vad.loading) {\n            console.log('🔄 [VOICE-MODAL] Retry VAD start after error');\n            vad.start();\n          }\n        }, 1000);\n        return;\n      } catch (recoveryError) {\n        console.error('❌ [VOICE-MODAL] VAD recovery failed:', recoveryError);\n        return;\n      }\n    }\n    \n    try {\n      if (vad.listening) {\n        console.log('⏸️ [VOICE-MODAL] Pausing VAD');\n        vad.pause();\n        setVoiceState('idle');\n      } else {\n        console.log('▶️ [VOICE-MODAL] Starting VAD');\n        setVoiceState('listening');\n        \n        // Simplified microphone permission check\n        try {\n          console.log('🎤 [VOICE-MODAL] Checking microphone permissions...');\n          const stream = await navigator.mediaDevices.getUserMedia({ \n            audio: true\n          });\n          \n          // Clean up immediately - we just needed to check permission\n          stream.getTracks().forEach(track => track.stop());\n          \n          console.log('🎯 [VOICE-MODAL] Microphone permission granted');\n        } catch (permissionError) {\n          console.error('❌ [VOICE-MODAL] Microphone permission failed:', permissionError);\n          const errorMessage = permissionError instanceof Error ? permissionError.message : 'Permission denied';\n          \n          // Still try to start VAD - it might handle permissions internally\n        }\n        \n        // Start VAD with additional error handling\n        try {\n          vad.start();\n        } catch (vadError) {\n          console.error('❌ [VOICE-MODAL] VAD start failed:', vadError);\n          const errorMessage = vadError instanceof Error ? vadError.message : 'Unknown error';\n        }\n      }\n    } catch (error) {\n      console.error('❌ [VOICE-MODAL] Error in toggle listening:', error);\n    }\n  }, [vad, checkOpenAIKeyAvailability]);\n\n  // Manual recording fallback when VAD fails\n  const handleManualRecording = useCallback(async () => {\n    console.log('🎤 [MANUAL] Starting manual recording fallback');\n    \n    // Check OpenAI key availability first\n    if (!checkOpenAIKeyAvailability()) {\n      console.error('❌ [MANUAL] OpenAI API key not available');\n      setApiKeyError(true);\n      const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n      const errorMsg = deploymentMode === 'demo' \n        ? 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n        : 'Voice feature requires OpenAI API key. Please add OPENAI_API_KEY to your .env.local file.';\n      \n      import('sonner').then(({ toast }) => {\n        toast.error(errorMsg);\n      });\n      return;\n    }\n    \n    try {\n      if (!isManualRecording) {\n        // Start manual recording with better audio quality\n        setVoiceState('recording');\n        const stream = await navigator.mediaDevices.getUserMedia({ \n          audio: {\n            echoCancellation: true,\n            noiseSuppression: true,\n            autoGainControl: true,\n            sampleRate: 48000\n          } \n        });\n        \n        // Choose the best available audio format\n        const mimeType = MediaRecorder.isTypeSupported('audio/webm;codecs=opus') \n          ? 'audio/webm;codecs=opus' \n          : 'audio/webm';\n          \n        const recorder = new MediaRecorder(stream, { mimeType });\n        const chunks: Blob[] = [];\n        \n        recorder.ondataavailable = (event) => {\n          if (event.data.size > 0) {\n            chunks.push(event.data);\n          }\n        };\n        \n        recorder.onstop = async () => {\n          console.log('🎤 [MANUAL] Recording stopped, processing audio...');\n          // MediaRecorder doesn't produce WAV, it produces webm/opus or similar\n          const audioBlob = new Blob(chunks, { type: recorder.mimeType || 'audio/webm' });\n          \n          try {\n            // Create audio context for decoding compressed audio\n            const audioContext = new AudioContext();\n            \n            // Convert blob to ArrayBuffer\n            const audioBuffer = await audioBlob.arrayBuffer();\n            \n            // Decode the compressed audio to get raw PCM data\n            const decodedAudio = await audioContext.decodeAudioData(audioBuffer);\n            console.log('🎯 [MANUAL] Audio decoded:', {\n              sampleRate: decodedAudio.sampleRate,\n              channels: decodedAudio.numberOfChannels,\n              duration: decodedAudio.duration,\n              length: decodedAudio.length\n            });\n            \n            // Convert to mono Float32Array (match VAD format)\n            const channelData = decodedAudio.getChannelData(0); // Get first channel\n            \n            // CRITICAL: Resample from 48kHz to 16kHz for VAD/Whisper compatibility\n            let audioArray: Float32Array;\n            if (decodedAudio.sampleRate !== 16000) {\n              console.log('🔄 [MANUAL] Resampling from', decodedAudio.sampleRate, 'to 16kHz');\n              const resampleRatio = 16000 / decodedAudio.sampleRate;\n              const newLength = Math.floor(channelData.length * resampleRatio);\n              audioArray = new Float32Array(newLength);\n              \n              // Simple linear interpolation resampling\n              for (let i = 0; i < newLength; i++) {\n                const srcIndex = i / resampleRatio;\n                const srcIndexFloor = Math.floor(srcIndex);\n                const srcIndexCeil = Math.min(srcIndexFloor + 1, channelData.length - 1);\n                const fraction = srcIndex - srcIndexFloor;\n                \n                audioArray[i] = channelData[srcIndexFloor] * (1 - fraction) + \n                               channelData[srcIndexCeil] * fraction;\n              }\n            } else {\n              audioArray = new Float32Array(channelData);\n            }\n            \n            console.log('🎯 [MANUAL] Audio ready:', audioArray.length, 'samples at 16kHz');\n            \n            // Process through speech manager\n            speechManager.onSpeechStart();\n            await speechManager.onSpeechEnd(audioArray);\n            \n            // Clean up audio context\n            await audioContext.close();\n            \n          } catch (error) {\n            console.error('❌ [MANUAL] Audio decoding failed:', error);\n          }\n          \n          // Clean up recording resources\n          stream.getTracks().forEach(track => track.stop());\n          setIsManualRecording(false);\n          setMediaRecorder(null);\n        };\n        \n        setMediaRecorder(recorder);\n        setIsManualRecording(true);\n        recorder.start();\n        \n        \n      } else {\n        // Stop manual recording\n        if (mediaRecorder) {\n          mediaRecorder.stop();\n        }\n      }\n    } catch (error) {\n      console.error('❌ [MANUAL] Manual recording failed:', error);\n    }\n  }, [isManualRecording, mediaRecorder, checkOpenAIKeyAvailability]);\n\n  // Track if we've already auto-started to prevent loops\n  const [hasAutoStarted, setHasAutoStarted] = useState(false);\n\n  // Handle stopping the agent's speech\n  const handleStopSpeech = useCallback(() => {\n    console.log('🛑 [VOICE-MODAL] Stopping agent speech');\n    speechManager.stopAudio();\n    setIsAgentSpeaking(false);\n  }, []);\n\n  // Handle VAD state updates with comprehensive error checking\n  useEffect(() => {\n    console.log('🔄 [VOICE-MODAL] VAD state changed', { \n      isOpen,\n      vadLoading: vad.loading, \n      vadListening: vad.listening,\n      vadUserSpeaking: vad.userSpeaking,\n      vadErrored: vad.errored,\n      hasAutoStarted\n    });\n    \n    // Check for VAD errors\n    if (vad.errored) {\n      console.error('❌ [VOICE-MODAL] VAD encountered an error');\n      return;\n    }\n    \n    // Don't auto-start VAD - wait for user interaction\n    // This prevents microphone permission request on modal open\n    if (isOpen && !vad.loading && !vad.listening && !vad.errored) {\n      console.log('🎯 [VOICE-MODAL] VAD loaded successfully, ready for manual start');\n    }\n    \n    // If VAD is in error state but we haven't tried recovery, attempt recovery\n    if (isOpen && !vad.loading && vad.errored && hasAutoStarted) {\n      console.log('🔄 [VOICE-MODAL] VAD in error state, scheduling recovery attempt...');\n      \n      // Don't continuously retry, just once more after a delay\n      setTimeout(() => {\n        if (vad.errored && !vad.listening) {\n          console.log('🔄 [VOICE-MODAL] Executing VAD recovery attempt');\n          handleToggleListening();\n        }\n      }, 1500);\n    }\n    \n    // Pause when modal closes\n    if (!isOpen && vad.listening) {\n      console.log('🛑 [VOICE-MODAL] Pausing VAD (modal closed)');\n      vad.pause();\n    }\n  }, [isOpen, vad.loading, vad.listening, vad.errored, hasAutoStarted]);\n\n  // Reset auto-start flag and error state when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      setHasAutoStarted(false);\n      setApiKeyError(false);\n      setTranscript('');\n      setAgentResponse('');\n      setStreamingResponse('');\n      setIsStreamingText(false);\n      setIsAgentSpeaking(false);\n      setVoiceConversation(null); // Reset voice conversation for new session\n    }\n  }, [isOpen]);\n\n  useEffect(() => {\n    setLoading(vad.loading);\n  }, [vad.loading]);\n\n  return (\n    <>\n      {isOpen && (\n        <>\n          <style jsx global>{`\n            /* Custom scrollbar styles for voice modal */\n            .voice-response-scroll::-webkit-scrollbar {\n              width: 6px;\n            }\n            \n            .voice-response-scroll::-webkit-scrollbar-track {\n              background: rgba(255, 255, 255, 0.1);\n              border-radius: 3px;\n            }\n            \n            .voice-response-scroll::-webkit-scrollbar-thumb {\n              background: rgba(255, 255, 255, 0.3);\n              border-radius: 3px;\n            }\n            \n            .voice-response-scroll::-webkit-scrollbar-thumb:hover {\n              background: rgba(255, 255, 255, 0.5);\n            }\n            \n            /* Firefox scrollbar */\n            .voice-response-scroll {\n              scrollbar-width: thin;\n              scrollbar-color: rgba(255, 255, 255, 0.3) rgba(255, 255, 255, 0.1);\n            }\n            \n            /* Mobile touch scrolling optimization */\n            .voice-response-scroll {\n              -webkit-overflow-scrolling: touch;\n              scroll-behavior: smooth;\n            }\n          `}</style>\n          {/* Settings and Close buttons - moved outside main container to avoid click issues */}\n          <div \n            className=\"fixed top-4 sm:top-6 md:top-8 right-4 sm:right-6 md:right-8 flex items-center gap-2 sm:gap-3 z-[10000]\"\n            style={{ pointerEvents: 'auto' }}\n          >\n            {/* Settings button */}\n            <button\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                console.log('🔧 Settings button clicked, current state:', isSettingsOpen);\n                setIsSettingsOpen(true);\n                console.log('🔧 Settings state should now be true');\n              }}\n              className=\"w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-white/10 hover:bg-white/20 active:bg-white/30 backdrop-blur-sm flex items-center justify-center transition-all transform active:scale-95\"\n              aria-label=\"Voice settings\"\n            >\n              <Settings className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n            </button>\n            \n            {/* Close button */}\n            <button\n              onClick={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                console.log('❌ Close button clicked');\n                onClose();\n              }}\n              className=\"w-10 h-10 sm:w-12 sm:h-12 rounded-full bg-white/10 hover:bg-white/20 active:bg-white/30 backdrop-blur-sm flex items-center justify-center transition-all transform active:scale-95\"\n              aria-label=\"Close voice mode\"\n            >\n              <X className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\n            </button>\n          </div>\n          \n          <div \n            className=\"fixed inset-0 z-[9999] overflow-hidden\"\n          >\n          {/* Dynamic gradient background based on voice state */}\n          <div className={`absolute inset-0 transition-all duration-1000 pointer-events-none ${\n            voiceState === 'idle' ? 'voice-gradient-idle' :\n            voiceState === 'listening' ? 'voice-gradient-listening' :\n            voiceState === 'recording' ? 'voice-gradient-recording' :\n            voiceState === 'processing' ? 'voice-gradient-processing' :\n            'voice-gradient-speaking'\n          }`} />\n          \n          {/* Wave overlay effect for processing and speaking states */}\n          {(voiceState === 'processing' || voiceState === 'speaking') && (\n            <div className=\"absolute inset-0 voice-overlay-wave pointer-events-none\" />\n          )}\n          \n          {/* Pulse overlay for recording state */}\n          {voiceState === 'recording' && (\n            <div className=\"absolute inset-0 bg-red-500/10 voice-overlay-pulse pointer-events-none\" />\n          )}\n          {loading ? (\n            <div className=\"flex items-center justify-center h-full relative z-10\">\n              <RotateLoader\n                loading={loading}\n                color=\"#ffffff\"\n                aria-label=\"Loading Voice\"\n                data-testid=\"loader\"\n              />\n            </div>\n          ) : (\n            <>\n              {/* Canvas for particle animation */}\n              <div className=\"absolute inset-0 pointer-events-none z-0\">\n                <Canvas />\n              </div>\n              \n              {/* Top-left settings display */}\n              <div className=\"absolute top-4 sm:top-6 md:top-8 left-4 sm:left-6 md:left-8 z-20 space-y-2\">\n                {/* Demo mode indicator */}\n                {isDemoMode && (\n                  <div className=\"bg-amber-500/20 backdrop-blur-sm rounded-lg px-3 py-2 text-amber-300 text-xs flex items-center gap-2 border border-amber-500/30\">\n                    <AlertTriangle className=\"w-3 h-3\" />\n                    <span className=\"font-medium\">Demo Mode</span>\n                  </div>\n                )}\n                \n                {/* Voice settings */}\n                <div className=\"bg-white/5 backdrop-blur-sm rounded-lg px-3 py-2 text-white/70 text-xs space-y-1\">\n                  <div>Voice: {selectedVoice}</div>\n                  <div>Persona: {selectedPersona}</div>\n                  <div>Model: {(() => {\n                    const currentAgentStore = useAgentStore.getState();\n                    const currentAgent = currentAgentStore.agents.find(a => a.id === parseInt(projectId));\n                    return currentAgent?.settings?.chatbot_model || 'gpt-3.5-turbo';\n                  })()}</div>\n                </div>\n              </div>\n\n              \n              \n\n              {/* Status display - mobile optimized with better text handling */}\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white text-center px-4 z-10 pointer-events-auto max-w-full\" style={{ maxHeight: '80vh', display: 'flex', flexDirection: 'column' }}>\n                <div className=\"relative\">\n                  {/* Main status text with state-based colors - no blinking */}\n                  <p className={`text-2xl sm:text-3xl md:text-4xl font-light mb-4 leading-tight transition-all duration-300 ${\n                    voiceState === 'recording' ? 'text-red-400' :\n                    voiceState === 'processing' ? 'text-purple-400' :\n                    voiceState === 'speaking' ? 'text-green-400' :\n                    voiceState === 'listening' ? 'text-blue-400' :\n                    'text-white/90'\n                  }`}>\n                    {isManualRecording \n                      ? 'Analyzing...' \n                      : voiceState === 'listening'\n                      ? 'Listening...'\n                      : voiceState === 'processing'\n                      ? 'Thinking...'\n                      : voiceState === 'speaking'\n                      ? 'Speaking...'\n                      : vad.loading\n                      ? 'Initializing...'\n                      : 'Ready to chat'}\n                  </p>\n                  \n                  {/* Animated dots for processing state */}\n                  {voiceState === 'processing' && (\n                    <div className=\"flex justify-center gap-1 mt-2\">\n                      <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-bounce\" style={{ animationDelay: '0ms' }} />\n                      <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-bounce\" style={{ animationDelay: '150ms' }} />\n                      <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-bounce\" style={{ animationDelay: '300ms' }} />\n                    </div>\n                  )}\n                </div>\n                \n                {/* Show user's transcript - responsive */}\n                {transcript && (\n                  <div className=\"mb-4 sm:mb-6\">\n                    <p className=\"text-xs sm:text-sm text-white/70 mb-1\">You said:</p>\n                    <p className=\"text-sm sm:text-lg text-white/90 max-w-xs sm:max-w-md mx-auto px-2\">&ldquo;{transcript}&rdquo;</p>\n                  </div>\n                )}\n                \n                {/* Show agent's response - mobile optimized with scrollable area */}\n                {agentResponse && (\n                  <div className=\"animate-fade-in pointer-events-auto\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <p className=\"text-xs text-white/70\">Agent:</p>\n                      {isStreamingText && (\n                        <div className=\"flex items-center gap-1\">\n                          <div className=\"w-1.5 h-1.5 bg-blue-400 rounded-full animate-pulse\"></div>\n                          <span className=\"text-xs text-blue-400/70\">streaming...</span>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"voice-response-scroll max-h-[40vh] sm:max-h-[50vh] overflow-y-auto overflow-x-hidden px-4 py-2 -mx-2 rounded-lg bg-white/5 relative\">\n                      <p className=\"text-sm sm:text-base text-white max-w-xs sm:max-w-md mx-auto leading-relaxed break-words whitespace-pre-wrap\">\n                        {agentResponse}\n                        {isStreamingText && (\n                          <span className=\"inline-block w-2 h-4 bg-white/60 ml-1 animate-pulse\"></span>\n                        )}\n                      </p>\n                    </div>\n                    \n                    {/* Audio wave visualization for speaking state */}\n                    {voiceState === 'speaking' && (\n                      <div className=\"flex justify-center items-center gap-1 mt-4\">\n                        {[...Array(5)].map((_, i) => (\n                          <div\n                            key={i}\n                            className=\"w-1 bg-green-400 rounded-full audio-wave-bar\"\n                            style={{\n                              height: '20px',\n                              animationDelay: `${i * 0.1}s`\n                            }}\n                          />\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                )}\n                \n                \n              </div>\n\n              {/* Bottom control buttons - Mobile optimized */}\n              <div \n                className=\"absolute bottom-6 sm:bottom-8 md:bottom-12 left-1/2 transform -translate-x-1/2 flex flex-col items-center gap-4 px-4\"\n                style={{ pointerEvents: 'auto', zIndex: 10000 }}\n              >\n                {/* API Key error warning */}\n                {(() => {\n                  const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                  const showWarning = deploymentMode === 'demo' ? !openAIApiKey : false;\n                  if (!showWarning) return null;\n                  \n                  return (\n                    <div className=\"bg-red-500/20 backdrop-blur-sm rounded-lg px-4 py-3 text-red-300 text-sm flex items-center gap-2 border border-red-500/30 max-w-xs\">\n                      <AlertTriangle className=\"w-4 h-4 flex-shrink-0\" />\n                      <span>Voice requires OpenAI API key. Add it in demo settings.</span>\n                    </div>\n                  );\n                })()}\n                \n                {/* Main voice control button */}\n                <div className=\"flex items-center justify-center\">\n                  {/* Recording/Listening State */}\n                  {(isManualRecording || voiceState === 'listening') && (\n                    <button\n                      onClick={isManualRecording ? handleManualRecording : handleToggleListening}\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-red-500/20 hover:bg-red-500/30 active:bg-red-500/40 backdrop-blur-sm transition-all transform active:scale-95 pointer-events-auto shadow-lg border-2 border-red-500/50\"\n                      style={{ pointerEvents: 'auto' }}\n                      aria-label={isManualRecording ? \"Stop recording\" : \"Stop listening\"}\n                    >\n                      {/* Pulsing animation ring */}\n                      <div className=\"absolute inset-0 rounded-full bg-red-500/30 animate-ping\"></div>\n                      \n                      {/* Inner button content */}\n                      <div className=\"relative z-10 w-full h-full flex items-center justify-center\">\n                        <div className=\"w-6 h-6 sm:w-8 sm:h-8 bg-red-500 rounded-sm\"></div>\n                      </div>\n                    </button>\n                  )}\n\n                  {/* Processing State */}\n                  {voiceState === 'processing' && (\n                    <button\n                      disabled\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-purple-500/20 backdrop-blur-sm shadow-lg border-2 border-purple-500/50\"\n                      aria-label=\"Processing\"\n                    >\n                      {/* Processing animation */}\n                      <div className=\"absolute inset-3 border-4 border-purple-500/30 border-t-purple-500 rounded-full animate-spin\"></div>\n                      <div className=\"absolute inset-6 border-2 border-purple-500/20 border-t-purple-500/60 rounded-full animate-spin\" style={{ animationDirection: 'reverse', animationDuration: '1.5s' }}></div>\n                    </button>\n                  )}\n\n                  {/* Speaking State - Stop button */}\n                  {voiceState === 'speaking' && (\n                    <button\n                      onClick={handleStopSpeech}\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-orange-500/20 hover:bg-orange-500/30 active:bg-orange-500/40 backdrop-blur-sm transition-all transform active:scale-95 pointer-events-auto shadow-lg border-2 border-orange-500/50\"\n                      style={{ pointerEvents: 'auto' }}\n                      aria-label=\"Stop response\"\n                    >\n                      {/* Sound wave animation */}\n                      <div className=\"absolute inset-0 rounded-full\">\n                        {[...Array(3)].map((_, i) => (\n                          <div\n                            key={i}\n                            className=\"absolute inset-0 rounded-full border border-orange-500/30 animate-ping\"\n                            style={{\n                              animationDelay: `${i * 0.2}s`,\n                              animationDuration: '1.5s'\n                            }}\n                          />\n                        ))}\n                      </div>\n                      \n                      <div className=\"relative z-10 w-full h-full flex items-center justify-center\">\n                        <StopCircle className=\"w-8 h-8 sm:w-10 sm:h-10 text-orange-500\" />\n                      </div>\n                    </button>\n                  )}\n\n                  {/* Idle State - Start button */}\n                  {!vad.loading && !isManualRecording && voiceState !== 'speaking' && voiceState !== 'listening' && voiceState !== 'processing' && (\n                    <button\n                      onClick={vad.errored ? handleManualRecording : handleToggleListening}\n                      disabled={(() => {\n                        const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                        return deploymentMode === 'demo' && !openAIApiKey;\n                      })()}\n                      className={`relative w-20 h-20 sm:w-24 sm:h-24 rounded-full backdrop-blur-sm transition-all transform shadow-lg border-2 ${\n                        (() => {\n                          const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                          return deploymentMode === 'demo' && !openAIApiKey;\n                        })() \n                          ? 'bg-gray-500/20 border-gray-500/50 cursor-not-allowed opacity-50' \n                          : 'bg-blue-500/20 hover:bg-blue-500/30 active:bg-blue-500/40 hover:scale-105 active:scale-95 pointer-events-auto border-blue-500/50'\n                      }`}\n                      style={{ pointerEvents: 'auto' }}\n                      aria-label={(() => {\n                        const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                        return deploymentMode === 'demo' && !openAIApiKey ? \"Voice disabled - API key required\" : \"Start voice chat\";\n                      })()}\n                    >\n                      {/* Subtle glow effect */}\n                      <div className=\"absolute inset-0 rounded-full bg-blue-500/10 blur-sm\"></div>\n                      \n                      <div className=\"relative z-10 w-full h-full flex items-center justify-center\">\n                        <Mic className={`w-8 h-8 sm:w-10 sm:h-10 ${\n                          (() => {\n                            const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                            return deploymentMode === 'demo' && !openAIApiKey ? 'text-gray-500' : 'text-blue-500';\n                          })()\n                        }`} />\n                      </div>\n                    </button>\n                  )}\n\n                  {/* Loading State */}\n                  {vad.loading && (\n                    <button\n                      disabled\n                      className=\"relative w-20 h-20 sm:w-24 sm:h-24 rounded-full bg-gray-500/20 backdrop-blur-sm shadow-lg border-2 border-gray-500/50\"\n                      aria-label=\"Loading\"\n                    >\n                      <div className=\"absolute inset-4 border-3 border-gray-500/30 border-t-gray-500 rounded-full animate-spin\"></div>\n                    </button>\n                  )}\n                </div>\n\n                {/* State indicator text (subtle) */}\n                <div className=\"text-xs text-white/60 text-center\">\n                  {(() => {\n                    const deploymentMode = localStorage.getItem('customgpt.deploymentMode') || 'production';\n                    return deploymentMode === 'demo' && !openAIApiKey ? 'API key required' : '';\n                  })() ||\n                   vad.loading ? 'Initializing...' :\n                   isManualRecording ? 'Tap to stop' :\n                   voiceState === 'listening' ? 'Listening...' :\n                   voiceState === 'processing' ? 'Processing...' :\n                   voiceState === 'speaking' ? 'Tap to stop' :\n                   'Tap to speak'}\n                </div>\n              </div>\n\n            </>\n          )}\n          </div>\n        </>\n      )}\n      \n      {/* Voice Settings Modal */}\n      <VoiceSettings \n        isOpen={isSettingsOpen} \n        onClose={() => setIsSettingsOpen(false)}\n        projectId={projectId}\n      />\n    </>\n  );\n}\n\n// Main component that conditionally renders the VAD component\nexport function VoiceModal(props: VoiceModalProps) {\n  const { setVoiceModalOpen } = useVoiceSettingsStore();\n  \n  // Ensure global state is synchronized with props\n  React.useEffect(() => {\n    setVoiceModalOpen(props.isOpen);\n  }, [props.isOpen, setVoiceModalOpen]);\n  \n  // Only render the content (and initialize VAD) when modal is open\n  if (!props.isOpen) {\n    return null;\n  }\n  \n  return <VoiceModalContent {...props} />;\n}","/**\n * ChatContainer Component\n * \n * Main chat interface component that manages the entire chat experience.\n * This is the primary component for integrating CustomGPT chat functionality.\n * \n * Features:\n * - Message display with streaming support\n * - Agent selection and switching\n * - Citation handling with modal details\n * - Multiple deployment modes (standalone, widget, floating)\n * - Welcome screen with example prompts\n * - Error handling and authorization checks\n * \n * For customization:\n * - Example questions are now fetched from agent settings API\n * - Modify DEFAULT_EXAMPLE_PROMPTS for fallback starter questions\n * - Customize WelcomeMessage for branding\n * - Adjust ChatHeader for different layouts\n * - Style using Tailwind classes throughout\n */\n\n'use client';\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Sparkles, Bot } from 'lucide-react';\nimport Link from 'next/link';\nimport { toast } from 'sonner';\n\nimport type { ChatMessage, Citation, Agent } from '@/types';\nimport { cn } from '@/lib/utils';\nimport { Message } from './Message';\nimport { ChatInput } from './ChatInput';\nimport { TypingIndicator } from './TypingIndicator';\nimport { AgentSelector } from './AgentSelector';\nimport { CitationDetailsModal } from './CitationDetailsModal';\nimport { CitationFilePreview } from './CitationFilePreview';\nimport { ConversationManager } from './ConversationManager';\nimport { MessageErrorDisplay } from './MessageErrorDisplay';\nimport { logger } from '@/lib/logger';\nimport { useWidgetSafe } from '@/widget/WidgetContext';\nimport { useMessageStore, useConversationStore, useAgentStore } from '@/hooks/useWidgetStore';\nimport { MessageSkeleton, LoadingOverlay } from '@/components/ui/loading';\nimport { getClient } from '@/lib/api/client';\nimport { VoiceModal } from '@/components/voice/VoiceModal';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\nimport { useDemoStore } from '@/store/demo';\n\n/**\n * Default example prompts shown to users when starting a new conversation\n * These are used as fallback when API-sourced example questions are not available\n */\nconst DEFAULT_EXAMPLE_PROMPTS = [\n  \"What can you help me with?\",\n  \"Explain this document\", \n  \"Summarize key points\",\n  \"Answer my questions\",\n];\n\ninterface ExamplePromptCardProps {\n  /** The prompt text to display */\n  prompt: string;\n  /** Handler called when the prompt is clicked */\n  onClick: (prompt: string) => void;\n}\n\n/**\n * ExamplePromptCard Component\n * \n * Clickable card showing an example prompt that users can select\n * to quickly start a conversation\n */\nconst ExamplePromptCard: React.FC<ExamplePromptCardProps> = ({ prompt, onClick }) => {\n  return (\n    <button\n      onClick={() => onClick(prompt)}\n      className={cn(\n        \"text-left bg-card border border-border rounded-lg\",\n        \"hover:border-accent hover:shadow-sm transition-all\",\n        \"text-card-foreground\",\n        \"p-2.5\",\n        \"text-xs\",\n        \"min-h-[50px] flex items-center\",\n        \"w-full\" // Ensures button takes full width of grid cell\n      )}\n    >\n      {prompt}\n    </button>\n  );\n};\n\ninterface WelcomeMessageProps {\n  /** Handler called when an example prompt is clicked */\n  onPromptClick: (prompt: string) => void;\n}\n\n/**\n * WelcomeMessage Component\n * \n * Displays a welcome screen when no messages exist in the conversation.\n * Shows the agent name, welcome text, and example prompts.\n * Fetches agent-specific example questions from API with fallback to defaults.\n * Uses Framer Motion for smooth animations.\n */\nconst WelcomeMessage: React.FC<WelcomeMessageProps> = ({ onPromptClick }) => {\n  const { currentAgent } = useAgentStore();\n  const [exampleQuestions, setExampleQuestions] = useState<string[]>(DEFAULT_EXAMPLE_PROMPTS);\n  const [loading, setLoading] = useState(false);\n  \n  /**\n   * Fetch agent settings to get custom example questions\n   */\n  useEffect(() => {\n    const fetchExampleQuestions = async () => {\n      if (!currentAgent) {\n        return;\n      }\n\n      // If we already have example questions from settings, use them\n      if (currentAgent.settings?.example_questions && currentAgent.settings.example_questions.length > 0) {\n        setExampleQuestions(currentAgent.settings.example_questions);\n        return;\n      }\n\n      setLoading(true);\n      try {\n        const client = getClient();\n        const response = await client.getAgentSettings(currentAgent.id);\n        const settings = response.data || response;\n        \n        // Use API example questions if available, otherwise keep defaults\n        if (settings.example_questions && settings.example_questions.length > 0) {\n          setExampleQuestions(settings.example_questions);\n          \n          logger.info('UI', 'Loaded custom example questions from API', {\n            agentId: currentAgent.id,\n            questionCount: settings.example_questions.length\n          });\n        } else {\n          logger.info('UI', 'No custom example questions found, using defaults', {\n            agentId: currentAgent.id\n          });\n        }\n      } catch (error) {\n        logger.warn('UI', 'Failed to load agent settings for example questions', {\n          agentId: currentAgent.id,\n          error: error instanceof Error ? error.message : String(error)\n        });\n        // Keep default questions on error\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchExampleQuestions();\n  }, [currentAgent]);\n  \n  return (\n    <div className={cn(\n      \"flex flex-col items-center justify-center h-full py-8\",\n      \"px-4 md:px-8\"\n    )}>\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ duration: 0.5 }}\n        className={cn(\n          \"text-center w-full\",\n          \"max-w-sm sm:max-w-md md:max-w-lg\"\n        )}\n      >\n        {/* Agent Avatar */}\n        <div className=\"w-16 h-16 rounded-full flex items-center justify-center mb-6 mx-auto overflow-hidden bg-accent\">\n          {currentAgent?.settings?.chatbot_avatar ? (\n            <img \n              src={currentAgent.settings.chatbot_avatar} \n              alt={`${currentAgent.project_name} avatar`} \n              className=\"w-16 h-16 rounded-full object-cover\"\n            />\n          ) : (\n            <Bot className=\"w-8 h-8 text-muted-foreground\" />\n          )}\n        </div>\n        \n        {/* Welcome Text */}\n        <h3 className={cn(\n          \"font-semibold text-foreground mb-2\",\n          \"text-lg sm:text-xl md:text-2xl\"\n        )}>\n          Welcome to {currentAgent?.project_name || 'CustomGPT'}!\n        </h3>\n        <p className={cn(\n          \"text-muted-foreground mb-6 sm:mb-8\",\n          \"text-sm sm:text-base\"\n        )}>\n          I&apos;m here to help answer your questions and assist with your tasks. How can I help you today?\n        </p>\n        \n        {/* Example Prompts */}\n        <div className={cn(\n          \"grid gap-2 sm:gap-3 w-full\",\n          \"grid-cols-2\",\n          \"max-w-full sm:max-w-md md:max-w-lg\",\n          \"auto-cols-fr\" // Ensures equal column widths\n        )}>\n          {exampleQuestions.map((prompt, idx) => (\n            <motion.div\n              key={`${currentAgent?.id}-${idx}`} // Include agent ID to force re-render on agent change\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              transition={{ duration: 0.3, delay: 0.1 + (idx * 0.1) }}\n            >\n              <ExamplePromptCard\n                prompt={prompt}\n                onClick={onPromptClick}\n              />\n            </motion.div>\n          ))}\n        </div>\n        \n        {/* Loading indicator for example questions */}\n        {loading && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className=\"mt-4\"\n          >\n            <p className=\"text-xs text-muted-foreground\">Loading custom questions...</p>\n          </motion.div>\n        )}\n      </motion.div>\n    </div>\n  );\n};\n\ninterface MessageAreaProps {\n  /** Additional CSS classes for styling */\n  className?: string;\n}\n\n/**\n * MessageArea Component\n * \n * Scrollable area that displays all messages in the current conversation.\n * Handles:\n * - Message rendering with streaming support\n * - Auto-scrolling to latest messages\n * - Citation click handling\n * - Error display\n * - Welcome message when empty\n * - Loading states with typing indicator\n */\nconst MessageArea: React.FC<MessageAreaProps> = ({ className }) => {\n  const { \n    messages, \n    streamingMessage, \n    isStreaming,\n    error,\n    sendMessage,\n    updateMessageFeedback,\n    loading,\n    clearError,\n    setMessagesForConversation\n  } = useMessageStore();\n  const { currentConversation } = useConversationStore();\n  const { currentAgent } = useAgentStore();\n  const scrollRef = useRef<HTMLDivElement>(null);\n  const [isLoadingMessages, setIsLoadingMessages] = React.useState(false);\n  const [prevConversationId, setPrevConversationId] = React.useState<string | null>(null);\n  \n  // Citation modal state - tracks which citation is being viewed\n  const [selectedCitationId, setSelectedCitationId] = React.useState<number | string | null>(null);\n  const [citationModalOpen, setCitationModalOpen] = React.useState(false);\n  \n  // Citation preview state\n  const [previewCitationId, setPreviewCitationId] = React.useState<string | null>(null);\n  const [previewModalOpen, setPreviewModalOpen] = React.useState(false);\n  \n  // Check if we're in free trial mode by looking at localStorage\n  const [isFreeTrialMode, setIsFreeTrialMode] = React.useState(false);\n  \n  React.useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const freeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n      setIsFreeTrialMode(freeTrialFlag === 'true');\n    }\n  }, []);\n  \n  const conversationMessages = currentConversation \n    ? messages.get(currentConversation.id.toString()) || []\n    : [];\n  \n  // Detect conversation change\n  useEffect(() => {\n    if (currentConversation && currentConversation.id.toString() !== prevConversationId) {\n      setIsLoadingMessages(true);\n      setPrevConversationId(currentConversation.id.toString());\n      \n      // Set a timeout to hide loading after a reasonable time\n      const timeout = setTimeout(() => {\n        setIsLoadingMessages(false);\n      }, 1000);\n      \n      return () => clearTimeout(timeout);\n    }\n  }, [currentConversation, prevConversationId]);\n  \n  // Hide loading when messages arrive OR when message loading completes\n  useEffect(() => {\n    if (isLoadingMessages && (conversationMessages.length > 0 || !loading)) {\n      setIsLoadingMessages(false);\n    }\n  }, [conversationMessages, isLoadingMessages, loading]);\n  \n  /**\n   * Auto-scroll effect\n   * Automatically scrolls to the bottom when new messages arrive\n   * or when streaming messages are updated\n   * \n   * Uses instant scroll for conversation switches to avoid annoying\n   * scroll animations when clicking on past chats with many messages.\n   * Uses smooth scroll for new messages and streaming updates.\n   */\n  useEffect(() => {\n    if (scrollRef.current) {\n      // Use instant scroll when loading messages (conversation switch)\n      // Use smooth scroll for real-time message additions and streaming\n      const scrollBehavior = isLoadingMessages ? 'auto' : 'smooth';\n      \n      scrollRef.current.scrollTo({\n        top: scrollRef.current.scrollHeight,\n        behavior: scrollBehavior,\n      });\n    }\n  }, [conversationMessages, streamingMessage, isLoadingMessages]);\n  \n  const handleExamplePrompt = (prompt: string) => {\n    // Check if in free trial mode\n    if (isFreeTrialMode) {\n      toast.error('Free Trial Limitation', {\n        description: 'Sending messages is not available in free trial mode. Please use your own API key to send messages.',\n        duration: 5000,\n      });\n      return;\n    }\n    \n    logger.info('UI', 'Example prompt clicked', { prompt });\n    sendMessage(prompt);\n  };\n  \n  const handleCitationClick = (citation: Citation) => {\n    logger.info('UI', 'Citation clicked', {\n      citationId: citation.id,\n      citationIndex: citation.index,\n      citationTitle: citation.title\n    });\n    \n    // Open citation details modal with the citation ID\n    if (citation.id) {\n      setSelectedCitationId(citation.id);\n      setCitationModalOpen(true);\n    }\n  };\n  \n  const handlePreviewClick = (citation: Citation) => {\n    logger.info('UI', 'Citation preview requested', {\n      citationId: citation.id,\n      citationTitle: citation.title\n    });\n    \n    // Open preview modal with the citation ID\n    if (citation.id) {\n      setPreviewCitationId(citation.id);\n      setPreviewModalOpen(true);\n    }\n  };\n  \n  const handleMessageFeedback = async (messageId: string, feedback: 'like' | 'dislike') => {\n    logger.info('UI', 'Message feedback provided', {\n      messageId,\n      feedback\n    });\n    \n    // Call the message store to update feedback\n    await updateMessageFeedback(messageId, feedback);\n  };\n  \n  return (\n    <div\n      ref={scrollRef}\n      className={cn(\n        'flex-1 overflow-y-auto scroll-smooth',\n        'bg-gradient-to-b from-muted/50 to-background',\n        className\n      )}\n    >\n      {/* Error Message */}\n      {error && (\n        <div className=\"p-4 m-4\">\n          <MessageErrorDisplay \n            error={error}\n            onRetry={() => {\n              // Clear error first\n              clearError();\n              \n              // Then retry sending last message if applicable\n              if (currentConversation) {\n                const conversationMessages = messages.get(currentConversation.id.toString()) || [];\n                const lastUserMessage = conversationMessages\n                  .filter(m => m.role === 'user')\n                  .pop();\n                \n                if (lastUserMessage) {\n                  // Remove the error message before retrying\n                  const filteredMessages = conversationMessages.filter(m => m.id !== lastUserMessage.id);\n                  setMessagesForConversation(\n                    currentConversation.id.toString(), \n                    filteredMessages\n                  );\n                  \n                  // Retry sending the message\n                  sendMessage(lastUserMessage.content);\n                }\n              }\n            }}\n          />\n        </div>\n      )}\n\n      {/* Loading state when switching conversations */}\n      {isLoadingMessages && (\n        <LoadingOverlay \n          visible={true} \n          message={conversationMessages.length > 0 ? \"Loading conversation...\" : \"Switching to conversation...\"}\n          blur={true}\n        />\n      )}\n      \n      {/* Message skeleton fallback for empty conversations */}\n      {isLoadingMessages && conversationMessages.length === 0 && !isStreaming && (\n        <div className=\"space-y-0 opacity-30\">\n          <MessageSkeleton isAssistant={false} lines={2} />\n          <MessageSkeleton isAssistant={true} lines={3} />\n          <MessageSkeleton isAssistant={false} lines={1} />\n          <MessageSkeleton isAssistant={true} lines={4} />\n        </div>\n      )}\n\n      {/* Welcome Message */}\n      {conversationMessages.length === 0 && !streamingMessage && !error && !isLoadingMessages && (\n        <WelcomeMessage onPromptClick={handleExamplePrompt} />\n      )}\n      \n      {/* Messages */}\n      {conversationMessages.length > 0 && (\n        <div className=\"space-y-0\">\n          {conversationMessages.map((message, index) => (\n            <Message\n              key={message.id}\n              message={message}\n              agent={currentAgent}\n              isLast={index === conversationMessages.length - 1}\n              onCitationClick={handleCitationClick}\n              onPreviewClick={handlePreviewClick}\n              onFeedback={(feedback) => handleMessageFeedback(message.id, feedback)}\n            />\n          ))}\n        </div>\n      )}\n      \n      {/* Streaming Message */}\n      {streamingMessage && (\n        <Message\n          message={streamingMessage}\n          agent={currentAgent}\n          isStreaming={true}\n          isLast={true}\n          onCitationClick={handleCitationClick}\n          onPreviewClick={handlePreviewClick}\n        />\n      )}\n      \n      {/* Typing Indicator */}\n      {isStreaming && !streamingMessage && (\n        <TypingIndicator />\n      )}\n      \n      {/* Citation Details Modal */}\n      {selectedCitationId && (\n        <CitationDetailsModal\n          isOpen={citationModalOpen}\n          onClose={() => {\n            setCitationModalOpen(false);\n            setSelectedCitationId(null);\n          }}\n          citationId={selectedCitationId}\n          projectId={currentAgent?.id}\n        />\n      )}\n      \n      {/* Citation File Preview Modal */}\n      {previewCitationId && (\n        <CitationFilePreview\n          isOpen={previewModalOpen}\n          onClose={() => {\n            setPreviewModalOpen(false);\n            setPreviewCitationId(null);\n          }}\n          citationId={previewCitationId}\n          fileName={`Citation_${previewCitationId}.txt`}\n        />\n      )}\n    </div>\n  );\n};\n\ninterface ChatHeaderProps {\n  /** Deployment mode affects header layout */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler for agent settings button */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Current conversation ID */\n  currentConversationId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback to create new conversation */\n  onCreateConversation?: () => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n}\n\n/**\n * ChatHeader Component\n * \n * Header bar for the chat interface. Layout changes based on deployment mode:\n * - Standalone: Full header with agent selector\n * - Widget/Floating: Compact header with close button\n * \n * Shows agent status (online/offline) and provides agent switching\n */\nconst ChatHeader: React.FC<ChatHeaderProps> = ({ \n  mode = 'standalone', \n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  currentConversationId,\n  onConversationChange,\n  onCreateConversation,\n  conversationRefreshKey\n}) => {\n  const { currentAgent } = useAgentStore();\n  const { isMobile } = useBreakpoint();\n  \n  if (mode === 'widget' || mode === 'floating') {\n    return (\n      <header className=\"border-b border-border bg-background\">\n        {/* Conversation Manager */}\n        {enableConversationManagement && sessionId && (\n          <div className=\"px-4 py-2 border-b border-border\">\n            <ConversationManager\n              sessionId={sessionId}\n              maxConversations={maxConversations}\n              currentConversationId={currentConversationId}\n              onConversationChange={onConversationChange}\n              onCreateConversation={onCreateConversation}\n              className=\"w-full\"\n              refreshKey={conversationRefreshKey}\n            />\n          </div>\n        )}\n        \n        {/* Header Content */}\n        <div className=\"flex items-center justify-between px-4 py-3\">\n          <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n            <div className=\"w-8 h-8 rounded-lg flex items-center justify-center flex-shrink-0\">\n              <img \n                src={mode === 'widget' || mode === 'floating' ? './logo.png' : '/logo.png'} \n                alt=\"CustomGPT.ai Logo\" \n                className=\"w-8 h-8 rounded-lg\"\n              />\n            </div>\n            <div className=\"min-w-0 flex-1\">\n              <h2 className=\"font-semibold text-foreground truncate\">\n                {currentAgent?.project_name || 'CustomGPT Assistant'}\n              </h2>\n              <p className=\"text-xs text-muted-foreground\">\n                {currentAgent?.is_chat_active ? 'Online' : 'Offline'}\n              </p>\n            </div>\n          </div>\n          \n          {onClose && (\n            <button\n              onClick={onClose}\n              className=\"p-1.5 rounded-lg hover:bg-accent hover:text-accent-foreground transition-colors flex-shrink-0\"\n            >\n              <span className=\"sr-only\">Close</span>\n              ×\n            </button>\n          )}\n        </div>\n      </header>\n    );\n  }\n  \n  // For standalone mode, show agent selector header (but not on mobile)\n  if (mode === 'standalone' && !isMobile) {\n    return (\n      <header className=\"flex items-center justify-between px-4 py-3 border-b border-border bg-background\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"w-8 h-8 rounded-lg bg-brand-500 flex items-center justify-center\">\n            <Bot className=\"w-5 h-5 text-white\" />\n          </div>\n          <h1 className=\"text-lg font-semibold text-foreground\">\n            Agent Chat\n          </h1>\n        </div>\n        \n        <div className=\"flex-1 max-w-xs ml-4\">\n          <AgentSelector\n            onSettingsClick={onAgentSettings}\n            className=\"w-full\"\n          />\n        </div>\n      </header>\n    );\n  }\n  \n  return null;\n};\n\ninterface ChatContainerProps {\n  /** Deployment mode - affects layout and styling */\n  mode?: 'standalone' | 'widget' | 'floating';\n  /** Additional CSS classes */\n  className?: string;\n  /** Handler for close button (widget/floating modes) */\n  onClose?: () => void;\n  /** Handler when agent settings are requested */\n  onAgentSettings?: (agent: Agent) => void;\n  /** Enable conversation management UI */\n  enableConversationManagement?: boolean;\n  /** Maximum conversations per session */\n  maxConversations?: number;\n  /** Session ID for conversation isolation */\n  sessionId?: string;\n  /** Specific conversation thread to load */\n  threadId?: string;\n  /** Callback when conversation changes */\n  onConversationChange?: (conversation: any) => void;\n  /** Callback when message is sent/received */\n  onMessage?: (message: any) => void;\n  /** Key to trigger ConversationManager refresh */\n  conversationRefreshKey?: number;\n  /** Mobile optimization mode */\n  isMobile?: boolean;\n}\n\n/**\n * ChatContainer Component - Main Export\n * \n * The primary chat interface component. Can be deployed in three modes:\n * \n * 1. Standalone: Full-page chat interface\n *    - Use when chat is the main feature\n *    - No fixed dimensions, fills container\n * \n * 2. Widget: Embedded chat widget\n *    - Use for embedding in existing pages\n *    - Fixed dimensions with shadow\n * \n * 3. Floating: Floating chat bubble\n *    - Use for overlay chat interfaces\n *    - Fixed dimensions with stronger shadow\n * \n * @example\n * // Standalone mode\n * <ChatContainer mode=\"standalone\" />\n * \n * @example\n * // Widget mode with close handler\n * <ChatContainer \n *   mode=\"widget\" \n *   onClose={() => setShowChat(false)}\n * />\n */\nexport const ChatContainer: React.FC<ChatContainerProps> = ({ \n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  conversationRefreshKey,\n  isMobile = false\n}) => {\n  const { sendMessage, isStreaming, cancelStreaming } = useMessageStore();\n  const { fetchAgents, agents, currentAgent } = useAgentStore();\n  const { currentConversation } = useConversationStore();\n  \n  // Get widget instance from context\n  const widget = useWidgetSafe();\n  \n  // Track current conversation for the widget\n  const [currentConversationId, setCurrentConversationId] = React.useState<string | null>(null);\n  \n  // Voice modal state\n  const [isVoiceModalOpen, setIsVoiceModalOpen] = React.useState(false);\n  const [voiceError, setVoiceError] = React.useState<string | null>(null);\n  \n  // Get demo store state\n  const { isDemoMode, openAIApiKey } = useDemoStore();\n  \n  // Check if we're in free trial mode by looking at localStorage\n  const [isFreeTrialMode, setIsFreeTrialMode] = React.useState(false);\n  \n  React.useEffect(() => {\n    if (mode === 'standalone' && typeof window !== 'undefined') {\n      const freeTrialFlag = localStorage.getItem('customgpt.freeTrialMode');\n      setIsFreeTrialMode(freeTrialFlag === 'true');\n    }\n  }, [mode]);\n  \n  // Check if OpenAI key is available\n  const checkVoiceAvailability = () => {\n    // In demo mode, check if user has provided OpenAI key\n    if (isDemoMode) {\n      if (!openAIApiKey) {\n        return {\n          available: false,\n          error: 'Voice feature requires an OpenAI API key. Please enable voice capability in demo settings and provide your OpenAI API key.'\n        };\n      }\n      return { available: true };\n    }\n    \n    // In normal mode, check if OpenAI key is in environment\n    // We can't check server-side env vars from client, so we'll let the API handle it\n    return { available: true };\n  };\n  \n  // Handle voice button click\n  const handleVoiceClick = () => {\n    const { available, error } = checkVoiceAvailability();\n    \n    if (!available) {\n      toast.error(error || 'Voice feature is not available');\n      return;\n    }\n    \n    setIsVoiceModalOpen(true);\n  };\n  \n  // Handle conversation management\n  const handleConversationChange = (conversation: any) => {\n    setCurrentConversationId(conversation.id);\n    onConversationChange?.(conversation);\n    // The widget will handle the actual conversation switch\n    if (widget) {\n      widget.switchConversation(conversation.id);\n    }\n  };\n  \n  const handleCreateConversation = () => {\n    if (widget) {\n      const newConv = widget.createConversation();\n      if (newConv) {\n        setCurrentConversationId(newConv.id);\n      } else {\n        // Show user-friendly message when conversation limit is reached\n        const maxConversations = widget.configuration?.maxConversations || 5;\n        toast.error(`You've reached the maximum limit of ${maxConversations} conversations. Please delete an existing conversation to create a new one.`);\n      }\n    }\n  };\n\n  /**\n   * Agent initialization effect\n   * Fetches available agents when the component first mounts\n   * Only runs if agents haven't been loaded yet\n   */\n  useEffect(() => {\n    const initializeAgents = async () => {\n      // Only fetch if we don't have agents and no current agent\n      if (agents.length === 0 && !currentAgent) {\n        logger.info('UI', 'Initializing agents on ChatContainer mount');\n        try {\n          await fetchAgents();\n          logger.info('UI', 'Agents initialized successfully', {\n            agentCount: agents.length\n          });\n        } catch (error) {\n          logger.error('UI', 'Failed to initialize agents', error, {\n            errorMessage: error instanceof Error ? error.message : String(error)\n          });\n          console.error('Failed to initialize agents:', error);\n        }\n      } else {\n        logger.info('UI', 'Agents already initialized', {\n          agentCount: agents.length,\n          hasCurrentAgent: !!currentAgent,\n          currentAgentName: currentAgent?.project_name\n        });\n      }\n    };\n\n    initializeAgents();\n  }, [agents.length, currentAgent, fetchAgents]); // Add dependencies for exhaustive deps\n  \n  const handleSendMessage = async (content: string, files?: File[]) => {\n    // Check if in free trial mode\n    if (isFreeTrialMode) {\n      toast.error('Free Trial Limitation', {\n        description: 'Sending messages is not available in free trial mode. Please use your own API key to send messages.',\n        duration: 5000,\n      });\n      return;\n    }\n    \n    logger.info('UI', 'Sending message from ChatContainer', {\n      contentLength: content.length,\n      hasFiles: files && files.length > 0,\n      fileCount: files?.length || 0,\n      currentAgent: currentAgent?.project_name,\n      agentId: currentAgent?.id\n    });\n    \n    try {\n      await sendMessage(content, files);\n      logger.info('UI', 'Message sent successfully');\n    } catch (error) {\n      logger.error('UI', 'Failed to send message from ChatContainer', error, {\n        errorMessage: error instanceof Error ? error.message : String(error),\n        isAuthError: error instanceof Error && (error.message.includes('403') || error.message.includes('unauthorized'))\n      });\n      console.error('Failed to send message:', error);\n    }\n  };\n  \n  const handleStopGeneration = () => {\n    logger.info('UI', 'User cancelled streaming generation');\n    cancelStreaming();\n  };\n  \n  const handleAgentSettings = (agent: Agent) => {\n    logger.info('UI', 'Agent settings requested', {\n      agentId: agent.id,\n      agentName: agent.project_name\n    });\n    onAgentSettings?.(agent);\n  };\n  \n  return (\n    <div\n      className={cn(\n        'flex flex-col bg-background',\n        mode === 'standalone' && 'h-full',\n        mode === 'widget' && !isMobile && 'h-[600px] w-[400px] rounded-lg shadow-xl border border-border',\n        mode === 'floating' && !isMobile && 'h-[600px] w-[400px] rounded-lg shadow-2xl border border-border',\n        isMobile && 'h-full w-full',\n        className\n      )}\n    >\n      <ChatHeader \n        mode={mode} \n        onClose={onClose}\n        onAgentSettings={handleAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        currentConversationId={currentConversationId || currentConversation?.id.toString()}\n        onConversationChange={handleConversationChange}\n        onCreateConversation={handleCreateConversation}\n        conversationRefreshKey={conversationRefreshKey}\n      />\n      <MessageArea className=\"flex-1 overflow-y-auto\" />\n      <div className={cn(\n        \"mt-auto\",\n        isMobile && mode === 'standalone' ? \"pb-[30px]\" : \"\"\n      )}>\n        <ChatInput\n          onSend={handleSendMessage}\n          disabled={isStreaming || isFreeTrialMode}\n          placeholder={\n            isFreeTrialMode \n              ? \"Free trial mode - Use your API key to send messages\" \n              : isStreaming \n                ? \"AI is thinking...\" \n                : \"Send a message...\"\n          }\n          onVoiceClick={handleVoiceClick}\n          isMobile={isMobile}\n          mode={mode}\n        />\n      </div>\n      \n      {/* Branding Footer */}\n      <div className={cn(\n        \"px-4 py-2 border-t border-border bg-muted\",\n        mode === 'standalone' && \"flex items-center justify-center\"\n      )}>\n        <a\n          href=\"https://customgpt.ai\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          className={cn(\n            \"text-xs text-muted-foreground hover:text-foreground transition-colors\",\n            mode === 'standalone' ? \"inline-flex items-center\" : \"block text-center\"\n          )}\n        >\n          Powered by CustomGPT.ai\n        </a>\n      </div>\n      \n      {/* Voice Modal */}\n      {currentAgent && (\n        <VoiceModal\n          isOpen={isVoiceModalOpen}\n          onClose={() => setIsVoiceModalOpen(false)}\n          projectId={currentAgent.id.toString()}\n          projectName={currentAgent.project_name}\n        />\n      )}\n    </div>\n  );\n};","\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-11 w-full items-center justify-between rounded-lg border border-input bg-background px-3.5 py-2 text-sm\",\n      \"transition-all duration-200 ease-out\",\n      \"hover:border-primary/30\",\n      \"focus:outline-none focus:ring-2 focus:ring-primary/20 focus:border-primary\",\n      \"focus:bg-primary/5\",\n      \"disabled:cursor-not-allowed disabled:opacity-50 disabled:bg-muted/50\",\n      \"text-foreground placeholder:text-muted-foreground\",\n      \"[&>span]:line-clamp-1\",\n      \"group\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50 transition-transform duration-200 group-data-[state=open]:rotate-180\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      \"border-b border-gray-200/30 dark:border-gray-800/20 bg-background/50\",\n      \"hover:bg-accent/50 transition-colors\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4 opacity-50\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      \"border-t border-gray-200/30 dark:border-gray-800/20 bg-background/50\",\n      \"hover:bg-accent/50 transition-colors\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4 opacity-50\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden\",\n        \"rounded-lg border border-gray-200/50 dark:border-gray-800/30\",\n        \"bg-background/95 backdrop-blur-md\",\n        \"text-foreground shadow-lg\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out\",\n        \"data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n        \"data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95\",\n        \"data-[side=bottom]:slide-in-from-top-2\",\n        \"data-[side=left]:slide-in-from-right-2\",\n        \"data-[side=right]:slide-in-from-left-2\",\n        \"data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" && [\n          \"data-[side=bottom]:translate-y-1\",\n          \"data-[side=left]:-translate-x-1\",\n          \"data-[side=right]:translate-x-1\",\n          \"data-[side=top]:-translate-y-1\",\n        ],\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1.5\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-pointer select-none items-center\",\n      \"rounded-md py-2 pl-8 pr-2 text-sm outline-none\",\n      \"transition-all duration-150\",\n      \"hover:bg-accent hover:text-accent-foreground\",\n      \"focus:bg-accent focus:text-accent-foreground\",\n      \"data-[state=checked]:bg-primary/10 data-[state=checked]:text-primary\",\n      \"data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-4 w-4 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-3.5 w-3.5 animate-in fade-in-0 zoom-in-0\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}","\"use client\"\n\nimport * as React from \"react\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n  SelectGroup,\n  SelectLabel,\n  SelectSeparator,\n} from \"@/components/ui/select\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface SelectOption {\n  value: string;\n  label: string;\n  disabled?: boolean;\n}\n\ninterface SimpleSelectProps {\n  value: string;\n  onValueChange: (value: string) => void;\n  options: SelectOption[];\n  placeholder?: string;\n  className?: string;\n  disabled?: boolean;\n  name?: string;\n  id?: string;\n}\n\n/**\n * Simple Select Component\n * \n * A wrapper around the Radix UI Select component that provides a simpler API\n * similar to native HTML select elements, making migration easier.\n * \n * @example\n * ```tsx\n * <SimpleSelect\n *   value={dateRange}\n *   onValueChange={setDateRange}\n *   options={[\n *     { value: '7d', label: 'Last 7 days' },\n *     { value: '30d', label: 'Last 30 days' },\n *     { value: '90d', label: 'Last 90 days' },\n *     { value: '1y', label: 'Last year' }\n *   ]}\n *   placeholder=\"Select date range\"\n * />\n * ```\n */\nexport function SimpleSelect({\n  value,\n  onValueChange,\n  options,\n  placeholder = \"Select an option\",\n  className,\n  disabled = false,\n  name,\n  id,\n}: SimpleSelectProps) {\n  return (\n    <Select\n      value={value}\n      onValueChange={onValueChange}\n      disabled={disabled}\n      name={name}\n    >\n      <SelectTrigger className={cn(\"w-full\", className)} id={id}>\n        <SelectValue placeholder={placeholder} />\n      </SelectTrigger>\n      <SelectContent>\n        {options.map((option) => (\n          <SelectItem\n            key={option.value}\n            value={option.value}\n            disabled={option.disabled}\n          >\n            {option.label}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n\n/**\n * Grouped Select Component\n * \n * For selects with grouped options (like languages grouped by region)\n */\nexport interface SelectGroup {\n  label: string;\n  options: SelectOption[];\n}\n\ninterface GroupedSelectProps extends Omit<SimpleSelectProps, 'options'> {\n  groups: SelectGroup[];\n}\n\nexport function GroupedSelect({\n  value,\n  onValueChange,\n  groups,\n  placeholder = \"Select an option\",\n  className,\n  disabled = false,\n  name,\n  id,\n}: GroupedSelectProps) {\n  return (\n    <Select\n      value={value}\n      onValueChange={onValueChange}\n      disabled={disabled}\n      name={name}\n    >\n      <SelectTrigger className={cn(\"w-full\", className)} id={id}>\n        <SelectValue placeholder={placeholder} />\n      </SelectTrigger>\n      <SelectContent>\n        {groups.map((group, index) => (\n          <React.Fragment key={index}>\n            {index > 0 && <SelectSeparator />}\n            <SelectGroup>\n              <SelectLabel>{group.label}</SelectLabel>\n              {group.options.map((option) => (\n                <SelectItem\n                  key={option.value}\n                  value={option.value}\n                  disabled={option.disabled}\n                >\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectGroup>\n          </React.Fragment>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n\n","import React from 'react';\nimport { X, Calendar, User, Hash, Clock, AlertCircle, Copy } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { toast } from 'sonner';\nimport type { Conversation } from '@/types';\nimport { Button } from '@/components/ui/button';\nimport { formatTimestamp, cn } from '@/lib/utils';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\ninterface ConversationDetailsModalProps {\n  conversation: Conversation | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const ConversationDetailsModal: React.FC<ConversationDetailsModalProps> = ({\n  conversation,\n  isOpen,\n  onClose,\n}) => {\n  const { isMobile } = useBreakpoint();\n  \n  if (!isOpen || !conversation) return null;\n\n  const copyToClipboard = (text: string, label: string) => {\n    navigator.clipboard.writeText(text);\n    toast.success(`${label} copied to clipboard`);\n  };\n\n  const formatFullTimestamp = (timestamp: string) => {\n    const date = new Date(timestamp);\n    return date.toLocaleString('en-US', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'short'\n    });\n  };\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <>\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"fixed inset-0 bg-black bg-opacity-50 z-50\"\n            onClick={onClose}\n          />\n\n          {/* Modal */}\n          <motion.div\n            initial={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: 0.95, y: isMobile ? '100%' : 0 }}\n            className={cn(\n              \"fixed bg-background shadow-xl z-50\",\n              isMobile \n                ? \"inset-x-0 bottom-0 top-20 rounded-t-xl flex flex-col\" \n                : \"inset-x-0 top-[10%] mx-auto max-w-2xl rounded-lg max-h-[80vh] overflow-hidden\"\n            )}\n            onClick={(e) => e.stopPropagation()}\n          >\n            {/* Header */}\n            <div className={cn(\n              \"flex items-center justify-between border-b border-border bg-background/95 backdrop-blur-sm flex-shrink-0\",\n              isMobile ? \"px-4 py-4\" : \"p-6\"\n            )}>\n              <h2 className={cn(\n                \"font-semibold text-foreground\",\n                isMobile ? \"text-base\" : \"text-xl\"\n              )}>Conversation Details</h2>\n              <Button\n                size=\"icon\"\n                variant=\"ghost\"\n                onClick={onClose}\n                className={cn(\n                  isMobile ? \"h-9 w-9 touch-target\" : \"h-8 w-8\"\n                )}\n              >\n                <X className={cn(\n                  isMobile ? \"h-5 w-5\" : \"h-4 w-4\"\n                )} />\n              </Button>\n            </div>\n\n            {/* Content */}\n            <div className={cn(\n              \"overflow-y-auto\",\n              isMobile \n                ? \"flex-1 px-4 py-4 pb-6 safe-area-pb space-y-6\" \n                : \"p-6 space-y-6 max-h-[calc(80vh-200px)]\"\n            )}>\n              {/* Basic Information */}\n              <div>\n                <h3 className={cn(\n                  \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                  isMobile ? \"text-xs\" : \"text-sm\"\n                )}>\n                  Basic Information\n                </h3>\n                <div className={cn(\n                  \"bg-muted rounded-lg space-y-4\",\n                  isMobile ? \"p-4\" : \"p-4 space-y-3\"\n                )}>\n                  {/* Conversation Name */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Conversation Name</span>\n                    </div>\n                    <span className={cn(\n                      \"text-foreground font-medium break-words\",\n                      isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                    )}>{conversation.name}</span>\n                  </div>\n\n                  {/* Conversation ID */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Conversation ID</span>\n                    </div>\n                    <div className={cn(\n                      \"flex items-center gap-2\",\n                      isMobile ? \"ml-6\" : \"\"\n                    )}>\n                      <span className={cn(\n                        \"text-foreground font-mono\",\n                        isMobile ? \"text-xs\" : \"text-sm\"\n                      )}>{conversation.id}</span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className={cn(\n                          isMobile ? \"h-8 w-8 touch-target\" : \"h-6 w-6\"\n                        )}\n                        onClick={() => copyToClipboard(conversation.id.toString(), 'Conversation ID')}\n                      >\n                        <Copy className={cn(\n                          isMobile ? \"h-4 w-4\" : \"h-3 w-3\"\n                        )} />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Session ID */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Session ID</span>\n                    </div>\n                    <div className={cn(\n                      \"flex items-center gap-2\",\n                      isMobile ? \"ml-6\" : \"\"\n                    )}>\n                      <span \n                        className={cn(\n                          \"text-foreground font-mono break-all\",\n                          isMobile ? \"text-sm\" : \"text-sm truncate max-w-[300px]\"\n                        )} \n                        title={conversation.session_id}\n                      >\n                        {conversation.session_id}\n                      </span>\n                      <Button\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        className={cn(\n                          isMobile ? \"h-8 w-8 touch-target flex-shrink-0\" : \"h-6 w-6\"\n                        )}\n                        onClick={() => copyToClipboard(conversation.session_id, 'Session ID')}\n                      >\n                        <Copy className={cn(\n                          isMobile ? \"h-4 w-4\" : \"h-3 w-3\"\n                        )} />\n                      </Button>\n                    </div>\n                  </div>\n\n                  {/* Project ID */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Hash className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Project ID</span>\n                    </div>\n                    <span className={cn(\n                      \"text-foreground\",\n                      isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                    )}>{conversation.project_id}</span>\n                  </div>\n\n                  {/* Message Count */}\n                  {conversation.message_count !== undefined && (\n                    <div className={cn(\n                      isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                    )}>\n                      <div className=\"flex items-center gap-2\">\n                        <Hash className={cn(\n                          \"text-muted-foreground\",\n                          isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                        )} />\n                        <span className={cn(\n                          \"font-medium text-foreground\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>Message Count</span>\n                      </div>\n                      <span className={cn(\n                        \"text-foreground\",\n                        isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                      )}>{conversation.message_count} messages</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Timeline */}\n              <div>\n                <h3 className={cn(\n                  \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                  isMobile ? \"text-xs\" : \"text-sm\"\n                )}>\n                  Timeline\n                </h3>\n                <div className={cn(\n                  \"bg-muted rounded-lg space-y-4\",\n                  isMobile ? \"p-4\" : \"p-4 space-y-3\"\n                )}>\n                  {/* Created At */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Calendar className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Created At</span>\n                    </div>\n                    <div className={cn(\n                      isMobile ? \"ml-6 space-y-1\" : \"text-right\"\n                    )}>\n                      <span className={cn(\n                        \"text-foreground block\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>{formatFullTimestamp(conversation.created_at)}</span>\n                      <span className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"text-xs\" : \"text-xs\"\n                      )}>({formatTimestamp(conversation.created_at)})</span>\n                    </div>\n                  </div>\n\n                  {/* Last Updated */}\n                  <div className={cn(\n                    isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                  )}>\n                    <div className=\"flex items-center gap-2\">\n                      <Clock className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                      )} />\n                      <span className={cn(\n                        \"font-medium text-foreground\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>Last Updated</span>\n                    </div>\n                    <div className={cn(\n                      isMobile ? \"ml-6 space-y-1\" : \"text-right\"\n                    )}>\n                      <span className={cn(\n                        \"text-foreground block\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>{formatFullTimestamp(conversation.updated_at)}</span>\n                      <span className={cn(\n                        \"text-muted-foreground\",\n                        isMobile ? \"text-xs\" : \"text-xs\"\n                      )}>({formatTimestamp(conversation.updated_at)})</span>\n                    </div>\n                  </div>\n\n                  {/* Deleted At */}\n                  {conversation.deleted_at && (\n                    <div className={cn(\n                      isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                    )}>\n                      <div className=\"flex items-center gap-2\">\n                        <AlertCircle className={cn(\n                          \"text-red-400\",\n                          isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                        )} />\n                        <span className={cn(\n                          \"font-medium text-red-700\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>Deleted At</span>\n                      </div>\n                      <div className={cn(\n                        isMobile ? \"ml-6 space-y-1\" : \"text-right\"\n                      )}>\n                        <span className={cn(\n                          \"text-red-900 block\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>{formatFullTimestamp(conversation.deleted_at)}</span>\n                        <span className={cn(\n                          \"text-red-500\",\n                          isMobile ? \"text-xs\" : \"text-xs\"\n                        )}>({formatTimestamp(conversation.deleted_at)})</span>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* User Information */}\n              {conversation.created_by && (\n                <div>\n                  <h3 className={cn(\n                    \"font-medium text-muted-foreground uppercase tracking-wider mb-4\",\n                    isMobile ? \"text-xs\" : \"text-sm\"\n                  )}>\n                    User Information\n                  </h3>\n                  <div className={cn(\n                    \"bg-accent rounded-lg\",\n                    isMobile ? \"p-4\" : \"p-4\"\n                  )}>\n                    <div className={cn(\n                      isMobile ? \"space-y-2\" : \"flex items-start justify-between\"\n                    )}>\n                      <div className=\"flex items-center gap-2\">\n                        <User className={cn(\n                          \"text-muted-foreground\",\n                          isMobile ? \"h-4 w-4\" : \"h-4 w-4\"\n                        )} />\n                        <span className={cn(\n                          \"font-medium text-foreground\",\n                          isMobile ? \"text-sm\" : \"text-sm\"\n                        )}>Created By</span>\n                      </div>\n                      <span className={cn(\n                        \"text-foreground\",\n                        isMobile ? \"text-sm ml-6 block\" : \"text-sm\"\n                      )}>User ID: {conversation.created_by}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n            </div>\n\n            {/* Footer */}\n            {!isMobile && (\n              <div className=\"p-6 border-t border-border bg-accent\">\n                <div className=\"flex justify-end\">\n                  <Button onClick={onClose}>\n                    Close\n                  </Button>\n                </div>\n              </div>\n            )}\n          </motion.div>\n        </>\n      )}\n    </AnimatePresence>\n  );\n};","import React, { useState } from 'react';\nimport { AlertTriangle, Trash2, X } from 'lucide-react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\ninterface DeleteConversationDialogProps {\n  isOpen: boolean;\n  conversationName: string;\n  messageCount?: number;\n  onConfirm: () => Promise<void>;\n  onCancel: () => void;\n}\n\nexport const DeleteConversationDialog: React.FC<DeleteConversationDialogProps> = ({\n  isOpen,\n  conversationName,\n  messageCount,\n  onConfirm,\n  onCancel,\n}) => {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const { isMobile } = useBreakpoint();\n\n  const handleConfirm = async () => {\n    setIsDeleting(true);\n    setError(null);\n    \n    try {\n      await onConfirm();\n    } catch (err: any) {\n      console.error('Delete failed:', err);\n      \n      // Parse error message based on status code\n      let errorMessage = 'Failed to delete conversation';\n      \n      if (err.status === 400) {\n        errorMessage = 'Invalid request. Please try again.';\n      } else if (err.status === 401) {\n        errorMessage = 'Authentication failed. Please refresh the page and try again.';\n      } else if (err.status === 404) {\n        errorMessage = 'Conversation not found. It may have already been deleted.';\n      } else if (err.status === 500) {\n        errorMessage = 'Server error. Please try again later.';\n      } else if (err.message) {\n        errorMessage = err.message;\n      }\n      \n      setError(errorMessage);\n      setIsDeleting(false);\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <AnimatePresence>\n      {isOpen && (\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center p-4\">\n          {/* Backdrop */}\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"absolute inset-0 bg-black bg-opacity-50\"\n            onClick={!isDeleting ? onCancel : undefined}\n          />\n\n          {/* Dialog */}\n          <motion.div\n            initial={{ opacity: 0, scale: isMobile ? 1 : 0.95, y: isMobile ? '100%' : 0 }}\n            animate={{ opacity: 1, scale: 1, y: 0 }}\n            exit={{ opacity: 0, scale: isMobile ? 1 : 0.95, y: isMobile ? '100%' : 0 }}\n            className={cn(\n              \"relative bg-background shadow-xl\",\n              isMobile \n                ? \"fixed inset-x-0 bottom-0 rounded-t-xl safe-area-pb\" \n                : \"w-full max-w-md rounded-lg\"\n            )}\n            onClick={(e) => e.stopPropagation()}\n          >\n            <div className={cn(\n              isMobile ? \"p-4 pb-6\" : \"p-6\"\n            )}>\n              {/* Header */}\n              <div className={cn(\n                \"flex items-start\",\n                isMobile ? \"gap-3\" : \"gap-4\"\n              )}>\n                <div className={cn(\n                  \"bg-red-100 rounded-full flex-shrink-0\",\n                  isMobile ? \"p-2.5\" : \"p-3\"\n                )}>\n                  <AlertTriangle className={cn(\n                    \"text-red-600\",\n                    isMobile ? \"w-5 h-5\" : \"w-6 h-6\"\n                  )} />\n                </div>\n                <div className=\"flex-1\">\n                  <h3 className={cn(\n                    \"font-semibold text-foreground\",\n                    isMobile ? \"text-base\" : \"text-lg\"\n                  )}>\n                    Delete Conversation\n                  </h3>\n                  <p className={cn(\n                    \"mt-2 text-muted-foreground\",\n                    isMobile ? \"text-sm\" : \"text-sm\"\n                  )}>\n                    Are you sure you want to delete <strong>&ldquo;{conversationName}&rdquo;</strong>?\n                  </p>\n                  \n                  {messageCount !== undefined && messageCount > 0 && (\n                    <p className={cn(\n                      \"mt-2 text-muted-foreground\",\n                      isMobile ? \"text-sm\" : \"text-sm\"\n                    )}>\n                      This conversation contains {messageCount} message{messageCount !== 1 ? 's' : ''}.\n                    </p>\n                  )}\n                  \n                  <div className={cn(\n                    \"mt-3 bg-red-50 rounded-lg\",\n                    isMobile ? \"p-3\" : \"p-3\"\n                  )}>\n                    <p className={cn(\n                      \"text-red-800 font-medium\",\n                      isMobile ? \"text-sm\" : \"text-sm\"\n                    )}>\n                      ⚠️ This action cannot be undone\n                    </p>\n                    <p className={cn(\n                      \"text-red-700 mt-1\",\n                      isMobile ? \"text-xs\" : \"text-xs\"\n                    )}>\n                      All messages and data associated with this conversation will be permanently deleted.\n                    </p>\n                  </div>\n\n                  {/* Error Display */}\n                  {error && (\n                    <div className={cn(\n                      \"mt-3 bg-red-100 border border-red-200 rounded-lg\",\n                      isMobile ? \"p-3\" : \"p-3\"\n                    )}>\n                      <p className={cn(\n                        \"text-red-900 font-medium\",\n                        isMobile ? \"text-sm\" : \"text-sm\"\n                      )}>\n                        Error: {error}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Actions */}\n              <div className={cn(\n                \"flex items-center gap-3\",\n                isMobile ? \"mt-6 flex-col-reverse\" : \"mt-6 justify-end\"\n              )}>\n                <Button\n                  variant=\"outline\"\n                  onClick={onCancel}\n                  disabled={isDeleting}\n                  className={cn(\n                    isMobile && \"w-full h-11 touch-target\"\n                  )}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  variant=\"destructive\"\n                  onClick={handleConfirm}\n                  disabled={isDeleting}\n                  className={cn(\n                    \"min-w-[100px]\",\n                    isMobile && \"w-full h-11 touch-target\"\n                  )}\n                >\n                  {isDeleting ? (\n                    <>\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                      Deleting...\n                    </>\n                  ) : (\n                    <>\n                      <Trash2 className={cn(\n                        \"mr-2\",\n                        isMobile ? \"w-4 h-4\" : \"w-4 h-4\"\n                      )} />\n                      Delete\n                    </>\n                  )}\n                </Button>\n              </div>\n            </div>\n          </motion.div>\n        </div>\n      )}\n    </AnimatePresence>\n  );\n};","/**\n * Conversation Sidebar Component\n * \n * Manages the conversation list and provides quick navigation\n * between different chat sessions. Includes conversation management\n * features like create, rename, and delete.\n * \n * Features:\n * - Conversation list with search/filter\n * - Create new conversation\n * - Rename conversations inline\n * - Delete conversations with confirmation\n * - Agent management access\n * - Data source management\n * - Analytics dashboard access\n * - Collapsible sidebar\n * \n * State Management:\n * - Conversations from conversationStore\n * - Current conversation selection\n * - Search/filter state (local)\n * - Collapse state (passed from parent)\n * \n * UI/UX Features:\n * - Hover states and animations\n * - Keyboard shortcuts (future enhancement)\n * - Context menu for conversation actions\n * - Auto-scroll to selected conversation\n * - Responsive design for mobile\n * \n * Features:\n * - Advanced conversation organization with categories and search\n * - Bulk conversation management with export/import capabilities\n * - Customizable sidebar design with responsive layout\n * - Professional conversation management with templates and pinning\n * - Comprehensive conversation history and analytics\n */\n\n'use client';\n\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport Link from 'next/link';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  MessageSquare, \n  Plus, \n  MoreHorizontal, \n  Trash2, \n  Edit3, \n  Calendar,\n  Search,\n  X,\n  Bot,\n  Filter,\n  ChevronDown,\n  ChevronUp,\n  Info,\n  Download,\n  Share2,\n  Clock,\n  User\n} from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport type { Conversation } from '@/types';\nimport { useConversationStore, useAgentStore, useMessageStore } from '@/hooks/useWidgetStore';\nimport { cn, formatTimestamp, generateConversationName } from '@/lib/utils';\nimport { Button } from '@/components/ui/button';\nimport { SimpleSelect } from '@/components/ui/simple-select';\nimport { logger } from '@/lib/logger';\nimport { ConversationDetailsModal } from './ConversationDetailsModal';\nimport { DeleteConversationDialog } from './DeleteConversationDialog';\nimport { ConversationSkeleton, Spinner } from '@/components/ui/loading';\nimport { useDemoModeContext } from '@/contexts/DemoModeContext';\n\n/**\n * Props for individual conversation item\n * \n * @property conversation - Conversation data object\n * @property isSelected - Whether this conversation is currently active\n * @property onSelect - Callback when conversation is clicked\n * @property onDelete - Callback for deleting conversation\n * @property onRename - Callback for renaming conversation\n */\ninterface ConversationItemProps {\n  conversation: Conversation;\n  isSelected: boolean;\n  onSelect: (conversation: Conversation) => void;\n  onDelete: (conversationId: string) => void;\n  onRename: (conversationId: string, newName: string) => void;\n}\n\n/**\n * Individual Conversation Item Component\n * \n * Renders a single conversation in the sidebar with actions.\n * Features inline editing and context menu for management.\n */\nconst ConversationItem: React.FC<ConversationItemProps> = ({\n  conversation,\n  isSelected,\n  onSelect,\n  onDelete,\n  onRename\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editName, setEditName] = useState(conversation.name);\n  const [showMenu, setShowMenu] = useState(false);\n  const [showDetails, setShowDetails] = useState(false);\n  const [showDetailsModal, setShowDetailsModal] = useState(false);\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  // Close menu when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setShowMenu(false);\n      }\n    };\n\n    if (showMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n      return () => document.removeEventListener('mousedown', handleClickOutside);\n    }\n  }, [showMenu]);\n\n  // Focus input when editing starts\n  useEffect(() => {\n    if (isEditing && inputRef.current) {\n      inputRef.current.focus();\n      inputRef.current.select();\n    }\n  }, [isEditing]);\n\n  const handleEdit = () => {\n    setIsEditing(true);\n    setShowMenu(false);\n  };\n\n  const handleSaveEdit = () => {\n    if (editName.trim() && editName.trim() !== conversation.name) {\n      onRename(conversation.id.toString(), editName.trim());\n    }\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleCancelEdit = () => {\n    setIsEditing(false);\n    setEditName(conversation.name);\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleSaveEdit();\n    } else if (e.key === 'Escape') {\n      handleCancelEdit();\n    }\n  };\n\n  const handleDelete = () => {\n    setShowDeleteDialog(true);\n    setShowMenu(false);\n  };\n\n  const handleConfirmDelete = async () => {\n    await onDelete(conversation.id.toString());\n    setShowDeleteDialog(false);\n  };\n\n  return (\n    <div\n      className={cn(\n        'group relative p-3 rounded-lg cursor-pointer transition-colors',\n        'hover:bg-accent',\n        isSelected && 'bg-accent/50 hover:bg-accent/70'\n      )}\n      onClick={async () => {\n        if (isEditing || isLoading) return;\n        setIsLoading(true);\n        try {\n          await onSelect(conversation);\n        } finally {\n          setIsLoading(false);\n        }\n      }}\n    >\n      {/* Loading overlay for individual conversation */}\n      {isLoading && (\n        <div className=\"absolute inset-0 bg-background/70 backdrop-blur-sm rounded-lg flex items-center justify-center z-10\">\n          <Spinner size=\"sm\" />\n        </div>\n      )}\n      \n      <div className=\"flex items-start justify-between gap-2\">\n        <div className=\"flex-1 min-w-0\">\n          {isEditing ? (\n            <input\n              ref={inputRef}\n              type=\"text\"\n              value={editName}\n              onChange={(e) => setEditName(e.target.value)}\n              onBlur={handleSaveEdit}\n              onKeyDown={handleKeyDown}\n              className=\"w-full px-2 py-1 text-sm font-medium text-foreground bg-background border border-input rounded focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent\"\n              maxLength={100}\n            />\n          ) : (\n            <h3 className=\"font-medium text-foreground text-sm truncate\">\n              {conversation.name}\n            </h3>\n          )}\n          \n          <div className=\"flex items-center gap-2 mt-1 text-xs text-muted-foreground\">\n            <Clock className=\"w-3 h-3\" />\n            <span title={new Date(conversation.updated_at).toLocaleString()}>\n              {formatTimestamp(conversation.updated_at)}\n            </span>\n            {conversation.message_count !== undefined && (\n              <>\n                <span>•</span>\n                <MessageSquare className=\"w-3 h-3\" />\n                <span>{conversation.message_count}</span>\n              </>\n            )}\n          </div>\n          \n          {/* More Details Button */}\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              setShowDetails(!showDetails);\n            }}\n            className=\"flex items-center gap-1 mt-2 text-xs text-muted-foreground hover:text-foreground transition-colors\"\n          >\n            {showDetails ? (\n              <>\n                <ChevronUp className=\"w-3 h-3\" />\n                Hide Details\n              </>\n            ) : (\n              <>\n                <ChevronDown className=\"w-3 h-3\" />\n                More Details\n              </>\n            )}\n          </button>\n          \n          {/* Expandable Details Section */}\n          <AnimatePresence>\n            {showDetails && (\n              <motion.div\n                initial={{ opacity: 0, height: 0 }}\n                animate={{ opacity: 1, height: 'auto' }}\n                exit={{ opacity: 0, height: 0 }}\n                transition={{ duration: 0.2 }}\n                className=\"mt-2 pt-2 border-t border-border\"\n              >\n                <div className=\"space-y-1 text-xs text-muted-foreground\">\n                  <div className=\"flex items-center justify-between\">\n                    <span>Session ID:</span>\n                    <span className=\"font-mono text-foreground truncate max-w-[150px]\" title={conversation.session_id}>\n                      {conversation.session_id}\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <span>Created:</span>\n                    <span className=\"text-foreground\">{formatTimestamp(conversation.created_at)}</span>\n                  </div>\n                  {conversation.deleted_at && (\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-destructive\">Deleted:</span>\n                      <span className=\"text-destructive\">{formatTimestamp(conversation.deleted_at)}</span>\n                    </div>\n                  )}\n                </div>\n              </motion.div>\n            )}\n          </AnimatePresence>\n        </div>\n\n        {/* Menu Button */}\n        {!isEditing && (\n          <div className=\"relative\" ref={menuRef}>\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={(e) => {\n                e.stopPropagation();\n                setShowMenu(!showMenu);\n              }}\n              className=\"opacity-0 group-hover:opacity-100 transition-opacity h-6 w-6 text-muted-foreground hover:text-foreground\"\n            >\n              <MoreHorizontal className=\"h-3 w-3\" />\n            </Button>\n\n            {/* Dropdown Menu */}\n            <AnimatePresence>\n              {showMenu && (\n                <motion.div\n                  initial={{ opacity: 0, scale: 0.95, y: -5 }}\n                  animate={{ opacity: 1, scale: 1, y: 0 }}\n                  exit={{ opacity: 0, scale: 0.95, y: -5 }}\n                  transition={{ duration: 0.1 }}\n                  className=\"absolute right-0 top-6 mt-1 w-40 bg-background border border-border rounded-lg shadow-lg z-50\"\n                >\n                  <div className=\"py-1\">\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        setShowDetailsModal(true);\n                        setShowMenu(false);\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-foreground hover:bg-accent\"\n                    >\n                      <Info className=\"w-3 h-3\" />\n                      View Details\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEdit();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-foreground hover:bg-accent\"\n                    >\n                      <Edit3 className=\"w-3 h-3\" />\n                      Rename\n                    </button>\n                    <div className=\"border-t border-border my-1\" />\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDelete();\n                      }}\n                      className=\"flex items-center gap-2 w-full px-3 py-2 text-sm text-destructive hover:bg-destructive/10\"\n                    >\n                      <Trash2 className=\"w-3 h-3\" />\n                      Delete\n                    </button>\n                  </div>\n                </motion.div>\n              )}\n            </AnimatePresence>\n          </div>\n        )}\n      </div>\n\n      {/* Conversation Details Modal */}\n      <ConversationDetailsModal\n        conversation={conversation}\n        isOpen={showDetailsModal}\n        onClose={() => setShowDetailsModal(false)}\n      />\n\n      {/* Delete Conversation Dialog */}\n      <DeleteConversationDialog\n        isOpen={showDeleteDialog}\n        conversationName={conversation.name}\n        messageCount={conversation.message_count}\n        onConfirm={handleConfirmDelete}\n        onCancel={() => setShowDeleteDialog(false)}\n      />\n    </div>\n  );\n};\n\ninterface ConversationSidebarProps {\n  className?: string;\n  isCollapsed?: boolean;\n  onToggle?: () => void;\n  isMobile?: boolean;\n  onConversationSelect?: () => void;\n}\n\nexport const ConversationSidebar: React.FC<ConversationSidebarProps> = ({\n  className,\n  isCollapsed = false,\n  onToggle,\n  isMobile = false,\n  onConversationSelect\n}) => {\n  const [isCreating, setIsCreating] = useState(false);\n  const [showSortFilter, setShowSortFilter] = useState(false);\n  const [isSearching, setIsSearching] = useState(false);\n  \n  const { isFreeTrialMode } = useDemoModeContext();\n  \n  const { \n    conversations, \n    currentConversation, \n    loading, \n    error,\n    fetchConversations,\n    createConversation,\n    selectConversation,\n    deleteConversation,\n    updateConversation,\n    // Pagination state\n    currentPage,\n    totalPages,\n    totalConversations,\n    perPage,\n    // Sorting and filtering state\n    sortOrder,\n    sortBy,\n    userFilter,\n    // Client-side filtering state and methods\n    searchQuery: storeSearchQuery,\n    searchMode: storeSearchMode,\n    dateFilter: storeDateFilter,\n    setSearchQuery,\n    setSearchMode,\n    setDateFilter,\n    applyFilters\n  } = useConversationStore();\n  \n  const { currentAgent } = useAgentStore();\n  const { clearMessages, loadMessages } = useMessageStore();\n\n  // Fetch conversations when agent changes\n  useEffect(() => {\n    // Skip API calls in demo mode\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (currentAgent && !isDemoMode) {\n      logger.info('UI', 'Agent changed in sidebar, fetching conversations', {\n        agentId: currentAgent.id,\n        agentName: currentAgent.project_name,\n        isActive: currentAgent.is_chat_active\n      });\n      fetchConversations(currentAgent.id);\n    } else if (!currentAgent) {\n      logger.warn('UI', 'No current agent selected in sidebar');\n    } else if (isDemoMode) {\n      logger.info('UI', 'Skipping conversation fetch in demo mode');\n    }\n  }, [currentAgent, fetchConversations]);\n\n  // Local search query for input handling\n  const [localSearchQuery, setLocalSearchQuery] = useState(storeSearchQuery);\n\n  // Update local state when store state changes\n  useEffect(() => {\n    setLocalSearchQuery(storeSearchQuery);\n  }, [storeSearchQuery]);\n\n  // Debounced search function\n  const debouncedSearch = useCallback(\n    (query: string) => {\n      setIsSearching(true);\n      try {\n        setSearchQuery(query.trim());\n      } catch (error) {\n        logger.error('UI', 'Failed to search conversations', error);\n      } finally {\n        setIsSearching(false);\n      }\n    },\n    [setSearchQuery]\n  );\n\n  // Debounce search calls\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (localSearchQuery !== storeSearchQuery) {\n        debouncedSearch(localSearchQuery);\n      }\n    }, 300); // 300ms debounce\n\n    return () => clearTimeout(timeoutId);\n  }, [localSearchQuery, storeSearchQuery, debouncedSearch]);\n\n  // Handle search input change\n  const handleSearch = (query: string) => {\n    setLocalSearchQuery(query);\n  };\n\n  // Handle date filter change\n  const handleDateFilterChange = (filter: 'all' | 'today' | 'week' | 'month') => {\n    setDateFilter(filter);\n  };\n\n  // Handle search mode change  \n  const handleSearchModeChange = (mode: 'name' | 'id' | 'session') => {\n    setSearchMode(mode);\n  };\n  \n  // Use conversations directly since filtering is now done server-side\n  const filteredConversations = Array.isArray(conversations) ? conversations : [];\n\n  const handleNewConversation = async () => {\n    if (!currentAgent || isCreating) return;\n    \n    if (isFreeTrialMode) {\n      toast.error('Creating new conversations is not available in free trial mode');\n      return;\n    }\n    \n    logger.info('UI', 'Creating new conversation', {\n      agentId: currentAgent.id,\n      agentName: currentAgent.project_name\n    });\n    \n    setIsCreating(true);\n    try {\n      const name = `New Chat ${new Date().toLocaleDateString()}`;\n      await createConversation(currentAgent.id, name);\n      clearMessages(); // Clear current messages when starting new conversation\n      logger.info('UI', 'New conversation created successfully', { name });\n      toast.success('New conversation created');\n      \n      // Call the onConversationSelect callback to close the mobile drawer\n      if (onConversationSelect) {\n        onConversationSelect();\n      }\n    } catch (error) {\n      logger.error('UI', 'Failed to create conversation', error, {\n        agentId: currentAgent.id,\n        errorMessage: error instanceof Error ? error.message : String(error)\n      });\n      toast.error('Failed to create new conversation');\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  const handleSelectConversation = async (conversation: Conversation) => {\n    // Prevent multiple clicks while switching\n    if (loading) return;\n    \n    logger.info('UI', 'Selecting conversation', {\n      conversationId: conversation.id,\n      conversationName: conversation.name,\n      projectId: conversation.project_id,\n      messageCount: conversation.message_count\n    });\n    \n    selectConversation(conversation);\n    \n    // Load messages for the selected conversation\n    try {\n      logger.info('UI', 'Loading messages for selected conversation', {\n        conversationId: conversation.id,\n        agentId: currentAgent?.id,\n        agentName: currentAgent?.project_name\n      });\n      \n      await loadMessages(conversation.id.toString());\n      \n      logger.info('UI', 'Messages loaded successfully for conversation', {\n        conversationId: conversation.id\n      });\n      \n      // Call the onConversationSelect callback to close the mobile drawer\n      if (onConversationSelect) {\n        onConversationSelect();\n      }\n    } catch (error) {\n      logger.error('UI', 'Failed to load messages for conversation', error, {\n        conversationId: conversation.id,\n        errorMessage: error instanceof Error ? error.message : String(error),\n        errorType: error instanceof Error ? error.constructor.name : typeof error\n      });\n      toast.error('Failed to load conversation messages');\n    }\n  };\n\n  const handleDeleteConversation = async (conversationId: string) => {\n    if (isFreeTrialMode) {\n      toast.error('Deleting conversations is not available in free trial mode');\n      return;\n    }\n    \n    try {\n      await deleteConversation(conversationId);\n      toast.success('Conversation deleted');\n    } catch (error) {\n      toast.error('Failed to delete conversation');\n    }\n  };\n\n  const handleRenameConversation = async (conversationId: string, newName: string) => {\n    if (isFreeTrialMode) {\n      toast.error('Renaming conversations is not available in free trial mode');\n      return;\n    }\n    \n    const conversation = conversations.find(c => c.id.toString() === conversationId);\n    if (!conversation) return;\n    \n    try {\n      await updateConversation(conversation.project_id, conversation.session_id, { name: newName });\n      toast.success('Conversation renamed');\n    } catch (error) {\n      toast.error('Failed to rename conversation');\n    }\n  };\n\n  // Use prop or fallback to viewport check if needed\n  // const isMobile = typeof window !== 'undefined' && window.innerWidth < 768;\n  \n  if (isCollapsed && !isMobile) {\n    return (\n      <div className={cn('w-12 bg-muted border-r border-border flex flex-col', className)}>\n        <div className=\"p-2\">\n          <Button\n            size=\"icon\"\n            variant=\"ghost\"\n            onClick={onToggle}\n            className=\"w-8 h-8\"\n            title=\"Expand sidebar\"\n          >\n            <MessageSquare className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={cn(\n      'bg-muted flex flex-col',\n      isMobile ? 'w-full h-full' : 'w-80 border-r border-border',\n      className\n    )}>\n      {/* Header */}\n      <div className=\"p-4 border-b border-border bg-background\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h2 className=\"font-semibold text-foreground\">Conversations</h2>\n          {!isMobile && (\n            <Button\n              size=\"icon\"\n              variant=\"ghost\"\n              onClick={onToggle}\n              className=\"h-8 w-8\"\n              title=\"Collapse sidebar\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n        \n        {/* Search */}\n        <div className=\"space-y-2\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground\" />\n            <input\n              type=\"text\"\n              placeholder={isMobile ? \"Search conversations...\" : `Search by ${storeSearchMode}...`}\n              value={localSearchQuery}\n              onChange={(e) => handleSearch(e.target.value)}\n              className={cn(\n                \"w-full pl-9 pr-12 py-2 text-sm border border-input bg-background text-foreground rounded-lg focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent placeholder:text-muted-foreground\",\n                isMobile && \"py-3\"\n              )}\n            />\n            {isSearching && (\n              <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-brand-600\"></div>\n              </div>\n            )}\n          </div>\n          \n          {/* Search Mode Selector - Hidden on mobile */}\n          {!isMobile && (\n            <div className=\"flex gap-1\">\n              <button\n                onClick={() => handleSearchModeChange('name')}\n                className={cn(\n                  \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                  storeSearchMode === 'name' \n                    ? \"bg-brand-500 text-white\" \n                    : \"bg-muted text-muted-foreground hover:bg-accent\"\n                )}\n              >\n                Name\n              </button>\n              <button\n                onClick={() => handleSearchModeChange('id')}\n                className={cn(\n                  \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                  storeSearchMode === 'id' \n                    ? \"bg-brand-500 text-white\" \n                    : \"bg-muted text-muted-foreground hover:bg-accent\"\n                )}\n              >\n                ID\n              </button>\n              <button\n                onClick={() => handleSearchModeChange('session')}\n                className={cn(\n                  \"flex-1 px-2 py-1 text-xs rounded transition-colors\",\n                  storeSearchMode === 'session' \n                    ? \"bg-brand-500 text-white\" \n                    : \"bg-muted text-muted-foreground hover:bg-accent\"\n                )}\n              >\n                Session\n              </button>\n            </div>\n          )}\n        </div>\n        \n        {/* Sort and Filter Toggle - Hidden on mobile */}\n        {!isMobile && (\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            onClick={() => setShowSortFilter(!showSortFilter)}\n            className=\"w-full mt-2 justify-center gap-2\"\n          >\n            <Filter className=\"h-3 w-3\" />\n            Sort & Filter\n            {showSortFilter ? <ChevronUp className=\"h-3 w-3\" /> : <ChevronDown className=\"h-3 w-3\" />}\n          </Button>\n        )}\n        \n        {/* Sort and Filter Options - Hidden on mobile */}\n        {!isMobile && showSortFilter && (\n          <AnimatePresence>\n            <motion.div\n              initial={{ opacity: 0, height: 0 }}\n              animate={{ opacity: 1, height: 'auto' }}\n              exit={{ opacity: 0, height: 0 }}\n              transition={{ duration: 0.2 }}\n              className=\"space-y-3 mt-3 overflow-hidden\"\n            >\n              {/* Sort Options */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Sort By</label>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <SimpleSelect\n                    value={sortBy}\n                    onValueChange={(value) => {\n                      if (currentAgent) {\n                        // Update the sort state and apply filters client-side\n                        fetchConversations(currentAgent.id, { \n                          orderBy: value \n                        });\n                      }\n                    }}\n                    options={[\n                      { value: 'id', label: 'Date Created' },\n                      { value: 'updated_at', label: 'Last Updated' },\n                      { value: 'name', label: 'Name' }\n                    ]}\n                    className=\"text-xs\"\n                  />\n                  \n                  <SimpleSelect\n                    value={sortOrder}\n                    onValueChange={(value) => {\n                      if (currentAgent) {\n                        // Update the sort state and apply filters client-side\n                        fetchConversations(currentAgent.id, { \n                          order: value as 'asc' | 'desc' \n                        });\n                      }\n                    }}\n                    options={[\n                      { value: 'desc', label: 'Newest First' },\n                      { value: 'asc', label: 'Oldest First' }\n                    ]}\n                    className=\"text-xs\"\n                  />\n                </div>\n              </div>\n              \n              {/* Date Filter */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Filter By Date</label>\n                <SimpleSelect\n                  value={storeDateFilter}\n                  onValueChange={(value) => handleDateFilterChange(value as 'all' | 'today' | 'week' | 'month')}\n                  options={[\n                    { value: 'all', label: 'All Time' },\n                    { value: 'today', label: 'Today' },\n                    { value: 'week', label: 'Last 7 Days' },\n                    { value: 'month', label: 'Last 30 Days' }\n                  ]}\n                  className=\"w-full text-xs\"\n                />\n              </div>\n              \n              {/* User Filter */}\n              <div>\n                <label className=\"text-xs font-medium text-foreground mb-1 block\">Filter By User</label>\n                <SimpleSelect\n                  value={userFilter}\n                  onValueChange={(value) => {\n                    if (currentAgent) {\n                      // Update the user filter state and apply filters client-side\n                      fetchConversations(currentAgent.id, { \n                        userFilter: value \n                      });\n                    }\n                  }}\n                  options={[\n                    { value: 'all', label: 'All Users' }\n                    // Additional user options could be dynamically loaded\n                  ]}\n                  className=\"w-full text-xs\"\n                />\n              </div>\n            </motion.div>\n          </AnimatePresence>\n        )}\n      </div>\n\n      {/* Action Buttons */}\n      <div className=\"p-4 space-y-2\">\n        <Link href=\"/dashboard/projects/create\">\n          <Button\n            className=\"w-full justify-start gap-2\"\n            variant=\"default\"\n            disabled={isFreeTrialMode}\n            title={isFreeTrialMode ? 'Creating new agents is not available in free trial mode' : ''}\n          >\n            <Bot className=\"w-4 h-4\" />\n            Create New Agent\n          </Button>\n        </Link>\n        \n        <Button\n          onClick={handleNewConversation}\n          disabled={!currentAgent || isCreating || isFreeTrialMode}\n          className=\"w-full justify-start gap-2\"\n          variant=\"outline\"\n          title={isFreeTrialMode ? 'Creating new conversations is not available in free trial mode' : ''}\n        >\n          {isCreating ? (\n            <>\n              <Spinner size=\"sm\" />\n              <span>Creating...</span>\n            </>\n          ) : (\n            <>\n              <Plus className=\"w-4 h-4\" />\n              <span>New Chat</span>\n            </>\n          )}\n        </Button>\n      </div>\n\n      {/* Conversations List */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {loading && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <ConversationSkeleton count={5} />\n        ) : error && (!Array.isArray(conversations) || conversations.length === 0) ? (\n          <div className=\"p-4 text-center\">\n            <p className=\"text-sm text-destructive mb-2\">Failed to load conversations</p>\n            <Button\n              size=\"sm\"\n              variant=\"ghost\"\n              onClick={() => currentAgent && fetchConversations(currentAgent.id)}\n            >\n              Try Again\n            </Button>\n          </div>\n        ) : filteredConversations.length === 0 ? (\n          <div className=\"p-4 text-center\">\n            <MessageSquare className=\"w-8 h-8 text-muted-foreground mx-auto mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">\n              {storeSearchQuery ? 'No conversations found' : 'No conversations yet'}\n            </p>\n            {!storeSearchQuery && (\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Start a new conversation to get going\n              </p>\n            )}\n            {currentAgent && (\n              <div className=\"text-xs text-muted-foreground mt-2 space-y-1\">\n                <p>Agent: {currentAgent.project_name} (ID: {currentAgent.id})</p>\n                {error && (\n                  <p className=\"text-destructive\">Error: {error}</p>\n                )}\n                <p>Conversations loaded: {conversations.length}</p>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"p-2 space-y-1\">\n            {filteredConversations.map((conversation) => (\n              <ConversationItem\n                key={conversation.id}\n                conversation={conversation}\n                isSelected={currentConversation?.id === conversation.id}\n                onSelect={handleSelectConversation}\n                onDelete={(id) => handleDeleteConversation(id)}\n                onRename={handleRenameConversation}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Footer with Pagination */}\n      <div className=\"p-4 border-t border-border bg-background space-y-3\">\n        <div className=\"text-xs text-muted-foreground text-center\">\n          {storeSearchQuery ? (\n            <>\n              {filteredConversations.length} result{filteredConversations.length !== 1 ? 's' : ''}\n            </>\n          ) : (\n            <>\n              Showing {conversations.length} of {totalConversations} conversation{totalConversations !== 1 ? 's' : ''}\n            </>\n          )}\n          {currentAgent && (\n            <span className=\"block mt-1\">\n              Agent: {currentAgent.project_name}\n            </span>\n          )}\n        </div>\n        \n        {/* Pagination Controls */}\n        {totalPages > 1 && !storeSearchQuery && (\n          <div className=\"flex items-center justify-between gap-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                if (currentAgent && currentPage > 1) {\n                  fetchConversations(currentAgent.id, { page: currentPage - 1 });\n                }\n              }}\n              disabled={currentPage === 1 || loading}\n            >\n              <ChevronDown className=\"h-3 w-3 rotate-90\" />\n            </Button>\n            \n            <span className=\"text-xs text-muted-foreground\">\n              Page {currentPage} of {totalPages}\n            </span>\n            \n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                if (currentAgent && currentPage < totalPages) {\n                  fetchConversations(currentAgent.id, { page: currentPage + 1 });\n                }\n              }}\n              disabled={currentPage === totalPages || loading}\n            >\n              <ChevronDown className=\"h-3 w-3 -rotate-90\" />\n            </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};","/**\n * Chat Layout Component\n * \n * Top-level layout component that orchestrates the chat interface.\n * Handles different deployment modes and manages the conversation sidebar.\n * \n * Deployment Modes:\n * - standalone: Full chat with sidebar (default for main app)\n * - widget: Embeddable chat without sidebar\n * - floating: Popup-style chat without sidebar\n * \n * Features:\n * - Responsive sidebar with collapse/expand\n * - Automatic message loading on conversation change\n * - Mode-specific rendering logic\n * - Clean separation of concerns\n * \n * Architecture:\n * - ChatLayout (this) - Layout orchestration\n *   - ConversationSidebar - Conversation list and management\n *   - ChatContainer - Main chat interface\n *     - Message - Individual messages\n *     - ChatInput - Message input area\n * \n * State Management:\n * - currentConversation from conversationStore\n * - loadMessages from messageStore\n * - Local state for sidebar collapse\n * \n * Features:\n * - Multiple deployment modes with flexible configuration\n * - Professional sidebar with persistent state and responsive design\n * - Full keyboard navigation and accessibility support\n * - Mobile-optimized interface with adaptive layout\n * - Customizable sidebar positioning and behavior options\n */\n\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport type { Agent } from '@/types';\nimport { ChatContainer } from './ChatContainer';\nimport { ConversationSidebar } from './ConversationSidebar';\nimport { useConversationStore, useMessageStore } from '@/hooks/useWidgetStore';\nimport { useBreakpoint } from '@/hooks/useMediaQuery';\n\n/**\n * Props for ChatLayout component\n * \n * @property mode - Deployment mode: standalone (with sidebar), widget, or floating\n * @property className - Additional CSS classes for styling\n * @property onClose - Callback for closing chat (widget/floating modes)\n * @property onAgentSettings - Callback for opening agent settings\n * @property showSidebar - Whether to show sidebar (only applies to standalone mode)\n * @property enableConversationManagement - Enable conversation switching UI\n * @property maxConversations - Maximum conversations per session\n * @property sessionId - Session ID for conversation isolation\n * @property threadId - Specific conversation thread to load\n * @property onConversationChange - Callback when conversation changes\n * @property onMessage - Callback when message is sent/received\n */\ninterface ChatLayoutProps {\n  mode?: 'standalone' | 'widget' | 'floating';\n  className?: string;\n  onClose?: () => void;\n  onAgentSettings?: (agent: Agent) => void;\n  showSidebar?: boolean;\n  enableConversationManagement?: boolean;\n  maxConversations?: number;\n  sessionId?: string;\n  threadId?: string;\n  onConversationChange?: (conversation: any) => void;\n  onMessage?: (message: any) => void;\n  widgetInstance?: any; // Widget instance for isolated conversation management\n  conversations?: any[]; // Current conversations for isolated mode\n  currentConversation?: any; // Current conversation for isolated mode\n  conversationRefreshKey?: number; // Key to trigger ConversationManager refresh\n}\n\n/**\n * Chat Layout Component\n * \n * Orchestrates the overall chat interface layout based on deployment mode.\n * In standalone mode, includes a collapsible conversation sidebar.\n * In widget/floating modes, renders only the chat container.\n */\nexport const ChatLayout: React.FC<ChatLayoutProps> = ({\n  mode = 'standalone',\n  className,\n  onClose,\n  onAgentSettings,\n  showSidebar = true,\n  enableConversationManagement = false,\n  maxConversations,\n  sessionId,\n  threadId,\n  onConversationChange,\n  onMessage,\n  widgetInstance,\n  conversations,\n  currentConversation,\n  conversationRefreshKey\n}) => {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [mobileSidebarOpen, setMobileSidebarOpen] = useState(false);\n  const { currentConversation: storeCurrentConversation } = useConversationStore();\n  const { loadMessages } = useMessageStore();\n\n  /**\n   * Load messages when conversation changes\n   * \n   * Automatically fetches messages from the store when user\n   * switches between conversations. This ensures the chat\n   * always shows the correct message history.\n   */\n  useEffect(() => {\n    // Skip API calls in demo mode to prevent errors\n    const isDemoMode = typeof window !== 'undefined' && (window as any).__customgpt_demo_mode;\n    \n    if (storeCurrentConversation && !isDemoMode) {\n      loadMessages(storeCurrentConversation.id.toString());\n    }\n  }, [storeCurrentConversation, loadMessages]);\n\n  const { isMobile } = useBreakpoint();\n\n  // Hide sidebar for widget and floating modes\n  // Only standalone mode shows the conversation sidebar\n  const shouldShowSidebar = showSidebar && mode === 'standalone';\n\n  /**\n   * Toggle sidebar collapsed state\n   * \n   * Toggles sidebar visibility with potential for session persistence\n   * to enhance user experience across application sessions\n   */\n  const handleToggleSidebar = () => {\n    setSidebarCollapsed(!sidebarCollapsed);\n  };\n\n  if (!shouldShowSidebar) {\n    // For widget/floating modes, just show the chat container\n    return (\n      <ChatContainer\n        mode={mode}\n        className={className}\n        onClose={onClose}\n        onAgentSettings={onAgentSettings}\n        enableConversationManagement={enableConversationManagement}\n        maxConversations={maxConversations}\n        sessionId={sessionId}\n        threadId={threadId}\n        onConversationChange={onConversationChange}\n        onMessage={onMessage}\n        conversationRefreshKey={conversationRefreshKey}\n        isMobile={isMobile}\n      />\n    );\n  }\n\n  // On mobile, hide the sidebar and use drawer navigation instead\n  if (isMobile) {\n    return (\n      <div className=\"flex flex-col h-full bg-background\">\n        <ChatContainer\n          mode={mode}\n          className=\"flex-1\"\n          onClose={onClose}\n          onAgentSettings={onAgentSettings}\n          enableConversationManagement={enableConversationManagement}\n          maxConversations={maxConversations}\n          sessionId={sessionId}\n          threadId={threadId}\n          onConversationChange={onConversationChange}\n          onMessage={onMessage}\n          conversationRefreshKey={conversationRefreshKey}\n          isMobile={true}\n        />\n      </div>\n    );\n  }\n\n  // Desktop layout with sidebar\n  return (\n    <div className=\"flex h-full bg-background\">\n      {/* Sidebar */}\n      <ConversationSidebar\n        isCollapsed={sidebarCollapsed}\n        onToggle={handleToggleSidebar}\n        isMobile={false}\n      />\n      \n      {/* Main Chat Area */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        <ChatContainer\n          mode={mode}\n          className=\"h-full\"\n          onClose={onClose}\n          onAgentSettings={onAgentSettings}\n          enableConversationManagement={enableConversationManagement}\n          maxConversations={maxConversations}\n          sessionId={sessionId}\n          threadId={threadId}\n          onConversationChange={onConversationChange}\n          onMessage={onMessage}\n          conversationRefreshKey={conversationRefreshKey}\n          isMobile={false}\n        />\n      </div>\n    </div>\n  );\n};","import React, { useEffect, useState } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport { Toaster } from 'sonner';\n\nimport '../app/globals.css';\nimport { useAgentStore } from '../store';\nimport { ChatLayout } from '../components/chat/ChatLayout';\n\ninterface IframeConfig {\n  agentId: number | string;\n  agentName?: string;\n  mode: 'embedded' | 'floating' | 'widget';\n  theme: 'light' | 'dark';\n  enableCitations: boolean;\n  enableFeedback: boolean;\n  sessionId?: string;\n  threadId?: string;\n  isolateConversations?: boolean;\n}\n\nconst IframeApp: React.FC = () => {\n  const [config, setConfig] = useState<IframeConfig | null>(null);\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    // Parse URL parameters\n    const urlParams = new URLSearchParams(window.location.search);\n    const agentIdParam = urlParams.get('agentId');\n    \n    const iframeConfig: IframeConfig = {\n      agentId: agentIdParam ? (isNaN(Number(agentIdParam)) ? agentIdParam : Number(agentIdParam)) : '',\n      agentName: urlParams.get('agentName') || undefined,\n      mode: (urlParams.get('mode') as any) || 'embedded',\n      theme: (urlParams.get('theme') as any) || 'light',\n      enableCitations: urlParams.get('enableCitations') !== 'false',\n      enableFeedback: urlParams.get('enableFeedback') !== 'false',\n      sessionId: urlParams.get('sessionId') || undefined,\n      threadId: urlParams.get('threadId') || undefined,\n      isolateConversations: urlParams.get('isolateConversations') === 'true',\n    };\n    \n    if (!iframeConfig.agentId) {\n      console.error('CustomGPT: Agent ID is required');\n      return;\n    }\n\n    setConfig(iframeConfig);\n    \n    // Set up the agent - create a minimal agent object with the provided ID\n    const agent: any = {\n      id: typeof iframeConfig.agentId === 'string' ? parseInt(iframeConfig.agentId) : iframeConfig.agentId,\n      project_name: iframeConfig.agentName || `Agent ${iframeConfig.agentId}`,\n      is_chat_active: true,\n    };\n    useAgentStore.getState().selectAgent(agent);\n\n    // Set up message handling with parent window\n    setupMessageHandling();\n\n    // Notify parent that iframe is ready\n    postMessageToParent('ready', { config: iframeConfig });\n    setIsReady(true);\n  }, []);\n\n  const setupMessageHandling = () => {\n    window.addEventListener('message', (event) => {\n      const { type, data } = event.data;\n\n      switch (type) {\n        case 'customgpt-open':\n          handleOpen();\n          break;\n        case 'customgpt-close':\n          handleClose();\n          break;\n        case 'customgpt-config-update':\n          handleConfigUpdate(data);\n          break;\n      }\n    });\n\n    // Handle window resize for responsive behavior\n    const handleResize = () => {\n      postMessageToParent('resize', {\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    // Send initial size\n    setTimeout(handleResize, 100);\n  };\n\n  const postMessageToParent = (type: string, data: any = {}) => {\n    if (window.parent && window.parent !== window) {\n      window.parent.postMessage({\n        type: `customgpt-${type}`,\n        data\n      }, '*');\n    }\n  };\n\n  const handleOpen = () => {\n    // Handle any iframe-specific open logic\n  };\n\n  const handleClose = () => {\n    // Handle any iframe-specific close logic\n    postMessageToParent('close');\n  };\n\n  const handleConfigUpdate = (newConfig: Partial<IframeConfig>) => {\n    if (config) {\n      const updatedConfig = { ...config, ...newConfig };\n      setConfig(updatedConfig);\n      \n      // Update agent if needed\n      if (newConfig.agentId || newConfig.agentName) {\n        const agent: any = {\n          id: typeof updatedConfig.agentId === 'string' ? parseInt(updatedConfig.agentId) : updatedConfig.agentId,\n          project_name: updatedConfig.agentName || `Agent ${updatedConfig.agentId}`,\n          is_chat_active: true,\n        };\n        useAgentStore.getState().selectAgent(agent);\n      }\n    }\n  };\n\n  const handleMessage = (message: any) => {\n    // Relay messages to parent window\n    postMessageToParent('message', message);\n  };\n\n  const handleError = (error: any) => {\n    // Relay errors to parent window\n    postMessageToParent('error', error);\n    console.error('Widget error:', error);\n  };\n\n  // Show loading state until config is available\n  if (!config || !isReady) {\n    return (\n      <div className=\"flex items-center justify-center h-screen bg-gray-50\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading CustomGPT...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-screen bg-gray-50\">\n      <ChatLayout\n        mode=\"widget\"\n        showSidebar={false} // No sidebar in iframe mode\n        onClose={config.mode === 'floating' ? handleClose : undefined}\n      />\n      <Toaster \n        position=\"top-center\"\n        closeButton\n        gap={8}\n        toastOptions={{\n          style: { \n            zIndex: 10000,\n            marginTop: '8px'\n          }\n        }}\n      />\n    </div>\n  );\n};\n\n// Initialize the app\nconst initIframeApp = () => {\n  const container = document.getElementById('iframe-app');\n  if (container) {\n    const root = createRoot(container);\n    root.render(<IframeApp />);\n  }\n};\n\n// Auto-initialize when DOM is ready\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', initIframeApp);\n} else {\n  initIframeApp();\n}\n\nexport default IframeApp;","/**\n * Performance Optimizations for Voice Themes\n * \n * Advanced performance optimizations including LOD system, render culling,\n * batch rendering, and memory management for maintaining 30+ FPS on all devices.\n */\n\nimport { PerformanceMetrics, DeviceCapabilities } from '../utils/performance';\n\nexport interface LODSettings {\n  level: 0 | 1 | 2; // 0 = high, 1 = medium, 2 = low\n  particleReduction: number; // 0-1, percentage reduction\n  effectsDisabled: boolean;\n  glowDisabled: boolean;\n  simplifiedRendering: boolean;\n  skipFrames: number; // Skip every N frames for heavy operations\n}\n\nexport interface CullingBounds {\n  left: number;\n  right: number;\n  top: number;\n  bottom: number;\n  near?: number;\n  far?: number;\n}\n\nexport interface RenderBatch {\n  color: string;\n  particles: Array<{ x: number; y: number; size: number; alpha: number }>;\n  glowEnabled: boolean;\n  effectsEnabled: boolean;\n}\n\n/**\n * Level-of-Detail Manager for Performance Scaling\n */\nexport class LODManager {\n  private currentLOD: LODSettings;\n  private frameCount = 0;\n  private lastPerformanceCheck = 0;\n  private performanceHistory: number[] = [];\n  \n  private lodProfiles: Record<number, LODSettings> = {\n    0: { // High quality\n      level: 0,\n      particleReduction: 0,\n      effectsDisabled: false,\n      glowDisabled: false,\n      simplifiedRendering: false,\n      skipFrames: 0\n    },\n    1: { // Medium quality\n      level: 1,\n      particleReduction: 0.3,\n      effectsDisabled: false,\n      glowDisabled: true,\n      simplifiedRendering: false,\n      skipFrames: 1\n    },\n    2: { // Low quality\n      level: 2,\n      particleReduction: 0.6,\n      effectsDisabled: true,\n      glowDisabled: true,\n      simplifiedRendering: true,\n      skipFrames: 2\n    }\n  };\n\n  constructor(initialLOD = 1) {\n    this.currentLOD = this.lodProfiles[initialLOD];\n  }\n\n  /**\n   * Update LOD based on performance metrics\n   */\n  updateLOD(metrics: PerformanceMetrics): LODSettings {\n    this.frameCount++;\n    \n    // Check performance every 30 frames (0.5 seconds at 60fps)\n    if (this.frameCount - this.lastPerformanceCheck >= 30) {\n      this.performanceHistory.push(metrics.fps);\n      \n      // Keep only last 5 measurements (2.5 seconds)\n      if (this.performanceHistory.length > 5) {\n        this.performanceHistory.shift();\n      }\n      \n      const avgFPS = this.performanceHistory.reduce((sum, fps) => sum + fps, 0) / this.performanceHistory.length;\n      this.adjustLODBasedOnFPS(avgFPS);\n      \n      this.lastPerformanceCheck = this.frameCount;\n    }\n    \n    return this.currentLOD;\n  }\n\n  private adjustLODBasedOnFPS(avgFPS: number): void {\n    const targetFPS = 30;\n    \n    if (avgFPS < targetFPS * 0.7 && this.currentLOD.level < 2) {\n      // Performance is poor, reduce quality\n      this.currentLOD = this.lodProfiles[Math.min(2, this.currentLOD.level + 1)];\n      console.log(`[LOD] Reducing quality to level ${this.currentLOD.level} (FPS: ${avgFPS.toFixed(1)})`);\n    } else if (avgFPS > targetFPS * 1.2 && this.currentLOD.level > 0) {\n      // Performance is good, can increase quality\n      this.currentLOD = this.lodProfiles[Math.max(0, this.currentLOD.level - 1)];\n      console.log(`[LOD] Increasing quality to level ${this.currentLOD.level} (FPS: ${avgFPS.toFixed(1)})`);\n    }\n  }\n\n  getCurrentLOD(): LODSettings {\n    return this.currentLOD;\n  }\n\n  shouldSkipFrame(): boolean {\n    return this.currentLOD.skipFrames > 0 && \n           this.frameCount % (this.currentLOD.skipFrames + 1) !== 0;\n  }\n}\n\n/**\n * Frustum Culling for Off-screen Particle Elimination\n */\nexport class FrustumCuller {\n  private bounds!: CullingBounds;\n  private margin = 50; // Extra margin to prevent pop-in\n  \n  constructor(width: number, height: number, margin = 50) {\n    this.margin = margin;\n    this.updateBounds(width, height);\n  }\n\n  updateBounds(width: number, height: number): void {\n    this.bounds = {\n      left: -this.margin,\n      right: width + this.margin,\n      top: -this.margin,\n      bottom: height + this.margin,\n      near: -200,\n      far: 200\n    };\n  }\n\n  /**\n   * Check if a particle is within visible bounds\n   */\n  isVisible(x: number, y: number, z = 0, size = 0): boolean {\n    return (\n      x + size >= this.bounds.left &&\n      x - size <= this.bounds.right &&\n      y + size >= this.bounds.top &&\n      y - size <= this.bounds.bottom &&\n      (this.bounds.near === undefined || z >= this.bounds.near) &&\n      (this.bounds.far === undefined || z <= this.bounds.far)\n    );\n  }\n\n  /**\n   * Filter array of particles to only visible ones\n   */\n  cullParticles<T extends { x: number; y: number; z?: number; size?: number }>(particles: T[]): T[] {\n    return particles.filter(particle => \n      this.isVisible(\n        particle.x, \n        particle.y, \n        particle.z || 0, \n        particle.size || 0\n      )\n    );\n  }\n\n  /**\n   * Get culling statistics\n   */\n  getCullingStats<T extends { x: number; y: number }>(particles: T[]): {\n    total: number;\n    visible: number;\n    culled: number;\n    cullingRatio: number;\n  } {\n    const visible = this.cullParticles(particles);\n    const culled = particles.length - visible.length;\n    \n    return {\n      total: particles.length,\n      visible: visible.length,\n      culled,\n      cullingRatio: particles.length > 0 ? culled / particles.length : 0\n    };\n  }\n}\n\n/**\n * Batch Renderer for Optimized Drawing\n */\nexport class BatchRenderer {\n  private batches: Map<string, RenderBatch> = new Map();\n  private maxBatchSize = 1000;\n  \n  /**\n   * Add particle to appropriate batch\n   */\n  addToBatch(\n    color: string, \n    x: number, \n    y: number, \n    size: number, \n    alpha: number,\n    glowEnabled = false,\n    effectsEnabled = false\n  ): void {\n    const batchKey = `${color}_${glowEnabled}_${effectsEnabled}`;\n    \n    if (!this.batches.has(batchKey)) {\n      this.batches.set(batchKey, {\n        color,\n        particles: [],\n        glowEnabled,\n        effectsEnabled\n      });\n    }\n    \n    const batch = this.batches.get(batchKey)!;\n    if (batch.particles.length < this.maxBatchSize) {\n      batch.particles.push({ x, y, size, alpha });\n    }\n  }\n\n  /**\n   * Render all batches efficiently\n   */\n  renderBatches(context: CanvasRenderingContext2D, lodSettings: LODSettings): void {\n    Array.from(this.batches.entries()).forEach(([batchKey, batch]) => {\n      if (batch.particles.length === 0) return;\n      \n      context.save();\n      context.fillStyle = batch.color;\n      \n      // Skip effects if disabled by LOD\n      const shouldRenderEffects = batch.effectsEnabled && !lodSettings.effectsDisabled;\n      const shouldRenderGlow = batch.glowEnabled && !lodSettings.glowDisabled;\n      \n      if (lodSettings.simplifiedRendering) {\n        // Simplified rendering: draw all particles as simple circles\n        this.renderSimplifiedBatch(context, batch);\n      } else {\n        // Full rendering: individual particles with effects\n        this.renderFullBatch(context, batch, shouldRenderEffects, shouldRenderGlow);\n      }\n      \n      context.restore();\n    });\n  }\n\n  private renderSimplifiedBatch(context: CanvasRenderingContext2D, batch: RenderBatch): void {\n    context.beginPath();\n    batch.particles.forEach(particle => {\n      context.globalAlpha = particle.alpha;\n      context.moveTo(particle.x + particle.size, particle.y);\n      context.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n    });\n    context.fill();\n  }\n\n  private renderFullBatch(\n    context: CanvasRenderingContext2D, \n    batch: RenderBatch,\n    renderEffects: boolean,\n    renderGlow: boolean\n  ): void {\n    batch.particles.forEach(particle => {\n      context.save();\n      context.globalAlpha = particle.alpha;\n      \n      // Render glow first if enabled\n      if (renderGlow && particle.alpha > 0.5) {\n        const glowGradient = context.createRadialGradient(\n          particle.x, particle.y, 0,\n          particle.x, particle.y, particle.size * 3\n        );\n        glowGradient.addColorStop(0, batch.color);\n        glowGradient.addColorStop(1, 'transparent');\n        \n        context.fillStyle = glowGradient;\n        context.globalAlpha = particle.alpha * 0.3;\n        context.beginPath();\n        context.arc(particle.x, particle.y, particle.size * 3, 0, Math.PI * 2);\n        context.fill();\n      }\n      \n      // Render main particle\n      context.globalAlpha = particle.alpha;\n      context.fillStyle = batch.color;\n      context.beginPath();\n      context.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n      context.fill();\n      \n      context.restore();\n    });\n  }\n\n  /**\n   * Clear all batches\n   */\n  clearBatches(): void {\n    Array.from(this.batches.values()).forEach(batch => {\n      batch.particles = [];\n    });\n  }\n\n  /**\n   * Get batch statistics\n   */\n  getBatchStats(): {\n    batchCount: number;\n    totalParticles: number;\n    avgBatchSize: number;\n    largestBatch: number;\n  } {\n    const batchCount = this.batches.size;\n    let totalParticles = 0;\n    let largestBatch = 0;\n    \n    Array.from(this.batches.values()).forEach(batch => {\n      totalParticles += batch.particles.length;\n      largestBatch = Math.max(largestBatch, batch.particles.length);\n    });\n    \n    return {\n      batchCount,\n      totalParticles,\n      avgBatchSize: batchCount > 0 ? totalParticles / batchCount : 0,\n      largestBatch\n    };\n  }\n}\n\n/**\n * Memory Usage Monitor and Optimizer\n */\nexport class MemoryOptimizer {\n  private lastGCTime = 0;\n  private gcInterval = 10000; // 10 seconds\n  private memoryPressureThreshold = 0.85; // 85% of heap limit\n  \n  /**\n   * Check memory usage and trigger cleanup if needed\n   */\n  checkMemoryPressure(): { pressure: number; shouldCleanup: boolean } {\n    const currentTime = performance.now();\n    let pressure = 0;\n    let shouldCleanup = false;\n    \n    // Check if memory API is available\n    if ('memory' in (performance as any)) {\n      const memInfo = (performance as any).memory;\n      pressure = memInfo.usedJSHeapSize / memInfo.jsHeapSizeLimit;\n      shouldCleanup = pressure > this.memoryPressureThreshold;\n    }\n    \n    // Force cleanup based on time interval\n    if (currentTime - this.lastGCTime > this.gcInterval) {\n      shouldCleanup = true;\n      this.lastGCTime = currentTime;\n    }\n    \n    return { pressure, shouldCleanup };\n  }\n\n  /**\n   * Suggest memory optimization actions\n   */\n  getOptimizationSuggestions(pressure: number): {\n    reduceParticles: boolean;\n    clearCaches: boolean;\n    disableEffects: boolean;\n    simplifyRendering: boolean;\n  } {\n    return {\n      reduceParticles: pressure > 0.7,\n      clearCaches: pressure > 0.8,\n      disableEffects: pressure > 0.75,\n      simplifyRendering: pressure > 0.85\n    };\n  }\n}\n\n/**\n * Animation Frame Controller for Battery Optimization\n */\nexport class AnimationController {\n  private isVisible = true;\n  private targetFPS = 30;\n  private actualInterval = 1000 / 30; // ~33ms\n  private lastFrameTime = 0;\n  private frameBudget = 16.67; // ~60fps budget, but we target lower\n  \n  constructor(targetFPS = 30) {\n    this.setTargetFPS(targetFPS);\n    this.setupVisibilityHandling();\n  }\n\n  /**\n   * Set target FPS and update timing\n   */\n  setTargetFPS(fps: number): void {\n    this.targetFPS = Math.max(10, Math.min(60, fps)); // Clamp between 10-60\n    this.actualInterval = 1000 / this.targetFPS;\n  }\n\n  /**\n   * Check if frame should be rendered\n   */\n  shouldRenderFrame(): boolean {\n    if (!this.isVisible) return false;\n    \n    const currentTime = performance.now();\n    const deltaTime = currentTime - this.lastFrameTime;\n    \n    if (deltaTime >= this.actualInterval) {\n      this.lastFrameTime = currentTime;\n      return true;\n    }\n    \n    return false;\n  }\n\n  /**\n   * Get frame timing info\n   */\n  getFrameTiming(): {\n    targetFPS: number;\n    interval: number;\n    isVisible: boolean;\n    shouldThrottle: boolean;\n  } {\n    return {\n      targetFPS: this.targetFPS,\n      interval: this.actualInterval,\n      isVisible: this.isVisible,\n      shouldThrottle: !this.isVisible || this.targetFPS < 30\n    };\n  }\n\n  private setupVisibilityHandling(): void {\n    // Handle page visibility for battery optimization\n    document.addEventListener('visibilitychange', () => {\n      this.isVisible = !document.hidden;\n      \n      // Reduce FPS when not visible\n      if (!this.isVisible) {\n        this.setTargetFPS(10); // Very low FPS when hidden\n      } else {\n        this.setTargetFPS(30); // Normal FPS when visible\n      }\n    });\n    \n    // Handle focus/blur for additional optimization\n    window.addEventListener('focus', () => {\n      this.isVisible = true;\n      this.setTargetFPS(30);\n    });\n    \n    window.addEventListener('blur', () => {\n      this.setTargetFPS(20); // Reduced but not hidden\n    });\n  }\n}\n\n/**\n * Complete Performance Optimization Suite\n */\nexport class ThemePerformanceManager {\n  private lodManager: LODManager;\n  private culler: FrustumCuller;\n  private batchRenderer: BatchRenderer;\n  private memoryOptimizer: MemoryOptimizer;\n  private animationController: AnimationController;\n  \n  constructor(canvasWidth: number, canvasHeight: number) {\n    this.lodManager = new LODManager();\n    this.culler = new FrustumCuller(canvasWidth, canvasHeight);\n    this.batchRenderer = new BatchRenderer();\n    this.memoryOptimizer = new MemoryOptimizer();\n    this.animationController = new AnimationController();\n  }\n\n  /**\n   * Update all performance systems\n   */\n  update(metrics: PerformanceMetrics, canvasWidth?: number, canvasHeight?: number): {\n    lodSettings: LODSettings;\n    shouldRender: boolean;\n    memoryPressure: number;\n    optimizationActive: boolean;\n  } {\n    // Update LOD based on performance\n    const lodSettings = this.lodManager.updateLOD(metrics);\n    \n    // Update culling bounds if canvas size changed\n    if (canvasWidth && canvasHeight) {\n      this.culler.updateBounds(canvasWidth, canvasHeight);\n    }\n    \n    // Check memory pressure\n    const { pressure, shouldCleanup } = this.memoryOptimizer.checkMemoryPressure();\n    \n    // Check if we should render this frame\n    const shouldRender = this.animationController.shouldRenderFrame() && !this.lodManager.shouldSkipFrame();\n    \n    return {\n      lodSettings,\n      shouldRender,\n      memoryPressure: pressure,\n      optimizationActive: lodSettings.level > 0 || pressure > 0.7 || !shouldRender\n    };\n  }\n\n  /**\n   * Get all performance managers for direct access\n   */\n  getManagers() {\n    return {\n      lod: this.lodManager,\n      culler: this.culler,\n      batchRenderer: this.batchRenderer,\n      memory: this.memoryOptimizer,\n      animation: this.animationController\n    };\n  }\n\n  /**\n   * Get comprehensive performance report\n   */\n  getPerformanceReport(): {\n    lod: LODSettings;\n    culling: any;\n    batching: any;\n    memory: { pressure: number; shouldCleanup: boolean };\n    animation: any;\n  } {\n    const { pressure, shouldCleanup } = this.memoryOptimizer.checkMemoryPressure();\n    \n    return {\n      lod: this.lodManager.getCurrentLOD(),\n      culling: {}, // Will be populated when particles are processed\n      batching: this.batchRenderer.getBatchStats(),\n      memory: { pressure, shouldCleanup },\n      animation: this.animationController.getFrameTiming()\n    };\n  }\n}","/**\n * Base Theme Class\n * \n * Provides common functionality and structure for all voice themes.\n * Themes can extend this class to inherit shared behavior.\n */\n\nimport { IVoiceTheme, VoiceState, PerformanceSettings } from './IVoiceTheme';\nimport { PerformanceMonitor, DeviceCapabilityDetector } from '../utils/performance';\nimport { ThemePerformanceManager, LODSettings } from './PerformanceOptimizations';\nimport { lerp, clamp } from '../utils/math';\n\nexport abstract class BaseTheme implements IVoiceTheme {\n  // Abstract properties that must be implemented\n  abstract readonly id: string;\n  abstract readonly name: string;\n  abstract readonly description: string;\n  abstract readonly category: 'particle' | 'geometric' | 'advanced' | 'artistic';\n  abstract readonly performanceProfile: 'light' | 'medium' | 'heavy';\n\n  // Common state management\n  protected currentState: VoiceState = VoiceState.IDLE;\n  protected targetState: VoiceState = VoiceState.IDLE;\n  protected stateTransition = 0;\n  protected stateTransitionSpeed = 0.1;\n\n  // Mouse/touch interaction\n  protected mouseX = 0;\n  protected mouseY = 0;\n  protected normalizedMouseX = 0; // -1 to 1\n  protected normalizedMouseY = 0; // -1 to 1\n  protected mouseInfluence = 0;\n  protected targetMouseInfluence = 0;\n  protected isHovering = false;\n\n  // Canvas context and dimensions\n  protected context: CanvasRenderingContext2D | null = null;\n  protected canvasWidth = 0;\n  protected canvasHeight = 0;\n  protected centerX = 0;\n  protected centerY = 0;\n\n  // Performance monitoring\n  protected performanceMonitor: PerformanceMonitor;\n  protected performanceManager: ThemePerformanceManager | null = null;\n  protected performanceSettings: PerformanceSettings;\n  protected currentLODSettings: LODSettings | null = null;\n  protected lastFrameTime = 0;\n\n  // Animation timing\n  protected animationTime = 0;\n  protected deltaTimeAccumulator = 0;\n\n  constructor() {\n    this.performanceMonitor = new PerformanceMonitor();\n    \n    // Default performance settings (will be overridden by capability detection)\n    this.performanceSettings = {\n      targetFPS: 30,\n      maxParticles: 100,\n      enableEffects: true,\n      enableGlow: false,\n      qualityLevel: 'medium'\n    };\n\n    this.initializePerformanceCallbacks();\n  }\n\n  /**\n   * Initialize the theme with canvas context and dimensions\n   */\n  init(context: CanvasRenderingContext2D, width: number, height: number): void {\n    this.context = context;\n    this.updateDimensions(width, height);\n    this.initializePerformanceManager();\n    this.setupPerformanceSettings();\n    this.onInit();\n  }\n\n  /**\n   * Update canvas dimensions\n   */\n  protected updateDimensions(width: number, height: number): void {\n    this.canvasWidth = width;\n    this.canvasHeight = height;\n    this.centerX = width / 2;\n    this.centerY = height / 2;\n    \n    // Update performance manager with new dimensions\n    if (this.performanceManager) {\n      this.performanceManager.getManagers().culler.updateBounds(width, height);\n    }\n  }\n\n  /**\n   * Main drawing function called every frame\n   */\n  draw(\n    context: CanvasRenderingContext2D,\n    displayWidth: number,\n    displayHeight: number,\n    projCenterX: number,\n    projCenterY: number,\n    deltaTime: number\n  ): void {\n    // Update performance monitoring\n    const metrics = this.performanceMonitor.update();\n    \n    // Update performance manager and check if we should render\n    if (this.performanceManager) {\n      const perfUpdate = this.performanceManager.update(metrics, displayWidth, displayHeight);\n      this.currentLODSettings = perfUpdate.lodSettings;\n      \n      // Skip rendering if performance manager suggests it\n      if (!perfUpdate.shouldRender) {\n        return;\n      }\n    }\n    \n    // Update dimensions if changed\n    if (this.canvasWidth !== displayWidth || this.canvasHeight !== displayHeight) {\n      this.updateDimensions(displayWidth, displayHeight);\n    }\n\n    // Update animation timing\n    this.updateTiming(deltaTime);\n\n    // Update state transitions\n    this.updateStateTransition();\n\n    // Update mouse influence\n    this.updateMouseInfluence();\n\n    // Clear canvas with theme-specific background\n    this.clearCanvas(context, displayWidth, displayHeight);\n\n    // Delegate to theme-specific drawing\n    this.onDraw(context, displayWidth, displayHeight, projCenterX, projCenterY, deltaTime);\n\n    // Draw performance overlay if enabled\n    if (this.shouldShowPerformanceOverlay()) {\n      this.drawPerformanceOverlay(context, metrics);\n    }\n  }\n\n  /**\n   * Handle state changes with smooth transitions\n   */\n  onUserSpeaking(): void {\n    this.setTargetState(VoiceState.USER_SPEAKING);\n    this.onStateChange(VoiceState.USER_SPEAKING);\n  }\n\n  onProcessing(): void {\n    this.setTargetState(VoiceState.PROCESSING);\n    this.onStateChange(VoiceState.PROCESSING);\n  }\n\n  onAiSpeaking(): void {\n    this.setTargetState(VoiceState.AI_SPEAKING);\n    this.onStateChange(VoiceState.AI_SPEAKING);\n  }\n\n  reset(): void {\n    this.setTargetState(VoiceState.IDLE);\n    this.onStateChange(VoiceState.IDLE);\n    this.onReset();\n  }\n\n  /**\n   * Handle mouse/touch position updates\n   */\n  setMousePosition(x: number, y: number, canvasWidth: number, canvasHeight: number): void {\n    this.mouseX = x;\n    this.mouseY = y;\n    this.normalizedMouseX = (x / canvasWidth) * 2 - 1; // -1 to 1\n    this.normalizedMouseY = (y / canvasHeight) * 2 - 1; // -1 to 1\n    this.targetMouseInfluence = this.isHovering ? 1 : 0.3;\n    this.onMouseMove(x, y, this.normalizedMouseX, this.normalizedMouseY);\n  }\n\n  /**\n   * Handle hover state changes\n   */\n  setHovering(hovering: boolean): void {\n    this.isHovering = hovering;\n    this.targetMouseInfluence = hovering ? 1 : 0;\n    this.onHoverChange(hovering);\n  }\n\n  /**\n   * Cleanup resources\n   */\n  dispose(): void {\n    this.onDispose();\n  }\n\n  /**\n   * Get performance metrics\n   */\n  getPerformanceMetrics() {\n    const baseMetrics = this.performanceMonitor.getCurrentMetrics();\n    const themeMetrics = this.getThemeSpecificMetrics();\n    return { ...baseMetrics, ...themeMetrics };\n  }\n\n  // Protected methods for subclasses to override\n\n  /**\n   * Theme-specific initialization\n   */\n  protected onInit(): void {}\n\n  /**\n   * Theme-specific drawing logic\n   */\n  protected abstract onDraw(\n    context: CanvasRenderingContext2D,\n    width: number,\n    height: number,\n    centerX: number,\n    centerY: number,\n    deltaTime: number\n  ): void;\n\n  /**\n   * Called when state changes\n   */\n  protected onStateChange(newState: VoiceState): void {}\n\n  /**\n   * Called when reset\n   */\n  protected onReset(): void {}\n\n  /**\n   * Called when mouse moves\n   */\n  protected onMouseMove(x: number, y: number, normalizedX: number, normalizedY: number): void {}\n\n  /**\n   * Called when hover state changes\n   */\n  protected onHoverChange(hovering: boolean): void {}\n\n  /**\n   * Called when disposing\n   */\n  protected onDispose(): void {}\n\n  /**\n   * Get theme-specific performance metrics\n   */\n  protected getThemeSpecificMetrics(): Record<string, any> {\n    return {};\n  }\n\n  /**\n   * Clear canvas with theme-specific background\n   */\n  protected clearCanvas(context: CanvasRenderingContext2D, width: number, height: number): void {\n    context.clearRect(0, 0, width, height);\n  }\n\n  // Private helper methods\n\n  private async setupPerformanceSettings(): Promise<void> {\n    try {\n      const detector = DeviceCapabilityDetector.getInstance();\n      const capabilities = await detector.detectCapabilities();\n      \n      // Adjust performance settings based on device capabilities\n      if (capabilities.performanceLevel === 'low' || capabilities.isLowPowerDevice) {\n        this.performanceSettings = {\n          targetFPS: 24,\n          maxParticles: this.getOptimalParticleCount('low'),\n          enableEffects: false,\n          enableGlow: false,\n          qualityLevel: 'low'\n        };\n      } else if (capabilities.performanceLevel === 'medium') {\n        this.performanceSettings = {\n          targetFPS: 30,\n          maxParticles: this.getOptimalParticleCount('medium'),\n          enableEffects: true,\n          enableGlow: false,\n          qualityLevel: 'medium'\n        };\n      } else {\n        this.performanceSettings = {\n          targetFPS: 60,\n          maxParticles: this.getOptimalParticleCount('high'),\n          enableEffects: true,\n          enableGlow: true,\n          qualityLevel: 'high'\n        };\n      }\n    } catch (error) {\n      console.warn('Failed to detect device capabilities, using default settings:', error);\n    }\n  }\n\n  private initializePerformanceManager(): void {\n    this.performanceManager = new ThemePerformanceManager(this.canvasWidth, this.canvasHeight);\n  }\n\n  private getOptimalParticleCount(quality: 'low' | 'medium' | 'high'): number {\n    const baseCount = {\n      light: { low: 30, medium: 80, high: 150 },\n      medium: { low: 50, medium: 120, high: 250 },\n      heavy: { low: 20, medium: 60, high: 120 }\n    };\n\n    return baseCount[this.performanceProfile][quality];\n  }\n\n  private initializePerformanceCallbacks(): void {\n    this.performanceMonitor.setCallbacks({\n      onPerformanceWarning: (metrics) => {\n        console.warn(`[${this.id}] Performance warning:`, metrics);\n        this.adjustPerformanceSettings(0.8);\n      },\n      onPerformanceCritical: (metrics) => {\n        console.error(`[${this.id}] Critical performance:`, metrics);\n        this.adjustPerformanceSettings(0.6);\n      }\n    });\n  }\n\n  private adjustPerformanceSettings(factor: number): void {\n    this.performanceSettings.maxParticles = Math.floor(this.performanceSettings.maxParticles * factor);\n    this.performanceSettings.enableEffects = false;\n    this.performanceSettings.enableGlow = false;\n  }\n\n  private setTargetState(state: VoiceState): void {\n    if (this.targetState !== state) {\n      this.targetState = state;\n      this.stateTransition = 0;\n    }\n  }\n\n  private updateStateTransition(): void {\n    if (this.currentState !== this.targetState) {\n      this.stateTransition += this.stateTransitionSpeed;\n      if (this.stateTransition >= 1) {\n        this.currentState = this.targetState;\n        this.stateTransition = 1;\n      }\n    }\n  }\n\n  private updateMouseInfluence(): void {\n    this.mouseInfluence = lerp(this.mouseInfluence, this.targetMouseInfluence, 0.1);\n  }\n\n  private updateTiming(deltaTime: number): void {\n    this.deltaTimeAccumulator += deltaTime;\n    this.animationTime += deltaTime;\n  }\n\n  private shouldShowPerformanceOverlay(): boolean {\n    // Only show in development or when explicitly enabled\n    return process.env.NODE_ENV === 'development' && \n           localStorage.getItem('voice-performance-overlay') === 'true';\n  }\n\n  private drawPerformanceOverlay(context: CanvasRenderingContext2D, metrics: any): void {\n    context.save();\n    context.fillStyle = 'rgba(0, 0, 0, 0.8)';\n    context.fillRect(10, 10, 200, 80);\n    context.fillStyle = 'white';\n    context.font = '12px monospace';\n    context.fillText(`Theme: ${this.name}`, 15, 25);\n    context.fillText(`FPS: ${Math.round(metrics.fps)}`, 15, 40);\n    context.fillText(`Frame: ${Math.round(metrics.frameTime)}ms`, 15, 55);\n    context.fillText(`State: ${this.currentState}`, 15, 70);\n    context.fillText(`Mouse: ${Math.round(this.mouseInfluence * 100)}%`, 15, 85);\n    context.restore();\n  }\n\n  // Protected utility methods for subclasses\n\n  /**\n   * Get color interpolated between states\n   */\n  protected getStateColor(idleColor: string, activeColor: string): string {\n    if (this.stateTransition === 0) return idleColor;\n    if (this.stateTransition === 1) return activeColor;\n    \n    // Simple color interpolation (for more complex colors, use Color class)\n    return activeColor; // Simplified for now\n  }\n\n  /**\n   * Get value interpolated by mouse influence\n   */\n  protected getMouseInfluencedValue(baseValue: number, influencedValue: number): number {\n    return lerp(baseValue, influencedValue, this.mouseInfluence);\n  }\n\n  /**\n   * Check if effects should be enabled based on performance settings\n   */\n  protected shouldEnableEffects(): boolean {\n    if (this.currentLODSettings) {\n      return !this.currentLODSettings.effectsDisabled;\n    }\n    return this.performanceSettings.enableEffects;\n  }\n\n  /**\n   * Check if glow effects should be enabled\n   */\n  protected shouldEnableGlow(): boolean {\n    if (this.currentLODSettings) {\n      return !this.currentLODSettings.glowDisabled;\n    }\n    return this.performanceSettings.enableGlow;\n  }\n\n  /**\n   * Get maximum particle count for performance\n   */\n  protected getMaxParticles(): number {\n    const baseMax = this.performanceSettings.maxParticles;\n    if (this.currentLODSettings) {\n      return Math.floor(baseMax * (1 - this.currentLODSettings.particleReduction));\n    }\n    return baseMax;\n  }\n\n  /**\n   * Get current LOD level for theme-specific optimizations\n   */\n  protected getCurrentLODLevel(): number {\n    return this.currentLODSettings?.level || 1;\n  }\n\n  /**\n   * Check if simplified rendering should be used\n   */\n  protected shouldUseSimplifiedRendering(): boolean {\n    return this.currentLODSettings?.simplifiedRendering || false;\n  }\n\n  /**\n   * Get performance managers for advanced optimizations\n   */\n  protected getPerformanceManagers() {\n    return this.performanceManager?.getManagers() || null;\n  }\n\n  /**\n   * Check if a particle is visible (for culling)\n   */\n  protected isParticleVisible(x: number, y: number, z = 0, size = 0): boolean {\n    const managers = this.getPerformanceManagers();\n    if (managers?.culler) {\n      return managers.culler.isVisible(x, y, z, size);\n    }\n    return true; // No culling available, assume visible\n  }\n\n  /**\n   * Filter particles to only visible ones\n   */\n  protected cullParticles<T extends { x: number; y: number; z?: number; size?: number }>(particles: T[]): T[] {\n    const managers = this.getPerformanceManagers();\n    if (managers?.culler) {\n      return managers.culler.cullParticles(particles);\n    }\n    return particles; // No culling available, return all\n  }\n\n  /**\n   * Add particle to batch renderer for optimized drawing\n   */\n  protected addToBatch(\n    color: string,\n    x: number,\n    y: number, \n    size: number,\n    alpha: number,\n    glowEnabled = false,\n    effectsEnabled = false\n  ): void {\n    const managers = this.getPerformanceManagers();\n    if (managers?.batchRenderer) {\n      managers.batchRenderer.addToBatch(color, x, y, size, alpha, glowEnabled, effectsEnabled);\n    }\n  }\n\n  /**\n   * Render all batches (call at end of draw)\n   */\n  protected renderBatches(context: CanvasRenderingContext2D): void {\n    const managers = this.getPerformanceManagers();\n    if (managers?.batchRenderer && this.currentLODSettings) {\n      managers.batchRenderer.renderBatches(context, this.currentLODSettings);\n      managers.batchRenderer.clearBatches();\n    }\n  }\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = () => ([]);\nwebpackEmptyContext.resolve = webpackEmptyContext;\nwebpackEmptyContext.id = 70396;\nmodule.exports = webpackEmptyContext;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".\" + {\"135\":\"befad026ff32498c3edd\",\"139\":\"130c54ec139bcff70256\",\"236\":\"54b57ebba9cba0bdade5\",\"258\":\"f45ce4b794009e714052\",\"352\":\"061cfbeef9ab3225a22d\",\"365\":\"bd729c9230ff736cbcfb\",\"404\":\"8b85511b2acdad4beb58\",\"482\":\"d80085ef323abedc197b\",\"613\":\"9ed462a41198f9333b95\",\"638\":\"c521f61bc46fd1fa84b5\",\"964\":\"4fa5a30a729d84bb866b\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t437: 0\n};\n\n__webpack_require__.f.j = (chunkId, promises) => {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = (event) => {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkcustomgpt_ui\"] = self[\"webpackChunkcustomgpt_ui\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","__webpack_require__.nc = undefined;","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [96], () => (__webpack_require__(56686)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","inProgress","dataWebpackPrefix","lerp","start","end","factor","clamp","value","min","max","Math","random","distance2D","x1","y1","x2","y2","dx","dy","sqrt","hslToRgb","h","s","l","hue2rgb","p","q","t","round","DefaultTheme","BaseTheme","constructor","super","_defineProperty","this","sphereRadius","gemini","idle","r","g","b","gradient","userSpeaking","processing","aiSpeaking","hover","instagram","ocean","sunset","aurora","particlePool","ObjectPool","x","y","z","velX","velY","velZ","age","dead","right","projX","projY","alpha","attack","hold","decay","initValue","holdValue","lastValue","stuckTime","accelX","accelY","accelZ","particle","next","undefined","prev","maxParticles","setColor","getColorPalette","onInit","getMaxParticles","onDraw","context","width","height","centerX","centerY","deltaTime","updateColors","updateParticles","renderParticles","onStateChange","newState","palette","VoiceState","USER_SPEAKING","framesPerRotation","colorTransitionSpeed","numToAddEachFrame","particleAlpha","particleRad","gravity","PROCESSING","AI_SPEAKING","IDLE","getThemeSpecificMetrics","particleCount","currentParticleCount","colorScheme","currentColorScheme","setColorScheme","scheme","colorSchemes","targetR","targetG","targetB","currentR","currentG","currentB","count","wait","dynamicNumParticles","floor","mouseInfluence","particlesToCreate","i","createParticle","dynamicTurnSpeed","PI","turnAngle","theta","phi","acos","mouseDistortion","mouseBias","normalizedMouseX","normalizedMouseY","x0","sin","cos","y0","z0","velocityMultiplier","addParticle","sphereCenterY","sphereCenterZ","alphaMultiplier","vx0","vy0","vz0","newParticle","acquire","particleList","first","sinAngle","cosAngle","zMax","focalLength","nextParticle","randAccelX","randAccelY","randAccelZ","rotX","rotZ","m","radiusScale","updateParticleAlpha","recycleParticle","renderParticle","scale","finalAlpha","zeroAlphaDepth","particleSize","fillStyle","beginPath","arc","fill","shouldEnableGlow","release","onDispose","clear","PerformanceMonitor","targetFPS","lastTime","performance","now","update","currentTime","frameTime","frameCount","fps","fpsHistory","push","frameTimeHistory","length","maxHistorySize","shift","avgFPS","reduce","sum","currentFPS","performanceRatio","criticalThreshold","callbacks","onPerformanceCritical","warningThreshold","onPerformanceWarning","onFPSUpdate","setCallbacks","getCurrentMetrics","reset","DeviceCapabilityDetector","getInstance","instance","detectCapabilities","capabilities","isMobile","detectMobile","supportsWebGL","detectWebGL","hardwareConcurrency","navigator","memoryGB","memory","jsHeapSizeLimit","performanceLevel","benchmarkPerformance","isLowPowerDevice","detectLowPowerDevice","test","userAgent","canvas","document","createElement","getContext","cores","Promise","resolve","startTime","operations","benchmark","requestAnimationFrame","getCapabilities","createFn","resetFn","initialSize","maxSize","Set","available","obj","pop","inUse","size","oldest","values","add","has","delete","getStats","total","THEME_COOKIE_NAME","getThemeFromCookie","window","themeCookie","cookie","split","find","trim","startsWith","applyThemeToDocument","theme","documentElement","classList","remove","setTheme","setThemeCookie","create","persist","set","get","apiKey","baseURL","setApiKey","key","setBaseURL","url","setThemeUtil","name","partialize","state","onRehydrateStorage","initializeTheme","cn","inputs","twMerge","clsx","generateId","toString","substring","Date","formatFileSize","bytes","log","parseFloat","pow","toFixed","formatTimestamp","timestamp","date","diffInMs","getTime","diffInMinutes","diffInHours","diffInDays","toLocaleDateString","async","copyToClipboard","text","clipboard","writeText","error","parseStreamChunk","chunk","slice","type","data","parsed","JSON","parse","content","citations","message","delta","choices","jsonError","parseError","includes","CONSTANTS","MAX_FILE_SIZE","ACCEPTED_FILE_TYPES","MAX_MESSAGE_LENGTH","API_TIMEOUT","STREAM_TIMEOUT","RETRY_ATTEMPTS","RETRY_DELAY","Logger","isClient","formatMessage","entry","level","category","stack","formatted","toUpperCase","stringify","writeToFile","toISOString","code","status","logs","info","warn","getLogs","clearLogs","apiRequest","endpoint","method","apiResponse","apiError","authCheck","authError","navigation","route","params","storeAction","store","action","logger","DEMO_STORAGE_KEYS","UsageTracker","process","NEXT_PUBLIC_ANALYTICS_ENDPOINT","startFlushTimer","track","event","fullEvent","eventType","eventName","deploymentMode","getDeploymentMode","demoType","getDemoType","sessionId","getSessionId","clientVersion","NEXT_PUBLIC_APP_VERSION","referrer","eventQueue","batchSize","flush","trackApiCall","statusCode","trackSessionStart","metadata","mode","trackSessionEnd","reason","trackLimitReached","limitType","trackError","localStorage","getItem","sessionData","sessionStorage","e","demoSession","flushTimer","clearInterval","setInterval","flushInterval","events","fetch","analyticsEndpoint","headers","body","unshift","forceFlush","usageTracker","addEventListener","hidden","DEMO_ERROR_MESSAGES","title","retryAfter","proxyClient","Map","isDemoMode","timeout","setDemoApiKey","demoApiKey","request","options","requestId","controller","AbortController","abortControllers","timeoutId","setTimeout","abort","isFormData","FormData","baseHeaders","session","response","signal","responseData","clearTimeout","contentLength","contentType","updated","ok","Error","isFreeTrialMode","errorInfo","getErrorMessage","isFreeTrialError","streamRequest","errorMessage","errorText","errorData","cancelRequest","Array","from","entries","forEach","cancelAllRequests","getAgents","queryParams","URLSearchParams","page","append","per_page","queryString","createAgent","getAgent","id","updateAgent","formData","Object","String","deleteAgent","replicateAgent","getAgentStats","getAgentSettings","updateAgentSettings","settings","getProjectPlugins","projectId","updateProjectPlugin","pluginId","getConversations","order","orderBy","userFilter","createConversation","updateConversation","deleteConversation","getMessages","sendMessage","sendMessageStream","onChunk","onError","onComplete","reader","stream","getReader","decoder","TextDecoder","buffer","done","read","decode","lines","line","getMessageById","messageId","updateMessageFeedback","feedback","getCitation","citationId","previewCitationFile","uploadFile","file","getTrafficReport","getQueriesReport","getConversationsReport","getAnalysisReport","interval","getPages","limit","crawl_status","index_status","deletePage","pageId","reindexPage","getPageMetadata","updatePageMetadata","getLicenses","createLicense","getLicense","licenseId","updateLicense","deleteLicense","getSources","createSitemapSource","sitemap_path","executive_js","data_refresh_frequency","create_new_pages","remove_unexist_pages","refresh_existing_pages","uploadFileSource","updateSourceSettings","sourceId","deleteSource","instantSyncSource","getCustomerIntelligence","getUserLimits","getUserProfile","updateUserProfile","getDemoUsageStats","cleanupDemoSession","getClient","useConversationStore","conversations","currentConversation","loading","currentPage","totalPages","totalConversations","perPage","sortOrder","sortBy","allConversations","searchQuery","searchMode","dateFilter","applyFilters","filtered","query","toLowerCase","filter","conv","session_id","filterDate","setHours","setDate","getDate","updated_at","setSearchQuery","setSearchMode","setDateFilter","fetchConversations","client","apiParams","responseType","hasData","dataLength","isArray","paginationData","map","c","messagesCount","messages","current_page","last_page","errorType","newConversation","selectConversation","conversation","conversationId","project_id","updatedAllConversations","updatedConversation","ensureConversation","firstMessage","cleanedMessage","replace","join","generateConversationName","__customgpt_current_session","__customgpt_session","__customgpt_sessions","sessions","sessionIds","keys","substr","setItem","useChatSettingsStore","getSettings","agentId","response_source","chatbot_model","custom_persona","agent_capability","updateSettings","updates","clearSettings","newSettings","StreamHandler","config","retryAttempts","retryDelay","processStream","abortController","currentMessage","isComplete","cancel","processLine","releaseLock","citation","onCitation","getCurrentMessage","isStreaming","globalStreamManager","maxConcurrentStreams","startStream","streamId","streams","cancelStream","handler","cancelAllStreams","getActiveStreams","getStreamStatus","exists","getActiveStreamCount","MESSAGES_STORAGE_KEY","saveMessagesToStorage","stored","cache","fetchCitationDetails","citationIds","validCitationIds","validIds","isNaN","index","arr","indexOf","original","valid","validateCitationIds","source","description","hasContent","hasUrl","requested","fetched","success","useMessageStore","streamingMessage","files","__customgpt_demo_mode","agentStore","useAgentStore","getState","conversationStore","currentAgent","catch","agentName","project_name","messageLength","hasFiles","hasSessionId","isNew","message_count","userMessage","role","addMessage","assistantMessage","sourceIds","all","fileCount","messageContent","hasSourceIds","requestData","prompt","source_ids","contentPreview","updateStreamingMessage","current","then","citationDetails","updatedCurrent","streamError","finalMessage","messageData","openai_response","lastUserMessage","details","user_id","conversation_id","prompt_id","user_ip","user_agent","external_id","request_source","fallbackError","apiMessages","latestApiMessage","created_at","user_query","existingCitations","response_feedback","reaction","hasDetails","citationCount","enrichmentError","setupError","currentAgentFor403","is_chat_active","newMessages","conversationMessages","existingIndex","findIndex","clearMessages","promptId","promptIdMatch","match","parseInt","toast","updatedMessage","feedbackValue","getMessagesForConversation","cancelStreaming","loadMessages","availableConversations","messageTypes","formattedMessages","msg","baseTimestamp","formattedCount","sort","a","firstMessageTime","lastMessageTime","localSendingMessages","mergedMessages","localMsg","insertIndex","splice","cachedMessages","loadMessagesFromStorage","messageCount","clearError","setMessagesForConversation","regenerateLastResponse","lastAssistantMessage","lastAssistantIndex","userMessageId","assistantMessageId","userContent","updatedMessages","agents","paginationMeta","fetchAgents","hasMore","nestedData","paginatedResponse","totalCount","fetchSettingsForAgents","agentsWithoutSettings","agent","settingsPromises","settingsResponse","validResults","result","loadMoreAgents","nextPage","newAgents","responseTotal","responsePage","findAgent","newAgent","selectAgent","messageStore","agentWithSettings","setAgents","updatedAgent","updatedSettings","filteredAgents","formatDate","sidebarOpen","settingsOpen","fontSize","setSidebarOpen","open","setSettingsOpen","className","setFontSize","root","getDefaultDateRange","endDate","startDate","activeRequests","analytics","dateRange","fetchAnalytics","trafficReport","queriesReport","conversationsReport","analysisReport","conversationsTotal","queriesTotal","avgQueriesPerConv","average_queries_per_conversation","Number","analyticsData","active","trend","item","created_at_interval","queries_number","queries","successful","query_status","failed","avgResponseTime","topQueries","traffic","uniqueUsers","sources","acc","request_source_number","pageViews","avgSessionDuration","bounceRate","users","statistics","totalMessages","avgMessagesPerConversation","satisfactionRate","responseAccuracy","setDateRange","exportAnalytics","format","jsonData","blob","Blob","URL","createObjectURL","href","download","appendChild","click","removeChild","revokeObjectURL","pages","paginationInfo","fetchPages","setQueryParams","currentSource","syncStatus","syncing","fetchSources","allSources","sitemaps","apiSource","uploads","fetchSource","uploadSources","uploadPromises","reject","updateSource","bulkDelete","syncSources","progress","setFilter","selectSource","profile","fetchProfile","updateProfile","profilePhoto","errors","profile_photo","flat","settingsLoading","settingsError","plugins","pluginsLoading","pluginsError","stats","statsLoading","statsError","fetchSettings","requestKey","settingsUpdate","defaultValues","ending_message","no_answer_message","try_asking_questions_msg","view_more_msg","view_less_msg","citations_answer_source_label_msg","citations_sources_label_msg","hang_in_there_msg","chatbot_siesta_msg","question","File","stringValue","fetchPlugins","pluginsData","updatePlugin","enabled","plugin","fetchStats","statsData","licenses","fetchLicenses","dataType","errorStatus","errorCode","responseText","dataStructure","licenseKey","newLicense","license","licenseName","buttonVariants","cva","variants","variant","default","destructive","outline","secondary","ghost","link","premium","sm","lg","xl","icon","defaultVariants","Button","React","asChild","loadingText","children","disabled","onClick","props","ref","ripples","setRipples","handleClick","rect","currentTarget","getBoundingClientRect","rippleX","clientX","left","rippleY","clientY","top","rippleId","ripple","_jsxs","_jsx","style","transform","animation","xmlns","viewBox","cx","cy","stroke","strokeWidth","d","displayName","sizeVariants","xs","container","md","shapeVariants","circle","rounded","square","Avatar","src","alt","shape","fallback","isSelected","imageError","setImageError","avatarUrl","chatbot_avatar","altText","sizeClasses","shapeClass","backgroundClass","handleImageError","renderFallbackIcon","iconClass","User","Bot","AgentAvatar","UserAvatar","CitationCard","isExpanded","onToggle","onPreviewClick","ChevronDown","AnimatePresence","motion","div","initial","opacity","animate","exit","transition","duration","target","rel","ExternalLink","FileText","CitationList","onCitationClick","maxVisible","expanded","setExpanded","useState","showAll","setShowAll","visibleCitations","BookOpen","idx","delay","newExpanded","toggleExpanded","MessageDetails","setIsExpanded","handleCopyValue","Info","ChevronUp","detailsText","Copy","DetailRow","label","onCopy","toLocaleString","truncate","CodeBlock","language","copied","setCopied","SyntaxHighlighter","oneDark","customStyle","margin","borderRadius","StreamingCursor","MessageContent","cleanedContent","ReactMarkdown","remarkPlugins","remarkGfm","components","exec","MessageActions","onFeedback","isLastAssistant","setFeedback","handleFeedback","ThumbsUp","ThumbsDown","RotateCw","Message","isLast","isUser","DemoModeContext","createContext","isRuntimeDemoMode","isInitialized","useDemoModeContext","useContext","Spinner","Loader2","Skeleton","LoadingOverlay","visible","blur","MessageSkeleton","isAssistant","_","ConversationSkeleton","TooltipProvider","TooltipPrimitive","Tooltip","TooltipTrigger","TooltipContent","sideOffset","SpeechToTextButton","onTranscription","onTranscriptionStart","onTranscriptionEnd","isRecording","setIsRecording","isProcessing","setIsProcessing","recordingDuration","setRecordingDuration","mediaRecorderRef","useRef","audioChunksRef","recordingTimeoutRef","durationIntervalRef","stopRecording","useCallback","stop","startRecording","mediaDevices","getUserMedia","audio","mimeType","MediaRecorder","isTypeSupported","mediaRecorder","ondataavailable","onstop","audioBlob","getTracks","processAudio","elapsed","FileReader","readAsDataURL","onloadend","base64Data","__demoOpenAIKey","json","onerror","isActive","formatDuration","seconds","padStart","MicOff","Mic","AnimatedVoiceIcon","barHeights","bars","gap","animationDelay","background","DropdownMenu","DropdownMenuPrimitive","DropdownMenuTrigger","inset","ChevronRight","DropdownMenuContent","DropdownMenuItem","checked","Check","Circle","DropdownMenuLabel","DropdownMenuSeparator","FileChip","onRemove","fileIcon","fileType","getFileIcon","_Fragment","AlertCircle","X","FileUploadButton","onUpload","fileInputRef","multiple","accept","onChange","Paperclip","RESPONSE_SOURCES","MessageSquare","Brain","Settings","CHATBOT_MODELS","Sparkles","Zap","COMMON_PERSONAS","AGENT_CAPABILITIES","enterprise","ChatInput","onSend","placeholder","maxLength","onVoiceClick","input","setInput","setFiles","isTranscribing","setIsTranscribing","isLoadingSettings","setIsLoadingSettings","showSettings","setShowSettings","textareaRef","updateLocalSettings","loadAgentSettings","loadedSettings","useEffect","updateSetting","validModels","some","adjustTextareaHeight","textarea","scrollHeight","maxHeight","handleSubmit","preventDefault","fileObjects","f","focus","handleFileUpload","newFiles","uploadFiles","simulateUpload","getRootProps","getInputProps","isDragActive","useDropzone","onDrop","noClick","noKeyboard","canSend","handleTranscription","prevInput","newInput","handleTranscriptionStart","handleTranscriptionEnd","Upload","removeFile","fileId","onSubmit","onKeyDown","shiftKey","rows","overflowY","Send","SlidersHorizontal","align","Icon","model","persona","capability","TypingIndicator","iconSizeClasses","display","parent","parentElement","innerHTML","AgentItem","onSelect","onSettingsClick","stopPropagation","AgentSelector","isOpen","setIsOpen","isSelectingAgent","setIsSelectingAgent","loadingSettings","setLoadingSettings","dropdownRef","fetchAgentSettings","agentsNeedingSettings","agentsToLoad","newSet","results","updatedAgents","handleClickOutside","contains","removeEventListener","handleRefresh","handleSelectAgent","RefreshCw","willOpen","location","BarChart3","useMediaQuery","matches","setMatches","media","matchMedia","listener","useBreakpoint","isTablet","isDesktop","isLargeScreen","isTouchDevice","isMobileOrTablet","isTabletOrDesktop","CitationDetailsModal","onClose","setLoading","setError","citationData","setCitationData","effectiveProjectId","hasImage","image","err","Loader","Globe","ImageIcon","CitationFilePreview","fileName","fileContent","setFileContent","setContentType","fetchFilePreview","content_type","handleDownload","Download","ConversationManager","maxConversations","currentConversationId","onConversationChange","onCreateConversation","refreshKey","setConversations","editingId","setEditingId","editTitle","setEditTitle","loadConversations","handleEditSave","MessageCircle","strokeLinecap","strokeLinejoin","handleCreateConversation","Plus","autoFocus","handleSelectConversation","createdAt","handleEditStart","Edit2","handleDelete","Trash2","MessageErrorDisplay","propStatusCode","onRetry","parsedStatusCode","statusMatch","finalStatusCode","errorDetails","getErrorDetails","iconClassName","textClassName","UserX","showSupport","Search","CreditCard","supportUrl","ServerCrash","showRetry","XCircle","WidgetContext","WidgetStoreContext","useIsInWidgetContext","useWidgetStores","stores","isInWidget","widgetStores","globalStore","useGlobalMessageStore","widgetStore","useStore","useGlobalConversationStore","useGlobalAgentStore","ThemeManager","easing","crossfade","registerBuiltInThemes","initialize","currentTheme","init","registerTheme","registration","registeredThemes","unregisterTheme","themeId","getAvailableThemes","reg","getThemeMetadata","switchTheme","transitionOptions","isTransitioning","onThemeError","newTheme","factory","performThemeTransition","getCurrentTheme","getCurrentThemeId","draw","displayWidth","displayHeight","projCenterX","projCenterY","drawTransition","onUserSpeaking","transitionTheme","onProcessing","onAiSpeaking","setMousePosition","canvasWidth","canvasHeight","setHovering","hovering","getPerformanceMetrics","dispose","performanceProfile","previewColors","previewDescription","StarfieldTheme","JarvisTheme","LegoTheme","StarWarsTheme","OceanWaveTheme","NFTTheme","NothingPhoneTheme","MinecraftTheme","FuturisticTheme","VintageModernTheme","AuroraTheme","oldTheme","oldThemeId","transitionProgress","onTransitionStart","applyEasing","completeTransition","onThemeChange","onTransitionComplete","tempCanvas1","tempCanvas2","tempCtx1","tempCtx2","clearRect","globalAlpha","drawImage","Canvas","forwardRef","internalRef","canvasRef","themeManagerRef","isInitializedRef","themeManager","resizeCanvas","innerWidth","innerHeight","debouncedResize","func","args","debounce","handleMouseMove","lastCall","timeSinceLastCall","throttle","handleMouseEnter","handleMouseLeave","animationFrameId","frameInterval","fpsTime","render","currentWidth","currentHeight","currentProjCenterX","currentProjCenterY","cancelAnimationFrame","getThemeManager","useVoiceSettingsStore","selectedVoice","selectedPersona","isVoiceModalOpen","setVoice","voice","setPersona","setVoiceModalOpen","VoiceSettings","useRouter","previewVoice","setPreviewVoice","previewPersona","setPreviewPersona","previewModel","setPreviewModel","desc","StreamingTTSManager","initAudioContext","audioContext","AudioContext","webkitAudioContext","resume","addTextChunk","audioBuffer","textToSpeech","audioQueue","isPlaying","playNextChunk","addAudioBuffer","addAudioBufferWithId","chunkId","pendingChunks","nextExpectedChunkId","response_format","arrayBuffer","decodeAudioData","onPlaybackComplete","createBufferSource","connect","destination","onended","stopPlayback","resetChunkCounter","isCurrentlyPlaying","getQueueLength","onPlaybackCompleted","callback","onStreamingError","destroy","close","speechManager","debug","stopSourceIfNeeded","audioLength","audioDuration","onReset","sourceIsStarted","streamingTTS","validate","sendData","createAudioBlob","wavBuffer","utils","encodeWAV","samples","sendStreamingData","voiceSettings","conversationLength","conversationThusFar","audioSize","lastMessages","preview","base64Encode","__demoCustomGPTKey","processStreamingResponse","handleError","fullResponse","transcript","currentStreamingActive","onStreamingTextChunk","audioUrl","audioId","queueAudioChunk","queueAudioChunkById","responseLength","onTranscriptReceived","onResponseReceived","onStreamingComplete","audioDataUrl","numericChunkId","sampleRate","numberOfChannels","clonedBlob","minDuration","hasCallbacks","setProjectId","setSessionId","setVoiceSettings","setChatbotModel","chatbotModel","onDebug","str","TextEncoder","encode","btoa","fromCharCode","Uint8Array","base64Decode","base64","binaryStr","atob","char","charCodeAt","clearConversation","getConversationThusFar","setConversationHistory","cleanedMessages","self","originalCount","stopAudio","parseMarkdownForVoice","encrypt","decrypt","encrypted","isValidApiKey","trimmedKey","STORAGE_KEY","OPENAI_STORAGE_KEY","ENCRYPTION_KEY","SESSION_KEY","SESSION_TIMEOUT","useDemoStore","openAIApiKey","encryptionKey","isAuthenticated","sessionStartTime","sessionTimeout","encKey","array","crypto","getRandomValues","byte","generateKey","sessionInfo","setOpenAIApiKey","removeItem","clearApiKey","validateSession","initializeFromStorage","restoreSession","encryptedOpenAI","openAIKey","VoiceModalContent","projectName","setTranscript","agentResponse","setAgentResponse","isManualRecording","setIsManualRecording","setMediaRecorder","apiKeyError","setApiKeyError","isAgentSpeaking","setIsAgentSpeaking","isSettingsOpen","setIsSettingsOpen","voiceState","setVoiceState","isStreamingText","setIsStreamingText","streamingResponse","setStreamingResponse","currentUserMessageId","setCurrentUserMessageId","voiceConversation","setVoiceConversation","conversationSetupRef","checkOpenAIKeyAvailability","vad","useMicVAD","preSpeechPadFrames","positiveSpeechThreshold","negativeSpeechThreshold","minSpeechFrames","startOnLoad","workletURL","modelURL","onSpeechStart","onSpeechEnd","onVADMisfire","onMisfire","setupConversation","placeholderUserMessage","targetConversation","errorMsg","currentTitle","voiceTitle","cleanTranscript","words","updatedUserMessage","textChunk","newText","cleanResponse","onStreamingAudioReady","listening","pause","errored","handleToggleListening","recoveryError","permissionError","vadError","handleManualRecording","echoCancellation","noiseSuppression","autoGainControl","recorder","chunks","decodedAudio","channelData","getChannelData","audioArray","resampleRatio","newLength","Float32Array","srcIndex","srcIndexFloor","srcIndexCeil","fraction","hasAutoStarted","setHasAutoStarted","handleStopSpeech","jsx","global","pointerEvents","RotateLoader","color","AlertTriangle","flexDirection","zIndex","animationDirection","animationDuration","StopCircle","VoiceModal","DEFAULT_EXAMPLE_PROMPTS","ExamplePromptCard","WelcomeMessage","onPromptClick","exampleQuestions","setExampleQuestions","example_questions","questionCount","fetchExampleQuestions","MessageArea","scrollRef","isLoadingMessages","setIsLoadingMessages","prevConversationId","setPrevConversationId","selectedCitationId","setSelectedCitationId","citationModalOpen","setCitationModalOpen","previewCitationId","setPreviewCitationId","previewModalOpen","setPreviewModalOpen","setIsFreeTrialMode","freeTrialFlag","scrollBehavior","scrollTo","behavior","handleCitationClick","citationIndex","citationTitle","handlePreviewClick","filteredMessages","handleMessageFeedback","ChatHeader","onAgentSettings","enableConversationManagement","conversationRefreshKey","ChatContainer","threadId","onMessage","widget","setCurrentConversationId","setIsVoiceModalOpen","voiceError","setVoiceError","agentCount","hasCurrentAgent","currentAgentName","initializeAgents","switchConversation","newConv","configuration","isAuthError","handleVoiceClick","Select","SelectPrimitive","SelectValue","SelectTrigger","SelectScrollUpButton","SelectScrollDownButton","SelectContent","position","SelectItem","SimpleSelect","onValueChange","option","ConversationDetailsModal","formatFullTimestamp","weekday","year","month","day","hour","minute","second","timeZoneName","Hash","Calendar","Clock","deleted_at","created_by","DeleteConversationDialog","conversationName","onConfirm","onCancel","isDeleting","setIsDeleting","ConversationItem","onDelete","onRename","isEditing","setIsEditing","editName","setEditName","showMenu","setShowMenu","showDetails","setShowDetails","showDetailsModal","setShowDetailsModal","showDeleteDialog","setShowDeleteDialog","isLoading","setIsLoading","inputRef","menuRef","select","handleSaveEdit","onBlur","MoreHorizontal","Edit3","ConversationSidebar","isCollapsed","onConversationSelect","isCreating","setIsCreating","showSortFilter","setShowSortFilter","isSearching","setIsSearching","storeSearchQuery","storeSearchMode","storeDateFilter","localSearchQuery","setLocalSearchQuery","debouncedSearch","handleSearchModeChange","filteredConversations","handleRenameConversation","newName","handleSearch","Filter","handleDateFilterChange","Link","handleDeleteConversation","ChatLayout","showSidebar","widgetInstance","sidebarCollapsed","setSidebarCollapsed","mobileSidebarOpen","setMobileSidebarOpen","storeCurrentConversation","handleToggleSidebar","IframeApp","setConfig","isReady","setIsReady","urlParams","search","agentIdParam","iframeConfig","enableCitations","enableFeedback","isolateConversations","setupMessageHandling","postMessageToParent","handleOpen","handleClose","handleConfigUpdate","handleResize","postMessage","newConfig","updatedConfig","Toaster","closeButton","toastOptions","marginTop","initIframeApp","getElementById","createRoot","readyState","LODManager","initialLOD","particleReduction","effectsDisabled","glowDisabled","simplifiedRendering","skipFrames","currentLOD","lodProfiles","updateLOD","metrics","lastPerformanceCheck","performanceHistory","adjustLODBasedOnFPS","getCurrentLOD","shouldSkipFrame","FrustumCuller","updateBounds","bounds","bottom","near","far","isVisible","cullParticles","particles","getCullingStats","culled","cullingRatio","BatchRenderer","addToBatch","glowEnabled","effectsEnabled","batchKey","batches","batch","maxBatchSize","renderBatches","lodSettings","save","shouldRenderEffects","shouldRenderGlow","renderSimplifiedBatch","renderFullBatch","restore","moveTo","renderEffects","renderGlow","glowGradient","createRadialGradient","addColorStop","clearBatches","getBatchStats","batchCount","totalParticles","largestBatch","avgBatchSize","MemoryOptimizer","checkMemoryPressure","pressure","shouldCleanup","memInfo","usedJSHeapSize","memoryPressureThreshold","lastGCTime","gcInterval","getOptimizationSuggestions","reduceParticles","clearCaches","disableEffects","simplifyRendering","AnimationController","setTargetFPS","setupVisibilityHandling","actualInterval","shouldRenderFrame","lastFrameTime","getFrameTiming","shouldThrottle","ThemePerformanceManager","lodManager","culler","batchRenderer","memoryOptimizer","animationController","shouldRender","memoryPressure","optimizationActive","getManagers","lod","getPerformanceReport","culling","batching","performanceMonitor","performanceSettings","enableEffects","enableGlow","qualityLevel","initializePerformanceCallbacks","updateDimensions","initializePerformanceManager","setupPerformanceSettings","performanceManager","perfUpdate","currentLODSettings","updateTiming","updateStateTransition","updateMouseInfluence","clearCanvas","shouldShowPerformanceOverlay","drawPerformanceOverlay","setTargetState","mouseX","mouseY","targetMouseInfluence","isHovering","onMouseMove","onHoverChange","normalizedX","normalizedY","detector","getOptimalParticleCount","quality","light","low","medium","high","heavy","adjustPerformanceSettings","targetState","stateTransition","currentState","stateTransitionSpeed","deltaTimeAccumulator","animationTime","fillRect","font","fillText","getStateColor","idleColor","activeColor","getMouseInfluencedValue","baseValue","influencedValue","shouldEnableEffects","baseMax","getCurrentLODLevel","shouldUseSimplifiedRendering","getPerformanceManagers","isParticleVisible","managers","webpackEmptyContext","req","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","n","getter","__esModule","getPrototypeOf","ns","def","getOwnPropertyNames","definition","o","defineProperty","enumerable","promises","u","miniCssF","globalThis","Function","prop","prototype","hasOwnProperty","script","needAttach","scripts","getElementsByTagName","getAttribute","charset","nc","setAttribute","onScriptComplete","onload","doneFns","parentNode","bind","head","Symbol","toStringTag","installedChunks","installedChunkData","promise","realSrc","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}